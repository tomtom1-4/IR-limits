#-
#: IncDir procedures
#: SmallExtension 100M
#: WorkSpace      2G
Off Statistics;

Format 160;


****************************************
* diags function choice

#write "specify diagrams to calculate by defining first and last"

****************************************

#include declarations.h
* Read Feynman diagrams generated by diags.cpp (This is just to get the number of diagrams)
#include diagrams/diags.out
.sort
drop;

#write "`ndiags' diagrams for the soft current\n"

#ifndef `first'
#define first "1"
#endif

#ifndef `last'
#define last "`ndiags'"
#endif

.sort
#do i=`first',`last'

*#message d`i' / `ndiags'
* Read the Feynman diagram
#include diagrams/diags.out # d`i'
sum cOli0,...,cOli20;
sum cOlj0,...,cOlj20;
sum v4l0,...,v4l6;
sum v5l0,...,v5l6;
sum v6l0,...,v6l6;
sum v7l0,...,v7l6;
sum v8l0,...,v8l6;
* Include factor i for the integration measure ( which is d^d k/(i*pi^(d/2)) )
mul -i_;


mul replace_(p123, p1+p2+p3);
* Shift momenta to get the soft region
#call MomentumShift

* Remove closed Wilson loops
#call RemoveWilsonLoops

* Insert Feynman rules
#call FeynmanRules

* Rewrite generators in terms of Color operators
#call ColorOperators

* Remove contributions that don't cuppple to both Wilson line
id sumi = 0;
id sumj = 0;

* Bring color structure to a unique form
#call Color

* Extract singular limit and rewrite propagators to Eikonal propagators
#call SoftLim

* Remove reducible part J0*M1
id Eik(p3, p1) = 0;
id Eik(p3, p2) = 0;

*if(count(T1, 1) != 3 || count(T2, 1) != 2) discard;

b cOlT, T1, T2, cOlf, M, sumi, sumj, sumij, lam;
print d`i';
.sort

.store
.sort
save results/diags/d`i'.sav d`i';
#enddo

.end