#-
#: IncDir procedures
#: SmallExtension 100M
#: WorkSpace      2G
Off Statistics;

****************************************
* diags function choice

#write "specify diagrams to calculate by defining first and last"

****************************************

#include declarations.h
* Read Feynman diagrams generated by diags.cpp (This is just to get the number of diagrams)
#include diagrams/diags_ggg.out
.sort
drop;

#write "`ndiags' diagrams for the soft current\n"

#ifndef `first'
#define first "1"
#endif

#ifndef `last'
#define last "`ndiags'"
#endif

.sort
#do i=`first',`last'

#message d`i' / `ndiags'
* Read the Feynman diagram
#include diagrams/diags_ggg.out # d`i'

#call Kinematics
#call FeynmanRules
#call Dirac
#call WaveFunctions
sum cOlj1,...,cOlj8;
sum cOli1,...,cOli8;

** Remove couplings to second Wilson line
if(match(M(cOli1?, c2)) == 0) discard;

id cOlT(c1, cOli1?, cOli7?)*cOlT(cOli1?, cOli3?, cOli6?)*cOlT(cOli3?, cOli4?, cOli5?)*M(cOli4?, c2) = T(cOli7)*T(cOli6)*T(cOli5);
id cOlT(c1, cOli1?, cOli7?)*cOlT(cOli1?, cOli3?, cOli6?)*M(cOli3?, c2) = T(cOli7)*T(cOli6);
id cOlT(c1, cOli2?, cOli7?)*M(cOli2?, c2) = T(cOli7);

b T, M;
print+s d`i';
.sort

repeat;
  id T(cOli1?!{c3,c4})*T(c5) = T(c5)*T(cOli1) + i_*cOlf(cOli1, c5, cOli13)*T(cOli13);
  sum cOli13;
  id T(cOli1?!{c3})*T(c4) = T(c4)*T(cOli1) + i_*cOlf(cOli1, c4, cOli14)*T(cOli14);
  sum cOli14;
  id T(cOli1?)*T(c3) = T(c3)*T(cOli1) + i_*cOlf(cOli1, c3, cOli15)*T(cOli15);
  sum cOli15;
endrepeat;

*id T(cOli1?)*T(cOli2?) = TTsym(cOli1,cOli2)/2 + i_*cOlf(cOli1,cOli2,cOli10)*T(cOli10)/2;
sum cOli1,...,cOli11;
.sort
#call WaveFunctions
.sort

#call SoftLim
.sort
#call WaveFunctions
.store
.sort
*save results/diags_ggg/d`i'.sav d`i';
#enddo
g ggg = d`first'+...+d`last';
#call WaveFunctions
#call Kinematics

#call FullSimplify
#call Simplify
bracket cOlT, cOlf, delta, M, T, TTsym;
*bracket TTsym, den, s15;
format mathematica;
print+s ggg;
.store
save results/ggg.sav ggg;

.end