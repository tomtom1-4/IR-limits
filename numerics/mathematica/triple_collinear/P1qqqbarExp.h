l P0Avg = (ep^2*(2*p2q*s13*(s12 + s13 - s23) + 2*p1q*s23*(s12 - s13 + s23) -
        2*p3q*(s12^2 + 2*s13*s23 + s12*(s13 + s23))))/
      (9*(p1q + p2q + p3q)*s13*s23) +
     (2*ep*(-(p2q^2*p3q*(s12^2 + 2*s13*(s13 - 3*s23) + s12*(s13 - s23))) +
        p2q^3*s13*(s12 + s13 + s23) + p1q^3*s23*(s12 + s13 + s23) -
        p3q^3*(3*s12^2 + 3*s13^2 - 2*s13*s23 + 3*s23^2 + 4*s12*(s13 + s23)) -
        p2q*p3q^2*(3*s12^2 + 5*s13^2 - 8*s13*s23 + 3*s23^2 +
          2*s12*(2*s13 + s23)) - p1q^2*(p2q*(-(s12*s13) + s13^2 + 2*s12*s23 -
            3*s13*s23 + 4*s23^2) + p3q*(s12^2 + 2*s23*(-3*s13 + s23) +
            s12*(-s13 + s23))) - p1q*(p2q^2*(2*s12*s13 + 4*s13^2 - s12*s23 -
            3*s13*s23 + s23^2) + p2q*p3q*(s12^2 + 7*s13^2 - 10*s13*s23 +
            7*s23^2 + 2*s12*(s13 + s23)) + p3q^2*(3*s12^2 + 3*s13^2 -
            8*s13*s23 + 5*s23^2 + 2*s12*(s13 + 2*s23)))))/
      (9*(p1q + p3q)*(p2q + p3q)*(p1q + p2q + p3q)*s13*s23) +
     (2*(p1q^4*(p2q + p3q)*s13*(6*s13 - s23)*s23*(s12 + s13 + s23) -
        p3q*(p2q + p3q)*(p2q^3*s13*(s13 - 6*s23)*s23*(s12 + s13 + s23) -
          p2q*p3q^2*(2*s12^2*(s13 - 6*s23)*s23 + s12*s13*(12*s13^2 +
              4*s13*s23 - 5*s23^2) + 3*s13*s23*(2*s13^2 + s13*s23 +
              3*s23^2)) + p3q^3*(3*s12*s13*s23*(s13 + s23) -
            3*s13*s23*(s13^2 + s23^2) + s12^2*(6*s13^2 - 2*s13*s23 +
              6*s23^2)) + p2q^2*p3q*(6*s13^4 + 3*s13^3*s23 + 6*s12^2*s23^2 -
            s13^2*s23*(2*s12 + 9*s23) - s13*s23*(s12^2 + 5*s12*s23 +
              12*s23^2))) + p1q^3*(p2q^2*(-6*s13^4 + s13^3*s23 +
            s13*(s12 - 3*s23)*s23^2 - 6*s23^4 + s13^2*s23*(5*s12 + 4*s23)) +
          p2q*p3q*(s12^2*s13*s23 + 2*s12*s13*(6*s13^2 + 14*s13*s23 + s23^2) +
            s23*(31*s13^3 + 24*s13^2*s23 - 7*s13*s23^2 - 12*s23^3)) +
          p3q^2*(s12^2*s13*(-6*s13 + s23) + s12*s13*s23*(11*s13 + s23) +
            2*s23*(9*s13^3 + 7*s13^2*s23 - 2*s13*s23^2 - 3*s23^3))) +
        p1q^2*(p2q^3*(-6*s13^4 - 3*s13^3*s23 - 6*s23^4 +
            s13*s23^2*(5*s12 + s23) + s13^2*s23*(s12 + 4*s23)) +
          3*p3q^3*(s12^2*s13*(-6*s13 + s23) + 2*s12*s23^2*(s13 + 2*s23) +
            s23*(7*s13^3 + 4*s13^2*s23 + s13*s23^2 - 2*s23^3)) +
          2*p2q^2*p3q*(-9*s13^4 + s12^2*s13*s23 + 3*s13^3*s23 +
            9*s13^2*s23^2 + 3*s13*s23^3 - 9*s23^4 +
            s12*(6*s13^3 + 8*s13^2*s23 + 8*s13*s23^2 + 6*s23^3)) +
          p2q*p3q^2*(s12^2*s13*(-6*s13 + 5*s23) + 2*s23*(27*s13^3 +
              19*s13^2*s23 + 4*s13*s23^2 - 9*s23^3) +
            s12*(36*s13^3 + 39*s13^2*s23 + 17*s13*s23^2 + 24*s23^3))) +
        p1q*(-(p2q^4*s13*(s13 - 6*s23)*s23*(s12 + s13 + s23)) +
          p3q^4*(-2*s12^2*(9*s13^2 - 2*s13*s23 + 3*s23^2) +
            3*s13*s23*(4*s13^2 + s13*s23 + 3*s23^2) +
            s12*s23*(-8*s13^2 + s13*s23 + 12*s23^2)) +
          p2q^3*p3q*(-12*s13^4 - 7*s13^3*s23 + 12*s12*s23^3 +
            2*s13^2*s23*(s12 + 12*s23) + s13*s23*(s12^2 + 28*s12*s23 +
              31*s23^2)) + 2*p2q*p3q^3*(s12^2*(-6*s13^2 + 4*s13*s23 -
              6*s23^2) + s13*s23*(19*s13^2 + 14*s13*s23 + 19*s23^2) +
            9*s12*(2*s13^3 + s13^2*s23 + s13*s23^2 + 2*s23^3)) +
          p2q^2*p3q^2*(s12^2*(5*s13 - 6*s23)*s23 +
            2*s13*(-9*s13^3 + 4*s13^2*s23 + 19*s13*s23^2 + 27*s23^3) +
            s12*(24*s13^3 + 17*s13^2*s23 + 39*s13*s23^2 + 36*s23^3)))))/
      (9*(p1q + p3q)^2*(p2q + p3q)^2*(p1q + p2q + p3q)*s13^2*s23^2) +
     Ioperator*((14*ep*(p2q*s13*(s12 + s13 - s23) +
          p1q*s23*(s12 - s13 + s23) - p3q*(s12^2 + 2*s13*s23 +
            s12*(s13 + s23))))/(9*(p1q + p2q + p3q)*s13*s23) -
       (2*(-21*p2q^3*s13*(s12 + s13 + s23) - 21*p1q^3*s23*(s12 + s13 + s23) +
          p2q^2*p3q*(21*s12^2 + 29*s12*s13 + 50*s13^2 - 21*s12*s23 -
            134*s13*s23) + p2q*p3q^2*(55*s12^2 + 84*s12*s13 + 113*s13^2 +
            34*s12*s23 - 192*s13*s23 + 63*s23^2) +
          p3q^3*(55*s12^2 + 63*s13^2 - 58*s13*s23 + 63*s23^2 +
            76*s12*(s13 + s23)) + p1q^2*(p3q*(21*s12^2 - 21*s12*s13 +
              29*s12*s23 - 134*s13*s23 + 50*s23^2) +
            p2q*(-21*s12*s13 + 21*s13^2 + 50*s12*s23 - 71*s13*s23 +
              92*s23^2)) + p1q*(p2q^2*(50*s12*s13 + 92*s13^2 - 21*s12*s23 -
              71*s13*s23 + 21*s23^2) + p3q^2*(55*s12^2 + 34*s12*s13 +
              63*s13^2 + 84*s12*s23 - 192*s13*s23 + 113*s23^2) +
            p2q*p3q*(13*s12^2 + 155*s13^2 - 242*s13*s23 + 155*s23^2 +
              42*s12*(s13 + s23)))))/(27*(p1q + p3q)*(p2q + p3q)*
         (p1q + p2q + p3q)*s13*s23) -
       (16*(p1q^4*(p2q + p3q)*s13*(6*s13 - s23)*s23*(s12 + s13 + s23) -
          p3q*(p2q + p3q)*(p2q^3*s13*(s13 - 6*s23)*s23*(s12 + s13 + s23) -
            p2q*p3q^2*(2*s12^2*(s13 - 6*s23)*s23 + s12*s13*(12*s13^2 +
                4*s13*s23 - 5*s23^2) + 3*s13*s23*(2*s13^2 + s13*s23 +
                3*s23^2)) + p3q^3*(3*s12*s13*s23*(s13 + s23) -
              3*s13*s23*(s13^2 + s23^2) + s12^2*(6*s13^2 - 2*s13*s23 +
                6*s23^2)) + p2q^2*p3q*(6*s13^4 + 3*s13^3*s23 +
              6*s12^2*s23^2 - s13^2*s23*(2*s12 + 9*s23) - s13*s23*(s12^2 +
                5*s12*s23 + 12*s23^2))) +
          p1q^3*(p2q^2*(-6*s13^4 + s13^3*s23 + s13*(s12 - 3*s23)*s23^2 -
              6*s23^4 + s13^2*s23*(5*s12 + 4*s23)) +
            p2q*p3q*(s12^2*s13*s23 + 2*s12*s13*(6*s13^2 + 14*s13*s23 +
                s23^2) + s23*(31*s13^3 + 24*s13^2*s23 - 7*s13*s23^2 -
                12*s23^3)) + p3q^2*(s12^2*s13*(-6*s13 + s23) +
              s12*s13*s23*(11*s13 + s23) + 2*s23*(9*s13^3 + 7*s13^2*s23 -
                2*s13*s23^2 - 3*s23^3))) +
          p1q^2*(p2q^3*(-6*s13^4 - 3*s13^3*s23 - 6*s23^4 + s13*s23^2*(5*s12 +
                s23) + s13^2*s23*(s12 + 4*s23)) + 3*p3q^3*
             (s12^2*s13*(-6*s13 + s23) + 2*s12*s23^2*(s13 + 2*s23) +
              s23*(7*s13^3 + 4*s13^2*s23 + s13*s23^2 - 2*s23^3)) +
            2*p2q^2*p3q*(-9*s13^4 + s12^2*s13*s23 + 3*s13^3*s23 +
              9*s13^2*s23^2 + 3*s13*s23^3 - 9*s23^4 + s12*(6*s13^3 +
                8*s13^2*s23 + 8*s13*s23^2 + 6*s23^3)) +
            p2q*p3q^2*(s12^2*s13*(-6*s13 + 5*s23) + 2*s23*(27*s13^3 +
                19*s13^2*s23 + 4*s13*s23^2 - 9*s23^3) + s12*(36*s13^3 +
                39*s13^2*s23 + 17*s13*s23^2 + 24*s23^3))) +
          p1q*(-(p2q^4*s13*(s13 - 6*s23)*s23*(s12 + s13 + s23)) +
            p3q^4*(-2*s12^2*(9*s13^2 - 2*s13*s23 + 3*s23^2) +
              3*s13*s23*(4*s13^2 + s13*s23 + 3*s23^2) + s12*s23*(-8*s13^2 +
                s13*s23 + 12*s23^2)) + p2q^3*p3q*(-12*s13^4 - 7*s13^3*s23 +
              12*s12*s23^3 + 2*s13^2*s23*(s12 + 12*s23) + s13*s23*(s12^2 +
                28*s12*s23 + 31*s23^2)) + 2*p2q*p3q^3*
             (s12^2*(-6*s13^2 + 4*s13*s23 - 6*s23^2) + s13*s23*(19*s13^2 +
                14*s13*s23 + 19*s23^2) + 9*s12*(2*s13^3 + s13^2*s23 +
                s13*s23^2 + 2*s23^3)) + p2q^2*p3q^2*(s12^2*(5*s13 - 6*s23)*
               s23 + 2*s13*(-9*s13^3 + 4*s13^2*s23 + 19*s13*s23^2 +
                27*s23^3) + s12*(24*s13^3 + 17*s13^2*s23 + 39*s13*s23^2 +
                36*s23^3)))))/ep^2/(27*(p1q + p3q)^2*(p2q + p3q)^2*
         (p1q + p2q + p3q)*s13^2*s23^2) +
       (2*(p1q^4*(p2q + p3q)*s13*(126*s13 - 29*s23)*s23*(s12 + s13 + s23) -
          p3q*(p2q + p3q)*(p2q^3*s13*(29*s13 - 126*s23)*s23*
             (s12 + s13 + s23) + p3q^3*(31*s12*s13*s23*(s13 + s23) +
              s13*s23*(-87*s13^2 + 16*s13*s23 - 87*s23^2) +
              6*s12^2*(21*s13^2 - 11*s13*s23 + 21*s23^2)) +
            p2q*p3q^2*(6*s12^2*s23*(-11*s13 + 42*s23) + s13*s23*(-166*s13^2 +
                s13*s23 - 213*s23^2) + s12*s13*(-252*s13^2 - 116*s13*s23 +
                89*s23^2)) + p2q^2*p3q*(126*s13^4 + 47*s13^3*s23 +
              126*s12^2*s23^2 - s13^2*s23*(50*s12 + 141*s23) -
              s13*s23*(29*s12^2 + 97*s12*s23 + 252*s23^2))) +
          p1q^3*(p2q^2*(-126*s13^4 + 29*s13^3*s23 + s13*(37*s12 - 31*s23)*s23^
                2 - 126*s23^4 + s13^2*s23*(97*s12 + 60*s23)) +
            p2q*p3q*(29*s12^2*s13*s23 + 2*s12*s13*(126*s13^2 + 286*s13*s23 +
                29*s23^2) + s23*(659*s13^3 + 424*s13^2*s23 - 107*s13*s23^2 -
                252*s23^3)) + p3q^2*(s12*s13*s23*(223*s13 + 21*s23) +
              s12^2*s13*(-126*s13 + 29*s23) + 2*s23*(189*s13^3 +
                119*s13^2*s23 - 38*s13*s23^2 - 63*s23^3))) +
          p1q^2*(p2q^3*(-126*s13^4 - 31*s13^3*s23 - 126*s23^4 +
              s13*s23^2*(97*s12 + 29*s23) + s13^2*s23*(37*s12 + 60*s23)) +
            p3q^3*(s12^2*s13*(-378*s13 + 95*s23) + 2*s12*s23*(4*s13^2 +
                83*s13*s23 + 126*s23^2) + s23*(465*s13^3 + 140*s13^2*s23 +
                119*s13*s23^2 - 126*s23^3)) + 2*p2q^2*p3q*(-189*s13^4 +
              25*s12^2*s13*s23 + 111*s13^3*s23 + 125*s13^2*s23^2 +
              111*s13*s23^3 - 189*s23^4 + 18*s12*(7*s13^3 + 10*s13^2*s23 +
                10*s13*s23^2 + 7*s23^3)) + p2q*p3q^2*(s12^2*s13*(-126*s13 +
                145*s23) + 2*s23*(611*s13^3 + 291*s13^2*s23 + 156*s13*s23^2 -
                189*s23^3) + s12*(756*s13^3 + 835*s13^2*s23 + 429*s13*s23^2 +
                504*s23^3))) + p1q*(-(p2q^4*s13*(29*s13 - 126*s23)*s23*
              (s12 + s13 + s23)) + p3q^4*(-6*s12^2*(63*s13^2 - 22*s13*s23 +
                21*s23^2) + s12*s23*(-120*s13^2 + 85*s13*s23 + 252*s23^2) +
              s13*s23*(300*s13^2 - 17*s13*s23 + 253*s23^2)) +
            p2q^3*p3q*(-252*s13^4 - 107*s13^3*s23 + 252*s12*s23^3 +
              2*s13^2*s23*(29*s12 + 212*s23) + s13*s23*(29*s12^2 +
                572*s12*s23 + 659*s23^2)) + 2*p2q*p3q^3*
             (-2*s12^2*(63*s13^2 - 62*s13*s23 + 63*s23^2) +
              s13*s23*(471*s13^2 + 182*s13*s23 + 471*s23^2) +
              3*s12*(126*s13^3 + 79*s13^2*s23 + 79*s13*s23^2 + 126*s23^3)) +
            p2q^2*p3q^2*(s12^2*(145*s13 - 126*s23)*s23 + 2*s13*(-189*s13^3 +
                156*s13^2*s23 + 291*s13*s23^2 + 611*s23^3) + s12*(504*s13^3 +
                429*s13^2*s23 + 835*s13*s23^2 + 756*s23^3)))))/ep/
        (27*(p1q + p3q)^2*(p2q + p3q)^2*(p1q + p2q + p3q)*s13^2*s23^2) +
       nl*((ep*(-4*(p2q*s13*(s12 + s13 - s23) + p1q*s23*(s12 - s13 + s23)) +
            4*p3q*(s12^2 + 2*s13*s23 + s12*(s13 + s23))))/
          (27*(p1q + p2q + p3q)*s13*s23) +
         (4*(p2q^2*p3q*(s12^2 + 2*s13*(s13 - 3*s23) + s12*(s13 - s23)) -
            p2q^3*s13*(s12 + s13 + s23) - p1q^3*s23*(s12 + s13 + s23) +
            p3q^3*(3*s12^2 + 3*s13^2 - 2*s13*s23 + 3*s23^2 + 4*s12*(s13 +
                s23)) + p2q*p3q^2*(3*s12^2 + 5*s13^2 - 8*s13*s23 + 3*s23^2 +
              2*s12*(2*s13 + s23)) + p1q^2*(p2q*(-(s12*s13) + s13^2 +
                2*s12*s23 - 3*s13*s23 + 4*s23^2) + p3q*(s12^2 +
                2*s23*(-3*s13 + s23) + s12*(-s13 + s23))) +
            p1q*(p2q^2*(2*s12*s13 + 4*s13^2 - s12*s23 - 3*s13*s23 + s23^2) +
              p2q*p3q*(s12^2 + 7*s13^2 - 10*s13*s23 + 7*s23^2 +
                2*s12*(s13 + s23)) + p3q^2*(3*s12^2 + 3*s13^2 - 8*s13*s23 +
                5*s23^2 + 2*s12*(s13 + 2*s23)))))/(27*(p1q + p3q)*(p2q + p3q)*
           (p1q + p2q + p3q)*s13*s23) -
         (4*(p1q^4*(p2q + p3q)*s13*(6*s13 - s23)*s23*(s12 + s13 + s23) -
            p3q*(p2q + p3q)*(p2q^3*s13*(s13 - 6*s23)*s23*(s12 + s13 + s23) -
              p2q*p3q^2*(2*s12^2*(s13 - 6*s23)*s23 + s12*s13*(12*s13^2 +
                  4*s13*s23 - 5*s23^2) + 3*s13*s23*(2*s13^2 + s13*s23 +
                  3*s23^2)) + p3q^3*(3*s12*s13*s23*(s13 + s23) -
                3*s13*s23*(s13^2 + s23^2) + s12^2*(6*s13^2 - 2*s13*s23 +
                  6*s23^2)) + p2q^2*p3q*(6*s13^4 + 3*s13^3*s23 +
                6*s12^2*s23^2 - s13^2*s23*(2*s12 + 9*s23) - s13*s23*
                 (s12^2 + 5*s12*s23 + 12*s23^2))) +
            p1q^3*(p2q^2*(-6*s13^4 + s13^3*s23 + s13*(s12 - 3*s23)*s23^2 -
                6*s23^4 + s13^2*s23*(5*s12 + 4*s23)) + p2q*p3q*(s12^2*s13*
                 s23 + 2*s12*s13*(6*s13^2 + 14*s13*s23 + s23^2) +
                s23*(31*s13^3 + 24*s13^2*s23 - 7*s13*s23^2 - 12*s23^3)) +
              p3q^2*(s12^2*s13*(-6*s13 + s23) + s12*s13*s23*(11*s13 + s23) +
                2*s23*(9*s13^3 + 7*s13^2*s23 - 2*s13*s23^2 - 3*s23^3))) +
            p1q^2*(p2q^3*(-6*s13^4 - 3*s13^3*s23 - 6*s23^4 + s13*s23^2*
                 (5*s12 + s23) + s13^2*s23*(s12 + 4*s23)) +
              3*p3q^3*(s12^2*s13*(-6*s13 + s23) + 2*s12*s23^2*(s13 + 2*s23) +
                s23*(7*s13^3 + 4*s13^2*s23 + s13*s23^2 - 2*s23^3)) +
              2*p2q^2*p3q*(-9*s13^4 + s12^2*s13*s23 + 3*s13^3*s23 +
                9*s13^2*s23^2 + 3*s13*s23^3 - 9*s23^4 + s12*(6*s13^3 +
                  8*s13^2*s23 + 8*s13*s23^2 + 6*s23^3)) + p2q*p3q^2*(
                s12^2*s13*(-6*s13 + 5*s23) + 2*s23*(27*s13^3 + 19*s13^2*s23 +
                  4*s13*s23^2 - 9*s23^3) + s12*(36*s13^3 + 39*s13^2*s23 +
                  17*s13*s23^2 + 24*s23^3))) + p1q*(-(p2q^4*s13*(s13 - 6*s23)*
                s23*(s12 + s13 + s23)) + p3q^4*(-2*s12^2*(9*s13^2 -
                  2*s13*s23 + 3*s23^2) + 3*s13*s23*(4*s13^2 + s13*s23 +
                  3*s23^2) + s12*s23*(-8*s13^2 + s13*s23 + 12*s23^2)) +
              p2q^3*p3q*(-12*s13^4 - 7*s13^3*s23 + 12*s12*s23^3 +
                2*s13^2*s23*(s12 + 12*s23) + s13*s23*(s12^2 + 28*s12*s23 +
                  31*s23^2)) + 2*p2q*p3q^3*(s12^2*(-6*s13^2 + 4*s13*s23 -
                  6*s23^2) + s13*s23*(19*s13^2 + 14*s13*s23 + 19*s23^2) +
                9*s12*(2*s13^3 + s13^2*s23 + s13*s23^2 + 2*s23^3)) +
              p2q^2*p3q^2*(s12^2*(5*s13 - 6*s23)*s23 + 2*s13*(-9*s13^3 +
                  4*s13^2*s23 + 19*s13*s23^2 + 27*s23^3) + s12*(24*s13^3 +
                  17*s13^2*s23 + 39*s13*s23^2 + 36*s23^3)))))/ep/
          (27*(p1q + p3q)^2*(p2q + p3q)^2*(p1q + p2q + p3q)*s13^2*
           s23^2)) +
       ((ep*(-2*(p2q*s13*(s12 + s13 - s23) + p1q*s23*(s12 - s13 + s23)) +
            2*p3q*(s12^2 + 2*s13*s23 + s12*(s13 + s23))))/
          (27*(p1q + p2q + p3q)*s13*s23) -
         (2*(p2q^3*s13*(s12 + s13 + s23) + p1q^3*s23*(s12 + s13 + s23) -
            p2q*p3q^2*(3*s12^2 + 4*s12*s13 + 5*s13^2 - 22*s12*s23 +
              16*s13*s23 - 21*s23^2) + p3q^3*(-3*s12^2 - 3*s13^2 -
              4*s12*(s13 - 5*s23) + 2*s13*s23 + 21*s23^2) -
            p2q^2*p3q*(s12^2 + s12*(s13 - s23) + 2*s13*(s13 + 9*s23)) -
            p1q*(p3q^2*(3*s12^2 + 2*s12*s13 + 3*s13^2 - 44*s12*s23 -
                8*s13*s23 - 43*s23^2) + p2q*p3q*(s12^2 + 2*s12*s13 +
                7*s13^2 - 46*s12*s23 + 14*s13*s23 - 41*s23^2) +
              p2q^2*(2*s12*s13 + 4*s13^2 - s12*s23 + 21*s13*s23 + s23^2)) +
            p1q^2*(p2q*(s12*s13 - s13^2 + 22*s12*s23 + 3*s13*s23 +
                20*s23^2) + p3q*(-s12^2 + s12*s13 + 23*s12*s23 + 6*s13*s23 +
                22*s23^2))))/(27*(p1q + p3q)*(p2q + p3q)*(p1q + p2q + p3q)*
           s13*s23) - (2*(p1q^4*(p2q + p3q)*s13*(6*s13 - s23)*s23*
             (s12 + s13 + s23) - p3q*(p2q + p3q)*(p2q^3*s13*s23*(s12 + s13 +
                s23)*(s13 + 42*s23) + p3q^3*(3*s12*s13*(s13 - 7*s23)*s23 +
                s12^2*(6*s13^2 - 2*s13*s23 - 42*s23^2) - 3*s13*s23*
                 (s13^2 - 7*s23^2)) - p2q*p3q^2*(2*s12^2*s23*(s13 + 42*s23) +
                3*s13*s23*(2*s13^2 - 7*s13*s23 - 21*s23^2) + s12*s13*
                 (12*s13^2 + 4*s13*s23 + 19*s23^2)) + p2q^2*p3q*(6*s13^4 +
                3*s13^3*s23 - 42*s12^2*s23^2 + s13^2*s23*(-2*s12 + 63*s23) +
                s13*s23*(-s12^2 + 43*s12*s23 + 84*s23^2))) +
            p1q^2*(p2q^3*(-6*s13^4 - 3*s13^3*s23 + s13^2*(s12 - 20*s23)*s23 +
                42*s23^4 + s13*s23^2*(-43*s12 + s23)) + 2*p2q^2*p3q*(
                -9*s13^4 + s12^2*s13*s23 + 3*s13^3*s23 - 15*s13^2*s23^2 -
                9*s13*s23^3 + 63*s23^4 + s12*(6*s13^3 + 8*s13^2*s23 -
                  76*s13*s23^2 - 42*s23^3)) - 3*p3q^3*(s12^2*s13*
                 (6*s13 - s23) + 2*s12*s23^2*(11*s13 + 14*s23) -
                s23*(7*s13^3 + 4*s13^2*s23 - 7*s13*s23^2 + 14*s23^3)) +
              p2q*p3q^2*(s12^2*s13*(-6*s13 + 5*s23) + s12*(36*s13^3 +
                  39*s13^2*s23 - 175*s13*s23^2 - 168*s23^3) +
                2*s23*(27*s13^3 + 7*s13^2*s23 - 20*s13*s23^2 + 63*s23^3))) +
            p1q^3*(p2q^2*(-6*s13^4 + s13^3*s23 + 42*s23^4 + s13^2*s23*
                 (5*s12 + 4*s23) + s13*s23^2*(-23*s12 + 21*s23)) +
              p3q^2*(s12*s13*(11*s13 - 23*s23)*s23 + s12^2*s13*(-6*s13 +
                  s23) + 2*s23*(9*s13^3 + 7*s13^2*s23 + 10*s13*s23^2 +
                  21*s23^3)) + p2q*p3q*(s12^2*s13*s23 + 2*s12*s13*
                 (6*s13^2 + 14*s13*s23 - 23*s23^2) + s23*(31*s13^3 +
                  24*s13^2*s23 + 41*s13*s23^2 + 84*s23^3))) -
            p1q*(p2q^4*s13*s23*(s12 + s13 + s23)*(s13 + 42*s23) +
              p3q^4*(2*s12^2*(9*s13^2 - 2*s13*s23 - 21*s23^2) - 3*s13*s23*
                 (4*s13^2 + s13*s23 - 21*s23^2) + s12*s23*(8*s13^2 +
                  23*s13*s23 + 84*s23^2)) + p2q^3*p3q*(12*s13^4 +
                7*s13^3*s23 - 2*s13^2*(s12 - 84*s23)*s23 + 84*s12*s23^3 +
                s13*s23*(-s12^2 + 212*s12*s23 + 209*s23^2)) +
              2*p2q*p3q^3*(s12^2*(6*s13^2 - 4*s13*s23 - 42*s23^2) +
                s13*s23*(-19*s13^2 + 34*s13*s23 + 125*s23^2) -
                3*s12*(6*s13^3 + 3*s13^2*s23 - 29*s13*s23^2 - 42*s23^3)) +
              p2q^2*p3q^2*(-(s12^2*s23*(5*s13 + 42*s23)) + 2*s13*(9*s13^3 -
                  4*s13^2*s23 + 101*s13*s23^2 + 177*s23^3) +
                s12*(-24*s13^3 - 17*s13^2*s23 + 321*s13*s23^2 +
                  252*s23^3)))))/ep/(27*(p1q + p3q)^2*(p2q + p3q)^2*
           (p1q + p2q + p3q)*s13^2*s23^2))*Log(p1q/(p1q + p2q + p3q)) +
       ((ep*(-2*(p2q*s13*(s12 + s13 - s23) + p1q*s23*(s12 - s13 + s23)) +
            2*p3q*(s12^2 + 2*s13*s23 + s12*(s13 + s23))))/
          (27*(p1q + p2q + p3q)*s13*s23) -
         (2*(p2q^3*s13*(s12 + s13 + s23) + p1q^3*s23*(s12 + s13 + s23) +
            p2q^2*p3q*(-s12^2 + 23*s12*s13 + 22*s13^2 + s12*s23 +
              6*s13*s23) + p3q^3*(-3*s12^2 + 20*s12*s13 + 21*s13^2 -
              4*s12*s23 + 2*s13*s23 - 3*s23^2) + p2q*p3q^2*
             (-3*s12^2 + 44*s12*s13 + 43*s13^2 - 2*s12*s23 + 8*s13*s23 -
              3*s23^2) + p1q*(p2q^2*(22*s12*s13 + 20*s13^2 + s12*s23 +
                3*s13*s23 - s23^2) - p3q^2*(3*s12^2 - 22*s12*s13 - 21*s13^2 +
                4*s12*s23 + 16*s13*s23 + 5*s23^2) - p2q*p3q*(s12^2 -
                46*s12*s13 - 41*s13^2 + 2*s12*s23 + 14*s13*s23 + 7*s23^2)) -
            p1q^2*(p2q*(-(s12*s13) + s13^2 + 2*s12*s23 + 21*s13*s23 +
                4*s23^2) + p3q*(s12^2 + s12*(-s13 + s23) + 2*s23*
                 (9*s13 + s23)))))/(27*(p1q + p3q)*(p2q + p3q)*
           (p1q + p2q + p3q)*s13*s23) +
         (2*(p1q^4*(p2q + p3q)*s13*s23*(s12 + s13 + s23)*(42*s13 + s23) +
            p3q*(p2q + p3q)*(p2q^3*s13*(s13 - 6*s23)*s23*(s12 + s13 + s23) +
              p3q^3*(21*s13^3*s23 - 3*s13*s23^3 + 3*s12*s13*s23*(-7*s13 +
                  s23) - 2*s12^2*(21*s13^2 + s13*s23 - 3*s23^2)) +
              p2q*p3q^2*(-2*s12^2*(s13 - 6*s23)*s23 + 3*s13*s23*(14*s13^2 -
                  s13*s23 - 3*s23^2) + s12*s13*(84*s13^2 + 44*s13*s23 +
                  5*s23^2)) - p2q^2*p3q*(42*s13^4 + 21*s13^3*s23 -
                6*s12^2*s23^2 + s13^2*s23*(-22*s12 + 9*s23) + s13*s23*
                 (s12^2 + 5*s12*s23 + 12*s23^2))) +
            p1q^3*(p2q^2*(-42*s13^4 - s13^3*s23 + 6*s23^4 + s13*s23^2*
                 (-s12 + 3*s23) + s13^2*s23*(43*s12 + 20*s23)) +
              p3q^2*(s12*s13*(85*s13 - s23)*s23 - s12^2*s13*(42*s13 + s23) +
                2*s23*(63*s13^3 + 53*s13^2*s23 + 2*s13*s23^2 + 3*s23^3)) +
              p2q*p3q*(-(s12^2*s13*s23) + 2*s12*s13*(42*s13^2 + 106*s13*s23 -
                  s23^2) + s23*(209*s13^3 + 168*s13^2*s23 + 7*s13*s23^2 +
                  12*s23^3))) + p1q*(p2q^4*s13*(s13 - 6*s23)*s23*(s12 + s13 +
                s23) - p3q^4*(2*s12^2*(63*s13^2 + 2*s13*s23 - 3*s23^2) -
                3*s13*s23*(28*s13^2 + 7*s13*s23 - 3*s23^2) + s12*s23*
                 (40*s13^2 + s13*s23 + 12*s23^2)) - p2q^3*p3q*(84*s13^4 +
                41*s13^3*s23 + 12*s12*s23^3 + s13^2*(-46*s12*s23 +
                  24*s23^2) + s13*s23*(s12^2 + 28*s12*s23 + 31*s23^2)) -
              2*p2q*p3q^3*(s12^2*(42*s13^2 + 4*s13*s23 - 6*s23^2) +
                s13*s23*(-125*s13^2 - 34*s13*s23 + 19*s23^2) -
                3*s12*(42*s13^3 + 29*s13^2*s23 - 3*s13*s23^2 - 6*s23^3)) -
              p2q^2*p3q^2*(s12^2*(5*s13 - 6*s23)*s23 + 2*s13*(63*s13^3 -
                  20*s13^2*s23 + 7*s13*s23^2 + 27*s23^3) + s12*(-168*s13^3 -
                  175*s13^2*s23 + 39*s13*s23^2 + 36*s23^3))) +
            p1q^2*(-(p2q^3*(42*s13^4 + 21*s13^3*s23 - 6*s23^4 + s13*s23^2*
                  (5*s12 + s23) + s13^2*s23*(-23*s12 + 4*s23))) -
              3*p3q^3*(s12^2*s13*(42*s13 + s23) + 2*s12*s23*(-4*s13^2 +
                  s13*s23 + 2*s23^2) + s23*(-49*s13^3 - 28*s13^2*s23 +
                  s13*s23^2 - 2*s23^3)) + p2q*p3q^2*(-(s12^2*s13*(42*s13 +
                   5*s23)) + s12*(252*s13^3 + 321*s13^2*s23 - 17*s13*s23^2 -
                  24*s23^3) + 2*s23*(177*s13^3 + 101*s13^2*s23 -
                  4*s13*s23^2 + 9*s23^3)) - 2*p2q^2*p3q*(s12^2*s13*s23 +
                s12*(-42*s13^3 - 76*s13^2*s23 + 8*s13*s23^2 + 6*s23^3) +
                3*(21*s13^4 - 3*s13^3*s23 - 5*s13^2*s23^2 + s13*s23^3 -
                  3*s23^4)))))/ep/(27*(p1q + p3q)^2*(p2q + p3q)^2*
           (p1q + p2q + p3q)*s13^2*s23^2))*Log(p2q/(p1q + p2q + p3q)) +
       ((20*ep*(p2q*s13*(s12 + s13 - s23) + p1q*s23*(s12 - s13 + s23) -
            p3q*(s12^2 + 2*s13*s23 + s12*(s13 + s23))))/(27*(p1q + p2q + p3q)*
           s13*s23) + (4*(5*p2q^3*s13*(s12 + s13 + s23) +
            5*p1q^3*s23*(s12 + s13 + s23) - p3q^3*(15*s12^2 + 3*s13^2 -
              10*s13*s23 + 3*s23^2 + 8*s12*(s13 + s23)) -
            p2q*p3q^2*(15*s12^2 + s13^2 - 28*s13*s23 + 3*s23^2 -
              2*s12*(2*s13 + s23)) + p2q^2*p3q*(-5*s12^2 + s12*(7*s13 +
                5*s23) + 2*s13*(s13 + 9*s23)) +
            p1q*(p2q^2*(2*s12*s13 - 8*s13^2 + 5*s12*s23 + 3*s13*s23 -
                5*s23^2) + p2q*p3q*(-5*s12^2 - 11*s13^2 + 26*s13*s23 -
                11*s23^2 + 14*s12*(s13 + s23)) - p3q^2*(15*s12^2 + 3*s13^2 -
                28*s13*s23 + s23^2 - 2*s12*(s13 + 2*s23))) +
            p1q^2*(p2q*(5*s12*s13 - 5*s13^2 + 2*s12*s23 + 3*s13*s23 -
                8*s23^2) + p3q*(-5*s12^2 + 2*s23*(9*s13 + s23) +
                s12*(5*s13 + 7*s23)))))/(27*(p1q + p3q)*(p2q + p3q)*
           (p1q + p2q + p3q)*s13*s23) +
         (4*(p1q^4*(p2q + p3q)*s13*(6*s13 - 5*s23)*s23*(s12 + s13 + s23) -
            p3q*(p2q + p3q)*(p2q^3*s13*(5*s13 - 6*s23)*s23*(s12 + s13 +
                s23) + p3q^3*(3*s12*s13*s23*(s13 + s23) - 3*s13*s23*
                 (s13^2 + s23^2) + 2*s12^2*(3*s13^2 - 5*s13*s23 + 3*s23^2)) -
              p2q*p3q^2*(2*s12^2*(5*s13 - 6*s23)*s23 + s12*s13*(12*s13^2 -
                  4*s13*s23 - 13*s23^2) + 3*s13*s23*(2*s13^2 + s13*s23 +
                  3*s23^2)) + p2q^2*p3q*(6*s13^4 + 3*s13^3*s23 +
                s13^2*(2*s12 - 9*s23)*s23 + 6*s12^2*s23^2 - s13*s23*
                 (5*s12^2 + s12*s23 + 12*s23^2))) +
            p1q^3*(p2q^2*(-6*s13^4 + 5*s13^3*s23 - 6*s23^4 - s13*s23^2*
                 (7*s12 + 3*s23) + s13^2*s23*(s12 + 8*s23)) +
              p2q*p3q*(5*s12^2*s13*s23 + 2*s12*s13*(6*s13^2 + 10*s13*s23 -
                  7*s23^2) + s23*(35*s13^3 + 24*s13^2*s23 - 11*s13*s23^2 -
                  12*s23^3)) + p3q^2*(7*s12*s13*(s13 - s23)*s23 +
                s12^2*s13*(-6*s13 + 5*s23) + 2*s23*(9*s13^3 + 5*s13^2*s23 -
                  4*s13*s23^2 - 3*s23^3))) + p1q^2*(p2q^3*(-6*s13^4 -
                3*s13^3*s23 - 6*s23^4 + s13*s23^2*(s12 + 5*s23) +
                s13^2*s23*(-7*s12 + 8*s23)) - 3*p3q^3*(s12^2*s13*
                 (6*s13 - 5*s23) + 2*s12*s23*(2*s13^2 + s13*s23 - 2*s23^2) +
                s23*(-7*s13^3 - 4*s13^2*s23 - s13*s23^2 + 2*s23^3)) +
              2*p2q^2*p3q*(-9*s13^4 + 5*s12^2*s13*s23 + 9*s13^3*s23 +
                21*s13^2*s23^2 + 9*s13*s23^3 - 9*s23^4 + s12*(6*s13^3 -
                  2*s13^2*s23 - 2*s13*s23^2 + 6*s23^3)) + p2q*p3q^2*(
                s12^2*s13*(-6*s13 + 25*s23) + 2*s23*(33*s13^3 + 29*s13^2*
                   s23 + 8*s13*s23^2 - 9*s23^3) + s12*(36*s13^3 +
                  15*s13^2*s23 - 11*s13*s23^2 + 24*s23^3))) +
            p1q*(-(p2q^4*s13*(5*s13 - 6*s23)*s23*(s12 + s13 + s23)) +
              p2q^3*p3q*(-12*s13^4 - 11*s13^3*s23 + 12*s12*s23^3 +
                2*s13^2*s23*(-7*s12 + 12*s23) + 5*s13*s23*(s12^2 +
                  4*s12*s23 + 7*s23^2)) + p3q^4*(-2*s12^2*(9*s13^2 -
                  10*s13*s23 + 3*s23^2) + 3*s13*s23*(4*s13^2 + s13*s23 +
                  3*s23^2) + s12*s23*(-16*s13^2 - 7*s13*s23 + 12*s23^2)) +
              2*p2q*p3q^3*(s12^2*(-6*s13^2 + 20*s13*s23 - 6*s23^2) +
                s13*s23*(23*s13^2 + 22*s13*s23 + 23*s23^2) +
                3*s12*(6*s13^3 - s13^2*s23 - s13*s23^2 + 6*s23^3)) +
              p2q^2*p3q^2*(s12^2*(25*s13 - 6*s23)*s23 + 2*s13*(-9*s13^3 +
                  8*s13^2*s23 + 29*s13*s23^2 + 33*s23^3) + s12*(24*s13^3 -
                  11*s13^2*s23 + 15*s13*s23^2 + 36*s23^3)))))/ep/
          (27*(p1q + p3q)^2*(p2q + p3q)^2*(p1q + p2q + p3q)*s13^2*s23^2))*
        Log(p3q/(p1q + p2q + p3q)) +
       ((16*ep*(p2q*s13*(s12 + s13 - s23) + p1q*s23*(s12 - s13 + s23) -
            p3q*(s12^2 + 2*s13*s23 + s12*(s13 + s23))))/(27*(p1q + p2q + p3q)*
           s13*s23) + (16*(-(p2q^2*p3q*(s12^2 + 2*s13*(s13 - 3*s23) + s12*
                (s13 - s23))) + p2q^3*s13*(s12 + s13 + s23) +
            p1q^3*s23*(s12 + s13 + s23) - p3q^3*(3*s12^2 + 3*s13^2 -
              2*s13*s23 + 3*s23^2 + 4*s12*(s13 + s23)) -
            p2q*p3q^2*(3*s12^2 + 5*s13^2 - 8*s13*s23 + 3*s23^2 +
              2*s12*(2*s13 + s23)) - p1q^2*(p2q*(-(s12*s13) + s13^2 +
                2*s12*s23 - 3*s13*s23 + 4*s23^2) + p3q*(s12^2 +
                2*s23*(-3*s13 + s23) + s12*(-s13 + s23))) -
            p1q*(p2q^2*(2*s12*s13 + 4*s13^2 - s12*s23 - 3*s13*s23 + s23^2) +
              p2q*p3q*(s12^2 + 7*s13^2 - 10*s13*s23 + 7*s23^2 +
                2*s12*(s13 + s23)) + p3q^2*(3*s12^2 + 3*s13^2 - 8*s13*s23 +
                5*s23^2 + 2*s12*(s13 + 2*s23)))))/(27*(p1q + p3q)*(p2q + p3q)*
           (p1q + p2q + p3q)*s13*s23) +
         (16*(p1q^4*(p2q + p3q)*s13*(6*s13 - s23)*s23*(s12 + s13 + s23) -
            p3q*(p2q + p3q)*(p2q^3*s13*(s13 - 6*s23)*s23*(s12 + s13 + s23) -
              p2q*p3q^2*(2*s12^2*(s13 - 6*s23)*s23 + s12*s13*(12*s13^2 +
                  4*s13*s23 - 5*s23^2) + 3*s13*s23*(2*s13^2 + s13*s23 +
                  3*s23^2)) + p3q^3*(3*s12*s13*s23*(s13 + s23) -
                3*s13*s23*(s13^2 + s23^2) + s12^2*(6*s13^2 - 2*s13*s23 +
                  6*s23^2)) + p2q^2*p3q*(6*s13^4 + 3*s13^3*s23 +
                6*s12^2*s23^2 - s13^2*s23*(2*s12 + 9*s23) - s13*s23*
                 (s12^2 + 5*s12*s23 + 12*s23^2))) +
            p1q^3*(p2q^2*(-6*s13^4 + s13^3*s23 + s13*(s12 - 3*s23)*s23^2 -
                6*s23^4 + s13^2*s23*(5*s12 + 4*s23)) + p2q*p3q*(s12^2*s13*
                 s23 + 2*s12*s13*(6*s13^2 + 14*s13*s23 + s23^2) +
                s23*(31*s13^3 + 24*s13^2*s23 - 7*s13*s23^2 - 12*s23^3)) +
              p3q^2*(s12^2*s13*(-6*s13 + s23) + s12*s13*s23*(11*s13 + s23) +
                2*s23*(9*s13^3 + 7*s13^2*s23 - 2*s13*s23^2 - 3*s23^3))) +
            p1q^2*(p2q^3*(-6*s13^4 - 3*s13^3*s23 - 6*s23^4 + s13*s23^2*
                 (5*s12 + s23) + s13^2*s23*(s12 + 4*s23)) +
              3*p3q^3*(s12^2*s13*(-6*s13 + s23) + 2*s12*s23^2*(s13 + 2*s23) +
                s23*(7*s13^3 + 4*s13^2*s23 + s13*s23^2 - 2*s23^3)) +
              2*p2q^2*p3q*(-9*s13^4 + s12^2*s13*s23 + 3*s13^3*s23 +
                9*s13^2*s23^2 + 3*s13*s23^3 - 9*s23^4 + s12*(6*s13^3 +
                  8*s13^2*s23 + 8*s13*s23^2 + 6*s23^3)) + p2q*p3q^2*(
                s12^2*s13*(-6*s13 + 5*s23) + 2*s23*(27*s13^3 + 19*s13^2*s23 +
                  4*s13*s23^2 - 9*s23^3) + s12*(36*s13^3 + 39*s13^2*s23 +
                  17*s13*s23^2 + 24*s23^3))) + p1q*(-(p2q^4*s13*(s13 - 6*s23)*
                s23*(s12 + s13 + s23)) + p3q^4*(-2*s12^2*(9*s13^2 -
                  2*s13*s23 + 3*s23^2) + 3*s13*s23*(4*s13^2 + s13*s23 +
                  3*s23^2) + s12*s23*(-8*s13^2 + s13*s23 + 12*s23^2)) +
              p2q^3*p3q*(-12*s13^4 - 7*s13^3*s23 + 12*s12*s23^3 +
                2*s13^2*s23*(s12 + 12*s23) + s13*s23*(s12^2 + 28*s12*s23 +
                  31*s23^2)) + 2*p2q*p3q^3*(s12^2*(-6*s13^2 + 4*s13*s23 -
                  6*s23^2) + s13*s23*(19*s13^2 + 14*s13*s23 + 19*s23^2) +
                9*s12*(2*s13^3 + s13^2*s23 + s13*s23^2 + 2*s23^3)) +
              p2q^2*p3q^2*(s12^2*(5*s13 - 6*s23)*s23 + 2*s13*(-9*s13^3 +
                  4*s13^2*s23 + 19*s13*s23^2 + 27*s23^3) + s12*(24*s13^3 +
                  17*s13^2*s23 + 39*s13*s23^2 + 36*s23^3)))))/ep/
          (27*(p1q + p3q)^2*(p2q + p3q)^2*(p1q + p2q + p3q)*s13^2*s23^2))*
        Log(-s12 - s13 - s23) +
       ((20*ep*(p2q*s13*(s12 + s13 - s23) + p1q*s23*(s12 - s13 + s23) -
            p3q*(s12^2 + 2*s13*s23 + s12*(s13 + s23))))/(27*(p1q + p2q + p3q)*
           s13*s23) + (4*(5*p2q^3*s13*(s12 + s13 + s23) +
            5*p1q^3*s23*(s12 + s13 + s23) - p3q^3*(15*s12^2 + 3*s13^2 -
              10*s13*s23 + 3*s23^2 + 8*s12*(s13 + s23)) -
            p2q*p3q^2*(15*s12^2 + s13^2 - 28*s13*s23 + 3*s23^2 -
              2*s12*(2*s13 + s23)) + p2q^2*p3q*(-5*s12^2 + s12*(7*s13 +
                5*s23) + 2*s13*(s13 + 9*s23)) +
            p1q*(p2q^2*(2*s12*s13 - 8*s13^2 + 5*s12*s23 + 3*s13*s23 -
                5*s23^2) + p2q*p3q*(-5*s12^2 - 11*s13^2 + 26*s13*s23 -
                11*s23^2 + 14*s12*(s13 + s23)) - p3q^2*(15*s12^2 + 3*s13^2 -
                28*s13*s23 + s23^2 - 2*s12*(s13 + 2*s23))) +
            p1q^2*(p2q*(5*s12*s13 - 5*s13^2 + 2*s12*s23 + 3*s13*s23 -
                8*s23^2) + p3q*(-5*s12^2 + 2*s23*(9*s13 + s23) +
                s12*(5*s13 + 7*s23)))))/(27*(p1q + p3q)*(p2q + p3q)*
           (p1q + p2q + p3q)*s13*s23) +
         (4*(p1q^4*(p2q + p3q)*s13*(6*s13 - 5*s23)*s23*(s12 + s13 + s23) -
            p3q*(p2q + p3q)*(p2q^3*s13*(5*s13 - 6*s23)*s23*(s12 + s13 +
                s23) + p3q^3*(3*s12*s13*s23*(s13 + s23) - 3*s13*s23*
                 (s13^2 + s23^2) + 2*s12^2*(3*s13^2 - 5*s13*s23 + 3*s23^2)) -
              p2q*p3q^2*(2*s12^2*(5*s13 - 6*s23)*s23 + s12*s13*(12*s13^2 -
                  4*s13*s23 - 13*s23^2) + 3*s13*s23*(2*s13^2 + s13*s23 +
                  3*s23^2)) + p2q^2*p3q*(6*s13^4 + 3*s13^3*s23 +
                s13^2*(2*s12 - 9*s23)*s23 + 6*s12^2*s23^2 - s13*s23*
                 (5*s12^2 + s12*s23 + 12*s23^2))) +
            p1q^3*(p2q^2*(-6*s13^4 + 5*s13^3*s23 - 6*s23^4 - s13*s23^2*
                 (7*s12 + 3*s23) + s13^2*s23*(s12 + 8*s23)) +
              p2q*p3q*(5*s12^2*s13*s23 + 2*s12*s13*(6*s13^2 + 10*s13*s23 -
                  7*s23^2) + s23*(35*s13^3 + 24*s13^2*s23 - 11*s13*s23^2 -
                  12*s23^3)) + p3q^2*(7*s12*s13*(s13 - s23)*s23 +
                s12^2*s13*(-6*s13 + 5*s23) + 2*s23*(9*s13^3 + 5*s13^2*s23 -
                  4*s13*s23^2 - 3*s23^3))) + p1q^2*(p2q^3*(-6*s13^4 -
                3*s13^3*s23 - 6*s23^4 + s13*s23^2*(s12 + 5*s23) +
                s13^2*s23*(-7*s12 + 8*s23)) - 3*p3q^3*(s12^2*s13*
                 (6*s13 - 5*s23) + 2*s12*s23*(2*s13^2 + s13*s23 - 2*s23^2) +
                s23*(-7*s13^3 - 4*s13^2*s23 - s13*s23^2 + 2*s23^3)) +
              2*p2q^2*p3q*(-9*s13^4 + 5*s12^2*s13*s23 + 9*s13^3*s23 +
                21*s13^2*s23^2 + 9*s13*s23^3 - 9*s23^4 + s12*(6*s13^3 -
                  2*s13^2*s23 - 2*s13*s23^2 + 6*s23^3)) + p2q*p3q^2*(
                s12^2*s13*(-6*s13 + 25*s23) + 2*s23*(33*s13^3 + 29*s13^2*
                   s23 + 8*s13*s23^2 - 9*s23^3) + s12*(36*s13^3 +
                  15*s13^2*s23 - 11*s13*s23^2 + 24*s23^3))) +
            p1q*(-(p2q^4*s13*(5*s13 - 6*s23)*s23*(s12 + s13 + s23)) +
              p2q^3*p3q*(-12*s13^4 - 11*s13^3*s23 + 12*s12*s23^3 +
                2*s13^2*s23*(-7*s12 + 12*s23) + 5*s13*s23*(s12^2 +
                  4*s12*s23 + 7*s23^2)) + p3q^4*(-2*s12^2*(9*s13^2 -
                  10*s13*s23 + 3*s23^2) + 3*s13*s23*(4*s13^2 + s13*s23 +
                  3*s23^2) + s12*s23*(-16*s13^2 - 7*s13*s23 + 12*s23^2)) +
              2*p2q*p3q^3*(s12^2*(-6*s13^2 + 20*s13*s23 - 6*s23^2) +
                s13*s23*(23*s13^2 + 22*s13*s23 + 23*s23^2) +
                3*s12*(6*s13^3 - s13^2*s23 - s13*s23^2 + 6*s23^3)) +
              p2q^2*p3q^2*(s12^2*(25*s13 - 6*s23)*s23 + 2*s13*(-9*s13^3 +
                  8*s13^2*s23 + 29*s13*s23^2 + 33*s23^3) + s12*(24*s13^3 -
                  11*s13^2*s23 + 15*s13*s23^2 + 36*s23^3)))))/ep/
          (27*(p1q + p3q)^2*(p2q + p3q)^2*(p1q + p2q + p3q)*s13^2*s23^2))*
        Log(s12/(s12 + s13 + s23)) +
       ((ep*(-2*(p2q*s13*(s12 + s13 - s23) + p1q*s23*(s12 - s13 + s23)) +
            2*p3q*(s12^2 + 2*s13*s23 + s12*(s13 + s23))))/
          (27*(p1q + p2q + p3q)*s13*s23) -
         (2*(p2q^3*s13*(s12 + s13 + s23) + p1q^3*s23*(s12 + s13 + s23) +
            p2q^2*p3q*(-s12^2 + 23*s12*s13 + 22*s13^2 + s12*s23 +
              6*s13*s23) + p3q^3*(-3*s12^2 + 20*s12*s13 + 21*s13^2 -
              4*s12*s23 + 2*s13*s23 - 3*s23^2) + p2q*p3q^2*
             (-3*s12^2 + 44*s12*s13 + 43*s13^2 - 2*s12*s23 + 8*s13*s23 -
              3*s23^2) + p1q*(p2q^2*(22*s12*s13 + 20*s13^2 + s12*s23 +
                3*s13*s23 - s23^2) - p3q^2*(3*s12^2 - 22*s12*s13 - 21*s13^2 +
                4*s12*s23 + 16*s13*s23 + 5*s23^2) - p2q*p3q*(s12^2 -
                46*s12*s13 - 41*s13^2 + 2*s12*s23 + 14*s13*s23 + 7*s23^2)) -
            p1q^2*(p2q*(-(s12*s13) + s13^2 + 2*s12*s23 + 21*s13*s23 +
                4*s23^2) + p3q*(s12^2 + s12*(-s13 + s23) + 2*s23*
                 (9*s13 + s23)))))/(27*(p1q + p3q)*(p2q + p3q)*
           (p1q + p2q + p3q)*s13*s23) +
         (2*(p1q^4*(p2q + p3q)*s13*s23*(s12 + s13 + s23)*(42*s13 + s23) +
            p3q*(p2q + p3q)*(p2q^3*s13*(s13 - 6*s23)*s23*(s12 + s13 + s23) +
              p3q^3*(21*s13^3*s23 - 3*s13*s23^3 + 3*s12*s13*s23*(-7*s13 +
                  s23) - 2*s12^2*(21*s13^2 + s13*s23 - 3*s23^2)) +
              p2q*p3q^2*(-2*s12^2*(s13 - 6*s23)*s23 + 3*s13*s23*(14*s13^2 -
                  s13*s23 - 3*s23^2) + s12*s13*(84*s13^2 + 44*s13*s23 +
                  5*s23^2)) - p2q^2*p3q*(42*s13^4 + 21*s13^3*s23 -
                6*s12^2*s23^2 + s13^2*s23*(-22*s12 + 9*s23) + s13*s23*
                 (s12^2 + 5*s12*s23 + 12*s23^2))) +
            p1q^3*(p2q^2*(-42*s13^4 - s13^3*s23 + 6*s23^4 + s13*s23^2*
                 (-s12 + 3*s23) + s13^2*s23*(43*s12 + 20*s23)) +
              p3q^2*(s12*s13*(85*s13 - s23)*s23 - s12^2*s13*(42*s13 + s23) +
                2*s23*(63*s13^3 + 53*s13^2*s23 + 2*s13*s23^2 + 3*s23^3)) +
              p2q*p3q*(-(s12^2*s13*s23) + 2*s12*s13*(42*s13^2 + 106*s13*s23 -
                  s23^2) + s23*(209*s13^3 + 168*s13^2*s23 + 7*s13*s23^2 +
                  12*s23^3))) + p1q*(p2q^4*s13*(s13 - 6*s23)*s23*(s12 + s13 +
                s23) - p3q^4*(2*s12^2*(63*s13^2 + 2*s13*s23 - 3*s23^2) -
                3*s13*s23*(28*s13^2 + 7*s13*s23 - 3*s23^2) + s12*s23*
                 (40*s13^2 + s13*s23 + 12*s23^2)) - p2q^3*p3q*(84*s13^4 +
                41*s13^3*s23 + 12*s12*s23^3 + s13^2*(-46*s12*s23 +
                  24*s23^2) + s13*s23*(s12^2 + 28*s12*s23 + 31*s23^2)) -
              2*p2q*p3q^3*(s12^2*(42*s13^2 + 4*s13*s23 - 6*s23^2) +
                s13*s23*(-125*s13^2 - 34*s13*s23 + 19*s23^2) -
                3*s12*(42*s13^3 + 29*s13^2*s23 - 3*s13*s23^2 - 6*s23^3)) -
              p2q^2*p3q^2*(s12^2*(5*s13 - 6*s23)*s23 + 2*s13*(63*s13^3 -
                  20*s13^2*s23 + 7*s13*s23^2 + 27*s23^3) + s12*(-168*s13^3 -
                  175*s13^2*s23 + 39*s13*s23^2 + 36*s23^3))) +
            p1q^2*(-(p2q^3*(42*s13^4 + 21*s13^3*s23 - 6*s23^4 + s13*s23^2*
                  (5*s12 + s23) + s13^2*s23*(-23*s12 + 4*s23))) -
              3*p3q^3*(s12^2*s13*(42*s13 + s23) + 2*s12*s23*(-4*s13^2 +
                  s13*s23 + 2*s23^2) + s23*(-49*s13^3 - 28*s13^2*s23 +
                  s13*s23^2 - 2*s23^3)) + p2q*p3q^2*(-(s12^2*s13*(42*s13 +
                   5*s23)) + s12*(252*s13^3 + 321*s13^2*s23 - 17*s13*s23^2 -
                  24*s23^3) + 2*s23*(177*s13^3 + 101*s13^2*s23 -
                  4*s13*s23^2 + 9*s23^3)) - 2*p2q^2*p3q*(s12^2*s13*s23 +
                s12*(-42*s13^3 - 76*s13^2*s23 + 8*s13*s23^2 + 6*s23^3) +
                3*(21*s13^4 - 3*s13^3*s23 - 5*s13^2*s23^2 + s13*s23^3 -
                  3*s23^4)))))/ep/(27*(p1q + p3q)^2*(p2q + p3q)^2*
           (p1q + p2q + p3q)*s13^2*s23^2))*Log(s13/(s12 + s13 + s23)) +
       ((ep*(-2*(p2q*s13*(s12 + s13 - s23) + p1q*s23*(s12 - s13 + s23)) +
            2*p3q*(s12^2 + 2*s13*s23 + s12*(s13 + s23))))/
          (27*(p1q + p2q + p3q)*s13*s23) -
         (2*(p2q^3*s13*(s12 + s13 + s23) + p1q^3*s23*(s12 + s13 + s23) -
            p2q*p3q^2*(3*s12^2 + 4*s12*s13 + 5*s13^2 - 22*s12*s23 +
              16*s13*s23 - 21*s23^2) + p3q^3*(-3*s12^2 - 3*s13^2 -
              4*s12*(s13 - 5*s23) + 2*s13*s23 + 21*s23^2) -
            p2q^2*p3q*(s12^2 + s12*(s13 - s23) + 2*s13*(s13 + 9*s23)) -
            p1q*(p3q^2*(3*s12^2 + 2*s12*s13 + 3*s13^2 - 44*s12*s23 -
                8*s13*s23 - 43*s23^2) + p2q*p3q*(s12^2 + 2*s12*s13 +
                7*s13^2 - 46*s12*s23 + 14*s13*s23 - 41*s23^2) +
              p2q^2*(2*s12*s13 + 4*s13^2 - s12*s23 + 21*s13*s23 + s23^2)) +
            p1q^2*(p2q*(s12*s13 - s13^2 + 22*s12*s23 + 3*s13*s23 +
                20*s23^2) + p3q*(-s12^2 + s12*s13 + 23*s12*s23 + 6*s13*s23 +
                22*s23^2))))/(27*(p1q + p3q)*(p2q + p3q)*(p1q + p2q + p3q)*
           s13*s23) - (2*(p1q^4*(p2q + p3q)*s13*(6*s13 - s23)*s23*
             (s12 + s13 + s23) - p3q*(p2q + p3q)*(p2q^3*s13*s23*(s12 + s13 +
                s23)*(s13 + 42*s23) + p3q^3*(3*s12*s13*(s13 - 7*s23)*s23 +
                s12^2*(6*s13^2 - 2*s13*s23 - 42*s23^2) - 3*s13*s23*
                 (s13^2 - 7*s23^2)) - p2q*p3q^2*(2*s12^2*s23*(s13 + 42*s23) +
                3*s13*s23*(2*s13^2 - 7*s13*s23 - 21*s23^2) + s12*s13*
                 (12*s13^2 + 4*s13*s23 + 19*s23^2)) + p2q^2*p3q*(6*s13^4 +
                3*s13^3*s23 - 42*s12^2*s23^2 + s13^2*s23*(-2*s12 + 63*s23) +
                s13*s23*(-s12^2 + 43*s12*s23 + 84*s23^2))) +
            p1q^2*(p2q^3*(-6*s13^4 - 3*s13^3*s23 + s13^2*(s12 - 20*s23)*s23 +
                42*s23^4 + s13*s23^2*(-43*s12 + s23)) + 2*p2q^2*p3q*(
                -9*s13^4 + s12^2*s13*s23 + 3*s13^3*s23 - 15*s13^2*s23^2 -
                9*s13*s23^3 + 63*s23^4 + s12*(6*s13^3 + 8*s13^2*s23 -
                  76*s13*s23^2 - 42*s23^3)) - 3*p3q^3*(s12^2*s13*
                 (6*s13 - s23) + 2*s12*s23^2*(11*s13 + 14*s23) -
                s23*(7*s13^3 + 4*s13^2*s23 - 7*s13*s23^2 + 14*s23^3)) +
              p2q*p3q^2*(s12^2*s13*(-6*s13 + 5*s23) + s12*(36*s13^3 +
                  39*s13^2*s23 - 175*s13*s23^2 - 168*s23^3) +
                2*s23*(27*s13^3 + 7*s13^2*s23 - 20*s13*s23^2 + 63*s23^3))) +
            p1q^3*(p2q^2*(-6*s13^4 + s13^3*s23 + 42*s23^4 + s13^2*s23*
                 (5*s12 + 4*s23) + s13*s23^2*(-23*s12 + 21*s23)) +
              p3q^2*(s12*s13*(11*s13 - 23*s23)*s23 + s12^2*s13*(-6*s13 +
                  s23) + 2*s23*(9*s13^3 + 7*s13^2*s23 + 10*s13*s23^2 +
                  21*s23^3)) + p2q*p3q*(s12^2*s13*s23 + 2*s12*s13*
                 (6*s13^2 + 14*s13*s23 - 23*s23^2) + s23*(31*s13^3 +
                  24*s13^2*s23 + 41*s13*s23^2 + 84*s23^3))) -
            p1q*(p2q^4*s13*s23*(s12 + s13 + s23)*(s13 + 42*s23) +
              p3q^4*(2*s12^2*(9*s13^2 - 2*s13*s23 - 21*s23^2) - 3*s13*s23*
                 (4*s13^2 + s13*s23 - 21*s23^2) + s12*s23*(8*s13^2 +
                  23*s13*s23 + 84*s23^2)) + p2q^3*p3q*(12*s13^4 +
                7*s13^3*s23 - 2*s13^2*(s12 - 84*s23)*s23 + 84*s12*s23^3 +
                s13*s23*(-s12^2 + 212*s12*s23 + 209*s23^2)) +
              2*p2q*p3q^3*(s12^2*(6*s13^2 - 4*s13*s23 - 42*s23^2) +
                s13*s23*(-19*s13^2 + 34*s13*s23 + 125*s23^2) -
                3*s12*(6*s13^3 + 3*s13^2*s23 - 29*s13*s23^2 - 42*s23^3)) +
              p2q^2*p3q^2*(-(s12^2*s23*(5*s13 + 42*s23)) + 2*s13*(9*s13^3 -
                  4*s13^2*s23 + 101*s13*s23^2 + 177*s23^3) +
                s12*(-24*s13^3 - 17*s13^2*s23 + 321*s13*s23^2 +
                  252*s23^3)))))/ep/(27*(p1q + p3q)^2*(p2q + p3q)^2*
           (p1q + p2q + p3q)*s13^2*s23^2))*Log(s23/(s12 + s13 + s23)));

l P1PolExp = ((p1q*p2q^4*((16*s12*s13^2 + 16*s13^3)*s23 +
         (-96*s12*s13 - 80*s13^2)*s23^2 - 96*s13*s23^3) +
       p3q^5*(96*s12^2*s13^2 + (-32*s12^2*s13 + 48*s12*s13^2 - 48*s13^3)*
          s23 + (96*s12^2 + 48*s12*s13)*s23^2 - 48*s13*s23^3) +
       p1q^4*p2q*((-96*s12*s13^2 - 96*s13^3)*s23 + (16*s12*s13 - 80*s13^2)*
          s23^2 + 16*s13*s23^3) + p1q^2*p2q^3*(96*s13^4 +
         (-16*s12*s13^2 + 48*s13^3)*s23 + (-80*s12*s13 - 64*s13^2)*s23^2 -
         16*s13*s23^3 + 96*s23^4) + p1q^3*p2q^2*(96*s13^4 +
         (-80*s12*s13^2 - 16*s13^3)*s23 + (-16*s12*s13 - 64*s13^2)*s23^2 +
         48*s13*s23^3 + 96*s23^4) +
       p3q^4*(p1q*(288*s12^2*s13^2 + (-64*s12^2*s13 + 128*s12*s13^2 -
             192*s13^3)*s23 + (96*s12^2 - 16*s12*s13 - 48*s13^2)*s23^2 +
           (-192*s12 - 144*s13)*s23^3) + p2q*(96*s12^2*s13^2 -
           192*s12*s13^3 + (-64*s12^2*s13 - 16*s12*s13^2 - 144*s13^3)*s23 +
           (288*s12^2 + 128*s12*s13 - 48*s13^2)*s23^2 - 192*s13*s23^3)) +
       p3q^3*(p1q*p2q*(192*s12^2*s13^2 - 576*s12*s13^3 +
           (-128*s12^2*s13 - 288*s12*s13^2 - 608*s13^3)*s23 +
           (192*s12^2 - 288*s12*s13 - 448*s13^2)*s23^2 + (-576*s12 - 608*s13)*
            s23^3) + p2q^2*(-192*s12*s13^3 + 96*s13^4 +
           (-48*s12^2*s13 - 96*s12*s13^2 - 48*s13^3)*s23 +
           (288*s12^2 - 192*s13^2)*s23^2 - 336*s13*s23^3) +
         p1q^2*(288*s12^2*s13^2 + (-48*s12^2*s13 - 336*s13^3)*s23 +
           (-96*s12*s13 - 192*s13^2)*s23^2 + (-192*s12 - 48*s13)*s23^3 +
           96*s23^4)) + p3q^2*(p1q*p2q^2*(-384*s12*s13^3 + 288*s13^4 +
           (-80*s12^2*s13 - 272*s12*s13^2 - 128*s13^3)*s23 +
           (96*s12^2 - 624*s12*s13 - 608*s13^2)*s23^2 + (-576*s12 - 864*s13)*
            s23^3) + p2q^3*(96*s13^4 + (-16*s12^2*s13 - 16*s12*s13^2 +
             64*s13^3)*s23 + (96*s12^2 - 176*s12*s13 - 224*s13^2)*s23^2 -
           288*s13*s23^3) + p1q^3*(96*s12^2*s13^2 +
           (-16*s12^2*s13 - 176*s12*s13^2 - 288*s13^3)*s23 +
           (-16*s12*s13 - 224*s13^2)*s23^2 + 64*s13*s23^3 + 96*s23^4) +
         p1q^2*p2q*(96*s12^2*s13^2 - 576*s12*s13^3 +
           (-80*s12^2*s13 - 624*s12*s13^2 - 864*s13^3)*s23 +
           (-272*s12*s13 - 608*s13^2)*s23^2 + (-384*s12 - 128*s13)*s23^3 +
           288*s23^4)) + p3q*(p1q*p2q^3*(192*s13^4 +
           (-16*s12^2*s13 - 32*s12*s13^2 + 112*s13^3)*s23 +
           (-448*s12*s13 - 384*s13^2)*s23^2 + (-192*s12 - 496*s13)*s23^3) +
         p2q^4*((16*s12*s13^2 + 16*s13^3)*s23 + (-96*s12*s13 - 80*s13^2)*
            s23^2 - 96*s13*s23^3) + p1q^4*((-96*s12*s13^2 - 96*s13^3)*s23 +
           (16*s12*s13 - 80*s13^2)*s23^2 + 16*s13*s23^3) +
         p1q^3*p2q*(-192*s12*s13^3 + (-16*s12^2*s13 - 448*s12*s13^2 -
             496*s13^3)*s23 + (-32*s12*s13 - 384*s13^2)*s23^2 +
           112*s13*s23^3 + 192*s23^4) + p1q^2*p2q^2*(-192*s12*s13^3 +
           288*s13^4 + (-32*s12^2*s13 - 256*s12*s13^2 - 96*s13^3)*s23 +
           (-256*s12*s13 - 288*s13^2)*s23^2 + (-192*s12 - 96*s13)*s23^3 +
           288*s23^4)))/ep^2/((27*p1q^3*p2q^2*s13^2*s23^2 +
        27*p1q^2*p2q^3*s13^2*s23^2 + 27*p3q^5*s13^2*s23^2 +
        p3q^4*(81*p1q*s13^2*s23^2 + 81*p2q*s13^2*s23^2) +
        p3q^3*(81*p1q^2*s13^2*s23^2 + 216*p1q*p2q*s13^2*s23^2 +
          81*p2q^2*s13^2*s23^2) + p3q^2*(27*p1q^3*s13^2*s23^2 +
          189*p1q^2*p2q*s13^2*s23^2 + 189*p1q*p2q^2*s13^2*s23^2 +
          27*p2q^3*s13^2*s23^2) + p3q*(54*p1q^3*p2q*s13^2*s23^2 +
          135*p1q^2*p2q^2*s13^2*s23^2 + 54*p1q*p2q^3*s13^2*s23^2))) +
     (p1q^4*p2q*((528*s12^3*s13^2 + 1056*s12^2*s13^3 + 528*s12*s13^4)*s23 +
         (-51*s12^3*s13 + 924*s12^2*s13^2 + 1503*s12*s13^3 + 528*s13^4)*
          s23^2 + (-102*s12^2*s13 + 315*s12*s13^2 + 447*s13^3)*s23^3 +
         (-51*s12*s13 - 81*s13^2)*s23^4) + p3q^5*(-558*s12^4*s13^2 -
         558*s12^3*s13^3 + (76*s12^4*s13 - 903*s12^3*s13^2 -
           841*s12^2*s13^3 + 168*s12*s13^4)*s23 +
         (-558*s12^4 - 903*s12^3*s13 - 640*s12^2*s13^2 - 162*s12*s13^3 +
           168*s13^4)*s23^2 + (-558*s12^3 - 841*s12^2*s13 - 162*s12*s13^2 +
           116*s13^3)*s23^3 + (168*s12*s13 + 168*s13^2)*s23^4) +
       p1q*p2q^4*((-51*s12^3*s13^2 - 102*s12^2*s13^3 - 51*s12*s13^4)*s23 +
         (528*s12^3*s13 + 924*s12^2*s13^2 + 315*s12*s13^3 - 81*s13^4)*s23^2 +
         (1056*s12^2*s13 + 1503*s12*s13^2 + 447*s13^3)*s23^3 +
         (528*s12*s13 + 528*s13^2)*s23^4) + p1q^3*p2q^2*
        (-528*s12^2*s13^4 - 528*s12*s13^5 + (507*s12^3*s13^2 +
           558*s12^2*s13^3 - 417*s12*s13^4 - 528*s13^5)*s23 +
         (8*s12^3*s13 + 1034*s12^2*s13^2 + 1102*s12*s13^3 + 116*s13^4)*
          s23^2 + (-470*s12^2*s13 + 39*s12*s13^2 + 534*s13^3)*s23^3 +
         (-558*s12^2 - 1011*s12*s13 - 453*s13^2)*s23^4 +
         (-558*s12 - 563*s13)*s23^5) + p1q^2*p2q^3*(-558*s12^2*s13^4 -
         558*s12*s13^5 + (8*s12^3*s13^2 - 470*s12^2*s13^3 - 1011*s12*s13^4 -
           563*s13^5)*s23 + (507*s12^3*s13 + 1034*s12^2*s13^2 +
           39*s12*s13^3 - 453*s13^4)*s23^2 +
         (558*s12^2*s13 + 1102*s12*s13^2 + 534*s13^3)*s23^3 +
         (-528*s12^2 - 417*s12*s13 + 116*s13^2)*s23^4 + (-528*s12 - 528*s13)*
          s23^5) + p3q^4*(p1q*(-1644*s12^4*s13^2 - 1644*s12^3*s13^3 +
           (157*s12^4*s13 - 2366*s12^3*s13^2 - 1749*s12^2*s13^3 +
             894*s12*s13^4)*s23 + (-558*s12^4 - 583*s12^3*s13 -
             75*s12^2*s13^2 + 674*s12*s13^3 + 894*s13^4)*s23^2 +
           (558*s12^3 + 826*s12^2*s13 + 1072*s12*s13^2 + 764*s13^3)*s23^3 +
           (1116*s12^2 + 1656*s12*s13 + 530*s13^2)*s23^4) +
         p2q*(-558*s12^4*s13^2 + 558*s12^3*s13^3 + 1116*s12^2*s13^4 +
           (157*s12^4*s13 - 583*s12^3*s13^2 + 826*s12^2*s13^3 +
             1656*s12*s13^4)*s23 + (-1644*s12^4 - 2366*s12^3*s13 -
             75*s12^2*s13^2 + 1072*s12*s13^3 + 530*s13^4)*s23^2 +
           (-1644*s12^3 - 1749*s12^2*s13 + 674*s12*s13^2 + 764*s13^3)*s23^3 +
           (894*s12*s13 + 894*s13^2)*s23^4)) +
       p3q*(p1q^4*((528*s12^3*s13^2 + 1056*s12^2*s13^3 + 528*s12*s13^4)*s23 +
           (-51*s12^3*s13 + 924*s12^2*s13^2 + 1503*s12*s13^3 + 528*s13^4)*
            s23^2 + (-102*s12^2*s13 + 315*s12*s13^2 + 447*s13^3)*s23^3 +
           (-51*s12*s13 - 81*s13^2)*s23^4) +
         p2q^4*((-51*s12^3*s13^2 - 102*s12^2*s13^3 - 51*s12*s13^4)*s23 +
           (528*s12^3*s13 + 924*s12^2*s13^2 + 315*s12*s13^3 - 81*s13^4)*
            s23^2 + (1056*s12^2*s13 + 1503*s12*s13^2 + 447*s13^3)*s23^3 +
           (528*s12*s13 + 528*s13^2)*s23^4) + p1q*p2q^3*(-1116*s12^2*s13^4 -
           1116*s12*s13^5 + (51*s12^4*s13 + 146*s12^3*s13^2 -
             833*s12^2*s13^3 - 1994*s12*s13^4 - 1126*s13^5)*s23 +
           (2679*s12^3*s13 + 5338*s12^2*s13^2 + 1651*s12*s13^3 - 938*s13^4)*
            s23^2 + (1056*s12^3 + 6345*s12^2*s13 + 7838*s12*s13^2 +
             2534*s13^3)*s23^3 + (1056*s12^2 + 3837*s12*s13 + 2786*s13^2)*
            s23^4) + p1q^2*p2q^2*(1116*s12^3*s13^3 - 498*s12^2*s13^4 -
           1614*s12*s13^5 + (160*s12^4*s13 + 1546*s12^3*s13^2 +
             2484*s12^2*s13^3 - 311*s12*s13^4 - 1619*s13^5)*s23 +
           (1546*s12^3*s13 + 5394*s12^2*s13^2 + 3850*s12*s13^3 + 187*s13^4)*
            s23^2 + (1116*s12^3 + 2484*s12^2*s13 + 3850*s12*s13^2 +
             2512*s13^3)*s23^3 + (-498*s12^2 - 311*s12*s13 + 187*s13^2)*
            s23^4 + (-1614*s12 - 1619*s13)*s23^5) +
         p1q^3*p2q*(1056*s12^3*s13^3 + 1056*s12^2*s13^4 +
           (51*s12^4*s13 + 2679*s12^3*s13^2 + 6345*s12^2*s13^3 +
             3837*s12*s13^4)*s23 + (146*s12^3*s13 + 5338*s12^2*s13^2 +
             7838*s12*s13^3 + 2786*s13^4)*s23^2 +
           (-833*s12^2*s13 + 1651*s12*s13^2 + 2534*s13^3)*s23^3 +
           (-1116*s12^2 - 1994*s12*s13 - 938*s13^2)*s23^4 +
           (-1116*s12 - 1126*s13)*s23^5)) +
       p3q^2*(p2q^3*(-558*s12^2*s13^4 - 558*s12*s13^5 +
           (51*s12^4*s13 + 138*s12^3*s13^2 - 363*s12^2*s13^3 -
             983*s12*s13^4 - 563*s13^5)*s23 + (-528*s12^4 + 588*s12^3*s13 +
             2720*s12^2*s13^2 + 1084*s12*s13^3 - 485*s13^4)*s23^2 +
           (-528*s12^3 + 2091*s12^2*s13 + 4096*s12*s13^2 + 1472*s13^3)*
            s23^3 + (1614*s12*s13 + 1614*s13^2)*s23^4) +
         p1q*p2q^2*(2232*s12^3*s13^3 + 588*s12^2*s13^4 - 1644*s12*s13^5 +
           (292*s12^4*s13 + 1548*s12^3*s13^2 + 3332*s12^2*s13^3 +
             662*s12*s13^4 - 1654*s13^5)*s23 + (-558*s12^4 + 3303*s12^3*s13 +
             9889*s12^2*s13^2 + 5807*s12*s13^3 + 29*s13^4)*s23^2 +
           (2670*s12^3 + 10473*s12^2*s13 + 12520*s12*s13^2 + 4707*s13^3)*
            s23^3 + (3228*s12^2 + 7792*s12*s13 + 4564*s13^2)*s23^4) +
         p1q^2*p2q*(-558*s12^4*s13^2 + 2670*s12^3*s13^3 + 3228*s12^2*s13^4 +
           (292*s12^4*s13 + 3303*s12^3*s13^2 + 10473*s12^2*s13^3 +
             7792*s12*s13^4)*s23 + (1548*s12^3*s13 + 9889*s12^2*s13^2 +
             12520*s12*s13^3 + 4564*s13^4)*s23^2 +
           (2232*s12^3 + 3332*s12^2*s13 + 5807*s12*s13^2 + 4707*s13^3)*
            s23^3 + (588*s12^2 + 662*s12*s13 + 29*s13^2)*s23^4 +
           (-1644*s12 - 1654*s13)*s23^5) + p1q^3*(-528*s12^4*s13^2 -
           528*s12^3*s13^3 + (51*s12^4*s13 + 588*s12^3*s13^2 +
             2091*s12^2*s13^3 + 1614*s12*s13^4)*s23 +
           (138*s12^3*s13 + 2720*s12^2*s13^2 + 4096*s12*s13^3 + 1614*s13^4)*
            s23^2 + (-363*s12^2*s13 + 1084*s12*s13^2 + 1472*s13^3)*s23^3 +
           (-558*s12^2 - 983*s12*s13 - 485*s13^2)*s23^4 +
           (-558*s12 - 563*s13)*s23^5)) +
       p3q^3*(p2q^2*(1116*s12^3*s13^3 + 558*s12^2*s13^4 - 558*s12*s13^5 +
           (132*s12^4*s13 + 509*s12^3*s13^2 + 1406*s12^2*s13^3 +
             556*s12*s13^4 - 563*s13^5)*s23 + (-1614*s12^4 - 1403*s12^3*s13 +
             2361*s12^2*s13^2 + 2003*s12*s13^3 - 42*s13^4)*s23^2 +
           (-1614*s12^3 + 127*s12^2*s13 + 3429*s12*s13^2 + 1673*s13^3)*
            s23^3 + (1812*s12*s13 + 1812*s13^2)*s23^4) +
         p1q*p2q*(-1116*s12^4*s13^2 + 2172*s12^3*s13^3 + 3288*s12^2*s13^4 +
           (398*s12^4*s13 + 569*s12^3*s13^2 + 6010*s12^2*s13^3 +
             6139*s12*s13^4)*s23 + (-1116*s12^4 + 569*s12^3*s13 +
             6984*s12^2*s13^2 + 7785*s12*s13^3 + 2836*s13^4)*s23^2 +
           (2172*s12^3 + 6010*s12^2*s13 + 7785*s12*s13^2 + 3912*s13^3)*
            s23^3 + (3288*s12^2 + 6139*s12*s13 + 2836*s13^2)*s23^4) +
         p1q^2*(-1614*s12^4*s13^2 - 1614*s12^3*s13^3 +
           (132*s12^4*s13 - 1403*s12^3*s13^2 + 127*s12^2*s13^3 +
             1812*s12*s13^4)*s23 + (509*s12^3*s13 + 2361*s12^2*s13^2 +
             3429*s12*s13^3 + 1812*s13^4)*s23^2 +
           (1116*s12^3 + 1406*s12^2*s13 + 2003*s12*s13^2 + 1673*s13^3)*
            s23^3 + (558*s12^2 + 556*s12*s13 - 42*s13^2)*s23^4 +
           (-558*s12 - 563*s13)*s23^5)))/
      (p1q^3*p2q^2*((27*s12^2*s13^2 + 27*s12*s13^3)*s23^2 +
         (27*s12*s13^2 + 27*s13^3)*s23^3) + p1q^2*p2q^3*
        ((27*s12^2*s13^2 + 27*s12*s13^3)*s23^2 + (27*s12*s13^2 + 27*s13^3)*
          s23^3) + p3q^5*((27*s12^2*s13^2 + 27*s12*s13^3)*s23^2 +
         (27*s12*s13^2 + 27*s13^3)*s23^3) +
       p3q^4*(p1q*((81*s12^2*s13^2 + 81*s12*s13^3)*s23^2 +
           (81*s12*s13^2 + 81*s13^3)*s23^3) +
         p2q*((81*s12^2*s13^2 + 81*s12*s13^3)*s23^2 +
           (81*s12*s13^2 + 81*s13^3)*s23^3)) +
       p3q*(p1q^3*p2q*((54*s12^2*s13^2 + 54*s12*s13^3)*s23^2 +
           (54*s12*s13^2 + 54*s13^3)*s23^3) + p1q*p2q^3*
          ((54*s12^2*s13^2 + 54*s12*s13^3)*s23^2 + (54*s12*s13^2 + 54*s13^3)*
            s23^3) + p1q^2*p2q^2*((135*s12^2*s13^2 + 135*s12*s13^3)*s23^2 +
           (135*s12*s13^2 + 135*s13^3)*s23^3)) +
       p3q^2*(p1q^3*((27*s12^2*s13^2 + 27*s12*s13^3)*s23^2 +
           (27*s12*s13^2 + 27*s13^3)*s23^3) +
         p2q^3*((27*s12^2*s13^2 + 27*s12*s13^3)*s23^2 +
           (27*s12*s13^2 + 27*s13^3)*s23^3) + p1q^2*p2q*
          ((189*s12^2*s13^2 + 189*s12*s13^3)*s23^2 +
           (189*s12*s13^2 + 189*s13^3)*s23^3) + p1q*p2q^2*
          ((189*s12^2*s13^2 + 189*s12*s13^3)*s23^2 +
           (189*s12*s13^2 + 189*s13^3)*s23^3)) +
       p3q^3*(p1q^2*((81*s12^2*s13^2 + 81*s12*s13^3)*s23^2 +
           (81*s12*s13^2 + 81*s13^3)*s23^3) +
         p2q^2*((81*s12^2*s13^2 + 81*s12*s13^3)*s23^2 +
           (81*s12*s13^2 + 81*s13^3)*s23^3) +
         p1q*p2q*((216*s12^2*s13^2 + 216*s12*s13^3)*s23^2 +
           (216*s12*s13^2 + 216*s13^3)*s23^3))) +
     (Pi^2*(p1q*p2q^6*(6*s12^4*s13^4 + 12*s12^3*s13^5 + 6*s12^2*s13^6 +
          (6*s12^4*s13^3 + 18*s12^3*s13^4 + 12*s12^2*s13^5)*s23 +
          (96*s12^4*s13^2 + 251*s12^3*s13^3 + 218*s12^2*s13^4 +
            83*s12*s13^5 + 20*s13^6)*s23^2 + (96*s12^3*s13^2 +
            149*s12^2*s13^3 + 63*s12*s13^4 + 20*s13^5)*s23^3) +
        p3q^7*(-6*s12^7*s13 + 84*s12^6*s13^2 + 90*s12^5*s13^3 +
          (-6*s12^7 - 32*s12^6*s13 + 138*s12^5*s13^2 + 216*s12^4*s13^3 -
            68*s12^3*s13^4)*s23 + (84*s12^6 + 138*s12^5*s13 +
            104*s12^4*s13^2 + 182*s12^3*s13^3 - 68*s12^2*s13^4)*s23^2 +
          (90*s12^5 + 216*s12^4*s13 + 182*s12^3*s13^2 + 136*s12^2*s13^3)*
           s23^3 + (-68*s12^3*s13 - 68*s12^2*s13^2)*s23^4) +
        p1q^2*p2q^5*(-6*s12^5*s13^3 - 12*s12^4*s13^4 - 102*s12^3*s13^5 -
          96*s12^2*s13^6 + (4*s12^5*s13^2 + 28*s12^4*s13^3 - 41*s12^3*s13^4 +
            32*s12^2*s13^5 - 3*s12*s13^6 + 20*s13^7)*s23 +
          (-96*s12^5*s13 - 115*s12^4*s13^2 + 113*s12^3*s13^3 +
            146*s12^2*s13^4 + 20*s13^6)*s23^2 +
          (-72*s12^4*s13 - 259*s12^3*s13^2 - 339*s12^2*s13^3 -
            246*s12*s13^4 - 80*s13^5)*s23^3 + (-192*s12^3*s13 -
            394*s12^2*s13^2 - 189*s12*s13^3 - 80*s13^4)*s23^4) +
        p1q^3*p2q^4*(96*s12^4*s13^4 - 96*s12^2*s13^6 +
          (-22*s12^5*s13^2 + 149*s12^4*s13^3 + 67*s12^3*s13^4 +
            289*s12^2*s13^5 - 63*s12*s13^6)*s23 +
          (-92*s12^5*s13 - 229*s12^4*s13^2 + 29*s12^3*s13^3 +
            88*s12^2*s13^4 - 74*s12*s13^5 - 80*s13^6)*s23^2 +
          (127*s12^4*s13 - 96*s12^3*s13^2 - 284*s12^2*s13^3 - 80*s13^5)*
           s23^3 + (96*s12^4 + 8*s12^3*s13 - 72*s12^2*s13^2 + 240*s12*s13^3 +
            120*s13^4)*s23^4 + (96*s12^3 + 341*s12^2*s13 + 189*s12*s13^2 +
            120*s13^3)*s23^5) + p1q^4*p2q^3*(96*s12^4*s13^4 +
          96*s12^3*s13^5 + (-92*s12^5*s13^2 + 127*s12^4*s13^3 +
            8*s12^3*s13^4 + 341*s12^2*s13^5)*s23 +
          (-22*s12^5*s13 - 229*s12^4*s13^2 - 96*s12^3*s13^3 -
            72*s12^2*s13^4 + 189*s12*s13^5)*s23^2 +
          (149*s12^4*s13 + 29*s12^3*s13^2 - 284*s12^2*s13^3 + 240*s12*s13^4 +
            120*s13^5)*s23^3 + (96*s12^4 + 67*s12^3*s13 + 88*s12^2*s13^2 +
            120*s13^4)*s23^4 + (289*s12^2*s13 - 74*s12*s13^2 - 80*s13^3)*
           s23^5 + (-96*s12^2 - 63*s12*s13 - 80*s13^2)*s23^6) +
        p1q^6*p2q*((96*s12^4*s13^2 + 96*s12^3*s13^3)*s23^2 +
          (6*s12^4*s13 + 251*s12^3*s13^2 + 149*s12^2*s13^3)*s23^3 +
          (6*s12^4 + 18*s12^3*s13 + 218*s12^2*s13^2 + 63*s12*s13^3)*s23^4 +
          (12*s12^3 + 12*s12^2*s13 + 83*s12*s13^2 + 20*s13^3)*s23^5 +
          (6*s12^2 + 20*s13^2)*s23^6) + p1q^5*p2q^2*
         ((-96*s12^5*s13^2 - 72*s12^4*s13^3 - 192*s12^3*s13^4)*s23 +
          (4*s12^5*s13 - 115*s12^4*s13^2 - 259*s12^3*s13^3 - 394*s12^2*s13^4)*
           s23^2 + (-6*s12^5 + 28*s12^4*s13 + 113*s12^3*s13^2 -
            339*s12^2*s13^3 - 189*s12*s13^4)*s23^3 +
          (-12*s12^4 - 41*s12^3*s13 + 146*s12^2*s13^2 - 246*s12*s13^3 -
            80*s13^4)*s23^4 + (-102*s12^3 + 32*s12^2*s13 - 80*s13^3)*s23^5 +
          (-96*s12^2 - 3*s12*s13 + 20*s13^2)*s23^6 + 20*s13*s23^7) +
        p3q^6*(p2q*(-18*s12^7*s13 + 174*s12^6*s13^2 - 78*s12^5*s13^3 -
            270*s12^4*s13^4 + (-12*s12^7 - 66*s12^6*s13 + 239*s12^5*s13^2 +
              118*s12^4*s13^3 - 667*s12^3*s13^4 + 108*s12^2*s13^5)*s23 +
            (360*s12^6 + 473*s12^5*s13 - 90*s12^4*s13^2 + 140*s12^3*s13^3 -
              377*s12^2*s13^4 + 40*s12*s13^5)*s23^2 +
            (372*s12^5 + 874*s12^4*s13 + 754*s12^3*s13^2 + 492*s12^2*s13^3 +
              40*s12*s13^4)*s23^3 + (-343*s12^3*s13 - 343*s12^2*s13^2)*
             s23^4) + p1q*(-12*s12^7*s13 + 360*s12^6*s13^2 +
            372*s12^5*s13^3 + (-18*s12^7 - 66*s12^6*s13 + 473*s12^5*s13^2 +
              874*s12^4*s13^3 - 343*s12^3*s13^4)*s23 +
            (174*s12^6 + 239*s12^5*s13 - 90*s12^4*s13^2 + 754*s12^3*s13^3 -
              343*s12^2*s13^4)*s23^2 + (-78*s12^5 + 118*s12^4*s13 +
              140*s12^3*s13^2 + 492*s12^2*s13^3)*s23^3 +
            (-270*s12^4 - 667*s12^3*s13 - 377*s12^2*s13^2 + 40*s12*s13^3)*
             s23^4 + (108*s12^2*s13 + 40*s12*s13^2)*s23^5)) +
        p3q^5*(p2q^2*(-18*s12^7*s13 + 114*s12^6*s13^2 - 408*s12^5*s13^3 -
            270*s12^4*s13^4 + 270*s12^3*s13^5 + (-6*s12^7 - 40*s12^6*s13 +
              26*s12^5*s13^2 - 356*s12^4*s13^3 - 1022*s12^3*s13^4 +
              534*s12^2*s13^5 - 60*s12*s13^6)*s23 +
            (564*s12^6 + 333*s12^5*s13 - 1238*s12^4*s13^2 - 596*s12^3*s13^3 -
              606*s12^2*s13^4 + 3*s12*s13^5 - 20*s13^6)*s23^2 +
            (570*s12^5 + 1212*s12^4*s13 + 1066*s12^3*s13^2 + 594*s12^2*s13^
                3 - 40*s13^5)*s23^3 + (-727*s12^3*s13 - 780*s12^2*s13^2 -
              63*s12*s13^3 - 20*s13^4)*s23^4) + p1q*p2q*(-36*s12^7*s13 +
            630*s12^6*s13^2 - 360*s12^5*s13^3 - 1026*s12^4*s13^4 +
            (-36*s12^7 - 144*s12^6*s13 + 335*s12^5*s13^2 + 148*s12^4*s13^3 -
              2881*s12^3*s13^4 + 438*s12^2*s13^5)*s23 +
            (630*s12^6 + 335*s12^5*s13 - 2364*s12^4*s13^2 - 26*s12^3*s13^3 -
              1920*s12^2*s13^4 + 203*s12*s13^5)*s23^2 +
            (-360*s12^5 + 148*s12^4*s13 - 26*s12^3*s13^2 + 776*s12^2*s13^3 +
              157*s12*s13^4 + 40*s13^5)*s23^3 + (-1026*s12^4 -
              2881*s12^3*s13 - 1920*s12^2*s13^2 + 157*s12*s13^3 + 80*s13^4)*
             s23^4 + (438*s12^2*s13 + 203*s12*s13^2 + 40*s13^3)*s23^5) +
          p1q^2*(-6*s12^7*s13 + 564*s12^6*s13^2 + 570*s12^5*s13^3 +
            (-18*s12^7 - 40*s12^6*s13 + 333*s12^5*s13^2 + 1212*s12^4*s13^3 -
              727*s12^3*s13^4)*s23 + (114*s12^6 + 26*s12^5*s13 -
              1238*s12^4*s13^2 + 1066*s12^3*s13^3 - 780*s12^2*s13^4)*s23^2 +
            (-408*s12^5 - 356*s12^4*s13 - 596*s12^3*s13^2 + 594*s12^2*s13^3 -
              63*s12*s13^4)*s23^3 + (-270*s12^4 - 1022*s12^3*s13 -
              606*s12^2*s13^2 - 20*s13^4)*s23^4 +
            (270*s12^3 + 534*s12^2*s13 + 3*s12*s13^2 - 40*s13^3)*s23^5 +
            (-60*s12*s13 - 20*s13^2)*s23^6)) +
        p3q^4*(p2q^3*(-6*s12^7*s13 + 42*s12^6*s13^2 - 240*s12^5*s13^3 +
            240*s12^4*s13^4 + 438*s12^3*s13^5 - 90*s12^2*s13^6 +
            (-10*s12^6*s13 - 115*s12^5*s13^2 - 174*s12^4*s13^3 -
              314*s12^3*s13^4 + 812*s12^2*s13^5 - 123*s12*s13^6 + 20*s13^7)*
             s23 + (384*s12^6 - 393*s12^5*s13 - 2054*s12^4*s13^2 -
              745*s12^3*s13^3 - 102*s12^2*s13^4 - 74*s12*s13^5)*s23^2 +
            (384*s12^5 + 594*s12^4*s13 + 633*s12^3*s13^2 + 343*s12^2*s13^3 -
              160*s12*s13^4 - 80*s13^5)*s23^3 + (-793*s12^3*s13 -
              952*s12^2*s13^2 - 189*s12*s13^3 - 60*s13^4)*s23^4) +
          p1q*p2q^2*(-36*s12^7*s13 + 306*s12^6*s13^2 - 1416*s12^5*s13^3 -
            822*s12^4*s13^4 + 936*s12^3*s13^5 + (-18*s12^7 - 98*s12^6*s13 -
              529*s12^5*s13^2 - 1093*s12^4*s13^3 - 3490*s12^3*s13^4 +
              2107*s12^2*s13^5 - 183*s12*s13^6)*s23 +
            (840*s12^6 - 759*s12^5*s13 - 5944*s12^4*s13^2 - 2169*s12^3*s13^
                3 - 2378*s12^2*s13^4 + 258*s12*s13^5 - 100*s13^6)*s23^2 +
            (-570*s12^5 - 355*s12^4*s13 - 667*s12^3*s13^2 - 141*s12^2*s13^3 +
              154*s12*s13^4 - 80*s13^5)*s23^3 + (-1428*s12^4 -
              4861*s12^3*s13 - 3748*s12^2*s13^2 + 145*s12*s13^3 + 160*s13^4)*
             s23^4 + (701*s12^2*s13 + 412*s12*s13^2 + 140*s13^3)*s23^5) +
          p1q^2*p2q*(-18*s12^7*s13 + 840*s12^6*s13^2 - 570*s12^5*s13^3 -
            1428*s12^4*s13^4 + (-36*s12^7 - 98*s12^6*s13 - 759*s12^5*s13^2 -
              355*s12^4*s13^3 - 4861*s12^3*s13^4 + 701*s12^2*s13^5)*s23 +
            (306*s12^6 - 529*s12^5*s13 - 5944*s12^4*s13^2 - 667*s12^3*s13^3 -
              3748*s12^2*s13^4 + 412*s12*s13^5)*s23^2 +
            (-1416*s12^5 - 1093*s12^4*s13 - 2169*s12^3*s13^2 -
              141*s12^2*s13^3 + 145*s12*s13^4 + 140*s13^5)*s23^3 +
            (-822*s12^4 - 3490*s12^3*s13 - 2378*s12^2*s13^2 + 154*s12*s13^3 +
              160*s13^4)*s23^4 + (936*s12^3 + 2107*s12^2*s13 +
              258*s12*s13^2 - 80*s13^3)*s23^5 + (-183*s12*s13 - 100*s13^2)*
             s23^6) + p1q^3*(384*s12^6*s13^2 + 384*s12^5*s13^3 +
            (-6*s12^7 - 10*s12^6*s13 - 393*s12^5*s13^2 + 594*s12^4*s13^3 -
              793*s12^3*s13^4)*s23 + (42*s12^6 - 115*s12^5*s13 -
              2054*s12^4*s13^2 + 633*s12^3*s13^3 - 952*s12^2*s13^4)*s23^2 +
            (-240*s12^5 - 174*s12^4*s13 - 745*s12^3*s13^2 + 343*s12^2*s13^3 -
              189*s12*s13^4)*s23^3 + (240*s12^4 - 314*s12^3*s13 -
              102*s12^2*s13^2 - 160*s12*s13^3 - 60*s13^4)*s23^4 +
            (438*s12^3 + 812*s12^2*s13 - 74*s12*s13^2 - 80*s13^3)*s23^5 +
            (-90*s12^2 - 123*s12*s13)*s23^6 + 20*s13*s23^7)) +
        p3q^3*(p2q^4*(18*s12^6*s13^2 - 18*s12^5*s13^3 + 216*s12^4*s13^4 +
            78*s12^3*s13^5 - 174*s12^2*s13^6 + (-4*s12^6*s13 -
              42*s12^5*s13^2 + 118*s12^4*s13^3 + 128*s12^3*s13^4 +
              466*s12^2*s13^5 - 66*s12*s13^6 + 40*s13^7)*s23 +
            (96*s12^6 - 583*s12^5*s13 - 1178*s12^4*s13^2 + 199*s12^3*s13^3 +
              664*s12^2*s13^4 + 86*s12*s13^5 + 80*s13^6)*s23^2 +
            (96*s12^5 - 32*s12^4*s13 + 270*s12^3*s13^2 + 341*s12^2*s13^3 -
              97*s12*s13^4 - 20*s13^5)*s23^3 + (-437*s12^3*s13 -
              596*s12^2*s13^2 - 189*s12*s13^3 - 60*s13^4)*s23^4) +
          p1q*p2q^3*(-12*s12^7*s13 + 66*s12^6*s13^2 - 672*s12^5*s13^3 +
            816*s12^4*s13^4 + 1284*s12^3*s13^5 - 282*s12^2*s13^6 +
            (-28*s12^6*s13 - 481*s12^5*s13^2 - 14*s12^4*s13^3 -
              685*s12^3*s13^4 + 2688*s12^2*s13^5 - 372*s12*s13^6 + 40*s13^7)*
             s23 + (480*s12^6 - 1897*s12^5*s13 - 6058*s12^4*s13^2 -
              1933*s12^3*s13^3 - 442*s12^2*s13^4 - 90*s12*s13^5 - 160*s13^6)*
             s23^2 + (-384*s12^5 - 898*s12^4*s13 - 1342*s12^3*s13^2 -
              1250*s12^2*s13^3 - 483*s12*s13^4 - 400*s13^5)*s23^3 +
            (-864*s12^4 - 4065*s12^3*s13 - 3908*s12^2*s13^2 - 270*s12*s13^3 -
              40*s13^4)*s23^4 + (520*s12^2*s13 + 375*s12*s13^2 + 160*s13^3)*
             s23^5) + p1q^2*p2q^2*(-18*s12^7*s13 + 288*s12^6*s13^2 -
            1776*s12^5*s13^3 - 936*s12^4*s13^4 + 1146*s12^3*s13^5 +
            (-18*s12^7 - 80*s12^6*s13 - 1705*s12^5*s13^2 - 1340*s12^4*s13^3 -
              4707*s12^3*s13^4 + 3132*s12^2*s13^5 - 186*s12*s13^6)*s23 +
            (288*s12^6 - 1705*s12^5*s13 - 8324*s12^4*s13^2 - 2294*s12^3*s13^
                3 - 3560*s12^2*s13^4 + 779*s12*s13^5 - 140*s13^6)*s23^2 +
            (-1776*s12^5 - 1340*s12^4*s13 - 2294*s12^3*s13^2 -
              1838*s12^2*s13^3 + 593*s12*s13^4 + 180*s13^5)*s23^3 +
            (-936*s12^4 - 4707*s12^3*s13 - 3560*s12^2*s13^2 + 593*s12*s13^3 +
              640*s13^4)*s23^4 + (1146*s12^3 + 3132*s12^2*s13 +
              779*s12*s13^2 + 180*s13^3)*s23^5 + (-186*s12*s13 - 140*s13^2)*
             s23^6) + p1q^3*p2q*(480*s12^6*s13^2 - 384*s12^5*s13^3 -
            864*s12^4*s13^4 + (-12*s12^7 - 28*s12^6*s13 - 1897*s12^5*s13^2 -
              898*s12^4*s13^3 - 4065*s12^3*s13^4 + 520*s12^2*s13^5)*s23 +
            (66*s12^6 - 481*s12^5*s13 - 6058*s12^4*s13^2 - 1342*s12^3*s13^3 -
              3908*s12^2*s13^4 + 375*s12*s13^5)*s23^2 +
            (-672*s12^5 - 14*s12^4*s13 - 1933*s12^3*s13^2 - 1250*s12^2*s13^
                3 - 270*s12*s13^4 + 160*s13^5)*s23^3 +
            (816*s12^4 - 685*s12^3*s13 - 442*s12^2*s13^2 - 483*s12*s13^3 -
              40*s13^4)*s23^4 + (1284*s12^3 + 2688*s12^2*s13 - 90*s12*s13^2 -
              400*s13^3)*s23^5 + (-282*s12^2 - 372*s12*s13 - 160*s13^2)*
             s23^6 + 40*s13*s23^7) + p1q^4*(96*s12^6*s13^2 + 96*s12^5*s13^3 +
            (-4*s12^6*s13 - 583*s12^5*s13^2 - 32*s12^4*s13^3 -
              437*s12^3*s13^4)*s23 + (18*s12^6 - 42*s12^5*s13 -
              1178*s12^4*s13^2 + 270*s12^3*s13^3 - 596*s12^2*s13^4)*s23^2 +
            (-18*s12^5 + 118*s12^4*s13 + 199*s12^3*s13^2 + 341*s12^2*s13^3 -
              189*s12*s13^4)*s23^3 + (216*s12^4 + 128*s12^3*s13 +
              664*s12^2*s13^2 - 97*s12*s13^3 - 60*s13^4)*s23^4 +
            (78*s12^3 + 466*s12^2*s13 + 86*s12*s13^2 - 20*s13^3)*s23^5 +
            (-174*s12^2 - 66*s12*s13 + 80*s13^2)*s23^6 + 40*s13*s23^7)) +
        p3q*(p2q^6*(6*s12^4*s13^4 + 12*s12^3*s13^5 + 6*s12^2*s13^6 +
            (6*s12^4*s13^3 + 18*s12^3*s13^4 + 12*s12^2*s13^5)*s23 +
            (96*s12^4*s13^2 + 251*s12^3*s13^3 + 218*s12^2*s13^4 +
              83*s12*s13^5 + 20*s13^6)*s23^2 + (96*s12^3*s13^2 +
              149*s12^2*s13^3 + 63*s12*s13^4 + 20*s13^5)*s23^3) +
          p1q*p2q^5*(-24*s12^5*s13^3 - 30*s12^4*s13^4 - 180*s12^3*s13^5 -
            174*s12^2*s13^6 + (2*s12^5*s13^2 + 68*s12^4*s13^3 -
              4*s12^3*s13^4 + 124*s12^2*s13^5 - 6*s12*s13^6 + 40*s13^7)*s23 +
            (-312*s12^5*s13 - 259*s12^4*s13^2 + 682*s12^3*s13^3 +
              809*s12^2*s13^4 + 206*s12*s13^5 + 100*s13^6)*s23^2 +
            (-192*s12^4*s13 - 128*s12^3*s13^2 - 2*s12^2*s13^3 -
              160*s12*s13^4 - 40*s13^5)*s23^3 + (-312*s12^3*s13 -
              567*s12^2*s13^2 - 252*s12*s13^3 - 100*s13^4)*s23^4) +
          p1q^2*p2q^4*(12*s12^6*s13^2 + 6*s12^5*s13^3 + 456*s12^4*s13^4 +
            78*s12^3*s13^5 - 384*s12^2*s13^6 + (-4*s12^6*s13 -
              68*s12^5*s13^2 + 446*s12^4*s13^3 + 184*s12^3*s13^4 +
              954*s12^2*s13^5 - 192*s12*s13^6 + 40*s13^7)*s23 +
            (-791*s12^5*s13 - 1578*s12^4*s13^2 - 67*s12^3*s13^3 +
              446*s12^2*s13^4 - 182*s12*s13^5 - 140*s13^6)*s23^2 +
            (-192*s12^5 - 378*s12^4*s13 - 1095*s12^3*s13^2 - 1433*s12^2*s13^
                3 - 606*s12*s13^4 - 400*s13^5)*s23^3 +
            (-96*s12^4 - 1165*s12^3*s13 - 1626*s12^2*s13^2 - 121*s12*s13^3 -
              40*s13^4)*s23^4 + (96*s12^3 + 514*s12^2*s13 + 315*s12*s13^2 +
              180*s13^3)*s23^5) + p1q^3*p2q^3*(-192*s12^5*s13^3 +
            480*s12^4*s13^4 + 576*s12^3*s13^5 - 96*s12^2*s13^6 +
            (-8*s12^6*s13 - 435*s12^5*s13^2 + 540*s12^4*s13^3 -
              41*s12^3*s13^4 + 1794*s12^2*s13^5 - 126*s12*s13^6)*s23 +
            (-435*s12^5*s13 - 1594*s12^4*s13^2 - 9*s12^3*s13^3 -
              168*s12^2*s13^4 + 390*s12*s13^5 - 140*s13^6)*s23^2 +
            (-192*s12^5 + 540*s12^4*s13 - 9*s12^3*s13^2 - 1152*s12^2*s13^3 +
              588*s12*s13^4 + 160*s13^5)*s23^3 + (480*s12^4 - 41*s12^3*s13 -
              168*s12^2*s13^2 + 588*s12*s13^3 + 600*s13^4)*s23^4 +
            (576*s12^3 + 1794*s12^2*s13 + 390*s12*s13^2 + 160*s13^3)*s23^5 +
            (-96*s12^2 - 126*s12*s13 - 140*s13^2)*s23^6) +
          p1q^6*((96*s12^4*s13^2 + 96*s12^3*s13^3)*s23^2 +
            (6*s12^4*s13 + 251*s12^3*s13^2 + 149*s12^2*s13^3)*s23^3 +
            (6*s12^4 + 18*s12^3*s13 + 218*s12^2*s13^2 + 63*s12*s13^3)*s23^4 +
            (12*s12^3 + 12*s12^2*s13 + 83*s12*s13^2 + 20*s13^3)*s23^5 +
            (6*s12^2 + 20*s13^2)*s23^6) + p1q^4*p2q^2*(-192*s12^5*s13^3 -
            96*s12^4*s13^4 + 96*s12^3*s13^5 + (-4*s12^6*s13 -
              791*s12^5*s13^2 - 378*s12^4*s13^3 - 1165*s12^3*s13^4 +
              514*s12^2*s13^5)*s23 + (12*s12^6 - 68*s12^5*s13 -
              1578*s12^4*s13^2 - 1095*s12^3*s13^3 - 1626*s12^2*s13^4 +
              315*s12*s13^5)*s23^2 + (6*s12^5 + 446*s12^4*s13 -
              67*s12^3*s13^2 - 1433*s12^2*s13^3 - 121*s12*s13^4 + 180*s13^5)*
             s23^3 + (456*s12^4 + 184*s12^3*s13 + 446*s12^2*s13^2 -
              606*s12*s13^3 - 40*s13^4)*s23^4 + (78*s12^3 + 954*s12^2*s13 -
              182*s12*s13^2 - 400*s13^3)*s23^5 + (-384*s12^2 - 192*s12*s13 -
              140*s13^2)*s23^6 + 40*s13*s23^7) + p1q^5*p2q*
           ((-312*s12^5*s13^2 - 192*s12^4*s13^3 - 312*s12^3*s13^4)*s23 +
            (2*s12^5*s13 - 259*s12^4*s13^2 - 128*s12^3*s13^3 -
              567*s12^2*s13^4)*s23^2 + (-24*s12^5 + 68*s12^4*s13 +
              682*s12^3*s13^2 - 2*s12^2*s13^3 - 252*s12*s13^4)*s23^3 +
            (-30*s12^4 - 4*s12^3*s13 + 809*s12^2*s13^2 - 160*s12*s13^3 -
              100*s13^4)*s23^4 + (-180*s12^3 + 124*s12^2*s13 +
              206*s12*s13^2 - 40*s13^3)*s23^5 + (-174*s12^2 - 6*s12*s13 +
              100*s13^2)*s23^6 + 40*s13*s23^7)) +
        p3q^2*(p2q^5*(-18*s12^5*s13^3 - 18*s12^4*s13^4 - 78*s12^3*s13^5 -
            78*s12^2*s13^6 + (-2*s12^5*s13^2 + 40*s12^4*s13^3 +
              37*s12^3*s13^4 + 92*s12^2*s13^5 - 3*s12*s13^6 + 20*s13^7)*s23 +
            (-192*s12^5*s13 - 72*s12^4*s13^2 + 641*s12^3*s13^3 +
              687*s12^2*s13^4 + 206*s12*s13^5 + 80*s13^6)*s23^2 +
            (-72*s12^4*s13 + 227*s12^3*s13^2 + 385*s12^2*s13^3 +
              86*s12*s13^4 + 40*s13^5)*s23^3 + (-96*s12^3*s13 -
              149*s12^2*s13^2 - 63*s12*s13^3 - 20*s13^4)*s23^4) +
          p1q*p2q^4*(30*s12^6*s13^2 - 12*s12^5*s13^3 + 576*s12^4*s13^4 +
            156*s12^3*s13^5 - 462*s12^2*s13^6 + (-8*s12^6*s13 -
              88*s12^5*s13^2 + 415*s12^4*s13^3 + 245*s12^3*s13^4 +
              1131*s12^2*s13^5 - 195*s12*s13^6 + 80*s13^7)*s23 +
            (96*s12^6 - 1354*s12^5*s13 - 2743*s12^4*s13^2 - 113*s12^3*s13^3 +
              950*s12^2*s13^4 - 22*s12*s13^5 + 20*s13^6)*s23^2 +
            (-96*s12^5 - 705*s12^4*s13 - 1065*s12^3*s13^2 - 976*s12^2*s13^3 -
              703*s12*s13^4 - 340*s13^5)*s23^3 +
            (-192*s12^4 - 1730*s12^3*s13 - 2270*s12^2*s13^2 - 550*s12*s13^3 -
              220*s13^4)*s23^4 + (149*s12^2*s13 + 126*s12*s13^2 + 60*s13^3)*
             s23^5) + p1q^2*p2q^3*(-6*s12^7*s13 + 24*s12^6*s13^2 -
            624*s12^5*s13^3 + 960*s12^4*s13^4 + 1326*s12^3*s13^5 -
            288*s12^2*s13^6 + (-26*s12^6*s13 - 709*s12^5*s13^2 +
              573*s12^4*s13^3 - 420*s12^3*s13^4 + 3329*s12^2*s13^5 -
              375*s12*s13^6 + 20*s13^7)*s23 + (96*s12^6 - 1845*s12^5*s13 -
              5153*s12^4*s13^2 - 885*s12^3*s13^3 - 364*s12^2*s13^4 +
              185*s12*s13^5 - 300*s13^6)*s23^2 +
            (-960*s12^5 - 909*s12^4*s13 - 1629*s12^3*s13^2 - 2269*s12^2*s13^
                3 + 25*s12*s13^4 - 280*s13^5)*s23^3 +
            (-480*s12^4 - 3212*s12^3*s13 - 3044*s12^2*s13^2 + 507*s12*s13^3 +
              500*s13^4)*s23^4 + (576*s12^3 + 2073*s12^2*s13 +
              839*s12*s13^2 + 400*s13^3)*s23^5 + (-63*s12*s13 - 60*s13^2)*
             s23^6) + p1q^3*p2q^2*(96*s12^6*s13^2 - 960*s12^5*s13^3 -
            480*s12^4*s13^4 + 576*s12^3*s13^5 + (-6*s12^7 - 26*s12^6*s13 -
              1845*s12^5*s13^2 - 909*s12^4*s13^3 - 3212*s12^3*s13^4 +
              2073*s12^2*s13^5 - 63*s12*s13^6)*s23 +
            (24*s12^6 - 709*s12^5*s13 - 5153*s12^4*s13^2 - 1629*s12^3*s13^3 -
              3044*s12^2*s13^4 + 839*s12*s13^5 - 60*s13^6)*s23^2 +
            (-624*s12^5 + 573*s12^4*s13 - 885*s12^3*s13^2 - 2269*s12^2*s13^
                3 + 507*s12*s13^4 + 400*s13^5)*s23^3 +
            (960*s12^4 - 420*s12^3*s13 - 364*s12^2*s13^2 + 25*s12*s13^3 +
              500*s13^4)*s23^4 + (1326*s12^3 + 3329*s12^2*s13 +
              185*s12*s13^2 - 280*s13^3)*s23^5 + (-288*s12^2 - 375*s12*s13 -
              300*s13^2)*s23^6 + 20*s13*s23^7) +
          p1q^5*((-192*s12^5*s13^2 - 72*s12^4*s13^3 - 96*s12^3*s13^4)*s23 +
            (-2*s12^5*s13 - 72*s12^4*s13^2 + 227*s12^3*s13^3 -
              149*s12^2*s13^4)*s23^2 + (-18*s12^5 + 40*s12^4*s13 +
              641*s12^3*s13^2 + 385*s12^2*s13^3 - 63*s12*s13^4)*s23^3 +
            (-18*s12^4 + 37*s12^3*s13 + 687*s12^2*s13^2 + 86*s12*s13^3 -
              20*s13^4)*s23^4 + (-78*s12^3 + 92*s12^2*s13 + 206*s12*s13^2 +
              40*s13^3)*s23^5 + (-78*s12^2 - 3*s12*s13 + 80*s13^2)*s23^6 +
            20*s13*s23^7) + p1q^4*p2q*(96*s12^6*s13^2 - 96*s12^5*s13^3 -
            192*s12^4*s13^4 + (-8*s12^6*s13 - 1354*s12^5*s13^2 -
              705*s12^4*s13^3 - 1730*s12^3*s13^4 + 149*s12^2*s13^5)*s23 +
            (30*s12^6 - 88*s12^5*s13 - 2743*s12^4*s13^2 - 1065*s12^3*s13^3 -
              2270*s12^2*s13^4 + 126*s12*s13^5)*s23^2 +
            (-12*s12^5 + 415*s12^4*s13 - 113*s12^3*s13^2 - 976*s12^2*s13^3 -
              550*s12*s13^4 + 60*s13^5)*s23^3 + (576*s12^4 + 245*s12^3*s13 +
              950*s12^2*s13^2 - 703*s12*s13^3 - 220*s13^4)*s23^4 +
            (156*s12^3 + 1131*s12^2*s13 - 22*s12*s13^2 - 340*s13^3)*s23^5 +
            (-462*s12^2 - 195*s12*s13 + 20*s13^2)*s23^6 + 80*s13*s23^7))))/
      (p1q^2*p2q^5*(-162*s12^3*s13^3 - 162*s12^2*s13^4)*s23^2 +
       p3q^7*((162*s12^4*s13^2 + 162*s12^3*s13^3)*s23^2 +
         (162*s12^3*s13^2 + 162*s12^2*s13^3)*s23^3) +
       p1q^3*p2q^4*((162*s12^4*s13^2 - 162*s12^2*s13^4)*s23^2 +
         (162*s12^3*s13^2 + 324*s12^2*s13^3)*s23^3) +
       p1q^5*p2q^2*(-162*s12^3*s13^2*s23^3 - 162*s12^2*s13^2*s23^4) +
       p1q^4*p2q^3*((162*s12^4*s13^2 + 162*s12^3*s13^3)*s23^2 +
         324*s12^2*s13^3*s23^3 - 162*s12^2*s13^2*s23^4) +
       p3q^5*(p2q^2*((972*s12^4*s13^2 + 324*s12^3*s13^3 - 648*s12^2*s13^4)*
            s23^2 + (972*s12^3*s13^2 + 972*s12^2*s13^3)*s23^3) +
         p1q^2*((972*s12^4*s13^2 + 972*s12^3*s13^3)*s23^2 +
           (324*s12^3*s13^2 + 972*s12^2*s13^3)*s23^3 - 648*s12^2*s13^2*
            s23^4) + p1q*p2q*((2430*s12^4*s13^2 + 1944*s12^3*s13^3 -
             486*s12^2*s13^4)*s23^2 + (1944*s12^3*s13^2 + 2592*s12^2*s13^3)*
            s23^3 - 486*s12^2*s13^2*s23^4)) +
       p3q^4*(p2q^3*((648*s12^4*s13^2 - 324*s12^3*s13^3 - 972*s12^2*s13^4)*
            s23^2 + (648*s12^3*s13^2 + 648*s12^2*s13^3)*s23^3) +
         p1q^2*p2q*((3402*s12^4*s13^2 + 2916*s12^3*s13^3 - 486*s12^2*s13^4)*
            s23^2 + (1620*s12^3*s13^2 + 3888*s12^2*s13^3)*s23^3 -
           1782*s12^2*s13^2*s23^4) +
         p1q^3*((648*s12^4*s13^2 + 648*s12^3*s13^3)*s23^2 +
           (-324*s12^3*s13^2 + 648*s12^2*s13^3)*s23^3 - 972*s12^2*s13^2*
            s23^4) + p1q*p2q^2*((3402*s12^4*s13^2 + 1620*s12^3*s13^3 -
             1782*s12^2*s13^4)*s23^2 + (2916*s12^3*s13^2 + 3888*s12^2*s13^3)*
            s23^3 - 486*s12^2*s13^2*s23^4)) +
       p3q*(p1q*p2q^5*(-324*s12^3*s13^3 - 324*s12^2*s13^4)*s23^2 +
         p1q^2*p2q^4*((486*s12^4*s13^2 - 486*s12^3*s13^3 - 972*s12^2*s13^4)*
            s23^2 + (486*s12^3*s13^2 + 810*s12^2*s13^3)*s23^3) +
         p1q^4*p2q^2*((486*s12^4*s13^2 + 486*s12^3*s13^3)*s23^2 +
           (-486*s12^3*s13^2 + 810*s12^2*s13^3)*s23^3 - 972*s12^2*s13^2*
            s23^4) + p1q^3*p2q^3*((1134*s12^4*s13^2 + 648*s12^3*s13^3 -
             486*s12^2*s13^4)*s23^2 + (648*s12^3*s13^2 + 1944*s12^2*s13^3)*
            s23^3 - 486*s12^2*s13^2*s23^4) + p1q^5*p2q*
          (-324*s12^3*s13^2*s23^3 - 324*s12^2*s13^2*s23^4)) +
       p3q^2*(p2q^5*(-162*s12^3*s13^3 - 162*s12^2*s13^4)*s23^2 +
         p1q*p2q^4*((486*s12^4*s13^2 - 972*s12^3*s13^3 - 1458*s12^2*s13^4)*
            s23^2 + (486*s12^3*s13^2 + 648*s12^2*s13^3)*s23^3) +
         p1q^3*p2q^2*((2430*s12^4*s13^2 + 1944*s12^3*s13^3 - 486*s12^2*s13^4)*
            s23^2 + (486*s12^3*s13^2 + 3564*s12^2*s13^3)*s23^3 -
           1944*s12^2*s13^2*s23^4) + p1q^4*p2q*
          ((486*s12^4*s13^2 + 486*s12^3*s13^3)*s23^2 +
           (-972*s12^3*s13^2 + 648*s12^2*s13^3)*s23^3 - 1458*s12^2*s13^2*
            s23^4) + p1q^2*p2q^3*((2430*s12^4*s13^2 + 486*s12^3*s13^3 -
             1944*s12^2*s13^4)*s23^2 + (1944*s12^3*s13^2 + 3564*s12^2*s13^3)*
            s23^3 - 486*s12^2*s13^2*s23^4) + p1q^5*(-162*s12^3*s13^2*s23^3 -
           162*s12^2*s13^2*s23^4)) +
       p3q^6*(p2q*((648*s12^4*s13^2 + 486*s12^3*s13^3 - 162*s12^2*s13^4)*
            s23^2 + (648*s12^3*s13^2 + 648*s12^2*s13^3)*s23^3) +
         p1q*((648*s12^4*s13^2 + 648*s12^3*s13^3)*s23^2 +
           (486*s12^3*s13^2 + 648*s12^2*s13^3)*s23^3 - 162*s12^2*s13^2*
            s23^4)) + p3q^3*(p2q^4*((162*s12^4*s13^2 - 486*s12^3*s13^3 -
             648*s12^2*s13^4)*s23^2 + (162*s12^3*s13^2 + 162*s12^2*s13^3)*
            s23^3) + p1q^3*p2q*((2106*s12^4*s13^2 + 1944*s12^3*s13^3 -
             162*s12^2*s13^4)*s23^2 + (-324*s12^3*s13^2 + 2592*s12^2*s13^3)*
            s23^3 - 2430*s12^2*s13^2*s23^4) + p1q^2*p2q^2*
          ((4374*s12^4*s13^2 + 2754*s12^3*s13^3 - 1620*s12^2*s13^4)*s23^2 +
           (2754*s12^3*s13^2 + 5670*s12^2*s13^3)*s23^3 - 1620*s12^2*s13^2*
            s23^4) + p1q^4*((162*s12^4*s13^2 + 162*s12^3*s13^3)*s23^2 +
           (-486*s12^3*s13^2 + 162*s12^2*s13^3)*s23^3 - 648*s12^2*s13^2*
            s23^4) + p1q*p2q^3*((2106*s12^4*s13^2 - 324*s12^3*s13^3 -
             2430*s12^2*s13^4)*s23^2 + (1944*s12^3*s13^2 + 2592*s12^2*s13^3)*
            s23^3 - 162*s12^2*s13^2*s23^4))) +
     ((p1q*p2q^4*((-(s12*s13^2) - s13^3)*s23 + (-42*s12*s13 - 43*s13^2)*
           s23^2 - 42*s13*s23^3) + p3q^5*(-6*s12^2*s13^2 +
          (2*s12^2*s13 - 3*s12*s13^2 + 3*s13^3)*s23 + (42*s12^2 + 21*s12*s13)*
           s23^2 - 21*s13*s23^3) + p1q^4*p2q*((6*s12*s13^2 + 6*s13^3)*s23 +
          (-(s12*s13) + 5*s13^2)*s23^2 - s13*s23^3) +
        p1q^2*p2q^3*(-6*s13^4 + (s12*s13^2 - 3*s13^3)*s23 +
          (-43*s12*s13 - 20*s13^2)*s23^2 + s13*s23^3 + 42*s23^4) +
        p1q^3*p2q^2*(-6*s13^4 + (5*s12*s13^2 + s13^3)*s23 +
          (-23*s12*s13 + 4*s13^2)*s23^2 + 21*s13*s23^3 + 42*s23^4) +
        p3q^4*(p1q*(-18*s12^2*s13^2 + (4*s12^2*s13 - 8*s12*s13^2 + 12*s13^3)*
             s23 + (42*s12^2 - 23*s12*s13 + 3*s13^2)*s23^2 +
            (-84*s12 - 63*s13)*s23^3) + p2q*(-6*s12^2*s13^2 + 12*s12*s13^3 +
            (4*s12^2*s13 + s12*s13^2 + 9*s13^3)*s23 +
            (126*s12^2 + 40*s12*s13 - 21*s13^2)*s23^2 - 84*s13*s23^3)) +
        p3q^3*(p1q*p2q*(-12*s12^2*s13^2 + 36*s12*s13^3 +
            (8*s12^2*s13 + 18*s12*s13^2 + 38*s13^3)*s23 +
            (84*s12^2 - 174*s12*s13 - 68*s13^2)*s23^2 + (-252*s12 - 250*s13)*
             s23^3) + p2q^2*(12*s12*s13^3 - 6*s13^4 +
            (3*s12^2*s13 + 6*s12*s13^2 + 3*s13^3)*s23 +
            (126*s12^2 - 24*s12*s13 - 84*s13^2)*s23^2 - 147*s13*s23^3) +
          p1q^2*(-18*s12^2*s13^2 + (3*s12^2*s13 + 21*s13^3)*s23 +
            (-66*s12*s13 + 12*s13^2)*s23^2 + (-84*s12 - 21*s13)*s23^3 +
            42*s23^4)) + p3q^2*(p1q*p2q^2*(24*s12*s13^3 - 18*s13^4 +
            (5*s12^2*s13 + 17*s12*s13^2 + 8*s13^3)*s23 +
            (42*s12^2 - 321*s12*s13 - 202*s13^2)*s23^2 + (-252*s12 - 354*s13)*
             s23^3) + p2q^3*(-6*s13^4 + (s12^2*s13 + s12*s13^2 - 4*s13^3)*
             s23 + (42*s12^2 - 85*s12*s13 - 106*s13^2)*s23^2 -
            126*s13*s23^3) + p1q^3*(-6*s12^2*s13^2 +
            (s12^2*s13 + 11*s12*s13^2 + 18*s13^3)*s23 +
            (-23*s12*s13 + 14*s13^2)*s23^2 + 20*s13*s23^3 + 42*s23^4) +
          p1q^2*p2q*(-6*s12^2*s13^2 + 36*s12*s13^3 +
            (5*s12^2*s13 + 39*s12*s13^2 + 54*s13^3)*s23 +
            (-175*s12*s13 + 14*s13^2)*s23^2 + (-168*s12 - 40*s13)*s23^3 +
            126*s23^4)) + p3q*(p1q*p2q^3*(-12*s13^4 +
            (s12^2*s13 + 2*s12*s13^2 - 7*s13^3)*s23 +
            (-212*s12*s13 - 168*s13^2)*s23^2 + (-84*s12 - 209*s13)*s23^3) +
          p2q^4*((-(s12*s13^2) - s13^3)*s23 + (-42*s12*s13 - 43*s13^2)*
             s23^2 - 42*s13*s23^3) + p1q^4*((6*s12*s13^2 + 6*s13^3)*s23 +
            (-(s12*s13) + 5*s13^2)*s23^2 - s13*s23^3) +
          p1q^3*p2q*(12*s12*s13^3 + (s12^2*s13 + 28*s12*s13^2 + 31*s13^3)*
             s23 + (-46*s12*s13 + 24*s13^2)*s23^2 + 41*s13*s23^3 +
            84*s23^4) + p1q^2*p2q^2*(12*s12*s13^3 - 18*s13^4 +
            (2*s12^2*s13 + 16*s12*s13^2 + 6*s13^3)*s23 +
            (-152*s12*s13 - 30*s13^2)*s23^2 + (-84*s12 - 18*s13)*s23^3 +
            126*s23^4)))*Log(p1q/(p1q + p2q + p3q))^2)/
      (27*p1q^3*p2q^2*s13^2*s23^2 + 27*p1q^2*p2q^3*s13^2*s23^2 +
       27*p3q^5*s13^2*s23^2 + p3q^4*(81*p1q*s13^2*s23^2 +
         81*p2q*s13^2*s23^2) + p3q^3*(81*p1q^2*s13^2*s23^2 +
         216*p1q*p2q*s13^2*s23^2 + 81*p2q^2*s13^2*s23^2) +
       p3q^2*(27*p1q^3*s13^2*s23^2 + 189*p1q^2*p2q*s13^2*s23^2 +
         189*p1q*p2q^2*s13^2*s23^2 + 27*p2q^3*s13^2*s23^2) +
       p3q*(54*p1q^3*p2q*s13^2*s23^2 + 135*p1q^2*p2q^2*s13^2*s23^2 +
         54*p1q*p2q^3*s13^2*s23^2)) +
     ((p1q^4*p2q*((-42*s12*s13^2 - 42*s13^3)*s23 + (-(s12*s13) - 43*s13^2)*
           s23^2 - s13*s23^3) + p3q^5*(42*s12^2*s13^2 +
          (2*s12^2*s13 + 21*s12*s13^2 - 21*s13^3)*s23 +
          (-6*s12^2 - 3*s12*s13)*s23^2 + 3*s13*s23^3) +
        p1q*p2q^4*((-(s12*s13^2) - s13^3)*s23 + (6*s12*s13 + 5*s13^2)*s23^2 +
          6*s13*s23^3) + p1q^3*p2q^2*(42*s13^4 + (-43*s12*s13^2 + s13^3)*
           s23 + (s12*s13 - 20*s13^2)*s23^2 - 3*s13*s23^3 - 6*s23^4) +
        p1q^2*p2q^3*(42*s13^4 + (-23*s12*s13^2 + 21*s13^3)*s23 +
          (5*s12*s13 + 4*s13^2)*s23^2 + s13*s23^3 - 6*s23^4) +
        p3q^4*(p2q*(42*s12^2*s13^2 - 84*s12*s13^3 +
            (4*s12^2*s13 - 23*s12*s13^2 - 63*s13^3)*s23 +
            (-18*s12^2 - 8*s12*s13 + 3*s13^2)*s23^2 + 12*s13*s23^3) +
          p1q*(126*s12^2*s13^2 + (4*s12^2*s13 + 40*s12*s13^2 - 84*s13^3)*
             s23 + (-6*s12^2 + s12*s13 - 21*s13^2)*s23^2 + (12*s12 + 9*s13)*
             s23^3)) + p3q*(p1q^4*((-42*s12*s13^2 - 42*s13^3)*s23 +
            (-(s12*s13) - 43*s13^2)*s23^2 - s13*s23^3) +
          p2q^4*((-(s12*s13^2) - s13^3)*s23 + (6*s12*s13 + 5*s13^2)*s23^2 +
            6*s13*s23^3) + p1q*p2q^3*(84*s13^4 + (s12^2*s13 - 46*s12*s13^2 +
              41*s13^3)*s23 + (28*s12*s13 + 24*s13^2)*s23^2 +
            (12*s12 + 31*s13)*s23^3) + p1q^2*p2q^2*(-84*s12*s13^3 +
            126*s13^4 + (2*s12^2*s13 - 152*s12*s13^2 - 18*s13^3)*s23 +
            (16*s12*s13 - 30*s13^2)*s23^2 + (12*s12 + 6*s13)*s23^3 -
            18*s23^4) + p1q^3*p2q*(-84*s12*s13^3 +
            (s12^2*s13 - 212*s12*s13^2 - 209*s13^3)*s23 +
            (2*s12*s13 - 168*s13^2)*s23^2 - 7*s13*s23^3 - 12*s23^4)) +
        p3q^2*(p2q^3*(42*s13^4 + (s12^2*s13 - 23*s12*s13^2 + 20*s13^3)*s23 +
            (-6*s12^2 + 11*s12*s13 + 14*s13^2)*s23^2 + 18*s13*s23^3) +
          p1q*p2q^2*(-168*s12*s13^3 + 126*s13^4 +
            (5*s12^2*s13 - 175*s12*s13^2 - 40*s13^3)*s23 +
            (-6*s12^2 + 39*s12*s13 + 14*s13^2)*s23^2 + (36*s12 + 54*s13)*
             s23^3) + p1q^2*p2q*(42*s12^2*s13^2 - 252*s12*s13^3 +
            (5*s12^2*s13 - 321*s12*s13^2 - 354*s13^3)*s23 +
            (17*s12*s13 - 202*s13^2)*s23^2 + (24*s12 + 8*s13)*s23^3 -
            18*s23^4) + p1q^3*(42*s12^2*s13^2 + (s12^2*s13 - 85*s12*s13^2 -
              126*s13^3)*s23 + (s12*s13 - 106*s13^2)*s23^2 - 4*s13*s23^3 -
            6*s23^4)) + p3q^3*(p2q^2*(-84*s12*s13^3 + 42*s13^4 +
            (3*s12^2*s13 - 66*s12*s13^2 - 21*s13^3)*s23 +
            (-18*s12^2 + 12*s13^2)*s23^2 + 21*s13*s23^3) +
          p1q*p2q*(84*s12^2*s13^2 - 252*s12*s13^3 +
            (8*s12^2*s13 - 174*s12*s13^2 - 250*s13^3)*s23 +
            (-12*s12^2 + 18*s12*s13 - 68*s13^2)*s23^2 + (36*s12 + 38*s13)*
             s23^3) + p1q^2*(126*s12^2*s13^2 + (3*s12^2*s13 - 24*s12*s13^2 -
              147*s13^3)*s23 + (6*s12*s13 - 84*s13^2)*s23^2 +
            (12*s12 + 3*s13)*s23^3 - 6*s23^4)))*Log(p2q/(p1q + p2q + p3q))^2)/
      (27*p1q^3*p2q^2*s13^2*s23^2 + 27*p1q^2*p2q^3*s13^2*s23^2 +
       27*p3q^5*s13^2*s23^2 + p3q^4*(81*p1q*s13^2*s23^2 +
         81*p2q*s13^2*s23^2) + p3q^3*(81*p1q^2*s13^2*s23^2 +
         216*p1q*p2q*s13^2*s23^2 + 81*p2q^2*s13^2*s23^2) +
       p3q^2*(27*p1q^3*s13^2*s23^2 + 189*p1q^2*p2q*s13^2*s23^2 +
         189*p1q*p2q^2*s13^2*s23^2 + 27*p2q^3*s13^2*s23^2) +
       p3q*(54*p1q^3*p2q*s13^2*s23^2 + 135*p1q^2*p2q^2*s13^2*s23^2 +
         54*p1q*p2q^3*s13^2*s23^2)) +
     ((p1q*p2q^4*((10*s12*s13^2 + 10*s13^3)*s23 + (-12*s12*s13 - 2*s13^2)*
           s23^2 - 12*s13*s23^3) + p3q^5*(12*s12^2*s13^2 +
          (-20*s12^2*s13 + 6*s12*s13^2 - 6*s13^3)*s23 +
          (12*s12^2 + 6*s12*s13)*s23^2 - 6*s13*s23^3) +
        p1q^4*p2q*((-12*s12*s13^2 - 12*s13^3)*s23 + (10*s12*s13 - 2*s13^2)*
           s23^2 + 10*s13*s23^3) + p1q^2*p2q^3*(12*s13^4 +
          (14*s12*s13^2 + 6*s13^3)*s23 + (-2*s12*s13 - 16*s13^2)*s23^2 -
          10*s13*s23^3 + 12*s23^4) + p1q^3*p2q^2*(12*s13^4 +
          (-2*s12*s13^2 - 10*s13^3)*s23 + (14*s12*s13 - 16*s13^2)*s23^2 +
          6*s13*s23^3 + 12*s23^4) +
        p3q^4*(p1q*(36*s12^2*s13^2 + (-40*s12^2*s13 + 32*s12*s13^2 -
              24*s13^3)*s23 + (12*s12^2 + 14*s12*s13 - 6*s13^2)*s23^2 +
            (-24*s12 - 18*s13)*s23^3) + p2q*(12*s12^2*s13^2 - 24*s12*s13^3 +
            (-40*s12^2*s13 + 14*s12*s13^2 - 18*s13^3)*s23 +
            (36*s12^2 + 32*s12*s13 - 6*s13^2)*s23^2 - 24*s13*s23^3)) +
        p3q^3*(p1q*p2q*(24*s12^2*s13^2 - 72*s12*s13^3 +
            (-80*s12^2*s13 + 12*s12*s13^2 - 92*s13^3)*s23 +
            (24*s12^2 + 12*s12*s13 - 88*s13^2)*s23^2 + (-72*s12 - 92*s13)*
             s23^3) + p2q^2*(-24*s12*s13^3 + 12*s13^4 +
            (-30*s12^2*s13 + 12*s12*s13^2 - 6*s13^3)*s23 +
            (36*s12^2 + 24*s12*s13 - 24*s13^2)*s23^2 - 42*s13*s23^3) +
          p1q^2*(36*s12^2*s13^2 + (-30*s12^2*s13 + 24*s12*s13^2 - 42*s13^3)*
             s23 + (12*s12*s13 - 24*s13^2)*s23^2 + (-24*s12 - 6*s13)*s23^3 +
            12*s23^4)) + p3q*(p1q*p2q^3*(24*s13^4 +
            (-10*s12^2*s13 + 28*s12*s13^2 + 22*s13^3)*s23 +
            (-40*s12*s13 - 48*s13^2)*s23^2 + (-24*s12 - 70*s13)*s23^3) +
          p2q^4*((10*s12*s13^2 + 10*s13^3)*s23 + (-12*s12*s13 - 2*s13^2)*
             s23^2 - 12*s13*s23^3) + p1q^4*((-12*s12*s13^2 - 12*s13^3)*s23 +
            (10*s12*s13 - 2*s13^2)*s23^2 + 10*s13*s23^3) +
          p1q^3*p2q*(-24*s12*s13^3 + (-10*s12^2*s13 - 40*s12*s13^2 -
              70*s13^3)*s23 + (28*s12*s13 - 48*s13^2)*s23^2 + 22*s13*s23^3 +
            24*s23^4) + p1q^2*p2q^2*(-24*s12*s13^3 + 36*s13^4 +
            (-20*s12^2*s13 + 8*s12*s13^2 - 36*s13^3)*s23 +
            (8*s12*s13 - 84*s13^2)*s23^2 + (-24*s12 - 36*s13)*s23^3 +
            36*s23^4)) + p3q^2*(p1q*p2q^2*(-48*s12*s13^3 + 36*s13^4 +
            (-50*s12^2*s13 + 22*s12*s13^2 - 32*s13^3)*s23 +
            (12*s12^2 - 30*s12*s13 - 116*s13^2)*s23^2 + (-72*s12 - 132*s13)*
             s23^3) + p2q^3*(12*s13^4 + (-10*s12^2*s13 + 14*s12*s13^2 +
              16*s13^3)*s23 + (12*s12^2 - 14*s12*s13 - 20*s13^2)*s23^2 -
            36*s13*s23^3) + p1q^3*(12*s12^2*s13^2 +
            (-10*s12^2*s13 - 14*s12*s13^2 - 36*s13^3)*s23 +
            (14*s12*s13 - 20*s13^2)*s23^2 + 16*s13*s23^3 + 12*s23^4) +
          p1q^2*p2q*(12*s12^2*s13^2 - 72*s12*s13^3 +
            (-50*s12^2*s13 - 30*s12*s13^2 - 132*s13^3)*s23 +
            (22*s12*s13 - 116*s13^2)*s23^2 + (-48*s12 - 32*s13)*s23^3 +
            36*s23^4)))*Log(p3q/(p1q + p2q + p3q))^2)/
      (27*p1q^3*p2q^2*s13^2*s23^2 + 27*p1q^2*p2q^3*s13^2*s23^2 +
       27*p3q^5*s13^2*s23^2 + p3q^4*(81*p1q*s13^2*s23^2 +
         81*p2q*s13^2*s23^2) + p3q^3*(81*p1q^2*s13^2*s23^2 +
         216*p1q*p2q*s13^2*s23^2 + 81*p2q^2*s13^2*s23^2) +
       p3q^2*(27*p1q^3*s13^2*s23^2 + 189*p1q^2*p2q*s13^2*s23^2 +
         189*p1q*p2q^2*s13^2*s23^2 + 27*p2q^3*s13^2*s23^2) +
       p3q*(54*p1q^3*p2q*s13^2*s23^2 + 135*p1q^2*p2q^2*s13^2*s23^2 +
         54*p1q*p2q^3*s13^2*s23^2)) +
     ((p1q*p2q^4*(-2*s12*s13^3 - 2*s13^4 + (12*s12*s13^2 + 10*s13^3)*s23 +
          12*s13^2*s23^2) + p1q^2*p2q^3*(s12^2*s13^2 - 2*s12*s13^3 -
          3*s13^4 + (-12*s12^2*s13 - 2*s12*s13^2 + 6*s13^3)*s23 +
          (-36*s12*s13 - 15*s13^2)*s23^2 - 24*s13*s23^3) +
        p3q^5*(-2*s12^3*s13 - 2*s12^2*s13^2 + (12*s12^3 + 10*s12^2*s13)*s23 +
          (12*s12^2 - 6*s12*s13 - 6*s13^2)*s23^2 - 6*s13*s23^3) +
        p1q^5*((s12^2*s13 + 2*s12*s13^2 + s13^3)*s23 + (2*s12*s13 + 2*s13^2)*
           s23^2 + s13*s23^3) + p1q^3*p2q^2*(2*s12^2*s13^2 - 2*s13^4 +
          (-11*s12^2*s13 - 6*s12*s13^2 + s13^3)*s23 +
          (-30*s12*s13 - 16*s13^2)*s23^2 + (12*s12 - 7*s13)*s23^3 +
          12*s23^4) + p1q^4*p2q*(s12^2*s13^2 - s13^4 +
          (-4*s12^2*s13 - 2*s12*s13^2)*s23 + (-4*s12*s13 + s13^2)*s23^2 +
          (12*s12 + 12*s13)*s23^3 + 12*s23^4) +
        p3q^4*(p1q*(-6*s12^3*s13 - 6*s12^2*s13^2 + (24*s12^3 + 14*s12^2*s13 -
              4*s12*s13^2)*s23 + (-46*s12*s13 - 18*s13^2)*s23^2 +
            (-24*s12 - 18*s13)*s23^3) + p2q*(-2*s12^3*s13 + 2*s12^2*s13^2 +
            4*s12*s13^3 + (24*s12^3 + 6*s12^2*s13 - 12*s12*s13^2)*s23 +
            (24*s12^2 - 34*s12*s13 - 18*s13^2)*s23^2 - 18*s13*s23^3)) +
        p3q^3*(p1q*p2q*(-6*s12^3*s13 + 4*s12^2*s13^2 + 10*s12*s13^3 +
            (36*s12^3 - 6*s12^2*s13 - 12*s12*s13^2 + 14*s13^3)*s23 +
            (-12*s12^2 - 134*s12*s13 - 36*s13^2)*s23^2 + (-48*s12 - 50*s13)*
             s23^3) + p2q^2*(-(s12^3*s13) + 4*s12^2*s13^2 + 3*s12*s13^3 -
            2*s13^4 + (12*s12^3 - 30*s12^2*s13 - 30*s12*s13^2 + 4*s13^3)*
             s23 + (12*s12^2 - 65*s12*s13 - 18*s13^2)*s23^2 - 24*s13*s23^3) +
          p1q^2*(-7*s12^3*s13 - 6*s12^2*s13^2 + s12*s13^3 +
            (12*s12^3 - 8*s12^2*s13 - 10*s12*s13^2 + 2*s13^3)*s23 +
            (-36*s12^2 - 79*s12*s13 - 16*s13^2)*s23^2 + (-36*s12 - 6*s13)*
             s23^3 + 12*s23^4)) + p3q^2*(p1q*p2q^2*(-2*s12^3*s13 +
            10*s12^2*s13^2 + 8*s12*s13^3 - 4*s13^4 +
            (12*s12^3 - 35*s12^2*s13 + 22*s12*s13^2 + 51*s13^3)*s23 +
            (-12*s12^2 - 112*s12*s13 + 12*s13^2)*s23^2 + (-24*s12 - 43*s13)*
             s23^3) + p2q^3*(3*s12^2*s13^2 - 3*s13^4 +
            (-24*s12^2*s13 - 2*s12*s13^2 + 16*s13^3)*s23 +
            (-36*s12*s13 + 7*s13^2)*s23^2 - 12*s13*s23^3) +
          p1q^2*p2q*(-6*s12^3*s13 + 5*s12^2*s13^2 + 10*s12*s13^3 - s13^4 +
            (12*s12^3 - 34*s12^2*s13 - 10*s12*s13^2 + 18*s13^3)*s23 +
            (-60*s12^2 - 170*s12*s13 - 39*s13^2)*s23^2 + (-48*s12 - 34*s13)*
             s23^3 + 24*s23^4) + p1q^3*(-4*s12^3*s13 - 2*s12^2*s13^2 +
            2*s12*s13^3 + (-17*s12^2*s13 - 6*s12*s13^2 + 5*s13^3)*s23 +
            (-24*s12^2 - 42*s12*s13)*s23^2 + 19*s13*s23^3 + 24*s23^4)) +
        p3q*(p2q^4*(-2*s12*s13^3 - 2*s13^4 + (12*s12*s13^2 + 10*s13^3)*s23 +
            12*s13^2*s23^2) + p1q*p2q^3*(4*s12^2*s13^2 - 2*s12*s13^3 -
            6*s13^4 + (-12*s12^2*s13 + 44*s12*s13^2 + 46*s13^3)*s23 +
            (-24*s12*s13 + 40*s13^2)*s23^2 - 12*s13*s23^3) +
          p1q^2*p2q^2*(-(s12^3*s13) + 8*s12^2*s13^2 + 5*s12*s13^3 - 4*s13^4 +
            (-40*s12^2*s13 - 2*s12*s13^2 + 24*s13^3)*s23 +
            (-24*s12^2 - 125*s12*s13 - 34*s13^2)*s23^2 + (-12*s12 - 50*s13)*
             s23^3 + 12*s23^4) + p1q^4*(-(s12^3*s13) + s12*s13^3 +
            (-4*s12^2*s13 + 2*s12*s13^2 + 4*s13^3)*s23 +
            (-(s12*s13) + 6*s13^2)*s23^2 + (12*s12 + 14*s13)*s23^3 +
            12*s23^4) + p1q^3*p2q*(-2*s12^3*s13 + 4*s12^2*s13^2 +
            4*s12*s13^3 - 2*s13^4 + (-26*s12^2*s13 - 12*s12*s13^2 + 4*s13^3)*
             s23 + (-24*s12^2 - 74*s12*s13 - 20*s13^2)*s23^2 +
            (12*s12 + 10*s13)*s23^3 + 36*s23^4)))*
       Log((p1q + p3q)/(p1q + p2q + p3q))^2)/(-3*p1q^2*p2q^3*s13^3*s23 +
       p1q^4*p2q*(3*s12*s13^2*s23 + 3*s13^2*s23^2) +
       p3q^5*(3*s12*s13^2*s23 + 3*s13^2*s23^2) +
       p1q^3*p2q^2*((3*s12*s13^2 - 3*s13^3)*s23 + 3*s13^2*s23^2) +
       p3q^4*(p2q*((6*s12*s13^2 - 3*s13^3)*s23 + 6*s13^2*s23^2) +
         p1q*(12*s12*s13^2*s23 + 12*s13^2*s23^2)) +
       p3q*(-6*p1q*p2q^3*s13^3*s23 + p1q^4*(3*s12*s13^2*s23 +
           3*s13^2*s23^2) + p1q^2*p2q^2*((9*s12*s13^2 - 12*s13^3)*s23 +
           9*s13^2*s23^2) + p1q^3*p2q*((15*s12*s13^2 - 3*s13^3)*s23 +
           15*s13^2*s23^2)) + p3q^3*(p2q^2*((3*s12*s13^2 - 6*s13^3)*s23 +
           3*s13^2*s23^2) + p1q^2*(18*s12*s13^2*s23 + 18*s13^2*s23^2) +
         p1q*p2q*((21*s12*s13^2 - 9*s13^3)*s23 + 21*s13^2*s23^2)) +
       p3q^2*(-3*p2q^3*s13^3*s23 + p1q*p2q^2*((9*s12*s13^2 - 15*s13^3)*s23 +
           9*s13^2*s23^2) + p1q^3*(12*s12*s13^2*s23 + 12*s13^2*s23^2) +
         p1q^2*p2q*((27*s12*s13^2 - 9*s13^3)*s23 + 27*s13^2*s23^2))) +
     ((p3q^5*(12*s12^3*s13 + 12*s12^2*s13^2 + (-2*s12^3 + 10*s12^2*s13 -
            6*s12*s13^2 - 6*s13^3)*s23 + (-2*s12^2 - 6*s13^2)*s23^2) +
        p2q^5*((s12^2*s13 + 2*s12*s13^2 + s13^3)*s23 + (2*s12*s13 + 2*s13^2)*
           s23^2 + s13*s23^3) + p1q^3*p2q^2*
         ((-12*s12^2*s13 - 36*s12*s13^2 - 24*s13^3)*s23 +
          (s12^2 - 2*s12*s13 - 15*s13^2)*s23^2 + (-2*s12 + 6*s13)*s23^3 -
          3*s23^4) + p1q^2*p2q^3*(12*s12*s13^3 + 12*s13^4 +
          (-11*s12^2*s13 - 30*s12*s13^2 - 7*s13^3)*s23 +
          (2*s12^2 - 6*s12*s13 - 16*s13^2)*s23^2 + s13*s23^3 - 2*s23^4) +
        p1q^4*p2q*((12*s12*s13 + 12*s13^2)*s23^2 + (-2*s12 + 10*s13)*s23^3 -
          2*s23^4) + p1q*p2q^4*(12*s12*s13^3 + 12*s13^4 +
          (-4*s12^2*s13 - 4*s12*s13^2 + 12*s13^3)*s23 +
          (s12^2 - 2*s12*s13 + s13^2)*s23^2 - s23^4) +
        p3q^4*(p2q*(24*s12^3*s13 - 24*s12*s13^3 + (-6*s12^3 + 14*s12^2*s13 -
              46*s12*s13^2 - 18*s13^3)*s23 + (-6*s12^2 - 4*s12*s13 -
              18*s13^2)*s23^2) + p1q*(24*s12^3*s13 + 24*s12^2*s13^2 +
            (-2*s12^3 + 6*s12^2*s13 - 34*s12*s13^2 - 18*s13^3)*s23 +
            (2*s12^2 - 12*s12*s13 - 18*s13^2)*s23^2 + 4*s12*s23^3)) +
        p3q^3*(p2q^2*(12*s12^3*s13 - 36*s12^2*s13^2 - 36*s12*s13^3 +
            12*s13^4 + (-7*s12^3 - 8*s12^2*s13 - 79*s12*s13^2 - 6*s13^3)*
             s23 + (-6*s12^2 - 10*s12*s13 - 16*s13^2)*s23^2 +
            (s12 + 2*s13)*s23^3) + p1q*p2q*(36*s12^3*s13 - 12*s12^2*s13^2 -
            48*s12*s13^3 + (-6*s12^3 - 6*s12^2*s13 - 134*s12*s13^2 -
              50*s13^3)*s23 + (4*s12^2 - 12*s12*s13 - 36*s13^2)*s23^2 +
            (10*s12 + 14*s13)*s23^3) + p1q^2*(12*s12^3*s13 + 12*s12^2*s13^2 +
            (-s12^3 - 30*s12^2*s13 - 65*s12*s13^2 - 24*s13^3)*s23 +
            (4*s12^2 - 30*s12*s13 - 18*s13^2)*s23^2 + (3*s12 + 4*s13)*s23^3 -
            2*s23^4)) + p3q*(p2q^4*(12*s12*s13^3 + 12*s13^4 +
            (-s12^3 - 4*s12^2*s13 - s12*s13^2 + 14*s13^3)*s23 +
            (2*s12*s13 + 6*s13^2)*s23^2 + (s12 + 4*s13)*s23^3) +
          p1q^3*p2q*((-12*s12^2*s13 - 24*s12*s13^2 - 12*s13^3)*s23 +
            (4*s12^2 + 44*s12*s13 + 40*s13^2)*s23^2 + (-2*s12 + 46*s13)*
             s23^3 - 6*s23^4) + p1q^2*p2q^2*(-24*s12^2*s13^2 - 12*s12*s13^3 +
            12*s13^4 + (-s12^3 - 40*s12^2*s13 - 125*s12*s13^2 - 50*s13^3)*
             s23 + (8*s12^2 - 2*s12*s13 - 34*s13^2)*s23^2 +
            (5*s12 + 24*s13)*s23^3 - 4*s23^4) + p1q*p2q^3*(-24*s12^2*s13^2 +
            12*s12*s13^3 + 36*s13^4 + (-2*s12^3 - 26*s12^2*s13 -
              74*s12*s13^2 + 10*s13^3)*s23 + (4*s12^2 - 12*s12*s13 -
              20*s13^2)*s23^2 + (4*s12 + 4*s13)*s23^3 - 2*s23^4) +
          p1q^4*((12*s12*s13 + 12*s13^2)*s23^2 + (-2*s12 + 10*s13)*s23^3 -
            2*s23^4)) + p3q^2*(p2q^3*(-24*s12^2*s13^2 + 24*s13^4 +
            (-4*s12^3 - 17*s12^2*s13 - 42*s12*s13^2 + 19*s13^3)*s23 +
            (-2*s12^2 - 6*s12*s13)*s23^2 + (2*s12 + 5*s13)*s23^3) +
          p1q^2*p2q*(12*s12^3*s13 - 12*s12^2*s13^2 - 24*s12*s13^3 +
            (-2*s12^3 - 35*s12^2*s13 - 112*s12*s13^2 - 43*s13^3)*s23 +
            (10*s12^2 + 22*s12*s13 + 12*s13^2)*s23^2 + (8*s12 + 51*s13)*
             s23^3 - 4*s23^4) + p1q^3*((-24*s12^2*s13 - 36*s12*s13^2 -
              12*s13^3)*s23 + (3*s12^2 - 2*s12*s13 + 7*s13^2)*s23^2 +
            16*s13*s23^3 - 3*s23^4) + p1q*p2q^2*(12*s12^3*s13 -
            60*s12^2*s13^2 - 48*s12*s13^3 + 24*s13^4 +
            (-6*s12^3 - 34*s12^2*s13 - 170*s12*s13^2 - 34*s13^3)*s23 +
            (5*s12^2 - 10*s12*s13 - 39*s13^2)*s23^2 + (10*s12 + 18*s13)*
             s23^3 - s23^4)))*Log((p2q + p3q)/(p1q + p2q + p3q))^2)/
      (p1q*p2q^4*(3*s12*s13 + 3*s13^2)*s23^2 + p3q^5*(3*s12*s13 + 3*s13^2)*
        s23^2 - 3*p1q^3*p2q^2*s13*s23^3 + p1q^2*p2q^3*
        ((3*s12*s13 + 3*s13^2)*s23^2 - 3*s13*s23^3) +
       p3q^2*(p2q^3*(12*s12*s13 + 12*s13^2)*s23^2 - 3*p1q^3*s13*s23^3 +
         p1q^2*p2q*((9*s12*s13 + 9*s13^2)*s23^2 - 15*s13*s23^3) +
         p1q*p2q^2*((27*s12*s13 + 27*s13^2)*s23^2 - 9*s13*s23^3)) +
       p3q^3*(p2q^2*(18*s12*s13 + 18*s13^2)*s23^2 +
         p1q*p2q*((21*s12*s13 + 21*s13^2)*s23^2 - 9*s13*s23^3) +
         p1q^2*((3*s12*s13 + 3*s13^2)*s23^2 - 6*s13*s23^3)) +
       p3q^4*(p2q*(12*s12*s13 + 12*s13^2)*s23^2 +
         p1q*((6*s12*s13 + 6*s13^2)*s23^2 - 3*s13*s23^3)) +
       p3q*(p2q^4*(3*s12*s13 + 3*s13^2)*s23^2 - 6*p1q^3*p2q*s13*s23^3 +
         p1q^2*p2q^2*((9*s12*s13 + 9*s13^2)*s23^2 - 12*s13*s23^3) +
         p1q*p2q^3*((15*s12*s13 + 15*s13^2)*s23^2 - 3*s13*s23^3))) +
     ((p1q*p2q^4*((8*s12*s13^2 + 8*s13^3)*s23 + (-48*s12*s13 - 40*s13^2)*
           s23^2 - 48*s13*s23^3) + p3q^5*(48*s12^2*s13^2 +
          (-16*s12^2*s13 + 24*s12*s13^2 - 24*s13^3)*s23 +
          (48*s12^2 + 24*s12*s13)*s23^2 - 24*s13*s23^3) +
        p1q^4*p2q*((-48*s12*s13^2 - 48*s13^3)*s23 + (8*s12*s13 - 40*s13^2)*
           s23^2 + 8*s13*s23^3) + p1q^2*p2q^3*(48*s13^4 +
          (-8*s12*s13^2 + 24*s13^3)*s23 + (-40*s12*s13 - 32*s13^2)*s23^2 -
          8*s13*s23^3 + 48*s23^4) + p1q^3*p2q^2*(48*s13^4 +
          (-40*s12*s13^2 - 8*s13^3)*s23 + (-8*s12*s13 - 32*s13^2)*s23^2 +
          24*s13*s23^3 + 48*s23^4) +
        p3q^4*(p1q*(144*s12^2*s13^2 + (-32*s12^2*s13 + 64*s12*s13^2 -
              96*s13^3)*s23 + (48*s12^2 - 8*s12*s13 - 24*s13^2)*s23^2 +
            (-96*s12 - 72*s13)*s23^3) + p2q*(48*s12^2*s13^2 - 96*s12*s13^3 +
            (-32*s12^2*s13 - 8*s12*s13^2 - 72*s13^3)*s23 +
            (144*s12^2 + 64*s12*s13 - 24*s13^2)*s23^2 - 96*s13*s23^3)) +
        p3q^3*(p1q*p2q*(96*s12^2*s13^2 - 288*s12*s13^3 +
            (-64*s12^2*s13 - 144*s12*s13^2 - 304*s13^3)*s23 +
            (96*s12^2 - 144*s12*s13 - 224*s13^2)*s23^2 + (-288*s12 - 304*s13)*
             s23^3) + p2q^2*(-96*s12*s13^3 + 48*s13^4 +
            (-24*s12^2*s13 - 48*s12*s13^2 - 24*s13^3)*s23 +
            (144*s12^2 - 96*s13^2)*s23^2 - 168*s13*s23^3) +
          p1q^2*(144*s12^2*s13^2 + (-24*s12^2*s13 - 168*s13^3)*s23 +
            (-48*s12*s13 - 96*s13^2)*s23^2 + (-96*s12 - 24*s13)*s23^3 +
            48*s23^4)) + p3q^2*(p1q*p2q^2*(-192*s12*s13^3 + 144*s13^4 +
            (-40*s12^2*s13 - 136*s12*s13^2 - 64*s13^3)*s23 +
            (48*s12^2 - 312*s12*s13 - 304*s13^2)*s23^2 + (-288*s12 - 432*s13)*
             s23^3) + p2q^3*(48*s13^4 + (-8*s12^2*s13 - 8*s12*s13^2 +
              32*s13^3)*s23 + (48*s12^2 - 88*s12*s13 - 112*s13^2)*s23^2 -
            144*s13*s23^3) + p1q^3*(48*s12^2*s13^2 +
            (-8*s12^2*s13 - 88*s12*s13^2 - 144*s13^3)*s23 +
            (-8*s12*s13 - 112*s13^2)*s23^2 + 32*s13*s23^3 + 48*s23^4) +
          p1q^2*p2q*(48*s12^2*s13^2 - 288*s12*s13^3 +
            (-40*s12^2*s13 - 312*s12*s13^2 - 432*s13^3)*s23 +
            (-136*s12*s13 - 304*s13^2)*s23^2 + (-192*s12 - 64*s13)*s23^3 +
            144*s23^4)) + p3q*(p1q*p2q^3*(96*s13^4 +
            (-8*s12^2*s13 - 16*s12*s13^2 + 56*s13^3)*s23 +
            (-224*s12*s13 - 192*s13^2)*s23^2 + (-96*s12 - 248*s13)*s23^3) +
          p2q^4*((8*s12*s13^2 + 8*s13^3)*s23 + (-48*s12*s13 - 40*s13^2)*
             s23^2 - 48*s13*s23^3) + p1q^4*((-48*s12*s13^2 - 48*s13^3)*s23 +
            (8*s12*s13 - 40*s13^2)*s23^2 + 8*s13*s23^3) +
          p1q^3*p2q*(-96*s12*s13^3 + (-8*s12^2*s13 - 224*s12*s13^2 -
              248*s13^3)*s23 + (-16*s12*s13 - 192*s13^2)*s23^2 +
            56*s13*s23^3 + 96*s23^4) + p1q^2*p2q^2*(-96*s12*s13^3 +
            144*s13^4 + (-16*s12^2*s13 - 128*s12*s13^2 - 48*s13^3)*s23 +
            (-128*s12*s13 - 144*s13^2)*s23^2 + (-96*s12 - 48*s13)*s23^3 +
            144*s23^4)))*Log(-s12 - s13 - s23)^2)/
      (27*p1q^3*p2q^2*s13^2*s23^2 + 27*p1q^2*p2q^3*s13^2*s23^2 +
       27*p3q^5*s13^2*s23^2 + p3q^4*(81*p1q*s13^2*s23^2 +
         81*p2q*s13^2*s23^2) + p3q^3*(81*p1q^2*s13^2*s23^2 +
         216*p1q*p2q*s13^2*s23^2 + 81*p2q^2*s13^2*s23^2) +
       p3q^2*(27*p1q^3*s13^2*s23^2 + 189*p1q^2*p2q*s13^2*s23^2 +
         189*p1q*p2q^2*s13^2*s23^2 + 27*p2q^3*s13^2*s23^2) +
       p3q*(54*p1q^3*p2q*s13^2*s23^2 + 135*p1q^2*p2q^2*s13^2*s23^2 +
         54*p1q*p2q^3*s13^2*s23^2)) +
     ((p1q*p2q^4*((10*s12*s13^2 + 10*s13^3)*s23 + (-12*s12*s13 - 2*s13^2)*
           s23^2 - 12*s13*s23^3) + p3q^5*(12*s12^2*s13^2 +
          (-20*s12^2*s13 + 6*s12*s13^2 - 6*s13^3)*s23 +
          (12*s12^2 + 6*s12*s13)*s23^2 - 6*s13*s23^3) +
        p1q^4*p2q*((-12*s12*s13^2 - 12*s13^3)*s23 + (10*s12*s13 - 2*s13^2)*
           s23^2 + 10*s13*s23^3) + p1q^2*p2q^3*(12*s13^4 +
          (14*s12*s13^2 + 6*s13^3)*s23 + (-2*s12*s13 - 16*s13^2)*s23^2 -
          10*s13*s23^3 + 12*s23^4) + p1q^3*p2q^2*(12*s13^4 +
          (-2*s12*s13^2 - 10*s13^3)*s23 + (14*s12*s13 - 16*s13^2)*s23^2 +
          6*s13*s23^3 + 12*s23^4) +
        p3q^4*(p1q*(36*s12^2*s13^2 + (-40*s12^2*s13 + 32*s12*s13^2 -
              24*s13^3)*s23 + (12*s12^2 + 14*s12*s13 - 6*s13^2)*s23^2 +
            (-24*s12 - 18*s13)*s23^3) + p2q*(12*s12^2*s13^2 - 24*s12*s13^3 +
            (-40*s12^2*s13 + 14*s12*s13^2 - 18*s13^3)*s23 +
            (36*s12^2 + 32*s12*s13 - 6*s13^2)*s23^2 - 24*s13*s23^3)) +
        p3q^3*(p1q*p2q*(24*s12^2*s13^2 - 72*s12*s13^3 +
            (-80*s12^2*s13 + 12*s12*s13^2 - 92*s13^3)*s23 +
            (24*s12^2 + 12*s12*s13 - 88*s13^2)*s23^2 + (-72*s12 - 92*s13)*
             s23^3) + p2q^2*(-24*s12*s13^3 + 12*s13^4 +
            (-30*s12^2*s13 + 12*s12*s13^2 - 6*s13^3)*s23 +
            (36*s12^2 + 24*s12*s13 - 24*s13^2)*s23^2 - 42*s13*s23^3) +
          p1q^2*(36*s12^2*s13^2 + (-30*s12^2*s13 + 24*s12*s13^2 - 42*s13^3)*
             s23 + (12*s12*s13 - 24*s13^2)*s23^2 + (-24*s12 - 6*s13)*s23^3 +
            12*s23^4)) + p3q*(p1q*p2q^3*(24*s13^4 +
            (-10*s12^2*s13 + 28*s12*s13^2 + 22*s13^3)*s23 +
            (-40*s12*s13 - 48*s13^2)*s23^2 + (-24*s12 - 70*s13)*s23^3) +
          p2q^4*((10*s12*s13^2 + 10*s13^3)*s23 + (-12*s12*s13 - 2*s13^2)*
             s23^2 - 12*s13*s23^3) + p1q^4*((-12*s12*s13^2 - 12*s13^3)*s23 +
            (10*s12*s13 - 2*s13^2)*s23^2 + 10*s13*s23^3) +
          p1q^3*p2q*(-24*s12*s13^3 + (-10*s12^2*s13 - 40*s12*s13^2 -
              70*s13^3)*s23 + (28*s12*s13 - 48*s13^2)*s23^2 + 22*s13*s23^3 +
            24*s23^4) + p1q^2*p2q^2*(-24*s12*s13^3 + 36*s13^4 +
            (-20*s12^2*s13 + 8*s12*s13^2 - 36*s13^3)*s23 +
            (8*s12*s13 - 84*s13^2)*s23^2 + (-24*s12 - 36*s13)*s23^3 +
            36*s23^4)) + p3q^2*(p1q*p2q^2*(-48*s12*s13^3 + 36*s13^4 +
            (-50*s12^2*s13 + 22*s12*s13^2 - 32*s13^3)*s23 +
            (12*s12^2 - 30*s12*s13 - 116*s13^2)*s23^2 + (-72*s12 - 132*s13)*
             s23^3) + p2q^3*(12*s13^4 + (-10*s12^2*s13 + 14*s12*s13^2 +
              16*s13^3)*s23 + (12*s12^2 - 14*s12*s13 - 20*s13^2)*s23^2 -
            36*s13*s23^3) + p1q^3*(12*s12^2*s13^2 +
            (-10*s12^2*s13 - 14*s12*s13^2 - 36*s13^3)*s23 +
            (14*s12*s13 - 20*s13^2)*s23^2 + 16*s13*s23^3 + 12*s23^4) +
          p1q^2*p2q*(12*s12^2*s13^2 - 72*s12*s13^3 +
            (-50*s12^2*s13 - 30*s12*s13^2 - 132*s13^3)*s23 +
            (22*s12*s13 - 116*s13^2)*s23^2 + (-48*s12 - 32*s13)*s23^3 +
            36*s23^4)))*Log(s12/(s12 + s13 + s23))^2)/
      (27*p1q^3*p2q^2*s13^2*s23^2 + 27*p1q^2*p2q^3*s13^2*s23^2 +
       27*p3q^5*s13^2*s23^2 + p3q^4*(81*p1q*s13^2*s23^2 +
         81*p2q*s13^2*s23^2) + p3q^3*(81*p1q^2*s13^2*s23^2 +
         216*p1q*p2q*s13^2*s23^2 + 81*p2q^2*s13^2*s23^2) +
       p3q^2*(27*p1q^3*s13^2*s23^2 + 189*p1q^2*p2q*s13^2*s23^2 +
         189*p1q*p2q^2*s13^2*s23^2 + 27*p2q^3*s13^2*s23^2) +
       p3q*(54*p1q^3*p2q*s13^2*s23^2 + 135*p1q^2*p2q^2*s13^2*s23^2 +
         54*p1q*p2q^3*s13^2*s23^2)) +
     ((p1q^4*p2q*((-42*s12*s13^2 - 42*s13^3)*s23 + (-(s12*s13) - 43*s13^2)*
           s23^2 - s13*s23^3) + p3q^5*(42*s12^2*s13^2 +
          (2*s12^2*s13 + 21*s12*s13^2 - 21*s13^3)*s23 +
          (-6*s12^2 - 3*s12*s13)*s23^2 + 3*s13*s23^3) +
        p1q*p2q^4*((-(s12*s13^2) - s13^3)*s23 + (6*s12*s13 + 5*s13^2)*s23^2 +
          6*s13*s23^3) + p1q^3*p2q^2*(42*s13^4 + (-43*s12*s13^2 + s13^3)*
           s23 + (s12*s13 - 20*s13^2)*s23^2 - 3*s13*s23^3 - 6*s23^4) +
        p1q^2*p2q^3*(42*s13^4 + (-23*s12*s13^2 + 21*s13^3)*s23 +
          (5*s12*s13 + 4*s13^2)*s23^2 + s13*s23^3 - 6*s23^4) +
        p3q^4*(p2q*(42*s12^2*s13^2 - 84*s12*s13^3 +
            (4*s12^2*s13 - 23*s12*s13^2 - 63*s13^3)*s23 +
            (-18*s12^2 - 8*s12*s13 + 3*s13^2)*s23^2 + 12*s13*s23^3) +
          p1q*(126*s12^2*s13^2 + (4*s12^2*s13 + 40*s12*s13^2 - 84*s13^3)*
             s23 + (-6*s12^2 + s12*s13 - 21*s13^2)*s23^2 + (12*s12 + 9*s13)*
             s23^3)) + p3q*(p1q^4*((-42*s12*s13^2 - 42*s13^3)*s23 +
            (-(s12*s13) - 43*s13^2)*s23^2 - s13*s23^3) +
          p2q^4*((-(s12*s13^2) - s13^3)*s23 + (6*s12*s13 + 5*s13^2)*s23^2 +
            6*s13*s23^3) + p1q*p2q^3*(84*s13^4 + (s12^2*s13 - 46*s12*s13^2 +
              41*s13^3)*s23 + (28*s12*s13 + 24*s13^2)*s23^2 +
            (12*s12 + 31*s13)*s23^3) + p1q^2*p2q^2*(-84*s12*s13^3 +
            126*s13^4 + (2*s12^2*s13 - 152*s12*s13^2 - 18*s13^3)*s23 +
            (16*s12*s13 - 30*s13^2)*s23^2 + (12*s12 + 6*s13)*s23^3 -
            18*s23^4) + p1q^3*p2q*(-84*s12*s13^3 +
            (s12^2*s13 - 212*s12*s13^2 - 209*s13^3)*s23 +
            (2*s12*s13 - 168*s13^2)*s23^2 - 7*s13*s23^3 - 12*s23^4)) +
        p3q^2*(p2q^3*(42*s13^4 + (s12^2*s13 - 23*s12*s13^2 + 20*s13^3)*s23 +
            (-6*s12^2 + 11*s12*s13 + 14*s13^2)*s23^2 + 18*s13*s23^3) +
          p1q*p2q^2*(-168*s12*s13^3 + 126*s13^4 +
            (5*s12^2*s13 - 175*s12*s13^2 - 40*s13^3)*s23 +
            (-6*s12^2 + 39*s12*s13 + 14*s13^2)*s23^2 + (36*s12 + 54*s13)*
             s23^3) + p1q^2*p2q*(42*s12^2*s13^2 - 252*s12*s13^3 +
            (5*s12^2*s13 - 321*s12*s13^2 - 354*s13^3)*s23 +
            (17*s12*s13 - 202*s13^2)*s23^2 + (24*s12 + 8*s13)*s23^3 -
            18*s23^4) + p1q^3*(42*s12^2*s13^2 + (s12^2*s13 - 85*s12*s13^2 -
              126*s13^3)*s23 + (s12*s13 - 106*s13^2)*s23^2 - 4*s13*s23^3 -
            6*s23^4)) + p3q^3*(p2q^2*(-84*s12*s13^3 + 42*s13^4 +
            (3*s12^2*s13 - 66*s12*s13^2 - 21*s13^3)*s23 +
            (-18*s12^2 + 12*s13^2)*s23^2 + 21*s13*s23^3) +
          p1q*p2q*(84*s12^2*s13^2 - 252*s12*s13^3 +
            (8*s12^2*s13 - 174*s12*s13^2 - 250*s13^3)*s23 +
            (-12*s12^2 + 18*s12*s13 - 68*s13^2)*s23^2 + (36*s12 + 38*s13)*
             s23^3) + p1q^2*(126*s12^2*s13^2 + (3*s12^2*s13 - 24*s12*s13^2 -
              147*s13^3)*s23 + (6*s12*s13 - 84*s13^2)*s23^2 +
            (12*s12 + 3*s13)*s23^3 - 6*s23^4)))*Log(s13/(s12 + s13 + s23))^2)/
      (27*p1q^3*p2q^2*s13^2*s23^2 + 27*p1q^2*p2q^3*s13^2*s23^2 +
       27*p3q^5*s13^2*s23^2 + p3q^4*(81*p1q*s13^2*s23^2 +
         81*p2q*s13^2*s23^2) + p3q^3*(81*p1q^2*s13^2*s23^2 +
         216*p1q*p2q*s13^2*s23^2 + 81*p2q^2*s13^2*s23^2) +
       p3q^2*(27*p1q^3*s13^2*s23^2 + 189*p1q^2*p2q*s13^2*s23^2 +
         189*p1q*p2q^2*s13^2*s23^2 + 27*p2q^3*s13^2*s23^2) +
       p3q*(54*p1q^3*p2q*s13^2*s23^2 + 135*p1q^2*p2q^2*s13^2*s23^2 +
         54*p1q*p2q^3*s13^2*s23^2)) +
     ((p3q^4*(252*s12^5*s13 + 504*s12^4*s13^2 + 252*s12^3*s13^3 +
           (-42*s12^5 + 153*s12^4*s13 + 138*s12^3*s13^2 - 177*s12^2*s13^3 -
             120*s12*s13^4)*s23 + (-55*s12^4 - 8*s12^3*s13 - 47*s12^2*s13^2 -
             64*s12*s13^3)*s23^2 + (-67*s12^3 - 104*s12^2*s13 - 42*s12*s13^2)*
            s23^3) + p2q^4*((19*s12^4*s13 + 57*s12^3*s13^2 + 57*s12^2*s13^3 +
             19*s12*s13^4)*s23 + (11*s12^3*s13 + 2*s12^2*s13^2 -
             29*s12*s13^3 - 20*s13^4)*s23^2 + (-8*s12^2*s13 - 28*s12*s13^2 -
             20*s13^3)*s23^3) + p1q^3*p2q*
          ((-252*s12^4*s13 - 756*s12^3*s13^2 - 756*s12^2*s13^3 -
             252*s12*s13^4)*s23 + (19*s12^4 - 297*s12^3*s13 -
             651*s12^2*s13^2 - 335*s12*s13^3)*s23^2 +
           (13*s12^3 - 126*s12^2*s13 - 159*s12*s13^2 - 20*s13^3)*s23^3 +
           (-6*s12^2 - 56*s12*s13 - 20*s13^2)*s23^4) +
         p1q*p2q^3*(252*s12^3*s13^3 + 504*s12^2*s13^4 + 252*s12*s13^5 +
           (-80*s12^4*s13 - 83*s12^3*s13^2 + 228*s12^2*s13^3 +
             211*s12*s13^4 - 20*s13^5)*s23 + (19*s12^4 + 53*s12^3*s13 +
             79*s12^2*s13^2 + 55*s12*s13^3 - 20*s13^4)*s23^2 +
           (-27*s12^3 + 9*s12^2*s13 + 71*s12*s13^2 + 40*s13^3)*s23^3 +
           (8*s12^2 + 53*s12*s13 + 40*s13^2)*s23^4) +
         p1q^2*p2q^2*(252*s12^3*s13^3 + 504*s12^2*s13^4 + 252*s12*s13^5 +
           (-233*s12^4*s13 - 587*s12^3*s13^2 - 271*s12^2*s13^3 +
             83*s12*s13^4)*s23 + (-2*s12^4 - 206*s12^3*s13 -
             356*s12^2*s13^2 - 52*s12*s13^3 + 40*s13^4)*s23^2 +
           (-48*s12^3 - 126*s12^2*s13 - 18*s12*s13^2 + 40*s13^3)*s23^3 +
           (-17*s12^2 - 42*s12*s13 - 20*s13^2)*s23^4 + (-25*s12 - 20*s13)*
            s23^5) + p3q^3*(p2q*(252*s12^5*s13 - 756*s12^3*s13^3 -
             504*s12^2*s13^4 + (-78*s12^5 - 58*s12^4*s13 - 675*s12^3*s13^2 -
               966*s12^2*s13^3 - 271*s12*s13^4)*s23 +
             (-58*s12^4 + 75*s12^3*s13 - 18*s12^2*s13^2 - 61*s12*s13^3)*
              s23^2 + (-142*s12^3 - 211*s12^2*s13 - 84*s12*s13^2)*s23^3) +
           p1q*(504*s12^5*s13 + 1008*s12^4*s13^2 + 504*s12^3*s13^3 +
             (-42*s12^5 + 293*s12^4*s13 - 38*s12^3*s13^2 - 745*s12^2*s13^3 -
               372*s12*s13^4)*s23 + (-32*s12^4 - 17*s12^3*s13 - 388*s12^2*
                s13^2 - 313*s12*s13^3)*s23^2 + (-48*s12^3 - 100*s12^2*s13 -
               97*s12*s13^2)*s23^3 + (50*s12^2 + 40*s12*s13)*s23^4)) +
         p3q*(p2q^3*(252*s12^3*s13^3 + 504*s12^2*s13^4 + 252*s12*s13^5 +
             (-19*s12^5 - 122*s12^4*s13 - 95*s12^3*s13^2 + 254*s12^2*s13^3 +
               226*s12*s13^4 - 20*s13^5)*s23 + (27*s12^4 + 90*s12^3*s13 + 89*
                s12^2*s13^2 - 4*s12*s13^3 - 60*s13^4)*s23^2 +
             (-8*s12^3 - 19*s12^2*s13 - 56*s12*s13^2 - 40*s13^3)*s23^3) +
           p1q^3*((-252*s12^4*s13 - 756*s12^3*s13^2 - 756*s12^2*s13^3 - 252*
                s12*s13^4)*s23 + (19*s12^4 - 297*s12^3*s13 - 651*s12^2*
                s13^2 - 335*s12*s13^3)*s23^2 + (13*s12^3 - 126*s12^2*s13 -
               159*s12*s13^2 - 20*s13^3)*s23^3 + (-6*s12^2 - 56*s12*s13 - 20*
                s13^2)*s23^4) + p1q*p2q^2*(-504*s12^4*s13^2 -
             504*s12^3*s13^3 + 504*s12^2*s13^4 + 504*s12*s13^5 +
             (-40*s12^5 - 555*s12^4*s13 - 1552*s12^3*s13^2 - 893*s12^2*
                s13^3 + 124*s12*s13^4 - 20*s13^5)*s23 +
             (-23*s12^4 - 208*s12^3*s13 - 413*s12^2*s13^2 - 58*s12*s13^3 + 20*
                s13^4)*s23^2 + (-133*s12^3 - 162*s12^2*s13 + 96*s12*s13^2 +
               120*s13^3)*s23^3 + (66*s12^2 + 146*s12*s13 + 80*s13^2)*
              s23^4) + p1q^2*p2q*(-504*s12^4*s13^2 - 1008*s12^3*s13^3 -
             504*s12^2*s13^4 + (-19*s12^5 - 906*s12^4*s13 - 3088*s12^3*
                s13^2 - 3126*s12^2*s13^3 - 925*s12*s13^4)*s23 +
             (-15*s12^4 - 893*s12^3*s13 - 1945*s12^2*s13^2 - 907*s12*s13^3 +
               40*s13^4)*s23^2 + (-94*s12^3 - 382*s12^2*s13 - 288*s12*s13^2 +
               20*s13^3)*s23^3 + (-40*s12^2 - 140*s12*s13 - 60*s13^2)*s23^4 +
             (-50*s12 - 40*s13)*s23^5)) +
         p3q^2*(p2q^2*(-504*s12^4*s13^2 - 756*s12^3*s13^3 + 252*s12*s13^5 +
             (-55*s12^5 - 352*s12^4*s13 - 965*s12^3*s13^2 - 592*s12^2*s13^3 +
               56*s12*s13^4 - 20*s13^5)*s23 + (24*s12^4 + 162*s12^3*s13 + 116*
                s12^2*s13^2 + 28*s12*s13^3 - 40*s13^4)*s23^2 +
             (-83*s12^3 - 118*s12^2*s13 - 70*s12*s13^2 - 20*s13^3)*s23^3) +
           p1q*p2q*(252*s12^5*s13 - 504*s12^4*s13^2 - 1764*s12^3*s13^3 -
             1008*s12^2*s13^4 + (-82*s12^5 - 686*s12^4*s13 - 3019*s12^3*
                s13^2 - 3378*s12^2*s13^3 - 963*s12*s13^4)*s23 +
             (-74*s12^4 - 530*s12^3*s13 - 1384*s12^2*s13^2 - 678*s12*s13^3 +
               40*s13^4)*s23^2 + (-154*s12^3 - 271*s12^2*s13 - 72*s12*s13^2 +
               80*s13^3)*s23^3 + (108*s12^2 + 133*s12*s13 + 40*s13^2)*
              s23^4) + p1q^2*(252*s12^5*s13 + 504*s12^4*s13^2 +
             252*s12^3*s13^3 + (-19*s12^5 - 169*s12^4*s13 - 989*s12^3*s13^2 -
               1343*s12^2*s13^3 - 504*s12*s13^4)*s23 +
             (-13*s12^4 - 435*s12^3*s13 - 1085*s12^2*s13^2 - 603*s12*s13^3)*
              s23^2 + (-46*s12^3 - 256*s12^2*s13 - 270*s12*s13^2 - 20*s13^3)*
              s23^3 + (-23*s12^2 - 98*s12*s13 - 40*s13^2)*s23^4 +
             (-25*s12 - 20*s13)*s23^5)))/
        (p1q^2*p2q^2*(27*s12^3*s13 + 54*s12^2*s13^2 + 27*s12*s13^3)*s23^2 +
         p1q*p2q^3*(27*s12^3*s13 + 54*s12^2*s13^2 + 27*s12*s13^3)*s23^2 +
         p3q^4*(27*s12^3*s13 + 54*s12^2*s13^2 + 27*s12*s13^3)*s23^2 +
         p3q^3*(p1q*(54*s12^3*s13 + 108*s12^2*s13^2 + 54*s12*s13^3)*s23^2 +
           p2q*(81*s12^3*s13 + 162*s12^2*s13^2 + 81*s12*s13^3)*s23^2) +
         p3q*(p2q^3*(27*s12^3*s13 + 54*s12^2*s13^2 + 27*s12*s13^3)*s23^2 +
           p1q^2*p2q*(54*s12^3*s13 + 108*s12^2*s13^2 + 54*s12*s13^3)*s23^2 +
           p1q*p2q^2*(108*s12^3*s13 + 216*s12^2*s13^2 + 108*s12*s13^3)*
            s23^2) + p3q^2*(p1q^2*(27*s12^3*s13 + 54*s12^2*s13^2 +
             27*s12*s13^3)*s23^2 + p2q^2*(81*s12^3*s13 + 162*s12^2*s13^2 +
             81*s12*s13^3)*s23^2 + p1q*p2q*(135*s12^3*s13 + 270*s12^2*s13^2 +
             135*s12*s13^3)*s23^2)) +
       ((p3q^4*(-120*s12^5*s13^2 - 120*s12^4*s13^3 +
            (6*s12^6 + 20*s12^5*s13 - 40*s12^4*s13^2 - 94*s12^3*s13^3 +
              80*s12^2*s13^4)*s23 + (6*s12^5 - 92*s12^4*s13 -
              106*s12^3*s13^2 - 88*s12^2*s13^3)*s23^2 +
            (20*s12^3*s13 + 20*s12^2*s13^2)*s23^3) +
          p2q^4*((-10*s12^4*s13^2 - 20*s12^3*s13^3 - 10*s12^2*s13^4)*s23 +
            (43*s12^3*s13^2 + 106*s12^2*s13^3 + 83*s12*s13^4 + 20*s13^5)*
             s23^2 + (53*s12^2*s13^2 + 63*s12*s13^3 + 20*s13^4)*s23^3) +
          p1q*p2q^3*(-120*s12^3*s13^4 - 120*s12^2*s13^5 +
            (46*s12^4*s13^2 - 49*s12^3*s13^3 + 2*s12^2*s13^4 - 3*s12*s13^5 +
              20*s13^6)*s23 + (-10*s12^4*s13 + 129*s12^3*s13^2 +
              179*s12^2*s13^3 + 20*s12*s13^4 + 20*s13^5)*s23^2 +
            (63*s12^3*s13 - 143*s12*s13^3 - 60*s13^4)*s23^3 +
            (-53*s12^2*s13 - 126*s12*s13^2 - 60*s13^3)*s23^4) +
          p1q^4*((-120*s12^3*s13^2 - 120*s12^2*s13^3)*s23^2 +
            (-12*s12^3*s13 - 175*s12^2*s13^2 - 43*s12*s13^3)*s23^3 +
            (-6*s12^3 - 18*s12^2*s13 - 63*s12*s13^2 - 20*s13^3)*s23^4 +
            (-6*s12^2 - 20*s13^2)*s23^5) + p1q^2*p2q^2*(-120*s12^3*s13^4 -
            120*s12^2*s13^5 + (122*s12^4*s13^2 - 17*s12^3*s13^3 +
              178*s12^2*s13^4 - 43*s12*s13^5)*s23 +
            (-20*s12^4*s13 + 89*s12^3*s13^2 + 170*s12^2*s13^3 -
              57*s12*s13^4 - 60*s13^5)*s23^2 + (63*s12^3*s13 -
              96*s12^2*s13^2 - 40*s12*s13^3 - 60*s13^4)*s23^3 +
            (-106*s12^2*s13 + 37*s12*s13^2 + 60*s13^3)*s23^4 +
            (63*s12*s13 + 60*s13^2)*s23^5) + p1q^3*p2q*
           ((120*s12^4*s13^2 + 120*s12^3*s13^3 + 240*s12^2*s13^4)*s23 +
            (2*s12^4*s13 + 15*s12^3*s13^2 + 117*s12^2*s13^3 + 86*s12*s13^4)*
             s23^2 + (6*s12^4 + 24*s12^3*s13 - 154*s12^2*s13^2 +
              123*s12*s13^3 + 60*s13^4)*s23^3 + (6*s12^3 - 67*s12^2*s13 +
              20*s12*s13^2 + 60*s13^3)*s23^4 + (23*s12*s13 - 20*s13^2)*
             s23^5 - 20*s13*s23^6) + p3q^3*(p2q*(-120*s12^5*s13^2 +
              120*s12^4*s13^3 + 240*s12^3*s13^4 + (6*s12^6 + 28*s12^5*s13 +
                109*s12^4*s13^2 + 64*s12^3*s13^3 + 297*s12^2*s13^4 -
                40*s12*s13^5)*s23 + (6*s12^5 - 273*s12^4*s13 - 263*s12^3*
                 s13^2 - 144*s12^2*s13^3 - 40*s12*s13^4)*s23^2 +
              (83*s12^3*s13 + 83*s12^2*s13^2)*s23^3) +
            p1q*(-240*s12^5*s13^2 - 240*s12^4*s13^3 + (6*s12^6 +
                8*s12^5*s13 + 77*s12^4*s13^2 - 162*s12^3*s13^3 +
                243*s12^2*s13^4)*s23 + (-12*s12^5 - 127*s12^4*s13 +
                135*s12^3*s13^2 - 132*s12^2*s13^3)*s23^2 + (-18*s12^4 +
                207*s12^3*s13 + 89*s12^2*s13^2 - 40*s12*s13^3)*s23^3 +
              (-60*s12^2*s13 - 40*s12*s13^2)*s23^4)) +
          p3q^2*(p2q^2*(240*s12^4*s13^3 + 120*s12^3*s13^4 - 120*s12^2*s13^5 +
              (18*s12^5*s13 + 215*s12^4*s13^2 + 119*s12^3*s13^3 +
                219*s12^2*s13^4 - 43*s12*s13^5 + 20*s13^6)*s23 +
              (-244*s12^4*s13 - 154*s12^3*s13^2 + 70*s12^2*s13^3 +
                20*s12*s13^4 + 40*s13^5)*s23^2 + (116*s12^3*s13 +
                169*s12^2*s13^2 + 63*s12*s13^3 + 20*s13^4)*s23^3) +
            p1q*p2q*(-120*s12^5*s13^2 + 360*s12^4*s13^3 + 480*s12^3*s13^4 +
              (6*s12^6 + 16*s12^5*s13 + 598*s12^4*s13^2 + 479*s12^3*s13^3 +
                888*s12^2*s13^4 - 83*s12*s13^5)*s23 + (-6*s12^5 -
                216*s12^4*s13 + 533*s12^3*s13^2 + 382*s12^2*s13^3 -
                37*s12*s13^4 - 40*s13^5)*s23^2 + (-12*s12^4 + 482*s12^3*s13 +
                292*s12^2*s13^2 - 117*s12*s13^3 - 80*s13^4)*s23^3 +
              (-186*s12^2*s13 - 163*s12*s13^2 - 40*s13^3)*s23^4) +
            p1q^2*(-120*s12^5*s13^2 - 120*s12^4*s13^3 + (-2*s12^5*s13 +
                377*s12^4*s13^2 + 62*s12^3*s13^3 + 283*s12^2*s13^4)*s23 +
              (-18*s12^5 - 14*s12^4*s13 + 413*s12^3*s13^2 - 72*s12^2*s13^3 +
                43*s12*s13^4)*s23^2 + (204*s12^3*s13 - 55*s12^2*s13^2 +
                40*s12*s13^3 + 20*s13^4)*s23^3 + (18*s12^3 - 138*s12^2*s13 +
                57*s12*s13^2 + 40*s13^3)*s23^4 + (60*s12*s13 + 20*s13^2)*s23^
                5)) + p3q*(p2q^3*(-120*s12^3*s13^4 - 120*s12^2*s13^5 +
              (10*s12^5*s13 + 56*s12^4*s13^2 - 59*s12^3*s13^3 -
                8*s12^2*s13^4 - 3*s12*s13^5 + 20*s13^6)*s23 +
              (-63*s12^4*s13 + 46*s12^3*s13^2 + 232*s12^2*s13^3 +
                143*s12*s13^4 + 60*s13^5)*s23^2 + (53*s12^3*s13 +
                159*s12^2*s13^2 + 126*s12*s13^3 + 40*s13^4)*s23^3) +
            p1q*p2q^2*(240*s12^4*s13^3 - 240*s12^2*s13^5 + (8*s12^5*s13 +
                327*s12^4*s13^2 + 112*s12^3*s13^3 + 407*s12^2*s13^4 -
                86*s12*s13^5 + 20*s13^6)*s23 + (-105*s12^4*s13 +
                316*s12^3*s13^2 + 485*s12^2*s13^3 - 34*s12*s13^4 - 40*s13^5)*
               s23^2 + (338*s12^3*s13 + 112*s12^2*s13^2 - 217*s12*s13^3 -
                160*s13^4)*s23^3 + (-179*s12^2*s13 - 249*s12*s13^2 -
                100*s13^3)*s23^4) + p1q^2*p2q*(240*s12^4*s13^3 +
              240*s12^3*s13^4 + (-2*s12^5*s13 + 619*s12^4*s13^2 +
                525*s12^3*s13^3 + 821*s12^2*s13^4 - 43*s12*s13^5)*s23 +
              (-12*s12^5 - 40*s12^4*s13 + 550*s12^3*s13^2 + 438*s12^2*s13^3 +
                46*s12*s13^4 - 40*s13^5)*s23^2 + (-6*s12^4 + 255*s12^3*s13 -
                122*s12^2*s13^2 + 37*s12*s13^3 + 20*s13^4)*s23^3 +
              (6*s12^3 - 232*s12^2*s13 + 51*s12*s13^2 + 140*s13^3)*s23^4 +
              (123*s12*s13 + 80*s13^2)*s23^5) +
            p1q^3*((240*s12^4*s13^2 + 120*s12^3*s13^3 + 120*s12^2*s13^4)*
               s23 + (14*s12^4*s13 + 58*s12^3*s13^2 - 135*s12^2*s13^3 +
                43*s12*s13^4)*s23^2 + (18*s12^4 + 24*s12^3*s13 -
                267*s12^2*s13^2 + 40*s12*s13^3 + 20*s13^4)*s23^3 +
              (12*s12^3 - 97*s12^2*s13)*s23^4 + (-6*s12^2 + 23*s12*s13 -
                40*s13^2)*s23^5 - 20*s13*s23^6)))*
         Log((s12 + s13)/(s12 + s13 + s23)))/
        (p1q*p2q^3*(27*s12^3*s13^2 + 27*s12^2*s13^3)*s23^2 +
         p3q^4*(27*s12^3*s13^2 + 27*s12^2*s13^3)*s23^2 -
         27*p1q^3*p2q*s12^2*s13^2*s23^3 + p1q^2*p2q^2*
          ((27*s12^3*s13^2 + 27*s12^2*s13^3)*s23^2 - 27*s12^2*s13^2*s23^3) +
         p3q^2*(p2q^2*(81*s12^3*s13^2 + 81*s12^2*s13^3)*s23^2 +
           p1q^2*((27*s12^3*s13^2 + 27*s12^2*s13^3)*s23^2 -
             54*s12^2*s13^2*s23^3) + p1q*p2q*((135*s12^3*s13^2 + 135*s12^2*
                s13^3)*s23^2 - 54*s12^2*s13^2*s23^3)) +
         p3q^3*(p2q*(81*s12^3*s13^2 + 81*s12^2*s13^3)*s23^2 +
           p1q*((54*s12^3*s13^2 + 54*s12^2*s13^3)*s23^2 - 27*s12^2*s13^2*
              s23^3)) + p3q*(p2q^3*(27*s12^3*s13^2 + 27*s12^2*s13^3)*s23^2 -
           27*p1q^3*s12^2*s13^2*s23^3 + p1q^2*p2q*
            ((54*s12^3*s13^2 + 54*s12^2*s13^3)*s23^2 - 81*s12^2*s13^2*
              s23^3) + p1q*p2q^2*((108*s12^3*s13^2 + 108*s12^2*s13^3)*s23^2 -
             27*s12^2*s13^2*s23^3))))*Log(s23/(s12 + s13 + s23)) +
     ((p1q*p2q^4*((-(s12*s13^2) - s13^3)*s23 + (-42*s12*s13 - 43*s13^2)*
           s23^2 - 42*s13*s23^3) + p3q^5*(-6*s12^2*s13^2 +
          (2*s12^2*s13 - 3*s12*s13^2 + 3*s13^3)*s23 + (42*s12^2 + 21*s12*s13)*
           s23^2 - 21*s13*s23^3) + p1q^4*p2q*((6*s12*s13^2 + 6*s13^3)*s23 +
          (-(s12*s13) + 5*s13^2)*s23^2 - s13*s23^3) +
        p1q^2*p2q^3*(-6*s13^4 + (s12*s13^2 - 3*s13^3)*s23 +
          (-43*s12*s13 - 20*s13^2)*s23^2 + s13*s23^3 + 42*s23^4) +
        p1q^3*p2q^2*(-6*s13^4 + (5*s12*s13^2 + s13^3)*s23 +
          (-23*s12*s13 + 4*s13^2)*s23^2 + 21*s13*s23^3 + 42*s23^4) +
        p3q^4*(p1q*(-18*s12^2*s13^2 + (4*s12^2*s13 - 8*s12*s13^2 + 12*s13^3)*
             s23 + (42*s12^2 - 23*s12*s13 + 3*s13^2)*s23^2 +
            (-84*s12 - 63*s13)*s23^3) + p2q*(-6*s12^2*s13^2 + 12*s12*s13^3 +
            (4*s12^2*s13 + s12*s13^2 + 9*s13^3)*s23 +
            (126*s12^2 + 40*s12*s13 - 21*s13^2)*s23^2 - 84*s13*s23^3)) +
        p3q^3*(p1q*p2q*(-12*s12^2*s13^2 + 36*s12*s13^3 +
            (8*s12^2*s13 + 18*s12*s13^2 + 38*s13^3)*s23 +
            (84*s12^2 - 174*s12*s13 - 68*s13^2)*s23^2 + (-252*s12 - 250*s13)*
             s23^3) + p2q^2*(12*s12*s13^3 - 6*s13^4 +
            (3*s12^2*s13 + 6*s12*s13^2 + 3*s13^3)*s23 +
            (126*s12^2 - 24*s12*s13 - 84*s13^2)*s23^2 - 147*s13*s23^3) +
          p1q^2*(-18*s12^2*s13^2 + (3*s12^2*s13 + 21*s13^3)*s23 +
            (-66*s12*s13 + 12*s13^2)*s23^2 + (-84*s12 - 21*s13)*s23^3 +
            42*s23^4)) + p3q^2*(p1q*p2q^2*(24*s12*s13^3 - 18*s13^4 +
            (5*s12^2*s13 + 17*s12*s13^2 + 8*s13^3)*s23 +
            (42*s12^2 - 321*s12*s13 - 202*s13^2)*s23^2 + (-252*s12 - 354*s13)*
             s23^3) + p2q^3*(-6*s13^4 + (s12^2*s13 + s12*s13^2 - 4*s13^3)*
             s23 + (42*s12^2 - 85*s12*s13 - 106*s13^2)*s23^2 -
            126*s13*s23^3) + p1q^3*(-6*s12^2*s13^2 +
            (s12^2*s13 + 11*s12*s13^2 + 18*s13^3)*s23 +
            (-23*s12*s13 + 14*s13^2)*s23^2 + 20*s13*s23^3 + 42*s23^4) +
          p1q^2*p2q*(-6*s12^2*s13^2 + 36*s12*s13^3 +
            (5*s12^2*s13 + 39*s12*s13^2 + 54*s13^3)*s23 +
            (-175*s12*s13 + 14*s13^2)*s23^2 + (-168*s12 - 40*s13)*s23^3 +
            126*s23^4)) + p3q*(p1q*p2q^3*(-12*s13^4 +
            (s12^2*s13 + 2*s12*s13^2 - 7*s13^3)*s23 +
            (-212*s12*s13 - 168*s13^2)*s23^2 + (-84*s12 - 209*s13)*s23^3) +
          p2q^4*((-(s12*s13^2) - s13^3)*s23 + (-42*s12*s13 - 43*s13^2)*
             s23^2 - 42*s13*s23^3) + p1q^4*((6*s12*s13^2 + 6*s13^3)*s23 +
            (-(s12*s13) + 5*s13^2)*s23^2 - s13*s23^3) +
          p1q^3*p2q*(12*s12*s13^3 + (s12^2*s13 + 28*s12*s13^2 + 31*s13^3)*
             s23 + (-46*s12*s13 + 24*s13^2)*s23^2 + 41*s13*s23^3 +
            84*s23^4) + p1q^2*p2q^2*(12*s12*s13^3 - 18*s13^4 +
            (2*s12^2*s13 + 16*s12*s13^2 + 6*s13^3)*s23 +
            (-152*s12*s13 - 30*s13^2)*s23^2 + (-84*s12 - 18*s13)*s23^3 +
            126*s23^4)))*Log(s23/(s12 + s13 + s23))^2)/
      (27*p1q^3*p2q^2*s13^2*s23^2 + 27*p1q^2*p2q^3*s13^2*s23^2 +
       27*p3q^5*s13^2*s23^2 + p3q^4*(81*p1q*s13^2*s23^2 +
         81*p2q*s13^2*s23^2) + p3q^3*(81*p1q^2*s13^2*s23^2 +
         216*p1q*p2q*s13^2*s23^2 + 81*p2q^2*s13^2*s23^2) +
       p3q^2*(27*p1q^3*s13^2*s23^2 + 189*p1q^2*p2q*s13^2*s23^2 +
         189*p1q*p2q^2*s13^2*s23^2 + 27*p2q^3*s13^2*s23^2) +
       p3q*(54*p1q^3*p2q*s13^2*s23^2 + 135*p1q^2*p2q^2*s13^2*s23^2 +
         54*p1q*p2q^3*s13^2*s23^2)) +
     nl*((p1q*p2q^4*((8*s12*s13^2 + 8*s13^3)*s23 + (-120*s12*s13 - 112*s13^2)*
            s23^2 - 120*s13*s23^3) + p3q^5*(120*s12^2*s13^2 +
           (-4*s12^2*s13 + 108*s12*s13^2 - 24*s13^3)*s23 +
           (120*s12^2 + 108*s12*s13 - 24*s13^2)*s23^2 - 24*s13*s23^3) +
         p1q^4*p2q*((-120*s12*s13^2 - 120*s13^3)*s23 +
           (8*s12*s13 - 112*s13^2)*s23^2 + 8*s13*s23^3) +
         p1q^2*p2q^3*(120*s13^4 + (4*s12*s13^2 + 108*s13^3)*s23 +
           (-112*s12*s13 - 116*s13^2)*s23^2 - 8*s13*s23^3 + 120*s23^4) +
         p1q^3*p2q^2*(120*s13^4 + (-112*s12*s13^2 - 8*s13^3)*s23 +
           (4*s12*s13 - 116*s13^2)*s23^2 + 108*s13*s23^3 + 120*s23^4) +
         p3q^4*(p1q*(360*s12^2*s13^2 + (-8*s12^2*s13 + 232*s12*s13^2 - 168*
                s13^3)*s23 + (120*s12^2 + 76*s12*s13 - 180*s13^2)*s23^2 +
             (-240*s12 - 84*s13)*s23^3) + p2q*(120*s12^2*s13^2 -
             240*s12*s13^3 + (-8*s12^2*s13 + 76*s12*s13^2 - 84*s13^3)*s23 +
             (360*s12^2 + 232*s12*s13 - 180*s13^2)*s23^2 - 168*s13*s23^3)) +
         p3q^3*(p1q*p2q*(240*s12^2*s13^2 - 720*s12*s13^3 +
             (-40*s12^2*s13 - 216*s12*s13^2 - 544*s13^3)*s23 +
             (240*s12^2 - 216*s12*s13 - 896*s13^2)*s23^2 +
             (-720*s12 - 544*s13)*s23^3) + p2q^2*(-240*s12*s13^3 +
             120*s13^4 + (-12*s12^2*s13 - 60*s12*s13^2 + 24*s13^3)*s23 +
             (360*s12^2 + 12*s12*s13 - 408*s13^2)*s23^2 - 384*s13*s23^3) +
           p1q^2*(360*s12^2*s13^2 + (-12*s12^2*s13 + 12*s12*s13^2 - 384*
                s13^3)*s23 + (-60*s12*s13 - 408*s13^2)*s23^2 +
             (-240*s12 + 24*s13)*s23^3 + 120*s23^4)) +
         p3q*(p1q*p2q^3*(240*s13^4 + (-8*s12^2*s13 - 16*s12*s13^2 + 200*
                s13^3)*s23 + (-584*s12*s13 - 600*s13^2)*s23^2 +
             (-240*s12 - 608*s13)*s23^3) + p2q^4*((8*s12*s13^2 + 8*s13^3)*
              s23 + (-120*s12*s13 - 112*s13^2)*s23^2 - 120*s13*s23^3) +
           p1q^4*((-120*s12*s13^2 - 120*s13^3)*s23 + (8*s12*s13 - 112*s13^2)*
              s23^2 + 8*s13*s23^3) + p1q^3*p2q*(-240*s12*s13^3 +
             (-8*s12^2*s13 - 584*s12*s13^2 - 608*s13^3)*s23 +
             (-16*s12*s13 - 600*s13^2)*s23^2 + 200*s13*s23^3 + 240*s23^4) +
           p1q^2*p2q^2*(-240*s12*s13^3 + 360*s13^4 + (-28*s12^2*s13 - 284*s12*
                s13^2 + 24*s13^3)*s23 + (-284*s12*s13 - 552*s13^2)*s23^2 +
             (-240*s12 + 24*s13)*s23^3 + 360*s23^4)) +
         p3q^2*(p1q*p2q^2*(-480*s12*s13^3 + 360*s13^4 +
             (-40*s12^2*s13 - 232*s12*s13^2 + 56*s13^3)*s23 +
             (120*s12^2 - 756*s12*s13 - 1084*s13^2)*s23^2 +
             (-720*s12 - 948*s13)*s23^3) + p2q^3*(120*s13^4 +
             (-8*s12^2*s13 - 20*s12*s13^2 + 92*s13^3)*s23 +
             (120*s12^2 - 232*s12*s13 - 364*s13^2)*s23^2 - 360*s13*s23^3) +
           p1q^3*(120*s12^2*s13^2 + (-8*s12^2*s13 - 232*s12*s13^2 - 360*
                s13^3)*s23 + (-20*s12*s13 - 364*s13^2)*s23^2 + 92*s13*s23^3 +
             120*s23^4) + p1q^2*p2q*(120*s12^2*s13^2 - 720*s12*s13^3 +
             (-40*s12^2*s13 - 756*s12*s13^2 - 948*s13^3)*s23 +
             (-232*s12*s13 - 1084*s13^2)*s23^2 + (-480*s12 + 56*s13)*s23^3 +
             360*s23^4)))/(81*p1q^3*p2q^2*s13^2*s23^2 + 81*p1q^2*p2q^3*s13^2*
          s23^2 + 81*p3q^5*s13^2*s23^2 + p3q^4*(243*p1q*s13^2*s23^2 +
           243*p2q*s13^2*s23^2) + p3q^3*(243*p1q^2*s13^2*s23^2 +
           648*p1q*p2q*s13^2*s23^2 + 243*p2q^2*s13^2*s23^2) +
         p3q^2*(81*p1q^3*s13^2*s23^2 + 567*p1q^2*p2q*s13^2*s23^2 +
           567*p1q*p2q^2*s13^2*s23^2 + 81*p2q^3*s13^2*s23^2) +
         p3q*(162*p1q^3*p2q*s13^2*s23^2 + 405*p1q^2*p2q^2*s13^2*s23^2 +
           162*p1q*p2q^3*s13^2*s23^2)) +
       ((p1q^4*p2q*((24*s12*s13^2 + 24*s13^3)*s23 + (-4*s12*s13 + 20*s13^2)*
             s23^2 - 4*s13*s23^3) + p3q^5*(-24*s12^2*s13^2 +
            (8*s12^2*s13 - 12*s12*s13^2 + 12*s13^3)*s23 +
            (-24*s12^2 - 12*s12*s13)*s23^2 + 12*s13*s23^3) +
          p1q*p2q^4*((-4*s12*s13^2 - 4*s13^3)*s23 + (24*s12*s13 + 20*s13^2)*
             s23^2 + 24*s13*s23^3) + p1q^3*p2q^2*(-24*s13^4 +
            (20*s12*s13^2 + 4*s13^3)*s23 + (4*s12*s13 + 16*s13^2)*s23^2 -
            12*s13*s23^3 - 24*s23^4) + p1q^2*p2q^3*(-24*s13^4 +
            (4*s12*s13^2 - 12*s13^3)*s23 + (20*s12*s13 + 16*s13^2)*s23^2 +
            4*s13*s23^3 - 24*s23^4) + p3q^4*
           (p2q*(-24*s12^2*s13^2 + 48*s12*s13^3 + (16*s12^2*s13 +
                4*s12*s13^2 + 36*s13^3)*s23 + (-72*s12^2 - 32*s12*s13 +
                12*s13^2)*s23^2 + 48*s13*s23^3) + p1q*(-72*s12^2*s13^2 +
              (16*s12^2*s13 - 32*s12*s13^2 + 48*s13^3)*s23 + (-24*s12^2 +
                4*s12*s13 + 12*s13^2)*s23^2 + (48*s12 + 36*s13)*s23^3)) +
          p3q*(p1q^4*((24*s12*s13^2 + 24*s13^3)*s23 + (-4*s12*s13 + 20*s13^2)*
               s23^2 - 4*s13*s23^3) + p2q^4*((-4*s12*s13^2 - 4*s13^3)*s23 +
              (24*s12*s13 + 20*s13^2)*s23^2 + 24*s13*s23^3) +
            p1q*p2q^3*(-48*s13^4 + (4*s12^2*s13 + 8*s12*s13^2 - 28*s13^3)*
               s23 + (112*s12*s13 + 96*s13^2)*s23^2 + (48*s12 + 124*s13)*s23^
                3) + p1q^2*p2q^2*(48*s12*s13^3 - 72*s13^4 + (8*s12^2*s13 +
                64*s12*s13^2 + 24*s13^3)*s23 + (64*s12*s13 + 72*s13^2)*s23^
                2 + (48*s12 + 24*s13)*s23^3 - 72*s23^4) +
            p1q^3*p2q*(48*s12*s13^3 + (4*s12^2*s13 + 112*s12*s13^2 +
                124*s13^3)*s23 + (8*s12*s13 + 96*s13^2)*s23^2 -
              28*s13*s23^3 - 48*s23^4)) +
          p3q^2*(p2q^3*(-24*s13^4 + (4*s12^2*s13 + 4*s12*s13^2 - 16*s13^3)*
               s23 + (-24*s12^2 + 44*s12*s13 + 56*s13^2)*s23^2 +
              72*s13*s23^3) + p1q*p2q^2*(96*s12*s13^3 - 72*s13^4 +
              (20*s12^2*s13 + 68*s12*s13^2 + 32*s13^3)*s23 + (-24*s12^2 +
                156*s12*s13 + 152*s13^2)*s23^2 + (144*s12 + 216*s13)*s23^3) +
            p1q^2*p2q*(-24*s12^2*s13^2 + 144*s12*s13^3 + (20*s12^2*s13 +
                156*s12*s13^2 + 216*s13^3)*s23 + (68*s12*s13 + 152*s13^2)*s23^
                2 + (96*s12 + 32*s13)*s23^3 - 72*s23^4) +
            p1q^3*(-24*s12^2*s13^2 + (4*s12^2*s13 + 44*s12*s13^2 + 72*s13^3)*
               s23 + (4*s12*s13 + 56*s13^2)*s23^2 - 16*s13*s23^3 -
              24*s23^4)) + p3q^3*(p2q^2*(48*s12*s13^3 - 24*s13^4 +
              (12*s12^2*s13 + 24*s12*s13^2 + 12*s13^3)*s23 + (-72*s12^2 +
                48*s13^2)*s23^2 + 84*s13*s23^3) + p1q*p2q*(-48*s12^2*s13^2 +
              144*s12*s13^3 + (32*s12^2*s13 + 72*s12*s13^2 + 152*s13^3)*s23 +
              (-48*s12^2 + 72*s12*s13 + 112*s13^2)*s23^2 + (144*s12 +
                152*s13)*s23^3) + p1q^2*(-72*s12^2*s13^2 + (12*s12^2*s13 +
                84*s13^3)*s23 + (24*s12*s13 + 48*s13^2)*s23^2 +
              (48*s12 + 12*s13)*s23^3 - 24*s23^4)))*Log(-s12 - s13 - s23))/
        (27*p1q^3*p2q^2*s13^2*s23^2 + 27*p1q^2*p2q^3*s13^2*s23^2 +
         27*p3q^5*s13^2*s23^2 + p3q^4*(81*p1q*s13^2*s23^2 +
           81*p2q*s13^2*s23^2) + p3q^3*(81*p1q^2*s13^2*s23^2 +
           216*p1q*p2q*s13^2*s23^2 + 81*p2q^2*s13^2*s23^2) +
         p3q^2*(27*p1q^3*s13^2*s23^2 + 189*p1q^2*p2q*s13^2*s23^2 +
           189*p1q*p2q^2*s13^2*s23^2 + 27*p2q^3*s13^2*s23^2) +
         p3q*(54*p1q^3*p2q*s13^2*s23^2 + 135*p1q^2*p2q^2*s13^2*s23^2 +
           54*p1q*p2q^3*s13^2*s23^2)) +
       ((p1q^4*((-2*s12*s13 - 2*s13^2)*s23 - 2*s13*s23^2) +
          p3q^4*(4*s12^2*s13 + (-24*s12^2 - 12*s12*s13)*s23 + 12*s13*s23^2) +
          p1q*p2q^3*(-2*s12*s13^2 - 2*s13^3 + (24*s12*s13 + 22*s13^2)*s23 +
            24*s13*s23^2) + p1q^3*p2q*(-2*s12*s13^2 + 2*s13^3 +
            (8*s12*s13 + 2*s13^2)*s23 - 12*s13*s23^2 - 24*s23^3) +
          p1q^2*p2q^2*(-4*s12*s13^2 + (22*s12*s13 + 14*s13^2)*s23 +
            2*s13*s23^2 - 24*s23^3) + p3q^3*(p2q*(4*s12^2*s13 - 4*s12*s13^2 +
              (-48*s12^2 - 16*s12*s13 + 12*s13^2)*s23 + 36*s13*s23^2) +
            p1q*(8*s12^2*s13 - 4*s12*s13^2 + (-24*s12^2 + 8*s12*s13)*s23 +
              (48*s12 + 36*s13)*s23^2)) +
          p3q*(p2q^3*(-2*s12*s13^2 - 2*s13^3 + (24*s12*s13 + 22*s13^2)*s23 +
              24*s13*s23^2) + p1q*p2q^2*(2*s12^2*s13 - 6*s12*s13^2 +
              (92*s12*s13 + 74*s13^2)*s23 + (48*s12 + 98*s13)*s23^2) +
            p1q^2*p2q*(4*s12^2*s13 - 6*s12*s13^2 + 6*s13^3 + (52*s12*s13 +
                22*s13^2)*s23 + (48*s12 + 16*s13)*s23^2 - 48*s23^3) +
            p1q^3*(2*s12^2*s13 - 2*s12*s13^2 + (8*s12*s13 - 2*s13^2)*s23 -
              14*s13*s23^2 - 24*s23^3)) +
          p3q^2*(p2q^2*(2*s12^2*s13 - 2*s12*s13^2 + (-24*s12^2 + 22*s12*s13 +
                36*s13^2)*s23 + 48*s13*s23^2) + p1q*p2q*(8*s12^2*s13 -
              8*s12*s13^2 + 4*s13^3 + (-24*s12^2 + 76*s12*s13 + 56*s13^2)*
               s23 + (96*s12 + 112*s13)*s23^2) + p1q^2*(6*s12^2*s13 -
              6*s12*s13^2 + 30*s12*s13*s23 + (48*s12 + 12*s13)*s23^2 -
              24*s23^3)))*Log(s13/(s12 + s13 + s23)))/
        (27*p1q^3*p2q*s13^2*s23 + 27*p1q^2*p2q^2*s13^2*s23 +
         27*p3q^4*s13^2*s23 + p3q^3*(81*p1q*s13^2*s23 + 54*p2q*s13^2*s23) +
         p3q^2*(81*p1q^2*s13^2*s23 + 135*p1q*p2q*s13^2*s23 +
           27*p2q^2*s13^2*s23) + p3q*(27*p1q^3*s13^2*s23 +
           108*p1q^2*p2q*s13^2*s23 + 54*p1q*p2q^2*s13^2*s23)) +
       ((p3q^4*(-24*s12^2*s13 + (4*s12^2 - 12*s12*s13 + 12*s13^2)*s23) +
          p2q^4*((-2*s12*s13 - 2*s13^2)*s23 - 2*s13*s23^2) +
          p1q^2*p2q^2*(-24*s13^3 + (22*s12*s13 + 2*s13^2)*s23 +
            (-4*s12 + 14*s13)*s23^2) + p1q^3*p2q*((24*s12*s13 + 24*s13^2)*
             s23 + (-2*s12 + 22*s13)*s23^2 - 2*s23^3) +
          p1q*p2q^3*(-24*s13^3 + (8*s12*s13 - 12*s13^2)*s23 +
            (-2*s12 + 2*s13)*s23^2 + 2*s23^3) +
          p3q^3*(p2q*(-24*s12^2*s13 + 48*s12*s13^2 + (8*s12^2 + 8*s12*s13 +
                36*s13^2)*s23 - 4*s12*s23^2) + p1q*(-48*s12^2*s13 +
              (4*s12^2 - 16*s12*s13 + 36*s13^2)*s23 + (-4*s12 + 12*s13)*s23^
                2)) + p3q^2*(p2q^2*(48*s12*s13^2 - 24*s13^3 +
              (6*s12^2 + 30*s12*s13 + 12*s13^2)*s23 - 6*s12*s23^2) +
            p1q^2*(-24*s12^2*s13 + (2*s12^2 + 22*s12*s13 + 48*s13^2)*s23 +
              (-2*s12 + 36*s13)*s23^2) + p1q*p2q*(-24*s12^2*s13 +
              96*s12*s13^2 + (8*s12^2 + 76*s12*s13 + 112*s13^2)*s23 +
              (-8*s12 + 56*s13)*s23^2 + 4*s23^3)) +
          p3q*(p2q^3*(-24*s13^3 + (2*s12^2 + 8*s12*s13 - 14*s13^2)*s23 +
              (-2*s12 - 2*s13)*s23^2) + p1q^2*p2q*(48*s12*s13^2 +
              (2*s12^2 + 92*s12*s13 + 98*s13^2)*s23 + (-6*s12 + 74*s13)*s23^
                2) + p1q^3*((24*s12*s13 + 24*s13^2)*s23 + (-2*s12 + 22*s13)*
               s23^2 - 2*s23^3) + p1q*p2q^2*(48*s12*s13^2 - 48*s13^3 +
              (4*s12^2 + 52*s12*s13 + 16*s13^2)*s23 + (-6*s12 + 22*s13)*s23^
                2 + 6*s23^3)))*Log(s23/(s12 + s13 + s23)))/
        (27*p1q^2*p2q^2*s13*s23^2 + 27*p1q*p2q^3*s13*s23^2 +
         27*p3q^4*s13*s23^2 + p3q^3*(54*p1q*s13*s23^2 + 81*p2q*s13*s23^2) +
         p3q^2*(27*p1q^2*s13*s23^2 + 135*p1q*p2q*s13*s23^2 +
           81*p2q^2*s13*s23^2) + p3q*(54*p1q^2*p2q*s13*s23^2 +
           108*p1q*p2q^2*s13*s23^2 + 27*p2q^3*s13*s23^2))) +
     ((p1q^4*p2q*((252*s12*s13^2 + 252*s13^3)*s23 + (-58*s12*s13 + 194*s13^2)*
            s23^2 - 58*s13*s23^3) + p3q^5*(-252*s12^2*s13^2 +
           (132*s12^2*s13 - 62*s12*s13^2 + 174*s13^3)*s23 +
           (-252*s12^2 - 62*s12*s13 - 32*s13^2)*s23^2 + 174*s13*s23^3) +
         p1q*p2q^4*((-58*s12*s13^2 - 58*s13^3)*s23 +
           (252*s12*s13 + 194*s13^2)*s23^2 + 252*s13*s23^3) +
         p1q^3*p2q^2*(-252*s13^4 + (194*s12*s13^2 + 58*s13^3)*s23 +
           (74*s12*s13 + 120*s13^2)*s23^2 - 62*s13*s23^3 - 252*s23^4) +
         p1q^2*p2q^3*(-252*s13^4 + (74*s12*s13^2 - 62*s13^3)*s23 +
           (194*s12*s13 + 120*s13^2)*s23^2 + 58*s13*s23^3 - 252*s23^4) +
         p3q^4*(p2q*(-252*s12^2*s13^2 + 504*s12*s13^3 +
             (264*s12^2*s13 + 170*s12*s13^2 + 506*s13^3)*s23 +
             (-756*s12^2 - 240*s12*s13 - 34*s13^2)*s23^2 + 600*s13*s23^3) +
           p1q*(-756*s12^2*s13^2 + (264*s12^2*s13 - 240*s12*s13^2 + 600*
                s13^3)*s23 + (-252*s12^2 + 170*s12*s13 - 34*s13^2)*s23^2 +
             (504*s12 + 506*s13)*s23^3)) +
         p3q*(p1q^4*((252*s12*s13^2 + 252*s13^3)*s23 +
             (-58*s12*s13 + 194*s13^2)*s23^2 - 58*s13*s23^3) +
           p2q^4*((-58*s12*s13^2 - 58*s13^3)*s23 + (252*s12*s13 + 194*s13^2)*
              s23^2 + 252*s13*s23^3) + p1q*p2q^3*(-504*s13^4 +
             (58*s12^2*s13 + 116*s12*s13^2 - 214*s13^3)*s23 +
             (1144*s12*s13 + 848*s13^2)*s23^2 + (504*s12 + 1318*s13)*s23^3) +
           p1q^2*p2q^2*(504*s12*s13^3 - 756*s13^4 + (100*s12^2*s13 + 720*s12*
                s13^2 + 444*s13^3)*s23 + (720*s12*s13 + 500*s13^2)*s23^2 +
             (504*s12 + 444*s13)*s23^3 - 756*s23^4) +
           p1q^3*p2q*(504*s12*s13^3 + (58*s12^2*s13 + 1144*s12*s13^2 + 1318*
                s13^3)*s23 + (116*s12*s13 + 848*s13^2)*s23^2 -
             214*s13*s23^3 - 504*s23^4)) +
         p3q^2*(p2q^3*(-252*s13^4 + (58*s12^2*s13 + 42*s12*s13^2 - 152*s13^3)*
              s23 + (-252*s12^2 + 446*s12*s13 + 476*s13^2)*s23^2 +
             756*s13*s23^3) + p1q*p2q^2*(1008*s12*s13^3 - 756*s13^4 +
             (290*s12^2*s13 + 858*s12*s13^2 + 624*s13^3)*s23 +
             (-252*s12^2 + 1670*s12*s13 + 1164*s13^2)*s23^2 +
             (1512*s12 + 2444*s13)*s23^3) + p1q^2*p2q*(-252*s12^2*s13^2 +
             1512*s12*s13^3 + (290*s12^2*s13 + 1670*s12*s13^2 + 2444*s13^3)*
              s23 + (858*s12*s13 + 1164*s13^2)*s23^2 + (1008*s12 + 624*s13)*
              s23^3 - 756*s23^4) + p1q^3*(-252*s12^2*s13^2 +
             (58*s12^2*s13 + 446*s12*s13^2 + 756*s13^3)*s23 +
             (42*s12*s13 + 476*s13^2)*s23^2 - 152*s13*s23^3 - 252*s23^4)) +
         p3q^3*(p2q^2*(504*s12*s13^3 - 252*s13^4 + (190*s12^2*s13 + 332*s12*
                s13^2 + 238*s13^3)*s23 + (-756*s12^2 + 16*s12*s13 + 280*
                s13^2)*s23^2 + 930*s13*s23^3) + p1q*p2q*(-504*s12^2*s13^2 +
             1512*s12*s13^3 + (496*s12^2*s13 + 948*s12*s13^2 + 1884*s13^3)*
              s23 + (-504*s12^2 + 948*s12*s13 + 728*s13^2)*s23^2 +
             (1512*s12 + 1884*s13)*s23^3) + p1q^2*(-756*s12^2*s13^2 +
             (190*s12^2*s13 + 16*s12*s13^2 + 930*s13^3)*s23 +
             (332*s12*s13 + 280*s13^2)*s23^2 + (504*s12 + 238*s13)*s23^3 -
             252*s23^4)))/(27*p1q^3*p2q^2*s13^2*s23^2 + 27*p1q^2*p2q^3*s13^2*
          s23^2 + 27*p3q^5*s13^2*s23^2 + p3q^4*(81*p1q*s13^2*s23^2 +
           81*p2q*s13^2*s23^2) + p3q^3*(81*p1q^2*s13^2*s23^2 +
           216*p1q*p2q*s13^2*s23^2 + 81*p2q^2*s13^2*s23^2) +
         p3q^2*(27*p1q^3*s13^2*s23^2 + 189*p1q^2*p2q*s13^2*s23^2 +
           189*p1q*p2q^2*s13^2*s23^2 + 27*p2q^3*s13^2*s23^2) +
         p3q*(54*p1q^3*p2q*s13^2*s23^2 + 135*p1q^2*p2q^2*s13^2*s23^2 +
           54*p1q*p2q^3*s13^2*s23^2)) +
       (nl*(p1q*p2q^4*((4*s12*s13^2 + 4*s13^3)*s23 + (-24*s12*s13 - 20*s13^2)*
             s23^2 - 24*s13*s23^3) + p3q^5*(24*s12^2*s13^2 +
            (-8*s12^2*s13 + 12*s12*s13^2 - 12*s13^3)*s23 +
            (24*s12^2 + 12*s12*s13)*s23^2 - 12*s13*s23^3) +
          p1q^4*p2q*((-24*s12*s13^2 - 24*s13^3)*s23 + (4*s12*s13 - 20*s13^2)*
             s23^2 + 4*s13*s23^3) + p1q^2*p2q^3*(24*s13^4 +
            (-4*s12*s13^2 + 12*s13^3)*s23 + (-20*s12*s13 - 16*s13^2)*s23^2 -
            4*s13*s23^3 + 24*s23^4) + p1q^3*p2q^2*(24*s13^4 +
            (-20*s12*s13^2 - 4*s13^3)*s23 + (-4*s12*s13 - 16*s13^2)*s23^2 +
            12*s13*s23^3 + 24*s23^4) + p3q^4*
           (p1q*(72*s12^2*s13^2 + (-16*s12^2*s13 + 32*s12*s13^2 - 48*s13^3)*
               s23 + (24*s12^2 - 4*s12*s13 - 12*s13^2)*s23^2 +
              (-48*s12 - 36*s13)*s23^3) + p2q*(24*s12^2*s13^2 -
              48*s12*s13^3 + (-16*s12^2*s13 - 4*s12*s13^2 - 36*s13^3)*s23 +
              (72*s12^2 + 32*s12*s13 - 12*s13^2)*s23^2 - 48*s13*s23^3)) +
          p3q^3*(p1q*p2q*(48*s12^2*s13^2 - 144*s12*s13^3 + (-32*s12^2*s13 -
                72*s12*s13^2 - 152*s13^3)*s23 + (48*s12^2 - 72*s12*s13 -
                112*s13^2)*s23^2 + (-144*s12 - 152*s13)*s23^3) +
            p2q^2*(-48*s12*s13^3 + 24*s13^4 + (-12*s12^2*s13 - 24*s12*s13^2 -
                12*s13^3)*s23 + (72*s12^2 - 48*s13^2)*s23^2 - 84*s13*s23^3) +
            p1q^2*(72*s12^2*s13^2 + (-12*s12^2*s13 - 84*s13^3)*s23 +
              (-24*s12*s13 - 48*s13^2)*s23^2 + (-48*s12 - 12*s13)*s23^3 +
              24*s23^4)) + p3q^2*(p1q*p2q^2*(-96*s12*s13^3 + 72*s13^4 +
              (-20*s12^2*s13 - 68*s12*s13^2 - 32*s13^3)*s23 +
              (24*s12^2 - 156*s12*s13 - 152*s13^2)*s23^2 + (-144*s12 -
                216*s13)*s23^3) + p2q^3*(24*s13^4 + (-4*s12^2*s13 -
                4*s12*s13^2 + 16*s13^3)*s23 + (24*s12^2 - 44*s12*s13 -
                56*s13^2)*s23^2 - 72*s13*s23^3) + p1q^3*(24*s12^2*s13^2 +
              (-4*s12^2*s13 - 44*s12*s13^2 - 72*s13^3)*s23 + (-4*s12*s13 -
                56*s13^2)*s23^2 + 16*s13*s23^3 + 24*s23^4) +
            p1q^2*p2q*(24*s12^2*s13^2 - 144*s12*s13^3 + (-20*s12^2*s13 -
                156*s12*s13^2 - 216*s13^3)*s23 + (-68*s12*s13 - 152*s13^2)*
               s23^2 + (-96*s12 - 32*s13)*s23^3 + 72*s23^4)) +
          p3q*(p1q*p2q^3*(48*s13^4 + (-4*s12^2*s13 - 8*s12*s13^2 + 28*s13^3)*
               s23 + (-112*s12*s13 - 96*s13^2)*s23^2 + (-48*s12 - 124*s13)*
               s23^3) + p2q^4*((4*s12*s13^2 + 4*s13^3)*s23 + (-24*s12*s13 -
                20*s13^2)*s23^2 - 24*s13*s23^3) +
            p1q^4*((-24*s12*s13^2 - 24*s13^3)*s23 + (4*s12*s13 - 20*s13^2)*
               s23^2 + 4*s13*s23^3) + p1q^3*p2q*(-48*s12*s13^3 +
              (-4*s12^2*s13 - 112*s12*s13^2 - 124*s13^3)*s23 +
              (-8*s12*s13 - 96*s13^2)*s23^2 + 28*s13*s23^3 + 48*s23^4) +
            p1q^2*p2q^2*(-48*s12*s13^3 + 72*s13^4 + (-8*s12^2*s13 -
                64*s12*s13^2 - 24*s13^3)*s23 + (-64*s12*s13 - 72*s13^2)*s23^
                2 + (-48*s12 - 24*s13)*s23^3 + 72*s23^4))))/
        (27*p1q^3*p2q^2*s13^2*s23^2 + 27*p1q^2*p2q^3*s13^2*s23^2 +
         27*p3q^5*s13^2*s23^2 + p3q^4*(81*p1q*s13^2*s23^2 +
           81*p2q*s13^2*s23^2) + p3q^3*(81*p1q^2*s13^2*s23^2 +
           216*p1q*p2q*s13^2*s23^2 + 81*p2q^2*s13^2*s23^2) +
         p3q^2*(27*p1q^3*s13^2*s23^2 + 189*p1q^2*p2q*s13^2*s23^2 +
           189*p1q*p2q^2*s13^2*s23^2 + 27*p2q^3*s13^2*s23^2) +
         p3q*(54*p1q^3*p2q*s13^2*s23^2 + 135*p1q^2*p2q^2*s13^2*s23^2 +
           54*p1q*p2q^3*s13^2*s23^2)) +
       ((p1q^4*p2q*((-12*s12*s13^2 - 12*s13^3)*s23 + (2*s12*s13 - 10*s13^2)*
             s23^2 + 2*s13*s23^3) + p3q^5*(12*s12^2*s13^2 +
            (-4*s12^2*s13 + 6*s12*s13^2 - 6*s13^3)*s23 +
            (-84*s12^2 - 42*s12*s13)*s23^2 + 42*s13*s23^3) +
          p1q*p2q^4*((2*s12*s13^2 + 2*s13^3)*s23 + (84*s12*s13 + 86*s13^2)*
             s23^2 + 84*s13*s23^3) + p1q^3*p2q^2*(12*s13^4 +
            (-10*s12*s13^2 - 2*s13^3)*s23 + (46*s12*s13 - 8*s13^2)*s23^2 -
            42*s13*s23^3 - 84*s23^4) + p1q^2*p2q^3*(12*s13^4 +
            (-2*s12*s13^2 + 6*s13^3)*s23 + (86*s12*s13 + 40*s13^2)*s23^2 -
            2*s13*s23^3 - 84*s23^4) + p3q^4*
           (p2q*(12*s12^2*s13^2 - 24*s12*s13^3 + (-8*s12^2*s13 -
                2*s12*s13^2 - 18*s13^3)*s23 + (-252*s12^2 - 80*s12*s13 +
                42*s13^2)*s23^2 + 168*s13*s23^3) + p1q*(36*s12^2*s13^2 +
              (-8*s12^2*s13 + 16*s12*s13^2 - 24*s13^3)*s23 + (-84*s12^2 +
                46*s12*s13 - 6*s13^2)*s23^2 + (168*s12 + 126*s13)*s23^3)) +
          p3q*(p1q^4*((-12*s12*s13^2 - 12*s13^3)*s23 + (2*s12*s13 - 10*s13^2)*
               s23^2 + 2*s13*s23^3) + p2q^4*((2*s12*s13^2 + 2*s13^3)*s23 +
              (84*s12*s13 + 86*s13^2)*s23^2 + 84*s13*s23^3) +
            p1q*p2q^3*(24*s13^4 + (-2*s12^2*s13 - 4*s12*s13^2 + 14*s13^3)*
               s23 + (424*s12*s13 + 336*s13^2)*s23^2 + (168*s12 + 418*s13)*
               s23^3) + p1q^2*p2q^2*(-24*s12*s13^3 + 36*s13^4 +
              (-4*s12^2*s13 - 32*s12*s13^2 - 12*s13^3)*s23 + (304*s12*s13 +
                60*s13^2)*s23^2 + (168*s12 + 36*s13)*s23^3 - 252*s23^4) +
            p1q^3*p2q*(-24*s12*s13^3 + (-2*s12^2*s13 - 56*s12*s13^2 -
                62*s13^3)*s23 + (92*s12*s13 - 48*s13^2)*s23^2 -
              82*s13*s23^3 - 168*s23^4)) +
          p3q^2*(p2q^3*(12*s13^4 + (-2*s12^2*s13 - 2*s12*s13^2 + 8*s13^3)*
               s23 + (-84*s12^2 + 170*s12*s13 + 212*s13^2)*s23^2 +
              252*s13*s23^3) + p1q*p2q^2*(-48*s12*s13^3 + 36*s13^4 +
              (-10*s12^2*s13 - 34*s12*s13^2 - 16*s13^3)*s23 +
              (-84*s12^2 + 642*s12*s13 + 404*s13^2)*s23^2 + (504*s12 +
                708*s13)*s23^3) + p1q^2*p2q*(12*s12^2*s13^2 - 72*s12*s13^3 +
              (-10*s12^2*s13 - 78*s12*s13^2 - 108*s13^3)*s23 +
              (350*s12*s13 - 28*s13^2)*s23^2 + (336*s12 + 80*s13)*s23^3 -
              252*s23^4) + p1q^3*(12*s12^2*s13^2 + (-2*s12^2*s13 -
                22*s12*s13^2 - 36*s13^3)*s23 + (46*s12*s13 - 28*s13^2)*s23^
                2 - 40*s13*s23^3 - 84*s23^4)) +
          p3q^3*(p2q^2*(-24*s12*s13^3 + 12*s13^4 + (-6*s12^2*s13 -
                12*s12*s13^2 - 6*s13^3)*s23 + (-252*s12^2 + 48*s12*s13 +
                168*s13^2)*s23^2 + 294*s13*s23^3) + p1q*p2q*(24*s12^2*s13^2 -
              72*s12*s13^3 + (-16*s12^2*s13 - 36*s12*s13^2 - 76*s13^3)*s23 +
              (-168*s12^2 + 348*s12*s13 + 136*s13^2)*s23^2 +
              (504*s12 + 500*s13)*s23^3) + p1q^2*(36*s12^2*s13^2 +
              (-6*s12^2*s13 - 42*s13^3)*s23 + (132*s12*s13 - 24*s13^2)*s23^
                2 + (168*s12 + 42*s13)*s23^3 - 84*s23^4)))*
         Log(p1q/(p1q + p2q + p3q)))/(27*p1q^3*p2q^2*s13^2*s23^2 +
         27*p1q^2*p2q^3*s13^2*s23^2 + 27*p3q^5*s13^2*s23^2 +
         p3q^4*(81*p1q*s13^2*s23^2 + 81*p2q*s13^2*s23^2) +
         p3q^3*(81*p1q^2*s13^2*s23^2 + 216*p1q*p2q*s13^2*s23^2 +
           81*p2q^2*s13^2*s23^2) + p3q^2*(27*p1q^3*s13^2*s23^2 +
           189*p1q^2*p2q*s13^2*s23^2 + 189*p1q*p2q^2*s13^2*s23^2 +
           27*p2q^3*s13^2*s23^2) + p3q*(54*p1q^3*p2q*s13^2*s23^2 +
           135*p1q^2*p2q^2*s13^2*s23^2 + 54*p1q*p2q^3*s13^2*s23^2)) +
       ((p1q*p2q^4*((2*s12*s13^2 + 2*s13^3)*s23 + (-12*s12*s13 - 10*s13^2)*
             s23^2 - 12*s13*s23^3) + p3q^5*(-84*s12^2*s13^2 +
            (-4*s12^2*s13 - 42*s12*s13^2 + 42*s13^3)*s23 +
            (12*s12^2 + 6*s12*s13)*s23^2 - 6*s13*s23^3) +
          p1q^4*p2q*((84*s12*s13^2 + 84*s13^3)*s23 + (2*s12*s13 + 86*s13^2)*
             s23^2 + 2*s13*s23^3) + p1q^2*p2q^3*(-84*s13^4 +
            (46*s12*s13^2 - 42*s13^3)*s23 + (-10*s12*s13 - 8*s13^2)*s23^2 -
            2*s13*s23^3 + 12*s23^4) + p1q^3*p2q^2*(-84*s13^4 +
            (86*s12*s13^2 - 2*s13^3)*s23 + (-2*s12*s13 + 40*s13^2)*s23^2 +
            6*s13*s23^3 + 12*s23^4) + p3q^4*(p1q*(-252*s12^2*s13^2 +
              (-8*s12^2*s13 - 80*s12*s13^2 + 168*s13^3)*s23 +
              (12*s12^2 - 2*s12*s13 + 42*s13^2)*s23^2 + (-24*s12 - 18*s13)*
               s23^3) + p2q*(-84*s12^2*s13^2 + 168*s12*s13^3 +
              (-8*s12^2*s13 + 46*s12*s13^2 + 126*s13^3)*s23 +
              (36*s12^2 + 16*s12*s13 - 6*s13^2)*s23^2 - 24*s13*s23^3)) +
          p3q^3*(p1q*p2q*(-168*s12^2*s13^2 + 504*s12*s13^3 + (-16*s12^2*s13 +
                348*s12*s13^2 + 500*s13^3)*s23 + (24*s12^2 - 36*s12*s13 +
                136*s13^2)*s23^2 + (-72*s12 - 76*s13)*s23^3) +
            p2q^2*(168*s12*s13^3 - 84*s13^4 + (-6*s12^2*s13 + 132*s12*s13^2 +
                42*s13^3)*s23 + (36*s12^2 - 24*s13^2)*s23^2 - 42*s13*s23^3) +
            p1q^2*(-252*s12^2*s13^2 + (-6*s12^2*s13 + 48*s12*s13^2 +
                294*s13^3)*s23 + (-12*s12*s13 + 168*s13^2)*s23^2 +
              (-24*s12 - 6*s13)*s23^3 + 12*s23^4)) +
          p3q^2*(p1q*p2q^2*(336*s12*s13^3 - 252*s13^4 + (-10*s12^2*s13 +
                350*s12*s13^2 + 80*s13^3)*s23 + (12*s12^2 - 78*s12*s13 -
                28*s13^2)*s23^2 + (-72*s12 - 108*s13)*s23^3) +
            p2q^3*(-84*s13^4 + (-2*s12^2*s13 + 46*s12*s13^2 - 40*s13^3)*s23 +
              (12*s12^2 - 22*s12*s13 - 28*s13^2)*s23^2 - 36*s13*s23^3) +
            p1q^3*(-84*s12^2*s13^2 + (-2*s12^2*s13 + 170*s12*s13^2 +
                252*s13^3)*s23 + (-2*s12*s13 + 212*s13^2)*s23^2 +
              8*s13*s23^3 + 12*s23^4) + p1q^2*p2q*(-84*s12^2*s13^2 +
              504*s12*s13^3 + (-10*s12^2*s13 + 642*s12*s13^2 + 708*s13^3)*
               s23 + (-34*s12*s13 + 404*s13^2)*s23^2 + (-48*s12 - 16*s13)*s23^
                3 + 36*s23^4)) + p3q*(p1q*p2q^3*(-168*s13^4 +
              (-2*s12^2*s13 + 92*s12*s13^2 - 82*s13^3)*s23 + (-56*s12*s13 -
                48*s13^2)*s23^2 + (-24*s12 - 62*s13)*s23^3) +
            p2q^4*((2*s12*s13^2 + 2*s13^3)*s23 + (-12*s12*s13 - 10*s13^2)*s23^
                2 - 12*s13*s23^3) + p1q^4*((84*s12*s13^2 + 84*s13^3)*s23 +
              (2*s12*s13 + 86*s13^2)*s23^2 + 2*s13*s23^3) +
            p1q^3*p2q*(168*s12*s13^3 + (-2*s12^2*s13 + 424*s12*s13^2 +
                418*s13^3)*s23 + (-4*s12*s13 + 336*s13^2)*s23^2 +
              14*s13*s23^3 + 24*s23^4) + p1q^2*p2q^2*(168*s12*s13^3 -
              252*s13^4 + (-4*s12^2*s13 + 304*s12*s13^2 + 36*s13^3)*s23 +
              (-32*s12*s13 + 60*s13^2)*s23^2 + (-24*s12 - 12*s13)*s23^3 +
              36*s23^4)))*Log(p2q/(p1q + p2q + p3q)))/
        (27*p1q^3*p2q^2*s13^2*s23^2 + 27*p1q^2*p2q^3*s13^2*s23^2 +
         27*p3q^5*s13^2*s23^2 + p3q^4*(81*p1q*s13^2*s23^2 +
           81*p2q*s13^2*s23^2) + p3q^3*(81*p1q^2*s13^2*s23^2 +
           216*p1q*p2q*s13^2*s23^2 + 81*p2q^2*s13^2*s23^2) +
         p3q^2*(27*p1q^3*s13^2*s23^2 + 189*p1q^2*p2q*s13^2*s23^2 +
           189*p1q*p2q^2*s13^2*s23^2 + 27*p2q^3*s13^2*s23^2) +
         p3q*(54*p1q^3*p2q*s13^2*s23^2 + 135*p1q^2*p2q^2*s13^2*s23^2 +
           54*p1q*p2q^3*s13^2*s23^2)) +
       ((p1q^4*p2q*((24*s12*s13^2 + 24*s13^3)*s23 + (-20*s12*s13 + 4*s13^2)*
             s23^2 - 20*s13*s23^3) + p3q^5*(-24*s12^2*s13^2 +
            (40*s12^2*s13 - 12*s12*s13^2 + 12*s13^3)*s23 +
            (-24*s12^2 - 12*s12*s13)*s23^2 + 12*s13*s23^3) +
          p1q*p2q^4*((-20*s12*s13^2 - 20*s13^3)*s23 + (24*s12*s13 + 4*s13^2)*
             s23^2 + 24*s13*s23^3) + p1q^3*p2q^2*(-24*s13^4 +
            (4*s12*s13^2 + 20*s13^3)*s23 + (-28*s12*s13 + 32*s13^2)*s23^2 -
            12*s13*s23^3 - 24*s23^4) + p1q^2*p2q^3*(-24*s13^4 +
            (-28*s12*s13^2 - 12*s13^3)*s23 + (4*s12*s13 + 32*s13^2)*s23^2 +
            20*s13*s23^3 - 24*s23^4) + p3q^4*
           (p2q*(-24*s12^2*s13^2 + 48*s12*s13^3 + (80*s12^2*s13 -
                28*s12*s13^2 + 36*s13^3)*s23 + (-72*s12^2 - 64*s12*s13 +
                12*s13^2)*s23^2 + 48*s13*s23^3) + p1q*(-72*s12^2*s13^2 +
              (80*s12^2*s13 - 64*s12*s13^2 + 48*s13^3)*s23 + (-24*s12^2 -
                28*s12*s13 + 12*s13^2)*s23^2 + (48*s12 + 36*s13)*s23^3)) +
          p3q*(p1q^4*((24*s12*s13^2 + 24*s13^3)*s23 + (-20*s12*s13 + 4*s13^2)*
               s23^2 - 20*s13*s23^3) + p2q^4*((-20*s12*s13^2 - 20*s13^3)*
               s23 + (24*s12*s13 + 4*s13^2)*s23^2 + 24*s13*s23^3) +
            p1q*p2q^3*(-48*s13^4 + (20*s12^2*s13 - 56*s12*s13^2 - 44*s13^3)*
               s23 + (80*s12*s13 + 96*s13^2)*s23^2 + (48*s12 + 140*s13)*s23^
                3) + p1q^2*p2q^2*(48*s12*s13^3 - 72*s13^4 + (40*s12^2*s13 -
                16*s12*s13^2 + 72*s13^3)*s23 + (-16*s12*s13 + 168*s13^2)*s23^
                2 + (48*s12 + 72*s13)*s23^3 - 72*s23^4) +
            p1q^3*p2q*(48*s12*s13^3 + (20*s12^2*s13 + 80*s12*s13^2 +
                140*s13^3)*s23 + (-56*s12*s13 + 96*s13^2)*s23^2 -
              44*s13*s23^3 - 48*s23^4)) +
          p3q^2*(p2q^3*(-24*s13^4 + (20*s12^2*s13 - 28*s12*s13^2 - 32*s13^3)*
               s23 + (-24*s12^2 + 28*s12*s13 + 40*s13^2)*s23^2 +
              72*s13*s23^3) + p1q*p2q^2*(96*s12*s13^3 - 72*s13^4 +
              (100*s12^2*s13 - 44*s12*s13^2 + 64*s13^3)*s23 +
              (-24*s12^2 + 60*s12*s13 + 232*s13^2)*s23^2 + (144*s12 +
                264*s13)*s23^3) + p1q^2*p2q*(-24*s12^2*s13^2 +
              144*s12*s13^3 + (100*s12^2*s13 + 60*s12*s13^2 + 264*s13^3)*
               s23 + (-44*s12*s13 + 232*s13^2)*s23^2 + (96*s12 + 64*s13)*s23^
                3 - 72*s23^4) + p1q^3*(-24*s12^2*s13^2 + (20*s12^2*s13 +
                28*s12*s13^2 + 72*s13^3)*s23 + (-28*s12*s13 + 40*s13^2)*s23^
                2 - 32*s13*s23^3 - 24*s23^4)) +
          p3q^3*(p2q^2*(48*s12*s13^3 - 24*s13^4 + (60*s12^2*s13 -
                24*s12*s13^2 + 12*s13^3)*s23 + (-72*s12^2 - 48*s12*s13 +
                48*s13^2)*s23^2 + 84*s13*s23^3) + p1q*p2q*(-48*s12^2*s13^2 +
              144*s12*s13^3 + (160*s12^2*s13 - 24*s12*s13^2 + 184*s13^3)*
               s23 + (-48*s12^2 - 24*s12*s13 + 176*s13^2)*s23^2 +
              (144*s12 + 184*s13)*s23^3) + p1q^2*(-72*s12^2*s13^2 +
              (60*s12^2*s13 - 48*s12*s13^2 + 84*s13^3)*s23 + (-24*s12*s13 +
                48*s13^2)*s23^2 + (48*s12 + 12*s13)*s23^3 - 24*s23^4)))*
         Log(p3q/(p1q + p2q + p3q)))/(27*p1q^3*p2q^2*s13^2*s23^2 +
         27*p1q^2*p2q^3*s13^2*s23^2 + 27*p3q^5*s13^2*s23^2 +
         p3q^4*(81*p1q*s13^2*s23^2 + 81*p2q*s13^2*s23^2) +
         p3q^3*(81*p1q^2*s13^2*s23^2 + 216*p1q*p2q*s13^2*s23^2 +
           81*p2q^2*s13^2*s23^2) + p3q^2*(27*p1q^3*s13^2*s23^2 +
           189*p1q^2*p2q*s13^2*s23^2 + 189*p1q*p2q^2*s13^2*s23^2 +
           27*p2q^3*s13^2*s23^2) + p3q*(54*p1q^3*p2q*s13^2*s23^2 +
           135*p1q^2*p2q^2*s13^2*s23^2 + 54*p1q*p2q^3*s13^2*s23^2)) +
       ((p1q^4*p2q*((96*s12*s13^2 + 96*s13^3)*s23 + (-16*s12*s13 + 80*s13^2)*
             s23^2 - 16*s13*s23^3) + p3q^5*(-96*s12^2*s13^2 +
            (32*s12^2*s13 - 48*s12*s13^2 + 48*s13^3)*s23 +
            (-96*s12^2 - 48*s12*s13)*s23^2 + 48*s13*s23^3) +
          p1q*p2q^4*((-16*s12*s13^2 - 16*s13^3)*s23 + (96*s12*s13 + 80*s13^2)*
             s23^2 + 96*s13*s23^3) + p1q^3*p2q^2*(-96*s13^4 +
            (80*s12*s13^2 + 16*s13^3)*s23 + (16*s12*s13 + 64*s13^2)*s23^2 -
            48*s13*s23^3 - 96*s23^4) + p1q^2*p2q^3*(-96*s13^4 +
            (16*s12*s13^2 - 48*s13^3)*s23 + (80*s12*s13 + 64*s13^2)*s23^2 +
            16*s13*s23^3 - 96*s23^4) + p3q^4*
           (p2q*(-96*s12^2*s13^2 + 192*s12*s13^3 + (64*s12^2*s13 +
                16*s12*s13^2 + 144*s13^3)*s23 + (-288*s12^2 - 128*s12*s13 +
                48*s13^2)*s23^2 + 192*s13*s23^3) + p1q*(-288*s12^2*s13^2 +
              (64*s12^2*s13 - 128*s12*s13^2 + 192*s13^3)*s23 +
              (-96*s12^2 + 16*s12*s13 + 48*s13^2)*s23^2 + (192*s12 + 144*s13)*
               s23^3)) + p3q*(p1q^4*((96*s12*s13^2 + 96*s13^3)*s23 +
              (-16*s12*s13 + 80*s13^2)*s23^2 - 16*s13*s23^3) +
            p2q^4*((-16*s12*s13^2 - 16*s13^3)*s23 + (96*s12*s13 + 80*s13^2)*
               s23^2 + 96*s13*s23^3) + p1q*p2q^3*(-192*s13^4 +
              (16*s12^2*s13 + 32*s12*s13^2 - 112*s13^3)*s23 +
              (448*s12*s13 + 384*s13^2)*s23^2 + (192*s12 + 496*s13)*s23^3) +
            p1q^2*p2q^2*(192*s12*s13^3 - 288*s13^4 + (32*s12^2*s13 +
                256*s12*s13^2 + 96*s13^3)*s23 + (256*s12*s13 + 288*s13^2)*s23^
                2 + (192*s12 + 96*s13)*s23^3 - 288*s23^4) +
            p1q^3*p2q*(192*s12*s13^3 + (16*s12^2*s13 + 448*s12*s13^2 +
                496*s13^3)*s23 + (32*s12*s13 + 384*s13^2)*s23^2 -
              112*s13*s23^3 - 192*s23^4)) +
          p3q^2*(p2q^3*(-96*s13^4 + (16*s12^2*s13 + 16*s12*s13^2 - 64*s13^3)*
               s23 + (-96*s12^2 + 176*s12*s13 + 224*s13^2)*s23^2 +
              288*s13*s23^3) + p1q*p2q^2*(384*s12*s13^3 - 288*s13^4 +
              (80*s12^2*s13 + 272*s12*s13^2 + 128*s13^3)*s23 +
              (-96*s12^2 + 624*s12*s13 + 608*s13^2)*s23^2 + (576*s12 +
                864*s13)*s23^3) + p1q^2*p2q*(-96*s12^2*s13^2 +
              576*s12*s13^3 + (80*s12^2*s13 + 624*s12*s13^2 + 864*s13^3)*
               s23 + (272*s12*s13 + 608*s13^2)*s23^2 + (384*s12 + 128*s13)*
               s23^3 - 288*s23^4) + p1q^3*(-96*s12^2*s13^2 + (16*s12^2*s13 +
                176*s12*s13^2 + 288*s13^3)*s23 + (16*s12*s13 + 224*s13^2)*s23^
                2 - 64*s13*s23^3 - 96*s23^4)) +
          p3q^3*(p2q^2*(192*s12*s13^3 - 96*s13^4 + (48*s12^2*s13 +
                96*s12*s13^2 + 48*s13^3)*s23 + (-288*s12^2 + 192*s13^2)*s23^
                2 + 336*s13*s23^3) + p1q*p2q*(-192*s12^2*s13^2 +
              576*s12*s13^3 + (128*s12^2*s13 + 288*s12*s13^2 + 608*s13^3)*
               s23 + (-192*s12^2 + 288*s12*s13 + 448*s13^2)*s23^2 +
              (576*s12 + 608*s13)*s23^3) + p1q^2*(-288*s12^2*s13^2 +
              (48*s12^2*s13 + 336*s13^3)*s23 + (96*s12*s13 + 192*s13^2)*s23^
                2 + (192*s12 + 48*s13)*s23^3 - 96*s23^4)))*
         Log(-s12 - s13 - s23))/(27*p1q^3*p2q^2*s13^2*s23^2 +
         27*p1q^2*p2q^3*s13^2*s23^2 + 27*p3q^5*s13^2*s23^2 +
         p3q^4*(81*p1q*s13^2*s23^2 + 81*p2q*s13^2*s23^2) +
         p3q^3*(81*p1q^2*s13^2*s23^2 + 216*p1q*p2q*s13^2*s23^2 +
           81*p2q^2*s13^2*s23^2) + p3q^2*(27*p1q^3*s13^2*s23^2 +
           189*p1q^2*p2q*s13^2*s23^2 + 189*p1q*p2q^2*s13^2*s23^2 +
           27*p2q^3*s13^2*s23^2) + p3q*(54*p1q^3*p2q*s13^2*s23^2 +
           135*p1q^2*p2q^2*s13^2*s23^2 + 54*p1q*p2q^3*s13^2*s23^2)) +
       ((p1q^4*p2q*((24*s12*s13^2 + 24*s13^3)*s23 + (-20*s12*s13 + 4*s13^2)*
             s23^2 - 20*s13*s23^3) + p3q^5*(-24*s12^2*s13^2 +
            (40*s12^2*s13 - 12*s12*s13^2 + 12*s13^3)*s23 +
            (-24*s12^2 - 12*s12*s13)*s23^2 + 12*s13*s23^3) +
          p1q*p2q^4*((-20*s12*s13^2 - 20*s13^3)*s23 + (24*s12*s13 + 4*s13^2)*
             s23^2 + 24*s13*s23^3) + p1q^3*p2q^2*(-24*s13^4 +
            (4*s12*s13^2 + 20*s13^3)*s23 + (-28*s12*s13 + 32*s13^2)*s23^2 -
            12*s13*s23^3 - 24*s23^4) + p1q^2*p2q^3*(-24*s13^4 +
            (-28*s12*s13^2 - 12*s13^3)*s23 + (4*s12*s13 + 32*s13^2)*s23^2 +
            20*s13*s23^3 - 24*s23^4) + p3q^4*
           (p2q*(-24*s12^2*s13^2 + 48*s12*s13^3 + (80*s12^2*s13 -
                28*s12*s13^2 + 36*s13^3)*s23 + (-72*s12^2 - 64*s12*s13 +
                12*s13^2)*s23^2 + 48*s13*s23^3) + p1q*(-72*s12^2*s13^2 +
              (80*s12^2*s13 - 64*s12*s13^2 + 48*s13^3)*s23 + (-24*s12^2 -
                28*s12*s13 + 12*s13^2)*s23^2 + (48*s12 + 36*s13)*s23^3)) +
          p3q*(p1q^4*((24*s12*s13^2 + 24*s13^3)*s23 + (-20*s12*s13 + 4*s13^2)*
               s23^2 - 20*s13*s23^3) + p2q^4*((-20*s12*s13^2 - 20*s13^3)*
               s23 + (24*s12*s13 + 4*s13^2)*s23^2 + 24*s13*s23^3) +
            p1q*p2q^3*(-48*s13^4 + (20*s12^2*s13 - 56*s12*s13^2 - 44*s13^3)*
               s23 + (80*s12*s13 + 96*s13^2)*s23^2 + (48*s12 + 140*s13)*s23^
                3) + p1q^2*p2q^2*(48*s12*s13^3 - 72*s13^4 + (40*s12^2*s13 -
                16*s12*s13^2 + 72*s13^3)*s23 + (-16*s12*s13 + 168*s13^2)*s23^
                2 + (48*s12 + 72*s13)*s23^3 - 72*s23^4) +
            p1q^3*p2q*(48*s12*s13^3 + (20*s12^2*s13 + 80*s12*s13^2 +
                140*s13^3)*s23 + (-56*s12*s13 + 96*s13^2)*s23^2 -
              44*s13*s23^3 - 48*s23^4)) +
          p3q^2*(p2q^3*(-24*s13^4 + (20*s12^2*s13 - 28*s12*s13^2 - 32*s13^3)*
               s23 + (-24*s12^2 + 28*s12*s13 + 40*s13^2)*s23^2 +
              72*s13*s23^3) + p1q*p2q^2*(96*s12*s13^3 - 72*s13^4 +
              (100*s12^2*s13 - 44*s12*s13^2 + 64*s13^3)*s23 +
              (-24*s12^2 + 60*s12*s13 + 232*s13^2)*s23^2 + (144*s12 +
                264*s13)*s23^3) + p1q^2*p2q*(-24*s12^2*s13^2 +
              144*s12*s13^3 + (100*s12^2*s13 + 60*s12*s13^2 + 264*s13^3)*
               s23 + (-44*s12*s13 + 232*s13^2)*s23^2 + (96*s12 + 64*s13)*s23^
                3 - 72*s23^4) + p1q^3*(-24*s12^2*s13^2 + (20*s12^2*s13 +
                28*s12*s13^2 + 72*s13^3)*s23 + (-28*s12*s13 + 40*s13^2)*s23^
                2 - 32*s13*s23^3 - 24*s23^4)) +
          p3q^3*(p2q^2*(48*s12*s13^3 - 24*s13^4 + (60*s12^2*s13 -
                24*s12*s13^2 + 12*s13^3)*s23 + (-72*s12^2 - 48*s12*s13 +
                48*s13^2)*s23^2 + 84*s13*s23^3) + p1q*p2q*(-48*s12^2*s13^2 +
              144*s12*s13^3 + (160*s12^2*s13 - 24*s12*s13^2 + 184*s13^3)*
               s23 + (-48*s12^2 - 24*s12*s13 + 176*s13^2)*s23^2 +
              (144*s12 + 184*s13)*s23^3) + p1q^2*(-72*s12^2*s13^2 +
              (60*s12^2*s13 - 48*s12*s13^2 + 84*s13^3)*s23 + (-24*s12*s13 +
                48*s13^2)*s23^2 + (48*s12 + 12*s13)*s23^3 - 24*s23^4)))*
         Log(s12/(s12 + s13 + s23)))/(27*p1q^3*p2q^2*s13^2*s23^2 +
         27*p1q^2*p2q^3*s13^2*s23^2 + 27*p3q^5*s13^2*s23^2 +
         p3q^4*(81*p1q*s13^2*s23^2 + 81*p2q*s13^2*s23^2) +
         p3q^3*(81*p1q^2*s13^2*s23^2 + 216*p1q*p2q*s13^2*s23^2 +
           81*p2q^2*s13^2*s23^2) + p3q^2*(27*p1q^3*s13^2*s23^2 +
           189*p1q^2*p2q*s13^2*s23^2 + 189*p1q*p2q^2*s13^2*s23^2 +
           27*p2q^3*s13^2*s23^2) + p3q*(54*p1q^3*p2q*s13^2*s23^2 +
           135*p1q^2*p2q^2*s13^2*s23^2 + 54*p1q*p2q^3*s13^2*s23^2)) +
       ((p1q*p2q^4*((2*s12*s13^2 + 2*s13^3)*s23 + (-12*s12*s13 - 10*s13^2)*
             s23^2 - 12*s13*s23^3) + p3q^5*(-84*s12^2*s13^2 +
            (-4*s12^2*s13 - 42*s12*s13^2 + 42*s13^3)*s23 +
            (12*s12^2 + 6*s12*s13)*s23^2 - 6*s13*s23^3) +
          p1q^4*p2q*((84*s12*s13^2 + 84*s13^3)*s23 + (2*s12*s13 + 86*s13^2)*
             s23^2 + 2*s13*s23^3) + p1q^2*p2q^3*(-84*s13^4 +
            (46*s12*s13^2 - 42*s13^3)*s23 + (-10*s12*s13 - 8*s13^2)*s23^2 -
            2*s13*s23^3 + 12*s23^4) + p1q^3*p2q^2*(-84*s13^4 +
            (86*s12*s13^2 - 2*s13^3)*s23 + (-2*s12*s13 + 40*s13^2)*s23^2 +
            6*s13*s23^3 + 12*s23^4) + p3q^4*(p1q*(-252*s12^2*s13^2 +
              (-8*s12^2*s13 - 80*s12*s13^2 + 168*s13^3)*s23 +
              (12*s12^2 - 2*s12*s13 + 42*s13^2)*s23^2 + (-24*s12 - 18*s13)*
               s23^3) + p2q*(-84*s12^2*s13^2 + 168*s12*s13^3 +
              (-8*s12^2*s13 + 46*s12*s13^2 + 126*s13^3)*s23 +
              (36*s12^2 + 16*s12*s13 - 6*s13^2)*s23^2 - 24*s13*s23^3)) +
          p3q^3*(p1q*p2q*(-168*s12^2*s13^2 + 504*s12*s13^3 + (-16*s12^2*s13 +
                348*s12*s13^2 + 500*s13^3)*s23 + (24*s12^2 - 36*s12*s13 +
                136*s13^2)*s23^2 + (-72*s12 - 76*s13)*s23^3) +
            p2q^2*(168*s12*s13^3 - 84*s13^4 + (-6*s12^2*s13 + 132*s12*s13^2 +
                42*s13^3)*s23 + (36*s12^2 - 24*s13^2)*s23^2 - 42*s13*s23^3) +
            p1q^2*(-252*s12^2*s13^2 + (-6*s12^2*s13 + 48*s12*s13^2 +
                294*s13^3)*s23 + (-12*s12*s13 + 168*s13^2)*s23^2 +
              (-24*s12 - 6*s13)*s23^3 + 12*s23^4)) +
          p3q^2*(p1q*p2q^2*(336*s12*s13^3 - 252*s13^4 + (-10*s12^2*s13 +
                350*s12*s13^2 + 80*s13^3)*s23 + (12*s12^2 - 78*s12*s13 -
                28*s13^2)*s23^2 + (-72*s12 - 108*s13)*s23^3) +
            p2q^3*(-84*s13^4 + (-2*s12^2*s13 + 46*s12*s13^2 - 40*s13^3)*s23 +
              (12*s12^2 - 22*s12*s13 - 28*s13^2)*s23^2 - 36*s13*s23^3) +
            p1q^3*(-84*s12^2*s13^2 + (-2*s12^2*s13 + 170*s12*s13^2 +
                252*s13^3)*s23 + (-2*s12*s13 + 212*s13^2)*s23^2 +
              8*s13*s23^3 + 12*s23^4) + p1q^2*p2q*(-84*s12^2*s13^2 +
              504*s12*s13^3 + (-10*s12^2*s13 + 642*s12*s13^2 + 708*s13^3)*
               s23 + (-34*s12*s13 + 404*s13^2)*s23^2 + (-48*s12 - 16*s13)*s23^
                3 + 36*s23^4)) + p3q*(p1q*p2q^3*(-168*s13^4 +
              (-2*s12^2*s13 + 92*s12*s13^2 - 82*s13^3)*s23 + (-56*s12*s13 -
                48*s13^2)*s23^2 + (-24*s12 - 62*s13)*s23^3) +
            p2q^4*((2*s12*s13^2 + 2*s13^3)*s23 + (-12*s12*s13 - 10*s13^2)*s23^
                2 - 12*s13*s23^3) + p1q^4*((84*s12*s13^2 + 84*s13^3)*s23 +
              (2*s12*s13 + 86*s13^2)*s23^2 + 2*s13*s23^3) +
            p1q^3*p2q*(168*s12*s13^3 + (-2*s12^2*s13 + 424*s12*s13^2 +
                418*s13^3)*s23 + (-4*s12*s13 + 336*s13^2)*s23^2 +
              14*s13*s23^3 + 24*s23^4) + p1q^2*p2q^2*(168*s12*s13^3 -
              252*s13^4 + (-4*s12^2*s13 + 304*s12*s13^2 + 36*s13^3)*s23 +
              (-32*s12*s13 + 60*s13^2)*s23^2 + (-24*s12 - 12*s13)*s23^3 +
              36*s23^4)))*Log(s13/(s12 + s13 + s23)))/
        (27*p1q^3*p2q^2*s13^2*s23^2 + 27*p1q^2*p2q^3*s13^2*s23^2 +
         27*p3q^5*s13^2*s23^2 + p3q^4*(81*p1q*s13^2*s23^2 +
           81*p2q*s13^2*s23^2) + p3q^3*(81*p1q^2*s13^2*s23^2 +
           216*p1q*p2q*s13^2*s23^2 + 81*p2q^2*s13^2*s23^2) +
         p3q^2*(27*p1q^3*s13^2*s23^2 + 189*p1q^2*p2q*s13^2*s23^2 +
           189*p1q*p2q^2*s13^2*s23^2 + 27*p2q^3*s13^2*s23^2) +
         p3q*(54*p1q^3*p2q*s13^2*s23^2 + 135*p1q^2*p2q^2*s13^2*s23^2 +
           54*p1q*p2q^3*s13^2*s23^2)) +
       ((p1q^4*p2q*((-12*s12*s13^2 - 12*s13^3)*s23 + (2*s12*s13 - 10*s13^2)*
             s23^2 + 2*s13*s23^3) + p3q^5*(12*s12^2*s13^2 +
            (-4*s12^2*s13 + 6*s12*s13^2 - 6*s13^3)*s23 +
            (-84*s12^2 - 42*s12*s13)*s23^2 + 42*s13*s23^3) +
          p1q*p2q^4*((2*s12*s13^2 + 2*s13^3)*s23 + (84*s12*s13 + 86*s13^2)*
             s23^2 + 84*s13*s23^3) + p1q^3*p2q^2*(12*s13^4 +
            (-10*s12*s13^2 - 2*s13^3)*s23 + (46*s12*s13 - 8*s13^2)*s23^2 -
            42*s13*s23^3 - 84*s23^4) + p1q^2*p2q^3*(12*s13^4 +
            (-2*s12*s13^2 + 6*s13^3)*s23 + (86*s12*s13 + 40*s13^2)*s23^2 -
            2*s13*s23^3 - 84*s23^4) + p3q^4*
           (p2q*(12*s12^2*s13^2 - 24*s12*s13^3 + (-8*s12^2*s13 -
                2*s12*s13^2 - 18*s13^3)*s23 + (-252*s12^2 - 80*s12*s13 +
                42*s13^2)*s23^2 + 168*s13*s23^3) + p1q*(36*s12^2*s13^2 +
              (-8*s12^2*s13 + 16*s12*s13^2 - 24*s13^3)*s23 + (-84*s12^2 +
                46*s12*s13 - 6*s13^2)*s23^2 + (168*s12 + 126*s13)*s23^3)) +
          p3q*(p1q^4*((-12*s12*s13^2 - 12*s13^3)*s23 + (2*s12*s13 - 10*s13^2)*
               s23^2 + 2*s13*s23^3) + p2q^4*((2*s12*s13^2 + 2*s13^3)*s23 +
              (84*s12*s13 + 86*s13^2)*s23^2 + 84*s13*s23^3) +
            p1q*p2q^3*(24*s13^4 + (-2*s12^2*s13 - 4*s12*s13^2 + 14*s13^3)*
               s23 + (424*s12*s13 + 336*s13^2)*s23^2 + (168*s12 + 418*s13)*
               s23^3) + p1q^2*p2q^2*(-24*s12*s13^3 + 36*s13^4 +
              (-4*s12^2*s13 - 32*s12*s13^2 - 12*s13^3)*s23 + (304*s12*s13 +
                60*s13^2)*s23^2 + (168*s12 + 36*s13)*s23^3 - 252*s23^4) +
            p1q^3*p2q*(-24*s12*s13^3 + (-2*s12^2*s13 - 56*s12*s13^2 -
                62*s13^3)*s23 + (92*s12*s13 - 48*s13^2)*s23^2 -
              82*s13*s23^3 - 168*s23^4)) +
          p3q^2*(p2q^3*(12*s13^4 + (-2*s12^2*s13 - 2*s12*s13^2 + 8*s13^3)*
               s23 + (-84*s12^2 + 170*s12*s13 + 212*s13^2)*s23^2 +
              252*s13*s23^3) + p1q*p2q^2*(-48*s12*s13^3 + 36*s13^4 +
              (-10*s12^2*s13 - 34*s12*s13^2 - 16*s13^3)*s23 +
              (-84*s12^2 + 642*s12*s13 + 404*s13^2)*s23^2 + (504*s12 +
                708*s13)*s23^3) + p1q^2*p2q*(12*s12^2*s13^2 - 72*s12*s13^3 +
              (-10*s12^2*s13 - 78*s12*s13^2 - 108*s13^3)*s23 +
              (350*s12*s13 - 28*s13^2)*s23^2 + (336*s12 + 80*s13)*s23^3 -
              252*s23^4) + p1q^3*(12*s12^2*s13^2 + (-2*s12^2*s13 -
                22*s12*s13^2 - 36*s13^3)*s23 + (46*s12*s13 - 28*s13^2)*s23^
                2 - 40*s13*s23^3 - 84*s23^4)) +
          p3q^3*(p2q^2*(-24*s12*s13^3 + 12*s13^4 + (-6*s12^2*s13 -
                12*s12*s13^2 - 6*s13^3)*s23 + (-252*s12^2 + 48*s12*s13 +
                168*s13^2)*s23^2 + 294*s13*s23^3) + p1q*p2q*(24*s12^2*s13^2 -
              72*s12*s13^3 + (-16*s12^2*s13 - 36*s12*s13^2 - 76*s13^3)*s23 +
              (-168*s12^2 + 348*s12*s13 + 136*s13^2)*s23^2 +
              (504*s12 + 500*s13)*s23^3) + p1q^2*(36*s12^2*s13^2 +
              (-6*s12^2*s13 - 42*s13^3)*s23 + (132*s12*s13 - 24*s13^2)*s23^
                2 + (168*s12 + 42*s13)*s23^3 - 84*s23^4)))*
         Log(s23/(s12 + s13 + s23)))/(27*p1q^3*p2q^2*s13^2*s23^2 +
         27*p1q^2*p2q^3*s13^2*s23^2 + 27*p3q^5*s13^2*s23^2 +
         p3q^4*(81*p1q*s13^2*s23^2 + 81*p2q*s13^2*s23^2) +
         p3q^3*(81*p1q^2*s13^2*s23^2 + 216*p1q*p2q*s13^2*s23^2 +
           81*p2q^2*s13^2*s23^2) + p3q^2*(27*p1q^3*s13^2*s23^2 +
           189*p1q^2*p2q*s13^2*s23^2 + 189*p1q*p2q^2*s13^2*s23^2 +
           27*p2q^3*s13^2*s23^2) + p3q*(54*p1q^3*p2q*s13^2*s23^2 +
           135*p1q^2*p2q^2*s13^2*s23^2 + 54*p1q*p2q^3*s13^2*s23^2)))/ep +
     Log(p3q/(p1q + p2q + p3q))*
      ((p2q^3*(20*s12*s13 + 20*s13^2 + 20*s13*s23) +
         p1q^2*p2q*(20*s12*s13 - 20*s13^2 + (8*s12 + 12*s13)*s23 -
           32*s23^2) + p1q*p2q^2*(8*s12*s13 - 32*s13^2 + (20*s12 + 12*s13)*
            s23 - 20*s23^2) + p3q^3*(-60*s12^2 - 32*s12*s13 - 12*s13^2 +
           (-32*s12 + 40*s13)*s23 - 12*s23^2) +
         p1q^3*((20*s12 + 20*s13)*s23 + 20*s23^2) +
         p3q^2*(p2q*(-60*s12^2 + 16*s12*s13 - 4*s13^2 + (8*s12 + 112*s13)*
              s23 - 12*s23^2) + p1q*(-60*s12^2 + 8*s12*s13 - 12*s13^2 +
             (16*s12 + 112*s13)*s23 - 4*s23^2)) +
         p3q*(p2q^2*(-20*s12^2 + 28*s12*s13 + 8*s13^2 + (20*s12 + 72*s13)*
              s23) + p1q*p2q*(-20*s12^2 + 56*s12*s13 - 44*s13^2 +
             (56*s12 + 104*s13)*s23 - 44*s23^2) +
           p1q^2*(-20*s12^2 + 20*s12*s13 + (28*s12 + 72*s13)*s23 + 8*s23^2)))/
        (27*p1q^2*p2q*s13*s23 + 27*p1q*p2q^2*s13*s23 + 27*p3q^3*s13*s23 +
         p3q^2*(54*p1q*s13*s23 + 54*p2q*s13*s23) +
         p3q*(27*p1q^2*s13*s23 + 81*p1q*p2q*s13*s23 + 27*p2q^2*s13*s23)) +
       ((p1q*p2q^4*(20*s12*s13^3 + 20*s13^4 + (-24*s12*s13^2 - 4*s13^3)*s23 -
            24*s13^2*s23^2) + p1q^5*((-10*s12^2*s13 - 20*s12*s13^2 -
              10*s13^3)*s23 + (-20*s12*s13 - 20*s13^2)*s23^2 -
            10*s13*s23^3) + p3q^5*(20*s12^3*s13 + 20*s12^2*s13^2 +
            (-24*s12^3 - 4*s12^2*s13)*s23 + (-24*s12^2 + 12*s12*s13 +
              12*s13^2)*s23^2 + 12*s13*s23^3) + p1q^2*p2q^3*
           (-10*s12^2*s13^2 + 20*s12*s13^3 + 30*s13^4 +
            (24*s12^2*s13 - 28*s12*s13^2 - 12*s13^3)*s23 +
            (72*s12*s13 + 6*s13^2)*s23^2 + 48*s13*s23^3) +
          p1q^4*p2q*(-10*s12^2*s13^2 + 10*s13^4 +
            (-8*s12^2*s13 - 28*s12*s13^2)*s23 + (-8*s12*s13 - 10*s13^2)*
             s23^2 + (-24*s12 - 24*s13)*s23^3 - 24*s23^4) +
          p1q^3*p2q^2*(-20*s12^2*s13^2 + 20*s13^4 +
            (14*s12^2*s13 - 36*s12*s13^2 - 10*s13^3)*s23 +
            (60*s12*s13 + 16*s13^2)*s23^2 + (-24*s12 + 22*s13)*s23^3 -
            24*s23^4) + p3q^4*(p2q*(20*s12^3*s13 - 20*s12^2*s13^2 -
              40*s12*s13^3 + (-48*s12^3 - 12*s12^2*s13 - 24*s12*s13^2)*s23 +
              (-48*s12^2 + 52*s12*s13 + 36*s13^2)*s23^2 + 36*s13*s23^3) +
            p1q*(60*s12^3*s13 + 60*s12^2*s13^2 + (-48*s12^3 + 4*s12^2*s13 -
                8*s12*s13^2)*s23 + (76*s12*s13 + 36*s13^2)*s23^2 +
              (48*s12 + 36*s13)*s23^3)) +
          p3q^2*(p2q^3*(-30*s12^2*s13^2 + 30*s13^4 + (48*s12^2*s13 -
                28*s12*s13^2 - 16*s13^3)*s23 + (72*s12*s13 - 22*s13^2)*s23^
                2 + 24*s13*s23^3) + p1q*p2q^2*(20*s12^3*s13 -
              100*s12^2*s13^2 - 80*s12*s13^3 + 40*s13^4 + (-24*s12^3 +
                62*s12^2*s13 - 220*s12*s13^2 - 126*s13^3)*s23 +
              (24*s12^2 + 208*s12*s13 - 72*s13^2)*s23^2 + (48*s12 + 94*s13)*
               s23^3) + p1q^3*(40*s12^3*s13 + 20*s12^2*s13^2 - 20*s12*s13^3 +
              (26*s12^2*s13 - 84*s12*s13^2 - 50*s13^3)*s23 +
              (48*s12^2 + 36*s12*s13 - 48*s13^2)*s23^2 - 46*s13*s23^3 -
              48*s23^4) + p1q^2*p2q*(60*s12^3*s13 - 50*s12^2*s13^2 -
              100*s12*s13^3 + 10*s13^4 + (-24*s12^3 + 52*s12^2*s13 -
                188*s12*s13^2 - 84*s13^3)*s23 + (120*s12^2 + 308*s12*s13 +
                54*s13^2)*s23^2 + (96*s12 + 100*s13)*s23^3 - 48*s23^4)) +
          p3q^3*(p2q^2*(10*s12^3*s13 - 40*s12^2*s13^2 - 30*s12*s13^3 +
              20*s13^4 + (-24*s12^3 + 60*s12^2*s13 + 12*s12*s13^2 + 8*s13^3)*
               s23 + (-24*s12^2 + 122*s12*s13 + 36*s13^2)*s23^2 +
              48*s13*s23^3) + p1q*p2q*(60*s12^3*s13 - 40*s12^2*s13^2 -
              100*s12*s13^3 + (-72*s12^3 + 12*s12^2*s13 - 120*s12*s13^2 -
                44*s13^3)*s23 + (24*s12^2 + 236*s12*s13 + 72*s13^2)*s23^2 +
              (96*s12 + 116*s13)*s23^3) + p1q^2*(70*s12^3*s13 +
              60*s12^2*s13^2 - 10*s12*s13^3 + (-24*s12^3 + 32*s12^2*s13 -
                44*s12*s13^2 - 20*s13^3)*s23 + (72*s12^2 + 118*s12*s13 +
                16*s13^2)*s23^2 + (72*s12 + 12*s13)*s23^3 - 24*s23^4)) +
          p3q*(p2q^4*(20*s12*s13^3 + 20*s13^4 + (-24*s12*s13^2 - 4*s13^3)*
               s23 - 24*s13^2*s23^2) + p1q*p2q^3*(-40*s12^2*s13^2 +
              20*s12*s13^3 + 60*s13^4 + (24*s12^2*s13 - 152*s12*s13^2 -
                76*s13^3)*s23 + (48*s12*s13 - 112*s13^2)*s23^2 +
              24*s13*s23^3) + p1q^3*p2q*(20*s12^3*s13 - 40*s12^2*s13^2 -
              40*s12*s13^3 + 20*s13^4 + (20*s12^2*s13 - 120*s12*s13^2 -
                40*s13^3)*s23 + (48*s12^2 + 116*s12*s13 + 8*s13^2)*s23^2 +
              (-24*s12 - 4*s13)*s23^3 - 72*s23^4) +
            p1q^4*(10*s12^3*s13 - 10*s12*s13^3 + (-8*s12^2*s13 -
                68*s12*s13^2 - 40*s13^3)*s23 + (-38*s12*s13 - 60*s13^2)*s23^
                2 + (-24*s12 - 44*s13)*s23^3 - 24*s23^4) +
            p1q^2*p2q^2*(10*s12^3*s13 - 80*s12^2*s13^2 - 50*s12*s13^3 +
              40*s13^4 + (64*s12^2*s13 - 172*s12*s13^2 - 96*s13^3)*s23 +
              (48*s12^2 + 242*s12*s13 + 4*s13^2)*s23^2 + (24*s12 + 116*s13)*
               s23^3 - 24*s23^4)))*Log((p1q + p3q)/(p1q + p2q + p3q)))/
        (-27*p1q^2*p2q^3*s13^3*s23 + p1q^4*p2q*(27*s12*s13^2*s23 +
           27*s13^2*s23^2) + p3q^5*(27*s12*s13^2*s23 + 27*s13^2*s23^2) +
         p1q^3*p2q^2*((27*s12*s13^2 - 27*s13^3)*s23 + 27*s13^2*s23^2) +
         p3q^4*(p2q*((54*s12*s13^2 - 27*s13^3)*s23 + 54*s13^2*s23^2) +
           p1q*(108*s12*s13^2*s23 + 108*s13^2*s23^2)) +
         p3q*(-54*p1q*p2q^3*s13^3*s23 + p1q^4*(27*s12*s13^2*s23 +
             27*s13^2*s23^2) + p1q^2*p2q^2*((81*s12*s13^2 - 108*s13^3)*s23 +
             81*s13^2*s23^2) + p1q^3*p2q*((135*s12*s13^2 - 27*s13^3)*s23 +
             135*s13^2*s23^2)) + p3q^3*(p2q^2*((27*s12*s13^2 - 54*s13^3)*
              s23 + 27*s13^2*s23^2) + p1q^2*(162*s12*s13^2*s23 +
             162*s13^2*s23^2) + p1q*p2q*((189*s12*s13^2 - 81*s13^3)*s23 +
             189*s13^2*s23^2)) + p3q^2*(-27*p2q^3*s13^3*s23 +
           p1q*p2q^2*((81*s12*s13^2 - 135*s13^3)*s23 + 81*s13^2*s23^2) +
           p1q^3*(108*s12*s13^2*s23 + 108*s13^2*s23^2) +
           p1q^2*p2q*((243*s12*s13^2 - 81*s13^3)*s23 + 243*s13^2*s23^2))) +
       ((p3q^5*(-24*s12^3*s13 - 24*s12^2*s13^2 + (20*s12^3 - 4*s12^2*s13 +
              12*s12*s13^2 + 12*s13^3)*s23 + (20*s12^2 + 12*s13^2)*s23^2) +
          p2q^5*((-10*s12^2*s13 - 20*s12*s13^2 - 10*s13^3)*s23 +
            (-20*s12*s13 - 20*s13^2)*s23^2 - 10*s13*s23^3) +
          p1q*p2q^4*(-24*s12*s13^3 - 24*s13^4 + (-8*s12^2*s13 - 8*s12*s13^2 -
              24*s13^3)*s23 + (-10*s12^2 - 28*s12*s13 - 10*s13^2)*s23^2 +
            10*s23^4) + p1q^4*p2q*((-24*s12*s13 - 24*s13^2)*s23^2 +
            (20*s12 - 4*s13)*s23^3 + 20*s23^4) + p1q^2*p2q^3*
           (-24*s12*s13^3 - 24*s13^4 + (14*s12^2*s13 + 60*s12*s13^2 +
              22*s13^3)*s23 + (-20*s12^2 - 36*s12*s13 + 16*s13^2)*s23^2 -
            10*s13*s23^3 + 20*s23^4) + p1q^3*p2q^2*
           ((24*s12^2*s13 + 72*s12*s13^2 + 48*s13^3)*s23 +
            (-10*s12^2 - 28*s12*s13 + 6*s13^2)*s23^2 + (20*s12 - 12*s13)*
             s23^3 + 30*s23^4) + p3q^4*(p2q*(-48*s12^3*s13 + 48*s12*s13^3 +
              (60*s12^3 + 4*s12^2*s13 + 76*s12*s13^2 + 36*s13^3)*s23 +
              (60*s12^2 - 8*s12*s13 + 36*s13^2)*s23^2) +
            p1q*(-48*s12^3*s13 - 48*s12^2*s13^2 + (20*s12^3 - 12*s12^2*s13 +
                52*s12*s13^2 + 36*s13^3)*s23 + (-20*s12^2 - 24*s12*s13 +
                36*s13^2)*s23^2 - 40*s12*s23^3)) +
          p3q^3*(p1q*p2q*(-72*s12^3*s13 + 24*s12^2*s13^2 + 96*s12*s13^3 +
              (60*s12^3 + 12*s12^2*s13 + 236*s12*s13^2 + 116*s13^3)*s23 +
              (-40*s12^2 - 120*s12*s13 + 72*s13^2)*s23^2 + (-100*s12 -
                44*s13)*s23^3) + p2q^2*(-24*s12^3*s13 + 72*s12^2*s13^2 +
              72*s12*s13^3 - 24*s13^4 + (70*s12^3 + 32*s12^2*s13 +
                118*s12*s13^2 + 12*s13^3)*s23 + (60*s12^2 - 44*s12*s13 +
                16*s13^2)*s23^2 + (-10*s12 - 20*s13)*s23^3) +
            p1q^2*(-24*s12^3*s13 - 24*s12^2*s13^2 + (10*s12^3 +
                60*s12^2*s13 + 122*s12*s13^2 + 48*s13^3)*s23 +
              (-40*s12^2 + 12*s12*s13 + 36*s13^2)*s23^2 + (-30*s12 + 8*s13)*
               s23^3 + 20*s23^4)) + p3q^2*(p2q^3*(48*s12^2*s13^2 - 48*s13^4 +
              (40*s12^3 + 26*s12^2*s13 + 36*s12*s13^2 - 46*s13^3)*s23 +
              (20*s12^2 - 84*s12*s13 - 48*s13^2)*s23^2 + (-20*s12 - 50*s13)*
               s23^3) + p1q*p2q^2*(-24*s12^3*s13 + 120*s12^2*s13^2 +
              96*s12*s13^3 - 48*s13^4 + (60*s12^3 + 52*s12^2*s13 +
                308*s12*s13^2 + 100*s13^3)*s23 + (-50*s12^2 - 188*s12*s13 +
                54*s13^2)*s23^2 + (-100*s12 - 84*s13)*s23^3 + 10*s23^4) +
            p1q^3*((48*s12^2*s13 + 72*s12*s13^2 + 24*s13^3)*s23 +
              (-30*s12^2 - 28*s12*s13 - 22*s13^2)*s23^2 - 16*s13*s23^3 +
              30*s23^4) + p1q^2*p2q*(-24*s12^3*s13 + 24*s12^2*s13^2 +
              48*s12*s13^3 + (20*s12^3 + 62*s12^2*s13 + 208*s12*s13^2 +
                94*s13^3)*s23 + (-100*s12^2 - 220*s12*s13 - 72*s13^2)*s23^2 +
              (-80*s12 - 126*s13)*s23^3 + 40*s23^4)) +
          p3q*(p2q^4*(-24*s12*s13^3 - 24*s13^4 + (10*s12^3 - 8*s12^2*s13 -
                38*s12*s13^2 - 44*s13^3)*s23 + (-68*s12*s13 - 60*s13^2)*s23^
                2 + (-10*s12 - 40*s13)*s23^3) + p1q*p2q^3*(48*s12^2*s13^2 -
              24*s12*s13^3 - 72*s13^4 + (20*s12^3 + 20*s12^2*s13 +
                116*s12*s13^2 - 4*s13^3)*s23 + (-40*s12^2 - 120*s12*s13 +
                8*s13^2)*s23^2 + (-40*s12 - 40*s13)*s23^3 + 20*s23^4) +
            p1q^4*((-24*s12*s13 - 24*s13^2)*s23^2 + (20*s12 - 4*s13)*s23^3 +
              20*s23^4) + p1q^2*p2q^2*(48*s12^2*s13^2 + 24*s12*s13^3 -
              24*s13^4 + (10*s12^3 + 64*s12^2*s13 + 242*s12*s13^2 +
                116*s13^3)*s23 + (-80*s12^2 - 172*s12*s13 + 4*s13^2)*s23^2 +
              (-50*s12 - 96*s13)*s23^3 + 40*s23^4) + p1q^3*p2q*
             ((24*s12^2*s13 + 48*s12*s13^2 + 24*s13^3)*s23 + (-40*s12^2 -
                152*s12*s13 - 112*s13^2)*s23^2 + (20*s12 - 76*s13)*s23^3 +
              60*s23^4)))*Log((p2q + p3q)/(p1q + p2q + p3q)))/
        (p1q*p2q^4*(27*s12*s13 + 27*s13^2)*s23^2 +
         p3q^5*(27*s12*s13 + 27*s13^2)*s23^2 - 27*p1q^3*p2q^2*s13*s23^3 +
         p1q^2*p2q^3*((27*s12*s13 + 27*s13^2)*s23^2 - 27*s13*s23^3) +
         p3q^2*(p2q^3*(108*s12*s13 + 108*s13^2)*s23^2 - 27*p1q^3*s13*s23^3 +
           p1q^2*p2q*((81*s12*s13 + 81*s13^2)*s23^2 - 135*s13*s23^3) +
           p1q*p2q^2*((243*s12*s13 + 243*s13^2)*s23^2 - 81*s13*s23^3)) +
         p3q^3*(p2q^2*(162*s12*s13 + 162*s13^2)*s23^2 +
           p1q*p2q*((189*s12*s13 + 189*s13^2)*s23^2 - 81*s13*s23^3) +
           p1q^2*((27*s12*s13 + 27*s13^2)*s23^2 - 54*s13*s23^3)) +
         p3q^4*(p2q*(108*s12*s13 + 108*s13^2)*s23^2 +
           p1q*((54*s12*s13 + 54*s13^2)*s23^2 - 27*s13*s23^3)) +
         p3q*(p2q^4*(27*s12*s13 + 27*s13^2)*s23^2 - 54*p1q^3*p2q*s13*s23^3 +
           p1q^2*p2q^2*((81*s12*s13 + 81*s13^2)*s23^2 - 108*s13*s23^3) +
           p1q*p2q^3*((135*s12*s13 + 135*s13^2)*s23^2 - 27*s13*s23^3))) +
       ((p1q*p2q^4*((20*s12*s13^2 + 20*s13^3)*s23 + (-24*s12*s13 - 4*s13^2)*
             s23^2 - 24*s13*s23^3) + p3q^5*(24*s12^2*s13^2 +
            (-40*s12^2*s13 + 12*s12*s13^2 - 12*s13^3)*s23 +
            (24*s12^2 + 12*s12*s13)*s23^2 - 12*s13*s23^3) +
          p1q^4*p2q*((-24*s12*s13^2 - 24*s13^3)*s23 + (20*s12*s13 - 4*s13^2)*
             s23^2 + 20*s13*s23^3) + p1q^2*p2q^3*(24*s13^4 +
            (28*s12*s13^2 + 12*s13^3)*s23 + (-4*s12*s13 - 32*s13^2)*s23^2 -
            20*s13*s23^3 + 24*s23^4) + p1q^3*p2q^2*(24*s13^4 +
            (-4*s12*s13^2 - 20*s13^3)*s23 + (28*s12*s13 - 32*s13^2)*s23^2 +
            12*s13*s23^3 + 24*s23^4) + p3q^4*
           (p1q*(72*s12^2*s13^2 + (-80*s12^2*s13 + 64*s12*s13^2 - 48*s13^3)*
               s23 + (24*s12^2 + 28*s12*s13 - 12*s13^2)*s23^2 +
              (-48*s12 - 36*s13)*s23^3) + p2q*(24*s12^2*s13^2 -
              48*s12*s13^3 + (-80*s12^2*s13 + 28*s12*s13^2 - 36*s13^3)*s23 +
              (72*s12^2 + 64*s12*s13 - 12*s13^2)*s23^2 - 48*s13*s23^3)) +
          p3q^3*(p1q*p2q*(48*s12^2*s13^2 - 144*s12*s13^3 + (-160*s12^2*s13 +
                24*s12*s13^2 - 184*s13^3)*s23 + (48*s12^2 + 24*s12*s13 -
                176*s13^2)*s23^2 + (-144*s12 - 184*s13)*s23^3) +
            p2q^2*(-48*s12*s13^3 + 24*s13^4 + (-60*s12^2*s13 + 24*s12*s13^2 -
                12*s13^3)*s23 + (72*s12^2 + 48*s12*s13 - 48*s13^2)*s23^2 -
              84*s13*s23^3) + p1q^2*(72*s12^2*s13^2 + (-60*s12^2*s13 +
                48*s12*s13^2 - 84*s13^3)*s23 + (24*s12*s13 - 48*s13^2)*s23^
                2 + (-48*s12 - 12*s13)*s23^3 + 24*s23^4)) +
          p3q*(p1q*p2q^3*(48*s13^4 + (-20*s12^2*s13 + 56*s12*s13^2 +
                44*s13^3)*s23 + (-80*s12*s13 - 96*s13^2)*s23^2 +
              (-48*s12 - 140*s13)*s23^3) + p2q^4*((20*s12*s13^2 + 20*s13^3)*
               s23 + (-24*s12*s13 - 4*s13^2)*s23^2 - 24*s13*s23^3) +
            p1q^4*((-24*s12*s13^2 - 24*s13^3)*s23 + (20*s12*s13 - 4*s13^2)*
               s23^2 + 20*s13*s23^3) + p1q^3*p2q*(-48*s12*s13^3 +
              (-20*s12^2*s13 - 80*s12*s13^2 - 140*s13^3)*s23 +
              (56*s12*s13 - 96*s13^2)*s23^2 + 44*s13*s23^3 + 48*s23^4) +
            p1q^2*p2q^2*(-48*s12*s13^3 + 72*s13^4 + (-40*s12^2*s13 +
                16*s12*s13^2 - 72*s13^3)*s23 + (16*s12*s13 - 168*s13^2)*s23^
                2 + (-48*s12 - 72*s13)*s23^3 + 72*s23^4)) +
          p3q^2*(p1q*p2q^2*(-96*s12*s13^3 + 72*s13^4 + (-100*s12^2*s13 +
                44*s12*s13^2 - 64*s13^3)*s23 + (24*s12^2 - 60*s12*s13 -
                232*s13^2)*s23^2 + (-144*s12 - 264*s13)*s23^3) +
            p2q^3*(24*s13^4 + (-20*s12^2*s13 + 28*s12*s13^2 + 32*s13^3)*s23 +
              (24*s12^2 - 28*s12*s13 - 40*s13^2)*s23^2 - 72*s13*s23^3) +
            p1q^3*(24*s12^2*s13^2 + (-20*s12^2*s13 - 28*s12*s13^2 - 72*s13^3)*
               s23 + (28*s12*s13 - 40*s13^2)*s23^2 + 32*s13*s23^3 +
              24*s23^4) + p1q^2*p2q*(24*s12^2*s13^2 - 144*s12*s13^3 +
              (-100*s12^2*s13 - 60*s12*s13^2 - 264*s13^3)*s23 +
              (44*s12*s13 - 232*s13^2)*s23^2 + (-96*s12 - 64*s13)*s23^3 +
              72*s23^4)))*Log(-s12 - s13 - s23))/
        (27*p1q^3*p2q^2*s13^2*s23^2 + 27*p1q^2*p2q^3*s13^2*s23^2 +
         27*p3q^5*s13^2*s23^2 + p3q^4*(81*p1q*s13^2*s23^2 +
           81*p2q*s13^2*s23^2) + p3q^3*(81*p1q^2*s13^2*s23^2 +
           216*p1q*p2q*s13^2*s23^2 + 81*p2q^2*s13^2*s23^2) +
         p3q^2*(27*p1q^3*s13^2*s23^2 + 189*p1q^2*p2q*s13^2*s23^2 +
           189*p1q*p2q^2*s13^2*s23^2 + 27*p2q^3*s13^2*s23^2) +
         p3q*(54*p1q^3*p2q*s13^2*s23^2 + 135*p1q^2*p2q^2*s13^2*s23^2 +
           54*p1q*p2q^3*s13^2*s23^2)) +
       ((p1q^4*p2q*((24*s12*s13^2 + 24*s13^3)*s23 + (-20*s12*s13 + 4*s13^2)*
             s23^2 - 20*s13*s23^3) + p3q^5*(-24*s12^2*s13^2 +
            (40*s12^2*s13 - 12*s12*s13^2 + 12*s13^3)*s23 +
            (-24*s12^2 - 12*s12*s13)*s23^2 + 12*s13*s23^3) +
          p1q*p2q^4*((-20*s12*s13^2 - 20*s13^3)*s23 + (24*s12*s13 + 4*s13^2)*
             s23^2 + 24*s13*s23^3) + p1q^3*p2q^2*(-24*s13^4 +
            (4*s12*s13^2 + 20*s13^3)*s23 + (-28*s12*s13 + 32*s13^2)*s23^2 -
            12*s13*s23^3 - 24*s23^4) + p1q^2*p2q^3*(-24*s13^4 +
            (-28*s12*s13^2 - 12*s13^3)*s23 + (4*s12*s13 + 32*s13^2)*s23^2 +
            20*s13*s23^3 - 24*s23^4) + p3q^4*
           (p2q*(-24*s12^2*s13^2 + 48*s12*s13^3 + (80*s12^2*s13 -
                28*s12*s13^2 + 36*s13^3)*s23 + (-72*s12^2 - 64*s12*s13 +
                12*s13^2)*s23^2 + 48*s13*s23^3) + p1q*(-72*s12^2*s13^2 +
              (80*s12^2*s13 - 64*s12*s13^2 + 48*s13^3)*s23 + (-24*s12^2 -
                28*s12*s13 + 12*s13^2)*s23^2 + (48*s12 + 36*s13)*s23^3)) +
          p3q*(p1q^4*((24*s12*s13^2 + 24*s13^3)*s23 + (-20*s12*s13 + 4*s13^2)*
               s23^2 - 20*s13*s23^3) + p2q^4*((-20*s12*s13^2 - 20*s13^3)*
               s23 + (24*s12*s13 + 4*s13^2)*s23^2 + 24*s13*s23^3) +
            p1q*p2q^3*(-48*s13^4 + (20*s12^2*s13 - 56*s12*s13^2 - 44*s13^3)*
               s23 + (80*s12*s13 + 96*s13^2)*s23^2 + (48*s12 + 140*s13)*s23^
                3) + p1q^2*p2q^2*(48*s12*s13^3 - 72*s13^4 + (40*s12^2*s13 -
                16*s12*s13^2 + 72*s13^3)*s23 + (-16*s12*s13 + 168*s13^2)*s23^
                2 + (48*s12 + 72*s13)*s23^3 - 72*s23^4) +
            p1q^3*p2q*(48*s12*s13^3 + (20*s12^2*s13 + 80*s12*s13^2 +
                140*s13^3)*s23 + (-56*s12*s13 + 96*s13^2)*s23^2 -
              44*s13*s23^3 - 48*s23^4)) +
          p3q^2*(p2q^3*(-24*s13^4 + (20*s12^2*s13 - 28*s12*s13^2 - 32*s13^3)*
               s23 + (-24*s12^2 + 28*s12*s13 + 40*s13^2)*s23^2 +
              72*s13*s23^3) + p1q*p2q^2*(96*s12*s13^3 - 72*s13^4 +
              (100*s12^2*s13 - 44*s12*s13^2 + 64*s13^3)*s23 +
              (-24*s12^2 + 60*s12*s13 + 232*s13^2)*s23^2 + (144*s12 +
                264*s13)*s23^3) + p1q^2*p2q*(-24*s12^2*s13^2 +
              144*s12*s13^3 + (100*s12^2*s13 + 60*s12*s13^2 + 264*s13^3)*
               s23 + (-44*s12*s13 + 232*s13^2)*s23^2 + (96*s12 + 64*s13)*s23^
                3 - 72*s23^4) + p1q^3*(-24*s12^2*s13^2 + (20*s12^2*s13 +
                28*s12*s13^2 + 72*s13^3)*s23 + (-28*s12*s13 + 40*s13^2)*s23^
                2 - 32*s13*s23^3 - 24*s23^4)) +
          p3q^3*(p2q^2*(48*s12*s13^3 - 24*s13^4 + (60*s12^2*s13 -
                24*s12*s13^2 + 12*s13^3)*s23 + (-72*s12^2 - 48*s12*s13 +
                48*s13^2)*s23^2 + 84*s13*s23^3) + p1q*p2q*(-48*s12^2*s13^2 +
              144*s12*s13^3 + (160*s12^2*s13 - 24*s12*s13^2 + 184*s13^3)*
               s23 + (-48*s12^2 - 24*s12*s13 + 176*s13^2)*s23^2 +
              (144*s12 + 184*s13)*s23^3) + p1q^2*(-72*s12^2*s13^2 +
              (60*s12^2*s13 - 48*s12*s13^2 + 84*s13^3)*s23 + (-24*s12*s13 +
                48*s13^2)*s23^2 + (48*s12 + 12*s13)*s23^3 - 24*s23^4)))*
         Log(s12/(s12 + s13 + s23)))/(27*p1q^3*p2q^2*s13^2*s23^2 +
         27*p1q^2*p2q^3*s13^2*s23^2 + 27*p3q^5*s13^2*s23^2 +
         p3q^4*(81*p1q*s13^2*s23^2 + 81*p2q*s13^2*s23^2) +
         p3q^3*(81*p1q^2*s13^2*s23^2 + 216*p1q*p2q*s13^2*s23^2 +
           81*p2q^2*s13^2*s23^2) + p3q^2*(27*p1q^3*s13^2*s23^2 +
           189*p1q^2*p2q*s13^2*s23^2 + 189*p1q*p2q^2*s13^2*s23^2 +
           27*p2q^3*s13^2*s23^2) + p3q*(54*p1q^3*p2q*s13^2*s23^2 +
           135*p1q^2*p2q^2*s13^2*s23^2 + 54*p1q*p2q^3*s13^2*s23^2)) +
       ((p1q*p2q^4*(-20*s12*s13^3 - 20*s13^4 + (24*s12*s13^2 + 4*s13^3)*s23 +
            24*s13^2*s23^2) + p1q^2*p2q^3*(10*s12^2*s13^2 - 20*s12*s13^3 -
            30*s13^4 + (-24*s12^2*s13 + 28*s12*s13^2 + 12*s13^3)*s23 +
            (-72*s12*s13 - 6*s13^2)*s23^2 - 48*s13*s23^3) +
          p3q^5*(-20*s12^3*s13 - 20*s12^2*s13^2 + (24*s12^3 + 4*s12^2*s13)*
             s23 + (24*s12^2 - 12*s12*s13 - 12*s13^2)*s23^2 - 12*s13*s23^3) +
          p1q^5*((10*s12^2*s13 + 20*s12*s13^2 + 10*s13^3)*s23 +
            (20*s12*s13 + 20*s13^2)*s23^2 + 10*s13*s23^3) +
          p1q^3*p2q^2*(20*s12^2*s13^2 - 20*s13^4 +
            (-14*s12^2*s13 + 36*s12*s13^2 + 10*s13^3)*s23 +
            (-60*s12*s13 - 16*s13^2)*s23^2 + (24*s12 - 22*s13)*s23^3 +
            24*s23^4) + p1q^4*p2q*(10*s12^2*s13^2 - 10*s13^4 +
            (8*s12^2*s13 + 28*s12*s13^2)*s23 + (8*s12*s13 + 10*s13^2)*s23^2 +
            (24*s12 + 24*s13)*s23^3 + 24*s23^4) +
          p3q^4*(p1q*(-60*s12^3*s13 - 60*s12^2*s13^2 + (48*s12^3 -
                4*s12^2*s13 + 8*s12*s13^2)*s23 + (-76*s12*s13 - 36*s13^2)*s23^
                2 + (-48*s12 - 36*s13)*s23^3) + p2q*(-20*s12^3*s13 +
              20*s12^2*s13^2 + 40*s12*s13^3 + (48*s12^3 + 12*s12^2*s13 +
                24*s12*s13^2)*s23 + (48*s12^2 - 52*s12*s13 - 36*s13^2)*s23^
                2 - 36*s13*s23^3)) + p3q^3*(p1q*p2q*(-60*s12^3*s13 +
              40*s12^2*s13^2 + 100*s12*s13^3 + (72*s12^3 - 12*s12^2*s13 +
                120*s12*s13^2 + 44*s13^3)*s23 + (-24*s12^2 - 236*s12*s13 -
                72*s13^2)*s23^2 + (-96*s12 - 116*s13)*s23^3) +
            p2q^2*(-10*s12^3*s13 + 40*s12^2*s13^2 + 30*s12*s13^3 - 20*s13^4 +
              (24*s12^3 - 60*s12^2*s13 - 12*s12*s13^2 - 8*s13^3)*s23 +
              (24*s12^2 - 122*s12*s13 - 36*s13^2)*s23^2 - 48*s13*s23^3) +
            p1q^2*(-70*s12^3*s13 - 60*s12^2*s13^2 + 10*s12*s13^3 +
              (24*s12^3 - 32*s12^2*s13 + 44*s12*s13^2 + 20*s13^3)*s23 +
              (-72*s12^2 - 118*s12*s13 - 16*s13^2)*s23^2 + (-72*s12 - 12*s13)*
               s23^3 + 24*s23^4)) + p3q^2*(p1q*p2q^2*(-20*s12^3*s13 +
              100*s12^2*s13^2 + 80*s12*s13^3 - 40*s13^4 + (24*s12^3 -
                62*s12^2*s13 + 220*s12*s13^2 + 126*s13^3)*s23 +
              (-24*s12^2 - 208*s12*s13 + 72*s13^2)*s23^2 + (-48*s12 - 94*s13)*
               s23^3) + p2q^3*(30*s12^2*s13^2 - 30*s13^4 + (-48*s12^2*s13 +
                28*s12*s13^2 + 16*s13^3)*s23 + (-72*s12*s13 + 22*s13^2)*s23^
                2 - 24*s13*s23^3) + p1q^2*p2q*(-60*s12^3*s13 +
              50*s12^2*s13^2 + 100*s12*s13^3 - 10*s13^4 + (24*s12^3 -
                52*s12^2*s13 + 188*s12*s13^2 + 84*s13^3)*s23 +
              (-120*s12^2 - 308*s12*s13 - 54*s13^2)*s23^2 + (-96*s12 -
                100*s13)*s23^3 + 48*s23^4) + p1q^3*(-40*s12^3*s13 -
              20*s12^2*s13^2 + 20*s12*s13^3 + (-26*s12^2*s13 + 84*s12*s13^2 +
                50*s13^3)*s23 + (-48*s12^2 - 36*s12*s13 + 48*s13^2)*s23^2 +
              46*s13*s23^3 + 48*s23^4)) +
          p3q*(p2q^4*(-20*s12*s13^3 - 20*s13^4 + (24*s12*s13^2 + 4*s13^3)*
               s23 + 24*s13^2*s23^2) + p1q*p2q^3*(40*s12^2*s13^2 -
              20*s12*s13^3 - 60*s13^4 + (-24*s12^2*s13 + 152*s12*s13^2 +
                76*s13^3)*s23 + (-48*s12*s13 + 112*s13^2)*s23^2 -
              24*s13*s23^3) + p1q^2*p2q^2*(-10*s12^3*s13 + 80*s12^2*s13^2 +
              50*s12*s13^3 - 40*s13^4 + (-64*s12^2*s13 + 172*s12*s13^2 +
                96*s13^3)*s23 + (-48*s12^2 - 242*s12*s13 - 4*s13^2)*s23^2 +
              (-24*s12 - 116*s13)*s23^3 + 24*s23^4) +
            p1q^4*(-10*s12^3*s13 + 10*s12*s13^3 + (8*s12^2*s13 +
                68*s12*s13^2 + 40*s13^3)*s23 + (38*s12*s13 + 60*s13^2)*s23^
                2 + (24*s12 + 44*s13)*s23^3 + 24*s23^4) +
            p1q^3*p2q*(-20*s12^3*s13 + 40*s12^2*s13^2 + 40*s12*s13^3 -
              20*s13^4 + (-20*s12^2*s13 + 120*s12*s13^2 + 40*s13^3)*s23 +
              (-48*s12^2 - 116*s12*s13 - 8*s13^2)*s23^2 + (24*s12 + 4*s13)*
               s23^3 + 72*s23^4)))*Log(s13/(s12 + s13 + s23)))/
        (-27*p1q^2*p2q^3*s13^3*s23 + p1q^4*p2q*(27*s12*s13^2*s23 +
           27*s13^2*s23^2) + p3q^5*(27*s12*s13^2*s23 + 27*s13^2*s23^2) +
         p1q^3*p2q^2*((27*s12*s13^2 - 27*s13^3)*s23 + 27*s13^2*s23^2) +
         p3q^4*(p2q*((54*s12*s13^2 - 27*s13^3)*s23 + 54*s13^2*s23^2) +
           p1q*(108*s12*s13^2*s23 + 108*s13^2*s23^2)) +
         p3q*(-54*p1q*p2q^3*s13^3*s23 + p1q^4*(27*s12*s13^2*s23 +
             27*s13^2*s23^2) + p1q^2*p2q^2*((81*s12*s13^2 - 108*s13^3)*s23 +
             81*s13^2*s23^2) + p1q^3*p2q*((135*s12*s13^2 - 27*s13^3)*s23 +
             135*s13^2*s23^2)) + p3q^3*(p2q^2*((27*s12*s13^2 - 54*s13^3)*
              s23 + 27*s13^2*s23^2) + p1q^2*(162*s12*s13^2*s23 +
             162*s13^2*s23^2) + p1q*p2q*((189*s12*s13^2 - 81*s13^3)*s23 +
             189*s13^2*s23^2)) + p3q^2*(-27*p2q^3*s13^3*s23 +
           p1q*p2q^2*((81*s12*s13^2 - 135*s13^3)*s23 + 81*s13^2*s23^2) +
           p1q^3*(108*s12*s13^2*s23 + 108*s13^2*s23^2) +
           p1q^2*p2q*((243*s12*s13^2 - 81*s13^3)*s23 + 243*s13^2*s23^2))) +
       ((p3q^5*(24*s12^3*s13 + 24*s12^2*s13^2 + (-20*s12^3 + 4*s12^2*s13 -
              12*s12*s13^2 - 12*s13^3)*s23 + (-20*s12^2 - 12*s13^2)*s23^2) +
          p2q^5*((10*s12^2*s13 + 20*s12*s13^2 + 10*s13^3)*s23 +
            (20*s12*s13 + 20*s13^2)*s23^2 + 10*s13*s23^3) +
          p1q^3*p2q^2*((-24*s12^2*s13 - 72*s12*s13^2 - 48*s13^3)*s23 +
            (10*s12^2 + 28*s12*s13 - 6*s13^2)*s23^2 + (-20*s12 + 12*s13)*
             s23^3 - 30*s23^4) + p1q^2*p2q^3*(24*s12*s13^3 + 24*s13^4 +
            (-14*s12^2*s13 - 60*s12*s13^2 - 22*s13^3)*s23 +
            (20*s12^2 + 36*s12*s13 - 16*s13^2)*s23^2 + 10*s13*s23^3 -
            20*s23^4) + p1q^4*p2q*((24*s12*s13 + 24*s13^2)*s23^2 +
            (-20*s12 + 4*s13)*s23^3 - 20*s23^4) + p1q*p2q^4*
           (24*s12*s13^3 + 24*s13^4 + (8*s12^2*s13 + 8*s12*s13^2 + 24*s13^3)*
             s23 + (10*s12^2 + 28*s12*s13 + 10*s13^2)*s23^2 - 10*s23^4) +
          p3q^4*(p2q*(48*s12^3*s13 - 48*s12*s13^3 + (-60*s12^3 -
                4*s12^2*s13 - 76*s12*s13^2 - 36*s13^3)*s23 + (-60*s12^2 +
                8*s12*s13 - 36*s13^2)*s23^2) + p1q*(48*s12^3*s13 +
              48*s12^2*s13^2 + (-20*s12^3 + 12*s12^2*s13 - 52*s12*s13^2 -
                36*s13^3)*s23 + (20*s12^2 + 24*s12*s13 - 36*s13^2)*s23^2 +
              40*s12*s23^3)) + p3q^3*(p2q^2*(24*s12^3*s13 - 72*s12^2*s13^2 -
              72*s12*s13^3 + 24*s13^4 + (-70*s12^3 - 32*s12^2*s13 -
                118*s12*s13^2 - 12*s13^3)*s23 + (-60*s12^2 + 44*s12*s13 -
                16*s13^2)*s23^2 + (10*s12 + 20*s13)*s23^3) +
            p1q*p2q*(72*s12^3*s13 - 24*s12^2*s13^2 - 96*s12*s13^3 +
              (-60*s12^3 - 12*s12^2*s13 - 236*s12*s13^2 - 116*s13^3)*s23 +
              (40*s12^2 + 120*s12*s13 - 72*s13^2)*s23^2 + (100*s12 + 44*s13)*
               s23^3) + p1q^2*(24*s12^3*s13 + 24*s12^2*s13^2 +
              (-10*s12^3 - 60*s12^2*s13 - 122*s12*s13^2 - 48*s13^3)*s23 +
              (40*s12^2 - 12*s12*s13 - 36*s13^2)*s23^2 + (30*s12 - 8*s13)*s23^
                3 - 20*s23^4)) + p3q*(p2q^4*(24*s12*s13^3 + 24*s13^4 +
              (-10*s12^3 + 8*s12^2*s13 + 38*s12*s13^2 + 44*s13^3)*s23 +
              (68*s12*s13 + 60*s13^2)*s23^2 + (10*s12 + 40*s13)*s23^3) +
            p1q^3*p2q*((-24*s12^2*s13 - 48*s12*s13^2 - 24*s13^3)*s23 +
              (40*s12^2 + 152*s12*s13 + 112*s13^2)*s23^2 + (-20*s12 + 76*s13)*
               s23^3 - 60*s23^4) + p1q^2*p2q^2*(-48*s12^2*s13^2 -
              24*s12*s13^3 + 24*s13^4 + (-10*s12^3 - 64*s12^2*s13 -
                242*s12*s13^2 - 116*s13^3)*s23 + (80*s12^2 + 172*s12*s13 -
                4*s13^2)*s23^2 + (50*s12 + 96*s13)*s23^3 - 40*s23^4) +
            p1q^4*((24*s12*s13 + 24*s13^2)*s23^2 + (-20*s12 + 4*s13)*s23^3 -
              20*s23^4) + p1q*p2q^3*(-48*s12^2*s13^2 + 24*s12*s13^3 +
              72*s13^4 + (-20*s12^3 - 20*s12^2*s13 - 116*s12*s13^2 + 4*s13^3)*
               s23 + (40*s12^2 + 120*s12*s13 - 8*s13^2)*s23^2 +
              (40*s12 + 40*s13)*s23^3 - 20*s23^4)) +
          p3q^2*(p2q^3*(-48*s12^2*s13^2 + 48*s13^4 + (-40*s12^3 -
                26*s12^2*s13 - 36*s12*s13^2 + 46*s13^3)*s23 +
              (-20*s12^2 + 84*s12*s13 + 48*s13^2)*s23^2 + (20*s12 + 50*s13)*
               s23^3) + p1q^2*p2q*(24*s12^3*s13 - 24*s12^2*s13^2 -
              48*s12*s13^3 + (-20*s12^3 - 62*s12^2*s13 - 208*s12*s13^2 -
                94*s13^3)*s23 + (100*s12^2 + 220*s12*s13 + 72*s13^2)*s23^2 +
              (80*s12 + 126*s13)*s23^3 - 40*s23^4) +
            p1q^3*((-48*s12^2*s13 - 72*s12*s13^2 - 24*s13^3)*s23 +
              (30*s12^2 + 28*s12*s13 + 22*s13^2)*s23^2 + 16*s13*s23^3 -
              30*s23^4) + p1q*p2q^2*(24*s12^3*s13 - 120*s12^2*s13^2 -
              96*s12*s13^3 + 48*s13^4 + (-60*s12^3 - 52*s12^2*s13 -
                308*s12*s13^2 - 100*s13^3)*s23 + (50*s12^2 + 188*s12*s13 -
                54*s13^2)*s23^2 + (100*s12 + 84*s13)*s23^3 - 10*s23^4)))*
         Log(s23/(s12 + s13 + s23)))/(p1q*p2q^4*(27*s12*s13 + 27*s13^2)*
          s23^2 + p3q^5*(27*s12*s13 + 27*s13^2)*s23^2 - 27*p1q^3*p2q^2*s13*
          s23^3 + p1q^2*p2q^3*((27*s12*s13 + 27*s13^2)*s23^2 -
           27*s13*s23^3) + p3q^2*(p2q^3*(108*s12*s13 + 108*s13^2)*s23^2 -
           27*p1q^3*s13*s23^3 + p1q^2*p2q*((81*s12*s13 + 81*s13^2)*s23^2 -
             135*s13*s23^3) + p1q*p2q^2*((243*s12*s13 + 243*s13^2)*s23^2 -
             81*s13*s23^3)) + p3q^3*(p2q^2*(162*s12*s13 + 162*s13^2)*s23^2 +
           p1q*p2q*((189*s12*s13 + 189*s13^2)*s23^2 - 81*s13*s23^3) +
           p1q^2*((27*s12*s13 + 27*s13^2)*s23^2 - 54*s13*s23^3)) +
         p3q^4*(p2q*(108*s12*s13 + 108*s13^2)*s23^2 +
           p1q*((54*s12*s13 + 54*s13^2)*s23^2 - 27*s13*s23^3)) +
         p3q*(p2q^4*(27*s12*s13 + 27*s13^2)*s23^2 - 54*p1q^3*p2q*s13*s23^3 +
           p1q^2*p2q^2*((81*s12*s13 + 81*s13^2)*s23^2 - 108*s13*s23^3) +
           p1q*p2q^3*((135*s12*s13 + 135*s13^2)*s23^2 - 27*s13*s23^3)))) +
     Log((p2q + p3q)/(p1q + p2q + p3q))*
      (((p3q^5*(24*s12^3*s13 + 24*s12^2*s13^2 + (-20*s12^3 + 4*s12^2*s13 -
              12*s12*s13^2 - 12*s13^3)*s23 + (-20*s12^2 - 12*s13^2)*s23^2) +
          p2q^5*((10*s12^2*s13 + 20*s12*s13^2 + 10*s13^3)*s23 +
            (20*s12*s13 + 20*s13^2)*s23^2 + 10*s13*s23^3) +
          p1q^3*p2q^2*((-24*s12^2*s13 - 72*s12*s13^2 - 48*s13^3)*s23 +
            (10*s12^2 + 28*s12*s13 - 6*s13^2)*s23^2 + (-20*s12 + 12*s13)*
             s23^3 - 30*s23^4) + p1q^2*p2q^3*(24*s12*s13^3 + 24*s13^4 +
            (-14*s12^2*s13 - 60*s12*s13^2 - 22*s13^3)*s23 +
            (20*s12^2 + 36*s12*s13 - 16*s13^2)*s23^2 + 10*s13*s23^3 -
            20*s23^4) + p1q^4*p2q*((24*s12*s13 + 24*s13^2)*s23^2 +
            (-20*s12 + 4*s13)*s23^3 - 20*s23^4) + p1q*p2q^4*
           (24*s12*s13^3 + 24*s13^4 + (8*s12^2*s13 + 8*s12*s13^2 + 24*s13^3)*
             s23 + (10*s12^2 + 28*s12*s13 + 10*s13^2)*s23^2 - 10*s23^4) +
          p3q^4*(p2q*(48*s12^3*s13 - 48*s12*s13^3 + (-60*s12^3 -
                4*s12^2*s13 - 76*s12*s13^2 - 36*s13^3)*s23 + (-60*s12^2 +
                8*s12*s13 - 36*s13^2)*s23^2) + p1q*(48*s12^3*s13 +
              48*s12^2*s13^2 + (-20*s12^3 + 12*s12^2*s13 - 52*s12*s13^2 -
                36*s13^3)*s23 + (20*s12^2 + 24*s12*s13 - 36*s13^2)*s23^2 +
              40*s12*s23^3)) + p3q^3*(p2q^2*(24*s12^3*s13 - 72*s12^2*s13^2 -
              72*s12*s13^3 + 24*s13^4 + (-70*s12^3 - 32*s12^2*s13 -
                118*s12*s13^2 - 12*s13^3)*s23 + (-60*s12^2 + 44*s12*s13 -
                16*s13^2)*s23^2 + (10*s12 + 20*s13)*s23^3) +
            p1q*p2q*(72*s12^3*s13 - 24*s12^2*s13^2 - 96*s12*s13^3 +
              (-60*s12^3 - 12*s12^2*s13 - 236*s12*s13^2 - 116*s13^3)*s23 +
              (40*s12^2 + 120*s12*s13 - 72*s13^2)*s23^2 + (100*s12 + 44*s13)*
               s23^3) + p1q^2*(24*s12^3*s13 + 24*s12^2*s13^2 +
              (-10*s12^3 - 60*s12^2*s13 - 122*s12*s13^2 - 48*s13^3)*s23 +
              (40*s12^2 - 12*s12*s13 - 36*s13^2)*s23^2 + (30*s12 - 8*s13)*s23^
                3 - 20*s23^4)) + p3q*(p2q^4*(24*s12*s13^3 + 24*s13^4 +
              (-10*s12^3 + 8*s12^2*s13 + 38*s12*s13^2 + 44*s13^3)*s23 +
              (68*s12*s13 + 60*s13^2)*s23^2 + (10*s12 + 40*s13)*s23^3) +
            p1q^3*p2q*((-24*s12^2*s13 - 48*s12*s13^2 - 24*s13^3)*s23 +
              (40*s12^2 + 152*s12*s13 + 112*s13^2)*s23^2 + (-20*s12 + 76*s13)*
               s23^3 - 60*s23^4) + p1q^2*p2q^2*(-48*s12^2*s13^2 -
              24*s12*s13^3 + 24*s13^4 + (-10*s12^3 - 64*s12^2*s13 -
                242*s12*s13^2 - 116*s13^3)*s23 + (80*s12^2 + 172*s12*s13 -
                4*s13^2)*s23^2 + (50*s12 + 96*s13)*s23^3 - 40*s23^4) +
            p1q^4*((24*s12*s13 + 24*s13^2)*s23^2 + (-20*s12 + 4*s13)*s23^3 -
              20*s23^4) + p1q*p2q^3*(-48*s12^2*s13^2 + 24*s12*s13^3 +
              72*s13^4 + (-20*s12^3 - 20*s12^2*s13 - 116*s12*s13^2 + 4*s13^3)*
               s23 + (40*s12^2 + 120*s12*s13 - 8*s13^2)*s23^2 +
              (40*s12 + 40*s13)*s23^3 - 20*s23^4)) +
          p3q^2*(p2q^3*(-48*s12^2*s13^2 + 48*s13^4 + (-40*s12^3 -
                26*s12^2*s13 - 36*s12*s13^2 + 46*s13^3)*s23 +
              (-20*s12^2 + 84*s12*s13 + 48*s13^2)*s23^2 + (20*s12 + 50*s13)*
               s23^3) + p1q^2*p2q*(24*s12^3*s13 - 24*s12^2*s13^2 -
              48*s12*s13^3 + (-20*s12^3 - 62*s12^2*s13 - 208*s12*s13^2 -
                94*s13^3)*s23 + (100*s12^2 + 220*s12*s13 + 72*s13^2)*s23^2 +
              (80*s12 + 126*s13)*s23^3 - 40*s23^4) +
            p1q^3*((-48*s12^2*s13 - 72*s12*s13^2 - 24*s13^3)*s23 +
              (30*s12^2 + 28*s12*s13 + 22*s13^2)*s23^2 + 16*s13*s23^3 -
              30*s23^4) + p1q*p2q^2*(24*s12^3*s13 - 120*s12^2*s13^2 -
              96*s12*s13^3 + 48*s13^4 + (-60*s12^3 - 52*s12^2*s13 -
                308*s12*s13^2 - 100*s13^3)*s23 + (50*s12^2 + 188*s12*s13 -
                54*s13^2)*s23^2 + (100*s12 + 84*s13)*s23^3 - 10*s23^4)))*
         Log(s12/(s12 + s13 + s23)))/(p1q*p2q^4*(27*s12*s13 + 27*s13^2)*
          s23^2 + p3q^5*(27*s12*s13 + 27*s13^2)*s23^2 - 27*p1q^3*p2q^2*s13*
          s23^3 + p1q^2*p2q^3*((27*s12*s13 + 27*s13^2)*s23^2 -
           27*s13*s23^3) + p3q^2*(p2q^3*(108*s12*s13 + 108*s13^2)*s23^2 -
           27*p1q^3*s13*s23^3 + p1q^2*p2q*((81*s12*s13 + 81*s13^2)*s23^2 -
             135*s13*s23^3) + p1q*p2q^2*((243*s12*s13 + 243*s13^2)*s23^2 -
             81*s13*s23^3)) + p3q^3*(p2q^2*(162*s12*s13 + 162*s13^2)*s23^2 +
           p1q*p2q*((189*s12*s13 + 189*s13^2)*s23^2 - 81*s13*s23^3) +
           p1q^2*((27*s12*s13 + 27*s13^2)*s23^2 - 54*s13*s23^3)) +
         p3q^4*(p2q*(108*s12*s13 + 108*s13^2)*s23^2 +
           p1q*((54*s12*s13 + 54*s13^2)*s23^2 - 27*s13*s23^3)) +
         p3q*(p2q^4*(27*s12*s13 + 27*s13^2)*s23^2 - 54*p1q^3*p2q*s13*s23^3 +
           p1q^2*p2q^2*((81*s12*s13 + 81*s13^2)*s23^2 - 108*s13*s23^3) +
           p1q*p2q^3*((135*s12*s13 + 135*s13^2)*s23^2 - 27*s13*s23^3))) +
       ((p3q^5*(84*s12^3*s13 + 84*s12^2*s13^2 + (2*s12^3 + 86*s12^2*s13 -
              42*s12*s13^2 - 42*s13^3)*s23 + (2*s12^2 - 42*s13^2)*s23^2) +
          p2q^5*((-(s12^2*s13) - 2*s12*s13^2 - s13^3)*s23 +
            (-2*s12*s13 - 2*s13^2)*s23^2 - s13*s23^3) +
          p1q*p2q^4*(84*s12*s13^3 + 84*s13^4 + (-44*s12^2*s13 -
              44*s12*s13^2 + 84*s13^3)*s23 + (-s12^2 - 46*s12*s13 - s13^2)*
             s23^2 + s23^4) + p1q^2*p2q^3*(84*s12*s13^3 + 84*s13^4 +
            (-85*s12^2*s13 - 210*s12*s13^2 - 41*s13^3)*s23 +
            (-2*s12^2 - 90*s12*s13 - 128*s13^2)*s23^2 - s13*s23^3 +
            2*s23^4) + p1q^4*p2q*((84*s12*s13 + 84*s13^2)*s23^2 +
            (2*s12 + 86*s13)*s23^3 + 2*s23^4) + p1q^3*p2q^2*
           ((-84*s12^2*s13 - 252*s12*s13^2 - 168*s13^3)*s23 +
            (-s12^2 - 46*s12*s13 - 129*s13^2)*s23^2 + (2*s12 + 42*s13)*
             s23^3 + 3*s23^4) + p3q^4*(p2q*(168*s12^3*s13 - 168*s12*s13^3 +
              (6*s12^3 + 130*s12^2*s13 - 338*s12*s13^2 - 126*s13^3)*s23 +
              (6*s12^2 - 44*s12*s13 - 126*s13^2)*s23^2) +
            p1q*(168*s12^3*s13 + 168*s12^2*s13^2 + (2*s12^3 + 42*s12^2*s13 -
                254*s12*s13^2 - 126*s13^3)*s23 + (-2*s12^2 - 132*s12*s13 -
                126*s13^2)*s23^2 - 4*s12*s23^3)) +
          p3q^3*(p2q^2*(84*s12^3*s13 - 252*s12^2*s13^2 - 252*s12*s13^3 +
              84*s13^4 + (7*s12^3 - 40*s12^2*s13 - 593*s12*s13^2 - 42*s13^3)*
               s23 + (6*s12^2 - 134*s12*s13 - 128*s13^2)*s23^2 +
              (-s12 - 2*s13)*s23^3) + p1q*p2q*(252*s12^3*s13 -
              84*s12^2*s13^2 - 336*s12*s13^3 + (6*s12^3 - 42*s12^2*s13 -
                970*s12*s13^2 - 334*s13^3)*s23 + (-4*s12^2 - 228*s12*s13 -
                252*s13^2)*s23^2 + (-10*s12 + 82*s13)*s23^3) +
            p1q^2*(84*s12^3*s13 + 84*s12^2*s13^2 + (s12^3 - 210*s12^2*s13 -
                463*s12*s13^2 - 168*s13^3)*s23 + (-4*s12^2 - 258*s12*s13 -
                126*s13^2)*s23^2 + (-3*s12 + 44*s13)*s23^3 + 2*s23^4)) +
          p3q^2*(p2q^3*(-168*s12^2*s13^2 + 168*s13^4 + (4*s12^3 -
                127*s12^2*s13 - 342*s12*s13^2 + 125*s13^3)*s23 +
              (2*s12^2 - 138*s12*s13 - 48*s13^2)*s23^2 + (-2*s12 - 5*s13)*s23^
                3) + p1q*p2q^2*(84*s12^3*s13 - 420*s12^2*s13^2 -
              336*s12*s13^3 + 168*s13^4 + (6*s12^3 - 254*s12^2*s13 -
                1222*s12*s13^2 - 206*s13^3)*s23 + (-5*s12^2 - 278*s12*s13 -
                297*s13^2)*s23^2 + (-10*s12 + 78*s13)*s23^3 + s23^4) +
            p1q^3*((-168*s12^2*s13 - 252*s12*s13^2 - 84*s13^3)*s23 +
              (-3*s12^2 - 46*s12*s13 + 41*s13^2)*s23^2 + 128*s13*s23^3 +
              3*s23^4) + p1q^2*p2q*(84*s12^3*s13 - 84*s12^2*s13^2 -
              168*s12*s13^3 + (2*s12^3 - 253*s12^2*s13 - 800*s12*s13^2 -
                293*s13^3)*s23 + (-10*s12^2 - 22*s12*s13 + 36*s13^2)*s23^2 +
              (-8*s12 + 333*s13)*s23^3 + 4*s23^4)) +
          p3q*(p2q^4*(84*s12*s13^3 + 84*s13^4 + (s12^3 - 44*s12^2*s13 -
                47*s12*s13^2 + 82*s13^3)*s23 + (-50*s12*s13 - 6*s13^2)*s23^
                2 + (-s12 - 4*s13)*s23^3) + p1q*p2q^3*(-168*s12^2*s13^2 +
              84*s12*s13^3 + 252*s13^4 + (2*s12^3 - 214*s12^2*s13 -
                550*s12*s13^2 + 86*s13^3)*s23 + (-4*s12^2 - 228*s12*s13 -
                172*s13^2)*s23^2 + (-4*s12 - 4*s13)*s23^3 + 2*s23^4) +
            p1q^4*((84*s12*s13 + 84*s13^2)*s23^2 + (2*s12 + 86*s13)*s23^3 +
              2*s23^4) + p1q^2*p2q^2*(-168*s12^2*s13^2 - 84*s12*s13^3 +
              84*s13^4 + (s12^3 - 296*s12^2*s13 - 883*s12*s13^2 - 334*s13^3)*
               s23 + (-8*s12^2 - 190*s12*s13 - 302*s13^2)*s23^2 +
              (-5*s12 + 120*s13)*s23^3 + 4*s23^4) + p1q^3*p2q*
             ((-84*s12^2*s13 - 168*s12*s13^2 - 84*s13^3)*s23 +
              (-4*s12^2 + 244*s12*s13 + 248*s13^2)*s23^2 + (2*s12 + 338*s13)*
               s23^3 + 6*s23^4)))*Log(s13/(s12 + s13 + s23)))/
        (p1q*p2q^4*(27*s12*s13 + 27*s13^2)*s23^2 +
         p3q^5*(27*s12*s13 + 27*s13^2)*s23^2 - 27*p1q^3*p2q^2*s13*s23^3 +
         p1q^2*p2q^3*((27*s12*s13 + 27*s13^2)*s23^2 - 27*s13*s23^3) +
         p3q^2*(p2q^3*(108*s12*s13 + 108*s13^2)*s23^2 - 27*p1q^3*s13*s23^3 +
           p1q^2*p2q*((81*s12*s13 + 81*s13^2)*s23^2 - 135*s13*s23^3) +
           p1q*p2q^2*((243*s12*s13 + 243*s13^2)*s23^2 - 81*s13*s23^3)) +
         p3q^3*(p2q^2*(162*s12*s13 + 162*s13^2)*s23^2 +
           p1q*p2q*((189*s12*s13 + 189*s13^2)*s23^2 - 81*s13*s23^3) +
           p1q^2*((27*s12*s13 + 27*s13^2)*s23^2 - 54*s13*s23^3)) +
         p3q^4*(p2q*(108*s12*s13 + 108*s13^2)*s23^2 +
           p1q*((54*s12*s13 + 54*s13^2)*s23^2 - 27*s13*s23^3)) +
         p3q*(p2q^4*(27*s12*s13 + 27*s13^2)*s23^2 - 54*p1q^3*p2q*s13*s23^3 +
           p1q^2*p2q^2*((81*s12*s13 + 81*s13^2)*s23^2 - 108*s13*s23^3) +
           p1q*p2q^3*((135*s12*s13 + 135*s13^2)*s23^2 - 27*s13*s23^3))) +
       ((p3q^5*(-12*s12^3*s13 - 12*s12^2*s13^2 + (2*s12^3 - 10*s12^2*s13 +
              6*s12*s13^2 + 6*s13^3)*s23 + (2*s12^2 + 6*s13^2)*s23^2) +
          p2q^5*((-(s12^2*s13) - 2*s12*s13^2 - s13^3)*s23 +
            (-2*s12*s13 - 2*s13^2)*s23^2 - s13*s23^3) +
          p1q*p2q^4*(-12*s12*s13^3 - 12*s13^4 + (4*s12^2*s13 + 4*s12*s13^2 -
              12*s13^3)*s23 + (-s12^2 + 2*s12*s13 - s13^2)*s23^2 + s23^4) +
          p1q^4*p2q*((-12*s12*s13 - 12*s13^2)*s23^2 + (2*s12 - 10*s13)*
             s23^3 + 2*s23^4) + p1q^2*p2q^3*(-12*s12*s13^3 - 12*s13^4 +
            (11*s12^2*s13 + 30*s12*s13^2 + 7*s13^3)*s23 +
            (-2*s12^2 + 6*s12*s13 + 16*s13^2)*s23^2 - s13*s23^3 + 2*s23^4) +
          p1q^3*p2q^2*((12*s12^2*s13 + 36*s12*s13^2 + 24*s13^3)*s23 +
            (-s12^2 + 2*s12*s13 + 15*s13^2)*s23^2 + (2*s12 - 6*s13)*s23^3 +
            3*s23^4) + p3q^4*(p2q*(-24*s12^3*s13 + 24*s12*s13^3 +
              (6*s12^3 - 14*s12^2*s13 + 46*s12*s13^2 + 18*s13^3)*s23 +
              (6*s12^2 + 4*s12*s13 + 18*s13^2)*s23^2) +
            p1q*(-24*s12^3*s13 - 24*s12^2*s13^2 + (2*s12^3 - 6*s12^2*s13 +
                34*s12*s13^2 + 18*s13^3)*s23 + (-2*s12^2 + 12*s12*s13 +
                18*s13^2)*s23^2 - 4*s12*s23^3)) +
          p3q^3*(p1q*p2q*(-36*s12^3*s13 + 12*s12^2*s13^2 + 48*s12*s13^3 +
              (6*s12^3 + 6*s12^2*s13 + 134*s12*s13^2 + 50*s13^3)*s23 +
              (-4*s12^2 + 12*s12*s13 + 36*s13^2)*s23^2 + (-10*s12 - 14*s13)*
               s23^3) + p2q^2*(-12*s12^3*s13 + 36*s12^2*s13^2 +
              36*s12*s13^3 - 12*s13^4 + (7*s12^3 + 8*s12^2*s13 +
                79*s12*s13^2 + 6*s13^3)*s23 + (6*s12^2 + 10*s12*s13 +
                16*s13^2)*s23^2 + (-s12 - 2*s13)*s23^3) +
            p1q^2*(-12*s12^3*s13 - 12*s12^2*s13^2 + (s12^3 + 30*s12^2*s13 +
                65*s12*s13^2 + 24*s13^3)*s23 + (-4*s12^2 + 30*s12*s13 +
                18*s13^2)*s23^2 + (-3*s12 - 4*s13)*s23^3 + 2*s23^4)) +
          p3q^2*(p2q^3*(24*s12^2*s13^2 - 24*s13^4 + (4*s12^3 + 17*s12^2*s13 +
                42*s12*s13^2 - 19*s13^3)*s23 + (2*s12^2 + 6*s12*s13)*s23^2 +
              (-2*s12 - 5*s13)*s23^3) + p1q*p2q^2*(-12*s12^3*s13 +
              60*s12^2*s13^2 + 48*s12*s13^3 - 24*s13^4 + (6*s12^3 +
                34*s12^2*s13 + 170*s12*s13^2 + 34*s13^3)*s23 +
              (-5*s12^2 + 10*s12*s13 + 39*s13^2)*s23^2 + (-10*s12 - 18*s13)*
               s23^3 + s23^4) + p1q^3*((24*s12^2*s13 + 36*s12*s13^2 +
                12*s13^3)*s23 + (-3*s12^2 + 2*s12*s13 - 7*s13^2)*s23^2 -
              16*s13*s23^3 + 3*s23^4) + p1q^2*p2q*(-12*s12^3*s13 +
              12*s12^2*s13^2 + 24*s12*s13^3 + (2*s12^3 + 35*s12^2*s13 +
                112*s12*s13^2 + 43*s13^3)*s23 + (-10*s12^2 - 22*s12*s13 -
                12*s13^2)*s23^2 + (-8*s12 - 51*s13)*s23^3 + 4*s23^4)) +
          p3q*(p2q^4*(-12*s12*s13^3 - 12*s13^4 + (s12^3 + 4*s12^2*s13 +
                s12*s13^2 - 14*s13^3)*s23 + (-2*s12*s13 - 6*s13^2)*s23^2 +
              (-s12 - 4*s13)*s23^3) + p1q^4*((-12*s12*s13 - 12*s13^2)*s23^2 +
              (2*s12 - 10*s13)*s23^3 + 2*s23^4) + p1q*p2q^3*(24*s12^2*s13^2 -
              12*s12*s13^3 - 36*s13^4 + (2*s12^3 + 26*s12^2*s13 +
                74*s12*s13^2 - 10*s13^3)*s23 + (-4*s12^2 + 12*s12*s13 +
                20*s13^2)*s23^2 + (-4*s12 - 4*s13)*s23^3 + 2*s23^4) +
            p1q^2*p2q^2*(24*s12^2*s13^2 + 12*s12*s13^3 - 12*s13^4 +
              (s12^3 + 40*s12^2*s13 + 125*s12*s13^2 + 50*s13^3)*s23 +
              (-8*s12^2 + 2*s12*s13 + 34*s13^2)*s23^2 + (-5*s12 - 24*s13)*s23^
                3 + 4*s23^4) + p1q^3*p2q*((12*s12^2*s13 + 24*s12*s13^2 +
                12*s13^3)*s23 + (-4*s12^2 - 44*s12*s13 - 40*s13^2)*s23^2 +
              (2*s12 - 46*s13)*s23^3 + 6*s23^4)))*Log(s23/(s12 + s13 + s23)))/
        (p1q*p2q^4*(3*s12*s13 + 3*s13^2)*s23^2 + p3q^5*(3*s12*s13 + 3*s13^2)*
          s23^2 - 3*p1q^3*p2q^2*s13*s23^3 + p1q^2*p2q^3*
          ((3*s12*s13 + 3*s13^2)*s23^2 - 3*s13*s23^3) +
         p3q^2*(p2q^3*(12*s12*s13 + 12*s13^2)*s23^2 - 3*p1q^3*s13*s23^3 +
           p1q^2*p2q*((9*s12*s13 + 9*s13^2)*s23^2 - 15*s13*s23^3) +
           p1q*p2q^2*((27*s12*s13 + 27*s13^2)*s23^2 - 9*s13*s23^3)) +
         p3q^3*(p2q^2*(18*s12*s13 + 18*s13^2)*s23^2 +
           p1q*p2q*((21*s12*s13 + 21*s13^2)*s23^2 - 9*s13*s23^3) +
           p1q^2*((3*s12*s13 + 3*s13^2)*s23^2 - 6*s13*s23^3)) +
         p3q^4*(p2q*(12*s12*s13 + 12*s13^2)*s23^2 +
           p1q*((6*s12*s13 + 6*s13^2)*s23^2 - 3*s13*s23^3)) +
         p3q*(p2q^4*(3*s12*s13 + 3*s13^2)*s23^2 - 6*p1q^3*p2q*s13*s23^3 +
           p1q^2*p2q^2*((9*s12*s13 + 9*s13^2)*s23^2 - 12*s13*s23^3) +
           p1q*p2q^3*((15*s12*s13 + 15*s13^2)*s23^2 - 3*s13*s23^3)))) +
     Log(p2q/(p1q + p2q + p3q))*((p2q^3*(-2*s12*s13 - 2*s13^2 - 2*s13*s23) +
         p1q^3*((-2*s12 - 2*s13)*s23 - 2*s23^2) +
         p1q*p2q^2*(-44*s12*s13 - 40*s13^2 + (-2*s12 - 6*s13)*s23 +
           2*s23^2) + p3q^3*(6*s12^2 - 40*s12*s13 - 42*s13^2 +
           (8*s12 - 4*s13)*s23 + 6*s23^2) + p1q^2*p2q*(-2*s12*s13 + 2*s13^2 +
           (4*s12 + 42*s13)*s23 + 8*s23^2) +
         p3q^2*(p2q*(6*s12^2 - 88*s12*s13 - 86*s13^2 + (4*s12 - 16*s13)*s23 +
             6*s23^2) + p1q*(6*s12^2 - 44*s12*s13 - 42*s13^2 +
             (8*s12 + 32*s13)*s23 + 10*s23^2)) +
         p3q*(p2q^2*(2*s12^2 - 46*s12*s13 - 44*s13^2 + (-2*s12 - 12*s13)*
              s23) + p1q^2*(2*s12^2 - 2*s12*s13 + (2*s12 + 36*s13)*s23 +
             4*s23^2) + p1q*p2q*(2*s12^2 - 92*s12*s13 - 82*s13^2 +
             (4*s12 + 28*s13)*s23 + 14*s23^2)))/(27*p1q^2*p2q*s13*s23 +
         27*p1q*p2q^2*s13*s23 + 27*p3q^3*s13*s23 +
         p3q^2*(54*p1q*s13*s23 + 54*p2q*s13*s23) +
         p3q*(27*p1q^2*s13*s23 + 81*p1q*p2q*s13*s23 + 27*p2q^2*s13*s23)) +
       ((p1q*p2q^4*(-2*s12*s13^3 - 2*s13^4 + (12*s12*s13^2 + 10*s13^3)*s23 +
            12*s13^2*s23^2) + p1q^2*p2q^3*(s12^2*s13^2 - 2*s12*s13^3 -
            3*s13^4 + (-12*s12^2*s13 - 2*s12*s13^2 + 6*s13^3)*s23 +
            (-36*s12*s13 - 15*s13^2)*s23^2 - 24*s13*s23^3) +
          p3q^5*(-2*s12^3*s13 - 2*s12^2*s13^2 + (12*s12^3 + 10*s12^2*s13)*
             s23 + (12*s12^2 - 6*s12*s13 - 6*s13^2)*s23^2 - 6*s13*s23^3) +
          p1q^5*((s12^2*s13 + 2*s12*s13^2 + s13^3)*s23 +
            (2*s12*s13 + 2*s13^2)*s23^2 + s13*s23^3) +
          p1q^3*p2q^2*(2*s12^2*s13^2 - 2*s13^4 + (-11*s12^2*s13 -
              6*s12*s13^2 + s13^3)*s23 + (-30*s12*s13 - 16*s13^2)*s23^2 +
            (12*s12 - 7*s13)*s23^3 + 12*s23^4) + p1q^4*p2q*
           (s12^2*s13^2 - s13^4 + (-4*s12^2*s13 - 2*s12*s13^2)*s23 +
            (-4*s12*s13 + s13^2)*s23^2 + (12*s12 + 12*s13)*s23^3 +
            12*s23^4) + p3q^4*(p1q*(-6*s12^3*s13 - 6*s12^2*s13^2 +
              (24*s12^3 + 14*s12^2*s13 - 4*s12*s13^2)*s23 + (-46*s12*s13 -
                18*s13^2)*s23^2 + (-24*s12 - 18*s13)*s23^3) +
            p2q*(-2*s12^3*s13 + 2*s12^2*s13^2 + 4*s12*s13^3 +
              (24*s12^3 + 6*s12^2*s13 - 12*s12*s13^2)*s23 + (24*s12^2 -
                34*s12*s13 - 18*s13^2)*s23^2 - 18*s13*s23^3)) +
          p3q^3*(p1q*p2q*(-6*s12^3*s13 + 4*s12^2*s13^2 + 10*s12*s13^3 +
              (36*s12^3 - 6*s12^2*s13 - 12*s12*s13^2 + 14*s13^3)*s23 +
              (-12*s12^2 - 134*s12*s13 - 36*s13^2)*s23^2 + (-48*s12 - 50*s13)*
               s23^3) + p2q^2*(-(s12^3*s13) + 4*s12^2*s13^2 + 3*s12*s13^3 -
              2*s13^4 + (12*s12^3 - 30*s12^2*s13 - 30*s12*s13^2 + 4*s13^3)*
               s23 + (12*s12^2 - 65*s12*s13 - 18*s13^2)*s23^2 -
              24*s13*s23^3) + p1q^2*(-7*s12^3*s13 - 6*s12^2*s13^2 +
              s12*s13^3 + (12*s12^3 - 8*s12^2*s13 - 10*s12*s13^2 + 2*s13^3)*
               s23 + (-36*s12^2 - 79*s12*s13 - 16*s13^2)*s23^2 +
              (-36*s12 - 6*s13)*s23^3 + 12*s23^4)) +
          p3q^2*(p1q*p2q^2*(-2*s12^3*s13 + 10*s12^2*s13^2 + 8*s12*s13^3 -
              4*s13^4 + (12*s12^3 - 35*s12^2*s13 + 22*s12*s13^2 + 51*s13^3)*
               s23 + (-12*s12^2 - 112*s12*s13 + 12*s13^2)*s23^2 +
              (-24*s12 - 43*s13)*s23^3) + p2q^3*(3*s12^2*s13^2 - 3*s13^4 +
              (-24*s12^2*s13 - 2*s12*s13^2 + 16*s13^3)*s23 + (-36*s12*s13 +
                7*s13^2)*s23^2 - 12*s13*s23^3) + p1q^2*p2q*(-6*s12^3*s13 +
              5*s12^2*s13^2 + 10*s12*s13^3 - s13^4 + (12*s12^3 -
                34*s12^2*s13 - 10*s12*s13^2 + 18*s13^3)*s23 +
              (-60*s12^2 - 170*s12*s13 - 39*s13^2)*s23^2 + (-48*s12 - 34*s13)*
               s23^3 + 24*s23^4) + p1q^3*(-4*s12^3*s13 - 2*s12^2*s13^2 +
              2*s12*s13^3 + (-17*s12^2*s13 - 6*s12*s13^2 + 5*s13^3)*s23 +
              (-24*s12^2 - 42*s12*s13)*s23^2 + 19*s13*s23^3 + 24*s23^4)) +
          p3q*(p2q^4*(-2*s12*s13^3 - 2*s13^4 + (12*s12*s13^2 + 10*s13^3)*
               s23 + 12*s13^2*s23^2) + p1q*p2q^3*(4*s12^2*s13^2 -
              2*s12*s13^3 - 6*s13^4 + (-12*s12^2*s13 + 44*s12*s13^2 +
                46*s13^3)*s23 + (-24*s12*s13 + 40*s13^2)*s23^2 -
              12*s13*s23^3) + p1q^2*p2q^2*(-(s12^3*s13) + 8*s12^2*s13^2 +
              5*s12*s13^3 - 4*s13^4 + (-40*s12^2*s13 - 2*s12*s13^2 +
                24*s13^3)*s23 + (-24*s12^2 - 125*s12*s13 - 34*s13^2)*s23^2 +
              (-12*s12 - 50*s13)*s23^3 + 12*s23^4) +
            p1q^4*(-(s12^3*s13) + s12*s13^3 + (-4*s12^2*s13 + 2*s12*s13^2 +
                4*s13^3)*s23 + (-(s12*s13) + 6*s13^2)*s23^2 +
              (12*s12 + 14*s13)*s23^3 + 12*s23^4) + p1q^3*p2q*
             (-2*s12^3*s13 + 4*s12^2*s13^2 + 4*s12*s13^3 - 2*s13^4 +
              (-26*s12^2*s13 - 12*s12*s13^2 + 4*s13^3)*s23 + (-24*s12^2 -
                74*s12*s13 - 20*s13^2)*s23^2 + (12*s12 + 10*s13)*s23^3 +
              36*s23^4)))*Log((p1q + p3q)/(p1q + p2q + p3q)))/
        (-27*p1q^2*p2q^3*s13^3*s23 + p1q^4*p2q*(27*s12*s13^2*s23 +
           27*s13^2*s23^2) + p3q^5*(27*s12*s13^2*s23 + 27*s13^2*s23^2) +
         p1q^3*p2q^2*((27*s12*s13^2 - 27*s13^3)*s23 + 27*s13^2*s23^2) +
         p3q^4*(p2q*((54*s12*s13^2 - 27*s13^3)*s23 + 54*s13^2*s23^2) +
           p1q*(108*s12*s13^2*s23 + 108*s13^2*s23^2)) +
         p3q*(-54*p1q*p2q^3*s13^3*s23 + p1q^4*(27*s12*s13^2*s23 +
             27*s13^2*s23^2) + p1q^2*p2q^2*((81*s12*s13^2 - 108*s13^3)*s23 +
             81*s13^2*s23^2) + p1q^3*p2q*((135*s12*s13^2 - 27*s13^3)*s23 +
             135*s13^2*s23^2)) + p3q^3*(p2q^2*((27*s12*s13^2 - 54*s13^3)*
              s23 + 27*s13^2*s23^2) + p1q^2*(162*s12*s13^2*s23 +
             162*s13^2*s23^2) + p1q*p2q*((189*s12*s13^2 - 81*s13^3)*s23 +
             189*s13^2*s23^2)) + p3q^2*(-27*p2q^3*s13^3*s23 +
           p1q*p2q^2*((81*s12*s13^2 - 135*s13^3)*s23 + 81*s13^2*s23^2) +
           p1q^3*(108*s12*s13^2*s23 + 108*s13^2*s23^2) +
           p1q^2*p2q*((243*s12*s13^2 - 81*s13^3)*s23 + 243*s13^2*s23^2))) +
       ((p3q^5*(-84*s12^3*s13 - 84*s12^2*s13^2 + (-2*s12^3 - 86*s12^2*s13 +
              42*s12*s13^2 + 42*s13^3)*s23 + (-2*s12^2 + 42*s13^2)*s23^2) +
          p2q^5*((s12^2*s13 + 2*s12*s13^2 + s13^3)*s23 +
            (2*s12*s13 + 2*s13^2)*s23^2 + s13*s23^3) +
          p1q^3*p2q^2*((84*s12^2*s13 + 252*s12*s13^2 + 168*s13^3)*s23 +
            (s12^2 + 46*s12*s13 + 129*s13^2)*s23^2 + (-2*s12 - 42*s13)*
             s23^3 - 3*s23^4) + p1q^4*p2q*((-84*s12*s13 - 84*s13^2)*s23^2 +
            (-2*s12 - 86*s13)*s23^3 - 2*s23^4) + p1q^2*p2q^3*
           (-84*s12*s13^3 - 84*s13^4 + (85*s12^2*s13 + 210*s12*s13^2 +
              41*s13^3)*s23 + (2*s12^2 + 90*s12*s13 + 128*s13^2)*s23^2 +
            s13*s23^3 - 2*s23^4) + p1q*p2q^4*(-84*s12*s13^3 - 84*s13^4 +
            (44*s12^2*s13 + 44*s12*s13^2 - 84*s13^3)*s23 +
            (s12^2 + 46*s12*s13 + s13^2)*s23^2 - s23^4) +
          p3q^4*(p2q*(-168*s12^3*s13 + 168*s12*s13^3 + (-6*s12^3 -
                130*s12^2*s13 + 338*s12*s13^2 + 126*s13^3)*s23 +
              (-6*s12^2 + 44*s12*s13 + 126*s13^2)*s23^2) +
            p1q*(-168*s12^3*s13 - 168*s12^2*s13^2 + (-2*s12^3 -
                42*s12^2*s13 + 254*s12*s13^2 + 126*s13^3)*s23 +
              (2*s12^2 + 132*s12*s13 + 126*s13^2)*s23^2 + 4*s12*s23^3)) +
          p3q^3*(p1q*p2q*(-252*s12^3*s13 + 84*s12^2*s13^2 + 336*s12*s13^3 +
              (-6*s12^3 + 42*s12^2*s13 + 970*s12*s13^2 + 334*s13^3)*s23 +
              (4*s12^2 + 228*s12*s13 + 252*s13^2)*s23^2 + (10*s12 - 82*s13)*
               s23^3) + p2q^2*(-84*s12^3*s13 + 252*s12^2*s13^2 +
              252*s12*s13^3 - 84*s13^4 + (-7*s12^3 + 40*s12^2*s13 +
                593*s12*s13^2 + 42*s13^3)*s23 + (-6*s12^2 + 134*s12*s13 +
                128*s13^2)*s23^2 + (s12 + 2*s13)*s23^3) +
            p1q^2*(-84*s12^3*s13 - 84*s12^2*s13^2 + (-s12^3 + 210*s12^2*s13 +
                463*s12*s13^2 + 168*s13^3)*s23 + (4*s12^2 + 258*s12*s13 +
                126*s13^2)*s23^2 + (3*s12 - 44*s13)*s23^3 - 2*s23^4)) +
          p3q*(p2q^4*(-84*s12*s13^3 - 84*s13^4 + (-s12^3 + 44*s12^2*s13 +
                47*s12*s13^2 - 82*s13^3)*s23 + (50*s12*s13 + 6*s13^2)*s23^2 +
              (s12 + 4*s13)*s23^3) + p1q^3*p2q*((84*s12^2*s13 +
                168*s12*s13^2 + 84*s13^3)*s23 + (4*s12^2 - 244*s12*s13 -
                248*s13^2)*s23^2 + (-2*s12 - 338*s13)*s23^3 - 6*s23^4) +
            p1q^2*p2q^2*(168*s12^2*s13^2 + 84*s12*s13^3 - 84*s13^4 +
              (-s12^3 + 296*s12^2*s13 + 883*s12*s13^2 + 334*s13^3)*s23 +
              (8*s12^2 + 190*s12*s13 + 302*s13^2)*s23^2 + (5*s12 - 120*s13)*
               s23^3 - 4*s23^4) + p1q^4*((-84*s12*s13 - 84*s13^2)*s23^2 +
              (-2*s12 - 86*s13)*s23^3 - 2*s23^4) + p1q*p2q^3*
             (168*s12^2*s13^2 - 84*s12*s13^3 - 252*s13^4 + (-2*s12^3 +
                214*s12^2*s13 + 550*s12*s13^2 - 86*s13^3)*s23 +
              (4*s12^2 + 228*s12*s13 + 172*s13^2)*s23^2 + (4*s12 + 4*s13)*s23^
                3 - 2*s23^4)) + p3q^2*(p2q^3*(168*s12^2*s13^2 - 168*s13^4 +
              (-4*s12^3 + 127*s12^2*s13 + 342*s12*s13^2 - 125*s13^3)*s23 +
              (-2*s12^2 + 138*s12*s13 + 48*s13^2)*s23^2 + (2*s12 + 5*s13)*s23^
                3) + p1q^2*p2q*(-84*s12^3*s13 + 84*s12^2*s13^2 +
              168*s12*s13^3 + (-2*s12^3 + 253*s12^2*s13 + 800*s12*s13^2 +
                293*s13^3)*s23 + (10*s12^2 + 22*s12*s13 - 36*s13^2)*s23^2 +
              (8*s12 - 333*s13)*s23^3 - 4*s23^4) +
            p1q^3*((168*s12^2*s13 + 252*s12*s13^2 + 84*s13^3)*s23 +
              (3*s12^2 + 46*s12*s13 - 41*s13^2)*s23^2 - 128*s13*s23^3 -
              3*s23^4) + p1q*p2q^2*(-84*s12^3*s13 + 420*s12^2*s13^2 +
              336*s12*s13^3 - 168*s13^4 + (-6*s12^3 + 254*s12^2*s13 +
                1222*s12*s13^2 + 206*s13^3)*s23 + (5*s12^2 + 278*s12*s13 +
                297*s13^2)*s23^2 + (10*s12 - 78*s13)*s23^3 - s23^4)))*
         Log((p2q + p3q)/(p1q + p2q + p3q)))/
        (p1q*p2q^4*(27*s12*s13 + 27*s13^2)*s23^2 +
         p3q^5*(27*s12*s13 + 27*s13^2)*s23^2 - 27*p1q^3*p2q^2*s13*s23^3 +
         p1q^2*p2q^3*((27*s12*s13 + 27*s13^2)*s23^2 - 27*s13*s23^3) +
         p3q^2*(p2q^3*(108*s12*s13 + 108*s13^2)*s23^2 - 27*p1q^3*s13*s23^3 +
           p1q^2*p2q*((81*s12*s13 + 81*s13^2)*s23^2 - 135*s13*s23^3) +
           p1q*p2q^2*((243*s12*s13 + 243*s13^2)*s23^2 - 81*s13*s23^3)) +
         p3q^3*(p2q^2*(162*s12*s13 + 162*s13^2)*s23^2 +
           p1q*p2q*((189*s12*s13 + 189*s13^2)*s23^2 - 81*s13*s23^3) +
           p1q^2*((27*s12*s13 + 27*s13^2)*s23^2 - 54*s13*s23^3)) +
         p3q^4*(p2q*(108*s12*s13 + 108*s13^2)*s23^2 +
           p1q*((54*s12*s13 + 54*s13^2)*s23^2 - 27*s13*s23^3)) +
         p3q*(p2q^4*(27*s12*s13 + 27*s13^2)*s23^2 - 54*p1q^3*p2q*s13*s23^3 +
           p1q^2*p2q^2*((81*s12*s13 + 81*s13^2)*s23^2 - 108*s13*s23^3) +
           p1q*p2q^3*((135*s12*s13 + 135*s13^2)*s23^2 - 27*s13*s23^3))) +
       ((p1q^4*p2q*((-84*s12*s13^2 - 84*s13^3)*s23 + (-2*s12*s13 - 86*s13^2)*
             s23^2 - 2*s13*s23^3) + p3q^5*(84*s12^2*s13^2 +
            (4*s12^2*s13 + 42*s12*s13^2 - 42*s13^3)*s23 +
            (-12*s12^2 - 6*s12*s13)*s23^2 + 6*s13*s23^3) +
          p1q*p2q^4*((-2*s12*s13^2 - 2*s13^3)*s23 + (12*s12*s13 + 10*s13^2)*
             s23^2 + 12*s13*s23^3) + p1q^3*p2q^2*(84*s13^4 +
            (-86*s12*s13^2 + 2*s13^3)*s23 + (2*s12*s13 - 40*s13^2)*s23^2 -
            6*s13*s23^3 - 12*s23^4) + p1q^2*p2q^3*(84*s13^4 +
            (-46*s12*s13^2 + 42*s13^3)*s23 + (10*s12*s13 + 8*s13^2)*s23^2 +
            2*s13*s23^3 - 12*s23^4) + p3q^4*
           (p2q*(84*s12^2*s13^2 - 168*s12*s13^3 + (8*s12^2*s13 -
                46*s12*s13^2 - 126*s13^3)*s23 + (-36*s12^2 - 16*s12*s13 +
                6*s13^2)*s23^2 + 24*s13*s23^3) + p1q*(252*s12^2*s13^2 +
              (8*s12^2*s13 + 80*s12*s13^2 - 168*s13^3)*s23 + (-12*s12^2 +
                2*s12*s13 - 42*s13^2)*s23^2 + (24*s12 + 18*s13)*s23^3)) +
          p3q*(p1q^4*((-84*s12*s13^2 - 84*s13^3)*s23 + (-2*s12*s13 -
                86*s13^2)*s23^2 - 2*s13*s23^3) +
            p2q^4*((-2*s12*s13^2 - 2*s13^3)*s23 + (12*s12*s13 + 10*s13^2)*s23^
                2 + 12*s13*s23^3) + p1q*p2q^3*(168*s13^4 + (2*s12^2*s13 -
                92*s12*s13^2 + 82*s13^3)*s23 + (56*s12*s13 + 48*s13^2)*s23^
                2 + (24*s12 + 62*s13)*s23^3) + p1q^2*p2q^2*(-168*s12*s13^3 +
              252*s13^4 + (4*s12^2*s13 - 304*s12*s13^2 - 36*s13^3)*s23 +
              (32*s12*s13 - 60*s13^2)*s23^2 + (24*s12 + 12*s13)*s23^3 -
              36*s23^4) + p1q^3*p2q*(-168*s12*s13^3 + (2*s12^2*s13 -
                424*s12*s13^2 - 418*s13^3)*s23 + (4*s12*s13 - 336*s13^2)*s23^
                2 - 14*s13*s23^3 - 24*s23^4)) +
          p3q^2*(p2q^3*(84*s13^4 + (2*s12^2*s13 - 46*s12*s13^2 + 40*s13^3)*
               s23 + (-12*s12^2 + 22*s12*s13 + 28*s13^2)*s23^2 +
              36*s13*s23^3) + p1q*p2q^2*(-336*s12*s13^3 + 252*s13^4 +
              (10*s12^2*s13 - 350*s12*s13^2 - 80*s13^3)*s23 +
              (-12*s12^2 + 78*s12*s13 + 28*s13^2)*s23^2 + (72*s12 + 108*s13)*
               s23^3) + p1q^2*p2q*(84*s12^2*s13^2 - 504*s12*s13^3 +
              (10*s12^2*s13 - 642*s12*s13^2 - 708*s13^3)*s23 +
              (34*s12*s13 - 404*s13^2)*s23^2 + (48*s12 + 16*s13)*s23^3 -
              36*s23^4) + p1q^3*(84*s12^2*s13^2 + (2*s12^2*s13 -
                170*s12*s13^2 - 252*s13^3)*s23 + (2*s12*s13 - 212*s13^2)*s23^
                2 - 8*s13*s23^3 - 12*s23^4)) +
          p3q^3*(p2q^2*(-168*s12*s13^3 + 84*s13^4 + (6*s12^2*s13 -
                132*s12*s13^2 - 42*s13^3)*s23 + (-36*s12^2 + 24*s13^2)*s23^
                2 + 42*s13*s23^3) + p1q*p2q*(168*s12^2*s13^2 -
              504*s12*s13^3 + (16*s12^2*s13 - 348*s12*s13^2 - 500*s13^3)*
               s23 + (-24*s12^2 + 36*s12*s13 - 136*s13^2)*s23^2 +
              (72*s12 + 76*s13)*s23^3) + p1q^2*(252*s12^2*s13^2 +
              (6*s12^2*s13 - 48*s12*s13^2 - 294*s13^3)*s23 + (12*s12*s13 -
                168*s13^2)*s23^2 + (24*s12 + 6*s13)*s23^3 - 12*s23^4)))*
         Log(-s12 - s13 - s23))/(27*p1q^3*p2q^2*s13^2*s23^2 +
         27*p1q^2*p2q^3*s13^2*s23^2 + 27*p3q^5*s13^2*s23^2 +
         p3q^4*(81*p1q*s13^2*s23^2 + 81*p2q*s13^2*s23^2) +
         p3q^3*(81*p1q^2*s13^2*s23^2 + 216*p1q*p2q*s13^2*s23^2 +
           81*p2q^2*s13^2*s23^2) + p3q^2*(27*p1q^3*s13^2*s23^2 +
           189*p1q^2*p2q*s13^2*s23^2 + 189*p1q*p2q^2*s13^2*s23^2 +
           27*p2q^3*s13^2*s23^2) + p3q*(54*p1q^3*p2q*s13^2*s23^2 +
           135*p1q^2*p2q^2*s13^2*s23^2 + 54*p1q*p2q^3*s13^2*s23^2)) +
       ((p3q^6*(-84*s12^3*s13 + (-2*s12^3 - 124*s12^2*s13 + 42*s12*s13^2)*
             s23 + (-8*s12^2 - 42*s12*s13 + 42*s13^2)*s23^2 +
            (6*s12 + 6*s13)*s23^3) + p1q^2*p2q^4*(84*s13^4 +
            (s12^2*s13 - 42*s12*s13^2 + 45*s13^3)*s23 + (4*s12*s13 + 4*s13^2)*
             s23^2 + (12*s12 + 7*s13)*s23^3) + p1q^3*p2q^3*
           (-84*s12*s13^3 + 84*s13^4 + (44*s12^2*s13 - 128*s12*s13^2 -
              80*s13^3)*s23 + (s12^2 + 46*s12*s13 - 83*s13^2)*s23^2 +
            (18*s12 + 2*s13)*s23^3 - 7*s23^4) + p1q^4*p2q^2*
           (-84*s12*s13^3 + (85*s12^2*s13 - 86*s12*s13^2 - 167*s13^3)*s23 +
            (2*s12^2 + 126*s12*s13 - 88*s13^2)*s23^2 + (8*s12 + 37*s13)*
             s23^3 - 6*s23^4) + p1q^5*p2q*((84*s12^2*s13 + 84*s12*s13^2)*
             s23 + (s12^2 + 168*s12*s13 + 83*s13^2)*s23^2 +
            (2*s12 + 84*s13)*s23^3 + s23^4) +
          p3q^4*(p2q^2*(252*s12^2*s13^2 - 252*s12*s13^3 + (-3*s12^3 +
                134*s12^2*s13 + 157*s12*s13^2 - 208*s13^3)*s23 +
              (-18*s12^2 + 134*s12*s13 + 44*s13^2)*s23^2 + (57*s12 + 36*s13)*
               s23^3) + p1q*p2q*(-252*s12^3*s13 + 924*s12^2*s13^2 +
              (-12*s12^3 + 152*s12^2*s13 + 1368*s12*s13^2 - 168*s13^3)*s23 +
              (-64*s12^2 + 542*s12*s13 + 570*s13^2)*s23^2 +
              (84*s12 + 202*s13)*s23^3 - 32*s23^4) +
            p1q^2*(-504*s12^3*s13 + (-7*s12^3 - 530*s12^2*s13 +
                461*s12*s13^2)*s23 + (-20*s12^2 + 188*s12*s13 + 460*s13^2)*
               s23^2 + (41*s12 + 226*s13)*s23^3 - 18*s23^4)) +
          p3q^3*(p2q^3*(-252*s12*s13^3 + 84*s13^4 + (-s12^3 + 45*s12^2*s13 -
                175*s12*s13^2 - 121*s13^3)*s23 + (-6*s12^2 + 50*s12*s13 -
                36*s13^2)*s23^2 + (43*s12 + 25*s13)*s23^3) +
            p1q^2*p2q*(-252*s12^3*s13 + 1260*s12^2*s13^2 + (-13*s12^3 +
                745*s12^2*s13 + 2157*s12*s13^2 - 293*s13^3)*s23 +
              (-54*s12^2 + 1562*s12*s13 + 1020*s13^2)*s23^2 +
              (111*s12 + 601*s13)*s23^3 - 64*s23^4) + p1q*p2q^2*
             (672*s12^2*s13^2 - 840*s12*s13^3 + (-8*s12^3 + 484*s12^2*s13 +
                260*s12*s13^2 - 832*s13^3)*s23 + (-77*s12^2 + 456*s12*s13 -
                79*s13^2)*s23^2 + (90*s12 + 48*s13)*s23^3 - 57*s23^4) +
            p1q^3*(-336*s12^3*s13 + (-4*s12^3 - 116*s12^2*s13 +
                544*s12*s13^2)*s23 + (-5*s12^2 + 604*s12*s13 + 541*s13^2)*s23^
                2 + (30*s12 + 380*s13)*s23^3 - 17*s23^4)) +
          p3q^5*(p2q*(-84*s12^3*s13 + 252*s12^2*s13^2 + (-4*s12^3 -
                34*s12^2*s13 + 332*s12*s13^2 - 42*s13^3)*s23 +
              (-20*s12^2 + 46*s12*s13 + 126*s13^2)*s23^2 + (32*s12 + 24*s13)*
               s23^3) + p1q*(-336*s12^3*s13 + (-6*s12^3 - 452*s12^2*s13 +
                210*s12*s13^2)*s23 + (-22*s12^2 - 76*s12*s13 + 210*s13^2)*s23^
                2 + (26*s12 + 60*s13)*s23^3 - 6*s23^4)) +
          p3q^2*(p2q^4*(84*s13^4 + (s12^2*s13 - 42*s12*s13^2 + 45*s13^3)*
               s23 + (4*s12*s13 + 4*s13^2)*s23^2 + (12*s12 + 7*s13)*s23^3) +
            p1q^2*p2q^2*(588*s12^2*s13^2 - 1008*s12*s13^3 + (-7*s12^3 +
                651*s12^2*s13 - 37*s12*s13^2 - 1207*s13^3)*s23 +
              (-50*s12^2 + 732*s12*s13 - 330*s13^2)*s23^2 + (113*s12 +
                121*s13)*s23^3 - 72*s23^4) + p1q*p2q^3*(-588*s12*s13^3 +
              252*s13^4 + (-2*s12^3 + 134*s12^2*s13 - 478*s12*s13^2 -
                322*s13^3)*s23 + (-47*s12^2 + 74*s12*s13 - 191*s13^2)*s23^2 +
              (32*s12 - 20*s13)*s23^3 - 43*s23^4) + p1q^3*p2q*
             (-84*s12^3*s13 + 756*s12^2*s13^2 + (-6*s12^3 + 982*s12^2*s13 +
                1622*s12*s13^2 - 250*s13^3)*s23 + (-7*s12^2 + 1826*s12*s13 +
                905*s13^2)*s23^2 + (76*s12 + 752*s13)*s23^3 - 43*s23^4) +
            p1q^4*(-84*s12^3*s13 + (-s12^3 + 170*s12^2*s13 + 335*s12*s13^2)*
               s23 + (2*s12^2 + 550*s12*s13 + 332*s13^2)*s23^2 +
              (11*s12 + 292*s13)*s23^3 - 4*s23^4)) +
          p3q*(p1q^3*p2q^2*(168*s12^2*s13^2 - 504*s12*s13^3 +
              (-2*s12^3 + 386*s12^2*s13 - 226*s12*s13^2 - 750*s13^3)*s23 +
              (-s12^2 + 512*s12*s13 - 307*s13^2)*s23^2 + (64*s12 + 122*s13)*
               s23^3 - 33*s23^4) + p1q^2*p2q^3*(-420*s12*s13^3 + 252*s13^4 +
              (-s12^3 + 133*s12^2*s13 - 431*s12*s13^2 - 281*s13^3)*s23 +
              (-16*s12^2 + 118*s12*s13 - 214*s13^2)*s23^2 + (55*s12 + 5*s13)*
               s23^3 - 26*s23^4) + p1q*p2q^4*(168*s13^4 + (2*s12^2*s13 -
                84*s12*s13^2 + 90*s13^3)*s23 + (-12*s12^2 - 16*s12*s13 -
                4*s13^2)*s23^2 - 10*s13*s23^3 - 12*s23^4) +
            p1q^4*p2q*(168*s12^2*s13^2 + (-s12^3 + 507*s12^2*s13 +
                585*s12*s13^2 - 83*s13^3)*s23 + (4*s12^2 + 928*s12*s13 +
                412*s13^2)*s23^2 + (19*s12 + 413*s13)*s23^3 - 10*s23^4) +
            p1q^5*((84*s12^2*s13 + 84*s12*s13^2)*s23 + (s12^2 + 168*s12*s13 +
                83*s13^2)*s23^2 + (2*s12 + 84*s13)*s23^3 + s23^4)))*
         Log(s13/(s12 + s13 + s23)))/(-27*p1q^2*p2q^4*s13^2*s23^2 +
         p1q^4*p2q^2*(27*s12*s13*s23^2 + 27*s13*s23^3) +
         p3q^6*(27*s12*s13*s23^2 + 27*s13*s23^3) + p1q^3*p2q^3*
          ((27*s12*s13 - 27*s13^2)*s23^2 + 27*s13*s23^3) +
         p3q^5*(p2q*((81*s12*s13 - 27*s13^2)*s23^2 + 81*s13*s23^3) +
           p1q*(108*s12*s13*s23^2 + 108*s13*s23^3)) +
         p3q*(-54*p1q*p2q^4*s13^2*s23^2 + p1q^4*p2q*(54*s12*s13*s23^2 +
             54*s13*s23^3) + p1q^2*p2q^3*((81*s12*s13 - 135*s13^2)*s23^2 +
             81*s13*s23^3) + p1q^3*p2q^2*((162*s12*s13 - 54*s13^2)*s23^2 +
             162*s13*s23^3)) + p3q^4*(p2q^2*((81*s12*s13 - 81*s13^2)*s23^2 +
             81*s13*s23^3) + p1q^2*(162*s12*s13*s23^2 + 162*s13*s23^3) +
           p1q*p2q*((297*s12*s13 - 81*s13^2)*s23^2 + 297*s13*s23^3)) +
         p3q^2*(-27*p2q^4*s13^2*s23^2 + p1q^4*(27*s12*s13*s23^2 +
             27*s13*s23^3) + p1q*p2q^3*((81*s12*s13 - 189*s13^2)*s23^2 +
             81*s13*s23^3) + p1q^3*p2q*((243*s12*s13 - 27*s13^2)*s23^2 +
             243*s13*s23^3) + p1q^2*p2q^2*((324*s12*s13 - 189*s13^2)*s23^2 +
             324*s13*s23^3)) + p3q^3*(p2q^3*((27*s12*s13 - 81*s13^2)*s23^2 +
             27*s13*s23^3) + p1q^3*(108*s12*s13*s23^2 + 108*s13*s23^3) +
           p1q*p2q^2*((270*s12*s13 - 216*s13^2)*s23^2 + 270*s13*s23^3) +
           p1q^2*p2q*((405*s12*s13 - 81*s13^2)*s23^2 + 405*s13*s23^3))) +
       ((p3q^5*(84*s12^3*s13 + 84*s12^2*s13^2 + (2*s12^3 + 86*s12^2*s13 -
              42*s12*s13^2 - 42*s13^3)*s23 + (2*s12^2 - 42*s13^2)*s23^2) +
          p2q^5*((-(s12^2*s13) - 2*s12*s13^2 - s13^3)*s23 +
            (-2*s12*s13 - 2*s13^2)*s23^2 - s13*s23^3) +
          p1q*p2q^4*(84*s12*s13^3 + 84*s13^4 + (-44*s12^2*s13 -
              44*s12*s13^2 + 84*s13^3)*s23 + (-s12^2 - 46*s12*s13 - s13^2)*
             s23^2 + s23^4) + p1q^2*p2q^3*(84*s12*s13^3 + 84*s13^4 +
            (-85*s12^2*s13 - 210*s12*s13^2 - 41*s13^3)*s23 +
            (-2*s12^2 - 90*s12*s13 - 128*s13^2)*s23^2 - s13*s23^3 +
            2*s23^4) + p1q^4*p2q*((84*s12*s13 + 84*s13^2)*s23^2 +
            (2*s12 + 86*s13)*s23^3 + 2*s23^4) + p1q^3*p2q^2*
           ((-84*s12^2*s13 - 252*s12*s13^2 - 168*s13^3)*s23 +
            (-s12^2 - 46*s12*s13 - 129*s13^2)*s23^2 + (2*s12 + 42*s13)*
             s23^3 + 3*s23^4) + p3q^4*(p2q*(168*s12^3*s13 - 168*s12*s13^3 +
              (6*s12^3 + 130*s12^2*s13 - 338*s12*s13^2 - 126*s13^3)*s23 +
              (6*s12^2 - 44*s12*s13 - 126*s13^2)*s23^2) +
            p1q*(168*s12^3*s13 + 168*s12^2*s13^2 + (2*s12^3 + 42*s12^2*s13 -
                254*s12*s13^2 - 126*s13^3)*s23 + (-2*s12^2 - 132*s12*s13 -
                126*s13^2)*s23^2 - 4*s12*s23^3)) +
          p3q^3*(p2q^2*(84*s12^3*s13 - 252*s12^2*s13^2 - 252*s12*s13^3 +
              84*s13^4 + (7*s12^3 - 40*s12^2*s13 - 593*s12*s13^2 - 42*s13^3)*
               s23 + (6*s12^2 - 134*s12*s13 - 128*s13^2)*s23^2 +
              (-s12 - 2*s13)*s23^3) + p1q*p2q*(252*s12^3*s13 -
              84*s12^2*s13^2 - 336*s12*s13^3 + (6*s12^3 - 42*s12^2*s13 -
                970*s12*s13^2 - 334*s13^3)*s23 + (-4*s12^2 - 228*s12*s13 -
                252*s13^2)*s23^2 + (-10*s12 + 82*s13)*s23^3) +
            p1q^2*(84*s12^3*s13 + 84*s12^2*s13^2 + (s12^3 - 210*s12^2*s13 -
                463*s12*s13^2 - 168*s13^3)*s23 + (-4*s12^2 - 258*s12*s13 -
                126*s13^2)*s23^2 + (-3*s12 + 44*s13)*s23^3 + 2*s23^4)) +
          p3q^2*(p2q^3*(-168*s12^2*s13^2 + 168*s13^4 + (4*s12^3 -
                127*s12^2*s13 - 342*s12*s13^2 + 125*s13^3)*s23 +
              (2*s12^2 - 138*s12*s13 - 48*s13^2)*s23^2 + (-2*s12 - 5*s13)*s23^
                3) + p1q*p2q^2*(84*s12^3*s13 - 420*s12^2*s13^2 -
              336*s12*s13^3 + 168*s13^4 + (6*s12^3 - 254*s12^2*s13 -
                1222*s12*s13^2 - 206*s13^3)*s23 + (-5*s12^2 - 278*s12*s13 -
                297*s13^2)*s23^2 + (-10*s12 + 78*s13)*s23^3 + s23^4) +
            p1q^3*((-168*s12^2*s13 - 252*s12*s13^2 - 84*s13^3)*s23 +
              (-3*s12^2 - 46*s12*s13 + 41*s13^2)*s23^2 + 128*s13*s23^3 +
              3*s23^4) + p1q^2*p2q*(84*s12^3*s13 - 84*s12^2*s13^2 -
              168*s12*s13^3 + (2*s12^3 - 253*s12^2*s13 - 800*s12*s13^2 -
                293*s13^3)*s23 + (-10*s12^2 - 22*s12*s13 + 36*s13^2)*s23^2 +
              (-8*s12 + 333*s13)*s23^3 + 4*s23^4)) +
          p3q*(p2q^4*(84*s12*s13^3 + 84*s13^4 + (s12^3 - 44*s12^2*s13 -
                47*s12*s13^2 + 82*s13^3)*s23 + (-50*s12*s13 - 6*s13^2)*s23^
                2 + (-s12 - 4*s13)*s23^3) + p1q*p2q^3*(-168*s12^2*s13^2 +
              84*s12*s13^3 + 252*s13^4 + (2*s12^3 - 214*s12^2*s13 -
                550*s12*s13^2 + 86*s13^3)*s23 + (-4*s12^2 - 228*s12*s13 -
                172*s13^2)*s23^2 + (-4*s12 - 4*s13)*s23^3 + 2*s23^4) +
            p1q^4*((84*s12*s13 + 84*s13^2)*s23^2 + (2*s12 + 86*s13)*s23^3 +
              2*s23^4) + p1q^2*p2q^2*(-168*s12^2*s13^2 - 84*s12*s13^3 +
              84*s13^4 + (s12^3 - 296*s12^2*s13 - 883*s12*s13^2 - 334*s13^3)*
               s23 + (-8*s12^2 - 190*s12*s13 - 302*s13^2)*s23^2 +
              (-5*s12 + 120*s13)*s23^3 + 4*s23^4) + p1q^3*p2q*
             ((-84*s12^2*s13 - 168*s12*s13^2 - 84*s13^3)*s23 +
              (-4*s12^2 + 244*s12*s13 + 248*s13^2)*s23^2 + (2*s12 + 338*s13)*
               s23^3 + 6*s23^4)))*Log(s23/(s12 + s13 + s23)))/
        (p1q*p2q^4*(27*s12*s13 + 27*s13^2)*s23^2 +
         p3q^5*(27*s12*s13 + 27*s13^2)*s23^2 - 27*p1q^3*p2q^2*s13*s23^3 +
         p1q^2*p2q^3*((27*s12*s13 + 27*s13^2)*s23^2 - 27*s13*s23^3) +
         p3q^2*(p2q^3*(108*s12*s13 + 108*s13^2)*s23^2 - 27*p1q^3*s13*s23^3 +
           p1q^2*p2q*((81*s12*s13 + 81*s13^2)*s23^2 - 135*s13*s23^3) +
           p1q*p2q^2*((243*s12*s13 + 243*s13^2)*s23^2 - 81*s13*s23^3)) +
         p3q^3*(p2q^2*(162*s12*s13 + 162*s13^2)*s23^2 +
           p1q*p2q*((189*s12*s13 + 189*s13^2)*s23^2 - 81*s13*s23^3) +
           p1q^2*((27*s12*s13 + 27*s13^2)*s23^2 - 54*s13*s23^3)) +
         p3q^4*(p2q*(108*s12*s13 + 108*s13^2)*s23^2 +
           p1q*((54*s12*s13 + 54*s13^2)*s23^2 - 27*s13*s23^3)) +
         p3q*(p2q^4*(27*s12*s13 + 27*s13^2)*s23^2 - 54*p1q^3*p2q*s13*s23^3 +
           p1q^2*p2q^2*((81*s12*s13 + 81*s13^2)*s23^2 - 108*s13*s23^3) +
           p1q*p2q^3*((135*s12*s13 + 135*s13^2)*s23^2 - 27*s13*s23^3)))) +
     Log(p1q/(p1q + p2q + p3q))*((p2q^3*(-2*s12*s13 - 2*s13^2 - 2*s13*s23) +
         p3q^3*(6*s12^2 + 8*s12*s13 + 6*s13^2 + (-40*s12 - 4*s13)*s23 -
           42*s23^2) + p1q^2*p2q*(-2*s12*s13 + 2*s13^2 + (-44*s12 - 6*s13)*
            s23 - 40*s23^2) + p1q^3*((-2*s12 - 2*s13)*s23 - 2*s23^2) +
         p1q*p2q^2*(4*s12*s13 + 8*s13^2 + (-2*s12 + 42*s13)*s23 + 2*s23^2) +
         p3q*(p2q^2*(2*s12^2 + 2*s12*s13 + 4*s13^2 + (-2*s12 + 36*s13)*s23) +
           p1q*p2q*(2*s12^2 + 4*s12*s13 + 14*s13^2 + (-92*s12 + 28*s13)*s23 -
             82*s23^2) + p1q^2*(2*s12^2 - 2*s12*s13 + (-46*s12 - 12*s13)*
              s23 - 44*s23^2)) + p3q^2*(p1q*(6*s12^2 + 4*s12*s13 + 6*s13^2 +
             (-88*s12 - 16*s13)*s23 - 86*s23^2) + p2q*(6*s12^2 + 8*s12*s13 +
             10*s13^2 + (-44*s12 + 32*s13)*s23 - 42*s23^2)))/
        (27*p1q^2*p2q*s13*s23 + 27*p1q*p2q^2*s13*s23 + 27*p3q^3*s13*s23 +
         p3q^2*(54*p1q*s13*s23 + 54*p2q*s13*s23) +
         p3q*(27*p1q^2*s13*s23 + 81*p1q*p2q*s13*s23 + 27*p2q^2*s13*s23)) +
       ((p1q*p2q^4*(-2*s12*s13^3 - 2*s13^4 + (-84*s12*s13^2 - 86*s13^3)*s23 -
            84*s13^2*s23^2) + p1q^5*((s12^2*s13 + 2*s12*s13^2 + s13^3)*s23 +
            (2*s12*s13 + 2*s13^2)*s23^2 + s13*s23^3) +
          p3q^5*(-2*s12^3*s13 - 2*s12^2*s13^2 + (-84*s12^3 - 86*s12^2*s13)*
             s23 + (-84*s12^2 + 42*s12*s13 + 42*s13^2)*s23^2 +
            42*s13*s23^3) + p1q^2*p2q^3*(s12^2*s13^2 - 2*s12*s13^3 -
            3*s13^4 + (84*s12^2*s13 + 46*s12*s13^2 - 42*s13^3)*s23 +
            (252*s12*s13 + 129*s13^2)*s23^2 + 168*s13*s23^3) +
          p1q^4*p2q*(s12^2*s13^2 - s13^4 + (44*s12^2*s13 + 46*s12*s13^2)*
             s23 + (44*s12*s13 + s13^2)*s23^2 + (-84*s12 - 84*s13)*s23^3 -
            84*s23^4) + p1q^3*p2q^2*(2*s12^2*s13^2 - 2*s13^4 +
            (85*s12^2*s13 + 90*s12*s13^2 + s13^3)*s23 +
            (210*s12*s13 + 128*s13^2)*s23^2 + (-84*s12 + 41*s13)*s23^3 -
            84*s23^4) + p3q^4*(p2q*(-2*s12^3*s13 + 2*s12^2*s13^2 +
              4*s12*s13^3 + (-168*s12^3 - 42*s12^2*s13 + 132*s12*s13^2)*s23 +
              (-168*s12^2 + 254*s12*s13 + 126*s13^2)*s23^2 + 126*s13*s23^3) +
            p1q*(-6*s12^3*s13 - 6*s12^2*s13^2 + (-168*s12^3 - 130*s12^2*s13 +
                44*s12*s13^2)*s23 + (338*s12*s13 + 126*s13^2)*s23^2 +
              (168*s12 + 126*s13)*s23^3)) +
          p3q^2*(p2q^3*(3*s12^2*s13^2 - 3*s13^4 + (168*s12^2*s13 +
                46*s12*s13^2 - 128*s13^3)*s23 + (252*s12*s13 - 41*s13^2)*s23^
                2 + 84*s13*s23^3) + p1q*p2q^2*(-2*s12^3*s13 +
              10*s12^2*s13^2 + 8*s12*s13^3 - 4*s13^4 + (-84*s12^3 +
                253*s12^2*s13 + 22*s12*s13^2 - 333*s13^3)*s23 +
              (84*s12^2 + 800*s12*s13 - 36*s13^2)*s23^2 + (168*s12 + 293*s13)*
               s23^3) + p1q^3*(-4*s12^3*s13 - 2*s12^2*s13^2 + 2*s12*s13^3 +
              (127*s12^2*s13 + 138*s12*s13^2 + 5*s13^3)*s23 +
              (168*s12^2 + 342*s12*s13 + 48*s13^2)*s23^2 - 125*s13*s23^3 -
              168*s23^4) + p1q^2*p2q*(-6*s12^3*s13 + 5*s12^2*s13^2 +
              10*s12*s13^3 - s13^4 + (-84*s12^3 + 254*s12^2*s13 +
                278*s12*s13^2 - 78*s13^3)*s23 + (420*s12^2 + 1222*s12*s13 +
                297*s13^2)*s23^2 + (336*s12 + 206*s13)*s23^3 - 168*s23^4)) +
          p3q^3*(p2q^2*(-(s12^3*s13) + 4*s12^2*s13^2 + 3*s12*s13^3 -
              2*s13^4 + (-84*s12^3 + 210*s12^2*s13 + 258*s12*s13^2 -
                44*s13^3)*s23 + (-84*s12^2 + 463*s12*s13 + 126*s13^2)*s23^2 +
              168*s13*s23^3) + p1q*p2q*(-6*s12^3*s13 + 4*s12^2*s13^2 +
              10*s12*s13^3 + (-252*s12^3 + 42*s12^2*s13 + 228*s12*s13^2 -
                82*s13^3)*s23 + (84*s12^2 + 970*s12*s13 + 252*s13^2)*s23^2 +
              (336*s12 + 334*s13)*s23^3) + p1q^2*(-7*s12^3*s13 -
              6*s12^2*s13^2 + s12*s13^3 + (-84*s12^3 + 40*s12^2*s13 +
                134*s12*s13^2 + 2*s13^3)*s23 + (252*s12^2 + 593*s12*s13 +
                128*s13^2)*s23^2 + (252*s12 + 42*s13)*s23^3 - 84*s23^4)) +
          p3q*(p2q^4*(-2*s12*s13^3 - 2*s13^4 + (-84*s12*s13^2 - 86*s13^3)*
               s23 - 84*s13^2*s23^2) + p1q*p2q^3*(4*s12^2*s13^2 -
              2*s12*s13^3 - 6*s13^4 + (84*s12^2*s13 - 244*s12*s13^2 -
                338*s13^3)*s23 + (168*s12*s13 - 248*s13^2)*s23^2 +
              84*s13*s23^3) + p1q^3*p2q*(-2*s12^3*s13 + 4*s12^2*s13^2 +
              4*s12*s13^3 - 2*s13^4 + (214*s12^2*s13 + 228*s12*s13^2 +
                4*s13^3)*s23 + (168*s12^2 + 550*s12*s13 + 172*s13^2)*s23^2 +
              (-84*s12 - 86*s13)*s23^3 - 252*s23^4) +
            p1q^4*(-(s12^3*s13) + s12*s13^3 + (44*s12^2*s13 + 50*s12*s13^2 +
                4*s13^3)*s23 + (47*s12*s13 + 6*s13^2)*s23^2 +
              (-84*s12 - 82*s13)*s23^3 - 84*s23^4) + p1q^2*p2q^2*
             (-(s12^3*s13) + 8*s12^2*s13^2 + 5*s12*s13^3 - 4*s13^4 +
              (296*s12^2*s13 + 190*s12*s13^2 - 120*s13^3)*s23 +
              (168*s12^2 + 883*s12*s13 + 302*s13^2)*s23^2 +
              (84*s12 + 334*s13)*s23^3 - 84*s23^4)))*
         Log((p1q + p3q)/(p1q + p2q + p3q)))/(-27*p1q^2*p2q^3*s13^3*s23 +
         p1q^4*p2q*(27*s12*s13^2*s23 + 27*s13^2*s23^2) +
         p3q^5*(27*s12*s13^2*s23 + 27*s13^2*s23^2) +
         p1q^3*p2q^2*((27*s12*s13^2 - 27*s13^3)*s23 + 27*s13^2*s23^2) +
         p3q^4*(p2q*((54*s12*s13^2 - 27*s13^3)*s23 + 54*s13^2*s23^2) +
           p1q*(108*s12*s13^2*s23 + 108*s13^2*s23^2)) +
         p3q*(-54*p1q*p2q^3*s13^3*s23 + p1q^4*(27*s12*s13^2*s23 +
             27*s13^2*s23^2) + p1q^2*p2q^2*((81*s12*s13^2 - 108*s13^3)*s23 +
             81*s13^2*s23^2) + p1q^3*p2q*((135*s12*s13^2 - 27*s13^3)*s23 +
             135*s13^2*s23^2)) + p3q^3*(p2q^2*((27*s12*s13^2 - 54*s13^3)*
              s23 + 27*s13^2*s23^2) + p1q^2*(162*s12*s13^2*s23 +
             162*s13^2*s23^2) + p1q*p2q*((189*s12*s13^2 - 81*s13^3)*s23 +
             189*s13^2*s23^2)) + p3q^2*(-27*p2q^3*s13^3*s23 +
           p1q*p2q^2*((81*s12*s13^2 - 135*s13^3)*s23 + 81*s13^2*s23^2) +
           p1q^3*(108*s12*s13^2*s23 + 108*s13^2*s23^2) +
           p1q^2*p2q*((243*s12*s13^2 - 81*s13^3)*s23 + 243*s13^2*s23^2))) +
       ((p3q^5*(12*s12^3*s13 + 12*s12^2*s13^2 + (-2*s12^3 + 10*s12^2*s13 -
              6*s12*s13^2 - 6*s13^3)*s23 + (-2*s12^2 - 6*s13^2)*s23^2) +
          p2q^5*((s12^2*s13 + 2*s12*s13^2 + s13^3)*s23 +
            (2*s12*s13 + 2*s13^2)*s23^2 + s13*s23^3) +
          p1q^3*p2q^2*((-12*s12^2*s13 - 36*s12*s13^2 - 24*s13^3)*s23 +
            (s12^2 - 2*s12*s13 - 15*s13^2)*s23^2 + (-2*s12 + 6*s13)*s23^3 -
            3*s23^4) + p1q^2*p2q^3*(12*s12*s13^3 + 12*s13^4 +
            (-11*s12^2*s13 - 30*s12*s13^2 - 7*s13^3)*s23 +
            (2*s12^2 - 6*s12*s13 - 16*s13^2)*s23^2 + s13*s23^3 - 2*s23^4) +
          p1q^4*p2q*((12*s12*s13 + 12*s13^2)*s23^2 + (-2*s12 + 10*s13)*
             s23^3 - 2*s23^4) + p1q*p2q^4*(12*s12*s13^3 + 12*s13^4 +
            (-4*s12^2*s13 - 4*s12*s13^2 + 12*s13^3)*s23 +
            (s12^2 - 2*s12*s13 + s13^2)*s23^2 - s23^4) +
          p3q^4*(p2q*(24*s12^3*s13 - 24*s12*s13^3 + (-6*s12^3 +
                14*s12^2*s13 - 46*s12*s13^2 - 18*s13^3)*s23 +
              (-6*s12^2 - 4*s12*s13 - 18*s13^2)*s23^2) +
            p1q*(24*s12^3*s13 + 24*s12^2*s13^2 + (-2*s12^3 + 6*s12^2*s13 -
                34*s12*s13^2 - 18*s13^3)*s23 + (2*s12^2 - 12*s12*s13 -
                18*s13^2)*s23^2 + 4*s12*s23^3)) +
          p3q^3*(p2q^2*(12*s12^3*s13 - 36*s12^2*s13^2 - 36*s12*s13^3 +
              12*s13^4 + (-7*s12^3 - 8*s12^2*s13 - 79*s12*s13^2 - 6*s13^3)*
               s23 + (-6*s12^2 - 10*s12*s13 - 16*s13^2)*s23^2 +
              (s12 + 2*s13)*s23^3) + p1q*p2q*(36*s12^3*s13 - 12*s12^2*s13^2 -
              48*s12*s13^3 + (-6*s12^3 - 6*s12^2*s13 - 134*s12*s13^2 -
                50*s13^3)*s23 + (4*s12^2 - 12*s12*s13 - 36*s13^2)*s23^2 +
              (10*s12 + 14*s13)*s23^3) + p1q^2*(12*s12^3*s13 +
              12*s12^2*s13^2 + (-s12^3 - 30*s12^2*s13 - 65*s12*s13^2 -
                24*s13^3)*s23 + (4*s12^2 - 30*s12*s13 - 18*s13^2)*s23^2 +
              (3*s12 + 4*s13)*s23^3 - 2*s23^4)) +
          p3q*(p2q^4*(12*s12*s13^3 + 12*s13^4 + (-s12^3 - 4*s12^2*s13 -
                s12*s13^2 + 14*s13^3)*s23 + (2*s12*s13 + 6*s13^2)*s23^2 +
              (s12 + 4*s13)*s23^3) + p1q^3*p2q*((-12*s12^2*s13 -
                24*s12*s13^2 - 12*s13^3)*s23 + (4*s12^2 + 44*s12*s13 +
                40*s13^2)*s23^2 + (-2*s12 + 46*s13)*s23^3 - 6*s23^4) +
            p1q^2*p2q^2*(-24*s12^2*s13^2 - 12*s12*s13^3 + 12*s13^4 +
              (-s12^3 - 40*s12^2*s13 - 125*s12*s13^2 - 50*s13^3)*s23 +
              (8*s12^2 - 2*s12*s13 - 34*s13^2)*s23^2 + (5*s12 + 24*s13)*s23^
                3 - 4*s23^4) + p1q*p2q^3*(-24*s12^2*s13^2 + 12*s12*s13^3 +
              36*s13^4 + (-2*s12^3 - 26*s12^2*s13 - 74*s12*s13^2 + 10*s13^3)*
               s23 + (4*s12^2 - 12*s12*s13 - 20*s13^2)*s23^2 +
              (4*s12 + 4*s13)*s23^3 - 2*s23^4) +
            p1q^4*((12*s12*s13 + 12*s13^2)*s23^2 + (-2*s12 + 10*s13)*s23^3 -
              2*s23^4)) + p3q^2*(p2q^3*(-24*s12^2*s13^2 + 24*s13^4 +
              (-4*s12^3 - 17*s12^2*s13 - 42*s12*s13^2 + 19*s13^3)*s23 +
              (-2*s12^2 - 6*s12*s13)*s23^2 + (2*s12 + 5*s13)*s23^3) +
            p1q^2*p2q*(12*s12^3*s13 - 12*s12^2*s13^2 - 24*s12*s13^3 +
              (-2*s12^3 - 35*s12^2*s13 - 112*s12*s13^2 - 43*s13^3)*s23 +
              (10*s12^2 + 22*s12*s13 + 12*s13^2)*s23^2 + (8*s12 + 51*s13)*s23^
                3 - 4*s23^4) + p1q^3*((-24*s12^2*s13 - 36*s12*s13^2 -
                12*s13^3)*s23 + (3*s12^2 - 2*s12*s13 + 7*s13^2)*s23^2 +
              16*s13*s23^3 - 3*s23^4) + p1q*p2q^2*(12*s12^3*s13 -
              60*s12^2*s13^2 - 48*s12*s13^3 + 24*s13^4 + (-6*s12^3 -
                34*s12^2*s13 - 170*s12*s13^2 - 34*s13^3)*s23 +
              (5*s12^2 - 10*s12*s13 - 39*s13^2)*s23^2 + (10*s12 + 18*s13)*s23^
                3 - s23^4)))*Log((p2q + p3q)/(p1q + p2q + p3q)))/
        (p1q*p2q^4*(27*s12*s13 + 27*s13^2)*s23^2 +
         p3q^5*(27*s12*s13 + 27*s13^2)*s23^2 - 27*p1q^3*p2q^2*s13*s23^3 +
         p1q^2*p2q^3*((27*s12*s13 + 27*s13^2)*s23^2 - 27*s13*s23^3) +
         p3q^2*(p2q^3*(108*s12*s13 + 108*s13^2)*s23^2 - 27*p1q^3*s13*s23^3 +
           p1q^2*p2q*((81*s12*s13 + 81*s13^2)*s23^2 - 135*s13*s23^3) +
           p1q*p2q^2*((243*s12*s13 + 243*s13^2)*s23^2 - 81*s13*s23^3)) +
         p3q^3*(p2q^2*(162*s12*s13 + 162*s13^2)*s23^2 +
           p1q*p2q*((189*s12*s13 + 189*s13^2)*s23^2 - 81*s13*s23^3) +
           p1q^2*((27*s12*s13 + 27*s13^2)*s23^2 - 54*s13*s23^3)) +
         p3q^4*(p2q*(108*s12*s13 + 108*s13^2)*s23^2 +
           p1q*((54*s12*s13 + 54*s13^2)*s23^2 - 27*s13*s23^3)) +
         p3q*(p2q^4*(27*s12*s13 + 27*s13^2)*s23^2 - 54*p1q^3*p2q*s13*s23^3 +
           p1q^2*p2q^2*((81*s12*s13 + 81*s13^2)*s23^2 - 108*s13*s23^3) +
           p1q*p2q^3*((135*s12*s13 + 135*s13^2)*s23^2 - 27*s13*s23^3))) +
       ((p1q*p2q^4*((-2*s12*s13^2 - 2*s13^3)*s23 + (-84*s12*s13 - 86*s13^2)*
             s23^2 - 84*s13*s23^3) + p3q^5*(-12*s12^2*s13^2 +
            (4*s12^2*s13 - 6*s12*s13^2 + 6*s13^3)*s23 +
            (84*s12^2 + 42*s12*s13)*s23^2 - 42*s13*s23^3) +
          p1q^4*p2q*((12*s12*s13^2 + 12*s13^3)*s23 + (-2*s12*s13 + 10*s13^2)*
             s23^2 - 2*s13*s23^3) + p1q^2*p2q^3*(-12*s13^4 +
            (2*s12*s13^2 - 6*s13^3)*s23 + (-86*s12*s13 - 40*s13^2)*s23^2 +
            2*s13*s23^3 + 84*s23^4) + p1q^3*p2q^2*(-12*s13^4 +
            (10*s12*s13^2 + 2*s13^3)*s23 + (-46*s12*s13 + 8*s13^2)*s23^2 +
            42*s13*s23^3 + 84*s23^4) + p3q^4*
           (p1q*(-36*s12^2*s13^2 + (8*s12^2*s13 - 16*s12*s13^2 + 24*s13^3)*
               s23 + (84*s12^2 - 46*s12*s13 + 6*s13^2)*s23^2 +
              (-168*s12 - 126*s13)*s23^3) + p2q*(-12*s12^2*s13^2 +
              24*s12*s13^3 + (8*s12^2*s13 + 2*s12*s13^2 + 18*s13^3)*s23 +
              (252*s12^2 + 80*s12*s13 - 42*s13^2)*s23^2 - 168*s13*s23^3)) +
          p3q^3*(p1q*p2q*(-24*s12^2*s13^2 + 72*s12*s13^3 + (16*s12^2*s13 +
                36*s12*s13^2 + 76*s13^3)*s23 + (168*s12^2 - 348*s12*s13 -
                136*s13^2)*s23^2 + (-504*s12 - 500*s13)*s23^3) +
            p2q^2*(24*s12*s13^3 - 12*s13^4 + (6*s12^2*s13 + 12*s12*s13^2 +
                6*s13^3)*s23 + (252*s12^2 - 48*s12*s13 - 168*s13^2)*s23^2 -
              294*s13*s23^3) + p1q^2*(-36*s12^2*s13^2 + (6*s12^2*s13 +
                42*s13^3)*s23 + (-132*s12*s13 + 24*s13^2)*s23^2 +
              (-168*s12 - 42*s13)*s23^3 + 84*s23^4)) +
          p3q^2*(p1q*p2q^2*(48*s12*s13^3 - 36*s13^4 + (10*s12^2*s13 +
                34*s12*s13^2 + 16*s13^3)*s23 + (84*s12^2 - 642*s12*s13 -
                404*s13^2)*s23^2 + (-504*s12 - 708*s13)*s23^3) +
            p2q^3*(-12*s13^4 + (2*s12^2*s13 + 2*s12*s13^2 - 8*s13^3)*s23 +
              (84*s12^2 - 170*s12*s13 - 212*s13^2)*s23^2 - 252*s13*s23^3) +
            p1q^3*(-12*s12^2*s13^2 + (2*s12^2*s13 + 22*s12*s13^2 + 36*s13^3)*
               s23 + (-46*s12*s13 + 28*s13^2)*s23^2 + 40*s13*s23^3 +
              84*s23^4) + p1q^2*p2q*(-12*s12^2*s13^2 + 72*s12*s13^3 +
              (10*s12^2*s13 + 78*s12*s13^2 + 108*s13^3)*s23 +
              (-350*s12*s13 + 28*s13^2)*s23^2 + (-336*s12 - 80*s13)*s23^3 +
              252*s23^4)) + p3q*(p1q*p2q^3*(-24*s13^4 + (2*s12^2*s13 +
                4*s12*s13^2 - 14*s13^3)*s23 + (-424*s12*s13 - 336*s13^2)*s23^
                2 + (-168*s12 - 418*s13)*s23^3) +
            p2q^4*((-2*s12*s13^2 - 2*s13^3)*s23 + (-84*s12*s13 - 86*s13^2)*
               s23^2 - 84*s13*s23^3) + p1q^4*((12*s12*s13^2 + 12*s13^3)*s23 +
              (-2*s12*s13 + 10*s13^2)*s23^2 - 2*s13*s23^3) +
            p1q^3*p2q*(24*s12*s13^3 + (2*s12^2*s13 + 56*s12*s13^2 + 62*s13^3)*
               s23 + (-92*s12*s13 + 48*s13^2)*s23^2 + 82*s13*s23^3 +
              168*s23^4) + p1q^2*p2q^2*(24*s12*s13^3 - 36*s13^4 +
              (4*s12^2*s13 + 32*s12*s13^2 + 12*s13^3)*s23 + (-304*s12*s13 -
                60*s13^2)*s23^2 + (-168*s12 - 36*s13)*s23^3 + 252*s23^4)))*
         Log(-s12 - s13 - s23))/(27*p1q^3*p2q^2*s13^2*s23^2 +
         27*p1q^2*p2q^3*s13^2*s23^2 + 27*p3q^5*s13^2*s23^2 +
         p3q^4*(81*p1q*s13^2*s23^2 + 81*p2q*s13^2*s23^2) +
         p3q^3*(81*p1q^2*s13^2*s23^2 + 216*p1q*p2q*s13^2*s23^2 +
           81*p2q^2*s13^2*s23^2) + p3q^2*(27*p1q^3*s13^2*s23^2 +
           189*p1q^2*p2q*s13^2*s23^2 + 189*p1q*p2q^2*s13^2*s23^2 +
           27*p2q^3*s13^2*s23^2) + p3q*(54*p1q^3*p2q*s13^2*s23^2 +
           135*p1q^2*p2q^2*s13^2*s23^2 + 54*p1q*p2q^3*s13^2*s23^2)) +
       ((p1q*p2q^4*(2*s12*s13^3 + 2*s13^4 + (84*s12*s13^2 + 86*s13^3)*s23 +
            84*s13^2*s23^2) + p1q^2*p2q^3*(-(s12^2*s13^2) + 2*s12*s13^3 +
            3*s13^4 + (-84*s12^2*s13 - 46*s12*s13^2 + 42*s13^3)*s23 +
            (-252*s12*s13 - 129*s13^2)*s23^2 - 168*s13*s23^3) +
          p3q^5*(2*s12^3*s13 + 2*s12^2*s13^2 + (84*s12^3 + 86*s12^2*s13)*
             s23 + (84*s12^2 - 42*s12*s13 - 42*s13^2)*s23^2 - 42*s13*s23^3) +
          p1q^5*((-(s12^2*s13) - 2*s12*s13^2 - s13^3)*s23 +
            (-2*s12*s13 - 2*s13^2)*s23^2 - s13*s23^3) +
          p1q^3*p2q^2*(-2*s12^2*s13^2 + 2*s13^4 +
            (-85*s12^2*s13 - 90*s12*s13^2 - s13^3)*s23 +
            (-210*s12*s13 - 128*s13^2)*s23^2 + (84*s12 - 41*s13)*s23^3 +
            84*s23^4) + p1q^4*p2q*(-(s12^2*s13^2) + s13^4 +
            (-44*s12^2*s13 - 46*s12*s13^2)*s23 + (-44*s12*s13 - s13^2)*
             s23^2 + (84*s12 + 84*s13)*s23^3 + 84*s23^4) +
          p3q^4*(p1q*(6*s12^3*s13 + 6*s12^2*s13^2 + (168*s12^3 +
                130*s12^2*s13 - 44*s12*s13^2)*s23 + (-338*s12*s13 -
                126*s13^2)*s23^2 + (-168*s12 - 126*s13)*s23^3) +
            p2q*(2*s12^3*s13 - 2*s12^2*s13^2 - 4*s12*s13^3 + (168*s12^3 +
                42*s12^2*s13 - 132*s12*s13^2)*s23 + (168*s12^2 -
                254*s12*s13 - 126*s13^2)*s23^2 - 126*s13*s23^3)) +
          p3q^3*(p1q*p2q*(6*s12^3*s13 - 4*s12^2*s13^2 - 10*s12*s13^3 +
              (252*s12^3 - 42*s12^2*s13 - 228*s12*s13^2 + 82*s13^3)*s23 +
              (-84*s12^2 - 970*s12*s13 - 252*s13^2)*s23^2 + (-336*s12 -
                334*s13)*s23^3) + p2q^2*(s12^3*s13 - 4*s12^2*s13^2 -
              3*s12*s13^3 + 2*s13^4 + (84*s12^3 - 210*s12^2*s13 -
                258*s12*s13^2 + 44*s13^3)*s23 + (84*s12^2 - 463*s12*s13 -
                126*s13^2)*s23^2 - 168*s13*s23^3) +
            p1q^2*(7*s12^3*s13 + 6*s12^2*s13^2 - s12*s13^3 +
              (84*s12^3 - 40*s12^2*s13 - 134*s12*s13^2 - 2*s13^3)*s23 +
              (-252*s12^2 - 593*s12*s13 - 128*s13^2)*s23^2 +
              (-252*s12 - 42*s13)*s23^3 + 84*s23^4)) +
          p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 10*s12^2*s13^2 - 8*s12*s13^3 +
              4*s13^4 + (84*s12^3 - 253*s12^2*s13 - 22*s12*s13^2 + 333*s13^3)*
               s23 + (-84*s12^2 - 800*s12*s13 + 36*s13^2)*s23^2 +
              (-168*s12 - 293*s13)*s23^3) + p2q^3*(-3*s12^2*s13^2 + 3*s13^4 +
              (-168*s12^2*s13 - 46*s12*s13^2 + 128*s13^3)*s23 +
              (-252*s12*s13 + 41*s13^2)*s23^2 - 84*s13*s23^3) +
            p1q^2*p2q*(6*s12^3*s13 - 5*s12^2*s13^2 - 10*s12*s13^3 + s13^4 +
              (84*s12^3 - 254*s12^2*s13 - 278*s12*s13^2 + 78*s13^3)*s23 +
              (-420*s12^2 - 1222*s12*s13 - 297*s13^2)*s23^2 +
              (-336*s12 - 206*s13)*s23^3 + 168*s23^4) +
            p1q^3*(4*s12^3*s13 + 2*s12^2*s13^2 - 2*s12*s13^3 +
              (-127*s12^2*s13 - 138*s12*s13^2 - 5*s13^3)*s23 +
              (-168*s12^2 - 342*s12*s13 - 48*s13^2)*s23^2 + 125*s13*s23^3 +
              168*s23^4)) + p3q*(p2q^4*(2*s12*s13^3 + 2*s13^4 +
              (84*s12*s13^2 + 86*s13^3)*s23 + 84*s13^2*s23^2) +
            p1q*p2q^3*(-4*s12^2*s13^2 + 2*s12*s13^3 + 6*s13^4 +
              (-84*s12^2*s13 + 244*s12*s13^2 + 338*s13^3)*s23 +
              (-168*s12*s13 + 248*s13^2)*s23^2 - 84*s13*s23^3) +
            p1q^2*p2q^2*(s12^3*s13 - 8*s12^2*s13^2 - 5*s12*s13^3 + 4*s13^4 +
              (-296*s12^2*s13 - 190*s12*s13^2 + 120*s13^3)*s23 +
              (-168*s12^2 - 883*s12*s13 - 302*s13^2)*s23^2 +
              (-84*s12 - 334*s13)*s23^3 + 84*s23^4) +
            p1q^4*(s12^3*s13 - s12*s13^3 + (-44*s12^2*s13 - 50*s12*s13^2 -
                4*s13^3)*s23 + (-47*s12*s13 - 6*s13^2)*s23^2 +
              (84*s12 + 82*s13)*s23^3 + 84*s23^4) + p1q^3*p2q*
             (2*s12^3*s13 - 4*s12^2*s13^2 - 4*s12*s13^3 + 2*s13^4 +
              (-214*s12^2*s13 - 228*s12*s13^2 - 4*s13^3)*s23 +
              (-168*s12^2 - 550*s12*s13 - 172*s13^2)*s23^2 +
              (84*s12 + 86*s13)*s23^3 + 252*s23^4)))*
         Log(s13/(s12 + s13 + s23)))/(-27*p1q^2*p2q^3*s13^3*s23 +
         p1q^4*p2q*(27*s12*s13^2*s23 + 27*s13^2*s23^2) +
         p3q^5*(27*s12*s13^2*s23 + 27*s13^2*s23^2) +
         p1q^3*p2q^2*((27*s12*s13^2 - 27*s13^3)*s23 + 27*s13^2*s23^2) +
         p3q^4*(p2q*((54*s12*s13^2 - 27*s13^3)*s23 + 54*s13^2*s23^2) +
           p1q*(108*s12*s13^2*s23 + 108*s13^2*s23^2)) +
         p3q*(-54*p1q*p2q^3*s13^3*s23 + p1q^4*(27*s12*s13^2*s23 +
             27*s13^2*s23^2) + p1q^2*p2q^2*((81*s12*s13^2 - 108*s13^3)*s23 +
             81*s13^2*s23^2) + p1q^3*p2q*((135*s12*s13^2 - 27*s13^3)*s23 +
             135*s13^2*s23^2)) + p3q^3*(p2q^2*((27*s12*s13^2 - 54*s13^3)*
              s23 + 27*s13^2*s23^2) + p1q^2*(162*s12*s13^2*s23 +
             162*s13^2*s23^2) + p1q*p2q*((189*s12*s13^2 - 81*s13^3)*s23 +
             189*s13^2*s23^2)) + p3q^2*(-27*p2q^3*s13^3*s23 +
           p1q*p2q^2*((81*s12*s13^2 - 135*s13^3)*s23 + 81*s13^2*s23^2) +
           p1q^3*(108*s12*s13^2*s23 + 108*s13^2*s23^2) +
           p1q^2*p2q*((243*s12*s13^2 - 81*s13^3)*s23 + 243*s13^2*s23^2))) +
       ((p3q^6*(-2*s12^3*s13 - 8*s12^2*s13^2 + 6*s12*s13^3 +
            (-84*s12^3 - 124*s12^2*s13 - 42*s12*s13^2 + 6*s13^3)*s23 +
            (42*s12*s13 + 42*s13^2)*s23^2) + p1q*p2q^5*(s12^2*s13^2 +
            2*s12*s13^3 + s13^4 + (84*s12^2*s13 + 168*s12*s13^2 + 84*s13^3)*
             s23 + (84*s12*s13 + 83*s13^2)*s23^2) + p1q^2*p2q^4*
           (2*s12^2*s13^2 + 8*s12*s13^3 - 6*s13^4 +
            (85*s12^2*s13 + 126*s12*s13^2 + 37*s13^3)*s23 +
            (-86*s12*s13 - 88*s13^2)*s23^2 + (-84*s12 - 167*s13)*s23^3) +
          p1q^3*p2q^3*(s12^2*s13^2 + 18*s12*s13^3 - 7*s13^4 +
            (44*s12^2*s13 + 46*s12*s13^2 + 2*s13^3)*s23 +
            (-128*s12*s13 - 83*s13^2)*s23^2 + (-84*s12 - 80*s13)*s23^3 +
            84*s23^4) + p1q^4*p2q^2*(12*s12*s13^3 +
            (s12^2*s13 + 4*s12*s13^2 + 7*s13^3)*s23 + (-42*s12*s13 + 4*s13^2)*
             s23^2 + 45*s13*s23^3 + 84*s23^4) +
          p3q^4*(p2q^2*(-7*s12^3*s13 - 20*s12^2*s13^2 + 41*s12*s13^3 -
              18*s13^4 + (-504*s12^3 - 530*s12^2*s13 + 188*s12*s13^2 +
                226*s13^3)*s23 + (461*s12*s13 + 460*s13^2)*s23^2) +
            p1q^2*(-3*s12^3*s13 - 18*s12^2*s13^2 + 57*s12*s13^3 +
              (134*s12^2*s13 + 134*s12*s13^2 + 36*s13^3)*s23 +
              (252*s12^2 + 157*s12*s13 + 44*s13^2)*s23^2 + (-252*s12 -
                208*s13)*s23^3) + p1q*p2q*(-12*s12^3*s13 - 64*s12^2*s13^2 +
              84*s12*s13^3 - 32*s13^4 + (-252*s12^3 + 152*s12^2*s13 +
                542*s12*s13^2 + 202*s13^3)*s23 + (924*s12^2 + 1368*s12*s13 +
                570*s13^2)*s23^2 - 168*s13*s23^3)) +
          p3q^5*(p2q*(-6*s12^3*s13 - 22*s12^2*s13^2 + 26*s12*s13^3 -
              6*s13^4 + (-336*s12^3 - 452*s12^2*s13 - 76*s12*s13^2 +
                60*s13^3)*s23 + (210*s12*s13 + 210*s13^2)*s23^2) +
            p1q*(-4*s12^3*s13 - 20*s12^2*s13^2 + 32*s12*s13^3 +
              (-84*s12^3 - 34*s12^2*s13 + 46*s12*s13^2 + 24*s13^3)*s23 +
              (252*s12^2 + 332*s12*s13 + 126*s13^2)*s23^2 - 42*s13*s23^3)) +
          p3q^3*(p2q^3*(-4*s12^3*s13 - 5*s12^2*s13^2 + 30*s12*s13^3 -
              17*s13^4 + (-336*s12^3 - 116*s12^2*s13 + 604*s12*s13^2 +
                380*s13^3)*s23 + (544*s12*s13 + 541*s13^2)*s23^2) +
            p1q^2*p2q*(-8*s12^3*s13 - 77*s12^2*s13^2 + 90*s12*s13^3 -
              57*s13^4 + (484*s12^2*s13 + 456*s12*s13^2 + 48*s13^3)*s23 +
              (672*s12^2 + 260*s12*s13 - 79*s13^2)*s23^2 + (-840*s12 -
                832*s13)*s23^3) + p1q*p2q^2*(-13*s12^3*s13 - 54*s12^2*s13^2 +
              111*s12*s13^3 - 64*s13^4 + (-252*s12^3 + 745*s12^2*s13 +
                1562*s12*s13^2 + 601*s13^3)*s23 + (1260*s12^2 +
                2157*s12*s13 + 1020*s13^2)*s23^2 - 293*s13*s23^3) +
            p1q^3*(-(s12^3*s13) - 6*s12^2*s13^2 + 43*s12*s13^3 +
              (45*s12^2*s13 + 50*s12*s13^2 + 25*s13^3)*s23 + (-175*s12*s13 -
                36*s13^2)*s23^2 + (-252*s12 - 121*s13)*s23^3 + 84*s23^4)) +
          p3q^2*(p2q^4*(-(s12^3*s13) + 2*s12^2*s13^2 + 11*s12*s13^3 -
              4*s13^4 + (-84*s12^3 + 170*s12^2*s13 + 550*s12*s13^2 +
                292*s13^3)*s23 + (335*s12*s13 + 332*s13^2)*s23^2) +
            p1q^2*p2q^2*(-7*s12^3*s13 - 50*s12^2*s13^2 + 113*s12*s13^3 -
              72*s13^4 + (651*s12^2*s13 + 732*s12*s13^2 + 121*s13^3)*s23 +
              (588*s12^2 - 37*s12*s13 - 330*s13^2)*s23^2 + (-1008*s12 -
                1207*s13)*s23^3) + p1q*p2q^3*(-6*s12^3*s13 - 7*s12^2*s13^2 +
              76*s12*s13^3 - 43*s13^4 + (-84*s12^3 + 982*s12^2*s13 +
                1826*s12*s13^2 + 752*s13^3)*s23 + (756*s12^2 + 1622*s12*s13 +
                905*s13^2)*s23^2 - 250*s13*s23^3) +
            p1q^4*(12*s12*s13^3 + (s12^2*s13 + 4*s12*s13^2 + 7*s13^3)*s23 +
              (-42*s12*s13 + 4*s13^2)*s23^2 + 45*s13*s23^3 + 84*s23^4) +
            p1q^3*p2q*(-2*s12^3*s13 - 47*s12^2*s13^2 + 32*s12*s13^3 -
              43*s13^4 + (134*s12^2*s13 + 74*s12*s13^2 - 20*s13^3)*s23 +
              (-478*s12*s13 - 191*s13^2)*s23^2 + (-588*s12 - 322*s13)*s23^3 +
              252*s23^4)) + p3q*(p2q^5*(s12^2*s13^2 + 2*s12*s13^3 + s13^4 +
              (84*s12^2*s13 + 168*s12*s13^2 + 84*s13^3)*s23 +
              (84*s12*s13 + 83*s13^2)*s23^2) + p1q^2*p2q^3*(-2*s12^3*s13 -
              s12^2*s13^2 + 64*s12*s13^3 - 33*s13^4 + (386*s12^2*s13 +
                512*s12*s13^2 + 122*s13^3)*s23 + (168*s12^2 - 226*s12*s13 -
                307*s13^2)*s23^2 + (-504*s12 - 750*s13)*s23^3) +
            p1q*p2q^4*(-(s12^3*s13) + 4*s12^2*s13^2 + 19*s12*s13^3 -
              10*s13^4 + (507*s12^2*s13 + 928*s12*s13^2 + 413*s13^3)*s23 +
              (168*s12^2 + 585*s12*s13 + 412*s13^2)*s23^2 - 83*s13*s23^3) +
            p1q^4*p2q*(-12*s12^2*s13^2 - 12*s13^4 + (2*s12^2*s13 -
                16*s12*s13^2 - 10*s13^3)*s23 + (-84*s12*s13 - 4*s13^2)*s23^
                2 + 90*s13*s23^3 + 168*s23^4) + p1q^3*p2q^2*
             (-(s12^3*s13) - 16*s12^2*s13^2 + 55*s12*s13^3 - 26*s13^4 +
              (133*s12^2*s13 + 118*s12*s13^2 + 5*s13^3)*s23 +
              (-431*s12*s13 - 214*s13^2)*s23^2 + (-420*s12 - 281*s13)*s23^3 +
              252*s23^4)))*Log(s23/(s12 + s13 + s23)))/
        (p1q^2*p2q^4*(27*s12*s13^2 + 27*s13^3)*s23 +
         p3q^6*(27*s12*s13^2 + 27*s13^3)*s23 - 27*p1q^4*p2q^2*s13^2*s23^2 +
         p1q^3*p2q^3*((27*s12*s13^2 + 27*s13^3)*s23 - 27*s13^2*s23^2) +
         p3q^4*(p2q^2*(162*s12*s13^2 + 162*s13^3)*s23 +
           p1q^2*((81*s12*s13^2 + 81*s13^3)*s23 - 81*s13^2*s23^2) +
           p1q*p2q*((297*s12*s13^2 + 297*s13^3)*s23 - 81*s13^2*s23^2)) +
         p3q^3*(p2q^3*(108*s12*s13^2 + 108*s13^3)*s23 +
           p1q^2*p2q*((270*s12*s13^2 + 270*s13^3)*s23 - 216*s13^2*s23^2) +
           p1q^3*((27*s12*s13^2 + 27*s13^3)*s23 - 81*s13^2*s23^2) +
           p1q*p2q^2*((405*s12*s13^2 + 405*s13^3)*s23 - 81*s13^2*s23^2)) +
         p3q*(p1q*p2q^4*(54*s12*s13^2 + 54*s13^3)*s23 - 54*p1q^4*p2q*s13^2*
            s23^2 + p1q^3*p2q^2*((81*s12*s13^2 + 81*s13^3)*s23 -
             135*s13^2*s23^2) + p1q^2*p2q^3*((162*s12*s13^2 + 162*s13^3)*
              s23 - 54*s13^2*s23^2)) + p3q^5*(p2q*(108*s12*s13^2 + 108*s13^3)*
            s23 + p1q*((81*s12*s13^2 + 81*s13^3)*s23 - 27*s13^2*s23^2)) +
         p3q^2*(p2q^4*(27*s12*s13^2 + 27*s13^3)*s23 - 27*p1q^4*s13^2*s23^2 +
           p1q^3*p2q*((81*s12*s13^2 + 81*s13^3)*s23 - 189*s13^2*s23^2) +
           p1q^2*p2q^2*((324*s12*s13^2 + 324*s13^3)*s23 - 189*s13^2*s23^2) +
           p1q*p2q^3*((243*s12*s13^2 + 243*s13^3)*s23 - 27*s13^2*s23^2)))) +
     Log(-s12 - s13 - s23)*
      ((p1q*p2q^4*((58*s12*s13^2 + 58*s13^3)*s23 + (-252*s12*s13 - 194*s13^2)*
            s23^2 - 252*s13*s23^3) + p3q^5*(252*s12^2*s13^2 +
           (-132*s12^2*s13 + 62*s12*s13^2 - 174*s13^3)*s23 +
           (252*s12^2 + 62*s12*s13 + 32*s13^2)*s23^2 - 174*s13*s23^3) +
         p1q^4*p2q*((-252*s12*s13^2 - 252*s13^3)*s23 +
           (58*s12*s13 - 194*s13^2)*s23^2 + 58*s13*s23^3) +
         p1q^2*p2q^3*(252*s13^4 + (-74*s12*s13^2 + 62*s13^3)*s23 +
           (-194*s12*s13 - 120*s13^2)*s23^2 - 58*s13*s23^3 + 252*s23^4) +
         p1q^3*p2q^2*(252*s13^4 + (-194*s12*s13^2 - 58*s13^3)*s23 +
           (-74*s12*s13 - 120*s13^2)*s23^2 + 62*s13*s23^3 + 252*s23^4) +
         p3q^4*(p1q*(756*s12^2*s13^2 + (-264*s12^2*s13 + 240*s12*s13^2 - 600*
                s13^3)*s23 + (252*s12^2 - 170*s12*s13 + 34*s13^2)*s23^2 +
             (-504*s12 - 506*s13)*s23^3) + p2q*(252*s12^2*s13^2 -
             504*s12*s13^3 + (-264*s12^2*s13 - 170*s12*s13^2 - 506*s13^3)*
              s23 + (756*s12^2 + 240*s12*s13 + 34*s13^2)*s23^2 -
             600*s13*s23^3)) + p3q^3*(p1q*p2q*(504*s12^2*s13^2 -
             1512*s12*s13^3 + (-496*s12^2*s13 - 948*s12*s13^2 - 1884*s13^3)*
              s23 + (504*s12^2 - 948*s12*s13 - 728*s13^2)*s23^2 +
             (-1512*s12 - 1884*s13)*s23^3) + p2q^2*(-504*s12*s13^3 +
             252*s13^4 + (-190*s12^2*s13 - 332*s12*s13^2 - 238*s13^3)*s23 +
             (756*s12^2 - 16*s12*s13 - 280*s13^2)*s23^2 - 930*s13*s23^3) +
           p1q^2*(756*s12^2*s13^2 + (-190*s12^2*s13 - 16*s12*s13^2 - 930*
                s13^3)*s23 + (-332*s12*s13 - 280*s13^2)*s23^2 +
             (-504*s12 - 238*s13)*s23^3 + 252*s23^4)) +
         p3q^2*(p1q*p2q^2*(-1008*s12*s13^3 + 756*s13^4 +
             (-290*s12^2*s13 - 858*s12*s13^2 - 624*s13^3)*s23 +
             (252*s12^2 - 1670*s12*s13 - 1164*s13^2)*s23^2 +
             (-1512*s12 - 2444*s13)*s23^3) + p2q^3*(252*s13^4 +
             (-58*s12^2*s13 - 42*s12*s13^2 + 152*s13^3)*s23 +
             (252*s12^2 - 446*s12*s13 - 476*s13^2)*s23^2 - 756*s13*s23^3) +
           p1q^3*(252*s12^2*s13^2 + (-58*s12^2*s13 - 446*s12*s13^2 - 756*
                s13^3)*s23 + (-42*s12*s13 - 476*s13^2)*s23^2 +
             152*s13*s23^3 + 252*s23^4) + p1q^2*p2q*(252*s12^2*s13^2 -
             1512*s12*s13^3 + (-290*s12^2*s13 - 1670*s12*s13^2 - 2444*s13^3)*
              s23 + (-858*s12*s13 - 1164*s13^2)*s23^2 + (-1008*s12 - 624*s13)*
              s23^3 + 756*s23^4)) +
         p3q*(p1q*p2q^3*(504*s13^4 + (-58*s12^2*s13 - 116*s12*s13^2 + 214*
                s13^3)*s23 + (-1144*s12*s13 - 848*s13^2)*s23^2 +
             (-504*s12 - 1318*s13)*s23^3) + p2q^4*((58*s12*s13^2 + 58*s13^3)*
              s23 + (-252*s12*s13 - 194*s13^2)*s23^2 - 252*s13*s23^3) +
           p1q^4*((-252*s12*s13^2 - 252*s13^3)*s23 + (58*s12*s13 - 194*s13^2)*
              s23^2 + 58*s13*s23^3) + p1q^3*p2q*(-504*s12*s13^3 +
             (-58*s12^2*s13 - 1144*s12*s13^2 - 1318*s13^3)*s23 +
             (-116*s12*s13 - 848*s13^2)*s23^2 + 214*s13*s23^3 + 504*s23^4) +
           p1q^2*p2q^2*(-504*s12*s13^3 + 756*s13^4 + (-100*s12^2*s13 - 720*
                s12*s13^2 - 444*s13^3)*s23 + (-720*s12*s13 - 500*s13^2)*
              s23^2 + (-504*s12 - 444*s13)*s23^3 + 756*s23^4)))/
        (27*p1q^3*p2q^2*s13^2*s23^2 + 27*p1q^2*p2q^3*s13^2*s23^2 +
         27*p3q^5*s13^2*s23^2 + p3q^4*(81*p1q*s13^2*s23^2 +
           81*p2q*s13^2*s23^2) + p3q^3*(81*p1q^2*s13^2*s23^2 +
           216*p1q*p2q*s13^2*s23^2 + 81*p2q^2*s13^2*s23^2) +
         p3q^2*(27*p1q^3*s13^2*s23^2 + 189*p1q^2*p2q*s13^2*s23^2 +
           189*p1q*p2q^2*s13^2*s23^2 + 27*p2q^3*s13^2*s23^2) +
         p3q*(54*p1q^3*p2q*s13^2*s23^2 + 135*p1q^2*p2q^2*s13^2*s23^2 +
           54*p1q*p2q^3*s13^2*s23^2)) +
       ((p1q*p2q^4*((20*s12*s13^2 + 20*s13^3)*s23 + (-24*s12*s13 - 4*s13^2)*
             s23^2 - 24*s13*s23^3) + p3q^5*(24*s12^2*s13^2 +
            (-40*s12^2*s13 + 12*s12*s13^2 - 12*s13^3)*s23 +
            (24*s12^2 + 12*s12*s13)*s23^2 - 12*s13*s23^3) +
          p1q^4*p2q*((-24*s12*s13^2 - 24*s13^3)*s23 + (20*s12*s13 - 4*s13^2)*
             s23^2 + 20*s13*s23^3) + p1q^2*p2q^3*(24*s13^4 +
            (28*s12*s13^2 + 12*s13^3)*s23 + (-4*s12*s13 - 32*s13^2)*s23^2 -
            20*s13*s23^3 + 24*s23^4) + p1q^3*p2q^2*(24*s13^4 +
            (-4*s12*s13^2 - 20*s13^3)*s23 + (28*s12*s13 - 32*s13^2)*s23^2 +
            12*s13*s23^3 + 24*s23^4) + p3q^4*
           (p1q*(72*s12^2*s13^2 + (-80*s12^2*s13 + 64*s12*s13^2 - 48*s13^3)*
               s23 + (24*s12^2 + 28*s12*s13 - 12*s13^2)*s23^2 +
              (-48*s12 - 36*s13)*s23^3) + p2q*(24*s12^2*s13^2 -
              48*s12*s13^3 + (-80*s12^2*s13 + 28*s12*s13^2 - 36*s13^3)*s23 +
              (72*s12^2 + 64*s12*s13 - 12*s13^2)*s23^2 - 48*s13*s23^3)) +
          p3q^3*(p1q*p2q*(48*s12^2*s13^2 - 144*s12*s13^3 + (-160*s12^2*s13 +
                24*s12*s13^2 - 184*s13^3)*s23 + (48*s12^2 + 24*s12*s13 -
                176*s13^2)*s23^2 + (-144*s12 - 184*s13)*s23^3) +
            p2q^2*(-48*s12*s13^3 + 24*s13^4 + (-60*s12^2*s13 + 24*s12*s13^2 -
                12*s13^3)*s23 + (72*s12^2 + 48*s12*s13 - 48*s13^2)*s23^2 -
              84*s13*s23^3) + p1q^2*(72*s12^2*s13^2 + (-60*s12^2*s13 +
                48*s12*s13^2 - 84*s13^3)*s23 + (24*s12*s13 - 48*s13^2)*s23^
                2 + (-48*s12 - 12*s13)*s23^3 + 24*s23^4)) +
          p3q*(p1q*p2q^3*(48*s13^4 + (-20*s12^2*s13 + 56*s12*s13^2 +
                44*s13^3)*s23 + (-80*s12*s13 - 96*s13^2)*s23^2 +
              (-48*s12 - 140*s13)*s23^3) + p2q^4*((20*s12*s13^2 + 20*s13^3)*
               s23 + (-24*s12*s13 - 4*s13^2)*s23^2 - 24*s13*s23^3) +
            p1q^4*((-24*s12*s13^2 - 24*s13^3)*s23 + (20*s12*s13 - 4*s13^2)*
               s23^2 + 20*s13*s23^3) + p1q^3*p2q*(-48*s12*s13^3 +
              (-20*s12^2*s13 - 80*s12*s13^2 - 140*s13^3)*s23 +
              (56*s12*s13 - 96*s13^2)*s23^2 + 44*s13*s23^3 + 48*s23^4) +
            p1q^2*p2q^2*(-48*s12*s13^3 + 72*s13^4 + (-40*s12^2*s13 +
                16*s12*s13^2 - 72*s13^3)*s23 + (16*s12*s13 - 168*s13^2)*s23^
                2 + (-48*s12 - 72*s13)*s23^3 + 72*s23^4)) +
          p3q^2*(p1q*p2q^2*(-96*s12*s13^3 + 72*s13^4 + (-100*s12^2*s13 +
                44*s12*s13^2 - 64*s13^3)*s23 + (24*s12^2 - 60*s12*s13 -
                232*s13^2)*s23^2 + (-144*s12 - 264*s13)*s23^3) +
            p2q^3*(24*s13^4 + (-20*s12^2*s13 + 28*s12*s13^2 + 32*s13^3)*s23 +
              (24*s12^2 - 28*s12*s13 - 40*s13^2)*s23^2 - 72*s13*s23^3) +
            p1q^3*(24*s12^2*s13^2 + (-20*s12^2*s13 - 28*s12*s13^2 - 72*s13^3)*
               s23 + (28*s12*s13 - 40*s13^2)*s23^2 + 32*s13*s23^3 +
              24*s23^4) + p1q^2*p2q*(24*s12^2*s13^2 - 144*s12*s13^3 +
              (-100*s12^2*s13 - 60*s12*s13^2 - 264*s13^3)*s23 +
              (44*s12*s13 - 232*s13^2)*s23^2 + (-96*s12 - 64*s13)*s23^3 +
              72*s23^4)))*Log(s12/(s12 + s13 + s23)))/
        (27*p1q^3*p2q^2*s13^2*s23^2 + 27*p1q^2*p2q^3*s13^2*s23^2 +
         27*p3q^5*s13^2*s23^2 + p3q^4*(81*p1q*s13^2*s23^2 +
           81*p2q*s13^2*s23^2) + p3q^3*(81*p1q^2*s13^2*s23^2 +
           216*p1q*p2q*s13^2*s23^2 + 81*p2q^2*s13^2*s23^2) +
         p3q^2*(27*p1q^3*s13^2*s23^2 + 189*p1q^2*p2q*s13^2*s23^2 +
           189*p1q*p2q^2*s13^2*s23^2 + 27*p2q^3*s13^2*s23^2) +
         p3q*(54*p1q^3*p2q*s13^2*s23^2 + 135*p1q^2*p2q^2*s13^2*s23^2 +
           54*p1q*p2q^3*s13^2*s23^2)) +
       ((p1q^4*p2q*((-84*s12*s13^2 - 84*s13^3)*s23 + (-2*s12*s13 - 86*s13^2)*
             s23^2 - 2*s13*s23^3) + p3q^5*(84*s12^2*s13^2 +
            (4*s12^2*s13 + 42*s12*s13^2 - 42*s13^3)*s23 +
            (-12*s12^2 - 6*s12*s13)*s23^2 + 6*s13*s23^3) +
          p1q*p2q^4*((-2*s12*s13^2 - 2*s13^3)*s23 + (12*s12*s13 + 10*s13^2)*
             s23^2 + 12*s13*s23^3) + p1q^3*p2q^2*(84*s13^4 +
            (-86*s12*s13^2 + 2*s13^3)*s23 + (2*s12*s13 - 40*s13^2)*s23^2 -
            6*s13*s23^3 - 12*s23^4) + p1q^2*p2q^3*(84*s13^4 +
            (-46*s12*s13^2 + 42*s13^3)*s23 + (10*s12*s13 + 8*s13^2)*s23^2 +
            2*s13*s23^3 - 12*s23^4) + p3q^4*
           (p2q*(84*s12^2*s13^2 - 168*s12*s13^3 + (8*s12^2*s13 -
                46*s12*s13^2 - 126*s13^3)*s23 + (-36*s12^2 - 16*s12*s13 +
                6*s13^2)*s23^2 + 24*s13*s23^3) + p1q*(252*s12^2*s13^2 +
              (8*s12^2*s13 + 80*s12*s13^2 - 168*s13^3)*s23 + (-12*s12^2 +
                2*s12*s13 - 42*s13^2)*s23^2 + (24*s12 + 18*s13)*s23^3)) +
          p3q*(p1q^4*((-84*s12*s13^2 - 84*s13^3)*s23 + (-2*s12*s13 -
                86*s13^2)*s23^2 - 2*s13*s23^3) +
            p2q^4*((-2*s12*s13^2 - 2*s13^3)*s23 + (12*s12*s13 + 10*s13^2)*s23^
                2 + 12*s13*s23^3) + p1q*p2q^3*(168*s13^4 + (2*s12^2*s13 -
                92*s12*s13^2 + 82*s13^3)*s23 + (56*s12*s13 + 48*s13^2)*s23^
                2 + (24*s12 + 62*s13)*s23^3) + p1q^2*p2q^2*(-168*s12*s13^3 +
              252*s13^4 + (4*s12^2*s13 - 304*s12*s13^2 - 36*s13^3)*s23 +
              (32*s12*s13 - 60*s13^2)*s23^2 + (24*s12 + 12*s13)*s23^3 -
              36*s23^4) + p1q^3*p2q*(-168*s12*s13^3 + (2*s12^2*s13 -
                424*s12*s13^2 - 418*s13^3)*s23 + (4*s12*s13 - 336*s13^2)*s23^
                2 - 14*s13*s23^3 - 24*s23^4)) +
          p3q^2*(p2q^3*(84*s13^4 + (2*s12^2*s13 - 46*s12*s13^2 + 40*s13^3)*
               s23 + (-12*s12^2 + 22*s12*s13 + 28*s13^2)*s23^2 +
              36*s13*s23^3) + p1q*p2q^2*(-336*s12*s13^3 + 252*s13^4 +
              (10*s12^2*s13 - 350*s12*s13^2 - 80*s13^3)*s23 +
              (-12*s12^2 + 78*s12*s13 + 28*s13^2)*s23^2 + (72*s12 + 108*s13)*
               s23^3) + p1q^2*p2q*(84*s12^2*s13^2 - 504*s12*s13^3 +
              (10*s12^2*s13 - 642*s12*s13^2 - 708*s13^3)*s23 +
              (34*s12*s13 - 404*s13^2)*s23^2 + (48*s12 + 16*s13)*s23^3 -
              36*s23^4) + p1q^3*(84*s12^2*s13^2 + (2*s12^2*s13 -
                170*s12*s13^2 - 252*s13^3)*s23 + (2*s12*s13 - 212*s13^2)*s23^
                2 - 8*s13*s23^3 - 12*s23^4)) +
          p3q^3*(p2q^2*(-168*s12*s13^3 + 84*s13^4 + (6*s12^2*s13 -
                132*s12*s13^2 - 42*s13^3)*s23 + (-36*s12^2 + 24*s13^2)*s23^
                2 + 42*s13*s23^3) + p1q*p2q*(168*s12^2*s13^2 -
              504*s12*s13^3 + (16*s12^2*s13 - 348*s12*s13^2 - 500*s13^3)*
               s23 + (-24*s12^2 + 36*s12*s13 - 136*s13^2)*s23^2 +
              (72*s12 + 76*s13)*s23^3) + p1q^2*(252*s12^2*s13^2 +
              (6*s12^2*s13 - 48*s12*s13^2 - 294*s13^3)*s23 + (12*s12*s13 -
                168*s13^2)*s23^2 + (24*s12 + 6*s13)*s23^3 - 12*s23^4)))*
         Log(s13/(s12 + s13 + s23)))/(27*p1q^3*p2q^2*s13^2*s23^2 +
         27*p1q^2*p2q^3*s13^2*s23^2 + 27*p3q^5*s13^2*s23^2 +
         p3q^4*(81*p1q*s13^2*s23^2 + 81*p2q*s13^2*s23^2) +
         p3q^3*(81*p1q^2*s13^2*s23^2 + 216*p1q*p2q*s13^2*s23^2 +
           81*p2q^2*s13^2*s23^2) + p3q^2*(27*p1q^3*s13^2*s23^2 +
           189*p1q^2*p2q*s13^2*s23^2 + 189*p1q*p2q^2*s13^2*s23^2 +
           27*p2q^3*s13^2*s23^2) + p3q*(54*p1q^3*p2q*s13^2*s23^2 +
           135*p1q^2*p2q^2*s13^2*s23^2 + 54*p1q*p2q^3*s13^2*s23^2)) +
       ((p1q*p2q^4*((-2*s12*s13^2 - 2*s13^3)*s23 + (-84*s12*s13 - 86*s13^2)*
             s23^2 - 84*s13*s23^3) + p3q^5*(-12*s12^2*s13^2 +
            (4*s12^2*s13 - 6*s12*s13^2 + 6*s13^3)*s23 +
            (84*s12^2 + 42*s12*s13)*s23^2 - 42*s13*s23^3) +
          p1q^4*p2q*((12*s12*s13^2 + 12*s13^3)*s23 + (-2*s12*s13 + 10*s13^2)*
             s23^2 - 2*s13*s23^3) + p1q^2*p2q^3*(-12*s13^4 +
            (2*s12*s13^2 - 6*s13^3)*s23 + (-86*s12*s13 - 40*s13^2)*s23^2 +
            2*s13*s23^3 + 84*s23^4) + p1q^3*p2q^2*(-12*s13^4 +
            (10*s12*s13^2 + 2*s13^3)*s23 + (-46*s12*s13 + 8*s13^2)*s23^2 +
            42*s13*s23^3 + 84*s23^4) + p3q^4*
           (p1q*(-36*s12^2*s13^2 + (8*s12^2*s13 - 16*s12*s13^2 + 24*s13^3)*
               s23 + (84*s12^2 - 46*s12*s13 + 6*s13^2)*s23^2 +
              (-168*s12 - 126*s13)*s23^3) + p2q*(-12*s12^2*s13^2 +
              24*s12*s13^3 + (8*s12^2*s13 + 2*s12*s13^2 + 18*s13^3)*s23 +
              (252*s12^2 + 80*s12*s13 - 42*s13^2)*s23^2 - 168*s13*s23^3)) +
          p3q^3*(p1q*p2q*(-24*s12^2*s13^2 + 72*s12*s13^3 + (16*s12^2*s13 +
                36*s12*s13^2 + 76*s13^3)*s23 + (168*s12^2 - 348*s12*s13 -
                136*s13^2)*s23^2 + (-504*s12 - 500*s13)*s23^3) +
            p2q^2*(24*s12*s13^3 - 12*s13^4 + (6*s12^2*s13 + 12*s12*s13^2 +
                6*s13^3)*s23 + (252*s12^2 - 48*s12*s13 - 168*s13^2)*s23^2 -
              294*s13*s23^3) + p1q^2*(-36*s12^2*s13^2 + (6*s12^2*s13 +
                42*s13^3)*s23 + (-132*s12*s13 + 24*s13^2)*s23^2 +
              (-168*s12 - 42*s13)*s23^3 + 84*s23^4)) +
          p3q^2*(p1q*p2q^2*(48*s12*s13^3 - 36*s13^4 + (10*s12^2*s13 +
                34*s12*s13^2 + 16*s13^3)*s23 + (84*s12^2 - 642*s12*s13 -
                404*s13^2)*s23^2 + (-504*s12 - 708*s13)*s23^3) +
            p2q^3*(-12*s13^4 + (2*s12^2*s13 + 2*s12*s13^2 - 8*s13^3)*s23 +
              (84*s12^2 - 170*s12*s13 - 212*s13^2)*s23^2 - 252*s13*s23^3) +
            p1q^3*(-12*s12^2*s13^2 + (2*s12^2*s13 + 22*s12*s13^2 + 36*s13^3)*
               s23 + (-46*s12*s13 + 28*s13^2)*s23^2 + 40*s13*s23^3 +
              84*s23^4) + p1q^2*p2q*(-12*s12^2*s13^2 + 72*s12*s13^3 +
              (10*s12^2*s13 + 78*s12*s13^2 + 108*s13^3)*s23 +
              (-350*s12*s13 + 28*s13^2)*s23^2 + (-336*s12 - 80*s13)*s23^3 +
              252*s23^4)) + p3q*(p1q*p2q^3*(-24*s13^4 + (2*s12^2*s13 +
                4*s12*s13^2 - 14*s13^3)*s23 + (-424*s12*s13 - 336*s13^2)*s23^
                2 + (-168*s12 - 418*s13)*s23^3) +
            p2q^4*((-2*s12*s13^2 - 2*s13^3)*s23 + (-84*s12*s13 - 86*s13^2)*
               s23^2 - 84*s13*s23^3) + p1q^4*((12*s12*s13^2 + 12*s13^3)*s23 +
              (-2*s12*s13 + 10*s13^2)*s23^2 - 2*s13*s23^3) +
            p1q^3*p2q*(24*s12*s13^3 + (2*s12^2*s13 + 56*s12*s13^2 + 62*s13^3)*
               s23 + (-92*s12*s13 + 48*s13^2)*s23^2 + 82*s13*s23^3 +
              168*s23^4) + p1q^2*p2q^2*(24*s12*s13^3 - 36*s13^4 +
              (4*s12^2*s13 + 32*s12*s13^2 + 12*s13^3)*s23 + (-304*s12*s13 -
                60*s13^2)*s23^2 + (-168*s12 - 36*s13)*s23^3 + 252*s23^4)))*
         Log(s23/(s12 + s13 + s23)))/(27*p1q^3*p2q^2*s13^2*s23^2 +
         27*p1q^2*p2q^3*s13^2*s23^2 + 27*p3q^5*s13^2*s23^2 +
         p3q^4*(81*p1q*s13^2*s23^2 + 81*p2q*s13^2*s23^2) +
         p3q^3*(81*p1q^2*s13^2*s23^2 + 216*p1q*p2q*s13^2*s23^2 +
           81*p2q^2*s13^2*s23^2) + p3q^2*(27*p1q^3*s13^2*s23^2 +
           189*p1q^2*p2q*s13^2*s23^2 + 189*p1q*p2q^2*s13^2*s23^2 +
           27*p2q^3*s13^2*s23^2) + p3q*(54*p1q^3*p2q*s13^2*s23^2 +
           135*p1q^2*p2q^2*s13^2*s23^2 + 54*p1q*p2q^3*s13^2*s23^2))) +
     Log((p1q + p3q)/(p1q + p2q + p3q))*
      (((p1q*p2q^4*(-20*s12*s13^3 - 20*s13^4 + (24*s12*s13^2 + 4*s13^3)*s23 +
            24*s13^2*s23^2) + p1q^2*p2q^3*(10*s12^2*s13^2 - 20*s12*s13^3 -
            30*s13^4 + (-24*s12^2*s13 + 28*s12*s13^2 + 12*s13^3)*s23 +
            (-72*s12*s13 - 6*s13^2)*s23^2 - 48*s13*s23^3) +
          p3q^5*(-20*s12^3*s13 - 20*s12^2*s13^2 + (24*s12^3 + 4*s12^2*s13)*
             s23 + (24*s12^2 - 12*s12*s13 - 12*s13^2)*s23^2 - 12*s13*s23^3) +
          p1q^5*((10*s12^2*s13 + 20*s12*s13^2 + 10*s13^3)*s23 +
            (20*s12*s13 + 20*s13^2)*s23^2 + 10*s13*s23^3) +
          p1q^3*p2q^2*(20*s12^2*s13^2 - 20*s13^4 +
            (-14*s12^2*s13 + 36*s12*s13^2 + 10*s13^3)*s23 +
            (-60*s12*s13 - 16*s13^2)*s23^2 + (24*s12 - 22*s13)*s23^3 +
            24*s23^4) + p1q^4*p2q*(10*s12^2*s13^2 - 10*s13^4 +
            (8*s12^2*s13 + 28*s12*s13^2)*s23 + (8*s12*s13 + 10*s13^2)*s23^2 +
            (24*s12 + 24*s13)*s23^3 + 24*s23^4) +
          p3q^4*(p1q*(-60*s12^3*s13 - 60*s12^2*s13^2 + (48*s12^3 -
                4*s12^2*s13 + 8*s12*s13^2)*s23 + (-76*s12*s13 - 36*s13^2)*s23^
                2 + (-48*s12 - 36*s13)*s23^3) + p2q*(-20*s12^3*s13 +
              20*s12^2*s13^2 + 40*s12*s13^3 + (48*s12^3 + 12*s12^2*s13 +
                24*s12*s13^2)*s23 + (48*s12^2 - 52*s12*s13 - 36*s13^2)*s23^
                2 - 36*s13*s23^3)) + p3q^3*(p1q*p2q*(-60*s12^3*s13 +
              40*s12^2*s13^2 + 100*s12*s13^3 + (72*s12^3 - 12*s12^2*s13 +
                120*s12*s13^2 + 44*s13^3)*s23 + (-24*s12^2 - 236*s12*s13 -
                72*s13^2)*s23^2 + (-96*s12 - 116*s13)*s23^3) +
            p2q^2*(-10*s12^3*s13 + 40*s12^2*s13^2 + 30*s12*s13^3 - 20*s13^4 +
              (24*s12^3 - 60*s12^2*s13 - 12*s12*s13^2 - 8*s13^3)*s23 +
              (24*s12^2 - 122*s12*s13 - 36*s13^2)*s23^2 - 48*s13*s23^3) +
            p1q^2*(-70*s12^3*s13 - 60*s12^2*s13^2 + 10*s12*s13^3 +
              (24*s12^3 - 32*s12^2*s13 + 44*s12*s13^2 + 20*s13^3)*s23 +
              (-72*s12^2 - 118*s12*s13 - 16*s13^2)*s23^2 + (-72*s12 - 12*s13)*
               s23^3 + 24*s23^4)) + p3q^2*(p1q*p2q^2*(-20*s12^3*s13 +
              100*s12^2*s13^2 + 80*s12*s13^3 - 40*s13^4 + (24*s12^3 -
                62*s12^2*s13 + 220*s12*s13^2 + 126*s13^3)*s23 +
              (-24*s12^2 - 208*s12*s13 + 72*s13^2)*s23^2 + (-48*s12 - 94*s13)*
               s23^3) + p2q^3*(30*s12^2*s13^2 - 30*s13^4 + (-48*s12^2*s13 +
                28*s12*s13^2 + 16*s13^3)*s23 + (-72*s12*s13 + 22*s13^2)*s23^
                2 - 24*s13*s23^3) + p1q^2*p2q*(-60*s12^3*s13 +
              50*s12^2*s13^2 + 100*s12*s13^3 - 10*s13^4 + (24*s12^3 -
                52*s12^2*s13 + 188*s12*s13^2 + 84*s13^3)*s23 +
              (-120*s12^2 - 308*s12*s13 - 54*s13^2)*s23^2 + (-96*s12 -
                100*s13)*s23^3 + 48*s23^4) + p1q^3*(-40*s12^3*s13 -
              20*s12^2*s13^2 + 20*s12*s13^3 + (-26*s12^2*s13 + 84*s12*s13^2 +
                50*s13^3)*s23 + (-48*s12^2 - 36*s12*s13 + 48*s13^2)*s23^2 +
              46*s13*s23^3 + 48*s23^4)) +
          p3q*(p2q^4*(-20*s12*s13^3 - 20*s13^4 + (24*s12*s13^2 + 4*s13^3)*
               s23 + 24*s13^2*s23^2) + p1q*p2q^3*(40*s12^2*s13^2 -
              20*s12*s13^3 - 60*s13^4 + (-24*s12^2*s13 + 152*s12*s13^2 +
                76*s13^3)*s23 + (-48*s12*s13 + 112*s13^2)*s23^2 -
              24*s13*s23^3) + p1q^2*p2q^2*(-10*s12^3*s13 + 80*s12^2*s13^2 +
              50*s12*s13^3 - 40*s13^4 + (-64*s12^2*s13 + 172*s12*s13^2 +
                96*s13^3)*s23 + (-48*s12^2 - 242*s12*s13 - 4*s13^2)*s23^2 +
              (-24*s12 - 116*s13)*s23^3 + 24*s23^4) +
            p1q^4*(-10*s12^3*s13 + 10*s12*s13^3 + (8*s12^2*s13 +
                68*s12*s13^2 + 40*s13^3)*s23 + (38*s12*s13 + 60*s13^2)*s23^
                2 + (24*s12 + 44*s13)*s23^3 + 24*s23^4) +
            p1q^3*p2q*(-20*s12^3*s13 + 40*s12^2*s13^2 + 40*s12*s13^3 -
              20*s13^4 + (-20*s12^2*s13 + 120*s12*s13^2 + 40*s13^3)*s23 +
              (-48*s12^2 - 116*s12*s13 - 8*s13^2)*s23^2 + (24*s12 + 4*s13)*
               s23^3 + 72*s23^4)))*Log(s12/(s12 + s13 + s23)))/
        (-27*p1q^2*p2q^3*s13^3*s23 + p1q^4*p2q*(27*s12*s13^2*s23 +
           27*s13^2*s23^2) + p3q^5*(27*s12*s13^2*s23 + 27*s13^2*s23^2) +
         p1q^3*p2q^2*((27*s12*s13^2 - 27*s13^3)*s23 + 27*s13^2*s23^2) +
         p3q^4*(p2q*((54*s12*s13^2 - 27*s13^3)*s23 + 54*s13^2*s23^2) +
           p1q*(108*s12*s13^2*s23 + 108*s13^2*s23^2)) +
         p3q*(-54*p1q*p2q^3*s13^3*s23 + p1q^4*(27*s12*s13^2*s23 +
             27*s13^2*s23^2) + p1q^2*p2q^2*((81*s12*s13^2 - 108*s13^3)*s23 +
             81*s13^2*s23^2) + p1q^3*p2q*((135*s12*s13^2 - 27*s13^3)*s23 +
             135*s13^2*s23^2)) + p3q^3*(p2q^2*((27*s12*s13^2 - 54*s13^3)*
              s23 + 27*s13^2*s23^2) + p1q^2*(162*s12*s13^2*s23 +
             162*s13^2*s23^2) + p1q*p2q*((189*s12*s13^2 - 81*s13^3)*s23 +
             189*s13^2*s23^2)) + p3q^2*(-27*p2q^3*s13^3*s23 +
           p1q*p2q^2*((81*s12*s13^2 - 135*s13^3)*s23 + 81*s13^2*s23^2) +
           p1q^3*(108*s12*s13^2*s23 + 108*s13^2*s23^2) +
           p1q^2*p2q*((243*s12*s13^2 - 81*s13^3)*s23 + 243*s13^2*s23^2))) +
       ((p1q*p2q^4*(2*s12*s13^3 + 2*s13^4 + (-12*s12*s13^2 - 10*s13^3)*s23 -
            12*s13^2*s23^2) + p1q^5*((-(s12^2*s13) - 2*s12*s13^2 - s13^3)*
             s23 + (-2*s12*s13 - 2*s13^2)*s23^2 - s13*s23^3) +
          p3q^5*(2*s12^3*s13 + 2*s12^2*s13^2 + (-12*s12^3 - 10*s12^2*s13)*
             s23 + (-12*s12^2 + 6*s12*s13 + 6*s13^2)*s23^2 + 6*s13*s23^3) +
          p1q^2*p2q^3*(-(s12^2*s13^2) + 2*s12*s13^3 + 3*s13^4 +
            (12*s12^2*s13 + 2*s12*s13^2 - 6*s13^3)*s23 +
            (36*s12*s13 + 15*s13^2)*s23^2 + 24*s13*s23^3) +
          p1q^4*p2q*(-(s12^2*s13^2) + s13^4 + (4*s12^2*s13 + 2*s12*s13^2)*
             s23 + (4*s12*s13 - s13^2)*s23^2 + (-12*s12 - 12*s13)*s23^3 -
            12*s23^4) + p1q^3*p2q^2*(-2*s12^2*s13^2 + 2*s13^4 +
            (11*s12^2*s13 + 6*s12*s13^2 - s13^3)*s23 +
            (30*s12*s13 + 16*s13^2)*s23^2 + (-12*s12 + 7*s13)*s23^3 -
            12*s23^4) + p3q^4*(p2q*(2*s12^3*s13 - 2*s12^2*s13^2 -
              4*s12*s13^3 + (-24*s12^3 - 6*s12^2*s13 + 12*s12*s13^2)*s23 +
              (-24*s12^2 + 34*s12*s13 + 18*s13^2)*s23^2 + 18*s13*s23^3) +
            p1q*(6*s12^3*s13 + 6*s12^2*s13^2 + (-24*s12^3 - 14*s12^2*s13 +
                4*s12*s13^2)*s23 + (46*s12*s13 + 18*s13^2)*s23^2 +
              (24*s12 + 18*s13)*s23^3)) +
          p3q^2*(p2q^3*(-3*s12^2*s13^2 + 3*s13^4 + (24*s12^2*s13 +
                2*s12*s13^2 - 16*s13^3)*s23 + (36*s12*s13 - 7*s13^2)*s23^2 +
              12*s13*s23^3) + p1q*p2q^2*(2*s12^3*s13 - 10*s12^2*s13^2 -
              8*s12*s13^3 + 4*s13^4 + (-12*s12^3 + 35*s12^2*s13 -
                22*s12*s13^2 - 51*s13^3)*s23 + (12*s12^2 + 112*s12*s13 -
                12*s13^2)*s23^2 + (24*s12 + 43*s13)*s23^3) +
            p1q^3*(4*s12^3*s13 + 2*s12^2*s13^2 - 2*s12*s13^3 +
              (17*s12^2*s13 + 6*s12*s13^2 - 5*s13^3)*s23 + (24*s12^2 +
                42*s12*s13)*s23^2 - 19*s13*s23^3 - 24*s23^4) +
            p1q^2*p2q*(6*s12^3*s13 - 5*s12^2*s13^2 - 10*s12*s13^3 + s13^4 +
              (-12*s12^3 + 34*s12^2*s13 + 10*s12*s13^2 - 18*s13^3)*s23 +
              (60*s12^2 + 170*s12*s13 + 39*s13^2)*s23^2 + (48*s12 + 34*s13)*
               s23^3 - 24*s23^4)) + p3q^3*(p2q^2*(s12^3*s13 - 4*s12^2*s13^2 -
              3*s12*s13^3 + 2*s13^4 + (-12*s12^3 + 30*s12^2*s13 +
                30*s12*s13^2 - 4*s13^3)*s23 + (-12*s12^2 + 65*s12*s13 +
                18*s13^2)*s23^2 + 24*s13*s23^3) + p1q*p2q*(6*s12^3*s13 -
              4*s12^2*s13^2 - 10*s12*s13^3 + (-36*s12^3 + 6*s12^2*s13 +
                12*s12*s13^2 - 14*s13^3)*s23 + (12*s12^2 + 134*s12*s13 +
                36*s13^2)*s23^2 + (48*s12 + 50*s13)*s23^3) +
            p1q^2*(7*s12^3*s13 + 6*s12^2*s13^2 - s12*s13^3 + (-12*s12^3 +
                8*s12^2*s13 + 10*s12*s13^2 - 2*s13^3)*s23 + (36*s12^2 +
                79*s12*s13 + 16*s13^2)*s23^2 + (36*s12 + 6*s13)*s23^3 -
              12*s23^4)) + p3q*(p2q^4*(2*s12*s13^3 + 2*s13^4 +
              (-12*s12*s13^2 - 10*s13^3)*s23 - 12*s13^2*s23^2) +
            p1q*p2q^3*(-4*s12^2*s13^2 + 2*s12*s13^3 + 6*s13^4 +
              (12*s12^2*s13 - 44*s12*s13^2 - 46*s13^3)*s23 + (24*s12*s13 -
                40*s13^2)*s23^2 + 12*s13*s23^3) + p1q^3*p2q*
             (2*s12^3*s13 - 4*s12^2*s13^2 - 4*s12*s13^3 + 2*s13^4 +
              (26*s12^2*s13 + 12*s12*s13^2 - 4*s13^3)*s23 + (24*s12^2 +
                74*s12*s13 + 20*s13^2)*s23^2 + (-12*s12 - 10*s13)*s23^3 -
              36*s23^4) + p1q^4*(s12^3*s13 - s12*s13^3 + (4*s12^2*s13 -
                2*s12*s13^2 - 4*s13^3)*s23 + (s12*s13 - 6*s13^2)*s23^2 +
              (-12*s12 - 14*s13)*s23^3 - 12*s23^4) + p1q^2*p2q^2*
             (s12^3*s13 - 8*s12^2*s13^2 - 5*s12*s13^3 + 4*s13^4 +
              (40*s12^2*s13 + 2*s12*s13^2 - 24*s13^3)*s23 + (24*s12^2 +
                125*s12*s13 + 34*s13^2)*s23^2 + (12*s12 + 50*s13)*s23^3 -
              12*s23^4)))*Log(s13/(s12 + s13 + s23)))/
        (-3*p1q^2*p2q^3*s13^3*s23 + p1q^4*p2q*(3*s12*s13^2*s23 +
           3*s13^2*s23^2) + p3q^5*(3*s12*s13^2*s23 + 3*s13^2*s23^2) +
         p1q^3*p2q^2*((3*s12*s13^2 - 3*s13^3)*s23 + 3*s13^2*s23^2) +
         p3q^4*(p2q*((6*s12*s13^2 - 3*s13^3)*s23 + 6*s13^2*s23^2) +
           p1q*(12*s12*s13^2*s23 + 12*s13^2*s23^2)) +
         p3q*(-6*p1q*p2q^3*s13^3*s23 + p1q^4*(3*s12*s13^2*s23 +
             3*s13^2*s23^2) + p1q^2*p2q^2*((9*s12*s13^2 - 12*s13^3)*s23 +
             9*s13^2*s23^2) + p1q^3*p2q*((15*s12*s13^2 - 3*s13^3)*s23 +
             15*s13^2*s23^2)) + p3q^3*(p2q^2*((3*s12*s13^2 - 6*s13^3)*s23 +
             3*s13^2*s23^2) + p1q^2*(18*s12*s13^2*s23 + 18*s13^2*s23^2) +
           p1q*p2q*((21*s12*s13^2 - 9*s13^3)*s23 + 21*s13^2*s23^2)) +
         p3q^2*(-3*p2q^3*s13^3*s23 + p1q*p2q^2*((9*s12*s13^2 - 15*s13^3)*
              s23 + 9*s13^2*s23^2) + p1q^3*(12*s12*s13^2*s23 +
             12*s13^2*s23^2) + p1q^2*p2q*((27*s12*s13^2 - 9*s13^3)*s23 +
             27*s13^2*s23^2))) +
       ((p1q*p2q^4*(2*s12*s13^3 + 2*s13^4 + (84*s12*s13^2 + 86*s13^3)*s23 +
            84*s13^2*s23^2) + p1q^2*p2q^3*(-(s12^2*s13^2) + 2*s12*s13^3 +
            3*s13^4 + (-84*s12^2*s13 - 46*s12*s13^2 + 42*s13^3)*s23 +
            (-252*s12*s13 - 129*s13^2)*s23^2 - 168*s13*s23^3) +
          p3q^5*(2*s12^3*s13 + 2*s12^2*s13^2 + (84*s12^3 + 86*s12^2*s13)*
             s23 + (84*s12^2 - 42*s12*s13 - 42*s13^2)*s23^2 - 42*s13*s23^3) +
          p1q^5*((-(s12^2*s13) - 2*s12*s13^2 - s13^3)*s23 +
            (-2*s12*s13 - 2*s13^2)*s23^2 - s13*s23^3) +
          p1q^3*p2q^2*(-2*s12^2*s13^2 + 2*s13^4 +
            (-85*s12^2*s13 - 90*s12*s13^2 - s13^3)*s23 +
            (-210*s12*s13 - 128*s13^2)*s23^2 + (84*s12 - 41*s13)*s23^3 +
            84*s23^4) + p1q^4*p2q*(-(s12^2*s13^2) + s13^4 +
            (-44*s12^2*s13 - 46*s12*s13^2)*s23 + (-44*s12*s13 - s13^2)*
             s23^2 + (84*s12 + 84*s13)*s23^3 + 84*s23^4) +
          p3q^4*(p1q*(6*s12^3*s13 + 6*s12^2*s13^2 + (168*s12^3 +
                130*s12^2*s13 - 44*s12*s13^2)*s23 + (-338*s12*s13 -
                126*s13^2)*s23^2 + (-168*s12 - 126*s13)*s23^3) +
            p2q*(2*s12^3*s13 - 2*s12^2*s13^2 - 4*s12*s13^3 + (168*s12^3 +
                42*s12^2*s13 - 132*s12*s13^2)*s23 + (168*s12^2 -
                254*s12*s13 - 126*s13^2)*s23^2 - 126*s13*s23^3)) +
          p3q^3*(p1q*p2q*(6*s12^3*s13 - 4*s12^2*s13^2 - 10*s12*s13^3 +
              (252*s12^3 - 42*s12^2*s13 - 228*s12*s13^2 + 82*s13^3)*s23 +
              (-84*s12^2 - 970*s12*s13 - 252*s13^2)*s23^2 + (-336*s12 -
                334*s13)*s23^3) + p2q^2*(s12^3*s13 - 4*s12^2*s13^2 -
              3*s12*s13^3 + 2*s13^4 + (84*s12^3 - 210*s12^2*s13 -
                258*s12*s13^2 + 44*s13^3)*s23 + (84*s12^2 - 463*s12*s13 -
                126*s13^2)*s23^2 - 168*s13*s23^3) +
            p1q^2*(7*s12^3*s13 + 6*s12^2*s13^2 - s12*s13^3 +
              (84*s12^3 - 40*s12^2*s13 - 134*s12*s13^2 - 2*s13^3)*s23 +
              (-252*s12^2 - 593*s12*s13 - 128*s13^2)*s23^2 +
              (-252*s12 - 42*s13)*s23^3 + 84*s23^4)) +
          p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 10*s12^2*s13^2 - 8*s12*s13^3 +
              4*s13^4 + (84*s12^3 - 253*s12^2*s13 - 22*s12*s13^2 + 333*s13^3)*
               s23 + (-84*s12^2 - 800*s12*s13 + 36*s13^2)*s23^2 +
              (-168*s12 - 293*s13)*s23^3) + p2q^3*(-3*s12^2*s13^2 + 3*s13^4 +
              (-168*s12^2*s13 - 46*s12*s13^2 + 128*s13^3)*s23 +
              (-252*s12*s13 + 41*s13^2)*s23^2 - 84*s13*s23^3) +
            p1q^2*p2q*(6*s12^3*s13 - 5*s12^2*s13^2 - 10*s12*s13^3 + s13^4 +
              (84*s12^3 - 254*s12^2*s13 - 278*s12*s13^2 + 78*s13^3)*s23 +
              (-420*s12^2 - 1222*s12*s13 - 297*s13^2)*s23^2 +
              (-336*s12 - 206*s13)*s23^3 + 168*s23^4) +
            p1q^3*(4*s12^3*s13 + 2*s12^2*s13^2 - 2*s12*s13^3 +
              (-127*s12^2*s13 - 138*s12*s13^2 - 5*s13^3)*s23 +
              (-168*s12^2 - 342*s12*s13 - 48*s13^2)*s23^2 + 125*s13*s23^3 +
              168*s23^4)) + p3q*(p2q^4*(2*s12*s13^3 + 2*s13^4 +
              (84*s12*s13^2 + 86*s13^3)*s23 + 84*s13^2*s23^2) +
            p1q*p2q^3*(-4*s12^2*s13^2 + 2*s12*s13^3 + 6*s13^4 +
              (-84*s12^2*s13 + 244*s12*s13^2 + 338*s13^3)*s23 +
              (-168*s12*s13 + 248*s13^2)*s23^2 - 84*s13*s23^3) +
            p1q^2*p2q^2*(s12^3*s13 - 8*s12^2*s13^2 - 5*s12*s13^3 + 4*s13^4 +
              (-296*s12^2*s13 - 190*s12*s13^2 + 120*s13^3)*s23 +
              (-168*s12^2 - 883*s12*s13 - 302*s13^2)*s23^2 +
              (-84*s12 - 334*s13)*s23^3 + 84*s23^4) +
            p1q^4*(s12^3*s13 - s12*s13^3 + (-44*s12^2*s13 - 50*s12*s13^2 -
                4*s13^3)*s23 + (-47*s12*s13 - 6*s13^2)*s23^2 +
              (84*s12 + 82*s13)*s23^3 + 84*s23^4) + p1q^3*p2q*
             (2*s12^3*s13 - 4*s12^2*s13^2 - 4*s12*s13^3 + 2*s13^4 +
              (-214*s12^2*s13 - 228*s12*s13^2 - 4*s13^3)*s23 +
              (-168*s12^2 - 550*s12*s13 - 172*s13^2)*s23^2 +
              (84*s12 + 86*s13)*s23^3 + 252*s23^4)))*
         Log(s23/(s12 + s13 + s23)))/(-27*p1q^2*p2q^3*s13^3*s23 +
         p1q^4*p2q*(27*s12*s13^2*s23 + 27*s13^2*s23^2) +
         p3q^5*(27*s12*s13^2*s23 + 27*s13^2*s23^2) +
         p1q^3*p2q^2*((27*s12*s13^2 - 27*s13^3)*s23 + 27*s13^2*s23^2) +
         p3q^4*(p2q*((54*s12*s13^2 - 27*s13^3)*s23 + 54*s13^2*s23^2) +
           p1q*(108*s12*s13^2*s23 + 108*s13^2*s23^2)) +
         p3q*(-54*p1q*p2q^3*s13^3*s23 + p1q^4*(27*s12*s13^2*s23 +
             27*s13^2*s23^2) + p1q^2*p2q^2*((81*s12*s13^2 - 108*s13^3)*s23 +
             81*s13^2*s23^2) + p1q^3*p2q*((135*s12*s13^2 - 27*s13^3)*s23 +
             135*s13^2*s23^2)) + p3q^3*(p2q^2*((27*s12*s13^2 - 54*s13^3)*
              s23 + 27*s13^2*s23^2) + p1q^2*(162*s12*s13^2*s23 +
             162*s13^2*s23^2) + p1q*p2q*((189*s12*s13^2 - 81*s13^3)*s23 +
             189*s13^2*s23^2)) + p3q^2*(-27*p2q^3*s13^3*s23 +
           p1q*p2q^2*((81*s12*s13^2 - 135*s13^3)*s23 + 81*s13^2*s23^2) +
           p1q^3*(108*s12*s13^2*s23 + 108*s13^2*s23^2) +
           p1q^2*p2q*((243*s12*s13^2 - 81*s13^3)*s23 + 243*s13^2*s23^2)))) +
     Log(s13/(s12 + s13 + s23))*
      ((p1q*p2q^3*(19*s12^4*s13^2 + 13*s12^3*s13^3 - 6*s12^2*s13^4 +
           (-252*s12^4*s13 - 297*s12^3*s13^2 - 126*s12^2*s13^3 -
             56*s12*s13^4)*s23 + (-756*s12^3*s13 - 651*s12^2*s13^2 -
             159*s12*s13^3 - 20*s13^4)*s23^2 + (-756*s12^2*s13 -
             335*s12*s13^2 - 20*s13^3)*s23^3 - 252*s12*s13*s23^4) +
         p3q^4*(-42*s12^5*s13 - 55*s12^4*s13^2 - 67*s12^3*s13^3 +
           (252*s12^5 + 153*s12^4*s13 - 8*s12^3*s13^2 - 104*s12^2*s13^3)*
            s23 + (504*s12^4 + 138*s12^3*s13 - 47*s12^2*s13^2 - 42*s12*s13^3)*
            s23^2 + (252*s12^3 - 177*s12^2*s13 - 64*s12*s13^2)*s23^3 -
           120*s12*s13*s23^4) + p1q^4*((19*s12^4*s13 + 11*s12^3*s13^2 -
             8*s12^2*s13^3)*s23 + (57*s12^3*s13 + 2*s12^2*s13^2 -
             28*s12*s13^3)*s23^2 + (57*s12^2*s13 - 29*s12*s13^2 - 20*s13^3)*
            s23^3 + (19*s12*s13 - 20*s13^2)*s23^4) +
         p1q^2*p2q^2*(-2*s12^4*s13^2 - 48*s12^3*s13^3 - 17*s12^2*s13^4 -
           25*s12*s13^5 + (-233*s12^4*s13 - 206*s12^3*s13^2 -
             126*s12^2*s13^3 - 42*s12*s13^4 - 20*s13^5)*s23 +
           (-587*s12^3*s13 - 356*s12^2*s13^2 - 18*s12*s13^3 - 20*s13^4)*
            s23^2 + (252*s12^3 - 271*s12^2*s13 - 52*s12*s13^2 + 40*s13^3)*
            s23^3 + (504*s12^2 + 83*s12*s13 + 40*s13^2)*s23^4 +
           252*s12*s23^5) + p1q^3*p2q*(19*s12^4*s13^2 - 27*s12^3*s13^3 +
           8*s12^2*s13^4 + (-80*s12^4*s13 + 53*s12^3*s13^2 + 9*s12^2*s13^3 +
             53*s12*s13^4)*s23 + (-83*s12^3*s13 + 79*s12^2*s13^2 +
             71*s12*s13^3 + 40*s13^4)*s23^2 + (252*s12^3 + 228*s12^2*s13 +
             55*s12*s13^2 + 40*s13^3)*s23^3 + (504*s12^2 + 211*s12*s13 -
             20*s13^2)*s23^4 + (252*s12 - 20*s13)*s23^5) +
         p3q^3*(p2q*(-42*s12^5*s13 - 32*s12^4*s13^2 - 48*s12^3*s13^3 +
             50*s12^2*s13^4 + (504*s12^5 + 293*s12^4*s13 - 17*s12^3*s13^2 -
               100*s12^2*s13^3 + 40*s12*s13^4)*s23 + (1008*s12^4 - 38*s12^3*
                s13 - 388*s12^2*s13^2 - 97*s12*s13^3)*s23^2 +
             (504*s12^3 - 745*s12^2*s13 - 313*s12*s13^2)*s23^3 -
             372*s12*s13*s23^4) + p1q*(-78*s12^5*s13 - 58*s12^4*s13^2 -
             142*s12^3*s13^3 + (252*s12^5 - 58*s12^4*s13 + 75*s12^3*s13^2 -
               211*s12^2*s13^3)*s23 + (-675*s12^3*s13 - 18*s12^2*s13^2 - 84*
                s12*s13^3)*s23^2 + (-756*s12^3 - 966*s12^2*s13 - 61*s12*
                s13^2)*s23^3 + (-504*s12^2 - 271*s12*s13)*s23^4)) +
         p3q^2*(p2q^2*(-19*s12^5*s13 - 13*s12^4*s13^2 - 46*s12^3*s13^3 -
             23*s12^2*s13^4 - 25*s12*s13^5 + (252*s12^5 - 169*s12^4*s13 - 435*
                s12^3*s13^2 - 256*s12^2*s13^3 - 98*s12*s13^4 - 20*s13^5)*
              s23 + (504*s12^4 - 989*s12^3*s13 - 1085*s12^2*s13^2 - 270*s12*
                s13^3 - 40*s13^4)*s23^2 + (252*s12^3 - 1343*s12^2*s13 - 603*
                s12*s13^2 - 20*s13^3)*s23^3 - 504*s12*s13*s23^4) +
           p1q*p2q*(-82*s12^5*s13 - 74*s12^4*s13^2 - 154*s12^3*s13^3 +
             108*s12^2*s13^4 + (252*s12^5 - 686*s12^4*s13 - 530*s12^3*s13^2 -
               271*s12^2*s13^3 + 133*s12*s13^4)*s23 +
             (-504*s12^4 - 3019*s12^3*s13 - 1384*s12^2*s13^2 - 72*s12*s13^3 +
               40*s13^4)*s23^2 + (-1764*s12^3 - 3378*s12^2*s13 - 678*s12*
                s13^2 + 80*s13^3)*s23^3 + (-1008*s12^2 - 963*s12*s13 + 40*
                s13^2)*s23^4) + p1q^2*(-55*s12^5*s13 + 24*s12^4*s13^2 -
             83*s12^3*s13^3 + (-352*s12^4*s13 + 162*s12^3*s13^2 - 118*s12^2*
                s13^3)*s23 + (-504*s12^4 - 965*s12^3*s13 + 116*s12^2*s13^2 -
               70*s12*s13^3)*s23^2 + (-756*s12^3 - 592*s12^2*s13 + 28*s12*
                s13^2 - 20*s13^3)*s23^3 + (56*s12*s13 - 40*s13^2)*s23^4 +
             (252*s12 - 20*s13)*s23^5)) +
         p3q*(p2q^3*(19*s12^4*s13^2 + 13*s12^3*s13^3 - 6*s12^2*s13^4 +
             (-252*s12^4*s13 - 297*s12^3*s13^2 - 126*s12^2*s13^3 - 56*s12*
                s13^4)*s23 + (-756*s12^3*s13 - 651*s12^2*s13^2 - 159*s12*
                s13^3 - 20*s13^4)*s23^2 + (-756*s12^2*s13 - 335*s12*s13^2 -
               20*s13^3)*s23^3 - 252*s12*s13*s23^4) +
           p1q*p2q^2*(-19*s12^5*s13 - 15*s12^4*s13^2 - 94*s12^3*s13^3 -
             40*s12^2*s13^4 - 50*s12*s13^5 + (-906*s12^4*s13 - 893*s12^3*
                s13^2 - 382*s12^2*s13^3 - 140*s12*s13^4 - 40*s13^5)*s23 +
             (-504*s12^4 - 3088*s12^3*s13 - 1945*s12^2*s13^2 - 288*s12*
                s13^3 - 60*s13^4)*s23^2 + (-1008*s12^3 - 3126*s12^2*s13 - 907*
                s12*s13^2 + 20*s13^3)*s23^3 + (-504*s12^2 - 925*s12*s13 + 40*
                s13^2)*s23^4) + p1q^3*(-19*s12^5*s13 + 27*s12^4*s13^2 -
             8*s12^3*s13^3 + (-122*s12^4*s13 + 90*s12^3*s13^2 - 19*s12^2*
                s13^3)*s23 + (-95*s12^3*s13 + 89*s12^2*s13^2 - 56*s12*s13^3)*
              s23^2 + (252*s12^3 + 254*s12^2*s13 - 4*s12*s13^2 - 40*s13^3)*
              s23^3 + (504*s12^2 + 226*s12*s13 - 60*s13^2)*s23^4 +
             (252*s12 - 20*s13)*s23^5) + p1q^2*p2q*(-40*s12^5*s13 -
             23*s12^4*s13^2 - 133*s12^3*s13^3 + 66*s12^2*s13^4 +
             (-555*s12^4*s13 - 208*s12^3*s13^2 - 162*s12^2*s13^3 + 146*s12*
                s13^4)*s23 + (-504*s12^4 - 1552*s12^3*s13 - 413*s12^2*s13^2 +
               96*s12*s13^3 + 80*s13^4)*s23^2 + (-504*s12^3 - 893*s12^2*s13 -
               58*s12*s13^2 + 120*s13^3)*s23^3 + (504*s12^2 + 124*s12*s13 +
               20*s13^2)*s23^4 + (504*s12 - 20*s13)*s23^5)))/
        (p1q^3*p2q*(27*s12^3*s13^2*s23 + 54*s12^2*s13^2*s23^2 +
           27*s12*s13^2*s23^3) + p1q^2*p2q^2*(27*s12^3*s13^2*s23 +
           54*s12^2*s13^2*s23^2 + 27*s12*s13^2*s23^3) +
         p3q^4*(27*s12^3*s13^2*s23 + 54*s12^2*s13^2*s23^2 +
           27*s12*s13^2*s23^3) + p3q^3*(p2q*(54*s12^3*s13^2*s23 +
             108*s12^2*s13^2*s23^2 + 54*s12*s13^2*s23^3) +
           p1q*(81*s12^3*s13^2*s23 + 162*s12^2*s13^2*s23^2 +
             81*s12*s13^2*s23^3)) + p3q*(p1q^3*(27*s12^3*s13^2*s23 +
             54*s12^2*s13^2*s23^2 + 27*s12*s13^2*s23^3) +
           p1q*p2q^2*(54*s12^3*s13^2*s23 + 108*s12^2*s13^2*s23^2 +
             54*s12*s13^2*s23^3) + p1q^2*p2q*(108*s12^3*s13^2*s23 +
             216*s12^2*s13^2*s23^2 + 108*s12*s13^2*s23^3)) +
         p3q^2*(p2q^2*(27*s12^3*s13^2*s23 + 54*s12^2*s13^2*s23^2 +
             27*s12*s13^2*s23^3) + p1q^2*(81*s12^3*s13^2*s23 +
             162*s12^2*s13^2*s23^2 + 81*s12*s13^2*s23^3) +
           p1q*p2q*(135*s12^3*s13^2*s23 + 270*s12^2*s13^2*s23^2 +
             135*s12*s13^2*s23^3))) +
       ((p2q^5*((s12^4*s13^3 + 2*s12^3*s13^4 + s12^2*s13^5)*s23 +
            (84*s12^4*s13^2 + 211*s12^3*s13^3 + 190*s12^2*s13^4 +
              83*s12*s13^5 + 20*s13^6)*s23^2 + (84*s12^3*s13^2 +
              126*s12^2*s13^3 + 63*s12*s13^4 + 20*s13^5)*s23^3) +
          p3q^5*(84*s12^6*s13^2 + 84*s12^5*s13^3 +
            (4*s12^6*s13 + 152*s12^5*s13^2 + 170*s12^4*s13^3 -
              62*s12^3*s13^4)*s23 + (84*s12^6 + 152*s12^5*s13 +
              176*s12^4*s13^2 + 170*s12^3*s13^3 - 62*s12^2*s13^4)*s23^2 +
            (84*s12^5 + 170*s12^4*s13 + 170*s12^3*s13^2 + 124*s12^2*s13^3)*
             s23^3 + (-62*s12^3*s13 - 62*s12^2*s13^2)*s23^4) +
          p1q*p2q^4*(-84*s12^3*s13^5 - 84*s12^2*s13^6 +
            (-2*s12^5*s13^2 + 41*s12^4*s13^3 - s12^3*s13^4 + 17*s12^2*s13^5 -
              3*s12*s13^6 + 20*s13^7)*s23 + (-84*s12^5*s13 - 83*s12^4*s13^2 +
              61*s12^3*s13^3 + 84*s12^2*s13^4 + 20*s13^6)*s23^2 +
            (-84*s12^4*s13 - 255*s12^3*s13^2 - 340*s12^2*s13^3 -
              246*s12*s13^4 - 80*s13^5)*s23^3 + (-168*s12^3*s13 -
              336*s12^2*s13^2 - 189*s12*s13^3 - 80*s13^4)*s23^4) +
          p1q^2*p2q^3*(84*s12^4*s13^4 - 84*s12^2*s13^6 +
            (-46*s12^5*s13^2 + 82*s12^4*s13^3 + 63*s12^3*s13^4 +
              208*s12^2*s13^5 - 63*s12*s13^6)*s23 +
            (-86*s12^5*s13 - 121*s12^4*s13^2 + s12^3*s13^3 + 52*s12^2*s13^4 -
              74*s12*s13^5 - 80*s13^6)*s23^2 + (84*s12^4*s13 -
              42*s12^3*s13^2 - 154*s12^2*s13^3 - 80*s13^5)*s23^3 +
            (84*s12^4 + 44*s12^3*s13 + 26*s12^2*s13^2 + 240*s12*s13^3 +
              120*s13^4)*s23^4 + (84*s12^3 + 294*s12^2*s13 + 189*s12*s13^2 +
              120*s13^3)*s23^5) + p1q^5*((84*s12^4*s13^2 + 84*s12^3*s13^3)*
             s23^2 + (s12^4*s13 + 211*s12^3*s13^2 + 126*s12^2*s13^3)*s23^3 +
            (2*s12^3*s13 + 190*s12^2*s13^2 + 63*s12*s13^3)*s23^4 +
            (s12^2*s13 + 83*s12*s13^2 + 20*s13^3)*s23^5 + 20*s13^2*s23^6) +
          p1q^3*p2q^2*(84*s12^4*s13^4 + 84*s12^3*s13^5 +
            (-86*s12^5*s13^2 + 84*s12^4*s13^3 + 44*s12^3*s13^4 +
              294*s12^2*s13^5)*s23 + (-46*s12^5*s13 - 121*s12^4*s13^2 -
              42*s12^3*s13^3 + 26*s12^2*s13^4 + 189*s12*s13^5)*s23^2 +
            (82*s12^4*s13 + s12^3*s13^2 - 154*s12^2*s13^3 + 240*s12*s13^4 +
              120*s13^5)*s23^3 + (84*s12^4 + 63*s12^3*s13 + 52*s12^2*s13^2 +
              120*s13^4)*s23^4 + (208*s12^2*s13 - 74*s12*s13^2 - 80*s13^3)*
             s23^5 + (-84*s12^2 - 63*s12*s13 - 80*s13^2)*s23^6) +
          p1q^4*p2q*((-84*s12^5*s13^2 - 84*s12^4*s13^3 - 168*s12^3*s13^4)*
             s23 + (-2*s12^5*s13 - 83*s12^4*s13^2 - 255*s12^3*s13^3 -
              336*s12^2*s13^4)*s23^2 + (41*s12^4*s13 + 61*s12^3*s13^2 -
              340*s12^2*s13^3 - 189*s12*s13^4)*s23^3 +
            (-(s12^3*s13) + 84*s12^2*s13^2 - 246*s12*s13^3 - 80*s13^4)*
             s23^4 + (-84*s12^3 + 17*s12^2*s13 - 80*s13^3)*s23^5 +
            (-84*s12^2 - 3*s12*s13 + 20*s13^2)*s23^6 + 20*s13*s23^7) +
          p3q^4*(p2q*(84*s12^6*s13^2 - 168*s12^5*s13^3 - 252*s12^4*s13^4 +
              (8*s12^6*s13 + 63*s12^5*s13^2 - 200*s12^4*s13^3 - 489*s12^3*
                 s13^4 + 102*s12^2*s13^5)*s23 + (252*s12^6 + 299*s12^5*s13 -
                20*s12^4*s13^2 - 58*s12^3*s13^3 - 279*s12^2*s13^4 +
                40*s12*s13^5)*s23^2 + (252*s12^5 + 460*s12^4*s13 +
                452*s12^3*s13^2 + 320*s12^2*s13^3 + 40*s12*s13^4)*s23^3 +
              (-251*s12^3*s13 - 251*s12^2*s13^2)*s23^4) +
            p1q*(252*s12^6*s13^2 + 252*s12^5*s13^3 + (8*s12^6*s13 +
                299*s12^5*s13^2 + 460*s12^4*s13^3 - 251*s12^3*s13^4)*s23 +
              (84*s12^6 + 63*s12^5*s13 - 20*s12^4*s13^2 + 452*s12^3*s13^3 -
                251*s12^2*s13^4)*s23^2 + (-168*s12^5 - 200*s12^4*s13 -
                58*s12^3*s13^2 + 320*s12^2*s13^3)*s23^3 + (-252*s12^4 -
                489*s12^3*s13 - 279*s12^2*s13^2 + 40*s12*s13^3)*s23^4 +
              (102*s12^2*s13 + 40*s12*s13^2)*s23^5)) +
          p3q^3*(p2q^2*(-252*s12^5*s13^3 + 252*s12^3*s13^5 + (6*s12^6*s13 -
                134*s12^5*s13^2 - 284*s12^4*s13^3 - 226*s12^3*s13^4 +
                362*s12^2*s13^5 - 60*s12*s13^6)*s23 + (252*s12^6 -
                21*s12^5*s13 - 716*s12^4*s13^2 - 493*s12^3*s13^3 -
                307*s12^2*s13^4 - 37*s12*s13^5 - 20*s13^6)*s23^2 +
              (252*s12^5 + 330*s12^4*s13 + 339*s12^3*s13^2 + 212*s12^2*
                 s13^3 - 40*s12*s13^4 - 40*s13^5)*s23^3 + (-399*s12^3*s13 -
                441*s12^2*s13^2 - 63*s12*s13^3 - 20*s13^4)*s23^4) +
            p1q*p2q*(168*s12^6*s13^2 - 504*s12^5*s13^3 - 672*s12^4*s13^4 +
              (16*s12^6*s13 - 211*s12^5*s13^2 - 706*s12^4*s13^3 -
                1511*s12^3*s13^4 + 312*s12^2*s13^5)*s23 + (168*s12^6 -
                211*s12^5*s13 - 1164*s12^4*s13^2 - 482*s12^3*s13^3 -
                1008*s12^2*s13^4 + 163*s12*s13^5)*s23^2 + (-504*s12^5 -
                706*s12^4*s13 - 482*s12^3*s13^2 + 172*s12^2*s13^3 +
                117*s12*s13^4 + 40*s13^5)*s23^3 + (-672*s12^4 - 1511*s12^3*
                 s13 - 1008*s12^2*s13^2 + 117*s12*s13^3 + 80*s13^4)*s23^4 +
              (312*s12^2*s13 + 163*s12*s13^2 + 40*s13^3)*s23^5) +
            p1q^2*(252*s12^6*s13^2 + 252*s12^5*s13^3 + (6*s12^6*s13 -
                21*s12^5*s13^2 + 330*s12^4*s13^3 - 399*s12^3*s13^4)*s23 +
              (-134*s12^5*s13 - 716*s12^4*s13^2 + 339*s12^3*s13^3 -
                441*s12^2*s13^4)*s23^2 + (-252*s12^5 - 284*s12^4*s13 -
                493*s12^3*s13^2 + 212*s12^2*s13^3 - 63*s12*s13^4)*s23^3 +
              (-226*s12^3*s13 - 307*s12^2*s13^2 - 40*s12*s13^3 - 20*s13^4)*
               s23^4 + (252*s12^3 + 362*s12^2*s13 - 37*s12*s13^2 - 40*s13^3)*
               s23^5 + (-60*s12*s13 - 20*s13^2)*s23^6)) +
          p3q^2*(p2q^3*(252*s12^4*s13^4 + 168*s12^3*s13^5 - 84*s12^2*s13^6 +
              (2*s12^6*s13 - 48*s12^5*s13^2 + 125*s12^4*s13^3 + 199*s12^3*
                 s13^4 + 277*s12^2*s13^5 - 63*s12*s13^6 + 20*s13^7)*s23 +
              (84*s12^6 - 336*s12^5*s13 - 729*s12^4*s13^2 - 202*s12^3*s13^3 +
                58*s12^2*s13^4 - 37*s12*s13^5 + 20*s13^6)*s23^2 +
              (84*s12^5 - 44*s12^4*s13 + 55*s12^3*s13^2 + 56*s12^2*s13^3 -
                120*s12*s13^4 - 40*s13^5)*s23^3 + (-294*s12^3*s13 -
                378*s12^2*s13^2 - 126*s12*s13^3 - 40*s13^4)*s23^4) +
            p1q*p2q^2*(-420*s12^5*s13^3 + 168*s12^4*s13^4 + 588*s12^3*s13^5 +
              (10*s12^6*s13 - 349*s12^5*s13^2 - 243*s12^4*s13^3 -
                242*s12^3*s13^4 + 1031*s12^2*s13^5 - 123*s12*s13^6)*s23 +
              (84*s12^6 - 697*s12^5*s13 - 1581*s12^4*s13^2 - 579*s12^3*
                 s13^3 - 405*s12^2*s13^4 + 92*s12*s13^5 - 80*s13^6)*s23^2 +
              (-504*s12^5 - 888*s12^4*s13 - 650*s12^3*s13^2 - 272*s12^2*
                 s13^3 + 37*s12*s13^4 - 80*s13^5)*s23^3 + (-588*s12^4 -
                1693*s12^3*s13 - 1295*s12^2*s13^2 + 91*s12*s13^3 + 100*s13^4)*
               s23^4 + (336*s12^2*s13 + 249*s12*s13^2 + 100*s13^3)*s23^5) +
            p1q^2*p2q*(84*s12^6*s13^2 - 504*s12^5*s13^3 - 588*s12^4*s13^4 +
              (10*s12^6*s13 - 697*s12^5*s13^2 - 888*s12^4*s13^3 -
                1693*s12^3*s13^4 + 336*s12^2*s13^5)*s23 + (-349*s12^5*s13 -
                1581*s12^4*s13^2 - 650*s12^3*s13^3 - 1295*s12^2*s13^4 +
                249*s12*s13^5)*s23^2 + (-420*s12^5 - 243*s12^4*s13 -
                579*s12^3*s13^2 - 272*s12^2*s13^3 + 91*s12*s13^4 + 100*s13^5)*
               s23^3 + (168*s12^4 - 242*s12^3*s13 - 405*s12^2*s13^2 +
                37*s12*s13^3 + 100*s13^4)*s23^4 + (588*s12^3 + 1031*s12^2*
                 s13 + 92*s12*s13^2 - 80*s13^3)*s23^5 + (-123*s12*s13 -
                80*s13^2)*s23^6) + p1q^3*(84*s12^6*s13^2 + 84*s12^5*s13^3 +
              (2*s12^6*s13 - 336*s12^5*s13^2 - 44*s12^4*s13^3 - 294*s12^3*
                 s13^4)*s23 + (-48*s12^5*s13 - 729*s12^4*s13^2 +
                55*s12^3*s13^3 - 378*s12^2*s13^4)*s23^2 + (125*s12^4*s13 -
                202*s12^3*s13^2 + 56*s12^2*s13^3 - 126*s12*s13^4)*s23^3 +
              (252*s12^4 + 199*s12^3*s13 + 58*s12^2*s13^2 - 120*s12*s13^3 -
                40*s13^4)*s23^4 + (168*s12^3 + 277*s12^2*s13 - 37*s12*s13^2 -
                40*s13^3)*s23^5 + (-84*s12^2 - 63*s12*s13 + 20*s13^2)*s23^6 +
              20*s13*s23^7)) + p3q*(p2q^4*(-84*s12^3*s13^5 - 84*s12^2*s13^6 +
              (-3*s12^5*s13^2 + 40*s12^4*s13^3 + 18*s12^2*s13^5 -
                3*s12*s13^6 + 20*s13^7)*s23 + (-168*s12^5*s13 - 125*s12^4*
                 s13^2 + 274*s12^3*s13^3 + 338*s12^2*s13^4 + 123*s12*s13^5 +
                60*s13^6)*s23^2 + (-84*s12^4*s13 + 82*s12^3*s13^2 +
                166*s12^2*s13^3 + 23*s12*s13^4 + 20*s13^5)*s23^3 +
              (-84*s12^3*s13 - 126*s12^2*s13^2 - 63*s12*s13^3 - 20*s13^4)*s23^
                4) + p1q*p2q^3*(336*s12^4*s13^4 + 168*s12^3*s13^5 -
              168*s12^2*s13^6 + (2*s12^6*s13 - 93*s12^5*s13^2 + 208*s12^4*
                 s13^3 + 261*s12^3*s13^4 + 484*s12^2*s13^5 - 126*s12*s13^6 +
                20*s13^7)*s23 + (-506*s12^5*s13 - 830*s12^4*s13^2 -
                204*s12^3*s13^3 + 110*s12^2*s13^4 - 108*s12*s13^5 - 80*s13^6)*
               s23^2 + (-168*s12^5 - 464*s12^4*s13 - 683*s12^3*s13^2 -
                662*s12^2*s13^3 - 360*s12*s13^4 - 240*s13^5)*s23^3 +
              (-168*s12^4 - 838*s12^3*s13 - 962*s12^2*s13^2 - 172*s12*s13^3 -
                80*s13^4)*s23^4 + (126*s12^2*s13 + 126*s12*s13^2 + 60*s13^3)*
               s23^5) + p1q^2*p2q^2*(-168*s12^5*s13^3 + 252*s12^4*s13^4 +
              420*s12^3*s13^5 + (4*s12^6*s13 - 302*s12^5*s13^2 +
                124*s12^4*s13^3 + 29*s12^3*s13^4 + 964*s12^2*s13^5 -
                63*s12*s13^6)*s23 + (-302*s12^5*s13 - 570*s12^4*s13^2 +
                75*s12^3*s13^3 - 76*s12^2*s13^4 + 275*s12*s13^5 - 60*s13^6)*
               s23^2 + (-168*s12^5 + 124*s12^4*s13 + 75*s12^3*s13^2 -
                256*s12^2*s13^3 + 348*s12*s13^4 + 120*s13^5)*s23^3 +
              (252*s12^4 + 29*s12^3*s13 - 76*s12^2*s13^2 + 348*s12*s13^3 +
                360*s13^4)*s23^4 + (420*s12^3 + 964*s12^2*s13 +
                275*s12*s13^2 + 120*s13^3)*s23^5 + (-63*s12*s13 - 60*s13^2)*
               s23^6) + p1q^3*p2q*(-168*s12^5*s13^3 - 168*s12^4*s13^4 +
              (2*s12^6*s13 - 506*s12^5*s13^2 - 464*s12^4*s13^3 -
                838*s12^3*s13^4 + 126*s12^2*s13^5)*s23 + (-93*s12^5*s13 -
                830*s12^4*s13^2 - 683*s12^3*s13^3 - 962*s12^2*s13^4 +
                126*s12*s13^5)*s23^2 + (208*s12^4*s13 - 204*s12^3*s13^2 -
                662*s12^2*s13^3 - 172*s12*s13^4 + 60*s13^5)*s23^3 +
              (336*s12^4 + 261*s12^3*s13 + 110*s12^2*s13^2 - 360*s12*s13^3 -
                80*s13^4)*s23^4 + (168*s12^3 + 484*s12^2*s13 - 108*s12*
                 s13^2 - 240*s13^3)*s23^5 + (-168*s12^2 - 126*s12*s13 -
                80*s13^2)*s23^6 + 20*s13*s23^7) +
            p1q^4*((-168*s12^5*s13^2 - 84*s12^4*s13^3 - 84*s12^3*s13^4)*s23 +
              (-3*s12^5*s13 - 125*s12^4*s13^2 + 82*s12^3*s13^3 -
                126*s12^2*s13^4)*s23^2 + (40*s12^4*s13 + 274*s12^3*s13^2 +
                166*s12^2*s13^3 - 63*s12*s13^4)*s23^3 + (338*s12^2*s13^2 +
                23*s12*s13^3 - 20*s13^4)*s23^4 + (-84*s12^3 + 18*s12^2*s13 +
                123*s12*s13^2 + 20*s13^3)*s23^5 + (-84*s12^2 - 3*s12*s13 +
                60*s13^2)*s23^6 + 20*s13*s23^7)))*Log(s23/(s12 + s13 + s23)))/
        (p1q*p2q^4*(-27*s12^3*s13^3 - 27*s12^2*s13^4)*s23^2 +
         p3q^5*((27*s12^4*s13^2 + 27*s12^3*s13^3)*s23^2 +
           (27*s12^3*s13^2 + 27*s12^2*s13^3)*s23^3) +
         p1q^2*p2q^3*((27*s12^4*s13^2 - 27*s12^2*s13^4)*s23^2 +
           (27*s12^3*s13^2 + 54*s12^2*s13^3)*s23^3) +
         p1q^4*p2q*(-27*s12^3*s13^2*s23^3 - 27*s12^2*s13^2*s23^4) +
         p1q^3*p2q^2*((27*s12^4*s13^2 + 27*s12^3*s13^3)*s23^2 +
           54*s12^2*s13^3*s23^3 - 27*s12^2*s13^2*s23^4) +
         p3q^3*(p2q^2*((81*s12^4*s13^2 - 81*s12^2*s13^4)*s23^2 +
             (81*s12^3*s13^2 + 81*s12^2*s13^3)*s23^3) +
           p1q^2*((81*s12^4*s13^2 + 81*s12^3*s13^3)*s23^2 +
             81*s12^2*s13^3*s23^3 - 81*s12^2*s13^2*s23^4) +
           p1q*p2q*((216*s12^4*s13^2 + 162*s12^3*s13^3 - 54*s12^2*s13^4)*
              s23^2 + (162*s12^3*s13^2 + 243*s12^2*s13^3)*s23^3 -
             54*s12^2*s13^2*s23^4)) +
         p3q*(p2q^4*(-27*s12^3*s13^3 - 27*s12^2*s13^4)*s23^2 +
           p1q*p2q^3*((54*s12^4*s13^2 - 54*s12^3*s13^3 - 108*s12^2*s13^4)*
              s23^2 + (54*s12^3*s13^2 + 81*s12^2*s13^3)*s23^3) +
           p1q^3*p2q*((54*s12^4*s13^2 + 54*s12^3*s13^3)*s23^2 +
             (-54*s12^3*s13^2 + 81*s12^2*s13^3)*s23^3 - 108*s12^2*s13^2*
              s23^4) + p1q^2*p2q^2*((135*s12^4*s13^2 + 81*s12^3*s13^3 - 54*
                s12^2*s13^4)*s23^2 + (81*s12^3*s13^2 + 216*s12^2*s13^3)*
              s23^3 - 54*s12^2*s13^2*s23^4) + p1q^4*(-27*s12^3*s13^2*s23^3 -
             27*s12^2*s13^2*s23^4)) +
         p3q^4*(p2q*((81*s12^4*s13^2 + 54*s12^3*s13^3 - 27*s12^2*s13^4)*
              s23^2 + (81*s12^3*s13^2 + 81*s12^2*s13^3)*s23^3) +
           p1q*((81*s12^4*s13^2 + 81*s12^3*s13^3)*s23^2 +
             (54*s12^3*s13^2 + 81*s12^2*s13^3)*s23^3 - 27*s12^2*s13^2*
              s23^4)) + p3q^2*(p2q^3*((27*s12^4*s13^2 - 54*s12^3*s13^3 - 81*
                s12^2*s13^4)*s23^2 + (27*s12^3*s13^2 + 27*s12^2*s13^3)*
              s23^3) + p1q^2*p2q*((189*s12^4*s13^2 + 162*s12^3*s13^3 - 27*
                s12^2*s13^4)*s23^2 + (54*s12^3*s13^2 + 243*s12^2*s13^3)*
              s23^3 - 135*s12^2*s13^2*s23^4) +
           p1q^3*((27*s12^4*s13^2 + 27*s12^3*s13^3)*s23^2 +
             (-54*s12^3*s13^2 + 27*s12^2*s13^3)*s23^3 - 81*s12^2*s13^2*
              s23^4) + p1q*p2q^2*((189*s12^4*s13^2 + 54*s12^3*s13^3 - 135*
                s12^2*s13^4)*s23^2 + (162*s12^3*s13^2 + 243*s12^2*s13^3)*
              s23^3 - 27*s12^2*s13^2*s23^4))) +
       ((p2q^4*(-6*s12^3*s13^4 - 6*s12^2*s13^5 + (-12*s12^3*s13^3 -
              18*s12^2*s13^4)*s23 + (-120*s12^3*s13^2 - 175*s12^2*s13^3 -
              63*s12*s13^4 - 20*s13^5)*s23^2 + (-120*s12^2*s13^2 -
              43*s12*s13^3 - 20*s13^4)*s23^3) + p3q^4*(6*s12^6*s13 +
            6*s12^5*s13^2 + (20*s12^5*s13 - 92*s12^4*s13^2 + 20*s12^3*s13^3)*
             s23 + (-120*s12^5 - 40*s12^4*s13 - 106*s12^3*s13^2 +
              20*s12^2*s13^3)*s23^2 + (-120*s12^4 - 94*s12^3*s13 -
              88*s12^2*s13^2)*s23^3 + 80*s12^2*s13*s23^4) +
          p1q*p2q^3*(6*s12^4*s13^3 + 6*s12^3*s13^4 +
            (2*s12^4*s13^2 + 24*s12^3*s13^3 - 67*s12^2*s13^4 + 23*s12*s13^5 -
              20*s13^6)*s23 + (120*s12^4*s13 + 15*s12^3*s13^2 -
              154*s12^2*s13^3 + 20*s12*s13^4 - 20*s13^5)*s23^2 +
            (120*s12^3*s13 + 117*s12^2*s13^2 + 123*s12*s13^3 + 60*s13^4)*
             s23^3 + (240*s12^2*s13 + 86*s12*s13^2 + 60*s13^3)*s23^4) +
          p1q^4*((-10*s12^4*s13 + 43*s12^3*s13^2 + 53*s12^2*s13^3)*s23^2 +
            (-20*s12^3*s13 + 106*s12^2*s13^2 + 63*s12*s13^3)*s23^3 +
            (-10*s12^2*s13 + 83*s12*s13^2 + 20*s13^3)*s23^4 +
            20*s13^2*s23^5) + p1q^2*p2q^2*
           ((-20*s12^4*s13^2 + 63*s12^3*s13^3 - 106*s12^2*s13^4 +
              63*s12*s13^5)*s23 + (122*s12^4*s13 + 89*s12^3*s13^2 -
              96*s12^2*s13^3 + 37*s12*s13^4 + 60*s13^5)*s23^2 +
            (-17*s12^3*s13 + 170*s12^2*s13^2 - 40*s12*s13^3 + 60*s13^4)*
             s23^3 + (-120*s12^3 + 178*s12^2*s13 - 57*s12*s13^2 - 60*s13^3)*
             s23^4 + (-120*s12^2 - 43*s12*s13 - 60*s13^2)*s23^5) +
          p1q^3*p2q*((-10*s12^4*s13^2 + 63*s12^3*s13^3 - 53*s12^2*s13^4)*
             s23 + (46*s12^4*s13 + 129*s12^3*s13^2 - 126*s12*s13^4)*s23^2 +
            (-49*s12^3*s13 + 179*s12^2*s13^2 - 143*s12*s13^3 - 60*s13^4)*
             s23^3 + (-120*s12^3 + 2*s12^2*s13 + 20*s12*s13^2 - 60*s13^3)*
             s23^4 + (-120*s12^2 - 3*s12*s13 + 20*s13^2)*s23^5 +
            20*s13*s23^6) + p3q^3*(p2q*(6*s12^6*s13 - 12*s12^5*s13^2 -
              18*s12^4*s13^3 + (8*s12^5*s13 - 127*s12^4*s13^2 + 207*s12^3*
                 s13^3 - 60*s12^2*s13^4)*s23 + (-240*s12^5 + 77*s12^4*s13 +
                135*s12^3*s13^2 + 89*s12^2*s13^3 - 40*s12*s13^4)*s23^2 +
              (-240*s12^4 - 162*s12^3*s13 - 132*s12^2*s13^2 - 40*s12*s13^3)*
               s23^3 + 243*s12^2*s13*s23^4) + p1q*(6*s12^6*s13 +
              6*s12^5*s13^2 + (28*s12^5*s13 - 273*s12^4*s13^2 +
                83*s12^3*s13^3)*s23 + (-120*s12^5 + 109*s12^4*s13 -
                263*s12^3*s13^2 + 83*s12^2*s13^3)*s23^2 + (120*s12^4 +
                64*s12^3*s13 - 144*s12^2*s13^2)*s23^3 + (240*s12^3 +
                297*s12^2*s13 - 40*s12*s13^2)*s23^4 - 40*s12*s13*s23^5)) +
          p3q^2*(p2q^2*(-18*s12^5*s13^2 + 18*s12^3*s13^4 + (-2*s12^5*s13 -
                14*s12^4*s13^2 + 204*s12^3*s13^3 - 138*s12^2*s13^4 +
                60*s12*s13^5)*s23 + (-120*s12^5 + 377*s12^4*s13 +
                413*s12^3*s13^2 - 55*s12^2*s13^3 + 57*s12*s13^4 + 20*s13^5)*
               s23^2 + (-120*s12^4 + 62*s12^3*s13 - 72*s12^2*s13^2 +
                40*s12*s13^3 + 40*s13^4)*s23^3 + (283*s12^2*s13 +
                43*s12*s13^2 + 20*s13^3)*s23^4) + p1q*p2q*(6*s12^6*s13 -
              6*s12^5*s13^2 - 12*s12^4*s13^3 + (16*s12^5*s13 - 216*s12^4*
                 s13^2 + 482*s12^3*s13^3 - 186*s12^2*s13^4)*s23 +
              (-120*s12^5 + 598*s12^4*s13 + 533*s12^3*s13^2 + 292*s12^2*
                 s13^3 - 163*s12*s13^4)*s23^2 + (360*s12^4 + 479*s12^3*s13 +
                382*s12^2*s13^2 - 117*s12*s13^3 - 40*s13^4)*s23^3 +
              (480*s12^3 + 888*s12^2*s13 - 37*s12*s13^2 - 80*s13^3)*s23^4 +
              (-83*s12*s13 - 40*s13^2)*s23^5) +
            p1q^2*((18*s12^5*s13 - 244*s12^4*s13^2 + 116*s12^3*s13^3)*s23 +
              (215*s12^4*s13 - 154*s12^3*s13^2 + 169*s12^2*s13^3)*s23^2 +
              (240*s12^4 + 119*s12^3*s13 + 70*s12^2*s13^2 + 63*s12*s13^3)*s23^
                3 + (120*s12^3 + 219*s12^2*s13 + 20*s12*s13^2 + 20*s13^3)*s23^
                4 + (-120*s12^2 - 43*s12*s13 + 40*s13^2)*s23^5 +
              20*s13*s23^6)) + p3q*(p2q^3*(18*s12^4*s13^3 + 12*s12^3*s13^4 -
              6*s12^2*s13^5 + (14*s12^4*s13^2 + 24*s12^3*s13^3 -
                97*s12^2*s13^4 + 23*s12*s13^5 - 20*s13^6)*s23 +
              (240*s12^4*s13 + 58*s12^3*s13^2 - 267*s12^2*s13^3 - 40*s13^5)*
               s23^2 + (120*s12^3*s13 - 135*s12^2*s13^2 + 40*s12*s13^3)*s23^
                3 + (120*s12^2*s13 + 43*s12*s13^2 + 20*s13^3)*s23^4) +
            p1q*p2q^2*(-12*s12^5*s13^2 - 6*s12^4*s13^3 + 6*s12^3*s13^4 +
              (-2*s12^5*s13 - 40*s12^4*s13^2 + 255*s12^3*s13^3 -
                232*s12^2*s13^4 + 123*s12*s13^5)*s23 + (619*s12^4*s13 +
                550*s12^3*s13^2 - 122*s12^2*s13^3 + 51*s12*s13^4 + 80*s13^5)*
               s23^2 + (240*s12^4 + 525*s12^3*s13 + 438*s12^2*s13^2 +
                37*s12*s13^3 + 140*s13^4)*s23^3 + (240*s12^3 + 821*s12^2*
                 s13 + 46*s12*s13^2 + 20*s13^3)*s23^4 + (-43*s12*s13 -
                40*s13^2)*s23^5) + p1q^2*p2q*((8*s12^5*s13 - 105*s12^4*
                 s13^2 + 338*s12^3*s13^3 - 179*s12^2*s13^4)*s23 +
              (327*s12^4*s13 + 316*s12^3*s13^2 + 112*s12^2*s13^3 -
                249*s12*s13^4)*s23^2 + (240*s12^4 + 112*s12^3*s13 +
                485*s12^2*s13^2 - 217*s12*s13^3 - 100*s13^4)*s23^3 +
              (407*s12^2*s13 - 34*s12*s13^2 - 160*s13^3)*s23^4 +
              (-240*s12^2 - 86*s12*s13 - 40*s13^2)*s23^5 + 20*s13*s23^6) +
            p1q^3*((10*s12^5*s13 - 63*s12^4*s13^2 + 53*s12^3*s13^3)*s23 +
              (56*s12^4*s13 + 46*s12^3*s13^2 + 159*s12^2*s13^3)*s23^2 +
              (-59*s12^3*s13 + 232*s12^2*s13^2 + 126*s12*s13^3)*s23^3 +
              (-120*s12^3 - 8*s12^2*s13 + 143*s12*s13^2 + 40*s13^3)*s23^4 +
              (-120*s12^2 - 3*s12*s13 + 60*s13^2)*s23^5 + 20*s13*s23^6)))*
         Log((s12 + s23)/(s12 + s13 + s23)))/(-27*p1q*p2q^3*s12^2*s13^3*
          s23^2 + p1q^3*p2q*(27*s12^3*s13^2*s23^2 + 27*s12^2*s13^2*s23^3) +
         p3q^4*(27*s12^3*s13^2*s23^2 + 27*s12^2*s13^2*s23^3) +
         p1q^2*p2q^2*((27*s12^3*s13^2 - 27*s12^2*s13^3)*s23^2 +
           27*s12^2*s13^2*s23^3) + p3q^3*
          (p2q*((54*s12^3*s13^2 - 27*s12^2*s13^3)*s23^2 + 54*s12^2*s13^2*
              s23^3) + p1q*(81*s12^3*s13^2*s23^2 + 81*s12^2*s13^2*s23^3)) +
         p3q*(-27*p2q^3*s12^2*s13^3*s23^2 + p1q^3*(27*s12^3*s13^2*s23^2 +
             27*s12^2*s13^2*s23^3) + p1q*p2q^2*((54*s12^3*s13^2 - 81*s12^2*
                s13^3)*s23^2 + 54*s12^2*s13^2*s23^3) +
           p1q^2*p2q*((108*s12^3*s13^2 - 27*s12^2*s13^3)*s23^2 +
             108*s12^2*s13^2*s23^3)) +
         p3q^2*(p2q^2*((27*s12^3*s13^2 - 54*s12^2*s13^3)*s23^2 +
             27*s12^2*s13^2*s23^3) + p1q^2*(81*s12^3*s13^2*s23^2 +
             81*s12^2*s13^2*s23^3) + p1q*p2q*((135*s12^3*s13^2 - 54*s12^2*
                s13^3)*s23^2 + 135*s12^2*s13^2*s23^3)))) +
     Log(s12/(s12 + s13 + s23))*
      ((p2q^3*(14*s12*s13^2 + 14*s13^3 + (14*s12*s13 + 28*s13^2)*s23 +
           14*s13*s23^2) + p1q^2*p2q*(14*s12*s13^2 - 14*s13^3 +
           (28*s12*s13 - 2*s13^2)*s23 + (2*s12 - 14*s13)*s23^2 - 26*s23^3) +
         p1q*p2q^2*(2*s12*s13^2 - 26*s13^3 + (28*s12*s13 - 14*s13^2)*s23 +
           (14*s12 - 2*s13)*s23^2 - 14*s23^3) +
         p3q^3*(-12*s12^3 - 66*s12^2*s13 - 38*s12*s13^2 - 12*s13^3 +
           (-66*s12^2 - 52*s12*s13 + 28*s13^2)*s23 + (-38*s12 + 28*s13)*
            s23^2 - 12*s23^3) + p1q^3*((14*s12*s13 + 14*s13^2)*s23 +
           (14*s12 + 28*s13)*s23^2 + 14*s23^3) +
         p3q^2*(p2q*(-6*s12^3 - 42*s12^2*s13 + 22*s12*s13^2 + 2*s13^3 +
             (-54*s12^2 + 54*s12*s13 + 108*s13^2)*s23 + (-4*s12 + 94*s13)*
              s23^2 - 12*s23^3) + p1q*(-6*s12^3 - 54*s12^2*s13 -
             4*s12*s13^2 - 12*s13^3 + (-42*s12^2 + 54*s12*s13 + 94*s13^2)*
              s23 + (22*s12 + 108*s13)*s23^2 + 2*s23^3)) +
         p3q*(p2q^2*(-8*s12^2*s13 + 28*s12*s13^2 + 8*s13^3 +
             (-14*s12^2 + 54*s12*s13 + 68*s13^2)*s23 + (14*s12 + 60*s13)*
              s23^2) + p1q*p2q*(-8*s12^2*s13 + 44*s12*s13^2 - 32*s13^3 +
             (-8*s12^2 + 136*s12*s13 + 72*s13^2)*s23 + (44*s12 + 72*s13)*
              s23^2 - 32*s23^3) + p1q^2*(-14*s12^2*s13 + 14*s12*s13^2 +
             (-8*s12^2 + 54*s12*s13 + 60*s13^2)*s23 + (28*s12 + 68*s13)*
              s23^2 + 8*s23^3)))/(p1q^2*p2q*(27*s13^2*s23 + 27*s13*s23^2) +
         p1q*p2q^2*(27*s13^2*s23 + 27*s13*s23^2) +
         p3q^3*(27*s13^2*s23 + 27*s13*s23^2) +
         p3q^2*(p1q*(54*s13^2*s23 + 54*s13*s23^2) +
           p2q*(54*s13^2*s23 + 54*s13*s23^2)) +
         p3q*(p1q^2*(27*s13^2*s23 + 27*s13*s23^2) +
           p2q^2*(27*s13^2*s23 + 27*s13*s23^2) + p1q*p2q*(81*s13^2*s23 +
             81*s13*s23^2))) +
       ((p2q^4*(6*s12*s13^4 + 6*s13^5 + (12*s12*s13^3 + 18*s13^4)*s23 +
            (24*s12*s13^2 + 36*s13^3)*s23^2 + 24*s13^2*s23^3) +
          p1q*p2q^3*(-6*s12^2*s13^3 - 6*s12*s13^4 +
            (-2*s12^2*s13^2 - 24*s12*s13^3 + 24*s13^4)*s23 +
            (-24*s12^2*s13 - 20*s12*s13^2 + 34*s13^3)*s23^2 +
            (-24*s12*s13 - 26*s13^2)*s23^3 - 48*s13*s23^4) +
          p3q^4*(-6*s12^4*s13 - 6*s12^3*s13^2 + (-20*s12^3*s13 +
              26*s12^2*s13^2)*s23 + (24*s12^3 - 26*s12^2*s13)*s23^2 +
            24*s12^2*s23^3 - 12*s13*s23^4) +
          p1q^4*((10*s12^2*s13 - 10*s13^3)*s23^2 + 20*s12*s13*s23^3 +
            10*s13*s23^4) + p1q^2*p2q^2*((20*s12^2*s13^2 - 20*s12*s13^3 +
              40*s13^4)*s23 + (-26*s12^2*s13 - 50*s12*s13^2 + 4*s13^3)*
             s23^2 + (12*s12*s13 - 70*s13^2)*s23^3 + (24*s12 - 34*s13)*
             s23^4 + 24*s23^5) + p1q^3*p2q*((10*s12^2*s13^2 - 20*s12*s13^3 +
              10*s13^4)*s23 + (2*s12^2*s13 - 42*s12*s13^2 - 40*s13^3)*s23^2 +
            (44*s12*s13 - 44*s13^2)*s23^3 + (24*s12 + 18*s13)*s23^4 +
            24*s23^5) + p3q^3*(p1q*(-6*s12^4*s13 - 6*s12^3*s13^2 +
              (-28*s12^3*s13 + 98*s12^2*s13^2)*s23 + (24*s12^3 -
                74*s12^2*s13 + 32*s12*s13^2)*s23^2 + (-24*s12^2 - 16*s12*s13)*
               s23^3 + (-48*s12 - 36*s13)*s23^4) + p2q*(-6*s12^4*s13 +
              12*s12^3*s13^2 + 18*s12^2*s13^3 + (-8*s12^3*s13 +
                84*s12^2*s13^2 - 52*s12*s13^3)*s23 + (48*s12^3 -
                42*s12^2*s13 - 32*s12*s13^2)*s23^2 + (48*s12^2 + 20*s12*s13)*
               s23^3 - 36*s13*s23^4)) +
          p3q^2*(p1q*p2q*(-6*s12^4*s13 + 6*s12^3*s13^2 + 12*s12^2*s13^3 +
              (-16*s12^3*s13 + 130*s12^2*s13^2 - 152*s12*s13^3)*s23 +
              (24*s12^3 - 174*s12^2*s13 - 172*s12*s13^2 - 84*s13^3)*s23^2 +
              (-72*s12^2 - 100*s12*s13 - 152*s13^2)*s23^3 + (-96*s12 -
                152*s13)*s23^4) + p2q^2*(18*s12^3*s13^2 - 18*s12*s13^4 +
              (2*s12^3*s13 + 14*s12^2*s13^2 - 118*s12*s13^3 + 26*s13^4)*s23 +
              (24*s12^3 - 84*s12^2*s13 - 116*s12*s13^2 + 38*s13^3)*s23^2 +
              (24*s12^2 - 14*s12*s13)*s23^3 - 48*s13*s23^4) +
            p1q^2*((-18*s12^3*s13 + 92*s12^2*s13^2 - 10*s12*s13^3)*s23 +
              (-66*s12^2*s13 + 30*s12*s13^2 - 20*s13^3)*s23^2 +
              (-48*s12^2 + 18*s12*s13 - 14*s13^2)*s23^3 + (-24*s12 - 6*s13)*
               s23^4 + 24*s23^5)) + p3q*(p1q*p2q^2*(12*s12^3*s13^2 +
              6*s12^2*s13^3 - 6*s12*s13^4 + (2*s12^3*s13 + 40*s12^2*s13^2 -
                126*s12*s13^3 + 54*s13^4)*s23 + (-134*s12^2*s13 -
                184*s12*s13^2)*s23^2 + (-48*s12^2 - 98*s12*s13 - 148*s13^2)*
               s23^3 + (-48*s12 - 154*s13)*s23^4) + p2q^3*(-18*s12^2*s13^3 -
              12*s12*s13^4 + 6*s13^5 + (-14*s12^2*s13^2 - 24*s12*s13^3 +
                54*s13^4)*s23 + (-48*s12^2*s13 - 20*s12*s13^2 + 94*s13^3)*s23^
                2 + (-24*s12*s13 + 34*s13^2)*s23^3 - 24*s13*s23^4) +
            p1q^3*((-10*s12^3*s13 + 20*s12^2*s13^2 - 10*s12*s13^3)*s23 +
              (-8*s12^2*s13 - 2*s12*s13^2 - 30*s13^3)*s23^2 +
              (54*s12*s13 - 14*s13^2)*s23^3 + (24*s12 + 28*s13)*s23^4 +
              24*s23^5) + p1q^2*p2q*((-8*s12^3*s13 + 62*s12^2*s13^2 -
                120*s12*s13^3 + 10*s13^4)*s23 + (-82*s12^2*s13 -
                140*s12*s13^2 - 106*s13^3)*s23^2 + (-48*s12^2 + 20*s12*s13 -
                154*s13^2)*s23^3 - 50*s13*s23^4 + 48*s23^5)))*
         Log(s13/(s12 + s13 + s23)))/(-27*p1q*p2q^3*s13^3*s23^2 +
         p1q^3*p2q*(27*s12*s13^2*s23^2 + 27*s13^2*s23^3) +
         p3q^4*(27*s12*s13^2*s23^2 + 27*s13^2*s23^3) +
         p1q^2*p2q^2*((27*s12*s13^2 - 27*s13^3)*s23^2 + 27*s13^2*s23^3) +
         p3q^3*(p2q*((54*s12*s13^2 - 27*s13^3)*s23^2 + 54*s13^2*s23^3) +
           p1q*(81*s12*s13^2*s23^2 + 81*s13^2*s23^3)) +
         p3q*(-27*p2q^3*s13^3*s23^2 + p1q^3*(27*s12*s13^2*s23^2 +
             27*s13^2*s23^3) + p1q*p2q^2*((54*s12*s13^2 - 81*s13^3)*s23^2 +
             54*s13^2*s23^3) + p1q^2*p2q*((108*s12*s13^2 - 27*s13^3)*s23^2 +
             108*s13^2*s23^3)) + p3q^2*(p2q^2*((27*s12*s13^2 - 54*s13^3)*
              s23^2 + 27*s13^2*s23^3) + p1q^2*(81*s12*s13^2*s23^2 +
             81*s13^2*s23^3) + p1q*p2q*((135*s12*s13^2 - 54*s13^3)*s23^2 +
             135*s13^2*s23^3))) +
       ((p3q^4*(24*s12^3*s13^2 + 24*s12^2*s13^3 + (-6*s12^4 - 20*s12^3*s13 -
              26*s12^2*s13^2 - 12*s13^4)*s23 + (-6*s12^3 + 26*s12^2*s13)*
             s23^2) + p2q^4*((10*s12^2*s13^2 + 20*s12*s13^3 + 10*s13^4)*s23 -
            10*s13^2*s23^3) + p1q*p2q^3*(24*s12*s13^4 + 24*s13^5 +
            (2*s12^2*s13^2 + 44*s12*s13^3 + 18*s13^4)*s23 +
            (10*s12^2*s13 - 42*s12*s13^2 - 44*s13^3)*s23^2 +
            (-20*s12*s13 - 40*s13^2)*s23^3 + 10*s13*s23^4) +
          p1q^2*p2q^2*(24*s12*s13^4 + 24*s13^5 + (-26*s12^2*s13^2 +
              12*s12*s13^3 - 34*s13^4)*s23 + (20*s12^2*s13 - 50*s12*s13^2 -
              70*s13^3)*s23^2 + (-20*s12*s13 + 4*s13^2)*s23^3 +
            40*s13*s23^4) + p1q^3*p2q*((-24*s12^2*s13^2 - 24*s12*s13^3 -
              48*s13^4)*s23 + (-2*s12^2*s13 - 20*s12*s13^2 - 26*s13^3)*
             s23^2 + (-6*s12^2 - 24*s12*s13 + 34*s13^2)*s23^3 +
            (-6*s12 + 24*s13)*s23^4) + p1q^4*((24*s12*s13^2 + 24*s13^3)*
             s23^2 + (12*s12*s13 + 36*s13^2)*s23^3 + (6*s12 + 18*s13)*s23^4 +
            6*s23^5) + p3q^3*(p2q*(24*s12^3*s13^2 - 24*s12^2*s13^3 -
              48*s12*s13^4 + (-6*s12^4 - 28*s12^3*s13 - 74*s12^2*s13^2 -
                16*s12*s13^3 - 36*s13^4)*s23 + (-6*s12^3 + 98*s12^2*s13 +
                32*s12*s13^2)*s23^2) + p1q*(48*s12^3*s13^2 + 48*s12^2*s13^3 +
              (-6*s12^4 - 8*s12^3*s13 - 42*s12^2*s13^2 + 20*s12*s13^3 -
                36*s13^4)*s23 + (12*s12^3 + 84*s12^2*s13 - 32*s12*s13^2)*s23^
                2 + (18*s12^2 - 52*s12*s13)*s23^3)) +
          p3q^2*(p1q*p2q*(24*s12^3*s13^2 - 72*s12^2*s13^3 - 96*s12*s13^4 +
              (-6*s12^4 - 16*s12^3*s13 - 174*s12^2*s13^2 - 100*s12*s13^3 -
                152*s13^4)*s23 + (6*s12^3 + 130*s12^2*s13 - 172*s12*s13^2 -
                152*s13^3)*s23^2 + (12*s12^2 - 152*s12*s13 - 84*s13^2)*s23^
                3) + p2q^2*(-48*s12^2*s13^3 - 24*s12*s13^4 + 24*s13^5 +
              (-18*s12^3*s13 - 66*s12^2*s13^2 + 18*s12*s13^3 - 6*s13^4)*s23 +
              (92*s12^2*s13 + 30*s12*s13^2 - 14*s13^3)*s23^2 +
              (-10*s12*s13 - 20*s13^2)*s23^3) + p1q^2*(24*s12^3*s13^2 +
              24*s12^2*s13^3 + (2*s12^3*s13 - 84*s12^2*s13^2 - 14*s12*s13^3 -
                48*s13^4)*s23 + (18*s12^3 + 14*s12^2*s13 - 116*s12*s13^2)*s23^
                2 + (-118*s12*s13 + 38*s13^2)*s23^3 + (-18*s12 + 26*s13)*s23^
                4)) + p3q*(p2q^3*(24*s12*s13^4 + 24*s13^5 + (-10*s12^3*s13 -
                8*s12^2*s13^2 + 54*s12*s13^3 + 28*s13^4)*s23 +
              (20*s12^2*s13 - 2*s12*s13^2 - 14*s13^3)*s23^2 +
              (-10*s12*s13 - 30*s13^2)*s23^3) + p1q*p2q^2*(-48*s12^2*s13^3 +
              48*s13^5 + (-8*s12^3*s13 - 82*s12^2*s13^2 + 20*s12*s13^3 -
                50*s13^4)*s23 + (62*s12^2*s13 - 140*s12*s13^2 - 154*s13^3)*
               s23^2 + (-120*s12*s13 - 106*s13^2)*s23^3 + 10*s13*s23^4) +
            p1q^2*p2q*(-48*s12^2*s13^3 - 48*s12*s13^4 + (2*s12^3*s13 -
                134*s12^2*s13^2 - 98*s12*s13^3 - 154*s13^4)*s23 +
              (12*s12^3 + 40*s12^2*s13 - 184*s12*s13^2 - 148*s13^3)*s23^2 +
              (6*s12^2 - 126*s12*s13)*s23^3 + (-6*s12 + 54*s13)*s23^4) +
            p1q^3*((-48*s12^2*s13^2 - 24*s12*s13^3 - 24*s13^4)*s23 +
              (-14*s12^2*s13 - 20*s12*s13^2 + 34*s13^3)*s23^2 +
              (-18*s12^2 - 24*s12*s13 + 94*s13^2)*s23^3 + (-12*s12 + 54*s13)*
               s23^4 + 6*s23^5)))*Log(s23/(s12 + s13 + s23)))/
        (p1q*p2q^3*(27*s12*s13^2 + 27*s13^3)*s23^2 +
         p3q^4*(27*s12*s13^2 + 27*s13^3)*s23^2 - 27*p1q^3*p2q*s13^2*s23^3 +
         p1q^2*p2q^2*((27*s12*s13^2 + 27*s13^3)*s23^2 - 27*s13^2*s23^3) +
         p3q^2*(p2q^2*(81*s12*s13^2 + 81*s13^3)*s23^2 +
           p1q^2*((27*s12*s13^2 + 27*s13^3)*s23^2 - 54*s13^2*s23^3) +
           p1q*p2q*((135*s12*s13^2 + 135*s13^3)*s23^2 - 54*s13^2*s23^3)) +
         p3q^3*(p2q*(81*s12*s13^2 + 81*s13^3)*s23^2 +
           p1q*((54*s12*s13^2 + 54*s13^3)*s23^2 - 27*s13^2*s23^3)) +
         p3q*(p2q^3*(27*s12*s13^2 + 27*s13^3)*s23^2 - 27*p1q^3*s13^2*s23^3 +
           p1q^2*p2q*((54*s12*s13^2 + 54*s13^3)*s23^2 - 81*s13^2*s23^3) +
           p1q*p2q^2*((108*s12*s13^2 + 108*s13^3)*s23^2 - 27*s13^2*s23^3))) +
       ((p2q^3*(2*s12*s13^3 + 2*s13^4 + (4*s12*s13^2 + 6*s13^3)*s23 +
            4*s13^2*s23^2) + p3q^3*(2*s12^3*s13 + 2*s12^2*s13^2 +
            (2*s12^3 - 4*s12^2*s13)*s23 + (2*s12^2 + 8*s13^2)*s23^2) +
          p1q^2*p2q*((4*s12*s13^2 - 4*s13^3)*s23 + (2*s12*s13 - 2*s13^2)*
             s23^2 - 6*s13*s23^3) + p1q*p2q^2*((2*s12*s13^2 - 6*s13^3)*s23 +
            (4*s12*s13 - 2*s13^2)*s23^2 - 4*s13*s23^3) +
          p1q^3*((4*s12*s13 + 4*s13^2)*s23^2 + (2*s12 + 6*s13)*s23^3 +
            2*s23^4) + p3q^2*(p2q*(2*s12^3*s13 - 2*s12^2*s13^2 -
              4*s12*s13^3 - 10*s12^2*s13*s23 + (4*s12*s13 + 16*s13^2)*s23^
                2) + p1q*((2*s12^3 - 10*s12^2*s13 + 4*s12*s13^2)*s23 +
              (-2*s12^2 + 16*s13^2)*s23^2 - 4*s12*s23^3)) +
          p3q*(p2q^2*(-4*s12^2*s13^2 - 2*s12*s13^3 + 2*s13^4 +
              (-4*s12^2*s13 + 2*s12*s13^2 + 4*s13^3)*s23 + (4*s12*s13 +
                10*s13^2)*s23^2) + p1q*p2q*((-8*s12^2*s13 + 8*s12*s13^2 -
                8*s13^3)*s23 + (8*s12*s13 + 8*s13^2)*s23^2 - 8*s13*s23^3) +
            p1q^2*((-4*s12^2*s13 + 4*s12*s13^2)*s23 + (-4*s12^2 + 2*s12*s13 +
                10*s13^2)*s23^2 + (-2*s12 + 4*s13)*s23^3 + 2*s23^4)))*
         Log((s13 + s23)/(s12 + s13 + s23)))/(9*p1q^2*p2q*s13^2*s23^2 +
         9*p1q*p2q^2*s13^2*s23^2 + 9*p3q^3*s13^2*s23^2 +
         p3q^2*(18*p1q*s13^2*s23^2 + 18*p2q*s13^2*s23^2) +
         p3q*(9*p1q^2*s13^2*s23^2 + 27*p1q*p2q*s13^2*s23^2 +
           9*p2q^2*s13^2*s23^2))) +
     ((p3q^5*(120*s12^3*s13 + 120*s12^2*s13^2 + (-20*s12^3 + 100*s12^2*s13 -
            60*s12*s13^2 - 60*s13^3)*s23 + (-20*s12^2 - 60*s13^2)*s23^2) +
        p2q^5*((10*s12^2*s13 + 20*s12*s13^2 + 10*s13^3)*s23 +
          (20*s12*s13 + 20*s13^2)*s23^2 + 10*s13*s23^3) +
        p1q^3*p2q^2*((-120*s12^2*s13 - 360*s12*s13^2 - 240*s13^3)*s23 +
          (10*s12^2 - 20*s12*s13 - 150*s13^2)*s23^2 + (-20*s12 + 60*s13)*
           s23^3 - 30*s23^4) + p1q^2*p2q^3*(120*s12*s13^3 + 120*s13^4 +
          (-110*s12^2*s13 - 300*s12*s13^2 - 70*s13^3)*s23 +
          (20*s12^2 - 60*s12*s13 - 160*s13^2)*s23^2 + 10*s13*s23^3 -
          20*s23^4) + p1q^4*p2q*((120*s12*s13 + 120*s13^2)*s23^2 +
          (-20*s12 + 100*s13)*s23^3 - 20*s23^4) +
        p1q*p2q^4*(120*s12*s13^3 + 120*s13^4 +
          (-40*s12^2*s13 - 40*s12*s13^2 + 120*s13^3)*s23 +
          (10*s12^2 - 20*s12*s13 + 10*s13^2)*s23^2 - 10*s23^4) +
        p3q^4*(p2q*(240*s12^3*s13 - 240*s12*s13^3 +
            (-60*s12^3 + 140*s12^2*s13 - 460*s12*s13^2 - 180*s13^3)*s23 +
            (-60*s12^2 - 40*s12*s13 - 180*s13^2)*s23^2) +
          p1q*(240*s12^3*s13 + 240*s12^2*s13^2 + (-20*s12^3 + 60*s12^2*s13 -
              340*s12*s13^2 - 180*s13^3)*s23 + (20*s12^2 - 120*s12*s13 -
              180*s13^2)*s23^2 + 40*s12*s23^3)) +
        p3q^3*(p2q^2*(120*s12^3*s13 - 360*s12^2*s13^2 - 360*s12*s13^3 +
            120*s13^4 + (-70*s12^3 - 80*s12^2*s13 - 790*s12*s13^2 - 60*s13^3)*
             s23 + (-60*s12^2 - 100*s12*s13 - 160*s13^2)*s23^2 +
            (10*s12 + 20*s13)*s23^3) + p1q*p2q*(360*s12^3*s13 -
            120*s12^2*s13^2 - 480*s12*s13^3 + (-60*s12^3 - 60*s12^2*s13 -
              1340*s12*s13^2 - 500*s13^3)*s23 + (40*s12^2 - 120*s12*s13 -
              360*s13^2)*s23^2 + (100*s12 + 140*s13)*s23^3) +
          p1q^2*(120*s12^3*s13 + 120*s12^2*s13^2 +
            (-10*s12^3 - 300*s12^2*s13 - 650*s12*s13^2 - 240*s13^3)*s23 +
            (40*s12^2 - 300*s12*s13 - 180*s13^2)*s23^2 + (30*s12 + 40*s13)*
             s23^3 - 20*s23^4)) + p3q*(p2q^4*(120*s12*s13^3 + 120*s13^4 +
            (-10*s12^3 - 40*s12^2*s13 - 10*s12*s13^2 + 140*s13^3)*s23 +
            (20*s12*s13 + 60*s13^2)*s23^2 + (10*s12 + 40*s13)*s23^3) +
          p1q^3*p2q*((-120*s12^2*s13 - 240*s12*s13^2 - 120*s13^3)*s23 +
            (40*s12^2 + 440*s12*s13 + 400*s13^2)*s23^2 + (-20*s12 + 460*s13)*
             s23^3 - 60*s23^4) + p1q^2*p2q^2*(-240*s12^2*s13^2 -
            120*s12*s13^3 + 120*s13^4 + (-10*s12^3 - 400*s12^2*s13 -
              1250*s12*s13^2 - 500*s13^3)*s23 + (80*s12^2 - 20*s12*s13 -
              340*s13^2)*s23^2 + (50*s12 + 240*s13)*s23^3 - 40*s23^4) +
          p1q*p2q^3*(-240*s12^2*s13^2 + 120*s12*s13^3 + 360*s13^4 +
            (-20*s12^3 - 260*s12^2*s13 - 740*s12*s13^2 + 100*s13^3)*s23 +
            (40*s12^2 - 120*s12*s13 - 200*s13^2)*s23^2 + (40*s12 + 40*s13)*
             s23^3 - 20*s23^4) + p1q^4*((120*s12*s13 + 120*s13^2)*s23^2 +
            (-20*s12 + 100*s13)*s23^3 - 20*s23^4)) +
        p3q^2*(p2q^3*(-240*s12^2*s13^2 + 240*s13^4 +
            (-40*s12^3 - 170*s12^2*s13 - 420*s12*s13^2 + 190*s13^3)*s23 +
            (-20*s12^2 - 60*s12*s13)*s23^2 + (20*s12 + 50*s13)*s23^3) +
          p1q^2*p2q*(120*s12^3*s13 - 120*s12^2*s13^2 - 240*s12*s13^3 +
            (-20*s12^3 - 350*s12^2*s13 - 1120*s12*s13^2 - 430*s13^3)*s23 +
            (100*s12^2 + 220*s12*s13 + 120*s13^2)*s23^2 + (80*s12 + 510*s13)*
             s23^3 - 40*s23^4) + p1q^3*((-240*s12^2*s13 - 360*s12*s13^2 -
              120*s13^3)*s23 + (30*s12^2 - 20*s12*s13 + 70*s13^2)*s23^2 +
            160*s13*s23^3 - 30*s23^4) + p1q*p2q^2*(120*s12^3*s13 -
            600*s12^2*s13^2 - 480*s12*s13^3 + 240*s13^4 +
            (-60*s12^3 - 340*s12^2*s13 - 1700*s12*s13^2 - 340*s13^3)*s23 +
            (50*s12^2 - 100*s12*s13 - 390*s13^2)*s23^2 + (100*s12 + 180*s13)*
             s23^3 - 10*s23^4)))*PolyLog(2, p1q/(p1q + p2q + p3q)))/
      (p1q*p2q^4*(27*s12*s13 + 27*s13^2)*s23^2 +
       p3q^5*(27*s12*s13 + 27*s13^2)*s23^2 - 27*p1q^3*p2q^2*s13*s23^3 +
       p1q^2*p2q^3*((27*s12*s13 + 27*s13^2)*s23^2 - 27*s13*s23^3) +
       p3q^2*(p2q^3*(108*s12*s13 + 108*s13^2)*s23^2 - 27*p1q^3*s13*s23^3 +
         p1q^2*p2q*((81*s12*s13 + 81*s13^2)*s23^2 - 135*s13*s23^3) +
         p1q*p2q^2*((243*s12*s13 + 243*s13^2)*s23^2 - 81*s13*s23^3)) +
       p3q^3*(p2q^2*(162*s12*s13 + 162*s13^2)*s23^2 +
         p1q*p2q*((189*s12*s13 + 189*s13^2)*s23^2 - 81*s13*s23^3) +
         p1q^2*((27*s12*s13 + 27*s13^2)*s23^2 - 54*s13*s23^3)) +
       p3q^4*(p2q*(108*s12*s13 + 108*s13^2)*s23^2 +
         p1q*((54*s12*s13 + 54*s13^2)*s23^2 - 27*s13*s23^3)) +
       p3q*(p2q^4*(27*s12*s13 + 27*s13^2)*s23^2 - 54*p1q^3*p2q*s13*s23^3 +
         p1q^2*p2q^2*((81*s12*s13 + 81*s13^2)*s23^2 - 108*s13*s23^3) +
         p1q*p2q^3*((135*s12*s13 + 135*s13^2)*s23^2 - 27*s13*s23^3))) +
     ((p1q*p2q^4*(-20*s12*s13^3 - 20*s13^4 + (120*s12*s13^2 + 100*s13^3)*
           s23 + 120*s13^2*s23^2) + p1q^2*p2q^3*(10*s12^2*s13^2 -
          20*s12*s13^3 - 30*s13^4 + (-120*s12^2*s13 - 20*s12*s13^2 +
            60*s13^3)*s23 + (-360*s12*s13 - 150*s13^2)*s23^2 -
          240*s13*s23^3) + p3q^5*(-20*s12^3*s13 - 20*s12^2*s13^2 +
          (120*s12^3 + 100*s12^2*s13)*s23 + (120*s12^2 - 60*s12*s13 -
            60*s13^2)*s23^2 - 60*s13*s23^3) +
        p1q^5*((10*s12^2*s13 + 20*s12*s13^2 + 10*s13^3)*s23 +
          (20*s12*s13 + 20*s13^2)*s23^2 + 10*s13*s23^3) +
        p1q^3*p2q^2*(20*s12^2*s13^2 - 20*s13^4 +
          (-110*s12^2*s13 - 60*s12*s13^2 + 10*s13^3)*s23 +
          (-300*s12*s13 - 160*s13^2)*s23^2 + (120*s12 - 70*s13)*s23^3 +
          120*s23^4) + p1q^4*p2q*(10*s12^2*s13^2 - 10*s13^4 +
          (-40*s12^2*s13 - 20*s12*s13^2)*s23 + (-40*s12*s13 + 10*s13^2)*
           s23^2 + (120*s12 + 120*s13)*s23^3 + 120*s23^4) +
        p3q^4*(p1q*(-60*s12^3*s13 - 60*s12^2*s13^2 +
            (240*s12^3 + 140*s12^2*s13 - 40*s12*s13^2)*s23 +
            (-460*s12*s13 - 180*s13^2)*s23^2 + (-240*s12 - 180*s13)*s23^3) +
          p2q*(-20*s12^3*s13 + 20*s12^2*s13^2 + 40*s12*s13^3 +
            (240*s12^3 + 60*s12^2*s13 - 120*s12*s13^2)*s23 +
            (240*s12^2 - 340*s12*s13 - 180*s13^2)*s23^2 - 180*s13*s23^3)) +
        p3q^3*(p1q*p2q*(-60*s12^3*s13 + 40*s12^2*s13^2 + 100*s12*s13^3 +
            (360*s12^3 - 60*s12^2*s13 - 120*s12*s13^2 + 140*s13^3)*s23 +
            (-120*s12^2 - 1340*s12*s13 - 360*s13^2)*s23^2 +
            (-480*s12 - 500*s13)*s23^3) + p2q^2*(-10*s12^3*s13 +
            40*s12^2*s13^2 + 30*s12*s13^3 - 20*s13^4 +
            (120*s12^3 - 300*s12^2*s13 - 300*s12*s13^2 + 40*s13^3)*s23 +
            (120*s12^2 - 650*s12*s13 - 180*s13^2)*s23^2 - 240*s13*s23^3) +
          p1q^2*(-70*s12^3*s13 - 60*s12^2*s13^2 + 10*s12*s13^3 +
            (120*s12^3 - 80*s12^2*s13 - 100*s12*s13^2 + 20*s13^3)*s23 +
            (-360*s12^2 - 790*s12*s13 - 160*s13^2)*s23^2 +
            (-360*s12 - 60*s13)*s23^3 + 120*s23^4)) +
        p3q^2*(p1q*p2q^2*(-20*s12^3*s13 + 100*s12^2*s13^2 + 80*s12*s13^3 -
            40*s13^4 + (120*s12^3 - 350*s12^2*s13 + 220*s12*s13^2 +
              510*s13^3)*s23 + (-120*s12^2 - 1120*s12*s13 + 120*s13^2)*
             s23^2 + (-240*s12 - 430*s13)*s23^3) +
          p2q^3*(30*s12^2*s13^2 - 30*s13^4 + (-240*s12^2*s13 - 20*s12*s13^2 +
              160*s13^3)*s23 + (-360*s12*s13 + 70*s13^2)*s23^2 -
            120*s13*s23^3) + p1q^2*p2q*(-60*s12^3*s13 + 50*s12^2*s13^2 +
            100*s12*s13^3 - 10*s13^4 + (120*s12^3 - 340*s12^2*s13 -
              100*s12*s13^2 + 180*s13^3)*s23 + (-600*s12^2 - 1700*s12*s13 -
              390*s13^2)*s23^2 + (-480*s12 - 340*s13)*s23^3 + 240*s23^4) +
          p1q^3*(-40*s12^3*s13 - 20*s12^2*s13^2 + 20*s12*s13^3 +
            (-170*s12^2*s13 - 60*s12*s13^2 + 50*s13^3)*s23 +
            (-240*s12^2 - 420*s12*s13)*s23^2 + 190*s13*s23^3 + 240*s23^4)) +
        p3q*(p2q^4*(-20*s12*s13^3 - 20*s13^4 + (120*s12*s13^2 + 100*s13^3)*
             s23 + 120*s13^2*s23^2) + p1q*p2q^3*(40*s12^2*s13^2 -
            20*s12*s13^3 - 60*s13^4 + (-120*s12^2*s13 + 440*s12*s13^2 +
              460*s13^3)*s23 + (-240*s12*s13 + 400*s13^2)*s23^2 -
            120*s13*s23^3) + p1q^2*p2q^2*(-10*s12^3*s13 + 80*s12^2*s13^2 +
            50*s12*s13^3 - 40*s13^4 + (-400*s12^2*s13 - 20*s12*s13^2 +
              240*s13^3)*s23 + (-240*s12^2 - 1250*s12*s13 - 340*s13^2)*
             s23^2 + (-120*s12 - 500*s13)*s23^3 + 120*s23^4) +
          p1q^4*(-10*s12^3*s13 + 10*s12*s13^3 + (-40*s12^2*s13 +
              20*s12*s13^2 + 40*s13^3)*s23 + (-10*s12*s13 + 60*s13^2)*s23^2 +
            (120*s12 + 140*s13)*s23^3 + 120*s23^4) +
          p1q^3*p2q*(-20*s12^3*s13 + 40*s12^2*s13^2 + 40*s12*s13^3 -
            20*s13^4 + (-260*s12^2*s13 - 120*s12*s13^2 + 40*s13^3)*s23 +
            (-240*s12^2 - 740*s12*s13 - 200*s13^2)*s23^2 +
            (120*s12 + 100*s13)*s23^3 + 360*s23^4)))*
       PolyLog(2, p2q/(p1q + p2q + p3q)))/(-27*p1q^2*p2q^3*s13^3*s23 +
       p1q^4*p2q*(27*s12*s13^2*s23 + 27*s13^2*s23^2) +
       p3q^5*(27*s12*s13^2*s23 + 27*s13^2*s23^2) +
       p1q^3*p2q^2*((27*s12*s13^2 - 27*s13^3)*s23 + 27*s13^2*s23^2) +
       p3q^4*(p2q*((54*s12*s13^2 - 27*s13^3)*s23 + 54*s13^2*s23^2) +
         p1q*(108*s12*s13^2*s23 + 108*s13^2*s23^2)) +
       p3q*(-54*p1q*p2q^3*s13^3*s23 + p1q^4*(27*s12*s13^2*s23 +
           27*s13^2*s23^2) + p1q^2*p2q^2*((81*s12*s13^2 - 108*s13^3)*s23 +
           81*s13^2*s23^2) + p1q^3*p2q*((135*s12*s13^2 - 27*s13^3)*s23 +
           135*s13^2*s23^2)) + p3q^3*(p2q^2*((27*s12*s13^2 - 54*s13^3)*s23 +
           27*s13^2*s23^2) + p1q^2*(162*s12*s13^2*s23 + 162*s13^2*s23^2) +
         p1q*p2q*((189*s12*s13^2 - 81*s13^3)*s23 + 189*s13^2*s23^2)) +
       p3q^2*(-27*p2q^3*s13^3*s23 + p1q*p2q^2*((81*s12*s13^2 - 135*s13^3)*
            s23 + 81*s13^2*s23^2) + p1q^3*(108*s12*s13^2*s23 +
           108*s13^2*s23^2) + p1q^2*p2q*((243*s12*s13^2 - 81*s13^3)*s23 +
           243*s13^2*s23^2))) +
     ((p2q^3*(2*s12*s13^3 + 2*s13^4 + (4*s12*s13^2 + 6*s13^3)*s23 +
          4*s13^2*s23^2) + p3q^3*(2*s12^3*s13 + 2*s12^2*s13^2 +
          (2*s12^3 - 4*s12^2*s13)*s23 + (2*s12^2 + 8*s13^2)*s23^2) +
        p1q^2*p2q*((4*s12*s13^2 - 4*s13^3)*s23 + (2*s12*s13 - 2*s13^2)*
           s23^2 - 6*s13*s23^3) + p1q*p2q^2*((2*s12*s13^2 - 6*s13^3)*s23 +
          (4*s12*s13 - 2*s13^2)*s23^2 - 4*s13*s23^3) +
        p1q^3*((4*s12*s13 + 4*s13^2)*s23^2 + (2*s12 + 6*s13)*s23^3 +
          2*s23^4) + p3q^2*(p2q*(2*s12^3*s13 - 2*s12^2*s13^2 - 4*s12*s13^3 -
            10*s12^2*s13*s23 + (4*s12*s13 + 16*s13^2)*s23^2) +
          p1q*((2*s12^3 - 10*s12^2*s13 + 4*s12*s13^2)*s23 +
            (-2*s12^2 + 16*s13^2)*s23^2 - 4*s12*s23^3)) +
        p3q*(p2q^2*(-4*s12^2*s13^2 - 2*s12*s13^3 + 2*s13^4 +
            (-4*s12^2*s13 + 2*s12*s13^2 + 4*s13^3)*s23 +
            (4*s12*s13 + 10*s13^2)*s23^2) + p1q*p2q*
           ((-8*s12^2*s13 + 8*s12*s13^2 - 8*s13^3)*s23 +
            (8*s12*s13 + 8*s13^2)*s23^2 - 8*s13*s23^3) +
          p1q^2*((-4*s12^2*s13 + 4*s12*s13^2)*s23 +
            (-4*s12^2 + 2*s12*s13 + 10*s13^2)*s23^2 + (-2*s12 + 4*s13)*
             s23^3 + 2*s23^4)))*PolyLog(2, s12/(s12 + s13 + s23)))/
      (9*p1q^2*p2q*s13^2*s23^2 + 9*p1q*p2q^2*s13^2*s23^2 +
       9*p3q^3*s13^2*s23^2 + p3q^2*(18*p1q*s13^2*s23^2 +
         18*p2q*s13^2*s23^2) + p3q*(9*p1q^2*s13^2*s23^2 +
         27*p1q*p2q*s13^2*s23^2 + 9*p2q^2*s13^2*s23^2)) +
     ((p2q^4*(-6*s12^3*s13^4 - 6*s12^2*s13^5 + (-12*s12^3*s13^3 -
            18*s12^2*s13^4)*s23 + (-120*s12^3*s13^2 - 175*s12^2*s13^3 -
            63*s12*s13^4 - 20*s13^5)*s23^2 + (-120*s12^2*s13^2 -
            43*s12*s13^3 - 20*s13^4)*s23^3) +
        p3q^4*(6*s12^6*s13 + 6*s12^5*s13^2 + (20*s12^5*s13 - 92*s12^4*s13^2 +
            20*s12^3*s13^3)*s23 + (-120*s12^5 - 40*s12^4*s13 -
            106*s12^3*s13^2 + 20*s12^2*s13^3)*s23^2 +
          (-120*s12^4 - 94*s12^3*s13 - 88*s12^2*s13^2)*s23^3 +
          80*s12^2*s13*s23^4) + p1q*p2q^3*(6*s12^4*s13^3 + 6*s12^3*s13^4 +
          (2*s12^4*s13^2 + 24*s12^3*s13^3 - 67*s12^2*s13^4 + 23*s12*s13^5 -
            20*s13^6)*s23 + (120*s12^4*s13 + 15*s12^3*s13^2 -
            154*s12^2*s13^3 + 20*s12*s13^4 - 20*s13^5)*s23^2 +
          (120*s12^3*s13 + 117*s12^2*s13^2 + 123*s12*s13^3 + 60*s13^4)*
           s23^3 + (240*s12^2*s13 + 86*s12*s13^2 + 60*s13^3)*s23^4) +
        p1q^4*((-10*s12^4*s13 + 43*s12^3*s13^2 + 53*s12^2*s13^3)*s23^2 +
          (-20*s12^3*s13 + 106*s12^2*s13^2 + 63*s12*s13^3)*s23^3 +
          (-10*s12^2*s13 + 83*s12*s13^2 + 20*s13^3)*s23^4 + 20*s13^2*s23^5) +
        p1q^2*p2q^2*((-20*s12^4*s13^2 + 63*s12^3*s13^3 - 106*s12^2*s13^4 +
            63*s12*s13^5)*s23 + (122*s12^4*s13 + 89*s12^3*s13^2 -
            96*s12^2*s13^3 + 37*s12*s13^4 + 60*s13^5)*s23^2 +
          (-17*s12^3*s13 + 170*s12^2*s13^2 - 40*s12*s13^3 + 60*s13^4)*s23^3 +
          (-120*s12^3 + 178*s12^2*s13 - 57*s12*s13^2 - 60*s13^3)*s23^4 +
          (-120*s12^2 - 43*s12*s13 - 60*s13^2)*s23^5) +
        p1q^3*p2q*((-10*s12^4*s13^2 + 63*s12^3*s13^3 - 53*s12^2*s13^4)*s23 +
          (46*s12^4*s13 + 129*s12^3*s13^2 - 126*s12*s13^4)*s23^2 +
          (-49*s12^3*s13 + 179*s12^2*s13^2 - 143*s12*s13^3 - 60*s13^4)*
           s23^3 + (-120*s12^3 + 2*s12^2*s13 + 20*s12*s13^2 - 60*s13^3)*
           s23^4 + (-120*s12^2 - 3*s12*s13 + 20*s13^2)*s23^5 +
          20*s13*s23^6) + p3q^3*(p2q*(6*s12^6*s13 - 12*s12^5*s13^2 -
            18*s12^4*s13^3 + (8*s12^5*s13 - 127*s12^4*s13^2 +
              207*s12^3*s13^3 - 60*s12^2*s13^4)*s23 +
            (-240*s12^5 + 77*s12^4*s13 + 135*s12^3*s13^2 + 89*s12^2*s13^3 -
              40*s12*s13^4)*s23^2 + (-240*s12^4 - 162*s12^3*s13 -
              132*s12^2*s13^2 - 40*s12*s13^3)*s23^3 + 243*s12^2*s13*s23^4) +
          p1q*(6*s12^6*s13 + 6*s12^5*s13^2 + (28*s12^5*s13 - 273*s12^4*s13^
                2 + 83*s12^3*s13^3)*s23 + (-120*s12^5 + 109*s12^4*s13 -
              263*s12^3*s13^2 + 83*s12^2*s13^3)*s23^2 +
            (120*s12^4 + 64*s12^3*s13 - 144*s12^2*s13^2)*s23^3 +
            (240*s12^3 + 297*s12^2*s13 - 40*s12*s13^2)*s23^4 -
            40*s12*s13*s23^5)) + p3q^2*(p2q^2*(-18*s12^5*s13^2 +
            18*s12^3*s13^4 + (-2*s12^5*s13 - 14*s12^4*s13^2 +
              204*s12^3*s13^3 - 138*s12^2*s13^4 + 60*s12*s13^5)*s23 +
            (-120*s12^5 + 377*s12^4*s13 + 413*s12^3*s13^2 - 55*s12^2*s13^3 +
              57*s12*s13^4 + 20*s13^5)*s23^2 + (-120*s12^4 + 62*s12^3*s13 -
              72*s12^2*s13^2 + 40*s12*s13^3 + 40*s13^4)*s23^3 +
            (283*s12^2*s13 + 43*s12*s13^2 + 20*s13^3)*s23^4) +
          p1q*p2q*(6*s12^6*s13 - 6*s12^5*s13^2 - 12*s12^4*s13^3 +
            (16*s12^5*s13 - 216*s12^4*s13^2 + 482*s12^3*s13^3 -
              186*s12^2*s13^4)*s23 + (-120*s12^5 + 598*s12^4*s13 +
              533*s12^3*s13^2 + 292*s12^2*s13^3 - 163*s12*s13^4)*s23^2 +
            (360*s12^4 + 479*s12^3*s13 + 382*s12^2*s13^2 - 117*s12*s13^3 -
              40*s13^4)*s23^3 + (480*s12^3 + 888*s12^2*s13 - 37*s12*s13^2 -
              80*s13^3)*s23^4 + (-83*s12*s13 - 40*s13^2)*s23^5) +
          p1q^2*((18*s12^5*s13 - 244*s12^4*s13^2 + 116*s12^3*s13^3)*s23 +
            (215*s12^4*s13 - 154*s12^3*s13^2 + 169*s12^2*s13^3)*s23^2 +
            (240*s12^4 + 119*s12^3*s13 + 70*s12^2*s13^2 + 63*s12*s13^3)*
             s23^3 + (120*s12^3 + 219*s12^2*s13 + 20*s12*s13^2 + 20*s13^3)*
             s23^4 + (-120*s12^2 - 43*s12*s13 + 40*s13^2)*s23^5 +
            20*s13*s23^6)) + p3q*(p2q^3*(18*s12^4*s13^3 + 12*s12^3*s13^4 -
            6*s12^2*s13^5 + (14*s12^4*s13^2 + 24*s12^3*s13^3 -
              97*s12^2*s13^4 + 23*s12*s13^5 - 20*s13^6)*s23 +
            (240*s12^4*s13 + 58*s12^3*s13^2 - 267*s12^2*s13^3 - 40*s13^5)*
             s23^2 + (120*s12^3*s13 - 135*s12^2*s13^2 + 40*s12*s13^3)*s23^3 +
            (120*s12^2*s13 + 43*s12*s13^2 + 20*s13^3)*s23^4) +
          p1q*p2q^2*(-12*s12^5*s13^2 - 6*s12^4*s13^3 + 6*s12^3*s13^4 +
            (-2*s12^5*s13 - 40*s12^4*s13^2 + 255*s12^3*s13^3 -
              232*s12^2*s13^4 + 123*s12*s13^5)*s23 +
            (619*s12^4*s13 + 550*s12^3*s13^2 - 122*s12^2*s13^3 +
              51*s12*s13^4 + 80*s13^5)*s23^2 + (240*s12^4 + 525*s12^3*s13 +
              438*s12^2*s13^2 + 37*s12*s13^3 + 140*s13^4)*s23^3 +
            (240*s12^3 + 821*s12^2*s13 + 46*s12*s13^2 + 20*s13^3)*s23^4 +
            (-43*s12*s13 - 40*s13^2)*s23^5) + p1q^2*p2q*
           ((8*s12^5*s13 - 105*s12^4*s13^2 + 338*s12^3*s13^3 -
              179*s12^2*s13^4)*s23 + (327*s12^4*s13 + 316*s12^3*s13^2 +
              112*s12^2*s13^3 - 249*s12*s13^4)*s23^2 +
            (240*s12^4 + 112*s12^3*s13 + 485*s12^2*s13^2 - 217*s12*s13^3 -
              100*s13^4)*s23^3 + (407*s12^2*s13 - 34*s12*s13^2 - 160*s13^3)*
             s23^4 + (-240*s12^2 - 86*s12*s13 - 40*s13^2)*s23^5 +
            20*s13*s23^6) + p1q^3*((10*s12^5*s13 - 63*s12^4*s13^2 +
              53*s12^3*s13^3)*s23 + (56*s12^4*s13 + 46*s12^3*s13^2 +
              159*s12^2*s13^3)*s23^2 + (-59*s12^3*s13 + 232*s12^2*s13^2 +
              126*s12*s13^3)*s23^3 + (-120*s12^3 - 8*s12^2*s13 +
              143*s12*s13^2 + 40*s13^3)*s23^4 + (-120*s12^2 - 3*s12*s13 +
              60*s13^2)*s23^5 + 20*s13*s23^6)))*
       PolyLog(2, s13/(s12 + s13 + s23)))/(-27*p1q*p2q^3*s12^2*s13^3*s23^2 +
       p1q^3*p2q*(27*s12^3*s13^2*s23^2 + 27*s12^2*s13^2*s23^3) +
       p3q^4*(27*s12^3*s13^2*s23^2 + 27*s12^2*s13^2*s23^3) +
       p1q^2*p2q^2*((27*s12^3*s13^2 - 27*s12^2*s13^3)*s23^2 +
         27*s12^2*s13^2*s23^3) +
       p3q^3*(p2q*((54*s12^3*s13^2 - 27*s12^2*s13^3)*s23^2 +
           54*s12^2*s13^2*s23^3) + p1q*(81*s12^3*s13^2*s23^2 +
           81*s12^2*s13^2*s23^3)) + p3q*(-27*p2q^3*s12^2*s13^3*s23^2 +
         p1q^3*(27*s12^3*s13^2*s23^2 + 27*s12^2*s13^2*s23^3) +
         p1q*p2q^2*((54*s12^3*s13^2 - 81*s12^2*s13^3)*s23^2 +
           54*s12^2*s13^2*s23^3) + p1q^2*p2q*
          ((108*s12^3*s13^2 - 27*s12^2*s13^3)*s23^2 + 108*s12^2*s13^2*
            s23^3)) + p3q^2*(p2q^2*((27*s12^3*s13^2 - 54*s12^2*s13^3)*s23^2 +
           27*s12^2*s13^2*s23^3) + p1q^2*(81*s12^3*s13^2*s23^2 +
           81*s12^2*s13^2*s23^3) + p1q*p2q*
          ((135*s12^3*s13^2 - 54*s12^2*s13^3)*s23^2 + 135*s12^2*s13^2*
            s23^3))) + ((p3q^4*(-120*s12^5*s13^2 - 120*s12^4*s13^3 +
          (6*s12^6 + 20*s12^5*s13 - 40*s12^4*s13^2 - 94*s12^3*s13^3 +
            80*s12^2*s13^4)*s23 + (6*s12^5 - 92*s12^4*s13 - 106*s12^3*s13^2 -
            88*s12^2*s13^3)*s23^2 + (20*s12^3*s13 + 20*s12^2*s13^2)*s23^3) +
        p2q^4*((-10*s12^4*s13^2 - 20*s12^3*s13^3 - 10*s12^2*s13^4)*s23 +
          (43*s12^3*s13^2 + 106*s12^2*s13^3 + 83*s12*s13^4 + 20*s13^5)*
           s23^2 + (53*s12^2*s13^2 + 63*s12*s13^3 + 20*s13^4)*s23^3) +
        p1q*p2q^3*(-120*s12^3*s13^4 - 120*s12^2*s13^5 +
          (46*s12^4*s13^2 - 49*s12^3*s13^3 + 2*s12^2*s13^4 - 3*s12*s13^5 +
            20*s13^6)*s23 + (-10*s12^4*s13 + 129*s12^3*s13^2 +
            179*s12^2*s13^3 + 20*s12*s13^4 + 20*s13^5)*s23^2 +
          (63*s12^3*s13 - 143*s12*s13^3 - 60*s13^4)*s23^3 +
          (-53*s12^2*s13 - 126*s12*s13^2 - 60*s13^3)*s23^4) +
        p1q^4*((-120*s12^3*s13^2 - 120*s12^2*s13^3)*s23^2 +
          (-12*s12^3*s13 - 175*s12^2*s13^2 - 43*s12*s13^3)*s23^3 +
          (-6*s12^3 - 18*s12^2*s13 - 63*s12*s13^2 - 20*s13^3)*s23^4 +
          (-6*s12^2 - 20*s13^2)*s23^5) + p1q^2*p2q^2*(-120*s12^3*s13^4 -
          120*s12^2*s13^5 + (122*s12^4*s13^2 - 17*s12^3*s13^3 +
            178*s12^2*s13^4 - 43*s12*s13^5)*s23 +
          (-20*s12^4*s13 + 89*s12^3*s13^2 + 170*s12^2*s13^3 - 57*s12*s13^4 -
            60*s13^5)*s23^2 + (63*s12^3*s13 - 96*s12^2*s13^2 - 40*s12*s13^3 -
            60*s13^4)*s23^3 + (-106*s12^2*s13 + 37*s12*s13^2 + 60*s13^3)*
           s23^4 + (63*s12*s13 + 60*s13^2)*s23^5) +
        p1q^3*p2q*((120*s12^4*s13^2 + 120*s12^3*s13^3 + 240*s12^2*s13^4)*
           s23 + (2*s12^4*s13 + 15*s12^3*s13^2 + 117*s12^2*s13^3 +
            86*s12*s13^4)*s23^2 + (6*s12^4 + 24*s12^3*s13 - 154*s12^2*s13^2 +
            123*s12*s13^3 + 60*s13^4)*s23^3 + (6*s12^3 - 67*s12^2*s13 +
            20*s12*s13^2 + 60*s13^3)*s23^4 + (23*s12*s13 - 20*s13^2)*s23^5 -
          20*s13*s23^6) + p3q^3*(p2q*(-120*s12^5*s13^2 + 120*s12^4*s13^3 +
            240*s12^3*s13^4 + (6*s12^6 + 28*s12^5*s13 + 109*s12^4*s13^2 +
              64*s12^3*s13^3 + 297*s12^2*s13^4 - 40*s12*s13^5)*s23 +
            (6*s12^5 - 273*s12^4*s13 - 263*s12^3*s13^2 - 144*s12^2*s13^3 -
              40*s12*s13^4)*s23^2 + (83*s12^3*s13 + 83*s12^2*s13^2)*s23^3) +
          p1q*(-240*s12^5*s13^2 - 240*s12^4*s13^3 + (6*s12^6 + 8*s12^5*s13 +
              77*s12^4*s13^2 - 162*s12^3*s13^3 + 243*s12^2*s13^4)*s23 +
            (-12*s12^5 - 127*s12^4*s13 + 135*s12^3*s13^2 - 132*s12^2*s13^3)*
             s23^2 + (-18*s12^4 + 207*s12^3*s13 + 89*s12^2*s13^2 -
              40*s12*s13^3)*s23^3 + (-60*s12^2*s13 - 40*s12*s13^2)*s23^4)) +
        p3q^2*(p2q^2*(240*s12^4*s13^3 + 120*s12^3*s13^4 - 120*s12^2*s13^5 +
            (18*s12^5*s13 + 215*s12^4*s13^2 + 119*s12^3*s13^3 +
              219*s12^2*s13^4 - 43*s12*s13^5 + 20*s13^6)*s23 +
            (-244*s12^4*s13 - 154*s12^3*s13^2 + 70*s12^2*s13^3 +
              20*s12*s13^4 + 40*s13^5)*s23^2 + (116*s12^3*s13 +
              169*s12^2*s13^2 + 63*s12*s13^3 + 20*s13^4)*s23^3) +
          p1q*p2q*(-120*s12^5*s13^2 + 360*s12^4*s13^3 + 480*s12^3*s13^4 +
            (6*s12^6 + 16*s12^5*s13 + 598*s12^4*s13^2 + 479*s12^3*s13^3 +
              888*s12^2*s13^4 - 83*s12*s13^5)*s23 +
            (-6*s12^5 - 216*s12^4*s13 + 533*s12^3*s13^2 + 382*s12^2*s13^3 -
              37*s12*s13^4 - 40*s13^5)*s23^2 + (-12*s12^4 + 482*s12^3*s13 +
              292*s12^2*s13^2 - 117*s12*s13^3 - 80*s13^4)*s23^3 +
            (-186*s12^2*s13 - 163*s12*s13^2 - 40*s13^3)*s23^4) +
          p1q^2*(-120*s12^5*s13^2 - 120*s12^4*s13^3 +
            (-2*s12^5*s13 + 377*s12^4*s13^2 + 62*s12^3*s13^3 +
              283*s12^2*s13^4)*s23 + (-18*s12^5 - 14*s12^4*s13 +
              413*s12^3*s13^2 - 72*s12^2*s13^3 + 43*s12*s13^4)*s23^2 +
            (204*s12^3*s13 - 55*s12^2*s13^2 + 40*s12*s13^3 + 20*s13^4)*
             s23^3 + (18*s12^3 - 138*s12^2*s13 + 57*s12*s13^2 + 40*s13^3)*
             s23^4 + (60*s12*s13 + 20*s13^2)*s23^5)) +
        p3q*(p2q^3*(-120*s12^3*s13^4 - 120*s12^2*s13^5 +
            (10*s12^5*s13 + 56*s12^4*s13^2 - 59*s12^3*s13^3 - 8*s12^2*s13^4 -
              3*s12*s13^5 + 20*s13^6)*s23 + (-63*s12^4*s13 + 46*s12^3*s13^2 +
              232*s12^2*s13^3 + 143*s12*s13^4 + 60*s13^5)*s23^2 +
            (53*s12^3*s13 + 159*s12^2*s13^2 + 126*s12*s13^3 + 40*s13^4)*
             s23^3) + p1q*p2q^2*(240*s12^4*s13^3 - 240*s12^2*s13^5 +
            (8*s12^5*s13 + 327*s12^4*s13^2 + 112*s12^3*s13^3 +
              407*s12^2*s13^4 - 86*s12*s13^5 + 20*s13^6)*s23 +
            (-105*s12^4*s13 + 316*s12^3*s13^2 + 485*s12^2*s13^3 -
              34*s12*s13^4 - 40*s13^5)*s23^2 + (338*s12^3*s13 +
              112*s12^2*s13^2 - 217*s12*s13^3 - 160*s13^4)*s23^3 +
            (-179*s12^2*s13 - 249*s12*s13^2 - 100*s13^3)*s23^4) +
          p1q^2*p2q*(240*s12^4*s13^3 + 240*s12^3*s13^4 +
            (-2*s12^5*s13 + 619*s12^4*s13^2 + 525*s12^3*s13^3 +
              821*s12^2*s13^4 - 43*s12*s13^5)*s23 +
            (-12*s12^5 - 40*s12^4*s13 + 550*s12^3*s13^2 + 438*s12^2*s13^3 +
              46*s12*s13^4 - 40*s13^5)*s23^2 + (-6*s12^4 + 255*s12^3*s13 -
              122*s12^2*s13^2 + 37*s12*s13^3 + 20*s13^4)*s23^3 +
            (6*s12^3 - 232*s12^2*s13 + 51*s12*s13^2 + 140*s13^3)*s23^4 +
            (123*s12*s13 + 80*s13^2)*s23^5) +
          p1q^3*((240*s12^4*s13^2 + 120*s12^3*s13^3 + 120*s12^2*s13^4)*s23 +
            (14*s12^4*s13 + 58*s12^3*s13^2 - 135*s12^2*s13^3 + 43*s12*s13^4)*
             s23^2 + (18*s12^4 + 24*s12^3*s13 - 267*s12^2*s13^2 +
              40*s12*s13^3 + 20*s13^4)*s23^3 + (12*s12^3 - 97*s12^2*s13)*
             s23^4 + (-6*s12^2 + 23*s12*s13 - 40*s13^2)*s23^5 -
            20*s13*s23^6)))*PolyLog(2, s23/(s12 + s13 + s23)))/
      (p1q*p2q^3*(27*s12^3*s13^2 + 27*s12^2*s13^3)*s23^2 +
       p3q^4*(27*s12^3*s13^2 + 27*s12^2*s13^3)*s23^2 -
       27*p1q^3*p2q*s12^2*s13^2*s23^3 + p1q^2*p2q^2*
        ((27*s12^3*s13^2 + 27*s12^2*s13^3)*s23^2 - 27*s12^2*s13^2*s23^3) +
       p3q^2*(p2q^2*(81*s12^3*s13^2 + 81*s12^2*s13^3)*s23^2 +
         p1q^2*((27*s12^3*s13^2 + 27*s12^2*s13^3)*s23^2 -
           54*s12^2*s13^2*s23^3) + p1q*p2q*
          ((135*s12^3*s13^2 + 135*s12^2*s13^3)*s23^2 - 54*s12^2*s13^2*
            s23^3)) + p3q^3*(p2q*(81*s12^3*s13^2 + 81*s12^2*s13^3)*s23^2 +
         p1q*((54*s12^3*s13^2 + 54*s12^2*s13^3)*s23^2 - 27*s12^2*s13^2*
            s23^3)) + p3q*(p2q^3*(27*s12^3*s13^2 + 27*s12^2*s13^3)*s23^2 -
         27*p1q^3*s12^2*s13^2*s23^3 + p1q^2*p2q*
          ((54*s12^3*s13^2 + 54*s12^2*s13^3)*s23^2 - 81*s12^2*s13^2*s23^3) +
         p1q*p2q^2*((108*s12^3*s13^2 + 108*s12^2*s13^3)*s23^2 -
           27*s12^2*s13^2*s23^3))));


l P1AvgExp = P1PolExp;