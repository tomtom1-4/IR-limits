l P0AvgExp = ((-2*ep*(p2q*(s12 + s13) + p3q*(s12 + s13) - p1q*s23))/
      (3*(p1q + p2q + p3q)*s23) +
     (2*(2*p1q^2*(p2q + p3q)*s23*(s12 + s13 + s23) +
        (p2q + p3q)*(p2q^2*(-2*s13^2 + s12*s23 - s13*s23) +
          p3q^2*(-2*s12^2 - s12*s23 + s13*s23) + 2*p2q*p3q*
           (2*s12*s13 + s12*s23 + s13*s23)) +
        p1q*(p2q^2*(-2*s13^2 + 2*s12*s23 + s23^2) +
          p3q^2*(-2*s12^2 + 2*s13*s23 + s23^2) + 2*p2q*p3q*
           (2*s12*s13 + 3*s12*s23 + 3*s13*s23 + 2*s23^2))))/
      (3*(p2q + p3q)^2*(p1q + p2q + p3q)*s23^2) +
     Ioperator*((14*(-(p2q*(s12 + s13)) - p3q*(s12 + s13) + p1q*s23))/
        (3*(p1q + p2q + p3q)*s23) -
       (16*(2*p1q^2*(p2q + p3q)*s23*(s12 + s13 + s23) +
          (p2q + p3q)*(p2q^2*(-2*s13^2 + s12*s23 - s13*s23) +
            p3q^2*(-2*s12^2 - s12*s23 + s13*s23) + 2*p2q*p3q*
             (2*s12*s13 + s12*s23 + s13*s23)) +
          p1q*(p2q^2*(-2*s13^2 + 2*s12*s23 + s23^2) +
            p3q^2*(-2*s12^2 + 2*s13*s23 + s23^2) + 2*p2q*p3q*
             (2*s12*s13 + 3*s12*s23 + 3*s13*s23 + 2*s23^2))))/ep^2/
        (9*(p2q + p3q)^2*(p1q + p2q + p3q)*s23^2) +
       (2*(42*p1q^2*(p2q + p3q)*s23*(s12 + s13 + s23) +
          (p2q + p3q)*(p2q^2*(-42*s13^2 + 29*s12*s23 - 13*s13*s23) +
            p3q^2*(-42*s12^2 - 13*s12*s23 + 29*s13*s23) +
            2*p2q*p3q*(42*s12*s13 + 29*s12*s23 + 29*s13*s23)) +
          p1q*(p2q^2*(-42*s13^2 + 42*s12*s23 + 13*s23^2) +
            p3q^2*(-42*s12^2 + 42*s13*s23 + 13*s23^2) +
            2*p2q*p3q*(42*s12*s13 + 63*s12*s23 + 63*s13*s23 + 34*s23^2))))/ep/
        (9*(p2q + p3q)^2*(p1q + p2q + p3q)*s23^2) +
       nl*((4*(p2q*(s12 + s13) + p3q*(s12 + s13) - p1q*s23))/
          (9*(p1q + p2q + p3q)*s23) -
         (4*(2*p1q^2*(p2q + p3q)*s23*(s12 + s13 + s23) + (p2q + p3q)*
             (p2q^2*(-2*s13^2 + s12*s23 - s13*s23) + p3q^2*(-2*s12^2 -
                s12*s23 + s13*s23) + 2*p2q*p3q*(2*s12*s13 + s12*s23 +
                s13*s23)) + p1q*(p2q^2*(-2*s13^2 + 2*s12*s23 + s23^2) +
              p3q^2*(-2*s12^2 + 2*s13*s23 + s23^2) + 2*p2q*p3q*(2*s12*s13 +
                3*s12*s23 + 3*s13*s23 + 2*s23^2))))/ep/(9*(p2q + p3q)^2*
           (p1q + p2q + p3q)*s23^2)) +
       ((2*(p2q*(s12 + s13) + p3q*(s12 + s13) - p1q*s23))/
          (9*(p1q + p2q + p3q)*s23) -
         (2*(2*p1q^2*(p2q + p3q)*s23*(s12 + s13 + s23) + (p2q + p3q)*
             (p2q^2*(-2*s13^2 + s12*s23 - s13*s23) + p3q^2*(-2*s12^2 -
                s12*s23 + s13*s23) + 2*p2q*p3q*(2*s12*s13 + s12*s23 +
                s13*s23)) + p1q*(p2q^2*(-2*s13^2 + 2*s12*s23 + s23^2) +
              p3q^2*(-2*s12^2 + 2*s13*s23 + s23^2) + 2*p2q*p3q*(2*s12*s13 +
                3*s12*s23 + 3*s13*s23 + 2*s23^2))))/ep/(9*(p2q + p3q)^2*
           (p1q + p2q + p3q)*s23^2))*Log(p1q/(p1q + p2q + p3q)) +
       ((14*(-(p2q*(s12 + s13)) - p3q*(s12 + s13) + p1q*s23))/
          (9*(p1q + p2q + p3q)*s23) +
         (14*(2*p1q^2*(p2q + p3q)*s23*(s12 + s13 + s23) +
            (p2q + p3q)*(p2q^2*(-2*s13^2 + s12*s23 - s13*s23) +
              p3q^2*(-2*s12^2 - s12*s23 + s13*s23) + 2*p2q*p3q*(2*s12*s13 +
                s12*s23 + s13*s23)) + p1q*(p2q^2*(-2*s13^2 + 2*s12*s23 +
                s23^2) + p3q^2*(-2*s12^2 + 2*s13*s23 + s23^2) +
              2*p2q*p3q*(2*s12*s13 + 3*s12*s23 + 3*s13*s23 + 2*s23^2))))/ep/
          (9*(p2q + p3q)^2*(p1q + p2q + p3q)*s23^2))*
        Log(p2q/(p1q + p2q + p3q)) +
       ((-4*(p2q*(s12 + s13) + p3q*(s12 + s13) - p1q*s23))/
          (9*(p1q + p2q + p3q)*s23) +
         (4*(2*p1q^2*(p2q + p3q)*s23*(s12 + s13 + s23) + (p2q + p3q)*
             (p2q^2*(-2*s13^2 + s12*s23 - s13*s23) + p3q^2*(-2*s12^2 -
                s12*s23 + s13*s23) + 2*p2q*p3q*(2*s12*s13 + s12*s23 +
                s13*s23)) + p1q*(p2q^2*(-2*s13^2 + 2*s12*s23 + s23^2) +
              p3q^2*(-2*s12^2 + 2*s13*s23 + s23^2) + 2*p2q*p3q*(2*s12*s13 +
                3*s12*s23 + 3*s13*s23 + 2*s23^2))))/ep/(9*(p2q + p3q)^2*
           (p1q + p2q + p3q)*s23^2))*Log(p3q/(p1q + p2q + p3q)) +
       ((16*(-(p2q*(s12 + s13)) - p3q*(s12 + s13) + p1q*s23))/
          (9*(p1q + p2q + p3q)*s23) +
         (16*(2*p1q^2*(p2q + p3q)*s23*(s12 + s13 + s23) +
            (p2q + p3q)*(p2q^2*(-2*s13^2 + s12*s23 - s13*s23) +
              p3q^2*(-2*s12^2 - s12*s23 + s13*s23) + 2*p2q*p3q*(2*s12*s13 +
                s12*s23 + s13*s23)) + p1q*(p2q^2*(-2*s13^2 + 2*s12*s23 +
                s23^2) + p3q^2*(-2*s12^2 + 2*s13*s23 + s23^2) +
              2*p2q*p3q*(2*s12*s13 + 3*s12*s23 + 3*s13*s23 + 2*s23^2))))/ep/
          (9*(p2q + p3q)^2*(p1q + p2q + p3q)*s23^2))*
        Log(-s12 - s13 - s23) +
       ((-4*(p2q*(s12 + s13) + p3q*(s12 + s13) - p1q*s23))/
          (9*(p1q + p2q + p3q)*s23) +
         (4*(2*p1q^2*(p2q + p3q)*s23*(s12 + s13 + s23) + (p2q + p3q)*
             (p2q^2*(-2*s13^2 + s12*s23 - s13*s23) + p3q^2*(-2*s12^2 -
                s12*s23 + s13*s23) + 2*p2q*p3q*(2*s12*s13 + s12*s23 +
                s13*s23)) + p1q*(p2q^2*(-2*s13^2 + 2*s12*s23 + s23^2) +
              p3q^2*(-2*s12^2 + 2*s13*s23 + s23^2) + 2*p2q*p3q*(2*s12*s13 +
                3*s12*s23 + 3*s13*s23 + 2*s23^2))))/ep/(9*(p2q + p3q)^2*
           (p1q + p2q + p3q)*s23^2))*Log(s12/(s12 + s13 + s23)) +
       ((14*(-(p2q*(s12 + s13)) - p3q*(s12 + s13) + p1q*s23))/
          (9*(p1q + p2q + p3q)*s23) +
         (14*(2*p1q^2*(p2q + p3q)*s23*(s12 + s13 + s23) +
            (p2q + p3q)*(p2q^2*(-2*s13^2 + s12*s23 - s13*s23) +
              p3q^2*(-2*s12^2 - s12*s23 + s13*s23) + 2*p2q*p3q*(2*s12*s13 +
                s12*s23 + s13*s23)) + p1q*(p2q^2*(-2*s13^2 + 2*s12*s23 +
                s23^2) + p3q^2*(-2*s12^2 + 2*s13*s23 + s23^2) +
              2*p2q*p3q*(2*s12*s13 + 3*s12*s23 + 3*s13*s23 + 2*s23^2))))/ep/
          (9*(p2q + p3q)^2*(p1q + p2q + p3q)*s23^2))*
        Log(s13/(s12 + s13 + s23)) +
       ((2*(p2q*(s12 + s13) + p3q*(s12 + s13) - p1q*s23))/
          (9*(p1q + p2q + p3q)*s23) -
         (2*(2*p1q^2*(p2q + p3q)*s23*(s12 + s13 + s23) + (p2q + p3q)*
             (p2q^2*(-2*s13^2 + s12*s23 - s13*s23) + p3q^2*(-2*s12^2 -
                s12*s23 + s13*s23) + 2*p2q*p3q*(2*s12*s13 + s12*s23 +
                s13*s23)) + p1q*(p2q^2*(-2*s13^2 + 2*s12*s23 + s23^2) +
              p3q^2*(-2*s12^2 + 2*s13*s23 + s23^2) + 2*p2q*p3q*(2*s12*s13 +
                3*s12*s23 + 3*s13*s23 + 2*s23^2))))/ep/(9*(p2q + p3q)^2*
           (p1q + p2q + p3q)*s23^2))*Log(s23/(s12 + s13 + s23))));

l P0PolExp = P0AvgExp;

l P1PolExp = ((p3q^3*(32*s12^2 + (16*s12 - 16*s13)*s23) +
       p2q^3*(32*s13^2 + (-16*s12 + 16*s13)*s23) +
       p1q^2*p2q*((-32*s12 - 32*s13)*s23 - 32*s23^2) +
       p1q*p2q^2*(32*s13^2 - 32*s12*s23 - 16*s23^2) +
       p3q*(p2q^2*(-64*s12*s13 + 32*s13^2 + (-48*s12 - 16*s13)*s23) +
         p1q*p2q*(-64*s12*s13 + (-96*s12 - 96*s13)*s23 - 64*s23^2) +
         p1q^2*((-32*s12 - 32*s13)*s23 - 32*s23^2)) +
       p3q^2*(p2q*(32*s12^2 - 64*s12*s13 + (-16*s12 - 48*s13)*s23) +
         p1q*(32*s12^2 - 32*s13*s23 - 16*s23^2)))/ep^2
      /((9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 + 9*p3q^3*s23^2 +
        p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) + p3q*(18*p1q*p2q*s23^2 +
          27*p2q^2*s23^2))) +
     (p2q^3*(-186*s12*s13^2 - 186*s13^3 + (56*s12^2 - 84*s12*s13 - 130*s13^2)*
          s23) + p3q^3*(-186*s12^3 - 186*s12^2*s13 +
         (-130*s12^2 - 84*s12*s13 + 56*s13^2)*s23) +
       p1q*p2q^2*(-176*s12*s13^2 - 176*s13^3 + (186*s12^2 + 186*s12*s13 +
           20*s13^2)*s23 + (130*s12 + 140*s13)*s23^2) +
       p1q^2*p2q*((176*s12^2 + 352*s12*s13 + 176*s13^2)*s23 +
         (166*s12 + 166*s13)*s23^2 - 10*s23^3) +
       p3q^2*(p2q*(-186*s12^3 + 186*s12^2*s13 + 372*s12*s13^2 +
           (-18*s12^2 + 120*s12*s13 + 168*s13^2)*s23) +
         p1q*(-176*s12^3 - 176*s12^2*s13 + (20*s12^2 + 186*s12*s13 +
             186*s13^2)*s23 + (140*s12 + 130*s13)*s23^2)) +
       p3q*(p2q^2*(372*s12^2*s13 + 186*s12*s13^2 - 186*s13^3 +
           (168*s12^2 + 120*s12*s13 - 18*s13^2)*s23) +
         p1q*p2q*(352*s12^2*s13 + 352*s12*s13^2 + (558*s12^2 + 1076*s12*s13 +
             558*s13^2)*s23 + (446*s12 + 446*s13)*s23^2) +
         p1q^2*((176*s12^2 + 352*s12*s13 + 176*s13^2)*s23 +
           (166*s12 + 166*s13)*s23^2 - 10*s23^3)))/
      (p1q*p2q^2*(9*s12 + 9*s13)*s23^2 + p2q^3*(9*s12 + 9*s13)*s23^2 +
       p3q^3*(9*s12 + 9*s13)*s23^2 + p3q^2*(p1q*(9*s12 + 9*s13)*s23^2 +
         p2q*(27*s12 + 27*s13)*s23^2) +
       p3q*(p1q*p2q*(18*s12 + 18*s13)*s23^2 + p2q^2*(27*s12 + 27*s13)*
          s23^2)) + (Pi^2*(p3q^4*(32*s12^5*s13^2 + 32*s12^4*s13^3 +
          (-2*s12^6 + 15*s12^4*s13^2 + 30*s12^3*s13^3 - 23*s12^2*s13^4)*s23 +
          (-2*s12^5 + 2*s12^4*s13 + 7*s12^3*s13^2 + 23*s12^2*s13^3)*s23^2) +
        p2q^4*(32*s12^3*s13^4 + 32*s12^2*s13^5 +
          (-18*s12^4*s13^2 + 10*s12^3*s13^3 - 5*s12^2*s13^4 - 7*s13^6)*s23 +
          (8*s12^3*s13^2 + 2*s12^2*s13^3 + 7*s12*s13^4 - 7*s13^5)*s23^2) +
        p1q*p2q^3*(32*s12^3*s13^4 + 32*s12^2*s13^5 +
          (-36*s12^4*s13^2 + 14*s12^3*s13^3 - 48*s12^2*s13^4 + 14*s12*s13^5)*
           s23 + (14*s12^3*s13^2 - 18*s12^2*s13^3 + 21*s12*s13^4 + 21*s13^5)*
           s23^2 + (-2*s12^2*s13^2 - 14*s12*s13^3 + 21*s13^4)*s23^3) +
        p1q^2*p2q^2*((-32*s12^4*s13^2 - 24*s12^3*s13^3 - 64*s12^2*s13^4)*
           s23 + (-4*s12^4*s13 + 2*s12^3*s13^2 - 34*s12^2*s13^3 -
            28*s12*s13^4)*s23^2 + (-2*s12^4 - 8*s12^3*s13 + 17*s12^2*s13^2 -
            42*s12*s13^3 - 21*s13^4)*s23^3 + (-2*s12^3 - 2*s12^2*s13 +
            7*s12*s13^2 - 21*s13^3)*s23^4) + p1q^3*p2q*
         ((32*s12^3*s13^2 + 32*s12^2*s13^3)*s23^2 +
          (4*s12^3*s13 + 50*s12^2*s13^2 + 14*s12*s13^3)*s23^3 +
          (2*s12^3 + 6*s12^2*s13 + 21*s12*s13^2 + 7*s13^3)*s23^4 +
          (2*s12^2 + 7*s13^2)*s23^5) +
        p3q^3*(p2q*(64*s12^5*s13^2 - 64*s12^3*s13^4 +
            (-4*s12^6 + 4*s12^5*s13 - 12*s12^4*s13^2 + 18*s12^3*s13^3 -
              108*s12^2*s13^4 + 14*s12*s13^5)*s23 + (-4*s12^5 + 8*s12^4*s13 +
              20*s12^3*s13^2 + 62*s12^2*s13^3 + 14*s12*s13^4)*s23^2) +
          p1q*(32*s12^5*s13^2 + 32*s12^4*s13^3 +
            (4*s12^5*s13 - 38*s12^4*s13^2 + 24*s12^3*s13^3 - 46*s12^2*s13^4)*
             s23 + (6*s12^5 + 6*s12^4*s13 - 33*s12^3*s13^2 + 39*s12^2*s13^3)*
             s23^2 + (6*s12^4 - 4*s12^3*s13 - 7*s12^2*s13^2)*s23^3)) +
        p3q^2*(p2q^2*(32*s12^5*s13^2 - 96*s12^4*s13^3 - 96*s12^3*s13^4 +
            32*s12^2*s13^5 + (-2*s12^6 + 8*s12^5*s13 - 87*s12^4*s13^2 -
              44*s12^3*s13^3 - 152*s12^2*s13^4 + 28*s12*s13^5 - 7*s13^6)*
             s23 + (-2*s12^5 + 10*s12^4*s13 + 27*s12^3*s13^2 +
              57*s12^2*s13^3 + 35*s12*s13^4 - 7*s13^5)*s23^2) +
          p1q*p2q*(32*s12^5*s13^2 - 32*s12^4*s13^3 - 64*s12^3*s13^4 +
            (8*s12^5*s13 - 184*s12^4*s13^2 - 82*s12^3*s13^3 -
              212*s12^2*s13^4 + 14*s12*s13^5)*s23 +
            (10*s12^5 + 10*s12^4*s13 - 123*s12^3*s13^2 - 11*s12^2*s13^3 +
              14*s12*s13^4 + 14*s13^5)*s23^2 + (10*s12^4 - 8*s12^3*s13 -
              47*s12^2*s13^2 - 14*s12*s13^3 + 14*s13^4)*s23^3) +
          p1q^2*((-64*s12^4*s13^2 - 24*s12^3*s13^3 - 32*s12^2*s13^4)*s23 +
            (-8*s12^4*s13 - 44*s12^3*s13^2 + 2*s12^2*s13^3 - 14*s12*s13^4)*
             s23^2 + (-6*s12^4 - 12*s12^3*s13 - 3*s12^2*s13^2 -
              28*s12*s13^3 - 7*s13^4)*s23^3 + (-6*s12^3 + 2*s12^2*s13 -
              7*s12*s13^2 - 7*s13^3)*s23^4)) +
        p3q*(p2q^3*(-64*s12^4*s13^3 + 64*s12^2*s13^5 +
            (4*s12^5*s13 - 78*s12^4*s13^2 - 22*s12^3*s13^3 - 72*s12^2*s13^4 +
              14*s12*s13^5 - 14*s13^6)*s23 + (4*s12^4*s13 + 22*s12^3*s13^2 +
              20*s12^2*s13^3 + 28*s12*s13^4 - 14*s13^5)*s23^2) +
          p1q*p2q^2*(-64*s12^4*s13^3 - 32*s12^3*s13^4 + 32*s12^2*s13^5 +
            (4*s12^5*s13 - 182*s12^4*s13^2 - 92*s12^3*s13^3 -
              214*s12^2*s13^4 + 28*s12*s13^5)*s23 + (4*s12^5 + 4*s12^4*s13 -
              76*s12^3*s13^2 - 68*s12^2*s13^3 + 35*s12*s13^4 + 35*s13^5)*
             s23^2 + (4*s12^4 - 4*s12^3*s13 - 42*s12^2*s13^2 - 28*s12*s13^3 +
              35*s13^4)*s23^3) + p1q^2*p2q*
           ((-104*s12^4*s13^2 - 64*s12^3*s13^3 - 104*s12^2*s13^4)*s23 +
            (-12*s12^4*s13 - 58*s12^3*s13^2 - 48*s12^2*s13^3 - 42*s12*s13^4)*
             s23^2 + (-8*s12^4 - 20*s12^3*s13 + 6*s12^2*s13^2 -
              70*s12*s13^3 - 28*s13^4)*s23^3 + (-8*s12^3 - 28*s13^3)*s23^4) +
          p1q^3*((32*s12^3*s13^2 + 32*s12^2*s13^3)*s23^2 +
            (4*s12^3*s13 + 50*s12^2*s13^2 + 14*s12*s13^3)*s23^3 +
            (2*s12^3 + 6*s12^2*s13 + 21*s12*s13^2 + 7*s13^3)*s23^4 +
            (2*s12^2 + 7*s13^2)*s23^5))))/
      (p2q^4*(54*s12^3*s13^2 + 54*s12^2*s13^3)*s23^2 +
       p3q^4*(54*s12^3*s13^2 + 54*s12^2*s13^3)*s23^2 -
       54*p1q^2*p2q^2*s12^2*s13^2*s23^3 + p1q*p2q^3*
        ((54*s12^3*s13^2 + 54*s12^2*s13^3)*s23^2 - 54*s12^2*s13^2*s23^3) +
       p3q^2*(p2q^2*(324*s12^3*s13^2 + 324*s12^2*s13^3)*s23^2 -
         54*p1q^2*s12^2*s13^2*s23^3 + p1q*p2q*
          ((162*s12^3*s13^2 + 162*s12^2*s13^3)*s23^2 - 162*s12^2*s13^2*
            s23^3)) + p3q*(p2q^3*(216*s12^3*s13^2 + 216*s12^2*s13^3)*s23^2 -
         108*p1q^2*p2q*s12^2*s13^2*s23^3 + p1q*p2q^2*
          ((162*s12^3*s13^2 + 162*s12^2*s13^3)*s23^2 - 162*s12^2*s13^2*
            s23^3)) + p3q^3*(p2q*(216*s12^3*s13^2 + 216*s12^2*s13^3)*s23^2 +
         p1q*((54*s12^3*s13^2 + 54*s12^2*s13^3)*s23^2 - 54*s12^2*s13^2*
            s23^3))) + ((p2q^3*(-2*s13^2 + (s12 - s13)*s23) +
        p3q^3*(-2*s12^2 + (-s12 + s13)*s23) + p1q*p2q^2*
         (-2*s13^2 + 2*s12*s23 + s23^2) + p1q^2*p2q*((2*s12 + 2*s13)*s23 +
          2*s23^2) + p3q^2*(p2q*(-2*s12^2 + 4*s12*s13 + (s12 + 3*s13)*s23) +
          p1q*(-2*s12^2 + 2*s13*s23 + s23^2)) +
        p3q*(p2q^2*(4*s12*s13 - 2*s13^2 + (3*s12 + s13)*s23) +
          p1q^2*((2*s12 + 2*s13)*s23 + 2*s23^2) +
          p1q*p2q*(4*s12*s13 + (6*s12 + 6*s13)*s23 + 4*s23^2)))*
       Log(p1q/(p1q + p2q + p3q))^2)/(9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 +
       9*p3q^3*s23^2 + p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
       p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
     ((p3q^3*(14*s12^2 + (7*s12 - 7*s13)*s23) +
        p2q^3*(14*s13^2 + (-7*s12 + 7*s13)*s23) +
        p1q^2*p2q*((-14*s12 - 14*s13)*s23 - 14*s23^2) +
        p1q*p2q^2*(14*s13^2 - 14*s12*s23 - 7*s23^2) +
        p3q*(p2q^2*(-28*s12*s13 + 14*s13^2 + (-21*s12 - 7*s13)*s23) +
          p1q*p2q*(-28*s12*s13 + (-42*s12 - 42*s13)*s23 - 28*s23^2) +
          p1q^2*((-14*s12 - 14*s13)*s23 - 14*s23^2)) +
        p3q^2*(p2q*(14*s12^2 - 28*s12*s13 + (-7*s12 - 21*s13)*s23) +
          p1q*(14*s12^2 - 14*s13*s23 - 7*s23^2)))*Log(p2q/(p1q + p2q + p3q))^
        2)/(9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 + 9*p3q^3*s23^2 +
       p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
       p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
     ((p3q^3*(4*s12^2 + (2*s12 - 2*s13)*s23) +
        p2q^3*(4*s13^2 + (-2*s12 + 2*s13)*s23) +
        p1q^2*p2q*((-4*s12 - 4*s13)*s23 - 4*s23^2) +
        p1q*p2q^2*(4*s13^2 - 4*s12*s23 - 2*s23^2) +
        p3q*(p2q^2*(-8*s12*s13 + 4*s13^2 + (-6*s12 - 2*s13)*s23) +
          p1q*p2q*(-8*s12*s13 + (-12*s12 - 12*s13)*s23 - 8*s23^2) +
          p1q^2*((-4*s12 - 4*s13)*s23 - 4*s23^2)) +
        p3q^2*(p2q*(4*s12^2 - 8*s12*s13 + (-2*s12 - 6*s13)*s23) +
          p1q*(4*s12^2 - 4*s13*s23 - 2*s23^2)))*Log(p3q/(p1q + p2q + p3q))^2)/
      (9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 + 9*p3q^3*s23^2 +
       p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
       p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
     ((p2q^4*(4*s12*s13^2 + 4*s13^3 + (-2*s12^2 - 2*s12*s13 + 4*s13^2)*s23 -
          2*s12*s23^2) + p1q*p2q^3*(4*s12*s13^2 + 4*s13^3 +
          (-4*s12^2 - 10*s12*s13 - 2*s13^2)*s23 + (-4*s12 - 6*s13)*s23^2) +
        p3q^4*(4*s12^3 + 4*s12^2*s13 + (4*s12^2 - 2*s12*s13 - 2*s13^2)*s23 -
          2*s13*s23^2) + p1q^2*p2q^2*((-4*s12^2 - 12*s12*s13 - 8*s13^2)*s23 +
          (-2*s12 - 6*s13)*s23^2 + 2*s23^3) + p1q^3*p2q*
         ((4*s12 + 4*s13)*s23^2 + 4*s23^3) +
        p3q^3*(p2q*(8*s12^3 - 8*s12*s13^2 + (6*s12^2 - 16*s12*s13 - 6*s13^2)*
             s23 + (-2*s12 - 6*s13)*s23^2) + p1q*(4*s12^3 + 4*s12^2*s13 +
            (-2*s12^2 - 10*s12*s13 - 4*s13^2)*s23 + (-6*s12 - 4*s13)*
             s23^2)) + p3q^2*(p2q^2*(4*s12^3 - 12*s12^2*s13 - 12*s12*s13^2 +
            4*s13^3 + (-2*s12^2 - 28*s12*s13 - 2*s13^2)*s23 +
            (-6*s12 - 6*s13)*s23^2) + p1q^2*((-8*s12^2 - 12*s12*s13 -
              4*s13^2)*s23 + (-6*s12 - 2*s13)*s23^2 + 2*s23^3) +
          p1q*p2q*(4*s12^3 - 4*s12^2*s13 - 8*s12*s13^2 +
            (-8*s12^2 - 30*s12*s13 - 10*s13^2)*s23 + (-8*s12 - 6*s13)*s23^2 +
            4*s23^3)) + p3q*(p2q^3*(-8*s12^2*s13 + 8*s13^3 +
            (-6*s12^2 - 16*s12*s13 + 6*s13^2)*s23 + (-6*s12 - 2*s13)*s23^2) +
          p1q*p2q^2*(-8*s12^2*s13 - 4*s12*s13^2 + 4*s13^3 +
            (-10*s12^2 - 30*s12*s13 - 8*s13^2)*s23 + (-6*s12 - 8*s13)*s23^2 +
            4*s23^3) + p1q^3*((4*s12 + 4*s13)*s23^2 + 4*s23^3) +
          p1q^2*p2q*((-4*s12^2 - 8*s12*s13 - 4*s13^2)*s23 +
            (8*s12 + 8*s13)*s23^2 + 12*s23^3)))*
       Log((p2q + p3q)/(p1q + p2q + p3q))^2)/(p2q^4*(s12 + s13)*s23^2 +
       p3q^4*(s12 + s13)*s23^2 - p1q^2*p2q^2*s23^3 +
       p1q*p2q^3*((s12 + s13)*s23^2 - s23^3) +
       p3q^2*(p2q^2*(6*s12 + 6*s13)*s23^2 - p1q^2*s23^3 +
         p1q*p2q*((3*s12 + 3*s13)*s23^2 - 3*s23^3)) +
       p3q*(p2q^3*(4*s12 + 4*s13)*s23^2 - 2*p1q^2*p2q*s23^3 +
         p1q*p2q^2*((3*s12 + 3*s13)*s23^2 - 3*s23^3)) +
       p3q^3*(p2q*(4*s12 + 4*s13)*s23^2 + p1q*((s12 + s13)*s23^2 - s23^3))) +
     ((p3q^3*(16*s12^2 + (8*s12 - 8*s13)*s23) +
        p2q^3*(16*s13^2 + (-8*s12 + 8*s13)*s23) +
        p1q^2*p2q*((-16*s12 - 16*s13)*s23 - 16*s23^2) +
        p1q*p2q^2*(16*s13^2 - 16*s12*s23 - 8*s23^2) +
        p3q*(p2q^2*(-32*s12*s13 + 16*s13^2 + (-24*s12 - 8*s13)*s23) +
          p1q*p2q*(-32*s12*s13 + (-48*s12 - 48*s13)*s23 - 32*s23^2) +
          p1q^2*((-16*s12 - 16*s13)*s23 - 16*s23^2)) +
        p3q^2*(p2q*(16*s12^2 - 32*s12*s13 + (-8*s12 - 24*s13)*s23) +
          p1q*(16*s12^2 - 16*s13*s23 - 8*s23^2)))*Log(-s12 - s13 - s23)^2)/
      (9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 + 9*p3q^3*s23^2 +
       p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
       p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
     ((p3q^3*(4*s12^2 + (2*s12 - 2*s13)*s23) +
        p2q^3*(4*s13^2 + (-2*s12 + 2*s13)*s23) +
        p1q^2*p2q*((-4*s12 - 4*s13)*s23 - 4*s23^2) +
        p1q*p2q^2*(4*s13^2 - 4*s12*s23 - 2*s23^2) +
        p3q*(p2q^2*(-8*s12*s13 + 4*s13^2 + (-6*s12 - 2*s13)*s23) +
          p1q*p2q*(-8*s12*s13 + (-12*s12 - 12*s13)*s23 - 8*s23^2) +
          p1q^2*((-4*s12 - 4*s13)*s23 - 4*s23^2)) +
        p3q^2*(p2q*(4*s12^2 - 8*s12*s13 + (-2*s12 - 6*s13)*s23) +
          p1q*(4*s12^2 - 4*s13*s23 - 2*s23^2)))*Log(s12/(s12 + s13 + s23))^2)/
      (9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 + 9*p3q^3*s23^2 +
       p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
       p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
     ((p3q^3*(14*s12^2 + (7*s12 - 7*s13)*s23) +
        p2q^3*(14*s13^2 + (-7*s12 + 7*s13)*s23) +
        p1q^2*p2q*((-14*s12 - 14*s13)*s23 - 14*s23^2) +
        p1q*p2q^2*(14*s13^2 - 14*s12*s23 - 7*s23^2) +
        p3q*(p2q^2*(-28*s12*s13 + 14*s13^2 + (-21*s12 - 7*s13)*s23) +
          p1q*p2q*(-28*s12*s13 + (-42*s12 - 42*s13)*s23 - 28*s23^2) +
          p1q^2*((-14*s12 - 14*s13)*s23 - 14*s23^2)) +
        p3q^2*(p2q*(14*s12^2 - 28*s12*s13 + (-7*s12 - 21*s13)*s23) +
          p1q*(14*s12^2 - 14*s13*s23 - 7*s23^2)))*Log(s13/(s12 + s13 + s23))^
        2)/(9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 + 9*p3q^3*s23^2 +
       p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
       p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
     ((p3q^3*(84*s12^5*s13 + 168*s12^4*s13^2 + 84*s12^3*s13^3 +
           (-2*s12^5 + 74*s12^4*s13 + 56*s12^3*s13^2 - 60*s12^2*s13^3 -
             40*s12*s13^4)*s23 + (-2*s12^4 + 22*s12^3*s13 - 6*s12^2*s13^2 -
             20*s12*s13^3)*s23^2) + p2q^3*(84*s12^3*s13^3 + 168*s12^2*s13^4 +
           84*s12*s13^5 + (-40*s12^4*s13 - 55*s12^3*s13^2 + 61*s12^2*s13^3 +
             69*s12*s13^4 - 7*s13^5)*s23 + (-10*s12^3*s13 - s12^2*s13^2 +
             12*s12*s13^3 - 7*s13^4)*s23^2) + p1q*p2q^2*(84*s12^3*s13^3 +
           168*s12^2*s13^4 + 84*s12*s13^5 + (-84*s12^4*s13 -
             202*s12^3*s13^2 - 84*s12^2*s13^3 + 34*s12*s13^4)*s23 +
           (-71*s12^3*s13 - 114*s12^2*s13^2 - 9*s12*s13^3 + 14*s13^4)*s23^2 +
           (-17*s12^2*s13 + 7*s12*s13^2 + 14*s13^3)*s23^3) +
         p1q^2*p2q*((-84*s12^4*s13 - 252*s12^3*s13^2 - 252*s12^2*s13^3 -
             84*s12*s13^4)*s23 + (-118*s12^3*s13 - 236*s12^2*s13^2 -
             118*s12*s13^3)*s23^2 + (-2*s12^3 - 55*s12^2*s13 - 60*s12*s13^2 -
             7*s13^3)*s23^3 + (-2*s12^2 - 19*s12*s13 - 7*s13^2)*s23^4) +
         p3q^2*(p2q*(84*s12^5*s13 - 252*s12^3*s13^3 - 168*s12^2*s13^4 +
             (-2*s12^5 + 15*s12^4*s13 - 227*s12^3*s13^2 - 333*s12^2*s13^3 -
               89*s12*s13^4)*s23 + (-2*s12^4 + 23*s12^3*s13 - 34*s12^2*
                s13^2 - 29*s12*s13^3)*s23^2) + p1q*(84*s12^5*s13 +
             168*s12^4*s13^2 + 84*s12^3*s13^3 + (34*s12^4*s13 - 84*s12^3*
                s13^2 - 202*s12^2*s13^3 - 84*s12*s13^4)*s23 +
             (4*s12^4 - 19*s12^3*s13 - 124*s12^2*s13^2 - 81*s12*s13^3)*
              s23^2 + (4*s12^3 - 3*s12^2*s13 - 17*s12*s13^2)*s23^3)) +
         p3q*(p2q^2*(-168*s12^4*s13^2 - 252*s12^3*s13^3 + 84*s12*s13^5 +
             (-99*s12^4*s13 - 338*s12^3*s13^2 - 212*s12^2*s13^3 + 20*s12*
                s13^4 - 7*s13^5)*s23 + (-9*s12^3*s13 - 29*s12^2*s13^2 + 3*s12*
                s13^3 - 7*s13^4)*s23^2) + p1q*p2q*(-168*s12^4*s13^2 -
             336*s12^3*s13^3 - 168*s12^2*s13^4 + (-218*s12^4*s13 - 790*s12^3*
                s13^2 - 790*s12^2*s13^3 - 218*s12*s13^4)*s23 +
             (4*s12^4 - 174*s12^3*s13 - 406*s12^2*s13^2 - 174*s12*s13^3 + 14*
                s13^4)*s23^2 + (4*s12^3 - 20*s12^2*s13 - 10*s12*s13^2 + 14*
                s13^3)*s23^3) + p1q^2*((-84*s12^4*s13 - 252*s12^3*s13^2 - 252*
                s12^2*s13^3 - 84*s12*s13^4)*s23 + (-118*s12^3*s13 - 236*s12^2*
                s13^2 - 118*s12*s13^3)*s23^2 + (-2*s12^3 - 55*s12^2*s13 - 60*
                s12*s13^2 - 7*s13^3)*s23^3 + (-2*s12^2 - 19*s12*s13 - 7*
                s13^2)*s23^4)))/(p1q*p2q^2*(9*s12^3*s13 + 18*s12^2*s13^2 +
           9*s12*s13^3)*s23^2 + p2q^3*(9*s12^3*s13 + 18*s12^2*s13^2 +
           9*s12*s13^3)*s23^2 + p3q^3*(9*s12^3*s13 + 18*s12^2*s13^2 +
           9*s12*s13^3)*s23^2 + p3q^2*(p1q*(9*s12^3*s13 + 18*s12^2*s13^2 +
             9*s12*s13^3)*s23^2 + p2q*(27*s12^3*s13 + 54*s12^2*s13^2 +
             27*s12*s13^3)*s23^2) +
         p3q*(p1q*p2q*(18*s12^3*s13 + 36*s12^2*s13^2 + 18*s12*s13^3)*s23^2 +
           p2q^2*(27*s12^3*s13 + 54*s12^2*s13^2 + 27*s12*s13^3)*s23^2)) +
       ((p3q^3*(-40*s12^5*s13^2 - 40*s12^4*s13^3 +
            (2*s12^6 - 19*s12^4*s13^2 - 30*s12^3*s13^3 + 27*s12^2*s13^4)*
             s23 + (2*s12^5 - 2*s12^4*s13 - 7*s12^3*s13^2 - 23*s12^2*s13^3)*
             s23^2) + p2q^3*(-40*s12^3*s13^4 - 40*s12^2*s13^5 +
            (22*s12^4*s13^2 - 10*s12^3*s13^3 + s12^2*s13^4 + 7*s13^6)*s23 +
            (-8*s12^3*s13^2 - 2*s12^2*s13^3 - 7*s12*s13^4 + 7*s13^5)*s23^2) +
          p1q*p2q^2*(-40*s12^3*s13^4 - 40*s12^2*s13^5 +
            (44*s12^4*s13^2 - 6*s12^3*s13^3 + 56*s12^2*s13^4 - 14*s12*s13^5)*
             s23 + (-14*s12^3*s13^2 + 26*s12^2*s13^3 - 21*s12*s13^4 -
              21*s13^5)*s23^2 + (2*s12^2*s13^2 + 14*s12*s13^3 - 21*s13^4)*
             s23^3) + p1q^2*p2q*((40*s12^4*s13^2 + 40*s12^3*s13^3 +
              80*s12^2*s13^4)*s23 + (4*s12^4*s13 - 2*s12^3*s13^2 +
              42*s12^2*s13^3 + 28*s12*s13^4)*s23^2 +
            (2*s12^4 + 8*s12^3*s13 - 21*s12^2*s13^2 + 42*s12*s13^3 +
              21*s13^4)*s23^3 + (2*s12^3 + 2*s12^2*s13 - 7*s12*s13^2 +
              21*s13^3)*s23^4) + p1q^3*((-40*s12^3*s13^2 - 40*s12^2*s13^3)*
             s23^2 + (-4*s12^3*s13 - 58*s12^2*s13^2 - 14*s12*s13^3)*s23^3 +
            (-2*s12^3 - 6*s12^2*s13 - 21*s12*s13^2 - 7*s13^3)*s23^4 +
            (-2*s12^2 - 7*s13^2)*s23^5) +
          p3q^2*(p2q*(-40*s12^5*s13^2 + 40*s12^4*s13^3 + 80*s12^3*s13^4 +
              (2*s12^6 - 4*s12^5*s13 + 31*s12^4*s13^2 + 28*s12^3*s13^3 +
                97*s12^2*s13^4 - 14*s12*s13^5)*s23 + (2*s12^5 - 6*s12^4*s13 -
                13*s12^3*s13^2 - 39*s12^2*s13^3 - 14*s12*s13^4)*s23^2) +
            p1q*(-40*s12^5*s13^2 - 40*s12^4*s13^3 + (-4*s12^5*s13 +
                46*s12^4*s13^2 - 16*s12^3*s13^3 + 54*s12^2*s13^4)*s23 +
              (-6*s12^5 - 6*s12^4*s13 + 41*s12^3*s13^2 - 39*s12^2*s13^3)*s23^
                2 + (-6*s12^4 + 4*s12^3*s13 + 7*s12^2*s13^2)*s23^3)) +
          p3q*(p2q^2*(80*s12^4*s13^3 + 40*s12^3*s13^4 - 40*s12^2*s13^5 +
              (-4*s12^5*s13 + 72*s12^4*s13^2 + 48*s12^3*s13^3 +
                71*s12^2*s13^4 - 14*s12*s13^5 + 7*s13^6)*s23 +
              (-4*s12^4*s13 - 14*s12^3*s13^2 - 18*s12^2*s13^3 -
                21*s12*s13^4 + 7*s13^5)*s23^2) + p1q*p2q*(80*s12^4*s13^3 +
              80*s12^3*s13^4 + (-4*s12^5*s13 + 170*s12^4*s13^2 +
                138*s12^3*s13^3 + 190*s12^2*s13^4 - 14*s12*s13^5)*s23 +
              (-4*s12^5 - 4*s12^4*s13 + 98*s12^3*s13^2 + 58*s12^2*s13^3 -
                14*s12*s13^4 - 14*s13^5)*s23^2 + (-4*s12^4 + 4*s12^3*s13 +
                40*s12^2*s13^2 + 14*s12*s13^3 - 14*s13^4)*s23^3) +
            p1q^2*((80*s12^4*s13^2 + 40*s12^3*s13^3 + 40*s12^2*s13^4)*s23 +
              (8*s12^4*s13 + 52*s12^3*s13^2 - 2*s12^2*s13^3 + 14*s12*s13^4)*
               s23^2 + (6*s12^4 + 12*s12^3*s13 - s12^2*s13^2 + 28*s12*s13^3 +
                7*s13^4)*s23^3 + (6*s12^3 - 2*s12^2*s13 + 7*s12*s13^2 +
                7*s13^3)*s23^4)))*Log((s12 + s13)/(s12 + s13 + s23)))/
        (p2q^3*(9*s12^3*s13^2 + 9*s12^2*s13^3)*s23^2 +
         p3q^3*(9*s12^3*s13^2 + 9*s12^2*s13^3)*s23^2 - 9*p1q^2*p2q*s12^2*
          s13^2*s23^3 + p1q*p2q^2*((9*s12^3*s13^2 + 9*s12^2*s13^3)*s23^2 -
           9*s12^2*s13^2*s23^3) + p3q*(p2q^2*(27*s12^3*s13^2 +
             27*s12^2*s13^3)*s23^2 - 9*p1q^2*s12^2*s13^2*s23^3 +
           p1q*p2q*((18*s12^3*s13^2 + 18*s12^2*s13^3)*s23^2 -
             18*s12^2*s13^2*s23^3)) +
         p3q^2*(p2q*(27*s12^3*s13^2 + 27*s12^2*s13^3)*s23^2 +
           p1q*((9*s12^3*s13^2 + 9*s12^2*s13^3)*s23^2 - 9*s12^2*s13^2*
              s23^3))))*Log(s23/(s12 + s13 + s23)) +
     ((p2q^3*(-2*s13^2 + (s12 - s13)*s23) +
        p3q^3*(-2*s12^2 + (-s12 + s13)*s23) + p1q*p2q^2*
         (-2*s13^2 + 2*s12*s23 + s23^2) + p1q^2*p2q*((2*s12 + 2*s13)*s23 +
          2*s23^2) + p3q^2*(p2q*(-2*s12^2 + 4*s12*s13 + (s12 + 3*s13)*s23) +
          p1q*(-2*s12^2 + 2*s13*s23 + s23^2)) +
        p3q*(p2q^2*(4*s12*s13 - 2*s13^2 + (3*s12 + s13)*s23) +
          p1q^2*((2*s12 + 2*s13)*s23 + 2*s23^2) +
          p1q*p2q*(4*s12*s13 + (6*s12 + 6*s13)*s23 + 4*s23^2)))*
       Log(s23/(s12 + s13 + s23))^2)/(9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 +
       9*p3q^3*s23^2 + p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
       p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) + Log(p1q/(p1q + p2q + p3q))*
      ((p2q*(2*s12 + 2*s13) + p3q*(2*s12 + 2*s13) - 2*p1q*s23)/
        (9*p1q*s23 + 9*p2q*s23 + 9*p3q*s23) +
       ((p2q^4*(4*s12*s13^2 + 4*s13^3 + (-2*s12^2 - 2*s12*s13 + 4*s13^2)*
             s23 - 2*s12*s23^2) + p1q*p2q^3*(4*s12*s13^2 + 4*s13^3 +
            (-4*s12^2 - 10*s12*s13 - 2*s13^2)*s23 + (-4*s12 - 6*s13)*s23^2) +
          p3q^4*(4*s12^3 + 4*s12^2*s13 + (4*s12^2 - 2*s12*s13 - 2*s13^2)*
             s23 - 2*s13*s23^2) + p1q^2*p2q^2*
           ((-4*s12^2 - 12*s12*s13 - 8*s13^2)*s23 + (-2*s12 - 6*s13)*s23^2 +
            2*s23^3) + p1q^3*p2q*((4*s12 + 4*s13)*s23^2 + 4*s23^3) +
          p3q^3*(p2q*(8*s12^3 - 8*s12*s13^2 + (6*s12^2 - 16*s12*s13 -
                6*s13^2)*s23 + (-2*s12 - 6*s13)*s23^2) +
            p1q*(4*s12^3 + 4*s12^2*s13 + (-2*s12^2 - 10*s12*s13 - 4*s13^2)*
               s23 + (-6*s12 - 4*s13)*s23^2)) +
          p3q^2*(p2q^2*(4*s12^3 - 12*s12^2*s13 - 12*s12*s13^2 + 4*s13^3 +
              (-2*s12^2 - 28*s12*s13 - 2*s13^2)*s23 + (-6*s12 - 6*s13)*s23^
                2) + p1q^2*((-8*s12^2 - 12*s12*s13 - 4*s13^2)*s23 +
              (-6*s12 - 2*s13)*s23^2 + 2*s23^3) + p1q*p2q*
             (4*s12^3 - 4*s12^2*s13 - 8*s12*s13^2 + (-8*s12^2 - 30*s12*s13 -
                10*s13^2)*s23 + (-8*s12 - 6*s13)*s23^2 + 4*s23^3)) +
          p3q*(p2q^3*(-8*s12^2*s13 + 8*s13^3 + (-6*s12^2 - 16*s12*s13 +
                6*s13^2)*s23 + (-6*s12 - 2*s13)*s23^2) +
            p1q*p2q^2*(-8*s12^2*s13 - 4*s12*s13^2 + 4*s13^3 +
              (-10*s12^2 - 30*s12*s13 - 8*s13^2)*s23 + (-6*s12 - 8*s13)*s23^
                2 + 4*s23^3) + p1q^3*((4*s12 + 4*s13)*s23^2 + 4*s23^3) +
            p1q^2*p2q*((-4*s12^2 - 8*s12*s13 - 4*s13^2)*s23 +
              (8*s12 + 8*s13)*s23^2 + 12*s23^3)))*
         Log((p2q + p3q)/(p1q + p2q + p3q)))/(p2q^4*(9*s12 + 9*s13)*s23^2 +
         p3q^4*(9*s12 + 9*s13)*s23^2 - 9*p1q^2*p2q^2*s23^3 +
         p1q*p2q^3*((9*s12 + 9*s13)*s23^2 - 9*s23^3) +
         p3q^2*(p2q^2*(54*s12 + 54*s13)*s23^2 - 9*p1q^2*s23^3 +
           p1q*p2q*((27*s12 + 27*s13)*s23^2 - 27*s23^3)) +
         p3q*(p2q^3*(36*s12 + 36*s13)*s23^2 - 18*p1q^2*p2q*s23^3 +
           p1q*p2q^2*((27*s12 + 27*s13)*s23^2 - 27*s23^3)) +
         p3q^3*(p2q*(36*s12 + 36*s13)*s23^2 + p1q*((9*s12 + 9*s13)*s23^2 -
             9*s23^3))) + ((p2q^3*(-4*s13^2 + (2*s12 - 2*s13)*s23) +
          p3q^3*(-4*s12^2 + (-2*s12 + 2*s13)*s23) +
          p1q*p2q^2*(-4*s13^2 + 4*s12*s23 + 2*s23^2) +
          p1q^2*p2q*((4*s12 + 4*s13)*s23 + 4*s23^2) +
          p3q^2*(p2q*(-4*s12^2 + 8*s12*s13 + (2*s12 + 6*s13)*s23) +
            p1q*(-4*s12^2 + 4*s13*s23 + 2*s23^2)) +
          p3q*(p2q^2*(8*s12*s13 - 4*s13^2 + (6*s12 + 2*s13)*s23) +
            p1q^2*((4*s12 + 4*s13)*s23 + 4*s23^2) +
            p1q*p2q*(8*s12*s13 + (12*s12 + 12*s13)*s23 + 8*s23^2)))*
         Log(-s12 - s13 - s23))/(9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 +
         9*p3q^3*s23^2 + p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
         p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
       ((p2q^3*(2*s12*s13 - 2*s13^2 + 2*s12*s23) +
          p3q^3*(-2*s12^2 + 2*s12*s13 + 2*s13*s23) +
          p1q*p2q^2*(4*s12*s13 + (2*s12 + 2*s13)*s23) +
          p3q^2*(p1q*(4*s12*s13 + (2*s12 + 2*s13)*s23) +
            p2q*(-4*s12^2 + 6*s12*s13 - 2*s13^2 + (2*s12 + 4*s13)*s23)) +
          p3q*(p2q^2*(-2*s12^2 + 6*s12*s13 - 4*s13^2 + (4*s12 + 2*s13)*s23) +
            p1q*p2q*(-4*s12^2 - 4*s13^2 + (-4*s12 - 4*s13)*s23 - 4*s23^2)))*
         Log(s23/(s12 + s13 + s23)))/(p2q^3*(9*s12 + 9*s13)*s23 +
         p3q^3*(9*s12 + 9*s13)*s23 - 9*p1q*p2q^2*s23^2 +
         p3q^2*(p2q*(27*s12 + 27*s13)*s23 - 9*p1q*s23^2) +
         p3q*(p2q^2*(27*s12 + 27*s13)*s23 - 18*p1q*p2q*s23^2))) +
     ((nl*(p3q^3*(8*s12^2 + (4*s12 - 4*s13)*s23) +
          p2q^3*(8*s13^2 + (-4*s12 + 4*s13)*s23) + p1q^2*p2q*
           ((-8*s12 - 8*s13)*s23 - 8*s23^2) + p1q*p2q^2*
           (8*s13^2 - 8*s12*s23 - 4*s23^2) +
          p3q*(p2q^2*(-16*s12*s13 + 8*s13^2 + (-12*s12 - 4*s13)*s23) +
            p1q*p2q*(-16*s12*s13 + (-24*s12 - 24*s13)*s23 - 16*s23^2) +
            p1q^2*((-8*s12 - 8*s13)*s23 - 8*s23^2)) +
          p3q^2*(p2q*(8*s12^2 - 16*s12*s13 + (-4*s12 - 12*s13)*s23) +
            p1q*(8*s12^2 - 8*s13*s23 - 4*s23^2))))/(9*p1q*p2q^2*s23^2 +
         9*p2q^3*s23^2 + 9*p3q^3*s23^2 + p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
         p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
       (p2q^3*(-84*s13^2 + (58*s12 - 26*s13)*s23) +
         p3q^3*(-84*s12^2 + (-26*s12 + 58*s13)*s23) +
         p1q*p2q^2*(-84*s13^2 + 84*s12*s23 + 26*s23^2) +
         p1q^2*p2q*((84*s12 + 84*s13)*s23 + 84*s23^2) +
         p3q^2*(p2q*(-84*s12^2 + 168*s12*s13 + (90*s12 + 174*s13)*s23) +
           p1q*(-84*s12^2 + 84*s13*s23 + 26*s23^2)) +
         p3q*(p2q^2*(168*s12*s13 - 84*s13^2 + (174*s12 + 90*s13)*s23) +
           p1q^2*((84*s12 + 84*s13)*s23 + 84*s23^2) +
           p1q*p2q*(168*s12*s13 + (252*s12 + 252*s13)*s23 + 136*s23^2)))/
        (9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 + 9*p3q^3*s23^2 +
         p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) + p3q*(18*p1q*p2q*s23^2 +
           27*p2q^2*s23^2)) + ((p3q^3*(4*s12^2 + (2*s12 - 2*s13)*s23) +
          p2q^3*(4*s13^2 + (-2*s12 + 2*s13)*s23) + p1q^2*p2q*
           ((-4*s12 - 4*s13)*s23 - 4*s23^2) + p1q*p2q^2*
           (4*s13^2 - 4*s12*s23 - 2*s23^2) +
          p3q*(p2q^2*(-8*s12*s13 + 4*s13^2 + (-6*s12 - 2*s13)*s23) +
            p1q*p2q*(-8*s12*s13 + (-12*s12 - 12*s13)*s23 - 8*s23^2) +
            p1q^2*((-4*s12 - 4*s13)*s23 - 4*s23^2)) +
          p3q^2*(p2q*(4*s12^2 - 8*s12*s13 + (-2*s12 - 6*s13)*s23) +
            p1q*(4*s12^2 - 4*s13*s23 - 2*s23^2)))*Log(p1q/(p1q + p2q + p3q)))/
        (9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 + 9*p3q^3*s23^2 +
         p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) + p3q*(18*p1q*p2q*s23^2 +
           27*p2q^2*s23^2)) + ((p2q^3*(-28*s13^2 + (14*s12 - 14*s13)*s23) +
          p3q^3*(-28*s12^2 + (-14*s12 + 14*s13)*s23) +
          p1q*p2q^2*(-28*s13^2 + 28*s12*s23 + 14*s23^2) +
          p1q^2*p2q*((28*s12 + 28*s13)*s23 + 28*s23^2) +
          p3q^2*(p2q*(-28*s12^2 + 56*s12*s13 + (14*s12 + 42*s13)*s23) +
            p1q*(-28*s12^2 + 28*s13*s23 + 14*s23^2)) +
          p3q*(p2q^2*(56*s12*s13 - 28*s13^2 + (42*s12 + 14*s13)*s23) +
            p1q^2*((28*s12 + 28*s13)*s23 + 28*s23^2) +
            p1q*p2q*(56*s12*s13 + (84*s12 + 84*s13)*s23 + 56*s23^2)))*
         Log(p2q/(p1q + p2q + p3q)))/(9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 +
         9*p3q^3*s23^2 + p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
         p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
       ((p2q^3*(-8*s13^2 + (4*s12 - 4*s13)*s23) +
          p3q^3*(-8*s12^2 + (-4*s12 + 4*s13)*s23) +
          p1q*p2q^2*(-8*s13^2 + 8*s12*s23 + 4*s23^2) +
          p1q^2*p2q*((8*s12 + 8*s13)*s23 + 8*s23^2) +
          p3q^2*(p2q*(-8*s12^2 + 16*s12*s13 + (4*s12 + 12*s13)*s23) +
            p1q*(-8*s12^2 + 8*s13*s23 + 4*s23^2)) +
          p3q*(p2q^2*(16*s12*s13 - 8*s13^2 + (12*s12 + 4*s13)*s23) +
            p1q^2*((8*s12 + 8*s13)*s23 + 8*s23^2) +
            p1q*p2q*(16*s12*s13 + (24*s12 + 24*s13)*s23 + 16*s23^2)))*
         Log(p3q/(p1q + p2q + p3q)))/(9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 +
         9*p3q^3*s23^2 + p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
         p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
       ((p2q^3*(-32*s13^2 + (16*s12 - 16*s13)*s23) +
          p3q^3*(-32*s12^2 + (-16*s12 + 16*s13)*s23) +
          p1q*p2q^2*(-32*s13^2 + 32*s12*s23 + 16*s23^2) +
          p1q^2*p2q*((32*s12 + 32*s13)*s23 + 32*s23^2) +
          p3q^2*(p2q*(-32*s12^2 + 64*s12*s13 + (16*s12 + 48*s13)*s23) +
            p1q*(-32*s12^2 + 32*s13*s23 + 16*s23^2)) +
          p3q*(p2q^2*(64*s12*s13 - 32*s13^2 + (48*s12 + 16*s13)*s23) +
            p1q^2*((32*s12 + 32*s13)*s23 + 32*s23^2) +
            p1q*p2q*(64*s12*s13 + (96*s12 + 96*s13)*s23 + 64*s23^2)))*
         Log(-s12 - s13 - s23))/(9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 +
         9*p3q^3*s23^2 + p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
         p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
       ((p2q^3*(-8*s13^2 + (4*s12 - 4*s13)*s23) +
          p3q^3*(-8*s12^2 + (-4*s12 + 4*s13)*s23) +
          p1q*p2q^2*(-8*s13^2 + 8*s12*s23 + 4*s23^2) +
          p1q^2*p2q*((8*s12 + 8*s13)*s23 + 8*s23^2) +
          p3q^2*(p2q*(-8*s12^2 + 16*s12*s13 + (4*s12 + 12*s13)*s23) +
            p1q*(-8*s12^2 + 8*s13*s23 + 4*s23^2)) +
          p3q*(p2q^2*(16*s12*s13 - 8*s13^2 + (12*s12 + 4*s13)*s23) +
            p1q^2*((8*s12 + 8*s13)*s23 + 8*s23^2) +
            p1q*p2q*(16*s12*s13 + (24*s12 + 24*s13)*s23 + 16*s23^2)))*
         Log(s12/(s12 + s13 + s23)))/(9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 +
         9*p3q^3*s23^2 + p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
         p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
       ((p2q^3*(-28*s13^2 + (14*s12 - 14*s13)*s23) +
          p3q^3*(-28*s12^2 + (-14*s12 + 14*s13)*s23) +
          p1q*p2q^2*(-28*s13^2 + 28*s12*s23 + 14*s23^2) +
          p1q^2*p2q*((28*s12 + 28*s13)*s23 + 28*s23^2) +
          p3q^2*(p2q*(-28*s12^2 + 56*s12*s13 + (14*s12 + 42*s13)*s23) +
            p1q*(-28*s12^2 + 28*s13*s23 + 14*s23^2)) +
          p3q*(p2q^2*(56*s12*s13 - 28*s13^2 + (42*s12 + 14*s13)*s23) +
            p1q^2*((28*s12 + 28*s13)*s23 + 28*s23^2) +
            p1q*p2q*(56*s12*s13 + (84*s12 + 84*s13)*s23 + 56*s23^2)))*
         Log(s13/(s12 + s13 + s23)))/(9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 +
         9*p3q^3*s23^2 + p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
         p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
       ((p3q^3*(4*s12^2 + (2*s12 - 2*s13)*s23) +
          p2q^3*(4*s13^2 + (-2*s12 + 2*s13)*s23) + p1q^2*p2q*
           ((-4*s12 - 4*s13)*s23 - 4*s23^2) + p1q*p2q^2*
           (4*s13^2 - 4*s12*s23 - 2*s23^2) +
          p3q*(p2q^2*(-8*s12*s13 + 4*s13^2 + (-6*s12 - 2*s13)*s23) +
            p1q*p2q*(-8*s12*s13 + (-12*s12 - 12*s13)*s23 - 8*s23^2) +
            p1q^2*((-4*s12 - 4*s13)*s23 - 4*s23^2)) +
          p3q^2*(p2q*(4*s12^2 - 8*s12*s13 + (-2*s12 - 6*s13)*s23) +
            p1q*(4*s12^2 - 4*s13*s23 - 2*s23^2)))*Log(s23/(s12 + s13 + s23)))/
        (9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 + 9*p3q^3*s23^2 +
         p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) + p3q*(18*p1q*p2q*s23^2 +
           27*p2q^2*s23^2)))/ep + Log(-s12 - s13 - s23)*
      ((p3q^3*(84*s12^2 + (26*s12 - 58*s13)*s23) +
         p2q^3*(84*s13^2 + (-58*s12 + 26*s13)*s23) +
         p1q^2*p2q*((-84*s12 - 84*s13)*s23 - 84*s23^2) +
         p1q*p2q^2*(84*s13^2 - 84*s12*s23 - 26*s23^2) +
         p3q*(p2q^2*(-168*s12*s13 + 84*s13^2 + (-174*s12 - 90*s13)*s23) +
           p1q*p2q*(-168*s12*s13 + (-252*s12 - 252*s13)*s23 - 136*s23^2) +
           p1q^2*((-84*s12 - 84*s13)*s23 - 84*s23^2)) +
         p3q^2*(p2q*(84*s12^2 - 168*s12*s13 + (-90*s12 - 174*s13)*s23) +
           p1q*(84*s12^2 - 84*s13*s23 - 26*s23^2)))/(9*p1q*p2q^2*s23^2 +
         9*p2q^3*s23^2 + 9*p3q^3*s23^2 + p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
         p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
       ((p3q^3*(8*s12^2 + (4*s12 - 4*s13)*s23) +
          p2q^3*(8*s13^2 + (-4*s12 + 4*s13)*s23) + p1q^2*p2q*
           ((-8*s12 - 8*s13)*s23 - 8*s23^2) + p1q*p2q^2*
           (8*s13^2 - 8*s12*s23 - 4*s23^2) +
          p3q*(p2q^2*(-16*s12*s13 + 8*s13^2 + (-12*s12 - 4*s13)*s23) +
            p1q*p2q*(-16*s12*s13 + (-24*s12 - 24*s13)*s23 - 16*s23^2) +
            p1q^2*((-8*s12 - 8*s13)*s23 - 8*s23^2)) +
          p3q^2*(p2q*(8*s12^2 - 16*s12*s13 + (-4*s12 - 12*s13)*s23) +
            p1q*(8*s12^2 - 8*s13*s23 - 4*s23^2)))*Log(s12/(s12 + s13 + s23)))/
        (9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 + 9*p3q^3*s23^2 +
         p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) + p3q*(18*p1q*p2q*s23^2 +
           27*p2q^2*s23^2)) + ((p3q^3*(28*s12^2 + (14*s12 - 14*s13)*s23) +
          p2q^3*(28*s13^2 + (-14*s12 + 14*s13)*s23) +
          p1q^2*p2q*((-28*s12 - 28*s13)*s23 - 28*s23^2) +
          p1q*p2q^2*(28*s13^2 - 28*s12*s23 - 14*s23^2) +
          p3q*(p2q^2*(-56*s12*s13 + 28*s13^2 + (-42*s12 - 14*s13)*s23) +
            p1q*p2q*(-56*s12*s13 + (-84*s12 - 84*s13)*s23 - 56*s23^2) +
            p1q^2*((-28*s12 - 28*s13)*s23 - 28*s23^2)) +
          p3q^2*(p2q*(28*s12^2 - 56*s12*s13 + (-14*s12 - 42*s13)*s23) +
            p1q*(28*s12^2 - 28*s13*s23 - 14*s23^2)))*
         Log(s13/(s12 + s13 + s23)))/(9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 +
         9*p3q^3*s23^2 + p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
         p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
       ((p2q^3*(-4*s13^2 + (2*s12 - 2*s13)*s23) +
          p3q^3*(-4*s12^2 + (-2*s12 + 2*s13)*s23) +
          p1q*p2q^2*(-4*s13^2 + 4*s12*s23 + 2*s23^2) +
          p1q^2*p2q*((4*s12 + 4*s13)*s23 + 4*s23^2) +
          p3q^2*(p2q*(-4*s12^2 + 8*s12*s13 + (2*s12 + 6*s13)*s23) +
            p1q*(-4*s12^2 + 4*s13*s23 + 2*s23^2)) +
          p3q*(p2q^2*(8*s12*s13 - 4*s13^2 + (6*s12 + 2*s13)*s23) +
            p1q^2*((4*s12 + 4*s13)*s23 + 4*s23^2) +
            p1q*p2q*(8*s12*s13 + (12*s12 + 12*s13)*s23 + 8*s23^2)))*
         Log(s23/(s12 + s13 + s23)))/(9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 +
         9*p3q^3*s23^2 + p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
         p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2))) +
     nl*((p3q^3*(40*s12^2 + (32*s12 - 8*s13)*s23) +
         p2q^3*(40*s13^2 + (-8*s12 + 32*s13)*s23) +
         p1q^2*p2q*((-40*s12 - 40*s13)*s23 - 40*s23^2) +
         p1q*p2q^2*(40*s13^2 - 40*s12*s23 - 32*s23^2) +
         p3q*(p2q^2*(-80*s12*s13 + 40*s13^2 + (-24*s12 + 16*s13)*s23) +
           p1q*p2q*(-80*s12*s13 + (-120*s12 - 120*s13)*s23 - 104*s23^2) +
           p1q^2*((-40*s12 - 40*s13)*s23 - 40*s23^2)) +
         p3q^2*(p2q*(40*s12^2 - 80*s12*s13 + (16*s12 - 24*s13)*s23) +
           p1q*(40*s12^2 - 40*s13*s23 - 32*s23^2)))/(27*p1q*p2q^2*s23^2 +
         27*p2q^3*s23^2 + 27*p3q^3*s23^2 + p3q^2*(27*p1q*s23^2 +
           81*p2q*s23^2) + p3q*(54*p1q*p2q*s23^2 + 81*p2q^2*s23^2)) +
       ((p2q^3*(-8*s13^2 + (4*s12 - 4*s13)*s23) +
          p3q^3*(-8*s12^2 + (-4*s12 + 4*s13)*s23) +
          p1q*p2q^2*(-8*s13^2 + 8*s12*s23 + 4*s23^2) +
          p1q^2*p2q*((8*s12 + 8*s13)*s23 + 8*s23^2) +
          p3q^2*(p2q*(-8*s12^2 + 16*s12*s13 + (4*s12 + 12*s13)*s23) +
            p1q*(-8*s12^2 + 8*s13*s23 + 4*s23^2)) +
          p3q*(p2q^2*(16*s12*s13 - 8*s13^2 + (12*s12 + 4*s13)*s23) +
            p1q^2*((8*s12 + 8*s13)*s23 + 8*s23^2) +
            p1q*p2q*(16*s12*s13 + (24*s12 + 24*s13)*s23 + 16*s23^2)))*
         Log(-s12 - s13 - s23))/(9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 +
         9*p3q^3*s23^2 + p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
         p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
       ((p2q^3*(-8*s13^2 + (4*s12 - 4*s13)*s23) +
          p3q^3*(-8*s12^2 + (-4*s12 + 4*s13)*s23) +
          p1q*p2q^2*(-8*s13^2 + 8*s12*s23 + 4*s23^2) +
          p1q^2*p2q*((8*s12 + 8*s13)*s23 + 8*s23^2) +
          p3q^2*(p2q*(-8*s12^2 + 16*s12*s13 + (4*s12 + 12*s13)*s23) +
            p1q*(-8*s12^2 + 8*s13*s23 + 4*s23^2)) +
          p3q*(p2q^2*(16*s12*s13 - 8*s13^2 + (12*s12 + 4*s13)*s23) +
            p1q^2*((8*s12 + 8*s13)*s23 + 8*s23^2) +
            p1q*p2q*(16*s12*s13 + (24*s12 + 24*s13)*s23 + 16*s23^2)))*
         Log(s23/(s12 + s13 + s23)))/(9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 +
         9*p3q^3*s23^2 + p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
         p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2))) +
     Log((p2q + p3q)/(p1q + p2q + p3q))*
      (((p2q^4*(8*s12*s13^2 + 8*s13^3 + (-4*s12^2 - 4*s12*s13 + 8*s13^2)*
             s23 - 4*s12*s23^2) + p1q*p2q^3*(8*s12*s13^2 + 8*s13^3 +
            (-8*s12^2 - 20*s12*s13 - 4*s13^2)*s23 + (-8*s12 - 12*s13)*
             s23^2) + p3q^4*(8*s12^3 + 8*s12^2*s13 +
            (8*s12^2 - 4*s12*s13 - 4*s13^2)*s23 - 4*s13*s23^2) +
          p1q^2*p2q^2*((-8*s12^2 - 24*s12*s13 - 16*s13^2)*s23 +
            (-4*s12 - 12*s13)*s23^2 + 4*s23^3) + p1q^3*p2q*
           ((8*s12 + 8*s13)*s23^2 + 8*s23^3) +
          p3q^3*(p2q*(16*s12^3 - 16*s12*s13^2 + (12*s12^2 - 32*s12*s13 -
                12*s13^2)*s23 + (-4*s12 - 12*s13)*s23^2) +
            p1q*(8*s12^3 + 8*s12^2*s13 + (-4*s12^2 - 20*s12*s13 - 8*s13^2)*
               s23 + (-12*s12 - 8*s13)*s23^2)) +
          p3q^2*(p2q^2*(8*s12^3 - 24*s12^2*s13 - 24*s12*s13^2 + 8*s13^3 +
              (-4*s12^2 - 56*s12*s13 - 4*s13^2)*s23 + (-12*s12 - 12*s13)*s23^
                2) + p1q^2*((-16*s12^2 - 24*s12*s13 - 8*s13^2)*s23 +
              (-12*s12 - 4*s13)*s23^2 + 4*s23^3) + p1q*p2q*
             (8*s12^3 - 8*s12^2*s13 - 16*s12*s13^2 + (-16*s12^2 -
                60*s12*s13 - 20*s13^2)*s23 + (-16*s12 - 12*s13)*s23^2 +
              8*s23^3)) + p3q*(p2q^3*(-16*s12^2*s13 + 16*s13^3 +
              (-12*s12^2 - 32*s12*s13 + 12*s13^2)*s23 + (-12*s12 - 4*s13)*s23^
                2) + p1q*p2q^2*(-16*s12^2*s13 - 8*s12*s13^2 + 8*s13^3 +
              (-20*s12^2 - 60*s12*s13 - 16*s13^2)*s23 + (-12*s12 - 16*s13)*
               s23^2 + 8*s23^3) + p1q^3*((8*s12 + 8*s13)*s23^2 + 8*s23^3) +
            p1q^2*p2q*((-8*s12^2 - 16*s12*s13 - 8*s13^2)*s23 +
              (16*s12 + 16*s13)*s23^2 + 24*s23^3)))*
         Log(s12/(s12 + s13 + s23)))/(p2q^4*(9*s12 + 9*s13)*s23^2 +
         p3q^4*(9*s12 + 9*s13)*s23^2 - 9*p1q^2*p2q^2*s23^3 +
         p1q*p2q^3*((9*s12 + 9*s13)*s23^2 - 9*s23^3) +
         p3q^2*(p2q^2*(54*s12 + 54*s13)*s23^2 - 9*p1q^2*s23^3 +
           p1q*p2q*((27*s12 + 27*s13)*s23^2 - 27*s23^3)) +
         p3q*(p2q^3*(36*s12 + 36*s13)*s23^2 - 18*p1q^2*p2q*s23^3 +
           p1q*p2q^2*((27*s12 + 27*s13)*s23^2 - 27*s23^3)) +
         p3q^3*(p2q*(36*s12 + 36*s13)*s23^2 + p1q*((9*s12 + 9*s13)*s23^2 -
             9*s23^3))) + ((p2q^4*(28*s12*s13^2 + 28*s13^3 +
            (-14*s12^2 - 14*s12*s13 + 28*s13^2)*s23 - 14*s12*s23^2) +
          p1q*p2q^3*(28*s12*s13^2 + 28*s13^3 + (-28*s12^2 - 70*s12*s13 -
              14*s13^2)*s23 + (-28*s12 - 42*s13)*s23^2) +
          p3q^4*(28*s12^3 + 28*s12^2*s13 + (28*s12^2 - 14*s12*s13 - 14*s13^2)*
             s23 - 14*s13*s23^2) + p1q^2*p2q^2*
           ((-28*s12^2 - 84*s12*s13 - 56*s13^2)*s23 + (-14*s12 - 42*s13)*
             s23^2 + 14*s23^3) + p1q^3*p2q*((28*s12 + 28*s13)*s23^2 +
            28*s23^3) + p3q^3*(p2q*(56*s12^3 - 56*s12*s13^2 +
              (42*s12^2 - 112*s12*s13 - 42*s13^2)*s23 + (-14*s12 - 42*s13)*
               s23^2) + p1q*(28*s12^3 + 28*s12^2*s13 + (-14*s12^2 -
                70*s12*s13 - 28*s13^2)*s23 + (-42*s12 - 28*s13)*s23^2)) +
          p3q^2*(p2q^2*(28*s12^3 - 84*s12^2*s13 - 84*s12*s13^2 + 28*s13^3 +
              (-14*s12^2 - 196*s12*s13 - 14*s13^2)*s23 + (-42*s12 - 42*s13)*
               s23^2) + p1q^2*((-56*s12^2 - 84*s12*s13 - 28*s13^2)*s23 +
              (-42*s12 - 14*s13)*s23^2 + 14*s23^3) +
            p1q*p2q*(28*s12^3 - 28*s12^2*s13 - 56*s12*s13^2 +
              (-56*s12^2 - 210*s12*s13 - 70*s13^2)*s23 + (-56*s12 - 42*s13)*
               s23^2 + 28*s23^3)) + p3q*(p2q^3*(-56*s12^2*s13 + 56*s13^3 +
              (-42*s12^2 - 112*s12*s13 + 42*s13^2)*s23 + (-42*s12 - 14*s13)*
               s23^2) + p1q*p2q^2*(-56*s12^2*s13 - 28*s12*s13^2 + 28*s13^3 +
              (-70*s12^2 - 210*s12*s13 - 56*s13^2)*s23 + (-42*s12 - 56*s13)*
               s23^2 + 28*s23^3) + p1q^3*((28*s12 + 28*s13)*s23^2 +
              28*s23^3) + p1q^2*p2q*((-28*s12^2 - 56*s12*s13 - 28*s13^2)*
               s23 + (56*s12 + 56*s13)*s23^2 + 84*s23^3)))*
         Log(s13/(s12 + s13 + s23)))/(p2q^4*(9*s12 + 9*s13)*s23^2 +
         p3q^4*(9*s12 + 9*s13)*s23^2 - 9*p1q^2*p2q^2*s23^3 +
         p1q*p2q^3*((9*s12 + 9*s13)*s23^2 - 9*s23^3) +
         p3q^2*(p2q^2*(54*s12 + 54*s13)*s23^2 - 9*p1q^2*s23^3 +
           p1q*p2q*((27*s12 + 27*s13)*s23^2 - 27*s23^3)) +
         p3q*(p2q^3*(36*s12 + 36*s13)*s23^2 - 18*p1q^2*p2q*s23^3 +
           p1q*p2q^2*((27*s12 + 27*s13)*s23^2 - 27*s23^3)) +
         p3q^3*(p2q*(36*s12 + 36*s13)*s23^2 + p1q*((9*s12 + 9*s13)*s23^2 -
             9*s23^3))) + ((p2q^4*(-4*s12*s13^2 - 4*s13^3 +
            (2*s12^2 + 2*s12*s13 - 4*s13^2)*s23 + 2*s12*s23^2) +
          p3q^4*(-4*s12^3 - 4*s12^2*s13 + (-4*s12^2 + 2*s12*s13 + 2*s13^2)*
             s23 + 2*s13*s23^2) + p1q*p2q^3*(-4*s12*s13^2 - 4*s13^3 +
            (4*s12^2 + 10*s12*s13 + 2*s13^2)*s23 + (4*s12 + 6*s13)*s23^2) +
          p1q^3*p2q*((-4*s12 - 4*s13)*s23^2 - 4*s23^3) +
          p1q^2*p2q^2*((4*s12^2 + 12*s12*s13 + 8*s13^2)*s23 +
            (2*s12 + 6*s13)*s23^2 - 2*s23^3) +
          p3q^3*(p1q*(-4*s12^3 - 4*s12^2*s13 + (2*s12^2 + 10*s12*s13 +
                4*s13^2)*s23 + (6*s12 + 4*s13)*s23^2) +
            p2q*(-8*s12^3 + 8*s12*s13^2 + (-6*s12^2 + 16*s12*s13 + 6*s13^2)*
               s23 + (2*s12 + 6*s13)*s23^2)) +
          p3q*(p2q^3*(8*s12^2*s13 - 8*s13^3 + (6*s12^2 + 16*s12*s13 -
                6*s13^2)*s23 + (6*s12 + 2*s13)*s23^2) +
            p1q^2*p2q*((4*s12^2 + 8*s12*s13 + 4*s13^2)*s23 +
              (-8*s12 - 8*s13)*s23^2 - 12*s23^3) +
            p1q^3*((-4*s12 - 4*s13)*s23^2 - 4*s23^3) + p1q*p2q^2*
             (8*s12^2*s13 + 4*s12*s13^2 - 4*s13^3 + (10*s12^2 + 30*s12*s13 +
                8*s13^2)*s23 + (6*s12 + 8*s13)*s23^2 - 4*s23^3)) +
          p3q^2*(p2q^2*(-4*s12^3 + 12*s12^2*s13 + 12*s12*s13^2 - 4*s13^3 +
              (2*s12^2 + 28*s12*s13 + 2*s13^2)*s23 + (6*s12 + 6*s13)*s23^2) +
            p1q*p2q*(-4*s12^3 + 4*s12^2*s13 + 8*s12*s13^2 + (8*s12^2 +
                30*s12*s13 + 10*s13^2)*s23 + (8*s12 + 6*s13)*s23^2 -
              4*s23^3) + p1q^2*((8*s12^2 + 12*s12*s13 + 4*s13^2)*s23 +
              (6*s12 + 2*s13)*s23^2 - 2*s23^3)))*Log(s23/(s12 + s13 + s23)))/
        (p2q^4*(s12 + s13)*s23^2 + p3q^4*(s12 + s13)*s23^2 -
         p1q^2*p2q^2*s23^3 + p1q*p2q^3*((s12 + s13)*s23^2 - s23^3) +
         p3q^2*(p2q^2*(6*s12 + 6*s13)*s23^2 - p1q^2*s23^3 +
           p1q*p2q*((3*s12 + 3*s13)*s23^2 - 3*s23^3)) +
         p3q*(p2q^3*(4*s12 + 4*s13)*s23^2 - 2*p1q^2*p2q*s23^3 +
           p1q*p2q^2*((3*s12 + 3*s13)*s23^2 - 3*s23^3)) +
         p3q^3*(p2q*(4*s12 + 4*s13)*s23^2 + p1q*((s12 + s13)*s23^2 -
             s23^3)))) + Log(p3q/(p1q + p2q + p3q))*
      ((p2q*(-4*s12 - 4*s13) + p3q*(-4*s12 - 4*s13) + 4*p1q*s23)/
        (9*p1q*s23 + 9*p2q*s23 + 9*p3q*s23) +
       ((p2q^4*(-8*s12*s13^2 - 8*s13^3 + (4*s12^2 + 4*s12*s13 - 8*s13^2)*
             s23 + 4*s12*s23^2) + p3q^4*(-8*s12^3 - 8*s12^2*s13 +
            (-8*s12^2 + 4*s12*s13 + 4*s13^2)*s23 + 4*s13*s23^2) +
          p1q*p2q^3*(-8*s12*s13^2 - 8*s13^3 + (8*s12^2 + 20*s12*s13 +
              4*s13^2)*s23 + (8*s12 + 12*s13)*s23^2) +
          p1q^3*p2q*((-8*s12 - 8*s13)*s23^2 - 8*s23^3) +
          p1q^2*p2q^2*((8*s12^2 + 24*s12*s13 + 16*s13^2)*s23 +
            (4*s12 + 12*s13)*s23^2 - 4*s23^3) +
          p3q^3*(p1q*(-8*s12^3 - 8*s12^2*s13 + (4*s12^2 + 20*s12*s13 +
                8*s13^2)*s23 + (12*s12 + 8*s13)*s23^2) +
            p2q*(-16*s12^3 + 16*s12*s13^2 + (-12*s12^2 + 32*s12*s13 +
                12*s13^2)*s23 + (4*s12 + 12*s13)*s23^2)) +
          p3q*(p2q^3*(16*s12^2*s13 - 16*s13^3 + (12*s12^2 + 32*s12*s13 -
                12*s13^2)*s23 + (12*s12 + 4*s13)*s23^2) +
            p1q^2*p2q*((8*s12^2 + 16*s12*s13 + 8*s13^2)*s23 +
              (-16*s12 - 16*s13)*s23^2 - 24*s23^3) +
            p1q^3*((-8*s12 - 8*s13)*s23^2 - 8*s23^3) + p1q*p2q^2*
             (16*s12^2*s13 + 8*s12*s13^2 - 8*s13^3 + (20*s12^2 + 60*s12*s13 +
                16*s13^2)*s23 + (12*s12 + 16*s13)*s23^2 - 8*s23^3)) +
          p3q^2*(p2q^2*(-8*s12^3 + 24*s12^2*s13 + 24*s12*s13^2 - 8*s13^3 +
              (4*s12^2 + 56*s12*s13 + 4*s13^2)*s23 + (12*s12 + 12*s13)*s23^
                2) + p1q*p2q*(-8*s12^3 + 8*s12^2*s13 + 16*s12*s13^2 +
              (16*s12^2 + 60*s12*s13 + 20*s13^2)*s23 + (16*s12 + 12*s13)*s23^
                2 - 8*s23^3) + p1q^2*((16*s12^2 + 24*s12*s13 + 8*s13^2)*s23 +
              (12*s12 + 4*s13)*s23^2 - 4*s23^3)))*
         Log((p2q + p3q)/(p1q + p2q + p3q)))/(p2q^4*(9*s12 + 9*s13)*s23^2 +
         p3q^4*(9*s12 + 9*s13)*s23^2 - 9*p1q^2*p2q^2*s23^3 +
         p1q*p2q^3*((9*s12 + 9*s13)*s23^2 - 9*s23^3) +
         p3q^2*(p2q^2*(54*s12 + 54*s13)*s23^2 - 9*p1q^2*s23^3 +
           p1q*p2q*((27*s12 + 27*s13)*s23^2 - 27*s23^3)) +
         p3q*(p2q^3*(36*s12 + 36*s13)*s23^2 - 18*p1q^2*p2q*s23^3 +
           p1q*p2q^2*((27*s12 + 27*s13)*s23^2 - 27*s23^3)) +
         p3q^3*(p2q*(36*s12 + 36*s13)*s23^2 + p1q*((9*s12 + 9*s13)*s23^2 -
             9*s23^3))) + ((p3q^3*(8*s12^2 + (4*s12 - 4*s13)*s23) +
          p2q^3*(8*s13^2 + (-4*s12 + 4*s13)*s23) + p1q^2*p2q*
           ((-8*s12 - 8*s13)*s23 - 8*s23^2) + p1q*p2q^2*
           (8*s13^2 - 8*s12*s23 - 4*s23^2) +
          p3q*(p2q^2*(-16*s12*s13 + 8*s13^2 + (-12*s12 - 4*s13)*s23) +
            p1q*p2q*(-16*s12*s13 + (-24*s12 - 24*s13)*s23 - 16*s23^2) +
            p1q^2*((-8*s12 - 8*s13)*s23 - 8*s23^2)) +
          p3q^2*(p2q*(8*s12^2 - 16*s12*s13 + (-4*s12 - 12*s13)*s23) +
            p1q*(8*s12^2 - 8*s13*s23 - 4*s23^2)))*Log(-s12 - s13 - s23))/
        (9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 + 9*p3q^3*s23^2 +
         p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) + p3q*(18*p1q*p2q*s23^2 +
           27*p2q^2*s23^2)) + ((p2q^3*(-8*s13^2 + (4*s12 - 4*s13)*s23) +
          p3q^3*(-8*s12^2 + (-4*s12 + 4*s13)*s23) +
          p1q*p2q^2*(-8*s13^2 + 8*s12*s23 + 4*s23^2) +
          p1q^2*p2q*((8*s12 + 8*s13)*s23 + 8*s23^2) +
          p3q^2*(p2q*(-8*s12^2 + 16*s12*s13 + (4*s12 + 12*s13)*s23) +
            p1q*(-8*s12^2 + 8*s13*s23 + 4*s23^2)) +
          p3q*(p2q^2*(16*s12*s13 - 8*s13^2 + (12*s12 + 4*s13)*s23) +
            p1q^2*((8*s12 + 8*s13)*s23 + 8*s23^2) +
            p1q*p2q*(16*s12*s13 + (24*s12 + 24*s13)*s23 + 16*s23^2)))*
         Log(s12/(s12 + s13 + s23)))/(9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 +
         9*p3q^3*s23^2 + p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
         p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
       ((p2q^4*(8*s12*s13^2 + 8*s13^3 + (-4*s12^2 - 4*s12*s13 + 8*s13^2)*
             s23 - 4*s12*s23^2) + p1q*p2q^3*(8*s12*s13^2 + 8*s13^3 +
            (-8*s12^2 - 20*s12*s13 - 4*s13^2)*s23 + (-8*s12 - 12*s13)*
             s23^2) + p3q^4*(8*s12^3 + 8*s12^2*s13 +
            (8*s12^2 - 4*s12*s13 - 4*s13^2)*s23 - 4*s13*s23^2) +
          p1q^2*p2q^2*((-8*s12^2 - 24*s12*s13 - 16*s13^2)*s23 +
            (-4*s12 - 12*s13)*s23^2 + 4*s23^3) + p1q^3*p2q*
           ((8*s12 + 8*s13)*s23^2 + 8*s23^3) +
          p3q^3*(p2q*(16*s12^3 - 16*s12*s13^2 + (12*s12^2 - 32*s12*s13 -
                12*s13^2)*s23 + (-4*s12 - 12*s13)*s23^2) +
            p1q*(8*s12^3 + 8*s12^2*s13 + (-4*s12^2 - 20*s12*s13 - 8*s13^2)*
               s23 + (-12*s12 - 8*s13)*s23^2)) +
          p3q^2*(p2q^2*(8*s12^3 - 24*s12^2*s13 - 24*s12*s13^2 + 8*s13^3 +
              (-4*s12^2 - 56*s12*s13 - 4*s13^2)*s23 + (-12*s12 - 12*s13)*s23^
                2) + p1q^2*((-16*s12^2 - 24*s12*s13 - 8*s13^2)*s23 +
              (-12*s12 - 4*s13)*s23^2 + 4*s23^3) + p1q*p2q*
             (8*s12^3 - 8*s12^2*s13 - 16*s12*s13^2 + (-16*s12^2 -
                60*s12*s13 - 20*s13^2)*s23 + (-16*s12 - 12*s13)*s23^2 +
              8*s23^3)) + p3q*(p2q^3*(-16*s12^2*s13 + 16*s13^3 +
              (-12*s12^2 - 32*s12*s13 + 12*s13^2)*s23 + (-12*s12 - 4*s13)*s23^
                2) + p1q*p2q^2*(-16*s12^2*s13 - 8*s12*s13^2 + 8*s13^3 +
              (-20*s12^2 - 60*s12*s13 - 16*s13^2)*s23 + (-12*s12 - 16*s13)*
               s23^2 + 8*s23^3) + p1q^3*((8*s12 + 8*s13)*s23^2 + 8*s23^3) +
            p1q^2*p2q*((-8*s12^2 - 16*s12*s13 - 8*s13^2)*s23 +
              (16*s12 + 16*s13)*s23^2 + 24*s23^3)))*
         Log(s23/(s12 + s13 + s23)))/(p2q^4*(9*s12 + 9*s13)*s23^2 +
         p3q^4*(9*s12 + 9*s13)*s23^2 - 9*p1q^2*p2q^2*s23^3 +
         p1q*p2q^3*((9*s12 + 9*s13)*s23^2 - 9*s23^3) +
         p3q^2*(p2q^2*(54*s12 + 54*s13)*s23^2 - 9*p1q^2*s23^3 +
           p1q*p2q*((27*s12 + 27*s13)*s23^2 - 27*s23^3)) +
         p3q*(p2q^3*(36*s12 + 36*s13)*s23^2 - 18*p1q^2*p2q*s23^3 +
           p1q*p2q^2*((27*s12 + 27*s13)*s23^2 - 27*s23^3)) +
         p3q^3*(p2q*(36*s12 + 36*s13)*s23^2 + p1q*((9*s12 + 9*s13)*s23^2 -
             9*s23^3)))) + Log(p2q/(p1q + p2q + p3q))*
      ((p2q*(-14*s12 - 14*s13) + p3q*(-14*s12 - 14*s13) + 14*p1q*s23)/
        (9*p1q*s23 + 9*p2q*s23 + 9*p3q*s23) +
       ((p2q^4*(-28*s12*s13^2 - 28*s13^3 + (14*s12^2 + 14*s12*s13 - 28*s13^2)*
             s23 + 14*s12*s23^2) + p3q^4*(-28*s12^3 - 28*s12^2*s13 +
            (-28*s12^2 + 14*s12*s13 + 14*s13^2)*s23 + 14*s13*s23^2) +
          p1q*p2q^3*(-28*s12*s13^2 - 28*s13^3 + (28*s12^2 + 70*s12*s13 +
              14*s13^2)*s23 + (28*s12 + 42*s13)*s23^2) +
          p1q^3*p2q*((-28*s12 - 28*s13)*s23^2 - 28*s23^3) +
          p1q^2*p2q^2*((28*s12^2 + 84*s12*s13 + 56*s13^2)*s23 +
            (14*s12 + 42*s13)*s23^2 - 14*s23^3) +
          p3q^3*(p1q*(-28*s12^3 - 28*s12^2*s13 + (14*s12^2 + 70*s12*s13 +
                28*s13^2)*s23 + (42*s12 + 28*s13)*s23^2) +
            p2q*(-56*s12^3 + 56*s12*s13^2 + (-42*s12^2 + 112*s12*s13 +
                42*s13^2)*s23 + (14*s12 + 42*s13)*s23^2)) +
          p3q*(p2q^3*(56*s12^2*s13 - 56*s13^3 + (42*s12^2 + 112*s12*s13 -
                42*s13^2)*s23 + (42*s12 + 14*s13)*s23^2) +
            p1q^2*p2q*((28*s12^2 + 56*s12*s13 + 28*s13^2)*s23 +
              (-56*s12 - 56*s13)*s23^2 - 84*s23^3) +
            p1q^3*((-28*s12 - 28*s13)*s23^2 - 28*s23^3) +
            p1q*p2q^2*(56*s12^2*s13 + 28*s12*s13^2 - 28*s13^3 +
              (70*s12^2 + 210*s12*s13 + 56*s13^2)*s23 + (42*s12 + 56*s13)*s23^
                2 - 28*s23^3)) + p3q^2*(p2q^2*(-28*s12^3 + 84*s12^2*s13 +
              84*s12*s13^2 - 28*s13^3 + (14*s12^2 + 196*s12*s13 + 14*s13^2)*
               s23 + (42*s12 + 42*s13)*s23^2) + p1q*p2q*(-28*s12^3 +
              28*s12^2*s13 + 56*s12*s13^2 + (56*s12^2 + 210*s12*s13 +
                70*s13^2)*s23 + (56*s12 + 42*s13)*s23^2 - 28*s23^3) +
            p1q^2*((56*s12^2 + 84*s12*s13 + 28*s13^2)*s23 + (42*s12 + 14*s13)*
               s23^2 - 14*s23^3)))*Log((p2q + p3q)/(p1q + p2q + p3q)))/
        (p2q^4*(9*s12 + 9*s13)*s23^2 + p3q^4*(9*s12 + 9*s13)*s23^2 -
         9*p1q^2*p2q^2*s23^3 + p1q*p2q^3*((9*s12 + 9*s13)*s23^2 - 9*s23^3) +
         p3q^2*(p2q^2*(54*s12 + 54*s13)*s23^2 - 9*p1q^2*s23^3 +
           p1q*p2q*((27*s12 + 27*s13)*s23^2 - 27*s23^3)) +
         p3q*(p2q^3*(36*s12 + 36*s13)*s23^2 - 18*p1q^2*p2q*s23^3 +
           p1q*p2q^2*((27*s12 + 27*s13)*s23^2 - 27*s23^3)) +
         p3q^3*(p2q*(36*s12 + 36*s13)*s23^2 + p1q*((9*s12 + 9*s13)*s23^2 -
             9*s23^3))) + ((p3q^3*(28*s12^2 + (14*s12 - 14*s13)*s23) +
          p2q^3*(28*s13^2 + (-14*s12 + 14*s13)*s23) +
          p1q^2*p2q*((-28*s12 - 28*s13)*s23 - 28*s23^2) +
          p1q*p2q^2*(28*s13^2 - 28*s12*s23 - 14*s23^2) +
          p3q*(p2q^2*(-56*s12*s13 + 28*s13^2 + (-42*s12 - 14*s13)*s23) +
            p1q*p2q*(-56*s12*s13 + (-84*s12 - 84*s13)*s23 - 56*s23^2) +
            p1q^2*((-28*s12 - 28*s13)*s23 - 28*s23^2)) +
          p3q^2*(p2q*(28*s12^2 - 56*s12*s13 + (-14*s12 - 42*s13)*s23) +
            p1q*(28*s12^2 - 28*s13*s23 - 14*s23^2)))*Log(-s12 - s13 - s23))/
        (9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 + 9*p3q^3*s23^2 +
         p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) + p3q*(18*p1q*p2q*s23^2 +
           27*p2q^2*s23^2)) + ((p2q^3*(-28*s13^2 + (14*s12 - 14*s13)*s23) +
          p3q^3*(-28*s12^2 + (-14*s12 + 14*s13)*s23) +
          p1q*p2q^2*(-28*s13^2 + 28*s12*s23 + 14*s23^2) +
          p1q^2*p2q*((28*s12 + 28*s13)*s23 + 28*s23^2) +
          p3q^2*(p2q*(-28*s12^2 + 56*s12*s13 + (14*s12 + 42*s13)*s23) +
            p1q*(-28*s12^2 + 28*s13*s23 + 14*s23^2)) +
          p3q*(p2q^2*(56*s12*s13 - 28*s13^2 + (42*s12 + 14*s13)*s23) +
            p1q^2*((28*s12 + 28*s13)*s23 + 28*s23^2) +
            p1q*p2q*(56*s12*s13 + (84*s12 + 84*s13)*s23 + 56*s23^2)))*
         Log(s13/(s12 + s13 + s23)))/(9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 +
         9*p3q^3*s23^2 + p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
         p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
       ((p2q^4*(28*s12*s13^2 + 28*s13^3 + (-14*s12^2 - 14*s12*s13 + 28*s13^2)*
             s23 - 14*s12*s23^2) + p1q*p2q^3*(28*s12*s13^2 + 28*s13^3 +
            (-28*s12^2 - 70*s12*s13 - 14*s13^2)*s23 + (-28*s12 - 42*s13)*
             s23^2) + p3q^4*(28*s12^3 + 28*s12^2*s13 +
            (28*s12^2 - 14*s12*s13 - 14*s13^2)*s23 - 14*s13*s23^2) +
          p1q^2*p2q^2*((-28*s12^2 - 84*s12*s13 - 56*s13^2)*s23 +
            (-14*s12 - 42*s13)*s23^2 + 14*s23^3) + p1q^3*p2q*
           ((28*s12 + 28*s13)*s23^2 + 28*s23^3) +
          p3q^3*(p2q*(56*s12^3 - 56*s12*s13^2 + (42*s12^2 - 112*s12*s13 -
                42*s13^2)*s23 + (-14*s12 - 42*s13)*s23^2) +
            p1q*(28*s12^3 + 28*s12^2*s13 + (-14*s12^2 - 70*s12*s13 -
                28*s13^2)*s23 + (-42*s12 - 28*s13)*s23^2)) +
          p3q^2*(p2q^2*(28*s12^3 - 84*s12^2*s13 - 84*s12*s13^2 + 28*s13^3 +
              (-14*s12^2 - 196*s12*s13 - 14*s13^2)*s23 + (-42*s12 - 42*s13)*
               s23^2) + p1q^2*((-56*s12^2 - 84*s12*s13 - 28*s13^2)*s23 +
              (-42*s12 - 14*s13)*s23^2 + 14*s23^3) +
            p1q*p2q*(28*s12^3 - 28*s12^2*s13 - 56*s12*s13^2 +
              (-56*s12^2 - 210*s12*s13 - 70*s13^2)*s23 + (-56*s12 - 42*s13)*
               s23^2 + 28*s23^3)) + p3q*(p2q^3*(-56*s12^2*s13 + 56*s13^3 +
              (-42*s12^2 - 112*s12*s13 + 42*s13^2)*s23 + (-42*s12 - 14*s13)*
               s23^2) + p1q*p2q^2*(-56*s12^2*s13 - 28*s12*s13^2 + 28*s13^3 +
              (-70*s12^2 - 210*s12*s13 - 56*s13^2)*s23 + (-42*s12 - 56*s13)*
               s23^2 + 28*s23^3) + p1q^3*((28*s12 + 28*s13)*s23^2 +
              28*s23^3) + p1q^2*p2q*((-28*s12^2 - 56*s12*s13 - 28*s13^2)*
               s23 + (56*s12 + 56*s13)*s23^2 + 84*s23^3)))*
         Log(s23/(s12 + s13 + s23)))/(p2q^4*(9*s12 + 9*s13)*s23^2 +
         p3q^4*(9*s12 + 9*s13)*s23^2 - 9*p1q^2*p2q^2*s23^3 +
         p1q*p2q^3*((9*s12 + 9*s13)*s23^2 - 9*s23^3) +
         p3q^2*(p2q^2*(54*s12 + 54*s13)*s23^2 - 9*p1q^2*s23^3 +
           p1q*p2q*((27*s12 + 27*s13)*s23^2 - 27*s23^3)) +
         p3q*(p2q^3*(36*s12 + 36*s13)*s23^2 - 18*p1q^2*p2q*s23^3 +
           p1q*p2q^2*((27*s12 + 27*s13)*s23^2 - 27*s23^3)) +
         p3q^3*(p2q*(36*s12 + 36*s13)*s23^2 + p1q*((9*s12 + 9*s13)*s23^2 -
             9*s23^3)))) + Log(s13/(s12 + s13 + s23))*
      ((p3q^2*(-7*s12^3 - 21*s12^2*s13 + (-7*s12^2 - 14*s12*s13)*s23) +
         p2q^2*(-14*s12^3 - 21*s12^2*s13 - 7*s13^3 +
           (-14*s12^2 - 7*s12*s13 - 7*s13^2)*s23) +
         p1q*p2q*(-7*s12^2*s13 + 7*s12*s13^2 + (7*s12^2 + 14*s12*s13 +
             14*s13^2)*s23 + (7*s12 + 14*s13)*s23^2) +
         p1q^2*((-7*s12^2 - 7*s12*s13)*s23 + (-14*s12 - 7*s13)*s23^2 -
           7*s23^3) + p3q*(p2q*(-21*s12^3 - 35*s12^2*s13 + 14*s12*s13^2 +
             (-21*s12^2 - 14*s12*s13)*s23) + p1q*(7*s12^3 - 7*s12^2*s13 +
             21*s12^2*s23 + 14*s12*s23^2)))/
        (p1q*p2q*(9*s12^2*s23 + 9*s12*s23^2) +
         p2q^2*(9*s12^2*s23 + 9*s12*s23^2) + p3q^2*(9*s12^2*s23 +
           9*s12*s23^2) + p3q*(p1q*(9*s12^2*s23 + 9*s12*s23^2) +
           p2q*(18*s12^2*s23 + 18*s12*s23^2))) +
       ((p3q^3*(28*s12^5 + 28*s12^4*s13 + (21*s12^4 + 28*s12^3*s13 -
              21*s12^2*s13^2)*s23 + (7*s12^3 + 21*s12^2*s13)*s23^2) +
          p2q^3*(28*s12^3*s13^2 + 28*s12^2*s13^3 +
            (-14*s12^4 - 7*s12^2*s13^2 - 7*s13^4)*s23 +
            (7*s12*s13^2 - 7*s13^3)*s23^2) + p1q*p2q^2*(28*s12^3*s13^2 +
            28*s12^2*s13^3 + (-28*s12^4 - 42*s12^2*s13^2 + 14*s12*s13^3)*
             s23 + (-14*s12^2*s13 + 21*s12*s13^2 + 21*s13^3)*s23^2 +
            (-14*s12*s13 + 21*s13^2)*s23^3) + p1q^2*p2q*
           ((-28*s12^4 - 28*s12^3*s13 - 56*s12^2*s13^2)*s23 +
            (-28*s12^2*s13 - 28*s12*s13^2)*s23^2 + (21*s12^2 - 42*s12*s13 -
              21*s13^2)*s23^3 + (7*s12 - 21*s13)*s23^4) +
          p1q^3*((28*s12^3 + 28*s12^2*s13)*s23^2 + (42*s12^2 + 14*s12*s13)*
             s23^3 + (21*s12 + 7*s13)*s23^4 + 7*s23^5) +
          p3q^2*(p2q*(28*s12^5 - 28*s12^4*s13 - 56*s12^3*s13^2 +
              (-7*s12^4 - 14*s12^3*s13 - 77*s12^2*s13^2 + 14*s12*s13^3)*s23 +
              (7*s12^3 + 35*s12^2*s13 + 14*s12*s13^2)*s23^2) +
            p1q*(28*s12^5 + 28*s12^4*s13 + (-28*s12^4 + 14*s12^3*s13 -
                42*s12^2*s13^2)*s23 + (-35*s12^3 + 35*s12^2*s13)*s23^2 -
              7*s12^2*s23^3)) + p3q*(p2q^2*(-56*s12^4*s13 - 28*s12^3*s13^2 +
              28*s12^2*s13^3 + (-42*s12^4 - 42*s12^3*s13 - 63*s12^2*s13^2 +
                14*s12*s13^3 - 7*s13^4)*s23 + (14*s12^2*s13 + 21*s12*s13^2 -
                7*s13^3)*s23^2) + p1q*p2q*(-56*s12^4*s13 - 56*s12^3*s13^2 +
              (-112*s12^4 - 98*s12^3*s13 - 140*s12^2*s13^2 + 14*s12*s13^3)*
               s23 + (-84*s12^3 - 28*s12^2*s13 + 14*s12*s13^2 + 14*s13^3)*s23^
                2 + (-28*s12^2 - 14*s12*s13 + 14*s13^2)*s23^3) +
            p1q^2*((-56*s12^4 - 28*s12^3*s13 - 28*s12^2*s13^2)*s23 +
              (-42*s12^3 - 14*s12*s13^2)*s23^2 + (-7*s12^2 - 28*s12*s13 -
                7*s13^2)*s23^3 + (-7*s12 - 7*s13)*s23^4)))*
         Log(s23/(s12 + s13 + s23)))/(p2q^3*(9*s12^3 + 9*s12^2*s13)*s23^2 +
         p3q^3*(9*s12^3 + 9*s12^2*s13)*s23^2 - 9*p1q^2*p2q*s12^2*s23^3 +
         p1q*p2q^2*((9*s12^3 + 9*s12^2*s13)*s23^2 - 9*s12^2*s23^3) +
         p3q*(p2q^2*(27*s12^3 + 27*s12^2*s13)*s23^2 - 9*p1q^2*s12^2*s23^3 +
           p1q*p2q*((18*s12^3 + 18*s12^2*s13)*s23^2 - 18*s12^2*s23^3)) +
         p3q^2*(p2q*(27*s12^3 + 27*s12^2*s13)*s23^2 +
           p1q*((9*s12^3 + 9*s12^2*s13)*s23^2 - 9*s12^2*s23^3))) +
       ((p3q^2*(-21*s12^3 + 7*s12^2*s13 - 7*s12^2*s23) +
          p2q^2*(14*s12^2*s13 - 7*s12*s13^2 + 7*s13^3 +
            (14*s12^2 - 14*s12*s13 + 7*s13^2)*s23) +
          p1q*p2q*(14*s12^2*s13 - 14*s12*s13^2 + (28*s12^2 - 14*s12*s13 -
              14*s13^2)*s23 + (14*s12 - 14*s13)*s23^2) +
          p1q^2*((14*s12^2 + 14*s12*s13)*s23 + (21*s12 + 7*s13)*s23^2 +
            7*s23^3) + p3q*(p1q*(-14*s12^3 + 14*s12^2*s13) +
            p2q*(-14*s12^3 + 28*s12^2*s13 - 14*s12*s13^2 + (14*s12^2 -
                14*s12*s13)*s23)))*Log((s12 + s23)/(s12 + s13 + s23)))/
        (9*p1q*p2q*s12^2*s23 + 9*p2q^2*s12^2*s23 + 9*p3q^2*s12^2*s23 +
         p3q*(9*p1q*s12^2*s23 + 18*p2q*s12^2*s23))) +
     Log(s12/(s12 + s13 + s23))*
      ((p3q^2*(-2*s12^3 - 6*s12*s13^2 - 4*s13^3 + (-2*s12^2 - 2*s12*s13 -
             4*s13^2)*s23) + p2q^2*(-6*s12*s13^2 - 2*s13^3 +
           (-4*s12*s13 - 2*s13^2)*s23) + p1q*p2q*(-2*s12*s13^2 + 2*s13^3 +
           6*s13^2*s23 + 4*s13*s23^2) + p1q^2*((-2*s12*s13 - 2*s13^2)*s23 +
           (-2*s12 - 4*s13)*s23^2 - 2*s23^3) +
         p3q*(p2q*(4*s12^2*s13 - 10*s12*s13^2 - 6*s13^3 +
             (-4*s12*s13 - 6*s13^2)*s23) + p1q*(2*s12^2*s13 - 2*s12*s13^2 +
             (4*s12^2 + 4*s12*s13 + 2*s13^2)*s23 + (4*s12 + 2*s13)*s23^2)))/
        (p1q*p2q*(9*s13^2*s23 + 9*s13*s23^2) +
         p2q^2*(9*s13^2*s23 + 9*s13*s23^2) + p3q^2*(9*s13^2*s23 +
           9*s13*s23^2) + p3q*(p1q*(9*s13^2*s23 + 9*s13*s23^2) +
           p2q*(18*s13^2*s23 + 18*s13*s23^2))) +
       ((p3q^3*(8*s12^3*s13^2 + 8*s12^2*s13^3 + (-2*s12^4 - 2*s12^2*s13^2 -
              4*s13^4)*s23 + (-2*s12^3 + 2*s12^2*s13)*s23^2) +
          p2q^3*(8*s12*s13^4 + 8*s13^5 + (-6*s12^2*s13^2 + 8*s12*s13^3 +
              6*s13^4)*s23 + (6*s12*s13^2 + 2*s13^3)*s23^2) +
          p1q*p2q^2*(8*s12*s13^4 + 8*s13^5 + (-12*s12^2*s13^2 + 4*s12*s13^3 -
              8*s13^4)*s23 + (10*s12*s13^2 - 10*s13^3)*s23^2 -
            2*s13^2*s23^3) + p1q^2*p2q*((-8*s12^2*s13^2 - 8*s12*s13^3 -
              16*s13^4)*s23 + (-4*s12^2*s13 - 12*s13^3)*s23^2 +
            (-2*s12^2 - 8*s12*s13 - 2*s13^2)*s23^3 + (-2*s12 - 2*s13)*
             s23^4) + p1q^3*((8*s12*s13^2 + 8*s13^3)*s23^2 +
            (4*s12*s13 + 12*s13^2)*s23^3 + (2*s12 + 6*s13)*s23^4 + 2*s23^5) +
          p3q^2*(p2q*(8*s12^3*s13^2 - 8*s12^2*s13^3 - 16*s12*s13^4 +
              (-2*s12^4 + 4*s12^3*s13 - 18*s12^2*s13^2 - 12*s12*s13^3 -
                12*s13^4)*s23 + (-2*s12^3 + 6*s12^2*s13 + 4*s12*s13^2)*s23^
                2) + p1q*(8*s12^3*s13^2 + 8*s12^2*s13^3 + (4*s12^3*s13 -
                12*s12^2*s13^2 - 8*s13^4)*s23 + (6*s12^3 + 6*s12^2*s13 -
                4*s12*s13^2)*s23^2 + (6*s12^2 - 4*s12*s13)*s23^3)) +
          p3q*(p2q^2*(-16*s12^2*s13^3 - 8*s12*s13^4 + 8*s13^5 +
              (4*s12^3*s13 - 22*s12^2*s13^2 - 4*s12*s13^3 - 2*s13^4)*s23 +
              (4*s12^2*s13 + 10*s12*s13^2 + 2*s13^3)*s23^2) +
            p1q*p2q*(-16*s12^2*s13^3 - 16*s12*s13^4 + (4*s12^3*s13 -
                40*s12^2*s13^2 - 28*s12*s13^3 - 32*s13^4)*s23 +
              (4*s12^3 + 4*s12^2*s13 - 8*s12*s13^2 - 24*s13^3)*s23^2 +
              (4*s12^2 - 4*s12*s13 - 8*s13^2)*s23^3) +
            p1q^2*((-16*s12^2*s13^2 - 8*s12*s13^3 - 8*s13^4)*s23 +
              (-8*s12^2*s13 - 8*s12*s13^2)*s23^2 + (-6*s12^2 - 12*s12*s13 +
                6*s13^2)*s23^3 + (-6*s12 + 2*s13)*s23^4)))*
         Log(s23/(s12 + s13 + s23)))/(p2q^3*(9*s12*s13^2 + 9*s13^3)*s23^2 +
         p3q^3*(9*s12*s13^2 + 9*s13^3)*s23^2 - 9*p1q^2*p2q*s13^2*s23^3 +
         p1q*p2q^2*((9*s12*s13^2 + 9*s13^3)*s23^2 - 9*s13^2*s23^3) +
         p3q*(p2q^2*(27*s12*s13^2 + 27*s13^3)*s23^2 - 9*p1q^2*s13^2*s23^3 +
           p1q*p2q*((18*s12*s13^2 + 18*s13^3)*s23^2 - 18*s13^2*s23^3)) +
         p3q^2*(p2q*(27*s12*s13^2 + 27*s13^3)*s23^2 +
           p1q*((9*s12*s13^2 + 9*s13^3)*s23^2 - 9*s13^2*s23^3))) +
       ((p1q*p2q*(4*s12*s13^2 - 4*s13^3) + p2q^2*(2*s12*s13^2 - 6*s13^3 -
            2*s13^2*s23) + p3q^2*(2*s12^3 - 2*s12^2*s13 + 4*s12*s13^2 +
            (2*s12^2 - 4*s12*s13 + 4*s13^2)*s23) +
          p1q^2*((4*s12*s13 + 4*s13^2)*s23 + (2*s12 + 6*s13)*s23^2 +
            2*s23^3) + p3q*(p2q*(-4*s12^2*s13 + 8*s12*s13^2 - 4*s13^3 +
              (-4*s12*s13 + 4*s13^2)*s23) + p1q*(-4*s12^2*s13 + 4*s12*s13^2 +
              (-4*s12^2 - 4*s12*s13 + 8*s13^2)*s23 + (-4*s12 + 4*s13)*s23^
                2)))*Log((s13 + s23)/(s12 + s13 + s23)))/
        (9*p1q*p2q*s13^2*s23 + 9*p2q^2*s13^2*s23 + 9*p3q^2*s13^2*s23 +
         p3q*(9*p1q*s13^2*s23 + 18*p2q*s13^2*s23))) +
     ((p2q^4*(40*s12*s13^2 + 40*s13^3 + (-20*s12^2 - 20*s12*s13 + 40*s13^2)*
           s23 - 20*s12*s23^2) + p1q*p2q^3*(40*s12*s13^2 + 40*s13^3 +
          (-40*s12^2 - 100*s12*s13 - 20*s13^2)*s23 + (-40*s12 - 60*s13)*
           s23^2) + p3q^4*(40*s12^3 + 40*s12^2*s13 +
          (40*s12^2 - 20*s12*s13 - 20*s13^2)*s23 - 20*s13*s23^2) +
        p1q^2*p2q^2*((-40*s12^2 - 120*s12*s13 - 80*s13^2)*s23 +
          (-20*s12 - 60*s13)*s23^2 + 20*s23^3) +
        p1q^3*p2q*((40*s12 + 40*s13)*s23^2 + 40*s23^3) +
        p3q^3*(p2q*(80*s12^3 - 80*s12*s13^2 + (60*s12^2 - 160*s12*s13 -
              60*s13^2)*s23 + (-20*s12 - 60*s13)*s23^2) +
          p1q*(40*s12^3 + 40*s12^2*s13 + (-20*s12^2 - 100*s12*s13 - 40*s13^2)*
             s23 + (-60*s12 - 40*s13)*s23^2)) +
        p3q^2*(p2q^2*(40*s12^3 - 120*s12^2*s13 - 120*s12*s13^2 + 40*s13^3 +
            (-20*s12^2 - 280*s12*s13 - 20*s13^2)*s23 + (-60*s12 - 60*s13)*
             s23^2) + p1q^2*((-80*s12^2 - 120*s12*s13 - 40*s13^2)*s23 +
            (-60*s12 - 20*s13)*s23^2 + 20*s23^3) +
          p1q*p2q*(40*s12^3 - 40*s12^2*s13 - 80*s12*s13^2 +
            (-80*s12^2 - 300*s12*s13 - 100*s13^2)*s23 + (-80*s12 - 60*s13)*
             s23^2 + 40*s23^3)) + p3q*(p2q^3*(-80*s12^2*s13 + 80*s13^3 +
            (-60*s12^2 - 160*s12*s13 + 60*s13^2)*s23 + (-60*s12 - 20*s13)*
             s23^2) + p1q*p2q^2*(-80*s12^2*s13 - 40*s12*s13^2 + 40*s13^3 +
            (-100*s12^2 - 300*s12*s13 - 80*s13^2)*s23 + (-60*s12 - 80*s13)*
             s23^2 + 40*s23^3) + p1q^3*((40*s12 + 40*s13)*s23^2 + 40*s23^3) +
          p1q^2*p2q*((-40*s12^2 - 80*s12*s13 - 40*s13^2)*s23 +
            (80*s12 + 80*s13)*s23^2 + 120*s23^3)))*
       PolyLog(2, p1q/(p1q + p2q + p3q)))/(p2q^4*(9*s12 + 9*s13)*s23^2 +
       p3q^4*(9*s12 + 9*s13)*s23^2 - 9*p1q^2*p2q^2*s23^3 +
       p1q*p2q^3*((9*s12 + 9*s13)*s23^2 - 9*s23^3) +
       p3q^2*(p2q^2*(54*s12 + 54*s13)*s23^2 - 9*p1q^2*s23^3 +
         p1q*p2q*((27*s12 + 27*s13)*s23^2 - 27*s23^3)) +
       p3q*(p2q^3*(36*s12 + 36*s13)*s23^2 - 18*p1q^2*p2q*s23^3 +
         p1q*p2q^2*((27*s12 + 27*s13)*s23^2 - 27*s23^3)) +
       p3q^3*(p2q*(36*s12 + 36*s13)*s23^2 + p1q*((9*s12 + 9*s13)*s23^2 -
           9*s23^3))) + ((p1q*p2q*(4*s12*s13^2 - 4*s13^3) +
        p2q^2*(2*s12*s13^2 - 6*s13^3 - 2*s13^2*s23) +
        p3q^2*(2*s12^3 - 2*s12^2*s13 + 4*s12*s13^2 +
          (2*s12^2 - 4*s12*s13 + 4*s13^2)*s23) +
        p1q^2*((4*s12*s13 + 4*s13^2)*s23 + (2*s12 + 6*s13)*s23^2 + 2*s23^3) +
        p3q*(p2q*(-4*s12^2*s13 + 8*s12*s13^2 - 4*s13^3 +
            (-4*s12*s13 + 4*s13^2)*s23) + p1q*(-4*s12^2*s13 + 4*s12*s13^2 +
            (-4*s12^2 - 4*s12*s13 + 8*s13^2)*s23 + (-4*s12 + 4*s13)*s23^2)))*
       PolyLog(2, s12/(s12 + s13 + s23)))/(9*p1q*p2q*s13^2*s23 +
       9*p2q^2*s13^2*s23 + 9*p3q^2*s13^2*s23 +
       p3q*(9*p1q*s13^2*s23 + 18*p2q*s13^2*s23)) +
     ((p3q^2*(-21*s12^3 + 7*s12^2*s13 - 7*s12^2*s23) +
        p2q^2*(14*s12^2*s13 - 7*s12*s13^2 + 7*s13^3 +
          (14*s12^2 - 14*s12*s13 + 7*s13^2)*s23) +
        p1q*p2q*(14*s12^2*s13 - 14*s12*s13^2 + (28*s12^2 - 14*s12*s13 -
            14*s13^2)*s23 + (14*s12 - 14*s13)*s23^2) +
        p1q^2*((14*s12^2 + 14*s12*s13)*s23 + (21*s12 + 7*s13)*s23^2 +
          7*s23^3) + p3q*(p1q*(-14*s12^3 + 14*s12^2*s13) +
          p2q*(-14*s12^3 + 28*s12^2*s13 - 14*s12*s13^2 +
            (14*s12^2 - 14*s12*s13)*s23)))*PolyLog(2, s13/(s12 + s13 + s23)))/
      (9*p1q*p2q*s12^2*s23 + 9*p2q^2*s12^2*s23 + 9*p3q^2*s12^2*s23 +
       p3q*(9*p1q*s12^2*s23 + 18*p2q*s12^2*s23)) +
     ((p3q^3*(-40*s12^5*s13^2 - 40*s12^4*s13^3 + (2*s12^6 - 19*s12^4*s13^2 -
            30*s12^3*s13^3 + 27*s12^2*s13^4)*s23 +
          (2*s12^5 - 2*s12^4*s13 - 7*s12^3*s13^2 - 23*s12^2*s13^3)*s23^2) +
        p2q^3*(-40*s12^3*s13^4 - 40*s12^2*s13^5 +
          (22*s12^4*s13^2 - 10*s12^3*s13^3 + s12^2*s13^4 + 7*s13^6)*s23 +
          (-8*s12^3*s13^2 - 2*s12^2*s13^3 - 7*s12*s13^4 + 7*s13^5)*s23^2) +
        p1q*p2q^2*(-40*s12^3*s13^4 - 40*s12^2*s13^5 +
          (44*s12^4*s13^2 - 6*s12^3*s13^3 + 56*s12^2*s13^4 - 14*s12*s13^5)*
           s23 + (-14*s12^3*s13^2 + 26*s12^2*s13^3 - 21*s12*s13^4 - 21*s13^5)*
           s23^2 + (2*s12^2*s13^2 + 14*s12*s13^3 - 21*s13^4)*s23^3) +
        p1q^2*p2q*((40*s12^4*s13^2 + 40*s12^3*s13^3 + 80*s12^2*s13^4)*s23 +
          (4*s12^4*s13 - 2*s12^3*s13^2 + 42*s12^2*s13^3 + 28*s12*s13^4)*
           s23^2 + (2*s12^4 + 8*s12^3*s13 - 21*s12^2*s13^2 + 42*s12*s13^3 +
            21*s13^4)*s23^3 + (2*s12^3 + 2*s12^2*s13 - 7*s12*s13^2 +
            21*s13^3)*s23^4) + p1q^3*((-40*s12^3*s13^2 - 40*s12^2*s13^3)*
           s23^2 + (-4*s12^3*s13 - 58*s12^2*s13^2 - 14*s12*s13^3)*s23^3 +
          (-2*s12^3 - 6*s12^2*s13 - 21*s12*s13^2 - 7*s13^3)*s23^4 +
          (-2*s12^2 - 7*s13^2)*s23^5) +
        p3q^2*(p2q*(-40*s12^5*s13^2 + 40*s12^4*s13^3 + 80*s12^3*s13^4 +
            (2*s12^6 - 4*s12^5*s13 + 31*s12^4*s13^2 + 28*s12^3*s13^3 +
              97*s12^2*s13^4 - 14*s12*s13^5)*s23 + (2*s12^5 - 6*s12^4*s13 -
              13*s12^3*s13^2 - 39*s12^2*s13^3 - 14*s12*s13^4)*s23^2) +
          p1q*(-40*s12^5*s13^2 - 40*s12^4*s13^3 +
            (-4*s12^5*s13 + 46*s12^4*s13^2 - 16*s12^3*s13^3 + 54*s12^2*s13^4)*
             s23 + (-6*s12^5 - 6*s12^4*s13 + 41*s12^3*s13^2 - 39*s12^2*s13^3)*
             s23^2 + (-6*s12^4 + 4*s12^3*s13 + 7*s12^2*s13^2)*s23^3)) +
        p3q*(p2q^2*(80*s12^4*s13^3 + 40*s12^3*s13^4 - 40*s12^2*s13^5 +
            (-4*s12^5*s13 + 72*s12^4*s13^2 + 48*s12^3*s13^3 +
              71*s12^2*s13^4 - 14*s12*s13^5 + 7*s13^6)*s23 +
            (-4*s12^4*s13 - 14*s12^3*s13^2 - 18*s12^2*s13^3 - 21*s12*s13^4 +
              7*s13^5)*s23^2) + p1q*p2q*(80*s12^4*s13^3 + 80*s12^3*s13^4 +
            (-4*s12^5*s13 + 170*s12^4*s13^2 + 138*s12^3*s13^3 +
              190*s12^2*s13^4 - 14*s12*s13^5)*s23 + (-4*s12^5 - 4*s12^4*s13 +
              98*s12^3*s13^2 + 58*s12^2*s13^3 - 14*s12*s13^4 - 14*s13^5)*
             s23^2 + (-4*s12^4 + 4*s12^3*s13 + 40*s12^2*s13^2 +
              14*s12*s13^3 - 14*s13^4)*s23^3) +
          p1q^2*((80*s12^4*s13^2 + 40*s12^3*s13^3 + 40*s12^2*s13^4)*s23 +
            (8*s12^4*s13 + 52*s12^3*s13^2 - 2*s12^2*s13^3 + 14*s12*s13^4)*
             s23^2 + (6*s12^4 + 12*s12^3*s13 - s12^2*s13^2 + 28*s12*s13^3 +
              7*s13^4)*s23^3 + (6*s12^3 - 2*s12^2*s13 + 7*s12*s13^2 +
              7*s13^3)*s23^4)))*PolyLog(2, s23/(s12 + s13 + s23)))/
      (p2q^3*(9*s12^3*s13^2 + 9*s12^2*s13^3)*s23^2 +
       p3q^3*(9*s12^3*s13^2 + 9*s12^2*s13^3)*s23^2 - 9*p1q^2*p2q*s12^2*s13^2*
        s23^3 + p1q*p2q^2*((9*s12^3*s13^2 + 9*s12^2*s13^3)*s23^2 -
         9*s12^2*s13^2*s23^3) + p3q*(p2q^2*(27*s12^3*s13^2 + 27*s12^2*s13^3)*
          s23^2 - 9*p1q^2*s12^2*s13^2*s23^3 +
         p1q*p2q*((18*s12^3*s13^2 + 18*s12^2*s13^3)*s23^2 -
           18*s12^2*s13^2*s23^3)) +
       p3q^2*(p2q*(27*s12^3*s13^2 + 27*s12^2*s13^3)*s23^2 +
         p1q*((9*s12^3*s13^2 + 9*s12^2*s13^3)*s23^2 - 9*s12^2*s13^2*s23^3))));

l P1AvgExp = ((p3q^3*(32*s12^2 + (16*s12 - 16*s13)*s23) +
       p2q^3*(32*s13^2 + (-16*s12 + 16*s13)*s23) +
       p1q^2*p2q*((-32*s12 - 32*s13)*s23 - 32*s23^2) +
       p1q*p2q^2*(32*s13^2 - 32*s12*s23 - 16*s23^2) +
       p3q*(p2q^2*(-64*s12*s13 + 32*s13^2 + (-48*s12 - 16*s13)*s23) +
         p1q*p2q*(-64*s12*s13 + (-96*s12 - 96*s13)*s23 - 64*s23^2) +
         p1q^2*((-32*s12 - 32*s13)*s23 - 32*s23^2)) +
       p3q^2*(p2q*(32*s12^2 - 64*s12*s13 + (-16*s12 - 48*s13)*s23) +
         p1q*(32*s12^2 - 32*s13*s23 - 16*s23^2)))/ep^2/
      ((9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 + 9*p3q^3*s23^2 +
        p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) + p3q*(18*p1q*p2q*s23^2 +
          27*p2q^2*s23^2))) +
     (p2q^3*(-186*s12*s13^2 - 186*s13^3 + (56*s12^2 - 84*s12*s13 - 130*s13^2)*
          s23) + p3q^3*(-186*s12^3 - 186*s12^2*s13 +
         (-130*s12^2 - 84*s12*s13 + 56*s13^2)*s23) +
       p1q*p2q^2*(-176*s12*s13^2 - 176*s13^3 + (186*s12^2 + 186*s12*s13 +
           20*s13^2)*s23 + (130*s12 + 140*s13)*s23^2) +
       p1q^2*p2q*((176*s12^2 + 352*s12*s13 + 176*s13^2)*s23 +
         (166*s12 + 166*s13)*s23^2 - 10*s23^3) +
       p3q^2*(p2q*(-186*s12^3 + 186*s12^2*s13 + 372*s12*s13^2 +
           (-18*s12^2 + 120*s12*s13 + 168*s13^2)*s23) +
         p1q*(-176*s12^3 - 176*s12^2*s13 + (20*s12^2 + 186*s12*s13 +
             186*s13^2)*s23 + (140*s12 + 130*s13)*s23^2)) +
       p3q*(p2q^2*(372*s12^2*s13 + 186*s12*s13^2 - 186*s13^3 +
           (168*s12^2 + 120*s12*s13 - 18*s13^2)*s23) +
         p1q*p2q*(352*s12^2*s13 + 352*s12*s13^2 + (558*s12^2 + 1076*s12*s13 +
             558*s13^2)*s23 + (446*s12 + 446*s13)*s23^2) +
         p1q^2*((176*s12^2 + 352*s12*s13 + 176*s13^2)*s23 +
           (166*s12 + 166*s13)*s23^2 - 10*s23^3)))/
      (p1q*p2q^2*(9*s12 + 9*s13)*s23^2 + p2q^3*(9*s12 + 9*s13)*s23^2 +
       p3q^3*(9*s12 + 9*s13)*s23^2 + p3q^2*(p1q*(9*s12 + 9*s13)*s23^2 +
         p2q*(27*s12 + 27*s13)*s23^2) +
       p3q*(p1q*p2q*(18*s12 + 18*s13)*s23^2 + p2q^2*(27*s12 + 27*s13)*
          s23^2)) + (Pi^2*(p3q^4*(32*s12^5*s13^2 + 32*s12^4*s13^3 +
          (-2*s12^6 + 15*s12^4*s13^2 + 30*s12^3*s13^3 - 23*s12^2*s13^4)*s23 +
          (-2*s12^5 + 2*s12^4*s13 + 7*s12^3*s13^2 + 23*s12^2*s13^3)*s23^2) +
        p2q^4*(32*s12^3*s13^4 + 32*s12^2*s13^5 +
          (-18*s12^4*s13^2 + 10*s12^3*s13^3 - 5*s12^2*s13^4 - 7*s13^6)*s23 +
          (8*s12^3*s13^2 + 2*s12^2*s13^3 + 7*s12*s13^4 - 7*s13^5)*s23^2) +
        p1q*p2q^3*(32*s12^3*s13^4 + 32*s12^2*s13^5 +
          (-36*s12^4*s13^2 + 14*s12^3*s13^3 - 48*s12^2*s13^4 + 14*s12*s13^5)*
           s23 + (14*s12^3*s13^2 - 18*s12^2*s13^3 + 21*s12*s13^4 + 21*s13^5)*
           s23^2 + (-2*s12^2*s13^2 - 14*s12*s13^3 + 21*s13^4)*s23^3) +
        p1q^2*p2q^2*((-32*s12^4*s13^2 - 24*s12^3*s13^3 - 64*s12^2*s13^4)*
           s23 + (-4*s12^4*s13 + 2*s12^3*s13^2 - 34*s12^2*s13^3 -
            28*s12*s13^4)*s23^2 + (-2*s12^4 - 8*s12^3*s13 + 17*s12^2*s13^2 -
            42*s12*s13^3 - 21*s13^4)*s23^3 + (-2*s12^3 - 2*s12^2*s13 +
            7*s12*s13^2 - 21*s13^3)*s23^4) + p1q^3*p2q*
         ((32*s12^3*s13^2 + 32*s12^2*s13^3)*s23^2 +
          (4*s12^3*s13 + 50*s12^2*s13^2 + 14*s12*s13^3)*s23^3 +
          (2*s12^3 + 6*s12^2*s13 + 21*s12*s13^2 + 7*s13^3)*s23^4 +
          (2*s12^2 + 7*s13^2)*s23^5) +
        p3q^3*(p2q*(64*s12^5*s13^2 - 64*s12^3*s13^4 +
            (-4*s12^6 + 4*s12^5*s13 - 12*s12^4*s13^2 + 18*s12^3*s13^3 -
              108*s12^2*s13^4 + 14*s12*s13^5)*s23 + (-4*s12^5 + 8*s12^4*s13 +
              20*s12^3*s13^2 + 62*s12^2*s13^3 + 14*s12*s13^4)*s23^2) +
          p1q*(32*s12^5*s13^2 + 32*s12^4*s13^3 +
            (4*s12^5*s13 - 38*s12^4*s13^2 + 24*s12^3*s13^3 - 46*s12^2*s13^4)*
             s23 + (6*s12^5 + 6*s12^4*s13 - 33*s12^3*s13^2 + 39*s12^2*s13^3)*
             s23^2 + (6*s12^4 - 4*s12^3*s13 - 7*s12^2*s13^2)*s23^3)) +
        p3q^2*(p2q^2*(32*s12^5*s13^2 - 96*s12^4*s13^3 - 96*s12^3*s13^4 +
            32*s12^2*s13^5 + (-2*s12^6 + 8*s12^5*s13 - 87*s12^4*s13^2 -
              44*s12^3*s13^3 - 152*s12^2*s13^4 + 28*s12*s13^5 - 7*s13^6)*
             s23 + (-2*s12^5 + 10*s12^4*s13 + 27*s12^3*s13^2 +
              57*s12^2*s13^3 + 35*s12*s13^4 - 7*s13^5)*s23^2) +
          p1q*p2q*(32*s12^5*s13^2 - 32*s12^4*s13^3 - 64*s12^3*s13^4 +
            (8*s12^5*s13 - 184*s12^4*s13^2 - 82*s12^3*s13^3 -
              212*s12^2*s13^4 + 14*s12*s13^5)*s23 +
            (10*s12^5 + 10*s12^4*s13 - 123*s12^3*s13^2 - 11*s12^2*s13^3 +
              14*s12*s13^4 + 14*s13^5)*s23^2 + (10*s12^4 - 8*s12^3*s13 -
              47*s12^2*s13^2 - 14*s12*s13^3 + 14*s13^4)*s23^3) +
          p1q^2*((-64*s12^4*s13^2 - 24*s12^3*s13^3 - 32*s12^2*s13^4)*s23 +
            (-8*s12^4*s13 - 44*s12^3*s13^2 + 2*s12^2*s13^3 - 14*s12*s13^4)*
             s23^2 + (-6*s12^4 - 12*s12^3*s13 - 3*s12^2*s13^2 -
              28*s12*s13^3 - 7*s13^4)*s23^3 + (-6*s12^3 + 2*s12^2*s13 -
              7*s12*s13^2 - 7*s13^3)*s23^4)) +
        p3q*(p2q^3*(-64*s12^4*s13^3 + 64*s12^2*s13^5 +
            (4*s12^5*s13 - 78*s12^4*s13^2 - 22*s12^3*s13^3 - 72*s12^2*s13^4 +
              14*s12*s13^5 - 14*s13^6)*s23 + (4*s12^4*s13 + 22*s12^3*s13^2 +
              20*s12^2*s13^3 + 28*s12*s13^4 - 14*s13^5)*s23^2) +
          p1q*p2q^2*(-64*s12^4*s13^3 - 32*s12^3*s13^4 + 32*s12^2*s13^5 +
            (4*s12^5*s13 - 182*s12^4*s13^2 - 92*s12^3*s13^3 -
              214*s12^2*s13^4 + 28*s12*s13^5)*s23 + (4*s12^5 + 4*s12^4*s13 -
              76*s12^3*s13^2 - 68*s12^2*s13^3 + 35*s12*s13^4 + 35*s13^5)*
             s23^2 + (4*s12^4 - 4*s12^3*s13 - 42*s12^2*s13^2 - 28*s12*s13^3 +
              35*s13^4)*s23^3) + p1q^2*p2q*
           ((-104*s12^4*s13^2 - 64*s12^3*s13^3 - 104*s12^2*s13^4)*s23 +
            (-12*s12^4*s13 - 58*s12^3*s13^2 - 48*s12^2*s13^3 - 42*s12*s13^4)*
             s23^2 + (-8*s12^4 - 20*s12^3*s13 + 6*s12^2*s13^2 -
              70*s12*s13^3 - 28*s13^4)*s23^3 + (-8*s12^3 - 28*s13^3)*s23^4) +
          p1q^3*((32*s12^3*s13^2 + 32*s12^2*s13^3)*s23^2 +
            (4*s12^3*s13 + 50*s12^2*s13^2 + 14*s12*s13^3)*s23^3 +
            (2*s12^3 + 6*s12^2*s13 + 21*s12*s13^2 + 7*s13^3)*s23^4 +
            (2*s12^2 + 7*s13^2)*s23^5))))/
      (p2q^4*(54*s12^3*s13^2 + 54*s12^2*s13^3)*s23^2 +
       p3q^4*(54*s12^3*s13^2 + 54*s12^2*s13^3)*s23^2 -
       54*p1q^2*p2q^2*s12^2*s13^2*s23^3 + p1q*p2q^3*
        ((54*s12^3*s13^2 + 54*s12^2*s13^3)*s23^2 - 54*s12^2*s13^2*s23^3) +
       p3q^2*(p2q^2*(324*s12^3*s13^2 + 324*s12^2*s13^3)*s23^2 -
         54*p1q^2*s12^2*s13^2*s23^3 + p1q*p2q*
          ((162*s12^3*s13^2 + 162*s12^2*s13^3)*s23^2 - 162*s12^2*s13^2*
            s23^3)) + p3q*(p2q^3*(216*s12^3*s13^2 + 216*s12^2*s13^3)*s23^2 -
         108*p1q^2*p2q*s12^2*s13^2*s23^3 + p1q*p2q^2*
          ((162*s12^3*s13^2 + 162*s12^2*s13^3)*s23^2 - 162*s12^2*s13^2*
            s23^3)) + p3q^3*(p2q*(216*s12^3*s13^2 + 216*s12^2*s13^3)*s23^2 +
         p1q*((54*s12^3*s13^2 + 54*s12^2*s13^3)*s23^2 - 54*s12^2*s13^2*
            s23^3))) + ((p2q^3*(-2*s13^2 + (s12 - s13)*s23) +
        p3q^3*(-2*s12^2 + (-s12 + s13)*s23) + p1q*p2q^2*
         (-2*s13^2 + 2*s12*s23 + s23^2) + p1q^2*p2q*((2*s12 + 2*s13)*s23 +
          2*s23^2) + p3q^2*(p2q*(-2*s12^2 + 4*s12*s13 + (s12 + 3*s13)*s23) +
          p1q*(-2*s12^2 + 2*s13*s23 + s23^2)) +
        p3q*(p2q^2*(4*s12*s13 - 2*s13^2 + (3*s12 + s13)*s23) +
          p1q^2*((2*s12 + 2*s13)*s23 + 2*s23^2) +
          p1q*p2q*(4*s12*s13 + (6*s12 + 6*s13)*s23 + 4*s23^2)))*
       Log(p1q/(p1q + p2q + p3q))^2)/(9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 +
       9*p3q^3*s23^2 + p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
       p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
     ((p3q^3*(14*s12^2 + (7*s12 - 7*s13)*s23) +
        p2q^3*(14*s13^2 + (-7*s12 + 7*s13)*s23) +
        p1q^2*p2q*((-14*s12 - 14*s13)*s23 - 14*s23^2) +
        p1q*p2q^2*(14*s13^2 - 14*s12*s23 - 7*s23^2) +
        p3q*(p2q^2*(-28*s12*s13 + 14*s13^2 + (-21*s12 - 7*s13)*s23) +
          p1q*p2q*(-28*s12*s13 + (-42*s12 - 42*s13)*s23 - 28*s23^2) +
          p1q^2*((-14*s12 - 14*s13)*s23 - 14*s23^2)) +
        p3q^2*(p2q*(14*s12^2 - 28*s12*s13 + (-7*s12 - 21*s13)*s23) +
          p1q*(14*s12^2 - 14*s13*s23 - 7*s23^2)))*Log(p2q/(p1q + p2q + p3q))^
        2)/(9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 + 9*p3q^3*s23^2 +
       p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
       p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
     ((p3q^3*(4*s12^2 + (2*s12 - 2*s13)*s23) +
        p2q^3*(4*s13^2 + (-2*s12 + 2*s13)*s23) +
        p1q^2*p2q*((-4*s12 - 4*s13)*s23 - 4*s23^2) +
        p1q*p2q^2*(4*s13^2 - 4*s12*s23 - 2*s23^2) +
        p3q*(p2q^2*(-8*s12*s13 + 4*s13^2 + (-6*s12 - 2*s13)*s23) +
          p1q*p2q*(-8*s12*s13 + (-12*s12 - 12*s13)*s23 - 8*s23^2) +
          p1q^2*((-4*s12 - 4*s13)*s23 - 4*s23^2)) +
        p3q^2*(p2q*(4*s12^2 - 8*s12*s13 + (-2*s12 - 6*s13)*s23) +
          p1q*(4*s12^2 - 4*s13*s23 - 2*s23^2)))*Log(p3q/(p1q + p2q + p3q))^2)/
      (9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 + 9*p3q^3*s23^2 +
       p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
       p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
     ((p2q^4*(4*s12*s13^2 + 4*s13^3 + (-2*s12^2 - 2*s12*s13 + 4*s13^2)*s23 -
          2*s12*s23^2) + p1q*p2q^3*(4*s12*s13^2 + 4*s13^3 +
          (-4*s12^2 - 10*s12*s13 - 2*s13^2)*s23 + (-4*s12 - 6*s13)*s23^2) +
        p3q^4*(4*s12^3 + 4*s12^2*s13 + (4*s12^2 - 2*s12*s13 - 2*s13^2)*s23 -
          2*s13*s23^2) + p1q^2*p2q^2*((-4*s12^2 - 12*s12*s13 - 8*s13^2)*s23 +
          (-2*s12 - 6*s13)*s23^2 + 2*s23^3) + p1q^3*p2q*
         ((4*s12 + 4*s13)*s23^2 + 4*s23^3) +
        p3q^3*(p2q*(8*s12^3 - 8*s12*s13^2 + (6*s12^2 - 16*s12*s13 - 6*s13^2)*
             s23 + (-2*s12 - 6*s13)*s23^2) + p1q*(4*s12^3 + 4*s12^2*s13 +
            (-2*s12^2 - 10*s12*s13 - 4*s13^2)*s23 + (-6*s12 - 4*s13)*
             s23^2)) + p3q^2*(p2q^2*(4*s12^3 - 12*s12^2*s13 - 12*s12*s13^2 +
            4*s13^3 + (-2*s12^2 - 28*s12*s13 - 2*s13^2)*s23 +
            (-6*s12 - 6*s13)*s23^2) + p1q^2*((-8*s12^2 - 12*s12*s13 -
              4*s13^2)*s23 + (-6*s12 - 2*s13)*s23^2 + 2*s23^3) +
          p1q*p2q*(4*s12^3 - 4*s12^2*s13 - 8*s12*s13^2 +
            (-8*s12^2 - 30*s12*s13 - 10*s13^2)*s23 + (-8*s12 - 6*s13)*s23^2 +
            4*s23^3)) + p3q*(p2q^3*(-8*s12^2*s13 + 8*s13^3 +
            (-6*s12^2 - 16*s12*s13 + 6*s13^2)*s23 + (-6*s12 - 2*s13)*s23^2) +
          p1q*p2q^2*(-8*s12^2*s13 - 4*s12*s13^2 + 4*s13^3 +
            (-10*s12^2 - 30*s12*s13 - 8*s13^2)*s23 + (-6*s12 - 8*s13)*s23^2 +
            4*s23^3) + p1q^3*((4*s12 + 4*s13)*s23^2 + 4*s23^3) +
          p1q^2*p2q*((-4*s12^2 - 8*s12*s13 - 4*s13^2)*s23 +
            (8*s12 + 8*s13)*s23^2 + 12*s23^3)))*
       Log((p2q + p3q)/(p1q + p2q + p3q))^2)/(p2q^4*(s12 + s13)*s23^2 +
       p3q^4*(s12 + s13)*s23^2 - p1q^2*p2q^2*s23^3 +
       p1q*p2q^3*((s12 + s13)*s23^2 - s23^3) +
       p3q^2*(p2q^2*(6*s12 + 6*s13)*s23^2 - p1q^2*s23^3 +
         p1q*p2q*((3*s12 + 3*s13)*s23^2 - 3*s23^3)) +
       p3q*(p2q^3*(4*s12 + 4*s13)*s23^2 - 2*p1q^2*p2q*s23^3 +
         p1q*p2q^2*((3*s12 + 3*s13)*s23^2 - 3*s23^3)) +
       p3q^3*(p2q*(4*s12 + 4*s13)*s23^2 + p1q*((s12 + s13)*s23^2 - s23^3))) +
     ((p3q^3*(16*s12^2 + (8*s12 - 8*s13)*s23) +
        p2q^3*(16*s13^2 + (-8*s12 + 8*s13)*s23) +
        p1q^2*p2q*((-16*s12 - 16*s13)*s23 - 16*s23^2) +
        p1q*p2q^2*(16*s13^2 - 16*s12*s23 - 8*s23^2) +
        p3q*(p2q^2*(-32*s12*s13 + 16*s13^2 + (-24*s12 - 8*s13)*s23) +
          p1q*p2q*(-32*s12*s13 + (-48*s12 - 48*s13)*s23 - 32*s23^2) +
          p1q^2*((-16*s12 - 16*s13)*s23 - 16*s23^2)) +
        p3q^2*(p2q*(16*s12^2 - 32*s12*s13 + (-8*s12 - 24*s13)*s23) +
          p1q*(16*s12^2 - 16*s13*s23 - 8*s23^2)))*Log(-s12 - s13 - s23)^2)/
      (9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 + 9*p3q^3*s23^2 +
       p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
       p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
     ((p3q^3*(4*s12^2 + (2*s12 - 2*s13)*s23) +
        p2q^3*(4*s13^2 + (-2*s12 + 2*s13)*s23) +
        p1q^2*p2q*((-4*s12 - 4*s13)*s23 - 4*s23^2) +
        p1q*p2q^2*(4*s13^2 - 4*s12*s23 - 2*s23^2) +
        p3q*(p2q^2*(-8*s12*s13 + 4*s13^2 + (-6*s12 - 2*s13)*s23) +
          p1q*p2q*(-8*s12*s13 + (-12*s12 - 12*s13)*s23 - 8*s23^2) +
          p1q^2*((-4*s12 - 4*s13)*s23 - 4*s23^2)) +
        p3q^2*(p2q*(4*s12^2 - 8*s12*s13 + (-2*s12 - 6*s13)*s23) +
          p1q*(4*s12^2 - 4*s13*s23 - 2*s23^2)))*Log(s12/(s12 + s13 + s23))^2)/
      (9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 + 9*p3q^3*s23^2 +
       p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
       p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
     ((p3q^3*(14*s12^2 + (7*s12 - 7*s13)*s23) +
        p2q^3*(14*s13^2 + (-7*s12 + 7*s13)*s23) +
        p1q^2*p2q*((-14*s12 - 14*s13)*s23 - 14*s23^2) +
        p1q*p2q^2*(14*s13^2 - 14*s12*s23 - 7*s23^2) +
        p3q*(p2q^2*(-28*s12*s13 + 14*s13^2 + (-21*s12 - 7*s13)*s23) +
          p1q*p2q*(-28*s12*s13 + (-42*s12 - 42*s13)*s23 - 28*s23^2) +
          p1q^2*((-14*s12 - 14*s13)*s23 - 14*s23^2)) +
        p3q^2*(p2q*(14*s12^2 - 28*s12*s13 + (-7*s12 - 21*s13)*s23) +
          p1q*(14*s12^2 - 14*s13*s23 - 7*s23^2)))*Log(s13/(s12 + s13 + s23))^
        2)/(9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 + 9*p3q^3*s23^2 +
       p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
       p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
     ((p3q^3*(84*s12^5*s13 + 168*s12^4*s13^2 + 84*s12^3*s13^3 +
           (-2*s12^5 + 74*s12^4*s13 + 56*s12^3*s13^2 - 60*s12^2*s13^3 -
             40*s12*s13^4)*s23 + (-2*s12^4 + 22*s12^3*s13 - 6*s12^2*s13^2 -
             20*s12*s13^3)*s23^2) + p2q^3*(84*s12^3*s13^3 + 168*s12^2*s13^4 +
           84*s12*s13^5 + (-40*s12^4*s13 - 55*s12^3*s13^2 + 61*s12^2*s13^3 +
             69*s12*s13^4 - 7*s13^5)*s23 + (-10*s12^3*s13 - s12^2*s13^2 +
             12*s12*s13^3 - 7*s13^4)*s23^2) + p1q*p2q^2*(84*s12^3*s13^3 +
           168*s12^2*s13^4 + 84*s12*s13^5 + (-84*s12^4*s13 -
             202*s12^3*s13^2 - 84*s12^2*s13^3 + 34*s12*s13^4)*s23 +
           (-71*s12^3*s13 - 114*s12^2*s13^2 - 9*s12*s13^3 + 14*s13^4)*s23^2 +
           (-17*s12^2*s13 + 7*s12*s13^2 + 14*s13^3)*s23^3) +
         p1q^2*p2q*((-84*s12^4*s13 - 252*s12^3*s13^2 - 252*s12^2*s13^3 -
             84*s12*s13^4)*s23 + (-118*s12^3*s13 - 236*s12^2*s13^2 -
             118*s12*s13^3)*s23^2 + (-2*s12^3 - 55*s12^2*s13 - 60*s12*s13^2 -
             7*s13^3)*s23^3 + (-2*s12^2 - 19*s12*s13 - 7*s13^2)*s23^4) +
         p3q^2*(p2q*(84*s12^5*s13 - 252*s12^3*s13^3 - 168*s12^2*s13^4 +
             (-2*s12^5 + 15*s12^4*s13 - 227*s12^3*s13^2 - 333*s12^2*s13^3 -
               89*s12*s13^4)*s23 + (-2*s12^4 + 23*s12^3*s13 - 34*s12^2*
                s13^2 - 29*s12*s13^3)*s23^2) + p1q*(84*s12^5*s13 +
             168*s12^4*s13^2 + 84*s12^3*s13^3 + (34*s12^4*s13 - 84*s12^3*
                s13^2 - 202*s12^2*s13^3 - 84*s12*s13^4)*s23 +
             (4*s12^4 - 19*s12^3*s13 - 124*s12^2*s13^2 - 81*s12*s13^3)*
              s23^2 + (4*s12^3 - 3*s12^2*s13 - 17*s12*s13^2)*s23^3)) +
         p3q*(p2q^2*(-168*s12^4*s13^2 - 252*s12^3*s13^3 + 84*s12*s13^5 +
             (-99*s12^4*s13 - 338*s12^3*s13^2 - 212*s12^2*s13^3 + 20*s12*
                s13^4 - 7*s13^5)*s23 + (-9*s12^3*s13 - 29*s12^2*s13^2 + 3*s12*
                s13^3 - 7*s13^4)*s23^2) + p1q*p2q*(-168*s12^4*s13^2 -
             336*s12^3*s13^3 - 168*s12^2*s13^4 + (-218*s12^4*s13 - 790*s12^3*
                s13^2 - 790*s12^2*s13^3 - 218*s12*s13^4)*s23 +
             (4*s12^4 - 174*s12^3*s13 - 406*s12^2*s13^2 - 174*s12*s13^3 + 14*
                s13^4)*s23^2 + (4*s12^3 - 20*s12^2*s13 - 10*s12*s13^2 + 14*
                s13^3)*s23^3) + p1q^2*((-84*s12^4*s13 - 252*s12^3*s13^2 - 252*
                s12^2*s13^3 - 84*s12*s13^4)*s23 + (-118*s12^3*s13 - 236*s12^2*
                s13^2 - 118*s12*s13^3)*s23^2 + (-2*s12^3 - 55*s12^2*s13 - 60*
                s12*s13^2 - 7*s13^3)*s23^3 + (-2*s12^2 - 19*s12*s13 - 7*
                s13^2)*s23^4)))/(p1q*p2q^2*(9*s12^3*s13 + 18*s12^2*s13^2 +
           9*s12*s13^3)*s23^2 + p2q^3*(9*s12^3*s13 + 18*s12^2*s13^2 +
           9*s12*s13^3)*s23^2 + p3q^3*(9*s12^3*s13 + 18*s12^2*s13^2 +
           9*s12*s13^3)*s23^2 + p3q^2*(p1q*(9*s12^3*s13 + 18*s12^2*s13^2 +
             9*s12*s13^3)*s23^2 + p2q*(27*s12^3*s13 + 54*s12^2*s13^2 +
             27*s12*s13^3)*s23^2) +
         p3q*(p1q*p2q*(18*s12^3*s13 + 36*s12^2*s13^2 + 18*s12*s13^3)*s23^2 +
           p2q^2*(27*s12^3*s13 + 54*s12^2*s13^2 + 27*s12*s13^3)*s23^2)) +
       ((p3q^3*(-40*s12^5*s13^2 - 40*s12^4*s13^3 +
            (2*s12^6 - 19*s12^4*s13^2 - 30*s12^3*s13^3 + 27*s12^2*s13^4)*
             s23 + (2*s12^5 - 2*s12^4*s13 - 7*s12^3*s13^2 - 23*s12^2*s13^3)*
             s23^2) + p2q^3*(-40*s12^3*s13^4 - 40*s12^2*s13^5 +
            (22*s12^4*s13^2 - 10*s12^3*s13^3 + s12^2*s13^4 + 7*s13^6)*s23 +
            (-8*s12^3*s13^2 - 2*s12^2*s13^3 - 7*s12*s13^4 + 7*s13^5)*s23^2) +
          p1q*p2q^2*(-40*s12^3*s13^4 - 40*s12^2*s13^5 +
            (44*s12^4*s13^2 - 6*s12^3*s13^3 + 56*s12^2*s13^4 - 14*s12*s13^5)*
             s23 + (-14*s12^3*s13^2 + 26*s12^2*s13^3 - 21*s12*s13^4 -
              21*s13^5)*s23^2 + (2*s12^2*s13^2 + 14*s12*s13^3 - 21*s13^4)*
             s23^3) + p1q^2*p2q*((40*s12^4*s13^2 + 40*s12^3*s13^3 +
              80*s12^2*s13^4)*s23 + (4*s12^4*s13 - 2*s12^3*s13^2 +
              42*s12^2*s13^3 + 28*s12*s13^4)*s23^2 +
            (2*s12^4 + 8*s12^3*s13 - 21*s12^2*s13^2 + 42*s12*s13^3 +
              21*s13^4)*s23^3 + (2*s12^3 + 2*s12^2*s13 - 7*s12*s13^2 +
              21*s13^3)*s23^4) + p1q^3*((-40*s12^3*s13^2 - 40*s12^2*s13^3)*
             s23^2 + (-4*s12^3*s13 - 58*s12^2*s13^2 - 14*s12*s13^3)*s23^3 +
            (-2*s12^3 - 6*s12^2*s13 - 21*s12*s13^2 - 7*s13^3)*s23^4 +
            (-2*s12^2 - 7*s13^2)*s23^5) +
          p3q^2*(p2q*(-40*s12^5*s13^2 + 40*s12^4*s13^3 + 80*s12^3*s13^4 +
              (2*s12^6 - 4*s12^5*s13 + 31*s12^4*s13^2 + 28*s12^3*s13^3 +
                97*s12^2*s13^4 - 14*s12*s13^5)*s23 + (2*s12^5 - 6*s12^4*s13 -
                13*s12^3*s13^2 - 39*s12^2*s13^3 - 14*s12*s13^4)*s23^2) +
            p1q*(-40*s12^5*s13^2 - 40*s12^4*s13^3 + (-4*s12^5*s13 +
                46*s12^4*s13^2 - 16*s12^3*s13^3 + 54*s12^2*s13^4)*s23 +
              (-6*s12^5 - 6*s12^4*s13 + 41*s12^3*s13^2 - 39*s12^2*s13^3)*s23^
                2 + (-6*s12^4 + 4*s12^3*s13 + 7*s12^2*s13^2)*s23^3)) +
          p3q*(p2q^2*(80*s12^4*s13^3 + 40*s12^3*s13^4 - 40*s12^2*s13^5 +
              (-4*s12^5*s13 + 72*s12^4*s13^2 + 48*s12^3*s13^3 +
                71*s12^2*s13^4 - 14*s12*s13^5 + 7*s13^6)*s23 +
              (-4*s12^4*s13 - 14*s12^3*s13^2 - 18*s12^2*s13^3 -
                21*s12*s13^4 + 7*s13^5)*s23^2) + p1q*p2q*(80*s12^4*s13^3 +
              80*s12^3*s13^4 + (-4*s12^5*s13 + 170*s12^4*s13^2 +
                138*s12^3*s13^3 + 190*s12^2*s13^4 - 14*s12*s13^5)*s23 +
              (-4*s12^5 - 4*s12^4*s13 + 98*s12^3*s13^2 + 58*s12^2*s13^3 -
                14*s12*s13^4 - 14*s13^5)*s23^2 + (-4*s12^4 + 4*s12^3*s13 +
                40*s12^2*s13^2 + 14*s12*s13^3 - 14*s13^4)*s23^3) +
            p1q^2*((80*s12^4*s13^2 + 40*s12^3*s13^3 + 40*s12^2*s13^4)*s23 +
              (8*s12^4*s13 + 52*s12^3*s13^2 - 2*s12^2*s13^3 + 14*s12*s13^4)*
               s23^2 + (6*s12^4 + 12*s12^3*s13 - s12^2*s13^2 + 28*s12*s13^3 +
                7*s13^4)*s23^3 + (6*s12^3 - 2*s12^2*s13 + 7*s12*s13^2 +
                7*s13^3)*s23^4)))*Log((s12 + s13)/(s12 + s13 + s23)))/
        (p2q^3*(9*s12^3*s13^2 + 9*s12^2*s13^3)*s23^2 +
         p3q^3*(9*s12^3*s13^2 + 9*s12^2*s13^3)*s23^2 - 9*p1q^2*p2q*s12^2*
          s13^2*s23^3 + p1q*p2q^2*((9*s12^3*s13^2 + 9*s12^2*s13^3)*s23^2 -
           9*s12^2*s13^2*s23^3) + p3q*(p2q^2*(27*s12^3*s13^2 +
             27*s12^2*s13^3)*s23^2 - 9*p1q^2*s12^2*s13^2*s23^3 +
           p1q*p2q*((18*s12^3*s13^2 + 18*s12^2*s13^3)*s23^2 -
             18*s12^2*s13^2*s23^3)) +
         p3q^2*(p2q*(27*s12^3*s13^2 + 27*s12^2*s13^3)*s23^2 +
           p1q*((9*s12^3*s13^2 + 9*s12^2*s13^3)*s23^2 - 9*s12^2*s13^2*
              s23^3))))*Log(s23/(s12 + s13 + s23)) +
     ((p2q^3*(-2*s13^2 + (s12 - s13)*s23) +
        p3q^3*(-2*s12^2 + (-s12 + s13)*s23) + p1q*p2q^2*
         (-2*s13^2 + 2*s12*s23 + s23^2) + p1q^2*p2q*((2*s12 + 2*s13)*s23 +
          2*s23^2) + p3q^2*(p2q*(-2*s12^2 + 4*s12*s13 + (s12 + 3*s13)*s23) +
          p1q*(-2*s12^2 + 2*s13*s23 + s23^2)) +
        p3q*(p2q^2*(4*s12*s13 - 2*s13^2 + (3*s12 + s13)*s23) +
          p1q^2*((2*s12 + 2*s13)*s23 + 2*s23^2) +
          p1q*p2q*(4*s12*s13 + (6*s12 + 6*s13)*s23 + 4*s23^2)))*
       Log(s23/(s12 + s13 + s23))^2)/(9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 +
       9*p3q^3*s23^2 + p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
       p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) + Log(p1q/(p1q + p2q + p3q))*
      ((p2q*(2*s12 + 2*s13) + p3q*(2*s12 + 2*s13) - 2*p1q*s23)/
        (9*p1q*s23 + 9*p2q*s23 + 9*p3q*s23) +
       ((p2q^4*(4*s12*s13^2 + 4*s13^3 + (-2*s12^2 - 2*s12*s13 + 4*s13^2)*
             s23 - 2*s12*s23^2) + p1q*p2q^3*(4*s12*s13^2 + 4*s13^3 +
            (-4*s12^2 - 10*s12*s13 - 2*s13^2)*s23 + (-4*s12 - 6*s13)*s23^2) +
          p3q^4*(4*s12^3 + 4*s12^2*s13 + (4*s12^2 - 2*s12*s13 - 2*s13^2)*
             s23 - 2*s13*s23^2) + p1q^2*p2q^2*
           ((-4*s12^2 - 12*s12*s13 - 8*s13^2)*s23 + (-2*s12 - 6*s13)*s23^2 +
            2*s23^3) + p1q^3*p2q*((4*s12 + 4*s13)*s23^2 + 4*s23^3) +
          p3q^3*(p2q*(8*s12^3 - 8*s12*s13^2 + (6*s12^2 - 16*s12*s13 -
                6*s13^2)*s23 + (-2*s12 - 6*s13)*s23^2) +
            p1q*(4*s12^3 + 4*s12^2*s13 + (-2*s12^2 - 10*s12*s13 - 4*s13^2)*
               s23 + (-6*s12 - 4*s13)*s23^2)) +
          p3q^2*(p2q^2*(4*s12^3 - 12*s12^2*s13 - 12*s12*s13^2 + 4*s13^3 +
              (-2*s12^2 - 28*s12*s13 - 2*s13^2)*s23 + (-6*s12 - 6*s13)*s23^
                2) + p1q^2*((-8*s12^2 - 12*s12*s13 - 4*s13^2)*s23 +
              (-6*s12 - 2*s13)*s23^2 + 2*s23^3) + p1q*p2q*
             (4*s12^3 - 4*s12^2*s13 - 8*s12*s13^2 + (-8*s12^2 - 30*s12*s13 -
                10*s13^2)*s23 + (-8*s12 - 6*s13)*s23^2 + 4*s23^3)) +
          p3q*(p2q^3*(-8*s12^2*s13 + 8*s13^3 + (-6*s12^2 - 16*s12*s13 +
                6*s13^2)*s23 + (-6*s12 - 2*s13)*s23^2) +
            p1q*p2q^2*(-8*s12^2*s13 - 4*s12*s13^2 + 4*s13^3 +
              (-10*s12^2 - 30*s12*s13 - 8*s13^2)*s23 + (-6*s12 - 8*s13)*s23^
                2 + 4*s23^3) + p1q^3*((4*s12 + 4*s13)*s23^2 + 4*s23^3) +
            p1q^2*p2q*((-4*s12^2 - 8*s12*s13 - 4*s13^2)*s23 +
              (8*s12 + 8*s13)*s23^2 + 12*s23^3)))*
         Log((p2q + p3q)/(p1q + p2q + p3q)))/(p2q^4*(9*s12 + 9*s13)*s23^2 +
         p3q^4*(9*s12 + 9*s13)*s23^2 - 9*p1q^2*p2q^2*s23^3 +
         p1q*p2q^3*((9*s12 + 9*s13)*s23^2 - 9*s23^3) +
         p3q^2*(p2q^2*(54*s12 + 54*s13)*s23^2 - 9*p1q^2*s23^3 +
           p1q*p2q*((27*s12 + 27*s13)*s23^2 - 27*s23^3)) +
         p3q*(p2q^3*(36*s12 + 36*s13)*s23^2 - 18*p1q^2*p2q*s23^3 +
           p1q*p2q^2*((27*s12 + 27*s13)*s23^2 - 27*s23^3)) +
         p3q^3*(p2q*(36*s12 + 36*s13)*s23^2 + p1q*((9*s12 + 9*s13)*s23^2 -
             9*s23^3))) + ((p2q^3*(-4*s13^2 + (2*s12 - 2*s13)*s23) +
          p3q^3*(-4*s12^2 + (-2*s12 + 2*s13)*s23) +
          p1q*p2q^2*(-4*s13^2 + 4*s12*s23 + 2*s23^2) +
          p1q^2*p2q*((4*s12 + 4*s13)*s23 + 4*s23^2) +
          p3q^2*(p2q*(-4*s12^2 + 8*s12*s13 + (2*s12 + 6*s13)*s23) +
            p1q*(-4*s12^2 + 4*s13*s23 + 2*s23^2)) +
          p3q*(p2q^2*(8*s12*s13 - 4*s13^2 + (6*s12 + 2*s13)*s23) +
            p1q^2*((4*s12 + 4*s13)*s23 + 4*s23^2) +
            p1q*p2q*(8*s12*s13 + (12*s12 + 12*s13)*s23 + 8*s23^2)))*
         Log(-s12 - s13 - s23))/(9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 +
         9*p3q^3*s23^2 + p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
         p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
       ((p2q^3*(2*s12*s13 - 2*s13^2 + 2*s12*s23) +
          p3q^3*(-2*s12^2 + 2*s12*s13 + 2*s13*s23) +
          p1q*p2q^2*(4*s12*s13 + (2*s12 + 2*s13)*s23) +
          p3q^2*(p1q*(4*s12*s13 + (2*s12 + 2*s13)*s23) +
            p2q*(-4*s12^2 + 6*s12*s13 - 2*s13^2 + (2*s12 + 4*s13)*s23)) +
          p3q*(p2q^2*(-2*s12^2 + 6*s12*s13 - 4*s13^2 + (4*s12 + 2*s13)*s23) +
            p1q*p2q*(-4*s12^2 - 4*s13^2 + (-4*s12 - 4*s13)*s23 - 4*s23^2)))*
         Log(s23/(s12 + s13 + s23)))/(p2q^3*(9*s12 + 9*s13)*s23 +
         p3q^3*(9*s12 + 9*s13)*s23 - 9*p1q*p2q^2*s23^2 +
         p3q^2*(p2q*(27*s12 + 27*s13)*s23 - 9*p1q*s23^2) +
         p3q*(p2q^2*(27*s12 + 27*s13)*s23 - 18*p1q*p2q*s23^2))) +
     ((nl*(p3q^3*(8*s12^2 + (4*s12 - 4*s13)*s23) +
          p2q^3*(8*s13^2 + (-4*s12 + 4*s13)*s23) + p1q^2*p2q*
           ((-8*s12 - 8*s13)*s23 - 8*s23^2) + p1q*p2q^2*
           (8*s13^2 - 8*s12*s23 - 4*s23^2) +
          p3q*(p2q^2*(-16*s12*s13 + 8*s13^2 + (-12*s12 - 4*s13)*s23) +
            p1q*p2q*(-16*s12*s13 + (-24*s12 - 24*s13)*s23 - 16*s23^2) +
            p1q^2*((-8*s12 - 8*s13)*s23 - 8*s23^2)) +
          p3q^2*(p2q*(8*s12^2 - 16*s12*s13 + (-4*s12 - 12*s13)*s23) +
            p1q*(8*s12^2 - 8*s13*s23 - 4*s23^2))))/(9*p1q*p2q^2*s23^2 +
         9*p2q^3*s23^2 + 9*p3q^3*s23^2 + p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
         p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
       (p2q^3*(-84*s13^2 + (58*s12 - 26*s13)*s23) +
         p3q^3*(-84*s12^2 + (-26*s12 + 58*s13)*s23) +
         p1q*p2q^2*(-84*s13^2 + 84*s12*s23 + 26*s23^2) +
         p1q^2*p2q*((84*s12 + 84*s13)*s23 + 84*s23^2) +
         p3q^2*(p2q*(-84*s12^2 + 168*s12*s13 + (90*s12 + 174*s13)*s23) +
           p1q*(-84*s12^2 + 84*s13*s23 + 26*s23^2)) +
         p3q*(p2q^2*(168*s12*s13 - 84*s13^2 + (174*s12 + 90*s13)*s23) +
           p1q^2*((84*s12 + 84*s13)*s23 + 84*s23^2) +
           p1q*p2q*(168*s12*s13 + (252*s12 + 252*s13)*s23 + 136*s23^2)))/
        (9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 + 9*p3q^3*s23^2 +
         p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) + p3q*(18*p1q*p2q*s23^2 +
           27*p2q^2*s23^2)) + ((p3q^3*(4*s12^2 + (2*s12 - 2*s13)*s23) +
          p2q^3*(4*s13^2 + (-2*s12 + 2*s13)*s23) + p1q^2*p2q*
           ((-4*s12 - 4*s13)*s23 - 4*s23^2) + p1q*p2q^2*
           (4*s13^2 - 4*s12*s23 - 2*s23^2) +
          p3q*(p2q^2*(-8*s12*s13 + 4*s13^2 + (-6*s12 - 2*s13)*s23) +
            p1q*p2q*(-8*s12*s13 + (-12*s12 - 12*s13)*s23 - 8*s23^2) +
            p1q^2*((-4*s12 - 4*s13)*s23 - 4*s23^2)) +
          p3q^2*(p2q*(4*s12^2 - 8*s12*s13 + (-2*s12 - 6*s13)*s23) +
            p1q*(4*s12^2 - 4*s13*s23 - 2*s23^2)))*Log(p1q/(p1q + p2q + p3q)))/
        (9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 + 9*p3q^3*s23^2 +
         p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) + p3q*(18*p1q*p2q*s23^2 +
           27*p2q^2*s23^2)) + ((p2q^3*(-28*s13^2 + (14*s12 - 14*s13)*s23) +
          p3q^3*(-28*s12^2 + (-14*s12 + 14*s13)*s23) +
          p1q*p2q^2*(-28*s13^2 + 28*s12*s23 + 14*s23^2) +
          p1q^2*p2q*((28*s12 + 28*s13)*s23 + 28*s23^2) +
          p3q^2*(p2q*(-28*s12^2 + 56*s12*s13 + (14*s12 + 42*s13)*s23) +
            p1q*(-28*s12^2 + 28*s13*s23 + 14*s23^2)) +
          p3q*(p2q^2*(56*s12*s13 - 28*s13^2 + (42*s12 + 14*s13)*s23) +
            p1q^2*((28*s12 + 28*s13)*s23 + 28*s23^2) +
            p1q*p2q*(56*s12*s13 + (84*s12 + 84*s13)*s23 + 56*s23^2)))*
         Log(p2q/(p1q + p2q + p3q)))/(9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 +
         9*p3q^3*s23^2 + p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
         p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
       ((p2q^3*(-8*s13^2 + (4*s12 - 4*s13)*s23) +
          p3q^3*(-8*s12^2 + (-4*s12 + 4*s13)*s23) +
          p1q*p2q^2*(-8*s13^2 + 8*s12*s23 + 4*s23^2) +
          p1q^2*p2q*((8*s12 + 8*s13)*s23 + 8*s23^2) +
          p3q^2*(p2q*(-8*s12^2 + 16*s12*s13 + (4*s12 + 12*s13)*s23) +
            p1q*(-8*s12^2 + 8*s13*s23 + 4*s23^2)) +
          p3q*(p2q^2*(16*s12*s13 - 8*s13^2 + (12*s12 + 4*s13)*s23) +
            p1q^2*((8*s12 + 8*s13)*s23 + 8*s23^2) +
            p1q*p2q*(16*s12*s13 + (24*s12 + 24*s13)*s23 + 16*s23^2)))*
         Log(p3q/(p1q + p2q + p3q)))/(9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 +
         9*p3q^3*s23^2 + p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
         p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
       ((p2q^3*(-32*s13^2 + (16*s12 - 16*s13)*s23) +
          p3q^3*(-32*s12^2 + (-16*s12 + 16*s13)*s23) +
          p1q*p2q^2*(-32*s13^2 + 32*s12*s23 + 16*s23^2) +
          p1q^2*p2q*((32*s12 + 32*s13)*s23 + 32*s23^2) +
          p3q^2*(p2q*(-32*s12^2 + 64*s12*s13 + (16*s12 + 48*s13)*s23) +
            p1q*(-32*s12^2 + 32*s13*s23 + 16*s23^2)) +
          p3q*(p2q^2*(64*s12*s13 - 32*s13^2 + (48*s12 + 16*s13)*s23) +
            p1q^2*((32*s12 + 32*s13)*s23 + 32*s23^2) +
            p1q*p2q*(64*s12*s13 + (96*s12 + 96*s13)*s23 + 64*s23^2)))*
         Log(-s12 - s13 - s23))/(9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 +
         9*p3q^3*s23^2 + p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
         p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
       ((p2q^3*(-8*s13^2 + (4*s12 - 4*s13)*s23) +
          p3q^3*(-8*s12^2 + (-4*s12 + 4*s13)*s23) +
          p1q*p2q^2*(-8*s13^2 + 8*s12*s23 + 4*s23^2) +
          p1q^2*p2q*((8*s12 + 8*s13)*s23 + 8*s23^2) +
          p3q^2*(p2q*(-8*s12^2 + 16*s12*s13 + (4*s12 + 12*s13)*s23) +
            p1q*(-8*s12^2 + 8*s13*s23 + 4*s23^2)) +
          p3q*(p2q^2*(16*s12*s13 - 8*s13^2 + (12*s12 + 4*s13)*s23) +
            p1q^2*((8*s12 + 8*s13)*s23 + 8*s23^2) +
            p1q*p2q*(16*s12*s13 + (24*s12 + 24*s13)*s23 + 16*s23^2)))*
         Log(s12/(s12 + s13 + s23)))/(9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 +
         9*p3q^3*s23^2 + p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
         p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
       ((p2q^3*(-28*s13^2 + (14*s12 - 14*s13)*s23) +
          p3q^3*(-28*s12^2 + (-14*s12 + 14*s13)*s23) +
          p1q*p2q^2*(-28*s13^2 + 28*s12*s23 + 14*s23^2) +
          p1q^2*p2q*((28*s12 + 28*s13)*s23 + 28*s23^2) +
          p3q^2*(p2q*(-28*s12^2 + 56*s12*s13 + (14*s12 + 42*s13)*s23) +
            p1q*(-28*s12^2 + 28*s13*s23 + 14*s23^2)) +
          p3q*(p2q^2*(56*s12*s13 - 28*s13^2 + (42*s12 + 14*s13)*s23) +
            p1q^2*((28*s12 + 28*s13)*s23 + 28*s23^2) +
            p1q*p2q*(56*s12*s13 + (84*s12 + 84*s13)*s23 + 56*s23^2)))*
         Log(s13/(s12 + s13 + s23)))/(9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 +
         9*p3q^3*s23^2 + p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
         p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
       ((p3q^3*(4*s12^2 + (2*s12 - 2*s13)*s23) +
          p2q^3*(4*s13^2 + (-2*s12 + 2*s13)*s23) + p1q^2*p2q*
           ((-4*s12 - 4*s13)*s23 - 4*s23^2) + p1q*p2q^2*
           (4*s13^2 - 4*s12*s23 - 2*s23^2) +
          p3q*(p2q^2*(-8*s12*s13 + 4*s13^2 + (-6*s12 - 2*s13)*s23) +
            p1q*p2q*(-8*s12*s13 + (-12*s12 - 12*s13)*s23 - 8*s23^2) +
            p1q^2*((-4*s12 - 4*s13)*s23 - 4*s23^2)) +
          p3q^2*(p2q*(4*s12^2 - 8*s12*s13 + (-2*s12 - 6*s13)*s23) +
            p1q*(4*s12^2 - 4*s13*s23 - 2*s23^2)))*Log(s23/(s12 + s13 + s23)))/
        (9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 + 9*p3q^3*s23^2 +
         p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) + p3q*(18*p1q*p2q*s23^2 +
           27*p2q^2*s23^2)))/ep + Log(-s12 - s13 - s23)*
      ((p3q^3*(84*s12^2 + (26*s12 - 58*s13)*s23) +
         p2q^3*(84*s13^2 + (-58*s12 + 26*s13)*s23) +
         p1q^2*p2q*((-84*s12 - 84*s13)*s23 - 84*s23^2) +
         p1q*p2q^2*(84*s13^2 - 84*s12*s23 - 26*s23^2) +
         p3q*(p2q^2*(-168*s12*s13 + 84*s13^2 + (-174*s12 - 90*s13)*s23) +
           p1q*p2q*(-168*s12*s13 + (-252*s12 - 252*s13)*s23 - 136*s23^2) +
           p1q^2*((-84*s12 - 84*s13)*s23 - 84*s23^2)) +
         p3q^2*(p2q*(84*s12^2 - 168*s12*s13 + (-90*s12 - 174*s13)*s23) +
           p1q*(84*s12^2 - 84*s13*s23 - 26*s23^2)))/(9*p1q*p2q^2*s23^2 +
         9*p2q^3*s23^2 + 9*p3q^3*s23^2 + p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
         p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
       ((p3q^3*(8*s12^2 + (4*s12 - 4*s13)*s23) +
          p2q^3*(8*s13^2 + (-4*s12 + 4*s13)*s23) + p1q^2*p2q*
           ((-8*s12 - 8*s13)*s23 - 8*s23^2) + p1q*p2q^2*
           (8*s13^2 - 8*s12*s23 - 4*s23^2) +
          p3q*(p2q^2*(-16*s12*s13 + 8*s13^2 + (-12*s12 - 4*s13)*s23) +
            p1q*p2q*(-16*s12*s13 + (-24*s12 - 24*s13)*s23 - 16*s23^2) +
            p1q^2*((-8*s12 - 8*s13)*s23 - 8*s23^2)) +
          p3q^2*(p2q*(8*s12^2 - 16*s12*s13 + (-4*s12 - 12*s13)*s23) +
            p1q*(8*s12^2 - 8*s13*s23 - 4*s23^2)))*Log(s12/(s12 + s13 + s23)))/
        (9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 + 9*p3q^3*s23^2 +
         p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) + p3q*(18*p1q*p2q*s23^2 +
           27*p2q^2*s23^2)) + ((p3q^3*(28*s12^2 + (14*s12 - 14*s13)*s23) +
          p2q^3*(28*s13^2 + (-14*s12 + 14*s13)*s23) +
          p1q^2*p2q*((-28*s12 - 28*s13)*s23 - 28*s23^2) +
          p1q*p2q^2*(28*s13^2 - 28*s12*s23 - 14*s23^2) +
          p3q*(p2q^2*(-56*s12*s13 + 28*s13^2 + (-42*s12 - 14*s13)*s23) +
            p1q*p2q*(-56*s12*s13 + (-84*s12 - 84*s13)*s23 - 56*s23^2) +
            p1q^2*((-28*s12 - 28*s13)*s23 - 28*s23^2)) +
          p3q^2*(p2q*(28*s12^2 - 56*s12*s13 + (-14*s12 - 42*s13)*s23) +
            p1q*(28*s12^2 - 28*s13*s23 - 14*s23^2)))*
         Log(s13/(s12 + s13 + s23)))/(9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 +
         9*p3q^3*s23^2 + p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
         p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
       ((p2q^3*(-4*s13^2 + (2*s12 - 2*s13)*s23) +
          p3q^3*(-4*s12^2 + (-2*s12 + 2*s13)*s23) +
          p1q*p2q^2*(-4*s13^2 + 4*s12*s23 + 2*s23^2) +
          p1q^2*p2q*((4*s12 + 4*s13)*s23 + 4*s23^2) +
          p3q^2*(p2q*(-4*s12^2 + 8*s12*s13 + (2*s12 + 6*s13)*s23) +
            p1q*(-4*s12^2 + 4*s13*s23 + 2*s23^2)) +
          p3q*(p2q^2*(8*s12*s13 - 4*s13^2 + (6*s12 + 2*s13)*s23) +
            p1q^2*((4*s12 + 4*s13)*s23 + 4*s23^2) +
            p1q*p2q*(8*s12*s13 + (12*s12 + 12*s13)*s23 + 8*s23^2)))*
         Log(s23/(s12 + s13 + s23)))/(9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 +
         9*p3q^3*s23^2 + p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
         p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2))) +
     nl*((p3q^3*(40*s12^2 + (32*s12 - 8*s13)*s23) +
         p2q^3*(40*s13^2 + (-8*s12 + 32*s13)*s23) +
         p1q^2*p2q*((-40*s12 - 40*s13)*s23 - 40*s23^2) +
         p1q*p2q^2*(40*s13^2 - 40*s12*s23 - 32*s23^2) +
         p3q*(p2q^2*(-80*s12*s13 + 40*s13^2 + (-24*s12 + 16*s13)*s23) +
           p1q*p2q*(-80*s12*s13 + (-120*s12 - 120*s13)*s23 - 104*s23^2) +
           p1q^2*((-40*s12 - 40*s13)*s23 - 40*s23^2)) +
         p3q^2*(p2q*(40*s12^2 - 80*s12*s13 + (16*s12 - 24*s13)*s23) +
           p1q*(40*s12^2 - 40*s13*s23 - 32*s23^2)))/(27*p1q*p2q^2*s23^2 +
         27*p2q^3*s23^2 + 27*p3q^3*s23^2 + p3q^2*(27*p1q*s23^2 +
           81*p2q*s23^2) + p3q*(54*p1q*p2q*s23^2 + 81*p2q^2*s23^2)) +
       ((p2q^3*(-8*s13^2 + (4*s12 - 4*s13)*s23) +
          p3q^3*(-8*s12^2 + (-4*s12 + 4*s13)*s23) +
          p1q*p2q^2*(-8*s13^2 + 8*s12*s23 + 4*s23^2) +
          p1q^2*p2q*((8*s12 + 8*s13)*s23 + 8*s23^2) +
          p3q^2*(p2q*(-8*s12^2 + 16*s12*s13 + (4*s12 + 12*s13)*s23) +
            p1q*(-8*s12^2 + 8*s13*s23 + 4*s23^2)) +
          p3q*(p2q^2*(16*s12*s13 - 8*s13^2 + (12*s12 + 4*s13)*s23) +
            p1q^2*((8*s12 + 8*s13)*s23 + 8*s23^2) +
            p1q*p2q*(16*s12*s13 + (24*s12 + 24*s13)*s23 + 16*s23^2)))*
         Log(-s12 - s13 - s23))/(9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 +
         9*p3q^3*s23^2 + p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
         p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
       ((p2q^3*(-8*s13^2 + (4*s12 - 4*s13)*s23) +
          p3q^3*(-8*s12^2 + (-4*s12 + 4*s13)*s23) +
          p1q*p2q^2*(-8*s13^2 + 8*s12*s23 + 4*s23^2) +
          p1q^2*p2q*((8*s12 + 8*s13)*s23 + 8*s23^2) +
          p3q^2*(p2q*(-8*s12^2 + 16*s12*s13 + (4*s12 + 12*s13)*s23) +
            p1q*(-8*s12^2 + 8*s13*s23 + 4*s23^2)) +
          p3q*(p2q^2*(16*s12*s13 - 8*s13^2 + (12*s12 + 4*s13)*s23) +
            p1q^2*((8*s12 + 8*s13)*s23 + 8*s23^2) +
            p1q*p2q*(16*s12*s13 + (24*s12 + 24*s13)*s23 + 16*s23^2)))*
         Log(s23/(s12 + s13 + s23)))/(9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 +
         9*p3q^3*s23^2 + p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
         p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2))) +
     Log((p2q + p3q)/(p1q + p2q + p3q))*
      (((p2q^4*(8*s12*s13^2 + 8*s13^3 + (-4*s12^2 - 4*s12*s13 + 8*s13^2)*
             s23 - 4*s12*s23^2) + p1q*p2q^3*(8*s12*s13^2 + 8*s13^3 +
            (-8*s12^2 - 20*s12*s13 - 4*s13^2)*s23 + (-8*s12 - 12*s13)*
             s23^2) + p3q^4*(8*s12^3 + 8*s12^2*s13 +
            (8*s12^2 - 4*s12*s13 - 4*s13^2)*s23 - 4*s13*s23^2) +
          p1q^2*p2q^2*((-8*s12^2 - 24*s12*s13 - 16*s13^2)*s23 +
            (-4*s12 - 12*s13)*s23^2 + 4*s23^3) + p1q^3*p2q*
           ((8*s12 + 8*s13)*s23^2 + 8*s23^3) +
          p3q^3*(p2q*(16*s12^3 - 16*s12*s13^2 + (12*s12^2 - 32*s12*s13 -
                12*s13^2)*s23 + (-4*s12 - 12*s13)*s23^2) +
            p1q*(8*s12^3 + 8*s12^2*s13 + (-4*s12^2 - 20*s12*s13 - 8*s13^2)*
               s23 + (-12*s12 - 8*s13)*s23^2)) +
          p3q^2*(p2q^2*(8*s12^3 - 24*s12^2*s13 - 24*s12*s13^2 + 8*s13^3 +
              (-4*s12^2 - 56*s12*s13 - 4*s13^2)*s23 + (-12*s12 - 12*s13)*s23^
                2) + p1q^2*((-16*s12^2 - 24*s12*s13 - 8*s13^2)*s23 +
              (-12*s12 - 4*s13)*s23^2 + 4*s23^3) + p1q*p2q*
             (8*s12^3 - 8*s12^2*s13 - 16*s12*s13^2 + (-16*s12^2 -
                60*s12*s13 - 20*s13^2)*s23 + (-16*s12 - 12*s13)*s23^2 +
              8*s23^3)) + p3q*(p2q^3*(-16*s12^2*s13 + 16*s13^3 +
              (-12*s12^2 - 32*s12*s13 + 12*s13^2)*s23 + (-12*s12 - 4*s13)*s23^
                2) + p1q*p2q^2*(-16*s12^2*s13 - 8*s12*s13^2 + 8*s13^3 +
              (-20*s12^2 - 60*s12*s13 - 16*s13^2)*s23 + (-12*s12 - 16*s13)*
               s23^2 + 8*s23^3) + p1q^3*((8*s12 + 8*s13)*s23^2 + 8*s23^3) +
            p1q^2*p2q*((-8*s12^2 - 16*s12*s13 - 8*s13^2)*s23 +
              (16*s12 + 16*s13)*s23^2 + 24*s23^3)))*
         Log(s12/(s12 + s13 + s23)))/(p2q^4*(9*s12 + 9*s13)*s23^2 +
         p3q^4*(9*s12 + 9*s13)*s23^2 - 9*p1q^2*p2q^2*s23^3 +
         p1q*p2q^3*((9*s12 + 9*s13)*s23^2 - 9*s23^3) +
         p3q^2*(p2q^2*(54*s12 + 54*s13)*s23^2 - 9*p1q^2*s23^3 +
           p1q*p2q*((27*s12 + 27*s13)*s23^2 - 27*s23^3)) +
         p3q*(p2q^3*(36*s12 + 36*s13)*s23^2 - 18*p1q^2*p2q*s23^3 +
           p1q*p2q^2*((27*s12 + 27*s13)*s23^2 - 27*s23^3)) +
         p3q^3*(p2q*(36*s12 + 36*s13)*s23^2 + p1q*((9*s12 + 9*s13)*s23^2 -
             9*s23^3))) + ((p2q^4*(28*s12*s13^2 + 28*s13^3 +
            (-14*s12^2 - 14*s12*s13 + 28*s13^2)*s23 - 14*s12*s23^2) +
          p1q*p2q^3*(28*s12*s13^2 + 28*s13^3 + (-28*s12^2 - 70*s12*s13 -
              14*s13^2)*s23 + (-28*s12 - 42*s13)*s23^2) +
          p3q^4*(28*s12^3 + 28*s12^2*s13 + (28*s12^2 - 14*s12*s13 - 14*s13^2)*
             s23 - 14*s13*s23^2) + p1q^2*p2q^2*
           ((-28*s12^2 - 84*s12*s13 - 56*s13^2)*s23 + (-14*s12 - 42*s13)*
             s23^2 + 14*s23^3) + p1q^3*p2q*((28*s12 + 28*s13)*s23^2 +
            28*s23^3) + p3q^3*(p2q*(56*s12^3 - 56*s12*s13^2 +
              (42*s12^2 - 112*s12*s13 - 42*s13^2)*s23 + (-14*s12 - 42*s13)*
               s23^2) + p1q*(28*s12^3 + 28*s12^2*s13 + (-14*s12^2 -
                70*s12*s13 - 28*s13^2)*s23 + (-42*s12 - 28*s13)*s23^2)) +
          p3q^2*(p2q^2*(28*s12^3 - 84*s12^2*s13 - 84*s12*s13^2 + 28*s13^3 +
              (-14*s12^2 - 196*s12*s13 - 14*s13^2)*s23 + (-42*s12 - 42*s13)*
               s23^2) + p1q^2*((-56*s12^2 - 84*s12*s13 - 28*s13^2)*s23 +
              (-42*s12 - 14*s13)*s23^2 + 14*s23^3) +
            p1q*p2q*(28*s12^3 - 28*s12^2*s13 - 56*s12*s13^2 +
              (-56*s12^2 - 210*s12*s13 - 70*s13^2)*s23 + (-56*s12 - 42*s13)*
               s23^2 + 28*s23^3)) + p3q*(p2q^3*(-56*s12^2*s13 + 56*s13^3 +
              (-42*s12^2 - 112*s12*s13 + 42*s13^2)*s23 + (-42*s12 - 14*s13)*
               s23^2) + p1q*p2q^2*(-56*s12^2*s13 - 28*s12*s13^2 + 28*s13^3 +
              (-70*s12^2 - 210*s12*s13 - 56*s13^2)*s23 + (-42*s12 - 56*s13)*
               s23^2 + 28*s23^3) + p1q^3*((28*s12 + 28*s13)*s23^2 +
              28*s23^3) + p1q^2*p2q*((-28*s12^2 - 56*s12*s13 - 28*s13^2)*
               s23 + (56*s12 + 56*s13)*s23^2 + 84*s23^3)))*
         Log(s13/(s12 + s13 + s23)))/(p2q^4*(9*s12 + 9*s13)*s23^2 +
         p3q^4*(9*s12 + 9*s13)*s23^2 - 9*p1q^2*p2q^2*s23^3 +
         p1q*p2q^3*((9*s12 + 9*s13)*s23^2 - 9*s23^3) +
         p3q^2*(p2q^2*(54*s12 + 54*s13)*s23^2 - 9*p1q^2*s23^3 +
           p1q*p2q*((27*s12 + 27*s13)*s23^2 - 27*s23^3)) +
         p3q*(p2q^3*(36*s12 + 36*s13)*s23^2 - 18*p1q^2*p2q*s23^3 +
           p1q*p2q^2*((27*s12 + 27*s13)*s23^2 - 27*s23^3)) +
         p3q^3*(p2q*(36*s12 + 36*s13)*s23^2 + p1q*((9*s12 + 9*s13)*s23^2 -
             9*s23^3))) + ((p2q^4*(-4*s12*s13^2 - 4*s13^3 +
            (2*s12^2 + 2*s12*s13 - 4*s13^2)*s23 + 2*s12*s23^2) +
          p3q^4*(-4*s12^3 - 4*s12^2*s13 + (-4*s12^2 + 2*s12*s13 + 2*s13^2)*
             s23 + 2*s13*s23^2) + p1q*p2q^3*(-4*s12*s13^2 - 4*s13^3 +
            (4*s12^2 + 10*s12*s13 + 2*s13^2)*s23 + (4*s12 + 6*s13)*s23^2) +
          p1q^3*p2q*((-4*s12 - 4*s13)*s23^2 - 4*s23^3) +
          p1q^2*p2q^2*((4*s12^2 + 12*s12*s13 + 8*s13^2)*s23 +
            (2*s12 + 6*s13)*s23^2 - 2*s23^3) +
          p3q^3*(p1q*(-4*s12^3 - 4*s12^2*s13 + (2*s12^2 + 10*s12*s13 +
                4*s13^2)*s23 + (6*s12 + 4*s13)*s23^2) +
            p2q*(-8*s12^3 + 8*s12*s13^2 + (-6*s12^2 + 16*s12*s13 + 6*s13^2)*
               s23 + (2*s12 + 6*s13)*s23^2)) +
          p3q*(p2q^3*(8*s12^2*s13 - 8*s13^3 + (6*s12^2 + 16*s12*s13 -
                6*s13^2)*s23 + (6*s12 + 2*s13)*s23^2) +
            p1q^2*p2q*((4*s12^2 + 8*s12*s13 + 4*s13^2)*s23 +
              (-8*s12 - 8*s13)*s23^2 - 12*s23^3) +
            p1q^3*((-4*s12 - 4*s13)*s23^2 - 4*s23^3) + p1q*p2q^2*
             (8*s12^2*s13 + 4*s12*s13^2 - 4*s13^3 + (10*s12^2 + 30*s12*s13 +
                8*s13^2)*s23 + (6*s12 + 8*s13)*s23^2 - 4*s23^3)) +
          p3q^2*(p2q^2*(-4*s12^3 + 12*s12^2*s13 + 12*s12*s13^2 - 4*s13^3 +
              (2*s12^2 + 28*s12*s13 + 2*s13^2)*s23 + (6*s12 + 6*s13)*s23^2) +
            p1q*p2q*(-4*s12^3 + 4*s12^2*s13 + 8*s12*s13^2 + (8*s12^2 +
                30*s12*s13 + 10*s13^2)*s23 + (8*s12 + 6*s13)*s23^2 -
              4*s23^3) + p1q^2*((8*s12^2 + 12*s12*s13 + 4*s13^2)*s23 +
              (6*s12 + 2*s13)*s23^2 - 2*s23^3)))*Log(s23/(s12 + s13 + s23)))/
        (p2q^4*(s12 + s13)*s23^2 + p3q^4*(s12 + s13)*s23^2 -
         p1q^2*p2q^2*s23^3 + p1q*p2q^3*((s12 + s13)*s23^2 - s23^3) +
         p3q^2*(p2q^2*(6*s12 + 6*s13)*s23^2 - p1q^2*s23^3 +
           p1q*p2q*((3*s12 + 3*s13)*s23^2 - 3*s23^3)) +
         p3q*(p2q^3*(4*s12 + 4*s13)*s23^2 - 2*p1q^2*p2q*s23^3 +
           p1q*p2q^2*((3*s12 + 3*s13)*s23^2 - 3*s23^3)) +
         p3q^3*(p2q*(4*s12 + 4*s13)*s23^2 + p1q*((s12 + s13)*s23^2 -
             s23^3)))) + Log(p3q/(p1q + p2q + p3q))*
      ((p2q*(-4*s12 - 4*s13) + p3q*(-4*s12 - 4*s13) + 4*p1q*s23)/
        (9*p1q*s23 + 9*p2q*s23 + 9*p3q*s23) +
       ((p2q^4*(-8*s12*s13^2 - 8*s13^3 + (4*s12^2 + 4*s12*s13 - 8*s13^2)*
             s23 + 4*s12*s23^2) + p3q^4*(-8*s12^3 - 8*s12^2*s13 +
            (-8*s12^2 + 4*s12*s13 + 4*s13^2)*s23 + 4*s13*s23^2) +
          p1q*p2q^3*(-8*s12*s13^2 - 8*s13^3 + (8*s12^2 + 20*s12*s13 +
              4*s13^2)*s23 + (8*s12 + 12*s13)*s23^2) +
          p1q^3*p2q*((-8*s12 - 8*s13)*s23^2 - 8*s23^3) +
          p1q^2*p2q^2*((8*s12^2 + 24*s12*s13 + 16*s13^2)*s23 +
            (4*s12 + 12*s13)*s23^2 - 4*s23^3) +
          p3q^3*(p1q*(-8*s12^3 - 8*s12^2*s13 + (4*s12^2 + 20*s12*s13 +
                8*s13^2)*s23 + (12*s12 + 8*s13)*s23^2) +
            p2q*(-16*s12^3 + 16*s12*s13^2 + (-12*s12^2 + 32*s12*s13 +
                12*s13^2)*s23 + (4*s12 + 12*s13)*s23^2)) +
          p3q*(p2q^3*(16*s12^2*s13 - 16*s13^3 + (12*s12^2 + 32*s12*s13 -
                12*s13^2)*s23 + (12*s12 + 4*s13)*s23^2) +
            p1q^2*p2q*((8*s12^2 + 16*s12*s13 + 8*s13^2)*s23 +
              (-16*s12 - 16*s13)*s23^2 - 24*s23^3) +
            p1q^3*((-8*s12 - 8*s13)*s23^2 - 8*s23^3) + p1q*p2q^2*
             (16*s12^2*s13 + 8*s12*s13^2 - 8*s13^3 + (20*s12^2 + 60*s12*s13 +
                16*s13^2)*s23 + (12*s12 + 16*s13)*s23^2 - 8*s23^3)) +
          p3q^2*(p2q^2*(-8*s12^3 + 24*s12^2*s13 + 24*s12*s13^2 - 8*s13^3 +
              (4*s12^2 + 56*s12*s13 + 4*s13^2)*s23 + (12*s12 + 12*s13)*s23^
                2) + p1q*p2q*(-8*s12^3 + 8*s12^2*s13 + 16*s12*s13^2 +
              (16*s12^2 + 60*s12*s13 + 20*s13^2)*s23 + (16*s12 + 12*s13)*s23^
                2 - 8*s23^3) + p1q^2*((16*s12^2 + 24*s12*s13 + 8*s13^2)*s23 +
              (12*s12 + 4*s13)*s23^2 - 4*s23^3)))*
         Log((p2q + p3q)/(p1q + p2q + p3q)))/(p2q^4*(9*s12 + 9*s13)*s23^2 +
         p3q^4*(9*s12 + 9*s13)*s23^2 - 9*p1q^2*p2q^2*s23^3 +
         p1q*p2q^3*((9*s12 + 9*s13)*s23^2 - 9*s23^3) +
         p3q^2*(p2q^2*(54*s12 + 54*s13)*s23^2 - 9*p1q^2*s23^3 +
           p1q*p2q*((27*s12 + 27*s13)*s23^2 - 27*s23^3)) +
         p3q*(p2q^3*(36*s12 + 36*s13)*s23^2 - 18*p1q^2*p2q*s23^3 +
           p1q*p2q^2*((27*s12 + 27*s13)*s23^2 - 27*s23^3)) +
         p3q^3*(p2q*(36*s12 + 36*s13)*s23^2 + p1q*((9*s12 + 9*s13)*s23^2 -
             9*s23^3))) + ((p3q^3*(8*s12^2 + (4*s12 - 4*s13)*s23) +
          p2q^3*(8*s13^2 + (-4*s12 + 4*s13)*s23) + p1q^2*p2q*
           ((-8*s12 - 8*s13)*s23 - 8*s23^2) + p1q*p2q^2*
           (8*s13^2 - 8*s12*s23 - 4*s23^2) +
          p3q*(p2q^2*(-16*s12*s13 + 8*s13^2 + (-12*s12 - 4*s13)*s23) +
            p1q*p2q*(-16*s12*s13 + (-24*s12 - 24*s13)*s23 - 16*s23^2) +
            p1q^2*((-8*s12 - 8*s13)*s23 - 8*s23^2)) +
          p3q^2*(p2q*(8*s12^2 - 16*s12*s13 + (-4*s12 - 12*s13)*s23) +
            p1q*(8*s12^2 - 8*s13*s23 - 4*s23^2)))*Log(-s12 - s13 - s23))/
        (9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 + 9*p3q^3*s23^2 +
         p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) + p3q*(18*p1q*p2q*s23^2 +
           27*p2q^2*s23^2)) + ((p2q^3*(-8*s13^2 + (4*s12 - 4*s13)*s23) +
          p3q^3*(-8*s12^2 + (-4*s12 + 4*s13)*s23) +
          p1q*p2q^2*(-8*s13^2 + 8*s12*s23 + 4*s23^2) +
          p1q^2*p2q*((8*s12 + 8*s13)*s23 + 8*s23^2) +
          p3q^2*(p2q*(-8*s12^2 + 16*s12*s13 + (4*s12 + 12*s13)*s23) +
            p1q*(-8*s12^2 + 8*s13*s23 + 4*s23^2)) +
          p3q*(p2q^2*(16*s12*s13 - 8*s13^2 + (12*s12 + 4*s13)*s23) +
            p1q^2*((8*s12 + 8*s13)*s23 + 8*s23^2) +
            p1q*p2q*(16*s12*s13 + (24*s12 + 24*s13)*s23 + 16*s23^2)))*
         Log(s12/(s12 + s13 + s23)))/(9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 +
         9*p3q^3*s23^2 + p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
         p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
       ((p2q^4*(8*s12*s13^2 + 8*s13^3 + (-4*s12^2 - 4*s12*s13 + 8*s13^2)*
             s23 - 4*s12*s23^2) + p1q*p2q^3*(8*s12*s13^2 + 8*s13^3 +
            (-8*s12^2 - 20*s12*s13 - 4*s13^2)*s23 + (-8*s12 - 12*s13)*
             s23^2) + p3q^4*(8*s12^3 + 8*s12^2*s13 +
            (8*s12^2 - 4*s12*s13 - 4*s13^2)*s23 - 4*s13*s23^2) +
          p1q^2*p2q^2*((-8*s12^2 - 24*s12*s13 - 16*s13^2)*s23 +
            (-4*s12 - 12*s13)*s23^2 + 4*s23^3) + p1q^3*p2q*
           ((8*s12 + 8*s13)*s23^2 + 8*s23^3) +
          p3q^3*(p2q*(16*s12^3 - 16*s12*s13^2 + (12*s12^2 - 32*s12*s13 -
                12*s13^2)*s23 + (-4*s12 - 12*s13)*s23^2) +
            p1q*(8*s12^3 + 8*s12^2*s13 + (-4*s12^2 - 20*s12*s13 - 8*s13^2)*
               s23 + (-12*s12 - 8*s13)*s23^2)) +
          p3q^2*(p2q^2*(8*s12^3 - 24*s12^2*s13 - 24*s12*s13^2 + 8*s13^3 +
              (-4*s12^2 - 56*s12*s13 - 4*s13^2)*s23 + (-12*s12 - 12*s13)*s23^
                2) + p1q^2*((-16*s12^2 - 24*s12*s13 - 8*s13^2)*s23 +
              (-12*s12 - 4*s13)*s23^2 + 4*s23^3) + p1q*p2q*
             (8*s12^3 - 8*s12^2*s13 - 16*s12*s13^2 + (-16*s12^2 -
                60*s12*s13 - 20*s13^2)*s23 + (-16*s12 - 12*s13)*s23^2 +
              8*s23^3)) + p3q*(p2q^3*(-16*s12^2*s13 + 16*s13^3 +
              (-12*s12^2 - 32*s12*s13 + 12*s13^2)*s23 + (-12*s12 - 4*s13)*s23^
                2) + p1q*p2q^2*(-16*s12^2*s13 - 8*s12*s13^2 + 8*s13^3 +
              (-20*s12^2 - 60*s12*s13 - 16*s13^2)*s23 + (-12*s12 - 16*s13)*
               s23^2 + 8*s23^3) + p1q^3*((8*s12 + 8*s13)*s23^2 + 8*s23^3) +
            p1q^2*p2q*((-8*s12^2 - 16*s12*s13 - 8*s13^2)*s23 +
              (16*s12 + 16*s13)*s23^2 + 24*s23^3)))*
         Log(s23/(s12 + s13 + s23)))/(p2q^4*(9*s12 + 9*s13)*s23^2 +
         p3q^4*(9*s12 + 9*s13)*s23^2 - 9*p1q^2*p2q^2*s23^3 +
         p1q*p2q^3*((9*s12 + 9*s13)*s23^2 - 9*s23^3) +
         p3q^2*(p2q^2*(54*s12 + 54*s13)*s23^2 - 9*p1q^2*s23^3 +
           p1q*p2q*((27*s12 + 27*s13)*s23^2 - 27*s23^3)) +
         p3q*(p2q^3*(36*s12 + 36*s13)*s23^2 - 18*p1q^2*p2q*s23^3 +
           p1q*p2q^2*((27*s12 + 27*s13)*s23^2 - 27*s23^3)) +
         p3q^3*(p2q*(36*s12 + 36*s13)*s23^2 + p1q*((9*s12 + 9*s13)*s23^2 -
             9*s23^3)))) + Log(p2q/(p1q + p2q + p3q))*
      ((p2q*(-14*s12 - 14*s13) + p3q*(-14*s12 - 14*s13) + 14*p1q*s23)/
        (9*p1q*s23 + 9*p2q*s23 + 9*p3q*s23) +
       ((p2q^4*(-28*s12*s13^2 - 28*s13^3 + (14*s12^2 + 14*s12*s13 - 28*s13^2)*
             s23 + 14*s12*s23^2) + p3q^4*(-28*s12^3 - 28*s12^2*s13 +
            (-28*s12^2 + 14*s12*s13 + 14*s13^2)*s23 + 14*s13*s23^2) +
          p1q*p2q^3*(-28*s12*s13^2 - 28*s13^3 + (28*s12^2 + 70*s12*s13 +
              14*s13^2)*s23 + (28*s12 + 42*s13)*s23^2) +
          p1q^3*p2q*((-28*s12 - 28*s13)*s23^2 - 28*s23^3) +
          p1q^2*p2q^2*((28*s12^2 + 84*s12*s13 + 56*s13^2)*s23 +
            (14*s12 + 42*s13)*s23^2 - 14*s23^3) +
          p3q^3*(p1q*(-28*s12^3 - 28*s12^2*s13 + (14*s12^2 + 70*s12*s13 +
                28*s13^2)*s23 + (42*s12 + 28*s13)*s23^2) +
            p2q*(-56*s12^3 + 56*s12*s13^2 + (-42*s12^2 + 112*s12*s13 +
                42*s13^2)*s23 + (14*s12 + 42*s13)*s23^2)) +
          p3q*(p2q^3*(56*s12^2*s13 - 56*s13^3 + (42*s12^2 + 112*s12*s13 -
                42*s13^2)*s23 + (42*s12 + 14*s13)*s23^2) +
            p1q^2*p2q*((28*s12^2 + 56*s12*s13 + 28*s13^2)*s23 +
              (-56*s12 - 56*s13)*s23^2 - 84*s23^3) +
            p1q^3*((-28*s12 - 28*s13)*s23^2 - 28*s23^3) +
            p1q*p2q^2*(56*s12^2*s13 + 28*s12*s13^2 - 28*s13^3 +
              (70*s12^2 + 210*s12*s13 + 56*s13^2)*s23 + (42*s12 + 56*s13)*s23^
                2 - 28*s23^3)) + p3q^2*(p2q^2*(-28*s12^3 + 84*s12^2*s13 +
              84*s12*s13^2 - 28*s13^3 + (14*s12^2 + 196*s12*s13 + 14*s13^2)*
               s23 + (42*s12 + 42*s13)*s23^2) + p1q*p2q*(-28*s12^3 +
              28*s12^2*s13 + 56*s12*s13^2 + (56*s12^2 + 210*s12*s13 +
                70*s13^2)*s23 + (56*s12 + 42*s13)*s23^2 - 28*s23^3) +
            p1q^2*((56*s12^2 + 84*s12*s13 + 28*s13^2)*s23 + (42*s12 + 14*s13)*
               s23^2 - 14*s23^3)))*Log((p2q + p3q)/(p1q + p2q + p3q)))/
        (p2q^4*(9*s12 + 9*s13)*s23^2 + p3q^4*(9*s12 + 9*s13)*s23^2 -
         9*p1q^2*p2q^2*s23^3 + p1q*p2q^3*((9*s12 + 9*s13)*s23^2 - 9*s23^3) +
         p3q^2*(p2q^2*(54*s12 + 54*s13)*s23^2 - 9*p1q^2*s23^3 +
           p1q*p2q*((27*s12 + 27*s13)*s23^2 - 27*s23^3)) +
         p3q*(p2q^3*(36*s12 + 36*s13)*s23^2 - 18*p1q^2*p2q*s23^3 +
           p1q*p2q^2*((27*s12 + 27*s13)*s23^2 - 27*s23^3)) +
         p3q^3*(p2q*(36*s12 + 36*s13)*s23^2 + p1q*((9*s12 + 9*s13)*s23^2 -
             9*s23^3))) + ((p3q^3*(28*s12^2 + (14*s12 - 14*s13)*s23) +
          p2q^3*(28*s13^2 + (-14*s12 + 14*s13)*s23) +
          p1q^2*p2q*((-28*s12 - 28*s13)*s23 - 28*s23^2) +
          p1q*p2q^2*(28*s13^2 - 28*s12*s23 - 14*s23^2) +
          p3q*(p2q^2*(-56*s12*s13 + 28*s13^2 + (-42*s12 - 14*s13)*s23) +
            p1q*p2q*(-56*s12*s13 + (-84*s12 - 84*s13)*s23 - 56*s23^2) +
            p1q^2*((-28*s12 - 28*s13)*s23 - 28*s23^2)) +
          p3q^2*(p2q*(28*s12^2 - 56*s12*s13 + (-14*s12 - 42*s13)*s23) +
            p1q*(28*s12^2 - 28*s13*s23 - 14*s23^2)))*Log(-s12 - s13 - s23))/
        (9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 + 9*p3q^3*s23^2 +
         p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) + p3q*(18*p1q*p2q*s23^2 +
           27*p2q^2*s23^2)) + ((p2q^3*(-28*s13^2 + (14*s12 - 14*s13)*s23) +
          p3q^3*(-28*s12^2 + (-14*s12 + 14*s13)*s23) +
          p1q*p2q^2*(-28*s13^2 + 28*s12*s23 + 14*s23^2) +
          p1q^2*p2q*((28*s12 + 28*s13)*s23 + 28*s23^2) +
          p3q^2*(p2q*(-28*s12^2 + 56*s12*s13 + (14*s12 + 42*s13)*s23) +
            p1q*(-28*s12^2 + 28*s13*s23 + 14*s23^2)) +
          p3q*(p2q^2*(56*s12*s13 - 28*s13^2 + (42*s12 + 14*s13)*s23) +
            p1q^2*((28*s12 + 28*s13)*s23 + 28*s23^2) +
            p1q*p2q*(56*s12*s13 + (84*s12 + 84*s13)*s23 + 56*s23^2)))*
         Log(s13/(s12 + s13 + s23)))/(9*p1q*p2q^2*s23^2 + 9*p2q^3*s23^2 +
         9*p3q^3*s23^2 + p3q^2*(9*p1q*s23^2 + 27*p2q*s23^2) +
         p3q*(18*p1q*p2q*s23^2 + 27*p2q^2*s23^2)) +
       ((p2q^4*(28*s12*s13^2 + 28*s13^3 + (-14*s12^2 - 14*s12*s13 + 28*s13^2)*
             s23 - 14*s12*s23^2) + p1q*p2q^3*(28*s12*s13^2 + 28*s13^3 +
            (-28*s12^2 - 70*s12*s13 - 14*s13^2)*s23 + (-28*s12 - 42*s13)*
             s23^2) + p3q^4*(28*s12^3 + 28*s12^2*s13 +
            (28*s12^2 - 14*s12*s13 - 14*s13^2)*s23 - 14*s13*s23^2) +
          p1q^2*p2q^2*((-28*s12^2 - 84*s12*s13 - 56*s13^2)*s23 +
            (-14*s12 - 42*s13)*s23^2 + 14*s23^3) + p1q^3*p2q*
           ((28*s12 + 28*s13)*s23^2 + 28*s23^3) +
          p3q^3*(p2q*(56*s12^3 - 56*s12*s13^2 + (42*s12^2 - 112*s12*s13 -
                42*s13^2)*s23 + (-14*s12 - 42*s13)*s23^2) +
            p1q*(28*s12^3 + 28*s12^2*s13 + (-14*s12^2 - 70*s12*s13 -
                28*s13^2)*s23 + (-42*s12 - 28*s13)*s23^2)) +
          p3q^2*(p2q^2*(28*s12^3 - 84*s12^2*s13 - 84*s12*s13^2 + 28*s13^3 +
              (-14*s12^2 - 196*s12*s13 - 14*s13^2)*s23 + (-42*s12 - 42*s13)*
               s23^2) + p1q^2*((-56*s12^2 - 84*s12*s13 - 28*s13^2)*s23 +
              (-42*s12 - 14*s13)*s23^2 + 14*s23^3) +
            p1q*p2q*(28*s12^3 - 28*s12^2*s13 - 56*s12*s13^2 +
              (-56*s12^2 - 210*s12*s13 - 70*s13^2)*s23 + (-56*s12 - 42*s13)*
               s23^2 + 28*s23^3)) + p3q*(p2q^3*(-56*s12^2*s13 + 56*s13^3 +
              (-42*s12^2 - 112*s12*s13 + 42*s13^2)*s23 + (-42*s12 - 14*s13)*
               s23^2) + p1q*p2q^2*(-56*s12^2*s13 - 28*s12*s13^2 + 28*s13^3 +
              (-70*s12^2 - 210*s12*s13 - 56*s13^2)*s23 + (-42*s12 - 56*s13)*
               s23^2 + 28*s23^3) + p1q^3*((28*s12 + 28*s13)*s23^2 +
              28*s23^3) + p1q^2*p2q*((-28*s12^2 - 56*s12*s13 - 28*s13^2)*
               s23 + (56*s12 + 56*s13)*s23^2 + 84*s23^3)))*
         Log(s23/(s12 + s13 + s23)))/(p2q^4*(9*s12 + 9*s13)*s23^2 +
         p3q^4*(9*s12 + 9*s13)*s23^2 - 9*p1q^2*p2q^2*s23^3 +
         p1q*p2q^3*((9*s12 + 9*s13)*s23^2 - 9*s23^3) +
         p3q^2*(p2q^2*(54*s12 + 54*s13)*s23^2 - 9*p1q^2*s23^3 +
           p1q*p2q*((27*s12 + 27*s13)*s23^2 - 27*s23^3)) +
         p3q*(p2q^3*(36*s12 + 36*s13)*s23^2 - 18*p1q^2*p2q*s23^3 +
           p1q*p2q^2*((27*s12 + 27*s13)*s23^2 - 27*s23^3)) +
         p3q^3*(p2q*(36*s12 + 36*s13)*s23^2 + p1q*((9*s12 + 9*s13)*s23^2 -
             9*s23^3)))) + Log(s13/(s12 + s13 + s23))*
      ((p3q^2*(-7*s12^3 - 21*s12^2*s13 + (-7*s12^2 - 14*s12*s13)*s23) +
         p2q^2*(-14*s12^3 - 21*s12^2*s13 - 7*s13^3 +
           (-14*s12^2 - 7*s12*s13 - 7*s13^2)*s23) +
         p1q*p2q*(-7*s12^2*s13 + 7*s12*s13^2 + (7*s12^2 + 14*s12*s13 +
             14*s13^2)*s23 + (7*s12 + 14*s13)*s23^2) +
         p1q^2*((-7*s12^2 - 7*s12*s13)*s23 + (-14*s12 - 7*s13)*s23^2 -
           7*s23^3) + p3q*(p2q*(-21*s12^3 - 35*s12^2*s13 + 14*s12*s13^2 +
             (-21*s12^2 - 14*s12*s13)*s23) + p1q*(7*s12^3 - 7*s12^2*s13 +
             21*s12^2*s23 + 14*s12*s23^2)))/
        (p1q*p2q*(9*s12^2*s23 + 9*s12*s23^2) +
         p2q^2*(9*s12^2*s23 + 9*s12*s23^2) + p3q^2*(9*s12^2*s23 +
           9*s12*s23^2) + p3q*(p1q*(9*s12^2*s23 + 9*s12*s23^2) +
           p2q*(18*s12^2*s23 + 18*s12*s23^2))) +
       ((p3q^3*(28*s12^5 + 28*s12^4*s13 + (21*s12^4 + 28*s12^3*s13 -
              21*s12^2*s13^2)*s23 + (7*s12^3 + 21*s12^2*s13)*s23^2) +
          p2q^3*(28*s12^3*s13^2 + 28*s12^2*s13^3 +
            (-14*s12^4 - 7*s12^2*s13^2 - 7*s13^4)*s23 +
            (7*s12*s13^2 - 7*s13^3)*s23^2) + p1q*p2q^2*(28*s12^3*s13^2 +
            28*s12^2*s13^3 + (-28*s12^4 - 42*s12^2*s13^2 + 14*s12*s13^3)*
             s23 + (-14*s12^2*s13 + 21*s12*s13^2 + 21*s13^3)*s23^2 +
            (-14*s12*s13 + 21*s13^2)*s23^3) + p1q^2*p2q*
           ((-28*s12^4 - 28*s12^3*s13 - 56*s12^2*s13^2)*s23 +
            (-28*s12^2*s13 - 28*s12*s13^2)*s23^2 + (21*s12^2 - 42*s12*s13 -
              21*s13^2)*s23^3 + (7*s12 - 21*s13)*s23^4) +
          p1q^3*((28*s12^3 + 28*s12^2*s13)*s23^2 + (42*s12^2 + 14*s12*s13)*
             s23^3 + (21*s12 + 7*s13)*s23^4 + 7*s23^5) +
          p3q^2*(p2q*(28*s12^5 - 28*s12^4*s13 - 56*s12^3*s13^2 +
              (-7*s12^4 - 14*s12^3*s13 - 77*s12^2*s13^2 + 14*s12*s13^3)*s23 +
              (7*s12^3 + 35*s12^2*s13 + 14*s12*s13^2)*s23^2) +
            p1q*(28*s12^5 + 28*s12^4*s13 + (-28*s12^4 + 14*s12^3*s13 -
                42*s12^2*s13^2)*s23 + (-35*s12^3 + 35*s12^2*s13)*s23^2 -
              7*s12^2*s23^3)) + p3q*(p2q^2*(-56*s12^4*s13 - 28*s12^3*s13^2 +
              28*s12^2*s13^3 + (-42*s12^4 - 42*s12^3*s13 - 63*s12^2*s13^2 +
                14*s12*s13^3 - 7*s13^4)*s23 + (14*s12^2*s13 + 21*s12*s13^2 -
                7*s13^3)*s23^2) + p1q*p2q*(-56*s12^4*s13 - 56*s12^3*s13^2 +
              (-112*s12^4 - 98*s12^3*s13 - 140*s12^2*s13^2 + 14*s12*s13^3)*
               s23 + (-84*s12^3 - 28*s12^2*s13 + 14*s12*s13^2 + 14*s13^3)*s23^
                2 + (-28*s12^2 - 14*s12*s13 + 14*s13^2)*s23^3) +
            p1q^2*((-56*s12^4 - 28*s12^3*s13 - 28*s12^2*s13^2)*s23 +
              (-42*s12^3 - 14*s12*s13^2)*s23^2 + (-7*s12^2 - 28*s12*s13 -
                7*s13^2)*s23^3 + (-7*s12 - 7*s13)*s23^4)))*
         Log(s23/(s12 + s13 + s23)))/(p2q^3*(9*s12^3 + 9*s12^2*s13)*s23^2 +
         p3q^3*(9*s12^3 + 9*s12^2*s13)*s23^2 - 9*p1q^2*p2q*s12^2*s23^3 +
         p1q*p2q^2*((9*s12^3 + 9*s12^2*s13)*s23^2 - 9*s12^2*s23^3) +
         p3q*(p2q^2*(27*s12^3 + 27*s12^2*s13)*s23^2 - 9*p1q^2*s12^2*s23^3 +
           p1q*p2q*((18*s12^3 + 18*s12^2*s13)*s23^2 - 18*s12^2*s23^3)) +
         p3q^2*(p2q*(27*s12^3 + 27*s12^2*s13)*s23^2 +
           p1q*((9*s12^3 + 9*s12^2*s13)*s23^2 - 9*s12^2*s23^3))) +
       ((p3q^2*(-21*s12^3 + 7*s12^2*s13 - 7*s12^2*s23) +
          p2q^2*(14*s12^2*s13 - 7*s12*s13^2 + 7*s13^3 +
            (14*s12^2 - 14*s12*s13 + 7*s13^2)*s23) +
          p1q*p2q*(14*s12^2*s13 - 14*s12*s13^2 + (28*s12^2 - 14*s12*s13 -
              14*s13^2)*s23 + (14*s12 - 14*s13)*s23^2) +
          p1q^2*((14*s12^2 + 14*s12*s13)*s23 + (21*s12 + 7*s13)*s23^2 +
            7*s23^3) + p3q*(p1q*(-14*s12^3 + 14*s12^2*s13) +
            p2q*(-14*s12^3 + 28*s12^2*s13 - 14*s12*s13^2 + (14*s12^2 -
                14*s12*s13)*s23)))*Log((s12 + s23)/(s12 + s13 + s23)))/
        (9*p1q*p2q*s12^2*s23 + 9*p2q^2*s12^2*s23 + 9*p3q^2*s12^2*s23 +
         p3q*(9*p1q*s12^2*s23 + 18*p2q*s12^2*s23))) +
     Log(s12/(s12 + s13 + s23))*
      ((p3q^2*(-2*s12^3 - 6*s12*s13^2 - 4*s13^3 + (-2*s12^2 - 2*s12*s13 -
             4*s13^2)*s23) + p2q^2*(-6*s12*s13^2 - 2*s13^3 +
           (-4*s12*s13 - 2*s13^2)*s23) + p1q*p2q*(-2*s12*s13^2 + 2*s13^3 +
           6*s13^2*s23 + 4*s13*s23^2) + p1q^2*((-2*s12*s13 - 2*s13^2)*s23 +
           (-2*s12 - 4*s13)*s23^2 - 2*s23^3) +
         p3q*(p2q*(4*s12^2*s13 - 10*s12*s13^2 - 6*s13^3 +
             (-4*s12*s13 - 6*s13^2)*s23) + p1q*(2*s12^2*s13 - 2*s12*s13^2 +
             (4*s12^2 + 4*s12*s13 + 2*s13^2)*s23 + (4*s12 + 2*s13)*s23^2)))/
        (p1q*p2q*(9*s13^2*s23 + 9*s13*s23^2) +
         p2q^2*(9*s13^2*s23 + 9*s13*s23^2) + p3q^2*(9*s13^2*s23 +
           9*s13*s23^2) + p3q*(p1q*(9*s13^2*s23 + 9*s13*s23^2) +
           p2q*(18*s13^2*s23 + 18*s13*s23^2))) +
       ((p3q^3*(8*s12^3*s13^2 + 8*s12^2*s13^3 + (-2*s12^4 - 2*s12^2*s13^2 -
              4*s13^4)*s23 + (-2*s12^3 + 2*s12^2*s13)*s23^2) +
          p2q^3*(8*s12*s13^4 + 8*s13^5 + (-6*s12^2*s13^2 + 8*s12*s13^3 +
              6*s13^4)*s23 + (6*s12*s13^2 + 2*s13^3)*s23^2) +
          p1q*p2q^2*(8*s12*s13^4 + 8*s13^5 + (-12*s12^2*s13^2 + 4*s12*s13^3 -
              8*s13^4)*s23 + (10*s12*s13^2 - 10*s13^3)*s23^2 -
            2*s13^2*s23^3) + p1q^2*p2q*((-8*s12^2*s13^2 - 8*s12*s13^3 -
              16*s13^4)*s23 + (-4*s12^2*s13 - 12*s13^3)*s23^2 +
            (-2*s12^2 - 8*s12*s13 - 2*s13^2)*s23^3 + (-2*s12 - 2*s13)*
             s23^4) + p1q^3*((8*s12*s13^2 + 8*s13^3)*s23^2 +
            (4*s12*s13 + 12*s13^2)*s23^3 + (2*s12 + 6*s13)*s23^4 + 2*s23^5) +
          p3q^2*(p2q*(8*s12^3*s13^2 - 8*s12^2*s13^3 - 16*s12*s13^4 +
              (-2*s12^4 + 4*s12^3*s13 - 18*s12^2*s13^2 - 12*s12*s13^3 -
                12*s13^4)*s23 + (-2*s12^3 + 6*s12^2*s13 + 4*s12*s13^2)*s23^
                2) + p1q*(8*s12^3*s13^2 + 8*s12^2*s13^3 + (4*s12^3*s13 -
                12*s12^2*s13^2 - 8*s13^4)*s23 + (6*s12^3 + 6*s12^2*s13 -
                4*s12*s13^2)*s23^2 + (6*s12^2 - 4*s12*s13)*s23^3)) +
          p3q*(p2q^2*(-16*s12^2*s13^3 - 8*s12*s13^4 + 8*s13^5 +
              (4*s12^3*s13 - 22*s12^2*s13^2 - 4*s12*s13^3 - 2*s13^4)*s23 +
              (4*s12^2*s13 + 10*s12*s13^2 + 2*s13^3)*s23^2) +
            p1q*p2q*(-16*s12^2*s13^3 - 16*s12*s13^4 + (4*s12^3*s13 -
                40*s12^2*s13^2 - 28*s12*s13^3 - 32*s13^4)*s23 +
              (4*s12^3 + 4*s12^2*s13 - 8*s12*s13^2 - 24*s13^3)*s23^2 +
              (4*s12^2 - 4*s12*s13 - 8*s13^2)*s23^3) +
            p1q^2*((-16*s12^2*s13^2 - 8*s12*s13^3 - 8*s13^4)*s23 +
              (-8*s12^2*s13 - 8*s12*s13^2)*s23^2 + (-6*s12^2 - 12*s12*s13 +
                6*s13^2)*s23^3 + (-6*s12 + 2*s13)*s23^4)))*
         Log(s23/(s12 + s13 + s23)))/(p2q^3*(9*s12*s13^2 + 9*s13^3)*s23^2 +
         p3q^3*(9*s12*s13^2 + 9*s13^3)*s23^2 - 9*p1q^2*p2q*s13^2*s23^3 +
         p1q*p2q^2*((9*s12*s13^2 + 9*s13^3)*s23^2 - 9*s13^2*s23^3) +
         p3q*(p2q^2*(27*s12*s13^2 + 27*s13^3)*s23^2 - 9*p1q^2*s13^2*s23^3 +
           p1q*p2q*((18*s12*s13^2 + 18*s13^3)*s23^2 - 18*s13^2*s23^3)) +
         p3q^2*(p2q*(27*s12*s13^2 + 27*s13^3)*s23^2 +
           p1q*((9*s12*s13^2 + 9*s13^3)*s23^2 - 9*s13^2*s23^3))) +
       ((p1q*p2q*(4*s12*s13^2 - 4*s13^3) + p2q^2*(2*s12*s13^2 - 6*s13^3 -
            2*s13^2*s23) + p3q^2*(2*s12^3 - 2*s12^2*s13 + 4*s12*s13^2 +
            (2*s12^2 - 4*s12*s13 + 4*s13^2)*s23) +
          p1q^2*((4*s12*s13 + 4*s13^2)*s23 + (2*s12 + 6*s13)*s23^2 +
            2*s23^3) + p3q*(p2q*(-4*s12^2*s13 + 8*s12*s13^2 - 4*s13^3 +
              (-4*s12*s13 + 4*s13^2)*s23) + p1q*(-4*s12^2*s13 + 4*s12*s13^2 +
              (-4*s12^2 - 4*s12*s13 + 8*s13^2)*s23 + (-4*s12 + 4*s13)*s23^
                2)))*Log((s13 + s23)/(s12 + s13 + s23)))/
        (9*p1q*p2q*s13^2*s23 + 9*p2q^2*s13^2*s23 + 9*p3q^2*s13^2*s23 +
         p3q*(9*p1q*s13^2*s23 + 18*p2q*s13^2*s23))) +
     ((p2q^4*(40*s12*s13^2 + 40*s13^3 + (-20*s12^2 - 20*s12*s13 + 40*s13^2)*
           s23 - 20*s12*s23^2) + p1q*p2q^3*(40*s12*s13^2 + 40*s13^3 +
          (-40*s12^2 - 100*s12*s13 - 20*s13^2)*s23 + (-40*s12 - 60*s13)*
           s23^2) + p3q^4*(40*s12^3 + 40*s12^2*s13 +
          (40*s12^2 - 20*s12*s13 - 20*s13^2)*s23 - 20*s13*s23^2) +
        p1q^2*p2q^2*((-40*s12^2 - 120*s12*s13 - 80*s13^2)*s23 +
          (-20*s12 - 60*s13)*s23^2 + 20*s23^3) +
        p1q^3*p2q*((40*s12 + 40*s13)*s23^2 + 40*s23^3) +
        p3q^3*(p2q*(80*s12^3 - 80*s12*s13^2 + (60*s12^2 - 160*s12*s13 -
              60*s13^2)*s23 + (-20*s12 - 60*s13)*s23^2) +
          p1q*(40*s12^3 + 40*s12^2*s13 + (-20*s12^2 - 100*s12*s13 - 40*s13^2)*
             s23 + (-60*s12 - 40*s13)*s23^2)) +
        p3q^2*(p2q^2*(40*s12^3 - 120*s12^2*s13 - 120*s12*s13^2 + 40*s13^3 +
            (-20*s12^2 - 280*s12*s13 - 20*s13^2)*s23 + (-60*s12 - 60*s13)*
             s23^2) + p1q^2*((-80*s12^2 - 120*s12*s13 - 40*s13^2)*s23 +
            (-60*s12 - 20*s13)*s23^2 + 20*s23^3) +
          p1q*p2q*(40*s12^3 - 40*s12^2*s13 - 80*s12*s13^2 +
            (-80*s12^2 - 300*s12*s13 - 100*s13^2)*s23 + (-80*s12 - 60*s13)*
             s23^2 + 40*s23^3)) + p3q*(p2q^3*(-80*s12^2*s13 + 80*s13^3 +
            (-60*s12^2 - 160*s12*s13 + 60*s13^2)*s23 + (-60*s12 - 20*s13)*
             s23^2) + p1q*p2q^2*(-80*s12^2*s13 - 40*s12*s13^2 + 40*s13^3 +
            (-100*s12^2 - 300*s12*s13 - 80*s13^2)*s23 + (-60*s12 - 80*s13)*
             s23^2 + 40*s23^3) + p1q^3*((40*s12 + 40*s13)*s23^2 + 40*s23^3) +
          p1q^2*p2q*((-40*s12^2 - 80*s12*s13 - 40*s13^2)*s23 +
            (80*s12 + 80*s13)*s23^2 + 120*s23^3)))*
       PolyLog(2, p1q/(p1q + p2q + p3q)))/(p2q^4*(9*s12 + 9*s13)*s23^2 +
       p3q^4*(9*s12 + 9*s13)*s23^2 - 9*p1q^2*p2q^2*s23^3 +
       p1q*p2q^3*((9*s12 + 9*s13)*s23^2 - 9*s23^3) +
       p3q^2*(p2q^2*(54*s12 + 54*s13)*s23^2 - 9*p1q^2*s23^3 +
         p1q*p2q*((27*s12 + 27*s13)*s23^2 - 27*s23^3)) +
       p3q*(p2q^3*(36*s12 + 36*s13)*s23^2 - 18*p1q^2*p2q*s23^3 +
         p1q*p2q^2*((27*s12 + 27*s13)*s23^2 - 27*s23^3)) +
       p3q^3*(p2q*(36*s12 + 36*s13)*s23^2 + p1q*((9*s12 + 9*s13)*s23^2 -
           9*s23^3))) + ((p1q*p2q*(4*s12*s13^2 - 4*s13^3) +
        p2q^2*(2*s12*s13^2 - 6*s13^3 - 2*s13^2*s23) +
        p3q^2*(2*s12^3 - 2*s12^2*s13 + 4*s12*s13^2 +
          (2*s12^2 - 4*s12*s13 + 4*s13^2)*s23) +
        p1q^2*((4*s12*s13 + 4*s13^2)*s23 + (2*s12 + 6*s13)*s23^2 + 2*s23^3) +
        p3q*(p2q*(-4*s12^2*s13 + 8*s12*s13^2 - 4*s13^3 +
            (-4*s12*s13 + 4*s13^2)*s23) + p1q*(-4*s12^2*s13 + 4*s12*s13^2 +
            (-4*s12^2 - 4*s12*s13 + 8*s13^2)*s23 + (-4*s12 + 4*s13)*s23^2)))*
       PolyLog(2, s12/(s12 + s13 + s23)))/(9*p1q*p2q*s13^2*s23 +
       9*p2q^2*s13^2*s23 + 9*p3q^2*s13^2*s23 +
       p3q*(9*p1q*s13^2*s23 + 18*p2q*s13^2*s23)) +
     ((p3q^2*(-21*s12^3 + 7*s12^2*s13 - 7*s12^2*s23) +
        p2q^2*(14*s12^2*s13 - 7*s12*s13^2 + 7*s13^3 +
          (14*s12^2 - 14*s12*s13 + 7*s13^2)*s23) +
        p1q*p2q*(14*s12^2*s13 - 14*s12*s13^2 + (28*s12^2 - 14*s12*s13 -
            14*s13^2)*s23 + (14*s12 - 14*s13)*s23^2) +
        p1q^2*((14*s12^2 + 14*s12*s13)*s23 + (21*s12 + 7*s13)*s23^2 +
          7*s23^3) + p3q*(p1q*(-14*s12^3 + 14*s12^2*s13) +
          p2q*(-14*s12^3 + 28*s12^2*s13 - 14*s12*s13^2 +
            (14*s12^2 - 14*s12*s13)*s23)))*PolyLog(2, s13/(s12 + s13 + s23)))/
      (9*p1q*p2q*s12^2*s23 + 9*p2q^2*s12^2*s23 + 9*p3q^2*s12^2*s23 +
       p3q*(9*p1q*s12^2*s23 + 18*p2q*s12^2*s23)) +
     ((p3q^3*(-40*s12^5*s13^2 - 40*s12^4*s13^3 + (2*s12^6 - 19*s12^4*s13^2 -
            30*s12^3*s13^3 + 27*s12^2*s13^4)*s23 +
          (2*s12^5 - 2*s12^4*s13 - 7*s12^3*s13^2 - 23*s12^2*s13^3)*s23^2) +
        p2q^3*(-40*s12^3*s13^4 - 40*s12^2*s13^5 +
          (22*s12^4*s13^2 - 10*s12^3*s13^3 + s12^2*s13^4 + 7*s13^6)*s23 +
          (-8*s12^3*s13^2 - 2*s12^2*s13^3 - 7*s12*s13^4 + 7*s13^5)*s23^2) +
        p1q*p2q^2*(-40*s12^3*s13^4 - 40*s12^2*s13^5 +
          (44*s12^4*s13^2 - 6*s12^3*s13^3 + 56*s12^2*s13^4 - 14*s12*s13^5)*
           s23 + (-14*s12^3*s13^2 + 26*s12^2*s13^3 - 21*s12*s13^4 - 21*s13^5)*
           s23^2 + (2*s12^2*s13^2 + 14*s12*s13^3 - 21*s13^4)*s23^3) +
        p1q^2*p2q*((40*s12^4*s13^2 + 40*s12^3*s13^3 + 80*s12^2*s13^4)*s23 +
          (4*s12^4*s13 - 2*s12^3*s13^2 + 42*s12^2*s13^3 + 28*s12*s13^4)*
           s23^2 + (2*s12^4 + 8*s12^3*s13 - 21*s12^2*s13^2 + 42*s12*s13^3 +
            21*s13^4)*s23^3 + (2*s12^3 + 2*s12^2*s13 - 7*s12*s13^2 +
            21*s13^3)*s23^4) + p1q^3*((-40*s12^3*s13^2 - 40*s12^2*s13^3)*
           s23^2 + (-4*s12^3*s13 - 58*s12^2*s13^2 - 14*s12*s13^3)*s23^3 +
          (-2*s12^3 - 6*s12^2*s13 - 21*s12*s13^2 - 7*s13^3)*s23^4 +
          (-2*s12^2 - 7*s13^2)*s23^5) +
        p3q^2*(p2q*(-40*s12^5*s13^2 + 40*s12^4*s13^3 + 80*s12^3*s13^4 +
            (2*s12^6 - 4*s12^5*s13 + 31*s12^4*s13^2 + 28*s12^3*s13^3 +
              97*s12^2*s13^4 - 14*s12*s13^5)*s23 + (2*s12^5 - 6*s12^4*s13 -
              13*s12^3*s13^2 - 39*s12^2*s13^3 - 14*s12*s13^4)*s23^2) +
          p1q*(-40*s12^5*s13^2 - 40*s12^4*s13^3 +
            (-4*s12^5*s13 + 46*s12^4*s13^2 - 16*s12^3*s13^3 + 54*s12^2*s13^4)*
             s23 + (-6*s12^5 - 6*s12^4*s13 + 41*s12^3*s13^2 - 39*s12^2*s13^3)*
             s23^2 + (-6*s12^4 + 4*s12^3*s13 + 7*s12^2*s13^2)*s23^3)) +
        p3q*(p2q^2*(80*s12^4*s13^3 + 40*s12^3*s13^4 - 40*s12^2*s13^5 +
            (-4*s12^5*s13 + 72*s12^4*s13^2 + 48*s12^3*s13^3 +
              71*s12^2*s13^4 - 14*s12*s13^5 + 7*s13^6)*s23 +
            (-4*s12^4*s13 - 14*s12^3*s13^2 - 18*s12^2*s13^3 - 21*s12*s13^4 +
              7*s13^5)*s23^2) + p1q*p2q*(80*s12^4*s13^3 + 80*s12^3*s13^4 +
            (-4*s12^5*s13 + 170*s12^4*s13^2 + 138*s12^3*s13^3 +
              190*s12^2*s13^4 - 14*s12*s13^5)*s23 + (-4*s12^5 - 4*s12^4*s13 +
              98*s12^3*s13^2 + 58*s12^2*s13^3 - 14*s12*s13^4 - 14*s13^5)*
             s23^2 + (-4*s12^4 + 4*s12^3*s13 + 40*s12^2*s13^2 +
              14*s12*s13^3 - 14*s13^4)*s23^3) +
          p1q^2*((80*s12^4*s13^2 + 40*s12^3*s13^3 + 40*s12^2*s13^4)*s23 +
            (8*s12^4*s13 + 52*s12^3*s13^2 - 2*s12^2*s13^3 + 14*s12*s13^4)*
             s23^2 + (6*s12^4 + 12*s12^3*s13 - s12^2*s13^2 + 28*s12*s13^3 +
              7*s13^4)*s23^3 + (6*s12^3 - 2*s12^2*s13 + 7*s12*s13^2 +
              7*s13^3)*s23^4)))*PolyLog(2, s23/(s12 + s13 + s23)))/
      (p2q^3*(9*s12^3*s13^2 + 9*s12^2*s13^3)*s23^2 +
       p3q^3*(9*s12^3*s13^2 + 9*s12^2*s13^3)*s23^2 - 9*p1q^2*p2q*s12^2*s13^2*
        s23^3 + p1q*p2q^2*((9*s12^3*s13^2 + 9*s12^2*s13^3)*s23^2 -
         9*s12^2*s13^2*s23^3) + p3q*(p2q^2*(27*s12^3*s13^2 + 27*s12^2*s13^3)*
          s23^2 - 9*p1q^2*s12^2*s13^2*s23^3 +
         p1q*p2q*((18*s12^3*s13^2 + 18*s12^2*s13^3)*s23^2 -
           18*s12^2*s13^2*s23^3)) +
       p3q^2*(p2q*(27*s12^3*s13^2 + 27*s12^2*s13^3)*s23^2 +
         p1q*((9*s12^3*s13^2 + 9*s12^2*s13^3)*s23^2 - 9*s12^2*s13^2*s23^3))));
