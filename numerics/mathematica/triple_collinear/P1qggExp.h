l P0AvgExp = (2*ep^2*(9*p1q*s12*(2*s13 + s23) - p2q*s13*(9*s13 + s23) +
        p1q*s23*(9*s13 + s23) + p2q*s12*(9*s13 + 8*s23) +
        p3q*(-9*s12^2 + 9*s12*s13 - s12*s23 + 8*s13*s23)))/
      (9*(p1q + p2q + p3q)*s12*s13) +
     (2*(-2*p1q^3*(p2q + p3q)*s23^2*(s12 + s13 + s23)*
         (p2q*(2*s12 - 7*s13 + s23) + p3q*(-7*s12 + 2*s13 + s23)) +
        2*p1q^2*(p2q + p3q)*s23*(s12 + s13 + s23)*
         (p2q*p3q*(18*s12^2 - 18*s12*s13 + 18*s13^2 + 13*s12*s23 +
            13*s13*s23 - 2*s23^2) + p2q^2*(18*s12*s13 + 9*s13^2 - 2*s12*s23 +
            24*s13*s23 - s23^2) + p3q^2*(9*s12^2 - s23*(2*s13 + s23) +
            6*s12*(3*s13 + 4*s23))) +
        p1q*(p2q^4*s23*(18*s13^3 + s12^2*(36*s13 - 2*s23) + 59*s13^2*s23 +
            40*s13*s23^2 - s23^3 + s12*(54*s13^2 + 75*s13*s23 - 3*s23^2)) +
          p3q^4*s23*(18*s12^3 + s12^2*(54*s13 + 59*s23) -
            s23*(2*s13^2 + 3*s13*s23 + s23^2) + s12*(36*s13^2 + 75*s13*s23 +
              40*s23^2)) + p2q*p3q^3*(18*s12^3*(2*s13 + 5*s23) +
            2*s12^2*s23*(72*s13 + 85*s23) + 3*s12*s23*(18*s13^2 +
              45*s13*s23 + 28*s23^2) + s23*(36*s13^3 + 39*s13^2*s23 +
              7*s13*s23^2 - 4*s23^3)) + 2*p2q^2*p3q^2*(54*s12^3*s23 +
            3*s12*s23*(6*s13^2 + 14*s13*s23 + 9*s23^2) +
            s12^2*(-36*s13^2 + 18*s13*s23 + 76*s23^2) +
            s23*(54*s13^3 + 76*s13^2*s23 + 27*s13*s23^2 - 3*s23^3)) +
          p2q^3*p3q*(36*s12^3*s23 + 3*s12^2*s23*(18*s13 + 13*s23) +
            2*s23*(45*s13^3 + 85*s13^2*s23 + 42*s13*s23^2 - 2*s23^3) +
            s12*(36*s13^3 + 144*s13^2*s23 + 135*s13*s23^2 + 7*s23^3))) +
        (p2q + p3q)*(p2q^4*s13*s23*(18*s12^2 + 27*s12*s13 + 9*s13^2 +
            35*s12*s23 + 26*s13*s23 + 17*s23^2) + p3q^4*s12*s23*
           (9*s12^2 + 27*s12*s13 + 18*s13^2 + 26*s12*s23 + 35*s13*s23 +
            17*s23^2) + p2q*p3q^3*(9*s12^3*(4*s13 + 5*s23) +
            9*s12^2*s23*(11*s13 + 8*s23) + s13*s23*(18*s13^2 + 19*s13*s23 +
              9*s23^2) + s12*s23*(36*s13^2 + 80*s13*s23 + 35*s23^2)) +
          p2q^2*p3q^2*(45*s12^3*s23 + 9*s12*s23*(3*s13^2 + 8*s13*s23 +
              3*s23^2) + s13*s23*(45*s13^2 + 56*s13*s23 + 27*s23^2) +
            s12^2*(-72*s13^2 + 27*s13*s23 + 56*s23^2)) +
          p2q^3*p3q*(18*s12^3*s23 + s12^2*s23*(36*s13 + 19*s23) +
            s13*s23*(45*s13^2 + 72*s13*s23 + 35*s23^2) +
            s12*(36*s13^3 + 99*s13^2*s23 + 80*s13*s23^2 + 9*s23^3)))))/
      (9*p2q*p3q*(p2q + p3q)^2*(p1q + p2q + p3q)*s12*s13*s23^2) +
     (ep*(2*p1q*(p2q^4*s23^2*(2*s12^2 - 5*s12*s13 - 7*s13^2 + 3*s12*s23 -
            6*s13*s23 + s23^2) + p3q^4*s23^2*(-7*s12^2 - 5*s12*s13 +
            2*s13^2 - 6*s12*s23 + 3*s13*s23 + s23^2) +
          p2q*p3q^3*(-36*s12^3*s13 + 13*s13^2*s23^2 + 3*s23^4 +
            4*s12^2*s23*(-9*s13 + s23) - s12*s23^2*(35*s13 + 9*s23)) +
          2*p2q^2*p3q^2*(-3*s12*s23*(-6*s13^2 + 4*s13*s23 + s23^2) +
            s23^2*(11*s13^2 - 3*s13*s23 + 2*s23^2) +
            s12^2*(36*s13^2 + 18*s13*s23 + 11*s23^2)) +
          p2q^3*p3q*(13*s12^2*s23^2 + s23^2*(4*s13^2 - 9*s13*s23 + 3*s23^2) -
            s12*s13*(36*s13^2 + 36*s13*s23 + 35*s23^2))) -
        2*(p2q + p3q)*(p2q^4*s13*s23*(18*s12^2 + 27*s12*s13 + 9*s13^2 +
            35*s12*s23 + 26*s13*s23 + 17*s23^2) + p3q^4*s12*s23*
           (9*s12^2 + 27*s12*s13 + 18*s13^2 + 26*s12*s23 + 35*s13*s23 +
            17*s23^2) + p2q*p3q^3*(9*s12^3*(4*s13 + 3*s23) +
            9*s12^2*s23*(11*s13 + 5*s23) + s13*s23*(18*s13^2 + 19*s13*s23 +
              17*s23^2) + s12*s23*(54*s13^2 + 107*s13*s23 + 34*s23^2)) +
          p2q^2*p3q^2*(27*s12^3*s23 + s12^2*(-72*s13^2 + 45*s13*s23 +
              29*s23^2) + s13*s23*(27*s13^2 + 29*s13*s23 + 34*s23^2) +
            s12*s23*(45*s13^2 + 126*s13*s23 + 34*s23^2)) +
          p2q^3*p3q*(18*s12^3*s23 + s12^2*s23*(54*s13 + 19*s23) +
            s13*s23*(27*s13^2 + 45*s13*s23 + 34*s23^2) +
            s12*(36*s13^3 + 99*s13^2*s23 + 107*s13*s23^2 + 17*s23^3)))))/
      (9*p2q*p3q*(p2q + p3q)^2*(p1q + p2q + p3q)*s12*s13*s23^2) +
     Ioperator*((-4*(9*p1q*s12*(2*s13 + s23) - p2q*s13*(9*s13 + s23) +
          p1q*s23*(9*s13 + s23) + p2q*s12*(9*s13 + 8*s23) +
          p3q*(-9*s12^2 + 9*s12*s13 - s12*s23 + 8*s13*s23)))/
        (3*(p1q + p2q + p3q)*s12*s13) -
       (4*(-2*p1q^3*(p2q + p3q)*s23^2*(s12 + s13 + s23)*
           (p2q*(2*s12 - 7*s13 + s23) + p3q*(-7*s12 + 2*s13 + s23)) +
          2*p1q^2*(p2q + p3q)*s23*(s12 + s13 + s23)*
           (p2q*p3q*(18*s12^2 - 18*s12*s13 + 18*s13^2 + 13*s12*s23 +
              13*s13*s23 - 2*s23^2) + p2q^2*(18*s12*s13 + 9*s13^2 -
              2*s12*s23 + 24*s13*s23 - s23^2) + p3q^2*(9*s12^2 -
              s23*(2*s13 + s23) + 6*s12*(3*s13 + 4*s23))) +
          p1q*(p2q^4*s23*(18*s13^3 + s12^2*(36*s13 - 2*s23) + 59*s13^2*s23 +
              40*s13*s23^2 - s23^3 + s12*(54*s13^2 + 75*s13*s23 - 3*s23^2)) +
            p3q^4*s23*(18*s12^3 + s12^2*(54*s13 + 59*s23) - s23*(2*s13^2 +
                3*s13*s23 + s23^2) + s12*(36*s13^2 + 75*s13*s23 +
                40*s23^2)) + p2q*p3q^3*(18*s12^3*(2*s13 + 5*s23) +
              2*s12^2*s23*(72*s13 + 85*s23) + 3*s12*s23*(18*s13^2 +
                45*s13*s23 + 28*s23^2) + s23*(36*s13^3 + 39*s13^2*s23 +
                7*s13*s23^2 - 4*s23^3)) + 2*p2q^2*p3q^2*(54*s12^3*s23 +
              3*s12*s23*(6*s13^2 + 14*s13*s23 + 9*s23^2) + s12^2*(-36*s13^2 +
                18*s13*s23 + 76*s23^2) + s23*(54*s13^3 + 76*s13^2*s23 +
                27*s13*s23^2 - 3*s23^3)) + p2q^3*p3q*(36*s12^3*s23 +
              3*s12^2*s23*(18*s13 + 13*s23) + 2*s23*(45*s13^3 +
                85*s13^2*s23 + 42*s13*s23^2 - 2*s23^3) + s12*(36*s13^3 +
                144*s13^2*s23 + 135*s13*s23^2 + 7*s23^3))) +
          (p2q + p3q)*(p2q^4*s13*s23*(18*s12^2 + 27*s12*s13 + 9*s13^2 +
              35*s12*s23 + 26*s13*s23 + 17*s23^2) + p3q^4*s12*s23*
             (9*s12^2 + 27*s12*s13 + 18*s13^2 + 26*s12*s23 + 35*s13*s23 +
              17*s23^2) + p2q*p3q^3*(9*s12^3*(4*s13 + 5*s23) +
              9*s12^2*s23*(11*s13 + 8*s23) + s13*s23*(18*s13^2 + 19*s13*s23 +
                9*s23^2) + s12*s23*(36*s13^2 + 80*s13*s23 + 35*s23^2)) +
            p2q^2*p3q^2*(45*s12^3*s23 + 9*s12*s23*(3*s13^2 + 8*s13*s23 +
                3*s23^2) + s13*s23*(45*s13^2 + 56*s13*s23 + 27*s23^2) +
              s12^2*(-72*s13^2 + 27*s13*s23 + 56*s23^2)) +
            p2q^3*p3q*(18*s12^3*s23 + s12^2*s23*(36*s13 + 19*s23) +
              s13*s23*(45*s13^2 + 72*s13*s23 + 35*s23^2) + s12*(36*s13^3 +
                99*s13^2*s23 + 80*s13*s23^2 + 9*s23^3)))))/ep^2/
        (3*p2q*p3q*(p2q + p3q)^2*(p1q + p2q + p3q)*s12*s13*s23^2) +
       (-4*p1q*(p2q^4*s23^2*(2*s12^2 - 5*s12*s13 - 7*s13^2 + 3*s12*s23 -
             6*s13*s23 + s23^2) + p3q^4*s23^2*(-7*s12^2 - 5*s12*s13 +
             2*s13^2 - 6*s12*s23 + 3*s13*s23 + s23^2) +
           p2q*p3q^3*(-36*s12^3*s13 + 13*s13^2*s23^2 + 3*s23^4 +
             4*s12^2*s23*(-9*s13 + s23) - s12*s23^2*(35*s13 + 9*s23)) +
           2*p2q^2*p3q^2*(-3*s12*s23*(-6*s13^2 + 4*s13*s23 + s23^2) +
             s23^2*(11*s13^2 - 3*s13*s23 + 2*s23^2) +
             s12^2*(36*s13^2 + 18*s13*s23 + 11*s23^2)) +
           p2q^3*p3q*(13*s12^2*s23^2 + s23^2*(4*s13^2 - 9*s13*s23 + 3*
                s23^2) - s12*s13*(36*s13^2 + 36*s13*s23 + 35*s23^2))) +
         4*(p2q + p3q)*(p2q^4*s13*s23*(18*s12^2 + 27*s12*s13 + 9*s13^2 +
             35*s12*s23 + 26*s13*s23 + 17*s23^2) + p3q^4*s12*s23*
            (9*s12^2 + 27*s12*s13 + 18*s13^2 + 26*s12*s23 + 35*s13*s23 +
             17*s23^2) + p2q*p3q^3*(9*s12^3*(4*s13 + 3*s23) +
             9*s12^2*s23*(11*s13 + 5*s23) + s13*s23*(18*s13^2 + 19*s13*s23 +
               17*s23^2) + s12*s23*(54*s13^2 + 107*s13*s23 + 34*s23^2)) +
           p2q^2*p3q^2*(27*s12^3*s23 + s12^2*(-72*s13^2 + 45*s13*s23 + 29*
                s23^2) + s13*s23*(27*s13^2 + 29*s13*s23 + 34*s23^2) +
             s12*s23*(45*s13^2 + 126*s13*s23 + 34*s23^2)) +
           p2q^3*p3q*(18*s12^3*s23 + s12^2*s23*(54*s13 + 19*s23) +
             s13*s23*(27*s13^2 + 45*s13*s23 + 34*s23^2) +
             s12*(36*s13^3 + 99*s13^2*s23 + 107*s13*s23^2 + 17*s23^3))))/ep/
        (3*p2q*p3q*(p2q + p3q)^2*(p1q + p2q + p3q)*s12*s13*s23^2) +
       ((-2*ep*(9*p1q*s12*(2*s13 + s23) + p1q*s23*(9*s13 + 10*s23) +
            p2q*(9*s12*s13 - 9*s13^2 - s12*s23 - 10*s13*s23) -
            p3q*(9*s12^2 - 9*s12*s13 + 10*s12*s23 + s13*s23)))/
          (27*(p1q + p2q + p3q)*s12*s13) -
         (2*(-2*p1q^3*(p2q + p3q)*s23^2*(s12 + s13 + s23)*(11*p3q*s12 +
              10*p3q*(2*s13 + s23) + p2q*(20*s12 + 11*s13 + 10*s23)) +
            2*p1q^2*(p2q + p3q)*s23*(s12 + s13 + s23)*
             (2*p2q*p3q*(9*s12^2 - 9*s12*s13 + 9*s13^2 - 16*s12*s23 -
                16*s13*s23 - 10*s23^2) + p2q^2*(18*s12*s13 + 9*s13^2 -
                20*s12*s23 - 3*s13*s23 - 10*s23^2) + p3q^2*(9*s12^2 +
                3*s12*(6*s13 - s23) - 10*s23*(2*s13 + s23))) +
            (p2q + p3q)*(p2q^4*s13*s23*(18*s12^2 + 27*s12*s13 + 9*s13^2 +
                26*s12*s23 + 17*s13*s23 + 8*s23^2) + p3q^4*s12*s23*(9*s12^2 +
                27*s12*s13 + 18*s13^2 + 17*s12*s23 + 26*s13*s23 + 8*s23^2) +
              p2q*p3q^3*(9*s12^3*(4*s13 + 5*s23) + 9*s12^2*s23*(11*s13 +
                  8*s23) + s13*s23*(18*s13^2 + 28*s13*s23 + 9*s23^2) +
                s12*s23*(36*s13^2 + 71*s13*s23 + 26*s23^2)) +
              p2q^2*p3q^2*(45*s12^3*s23 + 9*s12*s23*(3*s13^2 + 8*s13*s23 +
                  3*s23^2) + s13*s23*(45*s13^2 + 74*s13*s23 + 27*s23^2) +
                s12^2*(-72*s13^2 + 27*s13*s23 + 74*s23^2)) +
              p2q^3*p3q*(18*s12^3*s23 + 4*s12^2*s23*(9*s13 + 7*s23) +
                s13*s23*(45*s13^2 + 72*s13*s23 + 26*s23^2) +
                s12*(36*s13^3 + 99*s13^2*s23 + 71*s13*s23^2 + 9*s23^3))) +
            p1q*(p2q^4*s23*(18*s13^3 + 4*s12^2*(9*s13 - 5*s23) +
                23*s13^2*s23 - 5*s13*s23^2 - 10*s23^3 + 3*s12*(18*s13^2 +
                  7*s13*s23 - 10*s23^2)) + p3q^4*s23*(18*s12^3 +
                s12^2*(54*s13 + 23*s23) + s12*(36*s13^2 + 21*s13*s23 -
                  5*s23^2) - 10*s23*(2*s13^2 + 3*s13*s23 + s23^2)) +
              p2q^3*p3q*(36*s12^3*s23 + 3*s12^2*(18*s13 - 5*s23)*s23 +
                s12*(36*s13^3 + 144*s13^2*s23 - 27*s13*s23^2 - 92*s23^3) +
                s23*(90*s13^3 + 80*s13^2*s23 - 51*s13*s23^2 - 40*s23^3)) +
              2*p2q^2*p3q^2*(54*s12^3*s23 - 6*s12*s23*(-3*s13^2 +
                  11*s13*s23 + 9*s23^2) + s12^2*(-36*s13^2 + 18*s13*s23 +
                  31*s23^2) + s23*(54*s13^3 + 31*s13^2*s23 - 54*s13*s23^2 -
                  30*s23^3)) + p2q*p3q^3*(18*s12^3*(2*s13 + 5*s23) +
                16*s12^2*s23*(9*s13 + 5*s23) - 3*s12*s23*(-18*s13^2 +
                  9*s13*s23 + 17*s23^2) - s23*(-36*s13^3 + 15*s13^2*s23 +
                  92*s13*s23^2 + 40*s23^3)))))/ep/(27*p2q*p3q*(p2q + p3q)^2*
           (p1q + p2q + p3q)*s12*s13*s23^2) +
         (2*(p2q + p3q)*(p2q^4*s13*s23*(18*s12^2 + 27*s12*s13 + 9*s13^2 + 26*
                s12*s23 + 17*s13*s23 + 8*s23^2) + p3q^4*s12*s23*
              (9*s12^2 + 27*s12*s13 + 18*s13^2 + 17*s12*s23 + 26*s13*s23 + 8*
                s23^2) + p2q*p3q^3*(9*s12^3*(4*s13 + 3*s23) + 9*s12^2*s23*
                (11*s13 + 5*s23) + 2*s13*s23*(9*s13^2 + 14*s13*s23 +
                 4*s23^2) + 2*s12*s23*(27*s13^2 + 49*s13*s23 + 8*s23^2)) +
             p2q^2*p3q^2*(27*s12^3*s23 + s13*s23*(27*s13^2 + 47*s13*s23 +
                 16*s23^2) + s12*s23*(45*s13^2 + 126*s13*s23 + 16*s23^2) +
               s12^2*(-72*s13^2 + 45*s13*s23 + 47*s23^2)) +
             p2q^3*p3q*(18*s12^3*s23 + 2*s12^2*s23*(27*s13 + 14*s23) + s13*
                s23*(27*s13^2 + 45*s13*s23 + 16*s23^2) + s12*(36*s13^3 +
                 99*s13^2*s23 + 98*s13*s23^2 + 8*s23^3))) -
           2*p1q*(p2q^4*s23^2*(20*s12^2 + 31*s12*s13 + 11*s13^2 + 30*s12*
                s23 + 21*s13*s23 + 10*s23^2) + p3q^4*s23^2*(11*s12^2 + s12*
                (31*s13 + 21*s23) + 10*(2*s13^2 + 3*s13*s23 + s23^2)) +
             2*p2q^2*p3q^2*(3*s12*s23*(6*s13^2 + 14*s13*s23 + 17*s23^2) +
               s23^2*(29*s13^2 + 51*s13*s23 + 20*s23^2) + s12^2*(36*s13^2 +
                 18*s13*s23 + 29*s23^2)) + p2q*p3q^3*(-36*s12^3*s13 + 4*s12^2*
                s23*(-9*s13 + 10*s23) + s12*s23^2*(55*s13 + 72*s23) + s23^2*
                (49*s13^2 + 81*s13*s23 + 30*s23^2)) + p2q^3*p3q*
              (49*s12^2*s23^2 + 2*s23^2*(20*s13^2 + 36*s13*s23 + 15*s23^2) +
               s12*(-36*s13^3 - 36*s13^2*s23 + 55*s13*s23^2 + 81*s23^3))))/
          (27*p2q*p3q*(p2q + p3q)^2*(p1q + p2q + p3q)*s12*s13*s23^2))*
        Log(p1q/(p1q + p2q + p3q)) +
       ((2*ep*(p2q*(9*s12*s13 + 8*s12*s23 - s13*s23) -
            p3q*(9*s12^2 + s12*s23 + s13*s23) +
            p1q*(s23^2 + 9*s12*(s13 + s23))))/(3*(p1q + p2q + p3q)*s12*s13) -
         (2*(2*p1q^3*(p2q + p3q)*s23^2*(s12 + s13 + s23)*
             (p3q*(-7*s12 + 2*s13 + s23) + p2q*(2*s12 + 2*s13 + s23)) +
            2*p1q^2*(p2q + p3q)*s23*(s12 + s13 + s23)*
             (p2q^2*s23*(2*s12 + 3*s13 + s23) + p2q*p3q*(-18*s12^2 +
                9*s12*s13 - 13*s12*s23 + 5*s13*s23 + 2*s23^2) +
              p3q^2*(-9*s12^2 + s23*(2*s13 + s23) - 6*s12*(3*s13 + 4*s23))) +
            p1q*(p2q^4*s23^2*(2*s12^2 + 4*s13^2 + 5*s13*s23 + s23^2 +
                3*s12*(2*s13 + s23)) - p2q*p3q^3*(18*s12^3*(s13 + 5*s23) +
                2*s12^2*s23*(72*s13 + 85*s23) - s23^2*(6*s13^2 + 11*s13*s23 +
                  4*s23^2) + 3*s12*s23*(18*s13^2 + 45*s13*s23 + 28*s23^2)) +
              p3q^4*s23*(-18*s12^3 - s12^2*(54*s13 + 59*s23) +
                s23*(2*s13^2 + 3*s13*s23 + s23^2) - s12*(36*s13^2 +
                  75*s13*s23 + 40*s23^2)) - 2*p2q^2*p3q^2*(54*s12^3*s23 -
                s23^2*(5*s13^2 + 9*s13*s23 + 3*s23^2) + 3*s12*s23*
                 (-3*s13^2 + 5*s13*s23 + 9*s23^2) + s12^2*(-18*s13^2 +
                  27*s13*s23 + 76*s23^2)) + p2q^3*p3q*(-36*s12^3*s23 -
                39*s12^2*s23^2 + s23^2*(10*s13^2 + 15*s13*s23 + 4*s23^2) +
                s12*(-18*s13^3 + 18*s13*s23^2 - 7*s23^3))) +
            (p2q + p3q)*(p2q^4*s13*s23^2*(s12 + s13 + s23) - p3q^4*s12*s23*(
                9*s12^2 + 27*s12*s13 + 18*s13^2 + 26*s12*s23 + 35*s13*s23 +
                17*s23^2) - p2q*p3q^3*(s13^2*s23^2 + 72*s12^2*s23*
                 (s13 + s23) + 9*s12^3*(2*s13 + 5*s23) + s12*s23*(27*s13^2 +
                  62*s13*s23 + 35*s23^2)) - p2q^2*p3q^2*(45*s12^3*s23 +
                2*s13^2*s23^2 + 9*s12*s23*(s13^2 + 4*s13*s23 + 3*s23^2) +
                s12^2*(-36*s13^2 + 18*s13*s23 + 56*s23^2)) -
              p2q^3*p3q*(18*s12^3*s23 - s13*s23^3 + s12^2*s23*(9*s13 +
                  19*s23) + s12*(18*s13^3 + 27*s13^2*s23 + 17*s13*s23^2 +
                  9*s23^3)))))/ep/(3*p2q*p3q*(p2q + p3q)^2*(p1q + p2q + p3q)*
           s12*s13*s23^2) + (2*(p1q*(p3q^4*s23^2*(-7*s12^2 - 5*s12*s13 +
                2*s13^2 - 6*s12*s23 + 3*s13*s23 + s23^2) + p2q^4*s23^2*(
                2*s12^2 + 4*s12*s13 + 2*s13^2 + 3*s12*s23 + 3*s13*s23 +
                s23^2) + p2q*p3q^3*(-18*s12^3*s13 + 4*s12^2*s23^2 -
                s12*s23^2*(8*s13 + 9*s23) + s23^2*(4*s13^2 + 9*s13*s23 +
                  3*s23^2)) + 2*p2q^2*p3q^2*(-3*s12*s23^2*(s13 + s23) +
                2*s23^2*(s13^2 + 3*s13*s23 + s23^2) + s12^2*(18*s13^2 +
                  18*s13*s23 + 11*s23^2)) + p2q^3*p3q*(13*s12^2*s23^2 +
                s23^2*(4*s13^2 + 9*s13*s23 + 3*s23^2) - s12*s13*(18*s13^2 +
                  36*s13*s23 + 17*s23^2))) + (p2q + p3q)*
             (p2q^4*s13*s23^2*(s12 + s13 + s23) - p3q^4*s12*s23*(9*s12^2 +
                27*s12*s13 + 18*s13^2 + 26*s12*s23 + 35*s13*s23 + 17*s23^2) -
              p2q*p3q^3*(s13*(s13 - s23)*s23^2 + 9*s12^3*(2*s13 + 3*s23) +
                9*s12^2*s23*(6*s13 + 5*s23) + s12*s23*(27*s13^2 +
                  62*s13*s23 + 34*s23^2)) - p2q^2*p3q^2*(27*s12^3*s23 +
                2*s13*(s13 - s23)*s23^2 + s12^2*(-36*s13^2 + 18*s13*s23 +
                  29*s23^2) + s12*s23*(27*s13^2 + 63*s13*s23 + 34*s23^2)) -
              p2q^3*p3q*(18*s12^3*s23 - 2*s13*s23^3 + s12^2*s23*(27*s13 +
                  19*s23) + s12*(18*s13^3 + 45*s13^2*s23 + 44*s13*s23^2 +
                  17*s23^3)))))/(3*p2q*p3q*(p2q + p3q)^2*(p1q + p2q + p3q)*
           s12*s13*s23^2))*Log(p2q/(p1q + p2q + p3q)) +
       ((2*ep*(9*p1q*s12*s13 + p1q*s23*(9*s13 + s23) -
            p2q*(9*s13^2 + s12*s23 + s13*s23) + p3q*(9*s12*s13 - s12*s23 +
              8*s13*s23)))/(3*(p1q + p2q + p3q)*s12*s13) +
         (2*(-2*p1q^3*(p2q + p3q)*s23^2*(s12 + s13 + s23)*
             (p2q*(2*s12 - 7*s13 + s23) + p3q*(2*s12 + 2*s13 + s23)) +
            2*p1q^2*(p2q + p3q)*s23*(s12 + s13 + s23)*
             (-(p3q^2*s23*(3*s12 + 2*s13 + s23)) + p2q*p3q*(-9*s12*s13 +
                18*s13^2 - 5*s12*s23 + 13*s13*s23 - 2*s23^2) +
              p2q^2*(18*s12*s13 + 9*s13^2 - 2*s12*s23 + 24*s13*s23 -
                s23^2)) + (p2q + p3q)*(-(p3q^4*s12*s23^2*(s12 + s13 + s23)) +
              p2q^4*s13*s23*(18*s12^2 + 27*s12*s13 + 9*s13^2 + 35*s12*s23 +
                26*s13*s23 + 17*s23^2) + p2q*p3q^3*(18*s12^3*s13 +
                27*s12^2*s13*s23 + s12*s23*(9*s13^2 + 17*s13*s23 - s23^2) +
                s13*s23*(18*s13^2 + 19*s13*s23 + 9*s23^2)) + p2q^2*p3q^2*(
                18*s12*s13*s23*(s13 + 2*s23) + s12^2*(-36*s13^2 + 9*s13*s23 +
                  2*s23^2) + s13*s23*(45*s13^2 + 56*s13*s23 + 27*s23^2)) +
              p2q^3*p3q*(s12^2*s23*(27*s13 + s23) + 2*s12*s13*(9*s13^2 +
                  36*s13*s23 + 31*s23^2) + s13*s23*(45*s13^2 + 72*s13*s23 +
                  35*s23^2))) + p1q*(-(p3q^4*s23^2*(4*s12^2 + 6*s12*s13 +
                 2*s13^2 + 5*s12*s23 + 3*s13*s23 + s23^2)) +
              p2q^4*s23*(18*s13^3 + s12^2*(36*s13 - 2*s23) + 59*s13^2*s23 +
                40*s13*s23^2 - s23^3 + s12*(54*s13^2 + 75*s13*s23 -
                  3*s23^2)) + p2q*p3q^3*(18*s12^3*s13 - 10*s12^2*s23^2 -
                3*s12*s23^2*(6*s13 + 5*s23) + s23*(36*s13^3 + 39*s13^2*s23 +
                  7*s13*s23^2 - 4*s23^3)) + p2q^3*p3q*(6*s12^2*(9*s13 - s23)*
                 s23 + s12*(18*s13^3 + 144*s13^2*s23 + 135*s13*s23^2 -
                  11*s23^3) + 2*s23*(45*s13^3 + 85*s13^2*s23 + 42*s13*s23^2 -
                  2*s23^3)) - 2*p2q^2*p3q^2*(3*s12*s23*(-9*s13^2 -
                  5*s13*s23 + 3*s23^2) + s12^2*(18*s13^2 + 9*s13*s23 +
                  5*s23^2) + s23*(-54*s13^3 - 76*s13^2*s23 - 27*s13*s23^2 +
                  3*s23^3)))))/ep/(3*p2q*p3q*(p2q + p3q)^2*(p1q + p2q + p3q)*
           s12*s13*s23^2) + (-2*(p2q + p3q)*(-(p3q^4*s12*s23^2*(s12 + s13 +
                s23)) + p2q^4*s13*s23*(18*s12^2 + 27*s12*s13 + 9*s13^2 + 35*
                s12*s23 + 26*s13*s23 + 17*s23^2) + p2q*p3q^3*
              (18*s12^3*s13 + 45*s12^2*s13*s23 + s12*s23*(27*s13^2 +
                 44*s13*s23 - 2*s23^2) + s13*s23*(18*s13^2 + 19*s13*s23 +
                 17*s23^2)) + p2q^2*p3q^2*(s12*s23*(18*s13^2 + 63*s13*s23 -
                 2*s23^2) + s12^2*(-36*s13^2 + 27*s13*s23 + 2*s23^2) + s13*
                s23*(27*s13^2 + 29*s13*s23 + 34*s23^2)) +
             p2q^3*p3q*(s12^2*s23*(27*s13 + s23) + s13*s23*(27*s13^2 +
                 45*s13*s23 + 34*s23^2) + s12*(18*s13^3 + 54*s13^2*s23 +
                 62*s13*s23^2 - s23^3))) +
           2*p1q*(p2q^4*s23^2*(2*s12^2 - 5*s12*s13 - 7*s13^2 + 3*s12*s23 - 6*
                s13*s23 + s23^2) + p3q^4*s23^2*(2*s12^2 + 4*s12*s13 + 2*
                s13^2 + 3*s12*s23 + 3*s13*s23 + s23^2) +
             p2q*p3q^3*(-18*s12^3*s13 + 13*s13^2*s23^2 + 3*s23^4 + 4*s12^2*
                s23*(-9*s13 + s23) + s12*s23^2*(-17*s13 + 9*s23)) +
             2*p2q^2*p3q^2*(2*s12^2*(9*s13^2 + s23^2) + s23^2*(11*s13^2 -
                 3*s13*s23 + 2*s23^2) + 3*s12*s23*(6*s13^2 - s13*s23 +
                 2*s23^2)) + p2q^3*p3q*(4*s12^2*s23^2 + s23^2*(4*s13^2 -
                 9*s13*s23 + 3*s23^2) + s12*(-18*s13^3 - 8*s13*s23^2 +
                 9*s23^3))))/(3*p2q*p3q*(p2q + p3q)^2*(p1q + p2q + p3q)*s12*
           s13*s23^2))*Log(p3q/(p1q + p2q + p3q)) +
       ((4*ep*(9*p1q*s12*(2*s13 + s23) - p2q*s13*(9*s13 + s23) +
            p1q*s23*(9*s13 + s23) + p2q*s12*(9*s13 + 8*s23) +
            p3q*(-9*s12^2 + 9*s12*s13 - s12*s23 + 8*s13*s23)))/
          (3*(p1q + p2q + p3q)*s12*s13) +
         (4*(-2*p1q^3*(p2q + p3q)*s23^2*(s12 + s13 + s23)*
             (p2q*(2*s12 - 7*s13 + s23) + p3q*(-7*s12 + 2*s13 + s23)) +
            2*p1q^2*(p2q + p3q)*s23*(s12 + s13 + s23)*
             (p2q*p3q*(18*s12^2 - 18*s12*s13 + 18*s13^2 + 13*s12*s23 +
                13*s13*s23 - 2*s23^2) + p2q^2*(18*s12*s13 + 9*s13^2 -
                2*s12*s23 + 24*s13*s23 - s23^2) + p3q^2*(9*s12^2 -
                s23*(2*s13 + s23) + 6*s12*(3*s13 + 4*s23))) +
            p1q*(p2q^4*s23*(18*s13^3 + s12^2*(36*s13 - 2*s23) +
                59*s13^2*s23 + 40*s13*s23^2 - s23^3 + s12*(54*s13^2 +
                  75*s13*s23 - 3*s23^2)) + p3q^4*s23*(18*s12^3 +
                s12^2*(54*s13 + 59*s23) - s23*(2*s13^2 + 3*s13*s23 + s23^2) +
                s12*(36*s13^2 + 75*s13*s23 + 40*s23^2)) + p2q*p3q^3*(
                18*s12^3*(2*s13 + 5*s23) + 2*s12^2*s23*(72*s13 + 85*s23) +
                3*s12*s23*(18*s13^2 + 45*s13*s23 + 28*s23^2) +
                s23*(36*s13^3 + 39*s13^2*s23 + 7*s13*s23^2 - 4*s23^3)) +
              2*p2q^2*p3q^2*(54*s12^3*s23 + 3*s12*s23*(6*s13^2 + 14*s13*s23 +
                  9*s23^2) + s12^2*(-36*s13^2 + 18*s13*s23 + 76*s23^2) +
                s23*(54*s13^3 + 76*s13^2*s23 + 27*s13*s23^2 - 3*s23^3)) +
              p2q^3*p3q*(36*s12^3*s23 + 3*s12^2*s23*(18*s13 + 13*s23) +
                2*s23*(45*s13^3 + 85*s13^2*s23 + 42*s13*s23^2 - 2*s23^3) +
                s12*(36*s13^3 + 144*s13^2*s23 + 135*s13*s23^2 + 7*s23^3))) +
            (p2q + p3q)*(p2q^4*s13*s23*(18*s12^2 + 27*s12*s13 + 9*s13^2 +
                35*s12*s23 + 26*s13*s23 + 17*s23^2) + p3q^4*s12*s23*(
                9*s12^2 + 27*s12*s13 + 18*s13^2 + 26*s12*s23 + 35*s13*s23 +
                17*s23^2) + p2q*p3q^3*(9*s12^3*(4*s13 + 5*s23) +
                9*s12^2*s23*(11*s13 + 8*s23) + s13*s23*(18*s13^2 +
                  19*s13*s23 + 9*s23^2) + s12*s23*(36*s13^2 + 80*s13*s23 +
                  35*s23^2)) + p2q^2*p3q^2*(45*s12^3*s23 + 9*s12*s23*
                 (3*s13^2 + 8*s13*s23 + 3*s23^2) + s13*s23*(45*s13^2 +
                  56*s13*s23 + 27*s23^2) + s12^2*(-72*s13^2 + 27*s13*s23 +
                  56*s23^2)) + p2q^3*p3q*(18*s12^3*s23 + s12^2*s23*
                 (36*s13 + 19*s23) + s13*s23*(45*s13^2 + 72*s13*s23 +
                  35*s23^2) + s12*(36*s13^3 + 99*s13^2*s23 + 80*s13*s23^2 +
                  9*s23^3)))))/ep/(3*p2q*p3q*(p2q + p3q)^2*(p1q + p2q + p3q)*
           s12*s13*s23^2) + (4*p1q*(p2q^4*s23^2*(2*s12^2 - 5*s12*s13 - 7*
                s13^2 + 3*s12*s23 - 6*s13*s23 + s23^2) + p3q^4*s23^2*
              (-7*s12^2 - 5*s12*s13 + 2*s13^2 - 6*s12*s23 + 3*s13*s23 + s23^
                2) + p2q*p3q^3*(-36*s12^3*s13 + 13*s13^2*s23^2 + 3*s23^4 + 4*
                s12^2*s23*(-9*s13 + s23) - s12*s23^2*(35*s13 + 9*s23)) +
             2*p2q^2*p3q^2*(-3*s12*s23*(-6*s13^2 + 4*s13*s23 + s23^2) + s23^2*
                (11*s13^2 - 3*s13*s23 + 2*s23^2) + s12^2*(36*s13^2 +
                 18*s13*s23 + 11*s23^2)) + p2q^3*p3q*(13*s12^2*s23^2 + s23^2*
                (4*s13^2 - 9*s13*s23 + 3*s23^2) - s12*s13*(36*s13^2 +
                 36*s13*s23 + 35*s23^2))) - 4*(p2q + p3q)*
            (p2q^4*s13*s23*(18*s12^2 + 27*s12*s13 + 9*s13^2 + 35*s12*s23 + 26*
                s13*s23 + 17*s23^2) + p3q^4*s12*s23*(9*s12^2 + 27*s12*s13 +
               18*s13^2 + 26*s12*s23 + 35*s13*s23 + 17*s23^2) +
             p2q*p3q^3*(9*s12^3*(4*s13 + 3*s23) + 9*s12^2*s23*(11*s13 +
                 5*s23) + s13*s23*(18*s13^2 + 19*s13*s23 + 17*s23^2) + s12*
                s23*(54*s13^2 + 107*s13*s23 + 34*s23^2)) +
             p2q^2*p3q^2*(27*s12^3*s23 + s12^2*(-72*s13^2 + 45*s13*s23 +
                 29*s23^2) + s13*s23*(27*s13^2 + 29*s13*s23 + 34*s23^2) + s12*
                s23*(45*s13^2 + 126*s13*s23 + 34*s23^2)) +
             p2q^3*p3q*(18*s12^3*s23 + s12^2*s23*(54*s13 + 19*s23) + s13*s23*
                (27*s13^2 + 45*s13*s23 + 34*s23^2) + s12*(36*s13^3 +
                 99*s13^2*s23 + 107*s13*s23^2 + 17*s23^3))))/
          (3*p2q*p3q*(p2q + p3q)^2*(p1q + p2q + p3q)*s12*s13*s23^2))*
        Log(-s12 - s13 - s23) +
       ((2*ep*(9*p1q*s12*s13 + p1q*s23*(9*s13 + s23) -
            p2q*(9*s13^2 + s12*s23 + s13*s23) + p3q*(9*s12*s13 - s12*s23 +
              8*s13*s23)))/(3*(p1q + p2q + p3q)*s12*s13) +
         (2*(-2*p1q^3*(p2q + p3q)*s23^2*(s12 + s13 + s23)*
             (p2q*(2*s12 - 7*s13 + s23) + p3q*(2*s12 + 2*s13 + s23)) +
            2*p1q^2*(p2q + p3q)*s23*(s12 + s13 + s23)*
             (-(p3q^2*s23*(3*s12 + 2*s13 + s23)) + p2q*p3q*(-9*s12*s13 +
                18*s13^2 - 5*s12*s23 + 13*s13*s23 - 2*s23^2) +
              p2q^2*(18*s12*s13 + 9*s13^2 - 2*s12*s23 + 24*s13*s23 -
                s23^2)) + (p2q + p3q)*(-(p3q^4*s12*s23^2*(s12 + s13 + s23)) +
              p2q^4*s13*s23*(18*s12^2 + 27*s12*s13 + 9*s13^2 + 35*s12*s23 +
                26*s13*s23 + 17*s23^2) + p2q*p3q^3*(18*s12^3*s13 +
                27*s12^2*s13*s23 + s12*s23*(9*s13^2 + 17*s13*s23 - s23^2) +
                s13*s23*(18*s13^2 + 19*s13*s23 + 9*s23^2)) + p2q^2*p3q^2*(
                18*s12*s13*s23*(s13 + 2*s23) + s12^2*(-36*s13^2 + 9*s13*s23 +
                  2*s23^2) + s13*s23*(45*s13^2 + 56*s13*s23 + 27*s23^2)) +
              p2q^3*p3q*(s12^2*s23*(27*s13 + s23) + 2*s12*s13*(9*s13^2 +
                  36*s13*s23 + 31*s23^2) + s13*s23*(45*s13^2 + 72*s13*s23 +
                  35*s23^2))) + p1q*(-(p3q^4*s23^2*(4*s12^2 + 6*s12*s13 +
                 2*s13^2 + 5*s12*s23 + 3*s13*s23 + s23^2)) +
              p2q^4*s23*(18*s13^3 + s12^2*(36*s13 - 2*s23) + 59*s13^2*s23 +
                40*s13*s23^2 - s23^3 + s12*(54*s13^2 + 75*s13*s23 -
                  3*s23^2)) + p2q*p3q^3*(18*s12^3*s13 - 10*s12^2*s23^2 -
                3*s12*s23^2*(6*s13 + 5*s23) + s23*(36*s13^3 + 39*s13^2*s23 +
                  7*s13*s23^2 - 4*s23^3)) + p2q^3*p3q*(6*s12^2*(9*s13 - s23)*
                 s23 + s12*(18*s13^3 + 144*s13^2*s23 + 135*s13*s23^2 -
                  11*s23^3) + 2*s23*(45*s13^3 + 85*s13^2*s23 + 42*s13*s23^2 -
                  2*s23^3)) - 2*p2q^2*p3q^2*(3*s12*s23*(-9*s13^2 -
                  5*s13*s23 + 3*s23^2) + s12^2*(18*s13^2 + 9*s13*s23 +
                  5*s23^2) + s23*(-54*s13^3 - 76*s13^2*s23 - 27*s13*s23^2 +
                  3*s23^3)))))/ep/(3*p2q*p3q*(p2q + p3q)^2*(p1q + p2q + p3q)*
           s12*s13*s23^2) + (-2*(p2q + p3q)*(-(p3q^4*s12*s23^2*(s12 + s13 +
                s23)) + p2q^4*s13*s23*(18*s12^2 + 27*s12*s13 + 9*s13^2 + 35*
                s12*s23 + 26*s13*s23 + 17*s23^2) + p2q*p3q^3*
              (18*s12^3*s13 + 45*s12^2*s13*s23 + s12*s23*(27*s13^2 +
                 44*s13*s23 - 2*s23^2) + s13*s23*(18*s13^2 + 19*s13*s23 +
                 17*s23^2)) + p2q^2*p3q^2*(s12*s23*(18*s13^2 + 63*s13*s23 -
                 2*s23^2) + s12^2*(-36*s13^2 + 27*s13*s23 + 2*s23^2) + s13*
                s23*(27*s13^2 + 29*s13*s23 + 34*s23^2)) +
             p2q^3*p3q*(s12^2*s23*(27*s13 + s23) + s13*s23*(27*s13^2 +
                 45*s13*s23 + 34*s23^2) + s12*(18*s13^3 + 54*s13^2*s23 +
                 62*s13*s23^2 - s23^3))) +
           2*p1q*(p2q^4*s23^2*(2*s12^2 - 5*s12*s13 - 7*s13^2 + 3*s12*s23 - 6*
                s13*s23 + s23^2) + p3q^4*s23^2*(2*s12^2 + 4*s12*s13 + 2*
                s13^2 + 3*s12*s23 + 3*s13*s23 + s23^2) +
             p2q*p3q^3*(-18*s12^3*s13 + 13*s13^2*s23^2 + 3*s23^4 + 4*s12^2*
                s23*(-9*s13 + s23) + s12*s23^2*(-17*s13 + 9*s23)) +
             2*p2q^2*p3q^2*(2*s12^2*(9*s13^2 + s23^2) + s23^2*(11*s13^2 -
                 3*s13*s23 + 2*s23^2) + 3*s12*s23*(6*s13^2 - s13*s23 +
                 2*s23^2)) + p2q^3*p3q*(4*s12^2*s23^2 + s23^2*(4*s13^2 -
                 9*s13*s23 + 3*s23^2) + s12*(-18*s13^3 - 8*s13*s23^2 +
                 9*s23^3))))/(3*p2q*p3q*(p2q + p3q)^2*(p1q + p2q + p3q)*s12*
           s13*s23^2))*Log(s12/(s12 + s13 + s23)) +
       ((2*ep*(p2q*(9*s12*s13 + 8*s12*s23 - s13*s23) -
            p3q*(9*s12^2 + s12*s23 + s13*s23) +
            p1q*(s23^2 + 9*s12*(s13 + s23))))/(3*(p1q + p2q + p3q)*s12*s13) -
         (2*(2*p1q^3*(p2q + p3q)*s23^2*(s12 + s13 + s23)*
             (p3q*(-7*s12 + 2*s13 + s23) + p2q*(2*s12 + 2*s13 + s23)) +
            2*p1q^2*(p2q + p3q)*s23*(s12 + s13 + s23)*
             (p2q^2*s23*(2*s12 + 3*s13 + s23) + p2q*p3q*(-18*s12^2 +
                9*s12*s13 - 13*s12*s23 + 5*s13*s23 + 2*s23^2) +
              p3q^2*(-9*s12^2 + s23*(2*s13 + s23) - 6*s12*(3*s13 + 4*s23))) +
            p1q*(p2q^4*s23^2*(2*s12^2 + 4*s13^2 + 5*s13*s23 + s23^2 +
                3*s12*(2*s13 + s23)) - p2q*p3q^3*(18*s12^3*(s13 + 5*s23) +
                2*s12^2*s23*(72*s13 + 85*s23) - s23^2*(6*s13^2 + 11*s13*s23 +
                  4*s23^2) + 3*s12*s23*(18*s13^2 + 45*s13*s23 + 28*s23^2)) +
              p3q^4*s23*(-18*s12^3 - s12^2*(54*s13 + 59*s23) +
                s23*(2*s13^2 + 3*s13*s23 + s23^2) - s12*(36*s13^2 +
                  75*s13*s23 + 40*s23^2)) - 2*p2q^2*p3q^2*(54*s12^3*s23 -
                s23^2*(5*s13^2 + 9*s13*s23 + 3*s23^2) + 3*s12*s23*
                 (-3*s13^2 + 5*s13*s23 + 9*s23^2) + s12^2*(-18*s13^2 +
                  27*s13*s23 + 76*s23^2)) + p2q^3*p3q*(-36*s12^3*s23 -
                39*s12^2*s23^2 + s23^2*(10*s13^2 + 15*s13*s23 + 4*s23^2) +
                s12*(-18*s13^3 + 18*s13*s23^2 - 7*s23^3))) +
            (p2q + p3q)*(p2q^4*s13*s23^2*(s12 + s13 + s23) - p3q^4*s12*s23*(
                9*s12^2 + 27*s12*s13 + 18*s13^2 + 26*s12*s23 + 35*s13*s23 +
                17*s23^2) - p2q*p3q^3*(s13^2*s23^2 + 72*s12^2*s23*
                 (s13 + s23) + 9*s12^3*(2*s13 + 5*s23) + s12*s23*(27*s13^2 +
                  62*s13*s23 + 35*s23^2)) - p2q^2*p3q^2*(45*s12^3*s23 +
                2*s13^2*s23^2 + 9*s12*s23*(s13^2 + 4*s13*s23 + 3*s23^2) +
                s12^2*(-36*s13^2 + 18*s13*s23 + 56*s23^2)) -
              p2q^3*p3q*(18*s12^3*s23 - s13*s23^3 + s12^2*s23*(9*s13 +
                  19*s23) + s12*(18*s13^3 + 27*s13^2*s23 + 17*s13*s23^2 +
                  9*s23^3)))))/ep/(3*p2q*p3q*(p2q + p3q)^2*(p1q + p2q + p3q)*
           s12*s13*s23^2) + (2*(p1q*(p3q^4*s23^2*(-7*s12^2 - 5*s12*s13 +
                2*s13^2 - 6*s12*s23 + 3*s13*s23 + s23^2) + p2q^4*s23^2*(
                2*s12^2 + 4*s12*s13 + 2*s13^2 + 3*s12*s23 + 3*s13*s23 +
                s23^2) + p2q*p3q^3*(-18*s12^3*s13 + 4*s12^2*s23^2 -
                s12*s23^2*(8*s13 + 9*s23) + s23^2*(4*s13^2 + 9*s13*s23 +
                  3*s23^2)) + 2*p2q^2*p3q^2*(-3*s12*s23^2*(s13 + s23) +
                2*s23^2*(s13^2 + 3*s13*s23 + s23^2) + s12^2*(18*s13^2 +
                  18*s13*s23 + 11*s23^2)) + p2q^3*p3q*(13*s12^2*s23^2 +
                s23^2*(4*s13^2 + 9*s13*s23 + 3*s23^2) - s12*s13*(18*s13^2 +
                  36*s13*s23 + 17*s23^2))) + (p2q + p3q)*
             (p2q^4*s13*s23^2*(s12 + s13 + s23) - p3q^4*s12*s23*(9*s12^2 +
                27*s12*s13 + 18*s13^2 + 26*s12*s23 + 35*s13*s23 + 17*s23^2) -
              p2q*p3q^3*(s13*(s13 - s23)*s23^2 + 9*s12^3*(2*s13 + 3*s23) +
                9*s12^2*s23*(6*s13 + 5*s23) + s12*s23*(27*s13^2 +
                  62*s13*s23 + 34*s23^2)) - p2q^2*p3q^2*(27*s12^3*s23 +
                2*s13*(s13 - s23)*s23^2 + s12^2*(-36*s13^2 + 18*s13*s23 +
                  29*s23^2) + s12*s23*(27*s13^2 + 63*s13*s23 + 34*s23^2)) -
              p2q^3*p3q*(18*s12^3*s23 - 2*s13*s23^3 + s12^2*s23*(27*s13 +
                  19*s23) + s12*(18*s13^3 + 45*s13^2*s23 + 44*s13*s23^2 +
                  17*s23^3)))))/(3*p2q*p3q*(p2q + p3q)^2*(p1q + p2q + p3q)*
           s12*s13*s23^2))*Log(s13/(s12 + s13 + s23)) +
       ((6*ep*(p2q*(s12*s13 - s13^2 + s12*s23) + p3q*(-s12^2 + s12*s13 +
              s13*s23) + p1q*(2*s12*s13 + s12*s23 + s13*s23)))/
          ((p1q + p2q + p3q)*s12*s13) -
         (6*(p1q*(p3q^4*s12*s23^2*(s12 + s13 + s23) + p2q^4*s13*s23^2*(s12 +
                s13 + s23) + p2q*p3q^3*(4*s12^3*s13 + 4*s12^2*s13*s23 +
                s13*s23^2*(-s13 + s23) + s12*s23^2*(5*s13 + 2*s23)) -
              2*p2q^2*p3q^2*(s13*(s13 - s23)*s23^2 - s12*s23*(-2*s13^2 +
                  2*s13*s23 + s23^2) + s12^2*(4*s13^2 + 2*s13*s23 + s23^2)) +
              p2q^3*p3q*(-(s12^2*s23^2) + 2*s13*s23^3 + s12*(4*s13^3 +
                  4*s13^2*s23 + 5*s13*s23^2 + s23^3))) + (p2q + p3q)*
             (p2q^4*s13*s23*(2*s12^2 + 3*s12*s13 + s13^2 + 4*s12*s23 +
                3*s13*s23 + 2*s23^2) + p3q^4*s12*s23*(s12^2 +
                3*s12*(s13 + s23) + 2*(s13 + s23)^2) + p2q*p3q^3*(
                s12^3*(4*s13 + 3*s23) + s12^2*s23*(11*s13 + 5*s23) +
                2*s13*s23*(s13^2 + s13*s23 + s23^2) + 2*s12*s23*(3*s13^2 +
                  6*s13*s23 + 2*s23^2)) + p2q^2*p3q^2*(3*s12^3*s23 +
                s12^2*(-8*s13^2 + 5*s13*s23 + 3*s23^2) + s13*s23*(3*s13^2 +
                  3*s13*s23 + 4*s23^2) + s12*s23*(5*s13^2 + 14*s13*s23 +
                  4*s23^2)) + p2q^3*p3q*(2*s12^3*s23 + 2*s12^2*s23*
                 (3*s13 + s23) + s13*s23*(3*s13^2 + 5*s13*s23 + 4*s23^2) +
                s12*(4*s13^3 + 11*s13^2*s23 + 12*s13*s23^2 + 2*s23^3)))))/
          (p2q*p3q*(p2q + p3q)^2*(p1q + p2q + p3q)*s12*s13*s23^2) +
         (6*(2*p1q^3*(p2q + p3q)*(p3q*s12 + p2q*s13)*s23^2*(s12 + s13 +
              s23) + 2*p1q^2*(p2q + p3q)*s23*(s12 + s13 + s23)*
             (p2q^2*s13*(2*s12 + s13 + 3*s23) + p3q^2*s12*(s12 + 2*s13 +
                3*s23) + 2*p2q*p3q*(s12^2 + s12*(-s13 + s23) +
                s13*(s13 + s23))) + (p2q + p3q)*(p2q^4*s13*s23*(2*s12^2 +
                3*s12*s13 + s13^2 + 4*s12*s23 + 3*s13*s23 + 2*s23^2) +
              p3q^4*s12*s23*(s12^2 + 3*s12*(s13 + s23) + 2*(s13 + s23)^2) +
              p2q*p3q^3*(s12^3*(4*s13 + 5*s23) + s12^2*s23*(11*s13 + 8*s23) +
                s13*s23*(2*s13^2 + 2*s13*s23 + s23^2) + s12*s23*(4*s13^2 +
                  9*s13*s23 + 4*s23^2)) + p2q^2*p3q^2*(5*s12^3*s23 +
                s13*s23*(5*s13^2 + 6*s13*s23 + 3*s23^2) + s12*s23*
                 (3*s13^2 + 8*s13*s23 + 3*s23^2) + s12^2*(-8*s13^2 +
                  3*s13*s23 + 6*s23^2)) + p2q^3*p3q*(2*s12^3*s23 +
                2*s12^2*s23*(2*s13 + s23) + s13*s23*(5*s13^2 + 8*s13*s23 +
                  4*s23^2) + s12*(4*s13^3 + 11*s13^2*s23 + 9*s13*s23^2 +
                  s23^3))) + p1q*(p2q^4*s13*s23*(4*s12^2 + 6*s12*s13 +
                2*s13^2 + 9*s12*s23 + 7*s13*s23 + 5*s23^2) + p3q^4*s12*s23*(
                2*s12^2 + 6*s12*s13 + 4*s13^2 + 7*s12*s23 + 9*s13*s23 +
                5*s23^2) + 2*p2q^2*p3q^2*(6*s12^3*s23 + 2*s12*s23*
                 (s13^2 + 3*s13*s23 + 2*s23^2) + s13*s23*(6*s13^2 +
                  9*s13*s23 + 4*s23^2) + s12^2*(-4*s13^2 + 2*s13*s23 +
                  9*s23^2)) + p2q*p3q^3*(2*s12^3*(2*s13 + 5*s23) +
                4*s12^2*s23*(4*s13 + 5*s23) + s13*s23*(4*s13^2 + 5*s13*s23 +
                  2*s23^2) + s12*s23*(6*s13^2 + 17*s13*s23 + 11*s23^2)) +
              p2q^3*p3q*(4*s12^3*s23 + s12^2*s23*(6*s13 + 5*s23) +
                s13*s23*(10*s13^2 + 20*s13*s23 + 11*s23^2) +
                s12*(4*s13^3 + 16*s13^2*s23 + 17*s13*s23^2 + 2*s23^3)))))/ep/
          (p2q*p3q*(p2q + p3q)^2*(p1q + p2q + p3q)*s12*s13*s23^2))*
        Log(s23/(s12 + s13 + s23)));

l P0PolExp = P0AvgExp;

l P1PolExp = ((nl*(p3q^4*(-2*s12^4 - 2*s12^3*s13 + (-3*s12^3 - s12^2*s13)*s23 -
          s12^2*s23^2) + p2q^4*(-2*s12*s13^3 - 2*s13^4 +
          (-(s12*s13^2) - 3*s13^3)*s23 - s13^2*s23^2) +
        p1q*p2q^3*(-2*s12*s13^3 - 2*s13^4 + (s12*s13^2 - s13^3)*s23 +
          (s12*s13 + 2*s13^2)*s23^2 + s13*s23^3) +
        p1q^2*p2q^2*((2*s12*s13^2 + 2*s13^3)*s23 + (s12*s13 + 3*s13^2)*
           s23^2 + s13*s23^3) + p3q^3*(p2q*(-2*s12^4 + 2*s12^2*s13^2 +
            (-3*s12^3 - 2*s12^2*s13 - 3*s12*s13^2)*s23 + (-s12^2 - 3*s12*s13)*
             s23^2) + p1q*(-2*s12^4 - 2*s12^3*s13 + (-s12^3 + s12^2*s13)*
             s23 + (2*s12^2 + s12*s13)*s23^2 + s12*s23^3)) +
        p3q^2*(p2q^2*(2*s12^3*s13 + 4*s12^2*s13^2 + 2*s12*s13^3 +
            (-4*s12^2*s13 - 4*s12*s13^2)*s23 - 6*s12*s13*s23^2) +
          p1q*p2q*(2*s12^3*s13 + 2*s12^2*s13^2 + (3*s12^3 + s12^2*s13 -
              4*s12*s13^2)*s23 + (4*s12^2 - 3*s12*s13)*s23^2 + s12*s23^3) +
          p1q^2*((2*s12^3 + 2*s12^2*s13)*s23 + (3*s12^2 + s12*s13)*s23^2 +
            s12*s23^3)) + p3q*(p2q^3*(2*s12^2*s13^2 - 2*s13^4 +
            (-3*s12^2*s13 - 2*s12*s13^2 - 3*s13^3)*s23 + (-3*s12*s13 - s13^2)*
             s23^2) + p1q^2*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*s23 +
            (-s12^2 - 6*s12*s13 - s13^2)*s23^2 + (-s12 - s13)*s23^3) +
          p1q*p2q^2*(2*s12^2*s13^2 + 2*s12*s13^3 +
            (-4*s12^2*s13 + s12*s13^2 + 3*s13^3)*s23 + (-3*s12*s13 + 4*s13^2)*
             s23^2 + s13*s23^3))))/(3*p2q*p3q^3*s12*s13*s23^2 +
       p3q^2*(3*p1q*p2q*s12*s13*s23^2 + 6*p2q^2*s12*s13*s23^2) +
       p3q*(3*p1q*p2q^2*s12*s13*s23^2 + 3*p2q^3*s12*s13*s23^2)) +
     (p3q^5*((-36*s12^3 - 108*s12^2*s13 - 72*s12*s13^2)*s23 +
         (-104*s12^2 - 140*s12*s13)*s23^2 - 68*s12*s23^3) +
       p2q^5*((-72*s12^2*s13 - 108*s12*s13^2 - 36*s13^3)*s23 +
         (-140*s12*s13 - 104*s13^2)*s23^2 - 68*s13*s23^3) +
       p1q*p2q^4*((-144*s12^2*s13 - 216*s12*s13^2 - 72*s13^3)*s23 +
         (8*s12^2 - 300*s12*s13 - 236*s13^2)*s23^2 + (12*s12 - 160*s13)*
          s23^3 + 4*s23^4) + p1q^2*p2q^3*
        ((-144*s12^2*s13 - 216*s12*s13^2 - 72*s13^3)*s23 +
         (16*s12^2 - 320*s12*s13 - 264*s13^2)*s23^2 + (24*s12 - 184*s13)*
          s23^3 + 8*s23^4) + p1q^3*p2q^2*((16*s12^2 - 40*s12*s13 - 56*s13^2)*
          s23^2 + (24*s12 - 48*s13)*s23^3 + 8*s23^4) +
       p3q^4*(p2q*(-144*s12^3*s13 + (-216*s12^3 - 504*s12^2*s13 -
             216*s12*s13^2 - 72*s13^3)*s23 + (-392*s12^2 - 460*s12*s13 -
             76*s13^2)*s23^2 + (-208*s12 - 36*s13)*s23^3) +
         p1q*((-72*s12^3 - 216*s12^2*s13 - 144*s12*s13^2)*s23 +
           (-236*s12^2 - 300*s12*s13 + 8*s13^2)*s23^2 + (-160*s12 + 12*s13)*
            s23^3 + 4*s23^4)) +
       p3q^3*(p2q^2*(-144*s12^3*s13 + 288*s12^2*s13^2 +
           (-360*s12^3 - 504*s12^2*s13 - 252*s12*s13^2 - 252*s13^3)*s23 +
           (-512*s12^2 - 608*s12*s13 - 300*s13^2)*s23^2 +
           (-248*s12 - 144*s13)*s23^3) +
         p1q^2*((-72*s12^3 - 216*s12^2*s13 - 144*s12*s13^2)*s23 +
           (-264*s12^2 - 320*s12*s13 + 16*s13^2)*s23^2 + (-184*s12 + 24*s13)*
            s23^3 + 8*s23^4) + p1q*p2q*(-144*s12^3*s13 +
           (-360*s12^3 - 576*s12^2*s13 - 216*s12*s13^2 - 144*s13^3)*s23 +
           (-680*s12^2 - 540*s12*s13 - 156*s13^2)*s23^2 + (-336*s12 - 28*s13)*
            s23^3 + 16*s23^4)) +
       p3q*(p2q^4*(-144*s12*s13^3 + (-72*s12^3 - 216*s12^2*s13 -
             504*s12*s13^2 - 216*s13^3)*s23 + (-76*s12^2 - 460*s12*s13 -
             392*s13^2)*s23^2 + (-36*s12 - 208*s13)*s23^3) +
         p1q*p2q^3*(-144*s12*s13^3 + (-144*s12^3 - 216*s12^2*s13 -
             576*s12*s13^2 - 360*s13^3)*s23 + (-156*s12^2 - 540*s12*s13 -
             680*s13^2)*s23^2 + (-28*s12 - 336*s13)*s23^3 + 16*s23^4) +
         p1q^3*p2q*((-40*s12^2 - 80*s12*s13 - 40*s13^2)*s23^2 +
           (-24*s12 - 24*s13)*s23^3 + 16*s23^4) + p1q^2*p2q^2*
          ((-144*s12^3 - 144*s12^2*s13 - 216*s12*s13^2 - 216*s13^3)*s23 +
           (-232*s12^2 - 384*s12*s13 - 512*s13^2)*s23^2 + (-64*s12 - 272*s13)*
            s23^3 + 24*s23^4)) +
       p3q^2*(p2q^3*(288*s12^2*s13^2 - 144*s12*s13^3 +
           (-252*s12^3 - 252*s12^2*s13 - 504*s12*s13^2 - 360*s13^3)*s23 +
           (-300*s12^2 - 608*s12*s13 - 512*s13^2)*s23^2 +
           (-144*s12 - 248*s13)*s23^3) +
         p1q^3*((-56*s12^2 - 40*s12*s13 + 16*s13^2)*s23^2 +
           (-48*s12 + 24*s13)*s23^3 + 8*s23^4) + p1q*p2q^2*
          (288*s12^2*s13^2 + (-432*s12^3 - 144*s12^2*s13 - 144*s12*s13^2 -
             432*s13^3)*s23 + (-608*s12^2 - 336*s12*s13 - 608*s13^2)*s23^2 +
           (-216*s12 - 216*s13)*s23^3 + 24*s23^4) +
         p1q^2*p2q*((-216*s12^3 - 216*s12^2*s13 - 144*s12*s13^2 - 144*s13^3)*
            s23 + (-512*s12^2 - 384*s12*s13 - 232*s13^2)*s23^2 +
           (-272*s12 - 64*s13)*s23^3 + 24*s23^4)))/ep^2/
      ((3*p2q*p3q^4*s12*s13*s23^2 + p3q^3*(3*p1q*p2q*s12*s13*s23^2 +
          9*p2q^2*s12*s13*s23^2) + p3q^2*(6*p1q*p2q^2*s12*s13*s23^2 +
          9*p2q^3*s12*s13*s23^2) + p3q*(3*p1q*p2q^3*s12*s13*s23^2 +
          3*p2q^4*s12*s13*s23^2))) +
     (p3q^4*(54*s12^6*s13 + 108*s12^5*s13^2 + 54*s12^4*s13^3 +
         (49*s12^6 + 248*s12^5*s13 + 475*s12^4*s13^2 + 456*s12^3*s13^3 +
           180*s12^2*s13^4)*s23 + (135*s12^5 + 754*s12^4*s13 +
           1416*s12^3*s13^2 + 977*s12^2*s13^3 + 180*s12*s13^4)*s23^2 +
         (338*s12^4 + 1382*s12^3*s13 + 1579*s12^2*s13^2 + 535*s12*s13^3)*
          s23^3 + (427*s12^3 + 957*s12^2*s13 + 530*s12*s13^2)*s23^4 +
         (175*s12^2 + 175*s12*s13)*s23^5) +
       p2q^4*(54*s12^3*s13^4 + 108*s12^2*s13^5 + 54*s12*s13^6 +
         (180*s12^4*s13^2 + 456*s12^3*s13^3 + 475*s12^2*s13^4 +
           248*s12*s13^5 + 49*s13^6)*s23 + (180*s12^4*s13 + 977*s12^3*s13^2 +
           1416*s12^2*s13^3 + 754*s12*s13^4 + 135*s13^5)*s23^2 +
         (535*s12^3*s13 + 1579*s12^2*s13^2 + 1382*s12*s13^3 + 338*s13^4)*
          s23^3 + (530*s12^2*s13 + 957*s12*s13^2 + 427*s13^3)*s23^4 +
         (175*s12*s13 + 175*s13^2)*s23^5) + p1q^2*p2q^2*
        ((-54*s12^3*s13^3 - 108*s12^2*s13^4 - 54*s12*s13^5)*s23 +
         (-20*s12^4*s13 - 26*s12^3*s13^2 - 10*s12^2*s13^3 - 58*s12*s13^4 -
           54*s13^5)*s23^2 + (-20*s12^4 - 67*s12^3*s13 + 24*s12^2*s13^2 +
           216*s12*s13^3 + 55*s13^4)*s23^3 + (-55*s12^3 - 124*s12^2*s13 +
           58*s12*s13^2 + 172*s13^3)*s23^4 + (-50*s12^2 - 137*s12*s13 +
           3*s13^2)*s23^5 + (-15*s12 - 60*s13)*s23^6) +
       p1q^3*p2q*((45*s12^3*s13 - 45*s12*s13^3)*s23^3 +
         (45*s12^3 + 90*s12^2*s13 - 90*s12*s13^2 - 45*s13^3)*s23^4 +
         (90*s12^2 - 90*s13^2)*s23^5 + (45*s12 - 45*s13)*s23^6) +
       p1q*p2q^3*(54*s12^3*s13^4 + 108*s12^2*s13^5 + 54*s12*s13^6 +
         (180*s12^4*s13^2 + 407*s12^3*s13^3 + 382*s12^2*s13^4 +
           209*s12*s13^5 + 54*s13^6)*s23 + (160*s12^4*s13 +
           1006*s12^3*s13^2 + 1491*s12^2*s13^3 + 746*s12*s13^4 + 101*s13^5)*
          s23^2 + (-20*s12^4 + 518*s12^3*s13 + 1818*s12^2*s13^2 +
           1748*s12*s13^3 + 423*s13^4)*s23^3 + (-55*s12^3 + 551*s12^2*s13 +
           1270*s12*s13^2 + 664*s13^3)*s23^4 + (-50*s12^2 + 178*s12*s13 +
           273*s13^2)*s23^5 + (-15*s12 - 15*s13)*s23^6) +
       p3q^2*(p2q^2*(-54*s12^5*s13^2 - 522*s12^4*s13^3 - 522*s12^3*s13^4 -
           54*s12^2*s13^5 + (376*s12^5*s13 + 592*s12^4*s13^2 +
             792*s12^3*s13^3 + 592*s12^2*s13^4 + 376*s12*s13^5)*s23 +
           (370*s12^5 + 2518*s12^4*s13 + 4090*s12^3*s13^2 +
             4090*s12^2*s13^3 + 2518*s12*s13^4 + 370*s13^5)*s23^2 +
           (1389*s12^4 + 4048*s12^3*s13 + 5678*s12^2*s13^2 + 4048*s12*s13^3 +
             1389*s13^4)*s23^3 + (1212*s12^3 + 2412*s12^2*s13 +
             2412*s12*s13^2 + 1212*s13^3)*s23^4 + (193*s12^2 + 386*s12*s13 +
             193*s13^2)*s23^5) + p1q*p2q*(-54*s12^5*s13^2 - 108*s12^4*s13^3 -
           54*s12^3*s13^4 + (155*s12^5*s13 + 180*s12^4*s13^2 +
             669*s12^3*s13^3 + 464*s12^2*s13^4 + 180*s12*s13^5)*s23 +
           (299*s12^5 + 1329*s12^4*s13 + 1940*s12^3*s13^2 +
             1923*s12^2*s13^3 + 1013*s12*s13^4 + 180*s13^5)*s23^2 +
           (1081*s12^4 + 2203*s12^3*s13 + 2339*s12^2*s13^2 + 1207*s12*s13^3 +
             485*s13^4)*s23^3 + (856*s12^3 + 913*s12^2*s13 + 338*s12*s13^2 +
             101*s13^3)*s23^4 + (-7*s12^2 - 157*s12*s13 - 285*s13^2)*s23^5 +
           (-81*s12 - 81*s13)*s23^6) +
         p1q^2*((-54*s12^5*s13 - 108*s12^4*s13^2 - 54*s12^3*s13^3)*s23 +
           (-54*s12^5 - 58*s12^4*s13 - 10*s12^3*s13^2 - 26*s12^2*s13^3 -
             20*s12*s13^4)*s23^2 + (55*s12^4 + 216*s12^3*s13 +
             24*s12^2*s13^2 - 67*s12*s13^3 - 20*s13^4)*s23^3 +
           (172*s12^3 + 58*s12^2*s13 - 124*s12*s13^2 - 55*s13^3)*s23^4 +
           (3*s12^2 - 137*s12*s13 - 50*s13^2)*s23^5 + (-60*s12 - 15*s13)*
            s23^6)) + p3q^3*(p2q*(54*s12^6*s13 + 234*s12^5*s13^2 +
           126*s12^4*s13^3 - 54*s12^3*s13^4 + (4*s12^6 + 534*s12^5*s13 +
             1480*s12^4*s13^2 + 1662*s12^3*s13^3 + 712*s12^2*s13^4 +
             180*s12*s13^5)*s23 + (280*s12^5 + 2666*s12^4*s13 +
             4649*s12^3*s13^2 + 3274*s12^2*s13^3 + 1191*s12*s13^4 +
             180*s13^5)*s23^2 + (1317*s12^4 + 4515*s12^3*s13 +
             4823*s12^2*s13^2 + 1900*s12*s13^3 + 455*s13^4)*s23^3 +
           (1522*s12^3 + 2697*s12^2*s13 + 1337*s12*s13^2 + 162*s13^3)*s23^4 +
           (481*s12^2 + 368*s12*s13 - 113*s13^2)*s23^5) +
         p1q*(54*s12^6*s13 + 108*s12^5*s13^2 + 54*s12^4*s13^3 +
           (54*s12^6 + 209*s12^5*s13 + 382*s12^4*s13^2 + 407*s12^3*s13^3 +
             180*s12^2*s13^4)*s23 + (101*s12^5 + 746*s12^4*s13 +
             1491*s12^3*s13^2 + 1006*s12^2*s13^3 + 160*s12*s13^4)*s23^2 +
           (423*s12^4 + 1748*s12^3*s13 + 1818*s12^2*s13^2 + 518*s12*s13^3 -
             20*s13^4)*s23^3 + (664*s12^3 + 1270*s12^2*s13 + 551*s12*s13^2 -
             55*s13^3)*s23^4 + (273*s12^2 + 178*s12*s13 - 50*s13^2)*s23^5 +
           (-15*s12 - 15*s13)*s23^6)) +
       p3q*(p2q^3*(-54*s12^4*s13^3 + 126*s12^3*s13^4 + 234*s12^2*s13^5 +
           54*s12*s13^6 + (180*s12^5*s13 + 712*s12^4*s13^2 +
             1662*s12^3*s13^3 + 1480*s12^2*s13^4 + 534*s12*s13^5 + 4*s13^6)*
            s23 + (180*s12^5 + 1191*s12^4*s13 + 3274*s12^3*s13^2 +
             4649*s12^2*s13^3 + 2666*s12*s13^4 + 280*s13^5)*s23^2 +
           (455*s12^4 + 1900*s12^3*s13 + 4823*s12^2*s13^2 + 4515*s12*s13^3 +
             1317*s13^4)*s23^3 + (162*s12^3 + 1337*s12^2*s13 +
             2697*s12*s13^2 + 1522*s13^3)*s23^4 + (-113*s12^2 + 368*s12*s13 +
             481*s13^2)*s23^5) + p1q*p2q^2*(-54*s12^4*s13^3 -
           108*s12^3*s13^4 - 54*s12^2*s13^5 + (180*s12^5*s13 +
             464*s12^4*s13^2 + 669*s12^3*s13^3 + 180*s12^2*s13^4 +
             155*s12*s13^5)*s23 + (180*s12^5 + 1013*s12^4*s13 +
             1923*s12^3*s13^2 + 1940*s12^2*s13^3 + 1329*s12*s13^4 +
             299*s13^5)*s23^2 + (485*s12^4 + 1207*s12^3*s13 +
             2339*s12^2*s13^2 + 2203*s12*s13^3 + 1081*s13^4)*s23^3 +
           (101*s12^3 + 338*s12^2*s13 + 913*s12*s13^2 + 856*s13^3)*s23^4 +
           (-285*s12^2 - 157*s12*s13 - 7*s13^2)*s23^5 + (-81*s12 - 81*s13)*
            s23^6) + p1q^2*p2q*((108*s12^4*s13^2 + 216*s12^3*s13^3 +
             108*s12^2*s13^4)*s23 + (120*s12^4*s13 + 1008*s12^3*s13^2 +
             1008*s12^2*s13^3 + 120*s12*s13^4)*s23^2 +
           (-28*s12^4 + 581*s12^3*s13 + 1758*s12^2*s13^2 + 581*s12*s13^3 -
             28*s13^4)*s23^3 + (-171*s12^3 + 600*s12^2*s13 + 600*s12*s13^2 -
             171*s13^3)*s23^4 + (-218*s12^2 + 104*s12*s13 - 218*s13^2)*
            s23^5 + (-75*s12 - 75*s13)*s23^6) +
         p1q^3*((-45*s12^3*s13 + 45*s12*s13^3)*s23^3 +
           (-45*s12^3 - 90*s12^2*s13 + 90*s12*s13^2 + 45*s13^3)*s23^4 +
           (-90*s12^2 + 90*s13^2)*s23^5 + (-45*s12 + 45*s13)*s23^6)))/
      (p2q*p3q^3*((27*s12^3*s13^2 + 27*s12^2*s13^3)*s23^2 +
         (27*s12^3*s13 + 54*s12^2*s13^2 + 27*s12*s13^3)*s23^3 +
         (27*s12^2*s13 + 27*s12*s13^2)*s23^4) +
       p3q*(p1q*p2q^2*((27*s12^3*s13^2 + 27*s12^2*s13^3)*s23^2 +
           (27*s12^3*s13 + 54*s12^2*s13^2 + 27*s12*s13^3)*s23^3 +
           (27*s12^2*s13 + 27*s12*s13^2)*s23^4) +
         p2q^3*((27*s12^3*s13^2 + 27*s12^2*s13^3)*s23^2 +
           (27*s12^3*s13 + 54*s12^2*s13^2 + 27*s12*s13^3)*s23^3 +
           (27*s12^2*s13 + 27*s12*s13^2)*s23^4)) +
       p3q^2*(p1q*p2q*((27*s12^3*s13^2 + 27*s12^2*s13^3)*s23^2 +
           (27*s12^3*s13 + 54*s12^2*s13^2 + 27*s12*s13^3)*s23^3 +
           (27*s12^2*s13 + 27*s12*s13^2)*s23^4) +
         p2q^2*((54*s12^3*s13^2 + 54*s12^2*s13^3)*s23^2 +
           (54*s12^3*s13 + 108*s12^2*s13^2 + 54*s12*s13^3)*s23^3 +
           (54*s12^2*s13 + 54*s12*s13^2)*s23^4))) +
     (Pi^2*(p3q^8*((-306*s12^8*s13^2 - 972*s12^7*s13^3 - 1026*s12^6*s13^4 -
            360*s12^5*s13^5)*s23 + (-10*s12^9 - 40*s12^8*s13 -
            1176*s12^7*s13^2 - 2676*s12^6*s13^3 - 1970*s12^5*s13^4 -
            440*s12^4*s13^5)*s23^2 + (-20*s12^8 - 70*s12^7*s13 -
            1404*s12^6*s13^2 - 2128*s12^5*s13^3 - 864*s12^4*s13^4)*s23^3 +
          (-10*s12^7 - 30*s12^6*s13 - 534*s12^5*s13^2 - 424*s12^4*s13^3)*
           s23^4) + p2q^8*((-198*s12^5*s13^5 - 540*s12^4*s13^6 -
            486*s12^3*s13^7 - 144*s12^2*s13^8)*s23 +
          (-278*s12^5*s13^4 - 1160*s12^4*s13^5 - 1542*s12^3*s13^6 -
            690*s12^2*s13^7 - 40*s12*s13^8 - 10*s13^9)*s23^2 +
          (-540*s12^4*s13^4 - 1318*s12^3*s13^5 - 918*s12^2*s13^6 -
            70*s12*s13^7 - 20*s13^8)*s23^3 + (-262*s12^3*s13^4 -
            372*s12^2*s13^5 - 30*s12*s13^6 - 10*s13^7)*s23^4) +
        p1q*p2q^7*(27*s12^5*s13^6 + 81*s12^4*s13^7 + 81*s12^3*s13^8 +
          27*s12^2*s13^9 + (198*s12^6*s13^4 - 27*s12^5*s13^5 -
            999*s12^4*s13^6 - 1125*s12^3*s13^7 - 351*s12^2*s13^8)*s23 +
          (278*s12^6*s13^3 + 458*s12^5*s13^4 - 1398*s12^4*s13^5 -
            3359*s12^3*s13^6 - 1841*s12^2*s13^7 - 80*s12*s13^8 - 20*s13^9)*
           s23^2 + (832*s12^5*s13^3 + 976*s12^4*s13^4 - 971*s12^3*s13^5 -
            1629*s12^2*s13^6 - 10*s12*s13^7)*s23^3 +
          (814*s12^4*s13^3 + 1442*s12^3*s13^4 + 576*s12^2*s13^5 +
            160*s12*s13^6 + 60*s13^7)*s23^4 + (260*s12^3*s13^3 +
            742*s12^2*s13^4 + 90*s12*s13^5 + 40*s13^6)*s23^5) +
        p1q^2*p2q^6*(-27*s12^6*s13^5 - 54*s12^5*s13^6 + 54*s12^3*s13^8 +
          27*s12^2*s13^9 + (567*s12^6*s13^4 + 666*s12^5*s13^5 -
            945*s12^4*s13^6 - 1620*s12^3*s13^7 - 576*s12^2*s13^8)*s23 +
          (890*s12^6*s13^3 + 2517*s12^5*s13^4 + 754*s12^4*s13^5 -
            3331*s12^3*s13^6 - 2488*s12^2*s13^7 - 40*s12*s13^8 - 10*s13^9)*
           s23^2 + (-24*s12^6*s13^2 + 2151*s12^5*s13^3 + 4398*s12^4*s13^4 +
            2818*s12^3*s13^5 - 508*s12^2*s13^6 + 190*s12*s13^7 + 60*s13^8)*
           s23^3 + (-126*s12^5*s13^2 + 1319*s12^4*s13^3 + 4243*s12^3*s13^4 +
            3341*s12^2*s13^5 + 260*s12*s13^6 + 90*s13^7)*s23^4 +
          (-100*s12^4*s13^2 - 230*s12^3*s13^3 + 1596*s12^2*s13^4 -
            60*s12*s13^5 - 40*s13^6)*s23^5 + (2*s12^3*s13^2 -
            368*s12^2*s13^3 - 90*s12*s13^4 - 60*s13^5)*s23^6) +
        p1q^3*p2q^5*(-27*s12^6*s13^5 - 81*s12^5*s13^6 - 81*s12^4*s13^7 -
          27*s12^3*s13^8 + (792*s12^6*s13^4 + 1683*s12^5*s13^5 +
            621*s12^4*s13^6 - 639*s12^3*s13^7 - 369*s12^2*s13^8)*s23 +
          (1470*s12^6*s13^3 + 4928*s12^5*s13^4 + 5661*s12^4*s13^5 +
            1113*s12^3*s13^6 - 1090*s12^2*s13^7)*s23^2 +
          (171*s12^6*s13^2 + 3779*s12^5*s13^3 + 8525*s12^4*s13^4 +
            9103*s12^3*s13^5 + 2674*s12^2*s13^6 + 130*s12*s13^7 + 40*s13^8)*
           s23^3 + (80*s12^6*s13 + 695*s12^5*s13^2 + 2358*s12^4*s13^3 +
            5880*s12^3*s13^4 + 5598*s12^2*s13^5 - 80*s12*s13^6 - 40*s13^7)*
           s23^4 + (240*s12^5*s13 + 872*s12^4*s13^2 - 1232*s12^3*s13^3 +
            957*s12^2*s13^4 - 320*s12*s13^5 - 160*s13^6)*s23^5 +
          (160*s12^4*s13 + 266*s12^3*s13^2 - 1248*s12^2*s13^3 -
            80*s12*s13^4 - 40*s13^5)*s23^6 + (-2*s12^2*s13^2 + 30*s12*s13^3 +
            40*s13^4)*s23^7) + p1q^4*p2q^4*
         ((423*s12^6*s13^4 + 1188*s12^5*s13^5 + 1107*s12^4*s13^6 +
            342*s12^3*s13^7)*s23 + (970*s12^6*s13^3 + 3168*s12^5*s13^4 +
            4663*s12^4*s13^5 + 2712*s12^3*s13^6 + 247*s12^2*s13^7)*s23^2 +
          (-16*s12^6*s13^2 + 1628*s12^5*s13^3 + 3828*s12^4*s13^4 +
            6231*s12^3*s13^5 + 2976*s12^2*s13^6)*s23^3 +
          (-163*s12^6*s13 - 278*s12^5*s13^2 - 1682*s12^4*s13^3 -
            415*s12^3*s13^4 + 3102*s12^2*s13^5 - 150*s12*s13^6 - 60*s13^7)*
           s23^4 + (-80*s12^6 - 486*s12^5*s13 - 757*s12^4*s13^2 -
            4697*s12^3*s13^3 - 1592*s12^2*s13^4 - 100*s12*s13^5 - 40*s13^6)*
           s23^5 + (-160*s12^5 - 563*s12^4*s13 - 661*s12^3*s13^2 -
            1971*s12^2*s13^3 + 100*s12*s13^4 + 90*s13^5)*s23^6 +
          (-80*s12^4 - 240*s12^3*s13 - 6*s12^2*s13^2 + 50*s12*s13^3 +
            60*s13^4)*s23^7 - 10*s13^3*s23^8) + p1q^5*p2q^3*
         ((112*s12^6*s13^3 + 21*s12^5*s13^4 - 6*s12^4*s13^5 + 85*s12^3*s13^6)*
           s23^2 + (-211*s12^6*s13^2 - 944*s12^5*s13^3 - 2327*s12^4*s13^4 -
            801*s12^3*s13^5 + 505*s12^2*s13^6)*s23^3 +
          (-243*s12^6*s13 - 888*s12^5*s13^2 - 3952*s12^4*s13^3 -
            5082*s12^3*s13^4 - 513*s12^2*s13^5)*s23^4 +
          (-80*s12^6 - 483*s12^5*s13 - 1068*s12^4*s13^2 - 4678*s12^3*s13^3 -
            2519*s12^2*s13^4 + 70*s12*s13^5 + 40*s13^6)*s23^5 +
          (-80*s12^5 - 157*s12^4*s13 - 479*s12^3*s13^2 - 1509*s12^2*s13^3 +
            80*s12*s13^4 + 60*s13^5)*s23^6 + (80*s12^4 + 83*s12^3*s13 -
            8*s12^2*s13^2 + 10*s12*s13^3)*s23^7 + (80*s12^3 - 20*s13^3)*
           s23^8) + p1q^6*p2q^2*((-112*s12^5*s13^3 - 512*s12^4*s13^4 -
            400*s12^3*s13^5)*s23^3 + (211*s12^5*s13^2 - 417*s12^4*s13^3 -
            1326*s12^3*s13^4 - 410*s12^2*s13^5)*s23^4 +
          (243*s12^5*s13 + 661*s12^4*s13^2 - 723*s12^3*s13^3 -
            824*s12^2*s13^4)*s23^5 + (80*s12^5 + 566*s12^4*s13 +
            446*s12^3*s13^2 - 418*s12^2*s13^3 - 10*s12*s13^4 - 10*s13^5)*
           s23^6 + (160*s12^4 + 323*s12^3*s13 - 4*s12^2*s13^2 -
            10*s12*s13^3 - 20*s13^4)*s23^7 + (80*s12^3 - 10*s13^3)*s23^8) +
        p3q^7*(p1q*(27*s12^9*s13^2 + 81*s12^8*s13^3 + 81*s12^7*s13^4 +
            27*s12^6*s13^5 + (-837*s12^8*s13^2 - 2421*s12^7*s13^3 -
              1971*s12^6*s13^4 - 27*s12^5*s13^5 + 360*s12^4*s13^6)*s23 +
            (-20*s12^9 - 80*s12^8*s13 - 2975*s12^7*s13^2 - 5465*s12^6*s13^3 -
              2046*s12^5*s13^4 + 944*s12^4*s13^5 + 440*s12^3*s13^6)*s23^2 +
            (-10*s12^7*s13 - 2115*s12^6*s13^2 - 1133*s12^5*s13^3 +
              1786*s12^4*s13^4 + 1318*s12^3*s13^5)*s23^3 +
            (60*s12^7 + 160*s12^6*s13 + 1062*s12^5*s13^2 + 2252*s12^4*s13^3 +
              1300*s12^3*s13^4)*s23^4 + (40*s12^6 + 90*s12^5*s13 +
              1066*s12^4*s13^2 + 422*s12^3*s13^3)*s23^5) +
          p2q*(-576*s12^8*s13^3 - 576*s12^7*s13^4 +
            (-90*s12^10 - 27*s12^9*s13 - 2115*s12^8*s13^2 - 5760*s12^7*s13^
                3 - 4599*s12^6*s13^4 - 135*s12^5*s13^5 + 162*s12^4*s13^6)*
             s23 + (-210*s12^9 - 64*s12^8*s13 - 6063*s12^7*s13^2 -
              10716*s12^6*s13^3 - 5246*s12^5*s13^4 + 213*s12^4*s13^5 -
              128*s12^3*s13^6)*s23^2 + (-140*s12^8 - 77*s12^7*s13 -
              5362*s12^6*s13^2 - 5442*s12^5*s13^3 + 3*s12^4*s13^4 +
              830*s12^3*s13^5)*s23^3 + (-10*s12^7 - 10*s12^6*s13 -
              860*s12^5*s13^2 + 634*s12^4*s13^3 + 1224*s12^3*s13^4)*s23^4 +
            (10*s12^6 + 30*s12^5*s13 + 544*s12^4*s13^2 + 434*s12^3*s13^3)*
             s23^5)) + p3q^6*(p2q^2*(-1152*s12^8*s13^3 + 1152*s12^7*s13^4 +
            2304*s12^6*s13^5 + (-180*s12^10 + 306*s12^9*s13 -
              4770*s12^8*s13^2 - 7398*s12^7*s13^3 + 1260*s12^6*s13^4 +
              7992*s12^5*s13^5 + 1206*s12^4*s13^6 + 936*s12^3*s13^7)*s23 +
            (-300*s12^9 + 669*s12^8*s13 - 10760*s12^7*s13^2 -
              8417*s12^6*s13^3 + 6129*s12^5*s13^4 + 7166*s12^4*s13^5 +
              777*s12^3*s13^6 + 748*s12^2*s13^7)*s23^2 +
            (-30*s12^8 + 350*s12^7*s13 - 5460*s12^6*s13^2 + 3298*s12^5*s13^
                3 + 11242*s12^4*s13^4 + 4226*s12^3*s13^5 + 1222*s12^2*s13^6)*
             s23^3 + (120*s12^7 + 77*s12^6*s13 + 2834*s12^5*s13^2 +
              8052*s12^4*s13^3 + 5983*s12^3*s13^4 + 628*s12^2*s13^5)*s23^4 +
            (30*s12^6 + 90*s12^5*s13 + 2354*s12^4*s13^2 + 2178*s12^3*s13^3 +
              154*s12^2*s13^4)*s23^5) + p1q*p2q*(81*s12^9*s13^2 -
            1017*s12^8*s13^3 - 657*s12^7*s13^4 + 333*s12^6*s13^5 -
            108*s12^5*s13^6 + (-90*s12^10 + 216*s12^9*s13 - 5463*s12^8*s13^
                2 - 10836*s12^7*s13^3 - 4554*s12^6*s13^4 + 5094*s12^5*s13^5 +
              1323*s12^4*s13^6 + 198*s12^3*s13^7)*s23 +
            (210*s12^9 + 520*s12^8*s13 - 12894*s12^7*s13^2 - 12229*s12^6*s13^
                3 + 5900*s12^5*s13^4 + 10599*s12^4*s13^5 + 1850*s12^3*s13^6 +
              568*s12^2*s13^7)*s23^2 + (820*s12^8 + 302*s12^7*s13 -
              3719*s12^6*s13^2 + 9493*s12^5*s13^3 + 19076*s12^4*s13^4 +
              8387*s12^3*s13^5 + 858*s12^2*s13^6)*s23^3 +
            (620*s12^7 + 218*s12^6*s13 + 8589*s12^5*s13^2 + 14381*s12^4*s13^
                3 + 8993*s12^3*s13^4 + 362*s12^2*s13^5)*s23^4 +
            (70*s12^6 + 160*s12^5*s13 + 4366*s12^4*s13^2 + 2040*s12^3*s13^3 +
              74*s12^2*s13^4)*s23^5 + (-30*s12^5 - 60*s12^4*s13 -
              542*s12^3*s13^2 + 2*s12^2*s13^3)*s23^6) +
          p1q^2*(27*s12^9*s13^2 + 54*s12^8*s13^3 - 54*s12^6*s13^5 -
            27*s12^5*s13^6 + (-1224*s12^8*s13^2 - 3078*s12^7*s13^3 -
              1431*s12^6*s13^4 + 1476*s12^5*s13^5 + 1053*s12^4*s13^6)*s23 +
            (-10*s12^9 - 40*s12^8*s13 - 3460*s12^7*s13^2 - 4141*s12^6*s13^3 +
              2536*s12^5*s13^4 + 4623*s12^4*s13^5 + 1376*s12^3*s13^6)*s23^2 +
            (60*s12^8 + 190*s12^7*s13 + 302*s12^6*s13^2 + 5572*s12^5*s13^3 +
              7638*s12^4*s13^4 + 3447*s12^3*s13^5 - 24*s12^2*s13^6)*s23^3 +
            (90*s12^7 + 260*s12^6*s13 + 5123*s12^5*s13^2 + 6349*s12^4*s13^3 +
              2291*s12^3*s13^4 - 126*s12^2*s13^5)*s23^4 +
            (-40*s12^6 - 60*s12^5*s13 + 2082*s12^4*s13^2 - 230*s12^3*s13^3 -
              100*s12^2*s13^4)*s23^5 + (-60*s12^5 - 90*s12^4*s13 -
              530*s12^3*s13^2 + 2*s12^2*s13^3)*s23^6)) +
        p3q^5*(p2q^3*(-576*s12^8*s13^3 + 4032*s12^7*s13^4 +
            1152*s12^6*s13^5 - 3456*s12^5*s13^6 +
            (-90*s12^10 + 693*s12^9*s13 - 5589*s12^8*s13^2 + 126*s12^7*s13^
                3 + 10791*s12^6*s13^4 + 9729*s12^5*s13^5 - 1926*s12^4*s13^6 +
              2430*s12^3*s13^7 - 1008*s12^2*s13^8)*s23 +
            (-10*s12^9 + 1100*s12^8*s13 - 8678*s12^7*s13^2 + 7596*s12^6*s13^
                3 + 18273*s12^5*s13^4 + 6850*s12^4*s13^5 + 1684*s12^3*s13^6 +
              853*s12^2*s13^7 - 270*s12*s13^8)*s23^2 +
            (280*s12^8 + 191*s12^7*s13 + 1975*s12^6*s13^2 + 18403*s12^5*s13^
                3 + 20623*s12^4*s13^4 + 6391*s12^3*s13^5 + 3897*s12^2*s13^6 -
              460*s12*s13^7)*s23^3 + (230*s12^7 - 126*s12^6*s13 +
              8878*s12^5*s13^2 + 16542*s12^4*s13^3 + 11034*s12^3*s13^4 +
              2726*s12^2*s13^5 - 190*s12*s13^6)*s23^4 +
            (30*s12^6 + 90*s12^5*s13 + 4024*s12^4*s13^2 + 4464*s12^3*s13^3 +
              770*s12^2*s13^4)*s23^5) + p1q*p2q^2*(81*s12^9*s13^2 -
            1809*s12^8*s13^3 + 2889*s12^7*s13^4 + 3051*s12^6*s13^5 -
            1566*s12^5*s13^6 + 162*s12^4*s13^7 +
            (-180*s12^10 + 702*s12^9*s13 - 11916*s12^8*s13^2 -
              8505*s12^7*s13^3 + 9666*s12^6*s13^4 + 18180*s12^5*s13^5 -
              1440*s12^4*s13^6 + 2295*s12^3*s13^7 - 738*s12^2*s13^8)*s23 +
            (480*s12^9 + 537*s12^8*s13 - 19014*s12^7*s13^2 + 9218*s12^6*s13^
                3 + 38079*s12^5*s13^4 + 24021*s12^4*s13^5 + 4559*s12^3*s13^
                6 + 3324*s12^2*s13^7 - 180*s12*s13^8)*s23^2 +
            (1300*s12^8 - 1353*s12^7*s13 + 7789*s12^6*s13^2 +
              44392*s12^5*s13^3 + 54167*s12^4*s13^4 + 19321*s12^3*s13^5 +
              6885*s12^2*s13^6 - 20*s12*s13^7)*s23^3 +
            (360*s12^7 - 819*s12^6*s13 + 23804*s12^5*s13^2 + 36453*s12^4*s13^
                3 + 24660*s12^3*s13^4 + 3065*s12^2*s13^5 + 240*s12*s13^6)*
             s23^4 + (-360*s12^6 + 189*s12^5*s13 + 7518*s12^4*s13^2 +
              6050*s12^3*s13^3 + 318*s12^2*s13^4 + 60*s12*s13^5)*s23^5 +
            (-80*s12^5 - 180*s12^4*s13 - 1750*s12^3*s13^2 - 164*s12^2*s13^3 -
              20*s12*s13^4)*s23^6) + p1q^2*p2q*(81*s12^9*s13^2 -
            495*s12^8*s13^3 + 414*s12^7*s13^4 + 990*s12^6*s13^5 +
            81*s12^5*s13^6 + 81*s12^4*s13^7 + (243*s12^9*s13 -
              6201*s12^8*s13^2 - 6408*s12^7*s13^3 + 4896*s12^6*s13^4 +
              13752*s12^5*s13^5 + 3735*s12^4*s13^6 + 891*s12^3*s13^7)*s23 +
            (420*s12^9 - 388*s12^8*s13 - 10082*s12^7*s13^2 + 5728*s12^6*s13^
                3 + 30546*s12^5*s13^4 + 26530*s12^4*s13^5 + 6637*s12^3*s13^
                6 + 1771*s12^2*s13^7)*s23^2 + (170*s12^8 - 1757*s12^7*s13 +
              10758*s12^6*s13^2 + 36298*s12^5*s13^3 + 42930*s12^4*s13^4 +
              18412*s12^3*s13^5 + 2439*s12^2*s13^6 + 80*s12*s13^7)*s23^3 +
            (-1130*s12^7 - 778*s12^6*s13 + 22048*s12^5*s13^2 +
              24416*s12^4*s13^3 + 15484*s12^3*s13^4 + 504*s12^2*s13^5 -
              30*s12*s13^6)*s23^4 + (-1060*s12^6 + 28*s12^5*s13 +
              3900*s12^4*s13^2 - 909*s12^3*s13^3 + 70*s12^2*s13^4 -
              60*s12*s13^5)*s23^5 + (-150*s12^5 - 290*s12^4*s13 -
              3492*s12^3*s13^2 - 8*s12^2*s13^3 + 50*s12*s13^4)*s23^6 +
            (30*s12^4 + 30*s12^3*s13 - 2*s12^2*s13^2)*s23^7) +
          p1q^3*(-27*s12^8*s13^3 - 81*s12^7*s13^4 - 81*s12^6*s13^5 -
            27*s12^5*s13^6 + (-693*s12^8*s13^2 - 963*s12^7*s13^3 +
              1593*s12^6*s13^4 + 3303*s12^5*s13^5 + 1440*s12^4*s13^6)*s23 +
            (-766*s12^7*s13^2 + 3543*s12^6*s13^3 + 10197*s12^5*s13^4 +
              8006*s12^4*s13^5 + 2118*s12^3*s13^6)*s23^2 +
            (40*s12^8 + 130*s12^7*s13 + 5104*s12^6*s13^2 + 14125*s12^5*s13^
                3 + 12575*s12^4*s13^4 + 5237*s12^3*s13^5 + 171*s12^2*s13^6)*
             s23^3 + (-40*s12^7 - 80*s12^6*s13 + 7704*s12^5*s13^2 +
              7338*s12^4*s13^3 + 2844*s12^3*s13^4 + 695*s12^2*s13^5 +
              80*s12*s13^6)*s23^4 + (-160*s12^6 - 320*s12^5*s13 +
              795*s12^4*s13^2 - 2042*s12^3*s13^3 + 872*s12^2*s13^4 +
              240*s12*s13^5)*s23^5 + (-40*s12^5 - 80*s12^4*s13 -
              1734*s12^3*s13^2 + 266*s12^2*s13^3 + 160*s12*s13^4)*s23^6 +
            (40*s12^4 + 30*s12^3*s13 - 2*s12^2*s13^2)*s23^7)) +
        p3q^4*(p2q^4*(2304*s12^7*s13^4 - 4608*s12^6*s13^5 -
            4608*s12^5*s13^6 + 2304*s12^4*s13^7 +
            (360*s12^9*s13 - 3798*s12^8*s13^2 + 5688*s12^7*s13^3 +
              5418*s12^6*s13^4 + 1494*s12^5*s13^5 - 1872*s12^4*s13^6 +
              3258*s12^3*s13^7 - 2988*s12^2*s13^8 + 360*s12*s13^9)*s23 +
            (90*s12^9 + 137*s12^8*s13 - 2538*s12^7*s13^2 + 12802*s12^6*s13^
                3 + 10015*s12^5*s13^4 + 295*s12^4*s13^5 + 3892*s12^3*s13^6 -
              1728*s12^2*s13^7 + 137*s12*s13^8 + 90*s13^9)*s23^2 +
            (190*s12^8 - 626*s12^7*s13 + 7610*s12^6*s13^2 + 18188*s12^5*s13^
                3 + 16284*s12^4*s13^4 + 7658*s12^3*s13^5 + 5180*s12^2*s13^6 -
              626*s12*s13^7 + 190*s13^8)*s23^3 + (110*s12^7 - 373*s12^6*s13 +
              9598*s12^5*s13^2 + 16309*s12^4*s13^3 + 12259*s12^3*s13^4 +
              5548*s12^2*s13^5 - 373*s12*s13^6 + 110*s13^7)*s23^4 +
            (10*s12^6 + 30*s12^5*s13 + 3478*s12^4*s13^2 + 5116*s12^3*s13^3 +
              1858*s12^2*s13^4 + 30*s12*s13^5 + 10*s13^6)*s23^5) +
          p1q*p2q^3*(27*s12^9*s13^2 - 819*s12^8*s13^3 + 5355*s12^7*s13^4 -
            1899*s12^6*s13^5 - 6102*s12^5*s13^6 + 1890*s12^4*s13^7 -
            108*s12^3*s13^8 + (-90*s12^10 + 756*s12^9*s13 - 11691*s12^8*s13^
                2 + 6885*s12^7*s13^3 + 14742*s12^6*s13^4 + 10953*s12^5*s13^
                5 - 8010*s12^4*s13^6 + 6480*s12^3*s13^7 - 4167*s12^2*s13^8 +
              270*s12*s13^9)*s23 + (340*s12^9 - 689*s12^8*s13 -
              8050*s12^7*s13^2 + 36522*s12^6*s13^3 + 44220*s12^5*s13^4 +
              17437*s12^4*s13^5 + 12835*s12^3*s13^6 + 3963*s12^2*s13^7 -
              806*s12*s13^8 + 90*s13^9)*s23^2 + (410*s12^8 - 3051*s12^7*s13 +
              26657*s12^6*s13^2 + 63453*s12^5*s13^3 + 68157*s12^4*s13^4 +
              28979*s12^3*s13^5 + 18431*s12^2*s13^6 - 1406*s12*s13^7 -
              70*s13^8)*s23^3 + (-630*s12^7 - 1061*s12^6*s13 +
              31292*s12^5*s13^2 + 48706*s12^4*s13^3 + 37137*s12^3*s13^4 +
              11886*s12^2*s13^5 + 56*s12*s13^6 - 430*s13^7)*s23^4 +
            (-680*s12^6 + 345*s12^5*s13 + 7029*s12^4*s13^2 + 10652*s12^3*s13^
                3 + 1759*s12^2*s13^4 + 286*s12*s13^5 - 290*s13^6)*s23^5 +
            (-70*s12^5 - 200*s12^4*s13 - 2204*s12^3*s13^2 - 676*s12^2*s13^3 -
              100*s12*s13^4 - 20*s13^5)*s23^6) + p1q^2*p2q^2*
           (81*s12^9*s13^2 - 657*s12^8*s13^3 + 2475*s12^7*s13^4 +
            576*s12^6*s13^5 - 2475*s12^5*s13^6 + 81*s12^4*s13^7 -
            81*s12^3*s13^8 + (486*s12^9*s13 - 10503*s12^8*s13^2 +
              2916*s12^7*s13^3 + 19188*s12^6*s13^4 + 24642*s12^5*s13^5 +
              1350*s12^4*s13^6 + 4734*s12^3*s13^7 - 1449*s12^2*s13^8)*s23 +
            (780*s12^9 - 1293*s12^8*s13 - 5537*s12^7*s13^2 + 40525*s12^6*s13^
                3 + 71137*s12^5*s13^4 + 49824*s12^4*s13^5 + 18043*s12^3*s13^
                6 + 6934*s12^2*s13^7 - 673*s12*s13^8)*s23^2 +
            (-10*s12^8 - 3369*s12^7*s13 + 35111*s12^6*s13^2 +
              76867*s12^5*s13^3 + 94773*s12^4*s13^4 + 41827*s12^3*s13^5 +
              15500*s12^2*s13^6 - 124*s12*s13^7 - 260*s13^8)*s23^3 +
            (-2100*s12^7 + 286*s12^6*s13 + 36801*s12^5*s13^2 +
              47226*s12^4*s13^3 + 41302*s12^3*s13^4 + 6796*s12^2*s13^5 +
              1068*s12*s13^6 - 290*s13^7)*s23^4 +
            (-980*s12^6 + 1207*s12^5*s13 + 621*s12^4*s13^2 + 3276*s12^3*s13^
                3 - 52*s12^2*s13^4 + 536*s12*s13^5 + 210*s13^6)*s23^5 +
            (400*s12^5 - 579*s12^4*s13 - 6704*s12^3*s13^2 - 909*s12^2*s13^3 +
              47*s12*s13^4 + 250*s13^5)*s23^6 + (70*s12^4 + 90*s12^3*s13 -
              8*s12^2*s13^2 + 30*s12*s13^3 + 10*s13^4)*s23^7) +
          p1q^4*((666*s12^7*s13^3 + 2079*s12^6*s13^4 + 2160*s12^5*s13^5 +
              747*s12^4*s13^6)*s23 + (895*s12^7*s13^2 + 4656*s12^6*s13^3 +
              6931*s12^5*s13^4 + 4464*s12^4*s13^5 + 1294*s12^3*s13^6)*s23^2 +
            (4272*s12^6*s13^2 + 7527*s12^5*s13^3 + 4152*s12^4*s13^4 +
              1952*s12^3*s13^5 - 16*s12^2*s13^6)*s23^3 +
            (-60*s12^7 - 150*s12^6*s13 + 3102*s12^5*s13^2 - 2359*s12^4*s13^
                3 - 2654*s12^3*s13^4 - 278*s12^2*s13^5 - 163*s12*s13^6)*
             s23^4 + (-40*s12^6 - 100*s12^5*s13 - 2888*s12^4*s13^2 -
              6317*s12^3*s13^3 - 757*s12^2*s13^4 - 486*s12*s13^5 - 80*s13^6)*
             s23^5 + (90*s12^5 + 100*s12^4*s13 - 2619*s12^3*s13^2 -
              661*s12^2*s13^3 - 563*s12*s13^4 - 160*s13^5)*s23^6 +
            (60*s12^4 + 50*s12^3*s13 - 6*s12^2*s13^2 - 240*s12*s13^3 -
              80*s13^4)*s23^7 - 10*s12^3*s23^8) + p1q^3*p2q*
           (-81*s12^8*s13^3 + 387*s12^7*s13^4 + 495*s12^6*s13^5 +
            81*s12^5*s13^6 + 54*s12^4*s13^7 + (-2853*s12^8*s13^2 +
              756*s12^7*s13^3 + 9045*s12^6*s13^4 + 13005*s12^5*s13^5 +
              4140*s12^4*s13^6 + 1179*s12^3*s13^7)*s23 +
            (-972*s12^8*s13 + 811*s12^7*s13^2 + 18849*s12^6*s13^3 +
              36047*s12^5*s13^4 + 29672*s12^4*s13^5 + 9660*s12^3*s13^6 +
              2353*s12^2*s13^7)*s23^2 + (-790*s12^8 - 678*s12^7*s13 +
              21732*s12^6*s13^2 + 38674*s12^5*s13^3 + 43768*s12^4*s13^4 +
              22106*s12^3*s13^5 + 4073*s12^2*s13^6 + 566*s12*s13^7)*s23^3 +
            (-1010*s12^7 + 2178*s12^6*s13 + 19740*s12^5*s13^2 +
              13462*s12^4*s13^3 + 14189*s12^3*s13^4 + 1810*s12^2*s13^5 +
              1016*s12*s13^6 + 250*s13^7)*s23^4 +
            (500*s12^6 + 1342*s12^5*s13 - 5513*s12^4*s13^2 - 8214*s12^3*s13^
                3 + 120*s12^2*s13^4 + 604*s12*s13^5 + 430*s13^6)*s23^5 +
            (860*s12^5 - 402*s12^4*s13 - 7099*s12^3*s13^2 - 694*s12^2*s13^3 +
              34*s12*s13^4 + 110*s13^5)*s23^6 + (130*s12^4 + 140*s12^3*s13 -
              14*s12^2*s13^2 - 120*s12*s13^3 - 70*s13^4)*s23^7 -
            10*s12^3*s23^8)) + p3q*(p2q^7*(-576*s12^4*s13^7 -
            576*s12^3*s13^8 + (-324*s12^6*s13^4 - 783*s12^5*s13^5 -
              3627*s12^4*s13^6 - 3816*s12^3*s13^7 - 1305*s12^2*s13^8 -
              27*s12*s13^9 - 90*s13^10)*s23 + (-452*s12^6*s13^3 -
              1083*s12^5*s13^4 - 4598*s12^4*s13^5 - 6828*s12^3*s13^6 -
              3795*s12^2*s13^7 - 64*s12*s13^8 - 210*s13^9)*s23^2 +
            (20*s12^5*s13^3 - 969*s12^4*s13^4 - 3660*s12^3*s13^5 -
              3418*s12^2*s13^6 - 77*s12*s13^7 - 140*s13^8)*s23^3 +
            (576*s12^4*s13^3 + 310*s12^3*s13^4 - 536*s12^2*s13^5 -
              10*s12*s13^6 - 10*s13^7)*s23^4 + (272*s12^3*s13^3 +
              382*s12^2*s13^4 + 30*s12*s13^5 + 10*s13^6)*s23^5) +
          p1q*p2q^6*(-108*s12^6*s13^5 + 333*s12^5*s13^6 - 657*s12^4*s13^7 -
            1017*s12^3*s13^8 + 81*s12^2*s13^9 + (522*s12^7*s13^3 +
              189*s12^6*s13^4 + 1854*s12^5*s13^5 - 4230*s12^4*s13^6 -
              6624*s12^3*s13^7 - 3357*s12^2*s13^8 + 216*s12*s13^9 -
              90*s13^10)*s23 + (730*s12^7*s13^2 + 1526*s12^6*s13^3 +
              5091*s12^5*s13^4 + 878*s12^4*s13^5 - 7855*s12^3*s13^6 -
              8520*s12^2*s13^7 + 520*s12*s13^8 + 210*s13^9)*s23^2 +
            (1344*s12^6*s13^2 + 5957*s12^5*s13^3 + 11138*s12^4*s13^4 +
              5119*s12^3*s13^5 - 3071*s12^2*s13^6 + 302*s12*s13^7 +
              820*s13^8)*s23^3 + (848*s12^5*s13^2 + 6563*s12^4*s13^3 +
              9359*s12^3*s13^4 + 5349*s12^2*s13^5 + 218*s12*s13^6 +
              620*s13^7)*s23^4 + (236*s12^4*s13^2 + 1554*s12^3*s13^3 +
              2908*s12^2*s13^4 + 160*s12*s13^5 + 70*s13^6)*s23^5 +
            (2*s12^3*s13^2 - 380*s12^2*s13^3 - 60*s12*s13^4 - 30*s13^5)*
             s23^6) + p1q^2*p2q^5*(81*s12^7*s13^4 + 81*s12^6*s13^5 +
            990*s12^5*s13^6 + 414*s12^4*s13^7 - 495*s12^3*s13^8 +
            81*s12^2*s13^9 + (1701*s12^7*s13^3 + 2439*s12^6*s13^4 +
              7272*s12^5*s13^5 + 1332*s12^4*s13^6 - 3330*s12^3*s13^7 -
              3933*s12^2*s13^8 + 243*s12*s13^9)*s23 +
            (2257*s12^7*s13^2 + 6799*s12^6*s13^3 + 16810*s12^5*s13^4 +
              14994*s12^4*s13^5 + 2002*s12^3*s13^6 - 7652*s12^2*s13^7 -
              388*s12*s13^8 + 420*s13^9)*s23^2 +
            (80*s12^7*s13 + 3735*s12^6*s13^2 + 15010*s12^5*s13^3 +
              28026*s12^4*s13^4 + 20908*s12^3*s13^5 + 5574*s12^2*s13^6 -
              1757*s12*s13^7 + 170*s13^8)*s23^3 +
            (-30*s12^6*s13 + 1476*s12^5*s13^2 + 12568*s12^4*s13^3 +
              16964*s12^3*s13^4 + 14596*s12^2*s13^5 - 778*s12*s13^6 -
              1130*s13^7)*s23^4 + (-60*s12^5*s13 + 70*s12^4*s13^2 +
              63*s12^3*s13^3 + 2928*s12^2*s13^4 + 28*s12*s13^5 - 1060*s13^6)*
             s23^5 + (50*s12^4*s13 - 170*s12^3*s13^2 - 2358*s12^2*s13^3 -
              290*s12*s13^4 - 150*s13^5)*s23^6 + (-2*s12^2*s13^2 +
              30*s12*s13^3 + 30*s13^4)*s23^7) + p1q^3*p2q^4*
           (54*s12^7*s13^4 + 81*s12^6*s13^5 + 495*s12^5*s13^6 +
            387*s12^4*s13^7 - 81*s12^3*s13^8 + (2151*s12^7*s13^3 +
              4140*s12^6*s13^4 + 8145*s12^5*s13^5 + 4185*s12^4*s13^6 +
              756*s12^3*s13^7 - 1881*s12^2*s13^8)*s23 +
            (3001*s12^7*s13^2 + 10794*s12^6*s13^3 + 23840*s12^5*s13^4 +
              22277*s12^4*s13^5 + 10101*s12^3*s13^6 - 485*s12^2*s13^7 -
              972*s12*s13^8)*s23^2 + (566*s12^7*s13 + 5531*s12^6*s13^2 +
              20648*s12^5*s13^3 + 35506*s12^4*s13^4 + 25876*s12^3*s13^5 +
              14280*s12^2*s13^6 - 678*s12*s13^7 - 790*s13^8)*s23^3 +
            (250*s12^7 + 1016*s12^6*s13 + 2296*s12^5*s13^2 + 14027*s12^4*s13^
                3 + 13624*s12^3*s13^4 + 14880*s12^2*s13^5 + 2178*s12*s13^6 -
              1010*s13^7)*s23^4 + (430*s12^6 + 604*s12^5*s13 -
              690*s12^4*s13^2 - 4488*s12^3*s13^3 - 2921*s12^2*s13^4 +
              1342*s12*s13^5 + 500*s13^6)*s23^5 + (110*s12^5 + 34*s12^4*s13 -
              1180*s12^3*s13^2 - 4831*s12^2*s13^3 - 402*s12*s13^4 +
              860*s13^5)*s23^6 + (-70*s12^4 - 120*s12^3*s13 -
              14*s12^2*s13^2 + 140*s12*s13^3 + 130*s13^4)*s23^7 -
            10*s13^3*s23^8) + p1q^4*p2q^3*((1107*s12^7*s13^3 +
              2808*s12^6*s13^4 + 4482*s12^5*s13^5 + 2952*s12^4*s13^6 +
              1467*s12^3*s13^7)*s23 + (1651*s12^7*s13^2 + 6675*s12^6*s13^3 +
              15985*s12^5*s13^4 + 15483*s12^4*s13^5 + 7540*s12^3*s13^6 +
              2442*s12^2*s13^7)*s23^2 + (729*s12^7*s13 + 2905*s12^6*s13^2 +
              11297*s12^5*s13^3 + 21010*s12^4*s13^4 + 13087*s12^3*s13^5 +
              8610*s12^2*s13^6 + 1458*s12*s13^7)*s23^3 +
            (330*s12^7 + 800*s12^6*s13 - 1397*s12^5*s13^2 + 2880*s12^4*s13^
                3 - 22*s12^3*s13^4 + 2258*s12^2*s13^5 + 2212*s12*s13^6 +
              750*s13^7)*s23^4 + (190*s12^6 - 841*s12^5*s13 -
              4329*s12^4*s13^2 - 9398*s12^3*s13^3 - 8717*s12^2*s13^4 -
              717*s12*s13^5 + 1260*s13^6)*s23^5 +
            (-540*s12^5 - 836*s12^4*s13 - 2246*s12^3*s13^2 - 4785*s12^2*s13^
                3 - 1238*s12*s13^4 + 230*s13^5)*s23^6 +
            (-330*s12^4 + 76*s12^3*s13 - 28*s12^2*s13^2 + 233*s12*s13^3 -
              320*s13^4)*s23^7 + (70*s12^3 - 40*s13^3)*s23^8) +
          p1q^5*p2q^2*((-303*s12^6*s13^3 + 828*s12^5*s13^4 + 1125*s12^4*s13^
                5 - 6*s12^3*s13^6)*s23^2 + (-1483*s12^6*s13^2 -
              3157*s12^5*s13^3 - 1509*s12^4*s13^4 - 1718*s12^3*s13^5 -
              443*s12^2*s13^6)*s23^3 + (-1215*s12^6*s13 - 5457*s12^5*s13^2 -
              7919*s12^4*s13^3 - 7753*s12^3*s13^4 - 4110*s12^2*s13^5 -
              972*s12*s13^6)*s23^4 + (-480*s12^6 - 2471*s12^5*s13 -
              5078*s12^4*s13^2 - 7608*s12^3*s13^3 - 5557*s12^2*s13^4 -
              1918*s12*s13^5 - 360*s13^6)*s23^5 +
            (-820*s12^5 - 747*s12^4*s13 - 1198*s12^3*s13^2 - 1904*s12^2*s13^
                3 - 510*s12*s13^4 - 680*s13^5)*s23^6 +
            (-200*s12^4 + 509*s12^3*s13 - 24*s12^2*s13^2 + 436*s12*s13^3 -
              280*s13^4)*s23^7 + (140*s12^3 + 40*s13^3)*s23^8) +
          p1q^6*p2q*((-512*s12^5*s13^3 - 1024*s12^4*s13^4 - 512*s12^3*s13^5)*
             s23^3 + (-199*s12^5*s13^2 - 1743*s12^4*s13^3 - 1743*s12^3*s13^
                4 - 199*s12^2*s13^5)*s23^4 + (243*s12^5*s13 -
              163*s12^4*s13^2 - 1446*s12^3*s13^3 - 163*s12^2*s13^4 +
              243*s12*s13^5)*s23^5 + (70*s12^5 + 556*s12^4*s13 +
              28*s12^3*s13^2 + 28*s12^2*s13^3 + 556*s12*s13^4 + 70*s13^5)*
             s23^6 + (140*s12^4 + 313*s12^3*s13 - 8*s12^2*s13^2 +
              313*s12*s13^3 + 140*s13^4)*s23^7 + (70*s12^3 + 70*s13^3)*
             s23^8)) + p3q^3*(p2q^5*(-3456*s12^6*s13^5 + 1152*s12^5*s13^6 +
            4032*s12^4*s13^7 - 576*s12^3*s13^8 + (-1170*s12^8*s13^2 +
              4374*s12^7*s13^3 + 18*s12^6*s13^4 + 3897*s12^5*s13^5 +
              3501*s12^4*s13^6 + 126*s12^3*s13^7 - 3969*s12^2*s13^8 +
              693*s12*s13^9 - 90*s13^10)*s23 + (-270*s12^8*s13 +
              1177*s12^7*s13^2 + 6220*s12^6*s13^3 + 3610*s12^5*s13^4 +
              2721*s12^4*s13^5 + 2736*s12^3*s13^6 - 5438*s12^2*s13^7 +
              1100*s12*s13^8 - 10*s13^9)*s23^2 + (-460*s12^7*s13 +
              5841*s12^6*s13^2 + 8821*s12^5*s13^3 + 10579*s12^4*s13^4 +
              7873*s12^3*s13^5 + 1975*s12^2*s13^6 + 191*s12*s13^7 +
              280*s13^8)*s23^3 + (-190*s12^6*s13 + 4994*s12^5*s13^2 +
              10062*s12^4*s13^3 + 10062*s12^3*s13^4 + 5638*s12^2*s13^5 -
              126*s12*s13^6 + 230*s13^7)*s23^4 + (1580*s12^4*s13^2 +
              3654*s12^3*s13^3 + 2404*s12^2*s13^4 + 90*s12*s13^5 + 30*s13^6)*
             s23^5) + p1q*p2q^4*(-108*s12^8*s13^3 + 1890*s12^7*s13^4 -
            6102*s12^6*s13^5 - 1899*s12^5*s13^6 + 5355*s12^4*s13^7 -
            819*s12^3*s13^8 + 27*s12^2*s13^9 + (270*s12^9*s13 -
              5301*s12^8*s13^2 + 11016*s12^7*s13^3 + 1710*s12^6*s13^4 +
              4473*s12^5*s13^5 - 648*s12^4*s13^6 + 4941*s12^3*s13^7 -
              8775*s12^2*s13^8 + 756*s12*s13^9 - 90*s13^10)*s23 +
            (90*s12^9 - 806*s12^8*s13 + 4449*s12^7*s13^2 + 28225*s12^6*s13^
                3 + 23917*s12^5*s13^4 + 15870*s12^4*s13^5 + 19512*s12^3*s13^
                6 - 5134*s12^2*s13^7 - 689*s12*s13^8 + 340*s13^9)*s23^2 +
            (-70*s12^8 - 1406*s12^7*s13 + 26045*s12^6*s13^2 +
              44045*s12^5*s13^3 + 56331*s12^4*s13^4 + 36399*s12^3*s13^5 +
              18881*s12^2*s13^6 - 3051*s12*s13^7 + 410*s13^8)*s23^3 +
            (-430*s12^7 + 56*s12^6*s13 + 20472*s12^5*s13^2 + 40215*s12^4*s13^
                3 + 37204*s12^3*s13^4 + 19628*s12^2*s13^5 - 1061*s12*s13^6 -
              630*s13^7)*s23^4 + (-290*s12^6 + 286*s12^5*s13 +
              3703*s12^4*s13^2 + 10490*s12^3*s13^3 + 4113*s12^2*s13^4 +
              345*s12*s13^5 - 680*s13^6)*s23^5 + (-20*s12^5 - 100*s12^4*s13 -
              1324*s12^3*s13^2 - 1232*s12^2*s13^3 - 200*s12*s13^4 - 70*s13^5)*
             s23^6) + p1q^2*p2q^3*(27*s12^9*s13^2 - 189*s12^8*s13^3 +
            2061*s12^7*s13^4 - 3051*s12^6*s13^5 - 3051*s12^5*s13^6 +
            2061*s12^4*s13^7 - 189*s12^3*s13^8 + 27*s12^2*s13^9 +
            (243*s12^9*s13 - 7299*s12^8*s13^2 + 12861*s12^7*s13^3 +
              15813*s12^6*s13^4 + 19008*s12^5*s13^5 + 1233*s12^4*s13^6 +
              8001*s12^3*s13^7 - 5679*s12^2*s13^8 + 243*s12*s13^9)*s23 +
            (350*s12^9 - 1618*s12^8*s13 + 7706*s12^7*s13^2 + 51772*s12^6*s13^
                3 + 70612*s12^5*s13^4 + 50524*s12^4*s13^5 + 29740*s12^3*s13^
                6 + 5762*s12^2*s13^7 - 1618*s12*s13^8 + 350*s13^9)*s23^2 +
            (-380*s12^8 - 1626*s12^7*s13 + 43038*s12^6*s13^2 +
              78943*s12^5*s13^3 + 108810*s12^4*s13^4 + 54643*s12^3*s13^5 +
              30078*s12^2*s13^6 - 1626*s12*s13^7 - 380*s13^8)*s23^3 +
            (-1170*s12^7 + 2422*s12^6*s13 + 30092*s12^5*s13^2 +
              56854*s12^4*s13^3 + 52318*s12^3*s13^4 + 19076*s12^2*s13^5 +
              2422*s12*s13^6 - 1170*s13^7)*s23^4 +
            (250*s12^6 + 1715*s12^5*s13 - 1905*s12^4*s13^2 + 8738*s12^3*s13^
                3 - 933*s12^2*s13^4 + 1715*s12*s13^5 + 250*s13^6)*s23^5 +
            (740*s12^5 - 382*s12^4*s13 - 5613*s12^3*s13^2 - 3021*s12^2*s13^
                3 - 382*s12*s13^4 + 740*s13^5)*s23^6 +
            (50*s12^4 + 90*s12^3*s13 - 12*s12^2*s13^2 + 90*s12*s13^3 +
              50*s13^4)*s23^7) + p1q^3*p2q^2*(-81*s12^8*s13^3 +
            495*s12^7*s13^4 - 360*s12^6*s13^5 - 828*s12^5*s13^6 +
            81*s12^4*s13^7 - 27*s12^3*s13^8 + (-3627*s12^8*s13^2 +
              5544*s12^7*s13^3 + 12411*s12^6*s13^4 + 15840*s12^5*s13^5 +
              3159*s12^4*s13^6 + 3240*s12^3*s13^7 - 1143*s12^2*s13^8)*s23 +
            (-1701*s12^8*s13 + 6255*s12^7*s13^2 + 31998*s12^6*s13^3 +
              53903*s12^5*s13^4 + 44265*s12^4*s13^5 + 17484*s12^3*s13^6 +
              5735*s12^2*s13^7 - 729*s12*s13^8)*s23^2 +
            (-1340*s12^8 - 829*s12^7*s13 + 31100*s12^6*s13^2 +
              50043*s12^5*s13^3 + 77555*s12^4*s13^4 + 37719*s12^3*s13^5 +
              14324*s12^2*s13^6 + 545*s12*s13^7 - 510*s13^8)*s23^3 +
            (-1200*s12^7 + 3922*s12^6*s13 + 16284*s12^5*s13^2 +
              24067*s12^4*s13^3 + 31412*s12^3*s13^4 + 4229*s12^2*s13^5 +
              2600*s12*s13^6 + 20*s13^7)*s23^4 +
            (1460*s12^6 + 1500*s12^5*s13 - 13487*s12^4*s13^2 -
              5486*s12^3*s13^3 - 4853*s12^2*s13^4 + 202*s12*s13^5 +
              1230*s13^6)*s23^5 + (1140*s12^5 - 1237*s12^4*s13 -
              9205*s12^3*s13^2 - 3018*s12^2*s13^3 - 1041*s12*s13^4 +
              350*s13^5)*s23^6 + (-200*s12^4 + 313*s12^3*s13 -
              32*s12^2*s13^2 + 83*s12*s13^3 - 360*s13^4)*s23^7 +
            (-20*s12^3 - 10*s13^3)*s23^8) + p1q^4*p2q*
           ((2439*s12^7*s13^3 + 5544*s12^6*s13^4 + 6426*s12^5*s13^5 +
              2808*s12^4*s13^6 + 783*s12^3*s13^7)*s23 +
            (4062*s12^7*s13^2 + 12076*s12^6*s13^3 + 20343*s12^5*s13^4 +
              18253*s12^4*s13^5 + 6675*s12^3*s13^6 + 1327*s12^2*s13^7)*
             s23^2 + (1458*s12^7*s13 + 11526*s12^6*s13^2 + 14707*s12^5*s13^
                3 + 21658*s12^4*s13^4 + 12917*s12^3*s13^5 + 2581*s12^2*s13^
                6 + 729*s12*s13^7)*s23^3 + (750*s12^7 + 2212*s12^6*s13 +
              1286*s12^5*s13^2 - 5854*s12^4*s13^3 + 2880*s12^3*s13^4 -
              425*s12^2*s13^5 + 800*s12*s13^6 + 330*s13^7)*s23^4 +
            (1260*s12^6 - 717*s12^5*s13 - 12929*s12^4*s13^2 -
              12638*s12^3*s13^3 - 2709*s12^2*s13^4 - 841*s12*s13^5 +
              190*s13^6)*s23^5 + (230*s12^5 - 1238*s12^4*s13 -
              6729*s12^3*s13^2 - 1598*s12^2*s13^3 - 836*s12*s13^4 -
              540*s13^5)*s23^6 + (-320*s12^4 + 233*s12^3*s13 -
              28*s12^2*s13^2 + 76*s12*s13^3 - 330*s13^4)*s23^7 +
            (-40*s12^3 + 70*s13^3)*s23^8) +
          p1q^5*((-239*s12^6*s13^3 - 654*s12^5*s13^4 - 303*s12^4*s13^5 +
              112*s12^3*s13^6)*s23^2 + (181*s12^6*s13^2 - 2421*s12^5*s13^3 -
              3947*s12^4*s13^4 - 1268*s12^3*s13^5 - 211*s12^2*s13^6)*s23^3 +
            (-1485*s12^5*s13^2 - 7350*s12^4*s13^3 - 4924*s12^3*s13^4 -
              888*s12^2*s13^5 - 243*s12*s13^6)*s23^4 +
            (40*s12^6 + 70*s12^5*s13 - 3491*s12^4*s13^2 - 5650*s12^3*s13^3 -
              1068*s12^2*s13^4 - 483*s12*s13^5 - 80*s13^6)*s23^5 +
            (60*s12^5 + 80*s12^4*s13 - 1833*s12^3*s13^2 - 479*s12^2*s13^3 -
              157*s12*s13^4 - 80*s13^5)*s23^6 + (10*s12^3*s13 -
              8*s12^2*s13^2 + 83*s12*s13^3 + 80*s13^4)*s23^7 +
            (-20*s12^3 + 80*s13^3)*s23^8)) +
        p3q^2*(p2q^6*(2304*s12^5*s13^6 + 1152*s12^4*s13^7 -
            1152*s12^3*s13^8 + (1422*s12^7*s13^3 + 234*s12^6*s13^4 +
              3780*s12^5*s13^5 - 684*s12^4*s13^6 - 4968*s12^3*s13^7 -
              3150*s12^2*s13^8 + 306*s12*s13^9 - 180*s13^10)*s23 +
            (910*s12^7*s13^2 + 939*s12^6*s13^3 + 1658*s12^5*s13^4 -
              675*s12^4*s13^5 - 5663*s12^3*s13^6 - 6710*s12^2*s13^7 +
              669*s12*s13^8 - 300*s13^9)*s23^2 + (1708*s12^6*s13^2 +
              2444*s12^5*s13^3 + 4114*s12^4*s13^4 + 868*s12^3*s13^5 -
              3030*s12^2*s13^6 + 350*s12*s13^7 - 30*s13^8)*s23^3 +
            (1114*s12^5*s13^2 + 3877*s12^4*s13^3 + 4650*s12^3*s13^4 +
              2024*s12^2*s13^5 + 77*s12*s13^6 + 120*s13^7)*s23^4 +
            (316*s12^4*s13^2 + 1530*s12^3*s13^3 + 1544*s12^2*s13^4 +
              90*s12*s13^5 + 30*s13^6)*s23^5) + p1q*p2q^5*(162*s12^7*s13^4 -
            1566*s12^6*s13^5 + 3051*s12^5*s13^6 + 2889*s12^4*s13^7 -
            1809*s12^3*s13^8 + 81*s12^2*s13^9 + (-900*s12^8*s13^2 +
              4563*s12^7*s13^3 - 792*s12^6*s13^4 + 8460*s12^5*s13^5 +
              1728*s12^4*s13^6 - 4941*s12^3*s13^7 - 8352*s12^2*s13^8 +
              702*s12*s13^9 - 180*s13^10)*s23 + (-180*s12^8*s13 +
              4134*s12^7*s13^2 + 8933*s12^6*s13^3 + 14463*s12^5*s13^4 +
              15075*s12^4*s13^5 + 5330*s12^3*s13^6 - 13020*s12^2*s13^7 +
              537*s12*s13^8 + 480*s13^9)*s23^2 + (-20*s12^7*s13 +
              10125*s12^6*s13^2 + 19483*s12^5*s13^3 + 35213*s12^4*s13^4 +
              25762*s12^3*s13^5 + 5035*s12^2*s13^6 - 1353*s12*s13^7 +
              1300*s13^8)*s23^3 + (240*s12^6*s13 + 6305*s12^5*s13^2 +
              21582*s12^4*s13^3 + 24951*s12^3*s13^4 + 15218*s12^2*s13^5 -
              819*s12*s13^6 + 360*s13^7)*s23^4 +
            (60*s12^5*s13 + 1128*s12^4*s13^2 + 5564*s12^3*s13^3 +
              4764*s12^2*s13^4 + 189*s12*s13^5 - 360*s13^6)*s23^5 +
            (-20*s12^4*s13 - 326*s12^3*s13^2 - 1102*s12^2*s13^3 -
              180*s12*s13^4 - 80*s13^5)*s23^6) + p1q^2*p2q^4*
           (-81*s12^8*s13^3 + 81*s12^7*s13^4 - 2475*s12^6*s13^5 +
            576*s12^5*s13^6 + 2475*s12^4*s13^7 - 657*s12^3*s13^8 +
            81*s12^2*s13^9 + (-1773*s12^8*s13^2 + 8460*s12^7*s13^3 +
              5400*s12^6*s13^4 + 14112*s12^5*s13^5 + 5418*s12^4*s13^6 +
              2592*s12^3*s13^7 - 7587*s12^2*s13^8 + 486*s12*s13^9)*s23 +
            (-673*s12^8*s13 + 8878*s12^7*s13^2 + 27601*s12^6*s13^3 +
              43506*s12^5*s13^4 + 38575*s12^4*s13^5 + 22867*s12^3*s13^6 -
              4565*s12^2*s13^7 - 1293*s12*s13^8 + 780*s13^9)*s23^2 +
            (-260*s12^8 - 124*s12^7*s13 + 22142*s12^6*s13^2 +
              46525*s12^5*s13^3 + 74685*s12^4*s13^4 + 46735*s12^3*s13^5 +
              23123*s12^2*s13^6 - 3369*s12*s13^7 - 10*s13^8)*s23^3 +
            (-290*s12^7 + 1068*s12^6*s13 + 11818*s12^5*s13^2 +
              39520*s12^4*s13^3 + 37506*s12^3*s13^4 + 24165*s12^2*s13^5 +
              286*s12*s13^6 - 2100*s13^7)*s23^4 +
            (210*s12^6 + 536*s12^5*s13 - 538*s12^4*s13^2 + 5220*s12^3*s13^3 +
              621*s12^2*s13^4 + 1207*s12*s13^5 - 980*s13^6)*s23^5 +
            (250*s12^5 + 47*s12^4*s13 - 2043*s12^3*s13^2 - 4112*s12^2*s13^3 -
              579*s12*s13^4 + 400*s13^5)*s23^6 + (10*s12^4 + 30*s12^3*s13 -
              8*s12^2*s13^2 + 90*s12*s13^3 + 70*s13^4)*s23^7) +
          p1q^3*p2q^3*(-27*s12^8*s13^3 + 81*s12^7*s13^4 - 828*s12^6*s13^5 -
            360*s12^5*s13^6 + 495*s12^4*s13^7 - 81*s12^3*s13^8 +
            (-1467*s12^8*s13^2 + 5832*s12^7*s13^3 + 8019*s12^6*s13^4 +
              12600*s12^5*s13^5 + 4311*s12^4*s13^6 + 3600*s12^3*s13^7 -
              2655*s12^2*s13^8)*s23 + (-729*s12^8*s13 + 7679*s12^7*s13^2 +
              25584*s12^6*s13^3 + 46533*s12^5*s13^4 + 39647*s12^4*s13^5 +
              19362*s12^3*s13^6 + 3987*s12^2*s13^7 - 1701*s12*s13^8)*s23^2 +
            (-510*s12^8 + 545*s12^7*s13 + 19832*s12^6*s13^2 +
              41931*s12^5*s13^3 + 73343*s12^4*s13^4 + 38055*s12^3*s13^5 +
              22028*s12^2*s13^6 - 829*s12*s13^7 - 1340*s13^8)*s23^3 +
            (20*s12^7 + 2600*s12^6*s13 + 5849*s12^5*s13^2 + 29468*s12^4*s13^
                3 + 27955*s12^3*s13^4 + 12396*s12^2*s13^5 + 3922*s12*s13^6 -
              1200*s13^7)*s23^4 + (1230*s12^6 + 202*s12^5*s13 -
              8741*s12^4*s13^2 - 2570*s12^3*s13^3 - 7979*s12^2*s13^4 +
              1500*s12*s13^5 + 1460*s13^6)*s23^5 +
            (350*s12^5 - 1041*s12^4*s13 - 5286*s12^3*s13^2 - 5641*s12^2*s13^
                3 - 1237*s12*s13^4 + 1140*s13^5)*s23^6 +
            (-360*s12^4 + 83*s12^3*s13 - 32*s12^2*s13^2 + 313*s12*s13^3 -
              200*s13^4)*s23^7 + (-10*s12^3 - 20*s13^3)*s23^8) +
          p1q^4*p2q^2*((2880*s12^7*s13^3 + 5706*s12^6*s13^4 +
              7272*s12^5*s13^5 + 3762*s12^4*s13^6 + 1908*s12^3*s13^7)*s23 +
            (4818*s12^7*s13^2 + 12981*s12^6*s13^3 + 25509*s12^5*s13^4 +
              23889*s12^4*s13^5 + 10065*s12^3*s13^6 + 3522*s12^2*s13^7)*
             s23^2 + (2187*s12^7*s13 + 10175*s12^6*s13^2 + 16417*s12^5*s13^
                3 + 33680*s12^4*s13^4 + 17389*s12^3*s13^5 + 8231*s12^2*s13^
                6 + 2187*s12*s13^7)*s23^3 + (1140*s12^7 + 3325*s12^6*s13 -
              2935*s12^5*s13^2 + 635*s12^4*s13^3 + 5495*s12^3*s13^4 -
              991*s12^2*s13^5 + 3325*s12*s13^6 + 1140*s13^7)*s23^4 +
            (1570*s12^6 - 972*s12^5*s13 - 13613*s12^4*s13^2 -
              11166*s12^3*s13^3 - 9077*s12^2*s13^4 - 972*s12*s13^5 +
              1570*s13^6)*s23^5 + (-240*s12^5 - 1611*s12^4*s13 -
              5695*s12^3*s13^2 - 3751*s12^2*s13^3 - 1611*s12*s13^4 -
              240*s13^5)*s23^6 + (-630*s12^4 + 499*s12^3*s13 -
              44*s12^2*s13^2 + 499*s12*s13^3 - 630*s13^4)*s23^7 +
            (40*s12^3 + 40*s13^3)*s23^8) +
          p1q^6*((-400*s12^5*s13^3 - 512*s12^4*s13^4 - 112*s12^3*s13^5)*
             s23^3 + (-410*s12^5*s13^2 - 1326*s12^4*s13^3 - 417*s12^3*s13^4 +
              211*s12^2*s13^5)*s23^4 + (-824*s12^4*s13^2 - 723*s12^3*s13^3 +
              661*s12^2*s13^4 + 243*s12*s13^5)*s23^5 +
            (-10*s12^5 - 10*s12^4*s13 - 418*s12^3*s13^2 + 446*s12^2*s13^3 +
              566*s12*s13^4 + 80*s13^5)*s23^6 + (-20*s12^4 - 10*s12^3*s13 -
              4*s12^2*s13^2 + 323*s12*s13^3 + 160*s13^4)*s23^7 +
            (-10*s12^3 + 80*s13^3)*s23^8) + p1q^5*p2q*
           ((-654*s12^6*s13^3 + 153*s12^5*s13^4 + 828*s12^4*s13^5 +
              21*s12^3*s13^6)*s23^2 + (-1091*s12^6*s13^2 - 4634*s12^5*s13^3 -
              3129*s12^4*s13^4 - 2185*s12^3*s13^5 - 1159*s12^2*s13^6)*s23^3 +
            (-972*s12^6*s13 - 6054*s12^5*s13^2 - 11317*s12^4*s13^3 -
              7595*s12^3*s13^4 - 4485*s12^2*s13^5 - 1215*s12*s13^6)*s23^4 +
            (-360*s12^6 - 1918*s12^5*s13 - 7501*s12^4*s13^2 -
              8580*s12^3*s13^3 - 4106*s12^2*s13^4 - 2471*s12*s13^5 -
              480*s13^6)*s23^5 + (-680*s12^5 - 510*s12^4*s13 -
              2552*s12^3*s13^2 - 874*s12^2*s13^3 - 747*s12*s13^4 - 820*s13^5)*
             s23^6 + (-280*s12^4 + 436*s12^3*s13 - 24*s12^2*s13^2 +
              509*s12*s13^3 - 200*s13^4)*s23^7 + (40*s12^3 + 140*s13^3)*
             s23^8))))/(p2q*p3q^7*((162*s12^6*s13^3 + 162*s12^5*s13^4)*
          s23^2 + (162*s12^5*s13^3 + 162*s12^4*s13^4)*s23^3) +
       p3q^6*(p1q*p2q*((324*s12^6*s13^3 + 162*s12^5*s13^4 - 162*s12^4*s13^5)*
            s23^2 - 162*s12^3*s13^5*s23^3 + (-324*s12^4*s13^3 -
             162*s12^3*s13^4)*s23^4) +
         p2q^2*((648*s12^6*s13^3 + 324*s12^5*s13^4 - 324*s12^4*s13^5)*s23^2 +
           (486*s12^5*s13^3 + 324*s12^4*s13^4 - 162*s12^3*s13^5)*s23^3 +
           (-162*s12^4*s13^3 - 162*s12^3*s13^4)*s23^4)) +
       p3q^5*(p2q^3*((972*s12^6*s13^3 - 324*s12^5*s13^4 - 1134*s12^4*s13^5 +
             162*s12^3*s13^6)*s23^2 + (324*s12^5*s13^3 - 162*s12^4*s13^4 -
             486*s12^3*s13^5)*s23^3 + (-648*s12^4*s13^3 - 648*s12^3*s13^4)*
            s23^4) + p1q*p2q^2*((1134*s12^6*s13^3 - 972*s12^4*s13^5 +
             162*s12^3*s13^6)*s23^2 + (-324*s12^5*s13^3 - 324*s12^4*s13^4 -
             810*s12^3*s13^5)*s23^3 + (-1296*s12^4*s13^3 - 810*s12^3*s13^4)*
            s23^4 + 162*s12^3*s13^3*s23^5) + p1q^2*p2q*
          ((162*s12^6*s13^3 - 162*s12^5*s13^4 - 324*s12^4*s13^5)*s23^2 +
           (-486*s12^5*s13^3 - 324*s12^4*s13^4 - 324*s12^3*s13^5)*s23^3 +
           (-486*s12^4*s13^3 - 162*s12^3*s13^4)*s23^4 + 162*s12^3*s13^3*
            s23^5)) + p3q*(p2q^7*((162*s12^4*s13^5 + 162*s12^3*s13^6)*s23^2 +
           (162*s12^4*s13^4 + 162*s12^3*s13^5)*s23^3) +
         p1q*p2q^6*((-162*s12^5*s13^4 + 162*s12^4*s13^5 + 324*s12^3*s13^6)*
            s23^2 - 162*s12^5*s13^3*s23^3 + (-162*s12^4*s13^3 -
             324*s12^3*s13^4)*s23^4) + p1q^2*p2q^5*
          ((-324*s12^5*s13^4 - 162*s12^4*s13^5 + 162*s12^3*s13^6)*s23^2 +
           (-324*s12^5*s13^3 - 324*s12^4*s13^4 - 486*s12^3*s13^5)*s23^3 +
           (-162*s12^4*s13^3 - 486*s12^3*s13^4)*s23^4 + 162*s12^3*s13^3*
            s23^5) + p1q^4*p2q^3*(162*s12^4*s13^4*s23^3 +
           (162*s12^4*s13^3 + 162*s12^3*s13^4)*s23^4 + 162*s12^3*s13^3*
            s23^5) + p1q^3*p2q^4*((-162*s12^5*s13^4 - 162*s12^4*s13^5)*
            s23^2 + (-162*s12^5*s13^3 - 324*s12^3*s13^5)*s23^3 +
           162*s12^4*s13^3*s23^4 + 324*s12^3*s13^3*s23^5)) +
       p3q^4*(p2q^4*((648*s12^6*s13^3 - 1296*s12^5*s13^4 - 1296*s12^4*s13^5 +
             648*s12^3*s13^6)*s23^2 + (-324*s12^5*s13^3 - 648*s12^4*s13^4 -
             324*s12^3*s13^5)*s23^3 + (-972*s12^4*s13^3 - 972*s12^3*s13^4)*
            s23^4) + p1q^3*p2q*((-162*s12^5*s13^4 - 162*s12^4*s13^5)*s23^2 +
           (-324*s12^5*s13^3 - 162*s12^3*s13^5)*s23^3 + 162*s12^3*s13^4*
            s23^4 + 324*s12^3*s13^3*s23^5) + p1q*p2q^3*
          ((1458*s12^6*s13^3 - 1134*s12^5*s13^4 - 1782*s12^4*s13^5 +
             810*s12^3*s13^6)*s23^2 + (-1134*s12^5*s13^3 - 972*s12^4*s13^4 -
             1458*s12^3*s13^5)*s23^3 + (-2106*s12^4*s13^3 - 1782*s12^3*s13^4)*
            s23^4 + 486*s12^3*s13^3*s23^5) + p1q^2*p2q^2*
          ((486*s12^6*s13^3 - 810*s12^5*s13^4 - 1134*s12^4*s13^5 +
             162*s12^3*s13^6)*s23^2 + (-1620*s12^5*s13^3 - 972*s12^4*s13^4 -
             1296*s12^3*s13^5)*s23^3 + (-1296*s12^4*s13^3 - 648*s12^3*s13^4)*
            s23^4 + 810*s12^3*s13^3*s23^5)) +
       p3q^2*(p2q^6*((-324*s12^5*s13^4 + 324*s12^4*s13^5 + 648*s12^3*s13^6)*
            s23^2 + (-162*s12^5*s13^3 + 324*s12^4*s13^4 + 486*s12^3*s13^5)*
            s23^3 + (-162*s12^4*s13^3 - 162*s12^3*s13^4)*s23^4) +
         p1q*p2q^5*((162*s12^6*s13^3 - 972*s12^5*s13^4 + 1134*s12^3*s13^6)*
            s23^2 + (-810*s12^5*s13^3 - 324*s12^4*s13^4 - 324*s12^3*s13^5)*
            s23^3 + (-810*s12^4*s13^3 - 1296*s12^3*s13^4)*s23^4 +
           162*s12^3*s13^3*s23^5) + p1q^4*p2q^2*(324*s12^4*s13^4*s23^3 +
           (324*s12^4*s13^3 + 324*s12^3*s13^4)*s23^4 + 324*s12^3*s13^3*
            s23^5) + p1q^2*p2q^4*((162*s12^6*s13^3 - 1134*s12^5*s13^4 -
             810*s12^4*s13^5 + 486*s12^3*s13^6)*s23^2 +
           (-1296*s12^5*s13^3 - 972*s12^4*s13^4 - 1620*s12^3*s13^5)*s23^3 +
           (-648*s12^4*s13^3 - 1296*s12^3*s13^4)*s23^4 + 810*s12^3*s13^3*
            s23^5) + p1q^3*p2q^3*((-486*s12^5*s13^4 - 486*s12^4*s13^5)*
            s23^2 + (-648*s12^5*s13^3 - 810*s12^3*s13^5)*s23^3 +
           (324*s12^4*s13^3 + 162*s12^3*s13^4)*s23^4 + 972*s12^3*s13^3*
            s23^5)) + p3q^3*(p2q^5*((162*s12^6*s13^3 - 1134*s12^5*s13^4 -
             324*s12^4*s13^5 + 972*s12^3*s13^6)*s23^2 +
           (-486*s12^5*s13^3 - 162*s12^4*s13^4 + 324*s12^3*s13^5)*s23^3 +
           (-648*s12^4*s13^3 - 648*s12^3*s13^4)*s23^4) +
         p1q^4*p2q*(162*s12^4*s13^4*s23^3 + (162*s12^4*s13^3 +
             162*s12^3*s13^4)*s23^4 + 162*s12^3*s13^3*s23^5) +
         p1q*p2q^4*((810*s12^6*s13^3 - 1782*s12^5*s13^4 - 1134*s12^4*s13^5 +
             1458*s12^3*s13^6)*s23^2 + (-1458*s12^5*s13^3 - 972*s12^4*s13^4 -
             1134*s12^3*s13^5)*s23^3 + (-1782*s12^4*s13^3 - 2106*s12^3*s13^4)*
            s23^4 + 486*s12^3*s13^3*s23^5) + p1q^3*p2q^2*
          ((-486*s12^5*s13^4 - 486*s12^4*s13^5)*s23^2 +
           (-810*s12^5*s13^3 - 648*s12^3*s13^5)*s23^3 +
           (162*s12^4*s13^3 + 324*s12^3*s13^4)*s23^4 + 972*s12^3*s13^3*
            s23^5) + p1q^2*p2q^3*((486*s12^6*s13^3 - 1458*s12^5*s13^4 -
             1458*s12^4*s13^5 + 486*s12^3*s13^6)*s23^2 +
           (-2106*s12^5*s13^3 - 1296*s12^4*s13^4 - 2106*s12^3*s13^5)*s23^3 +
           (-1296*s12^4*s13^3 - 1296*s12^3*s13^4)*s23^4 + 1296*s12^3*s13^3*
            s23^5))) + ((p3q^5*((9*s12^3 + 27*s12^2*s13 + 18*s12*s13^2)*s23 +
          (17*s12^2 + 26*s12*s13)*s23^2 + 8*s12*s23^3) +
        p2q^5*((18*s12^2*s13 + 27*s12*s13^2 + 9*s13^3)*s23 +
          (26*s12*s13 + 17*s13^2)*s23^2 + 8*s13*s23^3) +
        p1q^3*p2q^2*((-40*s12^2 - 62*s12*s13 - 22*s13^2)*s23^2 +
          (-60*s12 - 42*s13)*s23^3 - 20*s23^4) + p1q^2*p2q^3*
         ((36*s12^2*s13 + 54*s12*s13^2 + 18*s13^3)*s23 +
          (-40*s12^2 - 10*s12*s13 + 12*s13^2)*s23^2 + (-60*s12 - 26*s13)*
           s23^3 - 20*s23^4) + p1q*p2q^4*((36*s12^2*s13 + 54*s12*s13^2 +
            18*s13^3)*s23 + (-20*s12^2 + 21*s12*s13 + 23*s13^2)*s23^2 +
          (-30*s12 - 5*s13)*s23^3 - 10*s23^4) +
        p3q*(p2q^4*(36*s12*s13^3 + (18*s12^3 + 54*s12^2*s13 + 126*s12*s13^2 +
              54*s13^3)*s23 + (28*s12^2 + 97*s12*s13 + 89*s13^2)*s23^2 +
            (9*s12 + 34*s13)*s23^3) + p1q^2*p2q^2*
           ((36*s12^3 + 36*s12^2*s13 + 54*s12*s13^2 + 54*s13^3)*s23 +
            (-68*s12^2 - 174*s12*s13 - 16*s13^2)*s23^2 + (-164*s12 - 130*s13)*
             s23^3 - 60*s23^4) + p1q^3*p2q*((-62*s12^2 - 124*s12*s13 -
              62*s13^2)*s23^2 + (-102*s12 - 102*s13)*s23^3 - 40*s23^4) +
          p1q*p2q^3*(36*s12*s13^3 + (36*s12^3 + 54*s12^2*s13 +
              144*s12*s13^2 + 90*s13^3)*s23 + (-15*s12^2 - 27*s12*s13 +
              80*s13^2)*s23^2 + (-92*s12 - 51*s13)*s23^3 - 40*s23^4)) +
        p3q^2*(p2q^3*(-72*s12^2*s13^2 + 36*s12*s13^3 +
            (63*s12^3 + 63*s12^2*s13 + 126*s12*s13^2 + 90*s13^3)*s23 +
            (102*s12^2 + 143*s12*s13 + 146*s13^2)*s23^2 + (36*s12 + 53*s13)*
             s23^3) + p1q^2*p2q*((54*s12^3 + 54*s12^2*s13 + 36*s12*s13^2 +
              36*s13^3)*s23 + (-16*s12^2 - 174*s12*s13 - 68*s13^2)*s23^2 +
            (-130*s12 - 164*s13)*s23^3 - 60*s23^4) +
          p1q*p2q^2*(-72*s12^2*s13^2 + (108*s12^3 + 36*s12^2*s13 +
              36*s12*s13^2 + 108*s13^3)*s23 + (62*s12^2 - 132*s12*s13 +
              62*s13^2)*s23^2 + (-108*s12 - 108*s13)*s23^3 - 60*s23^4) +
          p1q^3*((-22*s12^2 - 62*s12*s13 - 40*s13^2)*s23^2 +
            (-42*s12 - 60*s13)*s23^3 - 20*s23^4)) +
        p3q^3*(p2q^2*(36*s12^3*s13 - 72*s12^2*s13^2 +
            (90*s12^3 + 126*s12^2*s13 + 63*s12*s13^2 + 63*s13^3)*s23 +
            (146*s12^2 + 143*s12*s13 + 102*s13^2)*s23^2 + (53*s12 + 36*s13)*
             s23^3) + p1q*p2q*(36*s12^3*s13 + (90*s12^3 + 144*s12^2*s13 +
              54*s12*s13^2 + 36*s13^3)*s23 + (80*s12^2 - 27*s12*s13 -
              15*s13^2)*s23^2 + (-51*s12 - 92*s13)*s23^3 - 40*s23^4) +
          p1q^2*((18*s12^3 + 54*s12^2*s13 + 36*s12*s13^2)*s23 +
            (12*s12^2 - 10*s12*s13 - 40*s13^2)*s23^2 + (-26*s12 - 60*s13)*
             s23^3 - 20*s23^4)) +
        p3q^4*(p2q*(36*s12^3*s13 + (54*s12^3 + 126*s12^2*s13 + 54*s12*s13^2 +
              18*s13^3)*s23 + (89*s12^2 + 97*s12*s13 + 28*s13^2)*s23^2 +
            (34*s12 + 9*s13)*s23^3) + p1q*((18*s12^3 + 54*s12^2*s13 +
              36*s12*s13^2)*s23 + (23*s12^2 + 21*s12*s13 - 20*s13^2)*s23^2 +
            (-5*s12 - 30*s13)*s23^3 - 10*s23^4)))*Log(p1q/(p1q + p2q + p3q))^
        2)/(27*p2q*p3q^4*s12*s13*s23^2 + p3q^3*(27*p1q*p2q*s12*s13*s23^2 +
         81*p2q^2*s12*s13*s23^2) + p3q^2*(54*p1q*p2q^2*s12*s13*s23^2 +
         81*p2q^3*s12*s13*s23^2) + p3q*(27*p1q*p2q^3*s12*s13*s23^2 +
         27*p2q^4*s12*s13*s23^2)) +
     ((p3q^5*((-9*s12^3 - 27*s12^2*s13 - 18*s12*s13^2)*s23 +
          (-26*s12^2 - 35*s12*s13)*s23^2 - 17*s12*s23^3) +
        p2q^5*((s12*s13 + s13^2)*s23^2 + s13*s23^3) +
        p1q*p2q^4*((2*s12^2 + 6*s12*s13 + 4*s13^2)*s23^2 +
          (3*s12 + 5*s13)*s23^3 + s23^4) + p1q^3*p2q^2*
         ((4*s12^2 + 8*s12*s13 + 4*s13^2)*s23^2 + (6*s12 + 6*s13)*s23^3 +
          2*s23^4) + p1q^2*p2q^3*((4*s12^2 + 10*s12*s13 + 6*s13^2)*s23^2 +
          (6*s12 + 8*s13)*s23^3 + 2*s23^4) +
        p3q^4*(p2q*(-18*s12^3*s13 + (-54*s12^3 - 99*s12^2*s13 - 45*s12*s13^2)*
             s23 + (-98*s12^2 - 97*s12*s13 - s13^2)*s23^2 - 52*s12*s23^3) +
          p1q*((-18*s12^3 - 54*s12^2*s13 - 36*s12*s13^2)*s23 +
            (-59*s12^2 - 75*s12*s13 + 2*s13^2)*s23^2 + (-40*s12 + 3*s13)*
             s23^3 + s23^4)) + p3q^3*(p2q^2*(-18*s12^3*s13 + 36*s12^2*s13^2 +
            (-90*s12^3 - 90*s12^2*s13 - 36*s12*s13^2)*s23 +
            (-128*s12^2 - 98*s12*s13 - 3*s13^2)*s23^2 - 62*s12*s23^3) +
          p1q^2*((-18*s12^3 - 54*s12^2*s13 - 36*s12*s13^2)*s23 +
            (-66*s12^2 - 80*s12*s13 + 4*s13^2)*s23^2 + (-46*s12 + 6*s13)*
             s23^3 + 2*s23^4) + p1q*p2q*(-18*s12^3*s13 +
            (-90*s12^3 - 144*s12^2*s13 - 54*s12*s13^2)*s23 +
            (-170*s12^2 - 135*s12*s13 + 6*s13^2)*s23^2 + (-84*s12 + 11*s13)*
             s23^3 + 4*s23^4)) + p3q^2*(p2q^3*(36*s12^2*s13^2 -
            18*s12*s13^3 + (-63*s12^3 - 27*s12^2*s13 - 36*s12*s13^2)*s23 +
            (-75*s12^2 - 53*s12*s13 - 2*s13^2)*s23^2 + (-36*s12 + s13)*
             s23^3) + p1q^3*((-14*s12^2 - 10*s12*s13 + 4*s13^2)*s23^2 +
            (-12*s12 + 6*s13)*s23^3 + 2*s23^4) + p1q*p2q^2*
           (36*s12^2*s13^2 + (-108*s12^3 - 54*s12^2*s13 + 18*s12*s13^2)*s23 +
            (-152*s12^2 - 30*s12*s13 + 10*s13^2)*s23^2 + (-54*s12 + 18*s13)*
             s23^3 + 6*s23^4) + p1q^2*p2q*((-54*s12^3 - 72*s12^2*s13 -
              18*s12*s13^2)*s23 + (-128*s12^2 - 78*s12*s13 + 14*s13^2)*
             s23^2 + (-68*s12 + 20*s13)*s23^3 + 6*s23^4)) +
        p3q*(p2q^4*(-18*s12*s13^3 + (-18*s12^3 - 9*s12^2*s13 - 27*s12*s13^2)*
             s23 + (-19*s12^2 - 16*s12*s13 + s13^2)*s23^2 +
            (-9*s12 + 2*s13)*s23^3) + p1q^3*p2q*
           ((-10*s12^2 - 2*s12*s13 + 8*s13^2)*s23^2 + (-6*s12 + 12*s13)*
             s23^3 + 4*s23^4) + p1q*p2q^3*(-18*s12*s13^3 - 36*s12^3*s23 +
            (-39*s12^2 + 18*s12*s13 + 10*s13^2)*s23^2 + (-7*s12 + 15*s13)*
             s23^3 + 4*s23^4) + p1q^2*p2q^2*((-36*s12^3 - 18*s12^2*s13 +
              18*s12*s13^2)*s23 + (-58*s12^2 + 12*s12*s13 + 16*s13^2)*s23^2 +
            (-16*s12 + 22*s13)*s23^3 + 6*s23^4)))*Log(p2q/(p1q + p2q + p3q))^
        2)/(3*p2q*p3q^4*s12*s13*s23^2 + p3q^3*(3*p1q*p2q*s12*s13*s23^2 +
         9*p2q^2*s12*s13*s23^2) + p3q^2*(6*p1q*p2q^2*s12*s13*s23^2 +
         9*p2q^3*s12*s13*s23^2) + p3q*(3*p1q*p2q^3*s12*s13*s23^2 +
         3*p2q^4*s12*s13*s23^2)) +
     ((p3q^5*(-5*s12^4 - 19*s12^3*s13 - 14*s12^2*s13^2 +
          (-11*s12^3 - 20*s12^2*s13)*s23 - 6*s12^2*s23^2) +
        p2q^5*(-5*s12^2*s13^2 - s12*s13^3 + 4*s13^4 +
          (-13*s12^2*s13 - 26*s12*s13^2 - 4*s13^3)*s23 +
          (-25*s12*s13 - 20*s13^2)*s23^2 - 12*s13*s23^3) +
        p1q^3*p2q^2*(-10*s12^2*s13^2 - 2*s12*s13^3 + 8*s13^4 +
          (-110*s12^2*s13 - 256*s12*s13^2 - 128*s13^3)*s23 +
          (-52*s12^2 - 362*s12*s13 - 336*s13^2)*s23^2 + (-108*s12 - 256*s13)*
           s23^3 - 56*s23^4) + p1q^2*p2q^3*(-20*s12^2*s13^2 - 4*s12*s13^3 +
          16*s13^4 + (-115*s12^2*s13 - 257*s12*s13^2 - 106*s13^3)*s23 +
          (-39*s12^2 - 334*s12*s13 - 302*s13^2)*s23^2 + (-81*s12 - 222*s13)*
           s23^3 - 42*s23^4) + p1q^4*p2q*((-42*s12^2*s13 - 102*s12*s13^2 -
            60*s13^3)*s23 + (-26*s12^2 - 156*s12*s13 - 148*s13^2)*s23^2 +
          (-54*s12 - 116*s13)*s23^3 - 28*s23^4) +
        p1q*p2q^4*(-15*s12^2*s13^2 - 3*s12*s13^3 + 12*s13^4 +
          (-60*s12^2*s13 - 129*s12*s13^2 - 42*s13^3)*s23 +
          (-13*s12^2 - 153*s12*s13 - 134*s13^2)*s23^2 + (-27*s12 - 94*s13)*
           s23^3 - 14*s23^4) + p3q^4*(p2q*(-15*s12^4 - 47*s12^3*s13 -
            13*s12^2*s13^2 + 19*s12*s13^3 + (-27*s12^3 - 36*s12^2*s13 +
              27*s12*s13^2)*s23 + (-7*s12^2 + 13*s12*s13)*s23^2 +
            5*s12*s23^3) + p1q*(-10*s12^4 - 33*s12^3*s13 - 9*s12^2*s13^2 +
            14*s12*s13^3 + (-4*s12^3 + 25*s12^2*s13 + 56*s12*s13^2)*s23 +
            (26*s12^2 + 62*s12*s13)*s23^2 + 20*s12*s23^3)) +
        p3q*(p2q^4*(10*s12^3*s13 + 14*s12^2*s13^2 - 2*s12*s13^3 - 6*s13^4 +
            (4*s12^3 + 32*s12^2*s13 + 20*s12*s13^2 - 8*s13^3)*s23 +
            (9*s12^2 + 19*s12*s13 - 6*s13^2)*s23^2 + (5*s12 - 4*s13)*s23^3) +
          p1q^2*p2q^2*(48*s12^3*s13 + 66*s12^2*s13^2 - 12*s12*s13^3 -
            30*s13^4 + (44*s12^3 + 110*s12^2*s13 - 158*s12*s13^2 - 224*s13^3)*
             s23 + (s12^2 - 295*s12*s13 - 464*s13^2)*s23^2 +
            (-141*s12 - 368*s13)*s23^3 - 98*s23^4) +
          p1q^3*p2q*(28*s12^3*s13 + 46*s12^2*s13^2 + 8*s12*s13^3 - 10*s13^4 +
            (36*s12^3 + 68*s12^2*s13 - 138*s12*s13^2 - 170*s13^3)*s23 +
            (-2*s12^2 - 268*s12*s13 - 394*s13^2)*s23^2 + (-122*s12 - 318*s13)*
             s23^3 - 84*s23^4) + p1q*p2q^3*(34*s12^3*s13 + 51*s12^2*s13^2 -
            9*s12*s13^3 - 26*s13^4 + (26*s12^3 + 96*s12^2*s13 -
              25*s12*s13^2 - 104*s13^3)*s23 + (15*s12^2 - 85*s12*s13 -
              188*s13^2)*s23^2 + (-53*s12 - 152*s13)*s23^3 - 42*s23^4) +
          p1q^4*((-24*s12^2*s13 - 66*s12*s13^2 - 42*s13^3)*s23 +
            (-26*s12^2 - 120*s12*s13 - 112*s13^2)*s23^2 + (-54*s12 - 98*s13)*
             s23^3 - 28*s23^4)) + p3q^2*(p2q^3*(-5*s12^4 + 2*s12^3*s13 +
            58*s12^2*s13^2 + 45*s12*s13^3 - 6*s13^4 +
            (3*s12^3 + 73*s12^2*s13 + 131*s12*s13^2 + 16*s13^3)*s23 +
            (23*s12^2 + 85*s12*s13 + 34*s13^2)*s23^2 + (15*s12 + 12*s13)*
             s23^3) + p1q^2*p2q*(-10*s12^4 + 20*s12^3*s13 + 132*s12^2*s13^2 +
            92*s12*s13^3 - 10*s13^4 + (58*s12^3 + 276*s12^2*s13 +
              196*s12*s13^2 - 94*s13^3)*s23 + (91*s12^2 + 49*s12*s13 -
              236*s13^2)*s23^2 + (-47*s12 - 222*s13)*s23^3 - 70*s23^4) +
          p1q*p2q^2*(-10*s12^4 + 17*s12^3*s13 + 156*s12^2*s13^2 +
            113*s12*s13^3 - 16*s13^4 + (50*s12^3 + 264*s12^2*s13 +
              294*s12*s13^2 - 28*s13^3)*s23 + (97*s12^2 + 152*s12*s13 -
              74*s13^2)*s23^2 + (-5*s12 - 104*s13)*s23^3 - 42*s23^4) +
          p1q^3*(10*s12^3*s13 + 38*s12^2*s13^2 + 28*s12*s13^3 +
            (36*s12^3 + 106*s12^2*s13 + 46*s12*s13^2 - 42*s13^3)*s23 +
            (50*s12^2 + 4*s12*s13 - 112*s13^2)*s23^2 + (-14*s12 - 98*s13)*
             s23^3 - 28*s23^4)) + p3q^3*(p2q^2*(-15*s12^4 - 45*s12^3*s13 +
            13*s12^2*s13^2 + 38*s12*s13^3 - 5*s13^4 +
            (-17*s12^3 - 6*s12^2*s13 + 76*s12*s13^2 + 2*s13^3)*s23 +
            (13*s12^2 + 45*s12*s13 + 11*s13^2)*s23^2 + (15*s12 + 4*s13)*
             s23^3) + p1q^2*(-10*s12^4 - 28*s12^3*s13 + 10*s12^2*s13^2 +
            28*s12*s13^3 + (14*s12^3 + 78*s12^2*s13 + 79*s12*s13^2 -
              21*s13^3)*s23 + (51*s12^2 + 64*s12*s13 - 56*s13^2)*s23^2 +
            (13*s12 - 49*s13)*s23^3 - 14*s23^4) +
          p1q*p2q*(-20*s12^4 - 59*s12^3*s13 + 36*s12^2*s13^2 + 70*s12*s13^3 -
            5*s13^4 + (20*s12^3 + 124*s12^2*s13 + 192*s12*s13^2 - 11*s13^3)*
             s23 + (95*s12^2 + 155*s12*s13 - 29*s13^2)*s23^2 +
            (41*s12 - 37*s13)*s23^3 - 14*s23^4)))*
       Log((p1q + p2q)/(p1q + p2q + p3q))^2)/(27*p2q*p3q^4*s12^2*s13*s23 +
       p3q^2*(p1q*p2q^2*((27*s12^2*s13 - 81*s12*s13^2)*s23 -
           81*s12*s13*s23^2) + p2q^3*((27*s12^2*s13 - 54*s12*s13^2)*s23 -
           54*s12*s13*s23^2) + p1q^2*p2q*(-27*s12*s13^2*s23 -
           27*s12*s13*s23^2)) + p3q*(p1q*p2q^3*(-54*s12*s13^2*s23 -
           54*s12*s13*s23^2) + p1q^2*p2q^2*(-27*s12*s13^2*s23 -
           27*s12*s13*s23^2) + p2q^4*(-27*s12*s13^2*s23 -
           27*s12*s13*s23^2)) +
       p3q^3*(p1q*p2q*((27*s12^2*s13 - 27*s12*s13^2)*s23 -
           27*s12*s13*s23^2) + p2q^2*((54*s12^2*s13 - 27*s12*s13^2)*s23 -
           27*s12*s13*s23^2))) +
     ((p3q^5*((s12^2 + s12*s13)*s23^2 + s12*s23^3) +
        p2q^5*((-18*s12^2*s13 - 27*s12*s13^2 - 9*s13^3)*s23 +
          (-35*s12*s13 - 26*s13^2)*s23^2 - 17*s13*s23^3) +
        p1q*p2q^4*((-36*s12^2*s13 - 54*s12*s13^2 - 18*s13^3)*s23 +
          (2*s12^2 - 75*s12*s13 - 59*s13^2)*s23^2 + (3*s12 - 40*s13)*s23^3 +
          s23^4) + p1q^2*p2q^3*((-36*s12^2*s13 - 54*s12*s13^2 - 18*s13^3)*
           s23 + (4*s12^2 - 80*s12*s13 - 66*s13^2)*s23^2 +
          (6*s12 - 46*s13)*s23^3 + 2*s23^4) + p1q^3*p2q^2*
         ((4*s12^2 - 10*s12*s13 - 14*s13^2)*s23^2 + (6*s12 - 12*s13)*s23^3 +
          2*s23^4) + p3q^4*(p2q*(-18*s12^3*s13 + (-27*s12^2*s13 -
              9*s12*s13^2 - 18*s13^3)*s23 + (s12^2 - 16*s12*s13 - 19*s13^2)*
             s23^2 + (2*s12 - 9*s13)*s23^3) +
          p1q*((4*s12^2 + 6*s12*s13 + 2*s13^2)*s23^2 + (5*s12 + 3*s13)*
             s23^3 + s23^4)) + p3q^3*(p2q^2*(-18*s12^3*s13 + 36*s12^2*s13^2 +
            (-36*s12^2*s13 - 27*s12*s13^2 - 63*s13^3)*s23 +
            (-2*s12^2 - 53*s12*s13 - 75*s13^2)*s23^2 + (s12 - 36*s13)*
             s23^3) + p1q^2*((6*s12^2 + 10*s12*s13 + 4*s13^2)*s23^2 +
            (8*s12 + 6*s13)*s23^3 + 2*s23^4) + p1q*p2q*(-18*s12^3*s13 -
            36*s13^3*s23 + (10*s12^2 + 18*s12*s13 - 39*s13^2)*s23^2 +
            (15*s12 - 7*s13)*s23^3 + 4*s23^4)) +
        p3q*(p2q^4*(-18*s12*s13^3 + (-45*s12^2*s13 - 99*s12*s13^2 - 54*s13^3)*
             s23 + (-s12^2 - 97*s12*s13 - 98*s13^2)*s23^2 - 52*s13*s23^3) +
          p1q*p2q^3*(-18*s12*s13^3 + (-54*s12^2*s13 - 144*s12*s13^2 -
              90*s13^3)*s23 + (6*s12^2 - 135*s12*s13 - 170*s13^2)*s23^2 +
            (11*s12 - 84*s13)*s23^3 + 4*s23^4) + p1q^3*p2q*
           ((8*s12^2 - 2*s12*s13 - 10*s13^2)*s23^2 + (12*s12 - 6*s13)*s23^3 +
            4*s23^4) + p1q^2*p2q^2*((-18*s12^2*s13 - 72*s12*s13^2 - 54*s13^3)*
             s23 + (14*s12^2 - 78*s12*s13 - 128*s13^2)*s23^2 +
            (20*s12 - 68*s13)*s23^3 + 6*s23^4)) +
        p3q^2*(p2q^3*(36*s12^2*s13^2 - 18*s12*s13^3 +
            (-36*s12^2*s13 - 90*s12*s13^2 - 90*s13^3)*s23 +
            (-3*s12^2 - 98*s12*s13 - 128*s13^2)*s23^2 - 62*s13*s23^3) +
          p1q^3*((4*s12^2 + 8*s12*s13 + 4*s13^2)*s23^2 + (6*s12 + 6*s13)*
             s23^3 + 2*s23^4) + p1q*p2q^2*(36*s12^2*s13^2 +
            (18*s12^2*s13 - 54*s12*s13^2 - 108*s13^3)*s23 +
            (10*s12^2 - 30*s12*s13 - 152*s13^2)*s23^2 + (18*s12 - 54*s13)*
             s23^3 + 6*s23^4) + p1q^2*p2q*((18*s12^2*s13 - 18*s12*s13^2 -
              36*s13^3)*s23 + (16*s12^2 + 12*s12*s13 - 58*s13^2)*s23^2 +
            (22*s12 - 16*s13)*s23^3 + 6*s23^4)))*Log(p3q/(p1q + p2q + p3q))^
        2)/(3*p2q*p3q^4*s12*s13*s23^2 + p3q^3*(3*p1q*p2q*s12*s13*s23^2 +
         9*p2q^2*s12*s13*s23^2) + p3q^2*(6*p1q*p2q^2*s12*s13*s23^2 +
         9*p2q^3*s12*s13*s23^2) + p3q*(3*p1q*p2q^3*s12*s13*s23^2 +
         3*p2q^4*s12*s13*s23^2)) +
     ((p2q^5*(14*s12^2*s13^2 + 19*s12*s13^3 + 5*s13^4 +
          (20*s12*s13^2 + 11*s13^3)*s23 + 6*s13^2*s23^2) +
        p3q^5*(-4*s12^4 + s12^3*s13 + 5*s12^2*s13^2 +
          (4*s12^3 + 26*s12^2*s13 + 13*s12*s13^2)*s23 +
          (20*s12^2 + 25*s12*s13)*s23^2 + 12*s12*s23^3) +
        p1q*p2q^4*(-14*s12^3*s13 + 9*s12^2*s13^2 + 33*s12*s13^3 + 10*s13^4 +
          (-56*s12^2*s13 - 25*s12*s13^2 + 4*s13^3)*s23 +
          (-62*s12*s13 - 26*s13^2)*s23^2 - 20*s13*s23^3) +
        p1q^2*p2q^3*(-28*s12^3*s13 - 10*s12^2*s13^2 + 28*s12*s13^3 +
          10*s13^4 + (21*s12^3 - 79*s12^2*s13 - 78*s12*s13^2 - 14*s13^3)*
           s23 + (56*s12^2 - 64*s12*s13 - 51*s13^2)*s23^2 +
          (49*s12 - 13*s13)*s23^3 + 14*s23^4) + p1q^3*p2q^2*
         (-28*s12^3*s13 - 38*s12^2*s13^2 - 10*s12*s13^3 +
          (42*s12^3 - 46*s12^2*s13 - 106*s12*s13^2 - 36*s13^3)*s23 +
          (112*s12^2 - 4*s12*s13 - 50*s13^2)*s23^2 + (98*s12 + 14*s13)*
           s23^3 + 28*s23^4) + p1q^4*p2q*((42*s12^3 + 66*s12^2*s13 +
            24*s12*s13^2)*s23 + (112*s12^2 + 120*s12*s13 + 26*s13^2)*s23^2 +
          (98*s12 + 54*s13)*s23^3 + 28*s23^4) +
        p3q^4*(p2q*(6*s12^4 + 2*s12^3*s13 - 14*s12^2*s13^2 - 10*s12*s13^3 +
            (8*s12^3 - 20*s12^2*s13 - 32*s12*s13^2 - 4*s13^3)*s23 +
            (6*s12^2 - 19*s12*s13 - 9*s13^2)*s23^2 + (4*s12 - 5*s13)*s23^3) +
          p1q*(-12*s12^4 + 3*s12^3*s13 + 15*s12^2*s13^2 +
            (42*s12^3 + 129*s12^2*s13 + 60*s12*s13^2)*s23 +
            (134*s12^2 + 153*s12*s13 + 13*s13^2)*s23^2 + (94*s12 + 27*s13)*
             s23^3 + 14*s23^4)) + p3q^3*(p2q^2*(6*s12^4 - 45*s12^3*s13 -
            58*s12^2*s13^2 - 2*s12*s13^3 + 5*s13^4 +
            (-16*s12^3 - 131*s12^2*s13 - 73*s12*s13^2 - 3*s13^3)*s23 +
            (-34*s12^2 - 85*s12*s13 - 23*s13^2)*s23^2 + (-12*s12 - 15*s13)*
             s23^3) + p1q*p2q*(26*s12^4 + 9*s12^3*s13 - 51*s12^2*s13^2 -
            34*s12*s13^3 + (104*s12^3 + 25*s12^2*s13 - 96*s12*s13^2 -
              26*s13^3)*s23 + (188*s12^2 + 85*s12*s13 - 15*s13^2)*s23^2 +
            (152*s12 + 53*s13)*s23^3 + 42*s23^4) +
          p1q^2*(-16*s12^4 + 4*s12^3*s13 + 20*s12^2*s13^2 +
            (106*s12^3 + 257*s12^2*s13 + 115*s12*s13^2)*s23 +
            (302*s12^2 + 334*s12*s13 + 39*s13^2)*s23^2 + (222*s12 + 81*s13)*
             s23^3 + 42*s23^4)) +
        p3q*(p2q^4*(-19*s12^3*s13 + 13*s12^2*s13^2 + 47*s12*s13^3 +
            15*s13^4 + (-27*s12^2*s13 + 36*s12*s13^2 + 27*s13^3)*s23 +
            (-13*s12*s13 + 7*s13^2)*s23^2 - 5*s13*s23^3) +
          p1q*p2q^3*(5*s12^4 - 70*s12^3*s13 - 36*s12^2*s13^2 + 59*s12*s13^3 +
            20*s13^4 + (11*s12^3 - 192*s12^2*s13 - 124*s12*s13^2 - 20*s13^3)*
             s23 + (29*s12^2 - 155*s12*s13 - 95*s13^2)*s23^2 +
            (37*s12 - 41*s13)*s23^3 + 14*s23^4) +
          p1q^4*((60*s12^3 + 102*s12^2*s13 + 42*s12*s13^2)*s23 +
            (148*s12^2 + 156*s12*s13 + 26*s13^2)*s23^2 + (116*s12 + 54*s13)*
             s23^3 + 28*s23^4) + p1q^2*p2q^2*(10*s12^4 - 92*s12^3*s13 -
            132*s12^2*s13^2 - 20*s12*s13^3 + 10*s13^4 +
            (94*s12^3 - 196*s12^2*s13 - 276*s12*s13^2 - 58*s13^3)*s23 +
            (236*s12^2 - 49*s12*s13 - 91*s13^2)*s23^2 + (222*s12 + 47*s13)*
             s23^3 + 70*s23^4) + p1q^3*p2q*(10*s12^4 - 8*s12^3*s13 -
            46*s12^2*s13^2 - 28*s12*s13^3 + (170*s12^3 + 138*s12^2*s13 -
              68*s12*s13^2 - 36*s13^3)*s23 + (394*s12^2 + 268*s12*s13 +
              2*s13^2)*s23^2 + (318*s12 + 122*s13)*s23^3 + 84*s23^4)) +
        p3q^2*(p2q^3*(5*s12^4 - 38*s12^3*s13 - 13*s12^2*s13^2 +
            45*s12*s13^3 + 15*s13^4 + (-2*s12^3 - 76*s12^2*s13 +
              6*s12*s13^2 + 17*s13^3)*s23 + (-11*s12^2 - 45*s12*s13 -
              13*s13^2)*s23^2 + (-4*s12 - 15*s13)*s23^3) +
          p1q*p2q^2*(16*s12^4 - 113*s12^3*s13 - 156*s12^2*s13^2 -
            17*s12*s13^3 + 10*s13^4 + (28*s12^3 - 294*s12^2*s13 -
              264*s12*s13^2 - 50*s13^3)*s23 + (74*s12^2 - 152*s12*s13 -
              97*s13^2)*s23^2 + (104*s12 + 5*s13)*s23^3 + 42*s23^4) +
          p1q^3*(-8*s12^4 + 2*s12^3*s13 + 10*s12^2*s13^2 +
            (128*s12^3 + 256*s12^2*s13 + 110*s12*s13^2)*s23 +
            (336*s12^2 + 362*s12*s13 + 52*s13^2)*s23^2 + (256*s12 + 108*s13)*
             s23^3 + 56*s23^4) + p1q^2*p2q*(30*s12^4 + 12*s12^3*s13 -
            66*s12^2*s13^2 - 48*s12*s13^3 + (224*s12^3 + 158*s12^2*s13 -
              110*s12*s13^2 - 44*s13^3)*s23 + (464*s12^2 + 295*s12*s13 -
              s13^2)*s23^2 + (368*s12 + 141*s13)*s23^3 + 98*s23^4)))*
       Log((p1q + p3q)/(p1q + p2q + p3q))^2)/
      (p2q*p3q^4*(27*s12^2*s13*s23 + 27*s12*s13*s23^2) +
       p3q*(-27*p2q^4*s12*s13^2*s23 + p1q^2*p2q^2*(27*s12^2*s13*s23 +
           27*s12*s13*s23^2) + p1q*p2q^3*((27*s12^2*s13 - 27*s12*s13^2)*s23 +
           27*s12*s13*s23^2)) + p3q^3*(p1q*p2q*(54*s12^2*s13*s23 +
           54*s12*s13*s23^2) + p2q^2*((54*s12^2*s13 - 27*s12*s13^2)*s23 +
           54*s12*s13*s23^2)) + p3q^2*(p1q^2*p2q*(27*s12^2*s13*s23 +
           27*s12*s13*s23^2) + p2q^3*((27*s12^2*s13 - 54*s12*s13^2)*s23 +
           27*s12*s13*s23^2) + p1q*p2q^2*((81*s12^2*s13 - 27*s12*s13^2)*s23 +
           81*s12*s13*s23^2))) +
     ((p3q^6*((3*s12^4 - 9*s12^2*s13^2 - 6*s12*s13^3)*s23 +
          (3*s12^3 - 6*s12^2*s13 - 9*s12*s13^2)*s23^2 - 3*s12*s13*s23^3) +
        p2q^6*((-12*s12^3*s13 - 27*s12^2*s13^2 - 18*s12*s13^3 - 3*s13^4)*
           s23 + (-21*s12^2*s13 - 30*s12*s13^2 - 9*s13^3)*s23^2 +
          (-9*s12*s13 - 6*s13^2)*s23^3) + p1q*p2q^5*
         ((-24*s12^3*s13 - 54*s12^2*s13^2 - 36*s12*s13^3 - 6*s13^4)*s23 +
          (3*s12^3 - 30*s12^2*s13 - 51*s12*s13^2 - 18*s13^3)*s23^2 +
          (3*s12^2 - 3*s12*s13 - 6*s13^2)*s23^3 + 6*s13*s23^4) +
        p1q^4*p2q^2*((-6*s12^2 + 6*s13^2)*s23^3 + (-6*s12 + 6*s13)*s23^4) +
        p1q^2*p2q^4*((-24*s12^3*s13 - 54*s12^2*s13^2 - 36*s12*s13^3 -
            6*s13^4)*s23 + (6*s12^3 - 18*s12^2*s13 - 42*s12*s13^2 - 18*s13^3)*
           s23^2 + (3*s12^2 + 12*s12*s13 + 3*s13^2)*s23^3 +
          (-3*s12 + 15*s13)*s23^4) + p1q^3*p2q^3*
         ((6*s12^3 + 24*s12^2*s13 + 18*s12*s13^2)*s23^2 +
          (30*s12*s13 + 18*s13^2)*s23^3 + (-6*s12 + 18*s13)*s23^4) +
        p3q^5*(p2q*(-24*s12^4*s13 - 24*s12^3*s13^2 +
            (9*s12^4 - 18*s12^3*s13 - 9*s12^2*s13^2 - 12*s12*s13^3 - 6*s13^4)*
             s23 + (18*s12^3 + 3*s12^2*s13 - 12*s12*s13^2 - 9*s13^3)*s23^2 +
            (9*s12^2 - 3*s12*s13 - 3*s13^2)*s23^3) +
          p1q*((6*s12^4 - 18*s12^2*s13^2 - 12*s12*s13^3)*s23 +
            (-15*s12^2*s13 - 12*s12*s13^2 + 3*s13^3)*s23^2 +
            (-6*s12^2 - 3*s12*s13 + 3*s13^2)*s23^3)) +
        p3q^4*(p2q^2*(-48*s12^4*s13 + 48*s12^2*s13^3 +
            (12*s12^4 - 6*s12^3*s13 + 93*s12^2*s13^2 - 12*s12*s13^3 -
              27*s13^4)*s23 + (39*s12^3 + 60*s12^2*s13 + 3*s12*s13^2 -
              42*s13^3)*s23^2 + (27*s12^2 + 3*s12*s13 - 15*s13^2)*s23^3) +
          p1q^2*((6*s12^4 - 18*s12^2*s13^2 - 12*s12*s13^3)*s23 +
            (-6*s12^3 - 18*s12^2*s13 - 6*s12*s13^2 + 6*s13^3)*s23^2 +
            (-9*s12^2 + 3*s13^2)*s23^3 + (3*s12 - 3*s13)*s23^4) +
          p1q*p2q*(-24*s12^4*s13 - 24*s12^3*s13^2 +
            (12*s12^4 + 30*s12^3*s13 + 48*s12^2*s13^2 - 6*s12*s13^3 -
              12*s13^4)*s23 + (21*s12^3 + 54*s12^2*s13 + 21*s12*s13^2)*
             s23^2 + (3*s12^2 + 15*s13^2)*s23^3 + (-6*s12 + 3*s13)*s23^4)) +
        p3q^3*(p2q^3*(-24*s12^4*s13 + 72*s12^3*s13^2 + 72*s12^2*s13^3 -
            24*s12*s13^4 + (9*s12^4 + 42*s12^3*s13 + 150*s12^2*s13^2 -
              78*s12*s13^3 - 51*s13^4)*s23 + (39*s12^3 + 81*s12^2*s13 -
              39*s12*s13^2 - 81*s13^3)*s23^2 + (30*s12^2 - 6*s12*s13 -
              30*s13^2)*s23^3) + p1q^3*((-12*s12^3 - 6*s12^2*s13 +
              12*s12*s13^2 + 6*s13^3)*s23^2 + (-6*s12^2 + 6*s12*s13)*s23^3 +
            (6*s12 - 6*s13)*s23^4) + p1q^2*p2q*
           ((12*s12^4 + 72*s12^3*s13 + 72*s12^2*s13^2 - 12*s13^4)*s23 +
            (18*s12^3 + 42*s12^2*s13 + 18*s12*s13^2 + 18*s13^3)*s23^2 +
            (-3*s12^2 - 36*s12*s13 + 27*s13^2)*s23^3 + (-9*s12 - 3*s13)*
             s23^4) + p1q*p2q^2*(-24*s12^4*s13 + 24*s12^3*s13^2 +
            48*s12^2*s13^3 + (6*s12^4 + 90*s12^3*s13 + 198*s12^2*s13^2 -
              6*s12*s13^3 - 48*s13^4)*s23 + (48*s12^3 + 132*s12^2*s13 +
              42*s12*s13^2 - 30*s13^3)*s23^2 + (27*s12^2 - 21*s12*s13 +
              30*s13^2)*s23^3 + (-15*s12 + 12*s13)*s23^4)) +
        p3q^2*(p2q^4*(48*s12^3*s13^2 - 48*s12*s13^4 +
            (3*s12^4 + 18*s12^3*s13 + 3*s12^2*s13^2 - 156*s12*s13^3 -
              48*s13^4)*s23 + (18*s12^3 + 3*s12^2*s13 - 120*s12*s13^2 -
              81*s13^3)*s23^2 + (15*s12^2 - 27*s12*s13 - 33*s13^2)*s23^3) +
          p1q^3*p2q*((-6*s12^3 - 48*s12^2*s13 - 18*s12*s13^2 + 24*s13^3)*
             s23^2 + (-12*s12^2 - 54*s12*s13 + 18*s13^2)*s23^3 +
            (-6*s12 - 6*s13)*s23^4) + p1q^4*((6*s12^2 - 6*s13^2)*s23^3 +
            (6*s12 - 6*s13)*s23^4) + p1q^2*p2q^2*
           ((6*s12^4 + 48*s12^3*s13 + 48*s12^2*s13^2 - 24*s12*s13^3 -
              30*s13^4)*s23 + (48*s12^3 - 12*s12^2*s13 - 48*s12*s13^2 +
              12*s13^3)*s23^2 + (18*s12^2 - 108*s12*s13 + 54*s13^2)*s23^3 +
            (-24*s12 + 12*s13)*s23^4) + p1q*p2q^3*(48*s12^3*s13^2 +
            24*s12^2*s13^3 - 24*s12*s13^4 + (66*s12^3*s13 + 126*s12^2*s13^2 -
              78*s12*s13^3 - 66*s13^4)*s23 + (42*s12^3 + 78*s12^2*s13 -
              12*s12*s13^2 - 60*s13^3)*s23^2 + (30*s12^2 - 21*s12*s13 +
              27*s13^2)*s23^3 + (-12*s12 + 21*s13)*s23^4)) +
        p3q*(p2q^5*(-24*s12^2*s13^3 - 24*s12*s13^4 +
            (-24*s12^3*s13 - 81*s12^2*s13^2 - 102*s12*s13^3 - 21*s13^4)*s23 +
            (3*s12^3 - 48*s12^2*s13 - 105*s12*s13^2 - 42*s13^3)*s23^2 +
            (3*s12^2 - 27*s12*s13 - 21*s13^2)*s23^3) +
          p1q^3*p2q^2*((12*s12^3 - 18*s12^2*s13 - 12*s12*s13^2 + 18*s13^3)*
             s23^2 + (-6*s12^2 - 30*s12*s13 + 36*s13^2)*s23^3 +
            (-18*s12 + 18*s13)*s23^4) + p1q*p2q^4*(-24*s12^2*s13^3 -
            24*s12*s13^4 + (-18*s12^3*s13 - 60*s12^2*s13^2 - 102*s12*s13^3 -
              36*s13^4)*s23 + (18*s12^3 - 15*s12^2*s13 - 72*s12*s13^2 -
              51*s13^3)*s23^2 + (15*s12^2 + 3*s13^2)*s23^3 +
            (-3*s12 + 18*s13)*s23^4) + p1q^2*p2q^3*
           ((-24*s12*s13^3 - 24*s13^4)*s23 + (30*s12^3 + 6*s12^2*s13 -
              18*s12*s13^2 - 18*s13^3)*s23^2 + (15*s12^2 - 12*s12*s13 +
              33*s13^2)*s23^3 + (-15*s12 + 27*s13)*s23^4)))*
       Log((p2q + p3q)/(p1q + p2q + p3q))^2)/
      (p2q*p3q^5*(s12^2*s13 + s12*s13^2)*s23^2 +
       p3q^3*(p2q^3*(6*s12^2*s13 + 6*s12*s13^2)*s23^2 -
         p1q^2*p2q*s12*s13*s23^3 + p1q*p2q^2*((3*s12^2*s13 + 3*s12*s13^2)*
            s23^2 - 3*s12*s13*s23^3)) +
       p3q^2*(p2q^4*(4*s12^2*s13 + 4*s12*s13^2)*s23^2 - 2*p1q^2*p2q^2*s12*s13*
          s23^3 + p1q*p2q^3*((3*s12^2*s13 + 3*s12*s13^2)*s23^2 -
           3*s12*s13*s23^3)) + p3q^4*(p2q^2*(4*s12^2*s13 + 4*s12*s13^2)*
          s23^2 + p1q*p2q*((s12^2*s13 + s12*s13^2)*s23^2 - s12*s13*s23^3)) +
       p3q*(p2q^5*(s12^2*s13 + s12*s13^2)*s23^2 - p1q^2*p2q^3*s12*s13*s23^3 +
         p1q*p2q^4*((s12^2*s13 + s12*s13^2)*s23^2 - s12*s13*s23^3))) +
     ((p3q^5*((-18*s12^3 - 54*s12^2*s13 - 36*s12*s13^2)*s23 +
          (-52*s12^2 - 70*s12*s13)*s23^2 - 34*s12*s23^3) +
        p2q^5*((-36*s12^2*s13 - 54*s12*s13^2 - 18*s13^3)*s23 +
          (-70*s12*s13 - 52*s13^2)*s23^2 - 34*s13*s23^3) +
        p1q*p2q^4*((-72*s12^2*s13 - 108*s12*s13^2 - 36*s13^3)*s23 +
          (4*s12^2 - 150*s12*s13 - 118*s13^2)*s23^2 + (6*s12 - 80*s13)*
           s23^3 + 2*s23^4) + p1q^2*p2q^3*((-72*s12^2*s13 - 108*s12*s13^2 -
            36*s13^3)*s23 + (8*s12^2 - 160*s12*s13 - 132*s13^2)*s23^2 +
          (12*s12 - 92*s13)*s23^3 + 4*s23^4) + p1q^3*p2q^2*
         ((8*s12^2 - 20*s12*s13 - 28*s13^2)*s23^2 + (12*s12 - 24*s13)*s23^3 +
          4*s23^4) + p3q^4*(p2q*(-72*s12^3*s13 +
            (-108*s12^3 - 252*s12^2*s13 - 108*s12*s13^2 - 36*s13^3)*s23 +
            (-196*s12^2 - 230*s12*s13 - 38*s13^2)*s23^2 + (-104*s12 - 18*s13)*
             s23^3) + p1q*((-36*s12^3 - 108*s12^2*s13 - 72*s12*s13^2)*s23 +
            (-118*s12^2 - 150*s12*s13 + 4*s13^2)*s23^2 + (-80*s12 + 6*s13)*
             s23^3 + 2*s23^4)) + p3q^3*(p2q^2*(-72*s12^3*s13 +
            144*s12^2*s13^2 + (-180*s12^3 - 252*s12^2*s13 - 126*s12*s13^2 -
              126*s13^3)*s23 + (-256*s12^2 - 304*s12*s13 - 150*s13^2)*s23^2 +
            (-124*s12 - 72*s13)*s23^3) +
          p1q^2*((-36*s12^3 - 108*s12^2*s13 - 72*s12*s13^2)*s23 +
            (-132*s12^2 - 160*s12*s13 + 8*s13^2)*s23^2 + (-92*s12 + 12*s13)*
             s23^3 + 4*s23^4) + p1q*p2q*(-72*s12^3*s13 +
            (-180*s12^3 - 288*s12^2*s13 - 108*s12*s13^2 - 72*s13^3)*s23 +
            (-340*s12^2 - 270*s12*s13 - 78*s13^2)*s23^2 + (-168*s12 - 14*s13)*
             s23^3 + 8*s23^4)) +
        p3q*(p2q^4*(-72*s12*s13^3 + (-36*s12^3 - 108*s12^2*s13 -
              252*s12*s13^2 - 108*s13^3)*s23 + (-38*s12^2 - 230*s12*s13 -
              196*s13^2)*s23^2 + (-18*s12 - 104*s13)*s23^3) +
          p1q*p2q^3*(-72*s12*s13^3 + (-72*s12^3 - 108*s12^2*s13 -
              288*s12*s13^2 - 180*s13^3)*s23 + (-78*s12^2 - 270*s12*s13 -
              340*s13^2)*s23^2 + (-14*s12 - 168*s13)*s23^3 + 8*s23^4) +
          p1q^3*p2q*((-20*s12^2 - 40*s12*s13 - 20*s13^2)*s23^2 +
            (-12*s12 - 12*s13)*s23^3 + 8*s23^4) + p1q^2*p2q^2*
           ((-72*s12^3 - 72*s12^2*s13 - 108*s12*s13^2 - 108*s13^3)*s23 +
            (-116*s12^2 - 192*s12*s13 - 256*s13^2)*s23^2 +
            (-32*s12 - 136*s13)*s23^3 + 12*s23^4)) +
        p3q^2*(p2q^3*(144*s12^2*s13^2 - 72*s12*s13^3 +
            (-126*s12^3 - 126*s12^2*s13 - 252*s12*s13^2 - 180*s13^3)*s23 +
            (-150*s12^2 - 304*s12*s13 - 256*s13^2)*s23^2 +
            (-72*s12 - 124*s13)*s23^3) +
          p1q^3*((-28*s12^2 - 20*s12*s13 + 8*s13^2)*s23^2 +
            (-24*s12 + 12*s13)*s23^3 + 4*s23^4) + p1q*p2q^2*
           (144*s12^2*s13^2 + (-216*s12^3 - 72*s12^2*s13 - 72*s12*s13^2 -
              216*s13^3)*s23 + (-304*s12^2 - 168*s12*s13 - 304*s13^2)*s23^2 +
            (-108*s12 - 108*s13)*s23^3 + 12*s23^4) +
          p1q^2*p2q*((-108*s12^3 - 108*s12^2*s13 - 72*s12*s13^2 - 72*s13^3)*
             s23 + (-256*s12^2 - 192*s12*s13 - 116*s13^2)*s23^2 +
            (-136*s12 - 32*s13)*s23^3 + 12*s23^4)))*Log(-s12 - s13 - s23)^2)/
      (3*p2q*p3q^4*s12*s13*s23^2 + p3q^3*(3*p1q*p2q*s12*s13*s23^2 +
         9*p2q^2*s12*s13*s23^2) + p3q^2*(6*p1q*p2q^2*s12*s13*s23^2 +
         9*p2q^3*s12*s13*s23^2) + p3q*(3*p1q*p2q^3*s12*s13*s23^2 +
         3*p2q^4*s12*s13*s23^2)) +
     ((p3q^5*((s12^2 + s12*s13)*s23^2 + s12*s23^3) +
        p2q^5*((-18*s12^2*s13 - 27*s12*s13^2 - 9*s13^3)*s23 +
          (-35*s12*s13 - 26*s13^2)*s23^2 - 17*s13*s23^3) +
        p1q*p2q^4*((-36*s12^2*s13 - 54*s12*s13^2 - 18*s13^3)*s23 +
          (2*s12^2 - 75*s12*s13 - 59*s13^2)*s23^2 + (3*s12 - 40*s13)*s23^3 +
          s23^4) + p1q^2*p2q^3*((-36*s12^2*s13 - 54*s12*s13^2 - 18*s13^3)*
           s23 + (4*s12^2 - 80*s12*s13 - 66*s13^2)*s23^2 +
          (6*s12 - 46*s13)*s23^3 + 2*s23^4) + p1q^3*p2q^2*
         ((4*s12^2 - 10*s12*s13 - 14*s13^2)*s23^2 + (6*s12 - 12*s13)*s23^3 +
          2*s23^4) + p3q^4*(p2q*(-18*s12^3*s13 + (-27*s12^2*s13 -
              9*s12*s13^2 - 18*s13^3)*s23 + (s12^2 - 16*s12*s13 - 19*s13^2)*
             s23^2 + (2*s12 - 9*s13)*s23^3) +
          p1q*((4*s12^2 + 6*s12*s13 + 2*s13^2)*s23^2 + (5*s12 + 3*s13)*
             s23^3 + s23^4)) + p3q^3*(p2q^2*(-18*s12^3*s13 + 36*s12^2*s13^2 +
            (-36*s12^2*s13 - 27*s12*s13^2 - 63*s13^3)*s23 +
            (-2*s12^2 - 53*s12*s13 - 75*s13^2)*s23^2 + (s12 - 36*s13)*
             s23^3) + p1q^2*((6*s12^2 + 10*s12*s13 + 4*s13^2)*s23^2 +
            (8*s12 + 6*s13)*s23^3 + 2*s23^4) + p1q*p2q*(-18*s12^3*s13 -
            36*s13^3*s23 + (10*s12^2 + 18*s12*s13 - 39*s13^2)*s23^2 +
            (15*s12 - 7*s13)*s23^3 + 4*s23^4)) +
        p3q*(p2q^4*(-18*s12*s13^3 + (-45*s12^2*s13 - 99*s12*s13^2 - 54*s13^3)*
             s23 + (-s12^2 - 97*s12*s13 - 98*s13^2)*s23^2 - 52*s13*s23^3) +
          p1q*p2q^3*(-18*s12*s13^3 + (-54*s12^2*s13 - 144*s12*s13^2 -
              90*s13^3)*s23 + (6*s12^2 - 135*s12*s13 - 170*s13^2)*s23^2 +
            (11*s12 - 84*s13)*s23^3 + 4*s23^4) + p1q^3*p2q*
           ((8*s12^2 - 2*s12*s13 - 10*s13^2)*s23^2 + (12*s12 - 6*s13)*s23^3 +
            4*s23^4) + p1q^2*p2q^2*((-18*s12^2*s13 - 72*s12*s13^2 - 54*s13^3)*
             s23 + (14*s12^2 - 78*s12*s13 - 128*s13^2)*s23^2 +
            (20*s12 - 68*s13)*s23^3 + 6*s23^4)) +
        p3q^2*(p2q^3*(36*s12^2*s13^2 - 18*s12*s13^3 +
            (-36*s12^2*s13 - 90*s12*s13^2 - 90*s13^3)*s23 +
            (-3*s12^2 - 98*s12*s13 - 128*s13^2)*s23^2 - 62*s13*s23^3) +
          p1q^3*((4*s12^2 + 8*s12*s13 + 4*s13^2)*s23^2 + (6*s12 + 6*s13)*
             s23^3 + 2*s23^4) + p1q*p2q^2*(36*s12^2*s13^2 +
            (18*s12^2*s13 - 54*s12*s13^2 - 108*s13^3)*s23 +
            (10*s12^2 - 30*s12*s13 - 152*s13^2)*s23^2 + (18*s12 - 54*s13)*
             s23^3 + 6*s23^4) + p1q^2*p2q*((18*s12^2*s13 - 18*s12*s13^2 -
              36*s13^3)*s23 + (16*s12^2 + 12*s12*s13 - 58*s13^2)*s23^2 +
            (22*s12 - 16*s13)*s23^3 + 6*s23^4)))*Log(s12/(s12 + s13 + s23))^
        2)/(3*p2q*p3q^4*s12*s13*s23^2 + p3q^3*(3*p1q*p2q*s12*s13*s23^2 +
         9*p2q^2*s12*s13*s23^2) + p3q^2*(6*p1q*p2q^2*s12*s13*s23^2 +
         9*p2q^3*s12*s13*s23^2) + p3q*(3*p1q*p2q^3*s12*s13*s23^2 +
         3*p2q^4*s12*s13*s23^2)) +
     ((p3q^5*((-9*s12^3 - 27*s12^2*s13 - 18*s12*s13^2)*s23 +
          (-26*s12^2 - 35*s12*s13)*s23^2 - 17*s12*s23^3) +
        p2q^5*((s12*s13 + s13^2)*s23^2 + s13*s23^3) +
        p1q*p2q^4*((2*s12^2 + 6*s12*s13 + 4*s13^2)*s23^2 +
          (3*s12 + 5*s13)*s23^3 + s23^4) + p1q^3*p2q^2*
         ((4*s12^2 + 8*s12*s13 + 4*s13^2)*s23^2 + (6*s12 + 6*s13)*s23^3 +
          2*s23^4) + p1q^2*p2q^3*((4*s12^2 + 10*s12*s13 + 6*s13^2)*s23^2 +
          (6*s12 + 8*s13)*s23^3 + 2*s23^4) +
        p3q^4*(p2q*(-18*s12^3*s13 + (-54*s12^3 - 99*s12^2*s13 - 45*s12*s13^2)*
             s23 + (-98*s12^2 - 97*s12*s13 - s13^2)*s23^2 - 52*s12*s23^3) +
          p1q*((-18*s12^3 - 54*s12^2*s13 - 36*s12*s13^2)*s23 +
            (-59*s12^2 - 75*s12*s13 + 2*s13^2)*s23^2 + (-40*s12 + 3*s13)*
             s23^3 + s23^4)) + p3q^3*(p2q^2*(-18*s12^3*s13 + 36*s12^2*s13^2 +
            (-90*s12^3 - 90*s12^2*s13 - 36*s12*s13^2)*s23 +
            (-128*s12^2 - 98*s12*s13 - 3*s13^2)*s23^2 - 62*s12*s23^3) +
          p1q^2*((-18*s12^3 - 54*s12^2*s13 - 36*s12*s13^2)*s23 +
            (-66*s12^2 - 80*s12*s13 + 4*s13^2)*s23^2 + (-46*s12 + 6*s13)*
             s23^3 + 2*s23^4) + p1q*p2q*(-18*s12^3*s13 +
            (-90*s12^3 - 144*s12^2*s13 - 54*s12*s13^2)*s23 +
            (-170*s12^2 - 135*s12*s13 + 6*s13^2)*s23^2 + (-84*s12 + 11*s13)*
             s23^3 + 4*s23^4)) + p3q^2*(p2q^3*(36*s12^2*s13^2 -
            18*s12*s13^3 + (-63*s12^3 - 27*s12^2*s13 - 36*s12*s13^2)*s23 +
            (-75*s12^2 - 53*s12*s13 - 2*s13^2)*s23^2 + (-36*s12 + s13)*
             s23^3) + p1q^3*((-14*s12^2 - 10*s12*s13 + 4*s13^2)*s23^2 +
            (-12*s12 + 6*s13)*s23^3 + 2*s23^4) + p1q*p2q^2*
           (36*s12^2*s13^2 + (-108*s12^3 - 54*s12^2*s13 + 18*s12*s13^2)*s23 +
            (-152*s12^2 - 30*s12*s13 + 10*s13^2)*s23^2 + (-54*s12 + 18*s13)*
             s23^3 + 6*s23^4) + p1q^2*p2q*((-54*s12^3 - 72*s12^2*s13 -
              18*s12*s13^2)*s23 + (-128*s12^2 - 78*s12*s13 + 14*s13^2)*
             s23^2 + (-68*s12 + 20*s13)*s23^3 + 6*s23^4)) +
        p3q*(p2q^4*(-18*s12*s13^3 + (-18*s12^3 - 9*s12^2*s13 - 27*s12*s13^2)*
             s23 + (-19*s12^2 - 16*s12*s13 + s13^2)*s23^2 +
            (-9*s12 + 2*s13)*s23^3) + p1q^3*p2q*
           ((-10*s12^2 - 2*s12*s13 + 8*s13^2)*s23^2 + (-6*s12 + 12*s13)*
             s23^3 + 4*s23^4) + p1q*p2q^3*(-18*s12*s13^3 - 36*s12^3*s23 +
            (-39*s12^2 + 18*s12*s13 + 10*s13^2)*s23^2 + (-7*s12 + 15*s13)*
             s23^3 + 4*s23^4) + p1q^2*p2q^2*((-36*s12^3 - 18*s12^2*s13 +
              18*s12*s13^2)*s23 + (-58*s12^2 + 12*s12*s13 + 16*s13^2)*s23^2 +
            (-16*s12 + 22*s13)*s23^3 + 6*s23^4)))*Log(s13/(s12 + s13 + s23))^
        2)/(3*p2q*p3q^4*s12*s13*s23^2 + p3q^3*(3*p1q*p2q*s12*s13*s23^2 +
         9*p2q^2*s12*s13*s23^2) + p3q^2*(6*p1q*p2q^2*s12*s13*s23^2 +
         9*p2q^3*s12*s13*s23^2) + p3q*(3*p1q*p2q^3*s12*s13*s23^2 +
         3*p2q^4*s12*s13*s23^2)) +
     ((p3q^5*((-3*s12^3 - 9*s12^2*s13 - 6*s12*s13^2)*s23 +
          (-9*s12^2 - 12*s12*s13)*s23^2 - 6*s12*s23^3) +
        p1q^2*p2q^3*((-12*s12^2*s13 - 18*s12*s13^2 - 6*s13^3)*s23 +
          (-30*s12*s13 - 24*s13^2)*s23^2 - 18*s13*s23^3) +
        p1q*p2q^4*((-12*s12^2*s13 - 18*s12*s13^2 - 6*s13^3)*s23 +
          (-27*s12*s13 - 21*s13^2)*s23^2 - 15*s13*s23^3) +
        p2q^5*((-6*s12^2*s13 - 9*s12*s13^2 - 3*s13^3)*s23 +
          (-12*s12*s13 - 9*s13^2)*s23^2 - 6*s13*s23^3) +
        p1q^3*p2q^2*((-6*s12*s13 - 6*s13^2)*s23^2 - 6*s13*s23^3) +
        p3q^2*(p1q^3*((-6*s12^2 - 6*s12*s13)*s23^2 - 6*s12*s23^3) +
          p1q*p2q^2*(24*s12^2*s13^2 + (-36*s12^3 - 12*s12^2*s13 -
              12*s12*s13^2 - 36*s13^3)*s23 + (-54*s12^2 - 36*s12*s13 -
              54*s13^2)*s23^2 + (-24*s12 - 24*s13)*s23^3) +
          p2q^3*(24*s12^2*s13^2 - 12*s12*s13^3 + (-21*s12^3 - 21*s12^2*s13 -
              42*s12*s13^2 - 30*s13^3)*s23 + (-24*s12^2 - 51*s12*s13 -
              42*s13^2)*s23^2 + (-12*s12 - 21*s13)*s23^3) +
          p1q^2*p2q*((-18*s12^3 - 18*s12^2*s13 - 12*s12*s13^2 - 12*s13^3)*
             s23 + (-48*s12^2 - 42*s12*s13 - 24*s13^2)*s23^2 +
            (-30*s12 - 12*s13)*s23^3)) +
        p3q^3*(p1q^2*((-6*s12^3 - 18*s12^2*s13 - 12*s12*s13^2)*s23 +
            (-24*s12^2 - 30*s12*s13)*s23^2 - 18*s12*s23^3) +
          p2q^2*(-12*s12^3*s13 + 24*s12^2*s13^2 + (-30*s12^3 - 42*s12^2*s13 -
              21*s12*s13^2 - 21*s13^3)*s23 + (-42*s12^2 - 51*s12*s13 -
              24*s13^2)*s23^2 + (-21*s12 - 12*s13)*s23^3) +
          p1q*p2q*(-12*s12^3*s13 + (-30*s12^3 - 48*s12^2*s13 - 18*s12*s13^2 -
              12*s13^3)*s23 + (-60*s12^2 - 51*s12*s13 - 15*s13^2)*s23^2 +
            (-33*s12 - 6*s13)*s23^3)) +
        p3q*(p1q*p2q^3*(-12*s12*s13^3 + (-12*s12^3 - 18*s12^2*s13 -
              48*s12*s13^2 - 30*s13^3)*s23 + (-15*s12^2 - 51*s12*s13 -
              60*s13^2)*s23^2 + (-6*s12 - 33*s13)*s23^3) +
          p1q^2*p2q^2*((-12*s12^3 - 12*s12^2*s13 - 18*s12*s13^2 - 18*s13^3)*
             s23 + (-24*s12^2 - 42*s12*s13 - 48*s13^2)*s23^2 +
            (-12*s12 - 30*s13)*s23^3) + p2q^4*(-12*s12*s13^3 +
            (-6*s12^3 - 18*s12^2*s13 - 42*s12*s13^2 - 18*s13^3)*s23 +
            (-6*s12^2 - 39*s12*s13 - 33*s13^2)*s23^2 + (-3*s12 - 18*s13)*
             s23^3) + p1q^3*p2q*((-6*s12^2 - 12*s12*s13 - 6*s13^2)*s23^2 +
            (-6*s12 - 6*s13)*s23^3)) +
        p3q^4*(p1q*((-6*s12^3 - 18*s12^2*s13 - 12*s12*s13^2)*s23 +
            (-21*s12^2 - 27*s12*s13)*s23^2 - 15*s12*s23^3) +
          p2q*(-12*s12^3*s13 + (-18*s12^3 - 42*s12^2*s13 - 18*s12*s13^2 -
              6*s13^3)*s23 + (-33*s12^2 - 39*s12*s13 - 6*s13^2)*s23^2 +
            (-18*s12 - 3*s13)*s23^3)))*Log(s23/(s12 + s13 + s23))^2)/
      (p2q*p3q^4*s12*s13*s23^2 + p3q^3*(p1q*p2q*s12*s13*s23^2 +
         3*p2q^2*s12*s13*s23^2) + p3q^2*(2*p1q*p2q^2*s12*s13*s23^2 +
         3*p2q^3*s12*s13*s23^2) + p3q*(p1q*p2q^3*s12*s13*s23^2 +
         p2q^4*s12*s13*s23^2)) + Log((p1q + p3q)/(p1q + p2q + p3q))*
      (((p2q^4*(-(s12*s13^2) - s13^3 - s13^2*s23) +
          p3q^4*(2*s12^3 + 3*s12^2*s13 + s12*s13^2 + (4*s12^2 + 3*s12*s13)*
             s23 + 2*s12*s23^2) + p1q*p2q^3*(-3*s12*s13^2 - 3*s13^3 +
            (s12*s13 - 2*s13^2)*s23 + s13*s23^2) +
          p1q^4*(4*s12^3 + 8*s12^2*s13 + 4*s12*s13^2 +
            (8*s12^2 + 10*s12*s13 + 2*s13^2)*s23 + (4*s12 + 2*s13)*s23^2) +
          p1q^2*p2q^2*(2*s12^3 + 4*s12^2*s13 - 2*s12*s13^2 - 4*s13^3 +
            (4*s12^2 + 7*s12*s13 - s13^2)*s23 + (2*s12 + 3*s13)*s23^2) +
          p1q^3*p2q*(4*s12^3 + 8*s12^2*s13 + 2*s12*s13^2 - 2*s13^3 +
            (8*s12^2 + 12*s12*s13 + 2*s13^2)*s23 + (4*s12 + 4*s13)*s23^2) +
          p3q^3*(p2q*(-s12^3 - 2*s12^2*s13 - 2*s12*s13^2 - s13^3 +
              (-s12^2 - s12*s13 - s13^2)*s23) + p1q*(8*s12^3 + 13*s12^2*s13 +
              5*s12*s13^2 + (16*s12^2 + 14*s12*s13 + s13^2)*s23 +
              (8*s12 + s13)*s23^2)) + p3q^2*(p2q^2*(-s12^3 + s12^2*s13 +
              s12*s13^2 - s13^3 + (-s12^2 + 2*s12*s13 - s13^2)*s23) +
            p1q*p2q*(-s12^3 - s12^2*s13 - 3*s12*s13^2 - 3*s13^3 +
              (2*s12*s13 - 2*s13^2)*s23 + (s12 + s13)*s23^2) +
            p1q^2*(14*s12^3 + 24*s12^2*s13 + 10*s12*s13^2 + (28*s12^2 +
                27*s12*s13 + 3*s13^2)*s23 + (14*s12 + 3*s13)*s23^2)) +
          p3q*(p2q^3*(2*s12^2*s13 + s12*s13^2 - s13^3 + (2*s12*s13 - s13^2)*
               s23) + p1q*p2q^2*(4*s12^2*s13 - 4*s13^3 + (s12^2 + 6*s12*s13 -
                3*s13^2)*s23 + (s12 + s13)*s23^2) + p1q^2*p2q*
             (4*s12^3 + 8*s12^2*s13 - 4*s13^3 + (9*s12^2 + 13*s12*s13)*s23 +
              (5*s12 + 4*s13)*s23^2) + p1q^3*(12*s12^3 + 22*s12^2*s13 +
              10*s12*s13^2 + (24*s12^2 + 26*s12*s13 + 4*s13^2)*s23 +
              (12*s12 + 4*s13)*s23^2)))*Log(s12/(s12 + s13 + s23)))/
        (p2q*p3q^3*(3*s12^2*s13 + 3*s12*s13*s23) +
         p3q*(-3*p2q^3*s12*s13^2 + p1q^2*p2q*(3*s12^2*s13 + 3*s12*s13*s23) +
           p1q*p2q^2*(3*s12^2*s13 - 3*s12*s13^2 + 3*s12*s13*s23)) +
         p3q^2*(p2q^2*(3*s12^2*s13 - 3*s12*s13^2 + 3*s12*s13*s23) +
           p1q*p2q*(6*s12^2*s13 + 6*s12*s13*s23))) +
       ((p2q^5*(-9*s12^2*s13^2 - 9*s12*s13^3 + (-10*s12*s13^2 - s13^3)*s23 -
            s13^2*s23^2) + p3q^5*(-9*s12^3*s13 - 9*s12^2*s13^2 +
            (-16*s12^3 - 42*s12^2*s13 - 17*s12*s13^2)*s23 +
            (-32*s12^2 - 33*s12*s13)*s23^2 - 16*s12*s23^3) +
          p1q*p2q^4*(9*s12^3*s13 - 9*s12^2*s13^2 - 18*s12*s13^3 +
            (27*s12^2*s13 - 3*s12*s13^2 - 3*s13^3)*s23 +
            (19*s12*s13 - 2*s13^2)*s23^2 + s13*s23^3) +
          p1q^4*p2q*((-14*s12^3 - 10*s12^2*s13 + 4*s12*s13^2)*s23 +
            (-28*s12^2 - 8*s12*s13 + 2*s13^2)*s23^2 + (-14*s12 + 2*s13)*
             s23^3) + p1q^2*p2q^3*(18*s12^3*s13 - 18*s12*s13^3 +
            (-7*s12^3 + 49*s12^2*s13 + 16*s12*s13^2 - 4*s13^3)*s23 +
            (-14*s12^2 + 34*s12*s13 - s13^2)*s23^2 + (-7*s12 + 3*s13)*
             s23^3) + p1q^3*p2q^2*(18*s12^3*s13 + 18*s12^2*s13^2 +
            (-14*s12^3 + 44*s12^2*s13 + 38*s12*s13^2 - 2*s13^3)*s23 +
            (-28*s12^2 + 30*s12*s13 + 2*s13^2)*s23^2 + (-14*s12 + 4*s13)*
             s23^3) + p3q^4*(p2q*(-18*s12^4 - 27*s12^3*s13 + 9*s12*s13^3 +
              (-44*s12^3 - 35*s12^2*s13 + 8*s12*s13^2 - s13^3)*s23 +
              (-42*s12^2 - 16*s12*s13 - s13^2)*s23^2 - 16*s12*s23^3) +
            p1q*(-27*s12^3*s13 - 27*s12^2*s13^2 + (-64*s12^3 - 149*s12^2*
                 s13 - 58*s12*s13^2)*s23 + (-128*s12^2 - 121*s12*s13 + s13^2)*
               s23^2 + (-64*s12 + s13)*s23^3)) +
          p3q^3*(p2q^2*(-18*s12^4 + 18*s12^3*s13 + 45*s12^2*s13^2 +
              9*s12*s13^3 + (-20*s12^3 + 62*s12^2*s13 + 35*s12*s13^2 -
                2*s13^3)*s23 + (-2*s12^2 + 28*s12*s13 - 2*s13^2)*s23^2) +
            p1q*p2q*(-54*s12^4 - 72*s12^3*s13 + 9*s12^2*s13^2 +
              27*s12*s13^3 + (-146*s12^3 - 96*s12^2*s13 + 38*s12*s13^2 -
                3*s13^3)*s23 + (-146*s12^2 - 38*s12*s13 - s13^2)*s23^2 +
              (-54*s12 + 2*s13)*s23^3) + p1q^2*(-36*s12^3*s13 -
              36*s12^2*s13^2 + (-112*s12^3 - 237*s12^2*s13 - 89*s12*s13^2)*
               s23 + (-224*s12^2 - 198*s12*s13 + 3*s13^2)*s23^2 +
              (-112*s12 + 3*s13)*s23^3)) +
          p3q^2*(p2q^3*(-9*s12^4 + 27*s12^3*s13 + 18*s12^2*s13^2 -
              18*s12*s13^3 + (-10*s12^3 + 39*s12^2*s13 - 16*s12*s13^2 -
                2*s13^3)*s23 + (-s12^2 + 4*s12*s13 - 2*s13^2)*s23^2) +
            p1q*p2q^2*(-36*s12^4 + 54*s12^3*s13 + 108*s12^2*s13^2 +
              18*s12*s13^3 + (-46*s12^3 + 183*s12^2*s13 + 114*s12*s13^2 -
                7*s13^3)*s23 + (-8*s12^2 + 107*s12*s13 - 5*s13^2)*s23^2 +
              (2*s12 + 2*s13)*s23^3) + p1q^3*(-18*s12^3*s13 -
              18*s12^2*s13^2 + (-96*s12^3 - 176*s12^2*s13 - 62*s12*s13^2)*
               s23 + (-192*s12^2 - 154*s12*s13 + 4*s13^2)*s23^2 +
              (-96*s12 + 4*s13)*s23^3) + p1q^2*p2q*(-54*s12^4 -
              72*s12^3*s13 + 18*s12^2*s13^2 + 36*s12*s13^3 + (-198*s12^3 -
                130*s12^2*s13 + 64*s12*s13^2 - 4*s13^3)*s23 +
              (-242*s12^2 - 59*s12*s13 + 3*s13^2)*s23^2 + (-98*s12 + 7*s13)*
               s23^3)) + p3q*(p2q^4*(18*s12^3*s13 - 18*s12*s13^3 +
              (20*s12^2*s13 - 18*s12*s13^2 - 2*s13^3)*s23 + (2*s12*s13 -
                2*s13^2)*s23^2) + p1q^4*((-32*s12^3 - 46*s12^2*s13 -
                14*s12*s13^2)*s23 + (-64*s12^2 - 44*s12*s13 + 2*s13^2)*s23^
                2 + (-32*s12 + 2*s13)*s23^3) + p1q*p2q^3*(-9*s12^4 +
              45*s12^3*s13 + 18*s12^2*s13^2 - 36*s12*s13^3 +
              (-9*s12^3 + 103*s12^2*s13 + 6*s12*s13^2 - 7*s13^3)*s23 +
              (s12^2 + 52*s12*s13 - 5*s13^2)*s23^2 + (s12 + 2*s13)*s23^3) +
            p1q^2*p2q^2*(-18*s12^4 + 54*s12^3*s13 + 90*s12^2*s13^2 +
              18*s12*s13^3 + (-48*s12^3 + 174*s12^2*s13 + 142*s12*s13^2 -
                8*s13^3)*s23 + (-50*s12^2 + 119*s12*s13 - s13^2)*s23^2 +
              (-20*s12 + 7*s13)*s23^3) + p1q^3*p2q*(-18*s12^4 -
              18*s12^3*s13 + 18*s12^2*s13^2 + 18*s12*s13^3 + (-110*s12^3 -
                60*s12^2*s13 + 48*s12*s13^2 - 2*s13^3)*s23 + (-166*s12^2 -
                34*s12*s13 + 6*s13^2)*s23^2 + (-74*s12 + 8*s13)*s23^3)))*
         Log(s13/(s12 + s13 + s23)))/(p2q*p3q^4*(27*s12^2*s13*s23 +
           27*s12*s13*s23^2) + p3q*(-27*p2q^4*s12*s13^2*s23 +
           p1q^2*p2q^2*(27*s12^2*s13*s23 + 27*s12*s13*s23^2) +
           p1q*p2q^3*((27*s12^2*s13 - 27*s12*s13^2)*s23 +
             27*s12*s13*s23^2)) + p3q^3*(p1q*p2q*(54*s12^2*s13*s23 +
             54*s12*s13*s23^2) + p2q^2*((54*s12^2*s13 - 27*s12*s13^2)*s23 +
             54*s12*s13*s23^2)) + p3q^2*(p1q^2*p2q*(27*s12^2*s13*s23 +
             27*s12*s13*s23^2) + p2q^3*((27*s12^2*s13 - 54*s12*s13^2)*s23 +
             27*s12*s13*s23^2) + p1q*p2q^2*((81*s12^2*s13 - 27*s12*s13^2)*
              s23 + 81*s12*s13*s23^2))) +
       ((p2q^5*(9*s12^2*s13^2 + 9*s12*s13^3 + (19*s12*s13^2 + 10*s13^3)*s23 +
            10*s13^2*s23^2) + p3q^5*(9*s12^3*s13 + 9*s12^2*s13^2 +
            (-2*s12^3 + 15*s12^2*s13 + 8*s12*s13^2)*s23 +
            (-4*s12^2 + 6*s12*s13)*s23^2 - 2*s12*s23^3) +
          p1q^3*p2q^2*(-18*s12^3*s13 - 18*s12^2*s13^2 +
            (-22*s12^3 - 116*s12^2*s13 - 56*s12*s13^2 + 20*s13^3)*s23 +
            (-44*s12^2 - 138*s12*s13 - 20*s13^2)*s23^2 + (-22*s12 - 40*s13)*
             s23^3) + p1q^2*p2q^3*(-18*s12^3*s13 + 18*s12*s13^3 +
            (-11*s12^3 - 85*s12^2*s13 + 2*s12*s13^2 + 40*s13^3)*s23 +
            (-22*s12^2 - 97*s12*s13 + 10*s13^2)*s23^2 + (-11*s12 - 30*s13)*
             s23^3) + p1q^4*p2q*((-22*s12^3 - 62*s12^2*s13 - 40*s12*s13^2)*
             s23 + (-44*s12^2 - 82*s12*s13 - 20*s13^2)*s23^2 +
            (-22*s12 - 20*s13)*s23^3) + p1q*p2q^4*(-9*s12^3*s13 +
            9*s12^2*s13^2 + 18*s12*s13^3 + (-27*s12^2*s13 + 30*s12*s13^2 +
              30*s13^3)*s23 + (-28*s12*s13 + 20*s13^2)*s23^2 -
            10*s13*s23^3) + p3q^3*(p2q^2*(18*s12^4 - 18*s12^3*s13 -
              45*s12^2*s13^2 - 9*s12*s13^3 + (38*s12^3 - 53*s12^2*s13 -
                26*s12*s13^2 + 20*s13^3)*s23 + (20*s12^2 - 37*s12*s13 +
                20*s13^2)*s23^2) + p1q^2*(36*s12^3*s13 + 36*s12^2*s13^2 +
              (-14*s12^3 + 21*s12^2*s13 - s12*s13^2)*s23 + (-28*s12^2 -
                45*s12*s13 - 30*s13^2)*s23^2 + (-14*s12 - 30*s13)*s23^3) +
            p1q*p2q*(54*s12^4 + 72*s12^3*s13 - 9*s12^2*s13^2 - 27*s12*s13^3 +
              (83*s12^3 - 12*s12^2*s13 - 56*s12*s13^2 + 30*s13^3)*s23 +
              (2*s12^2 - 106*s12*s13 + 10*s13^2)*s23^2 + (-27*s12 - 20*s13)*
               s23^3)) + p3q^2*(p2q^3*(9*s12^4 - 27*s12^3*s13 -
              18*s12^2*s13^2 + 18*s12*s13^3 + (19*s12^3 - 66*s12^2*s13 -
                2*s12*s13^2 + 20*s13^3)*s23 + (10*s12^2 - 40*s12*s13 +
                20*s13^2)*s23^2) + p1q^2*p2q*(54*s12^4 + 72*s12^3*s13 -
              18*s12^2*s13^2 - 36*s12*s13^3 + (36*s12^3 - 158*s12^2*s13 -
                154*s12*s13^2 + 40*s13^3)*s23 + (-91*s12^2 - 301*s12*s13 -
                30*s13^2)*s23^2 + (-73*s12 - 70*s13)*s23^3) +
            p1q^3*(18*s12^3*s13 + 18*s12^2*s13^2 + (-12*s12^3 -
                22*s12^2*s13 - 28*s12*s13^2)*s23 + (-24*s12^2 - 80*s12*s13 -
                40*s13^2)*s23^2 + (-12*s12 - 40*s13)*s23^3) +
            p1q*p2q^2*(36*s12^4 - 54*s12^3*s13 - 108*s12^2*s13^2 -
              18*s12*s13^3 + (55*s12^3 - 210*s12^2*s13 - 87*s12*s13^2 +
                70*s13^3)*s23 + (-s12^2 - 179*s12*s13 + 50*s13^2)*s23^2 +
              (-20*s12 - 20*s13)*s23^3)) +
          p3q*(p2q^4*(-18*s12^3*s13 + 18*s12*s13^3 + (-38*s12^2*s13 +
                18*s12*s13^2 + 20*s13^3)*s23 + (-20*s12*s13 + 20*s13^2)*s23^
                2) + p1q^3*p2q*(18*s12^4 + 18*s12^3*s13 - 18*s12^2*s13^2 -
              18*s12*s13^3 + (-34*s12^3 - 210*s12^2*s13 - 156*s12*s13^2 +
                20*s13^3)*s23 + (-122*s12^2 - 308*s12*s13 - 60*s13^2)*s23^2 +
              (-70*s12 - 80*s13)*s23^3) + p1q^2*p2q^2*(18*s12^4 -
              54*s12^3*s13 - 90*s12^2*s13^2 - 18*s12*s13^3 +
              (-6*s12^3 - 282*s12^2*s13 - 124*s12*s13^2 + 80*s13^3)*s23 +
              (-67*s12^2 - 299*s12*s13 + 10*s13^2)*s23^2 + (-43*s12 - 70*s13)*
               s23^3) + p1q*p2q^3*(9*s12^4 - 45*s12^3*s13 - 18*s12^2*s13^2 +
              36*s12*s13^3 + (9*s12^3 - 139*s12^2*s13 + 21*s12*s13^2 +
                70*s13^3)*s23 + (-10*s12^2 - 115*s12*s13 + 50*s13^2)*s23^2 +
              (-10*s12 - 20*s13)*s23^3) + p1q^4*((-4*s12^3 - 26*s12^2*s13 -
                22*s12*s13^2)*s23 + (-8*s12^2 - 46*s12*s13 - 20*s13^2)*s23^
                2 + (-4*s12 - 20*s13)*s23^3)) +
          p3q^4*(p2q*(18*s12^4 + 27*s12^3*s13 - 9*s12*s13^3 +
              (35*s12^3 + 26*s12^2*s13 + s12*s13^2 + 10*s13^3)*s23 +
              (15*s12^2 - 2*s12*s13 + 10*s13^2)*s23^2 - 2*s12*s23^3) +
            p1q*(27*s12^3*s13 + 27*s12^2*s13^2 + (-8*s12^3 + 32*s12^2*s13 +
                13*s12*s13^2)*s23 + (-16*s12^2 - 5*s12*s13 - 10*s13^2)*s23^
                2 + (-8*s12 - 10*s13)*s23^3)))*Log(s23/(s12 + s13 + s23)))/
        (p2q*p3q^4*(27*s12^2*s13*s23 + 27*s12*s13*s23^2) +
         p3q*(-27*p2q^4*s12*s13^2*s23 + p1q^2*p2q^2*(27*s12^2*s13*s23 +
             27*s12*s13*s23^2) + p1q*p2q^3*((27*s12^2*s13 - 27*s12*s13^2)*
              s23 + 27*s12*s13*s23^2)) +
         p3q^3*(p1q*p2q*(54*s12^2*s13*s23 + 54*s12*s13*s23^2) +
           p2q^2*((54*s12^2*s13 - 27*s12*s13^2)*s23 + 54*s12*s13*s23^2)) +
         p3q^2*(p1q^2*p2q*(27*s12^2*s13*s23 + 27*s12*s13*s23^2) +
           p2q^3*((27*s12^2*s13 - 54*s12*s13^2)*s23 + 27*s12*s13*s23^2) +
           p1q*p2q^2*((81*s12^2*s13 - 27*s12*s13^2)*s23 +
             81*s12*s13*s23^2)))) + Log(-s12 - s13 - s23)*
      ((p3q^5*((-36*s12^3 - 108*s12^2*s13 - 72*s12*s13^2)*s23 +
           (-104*s12^2 - 140*s12*s13)*s23^2 - 68*s12*s23^3) +
         p2q^5*((-72*s12^2*s13 - 108*s12*s13^2 - 36*s13^3)*s23 +
           (-140*s12*s13 - 104*s13^2)*s23^2 - 68*s13*s23^3) +
         p1q*p2q^4*((8*s12^2 - 20*s12*s13 - 28*s13^2)*s23^2 +
           (12*s12 - 24*s13)*s23^3 + 4*s23^4) +
         p3q^4*(p2q*(-144*s12^3*s13 + (-144*s12^3 - 504*s12^2*s13 - 288*s12*
                s13^2 - 72*s13^3)*s23 + (-284*s12^2 - 568*s12*s13 - 76*s13^2)*
              s23^2 + (-204*s12 - 68*s13)*s23^3) +
           p1q*((-28*s12^2 - 20*s12*s13 + 8*s13^2)*s23^2 + (-24*s12 + 12*s13)*
              s23^3 + 4*s23^4)) + p3q^3*(p2q^2*(-144*s12^3*s13 +
             288*s12^2*s13^2 + (-216*s12^3 - 576*s12^2*s13 - 396*s12*s13^2 -
               180*s13^3)*s23 + (-296*s12^2 - 932*s12*s13 - 192*s13^2)*
              s23^2 + (-272*s12 - 204*s13)*s23^3) +
           p1q*p2q*(-144*s12^3*s13 - 144*s12^2*s13*s23 +
             (16*s12^2 - 140*s12*s13 + 52*s13^2)*s23^2 - 36*s12*s23^3 +
             12*s23^4)) + p3q*(p2q^4*(-144*s12*s13^3 +
             (-72*s12^3 - 288*s12^2*s13 - 504*s12*s13^2 - 144*s13^3)*s23 +
             (-76*s12^2 - 568*s12*s13 - 284*s13^2)*s23^2 +
             (-68*s12 - 204*s13)*s23^3) + p1q*p2q^3*(-144*s12*s13^3 -
             144*s12*s13^2*s23 + (52*s12^2 - 140*s12*s13 + 16*s13^2)*s23^2 -
             36*s13*s23^3 + 12*s23^4)) +
         p3q^2*(p2q^3*(288*s12^2*s13^2 - 144*s12*s13^3 +
             (-180*s12^3 - 396*s12^2*s13 - 576*s12*s13^2 - 216*s13^3)*s23 +
             (-192*s12^2 - 932*s12*s13 - 296*s13^2)*s23^2 +
             (-204*s12 - 272*s13)*s23^3) + p1q*p2q^2*(288*s12^2*s13^2 +
             (144*s12^2*s13 + 144*s12*s13^2)*s23 + (88*s12^2 - 96*s12*s13 +
               88*s13^2)*s23^2 + (-24*s12 - 24*s13)*s23^3 + 16*s23^4)))/
        (3*p2q*p3q^4*s12*s13*s23^2 + p3q^3*(3*p1q*p2q*s12*s13*s23^2 +
           9*p2q^2*s12*s13*s23^2) + p3q^2*(6*p1q*p2q^2*s12*s13*s23^2 +
           9*p2q^3*s12*s13*s23^2) + p3q*(3*p1q*p2q^3*s12*s13*s23^2 +
           3*p2q^4*s12*s13*s23^2)) +
       ((p3q^5*((2*s12^2 + 2*s12*s13)*s23^2 + 2*s12*s23^3) +
          p2q^5*((-36*s12^2*s13 - 54*s12*s13^2 - 18*s13^3)*s23 +
            (-70*s12*s13 - 52*s13^2)*s23^2 - 34*s13*s23^3) +
          p1q*p2q^4*((-72*s12^2*s13 - 108*s12*s13^2 - 36*s13^3)*s23 +
            (4*s12^2 - 150*s12*s13 - 118*s13^2)*s23^2 + (6*s12 - 80*s13)*
             s23^3 + 2*s23^4) + p1q^2*p2q^3*((-72*s12^2*s13 - 108*s12*s13^2 -
              36*s13^3)*s23 + (8*s12^2 - 160*s12*s13 - 132*s13^2)*s23^2 +
            (12*s12 - 92*s13)*s23^3 + 4*s23^4) + p1q^3*p2q^2*
           ((8*s12^2 - 20*s12*s13 - 28*s13^2)*s23^2 + (12*s12 - 24*s13)*
             s23^3 + 4*s23^4) + p3q^4*(p2q*(-36*s12^3*s13 + (-54*s12^2*s13 -
                18*s12*s13^2 - 36*s13^3)*s23 + (2*s12^2 - 32*s12*s13 -
                38*s13^2)*s23^2 + (4*s12 - 18*s13)*s23^3) +
            p1q*((8*s12^2 + 12*s12*s13 + 4*s13^2)*s23^2 + (10*s12 + 6*s13)*
               s23^3 + 2*s23^4)) + p3q^3*(p2q^2*(-36*s12^3*s13 +
              72*s12^2*s13^2 + (-72*s12^2*s13 - 54*s12*s13^2 - 126*s13^3)*
               s23 + (-4*s12^2 - 106*s12*s13 - 150*s13^2)*s23^2 +
              (2*s12 - 72*s13)*s23^3) + p1q^2*((12*s12^2 + 20*s12*s13 +
                8*s13^2)*s23^2 + (16*s12 + 12*s13)*s23^3 + 4*s23^4) +
            p1q*p2q*(-36*s12^3*s13 - 72*s13^3*s23 + (20*s12^2 + 36*s12*s13 -
                78*s13^2)*s23^2 + (30*s12 - 14*s13)*s23^3 + 8*s23^4)) +
          p3q*(p2q^4*(-36*s12*s13^3 + (-90*s12^2*s13 - 198*s12*s13^2 -
                108*s13^3)*s23 + (-2*s12^2 - 194*s12*s13 - 196*s13^2)*s23^2 -
              104*s13*s23^3) + p1q*p2q^3*(-36*s12*s13^3 + (-108*s12^2*s13 -
                288*s12*s13^2 - 180*s13^3)*s23 + (12*s12^2 - 270*s12*s13 -
                340*s13^2)*s23^2 + (22*s12 - 168*s13)*s23^3 + 8*s23^4) +
            p1q^3*p2q*((16*s12^2 - 4*s12*s13 - 20*s13^2)*s23^2 +
              (24*s12 - 12*s13)*s23^3 + 8*s23^4) + p1q^2*p2q^2*
             ((-36*s12^2*s13 - 144*s12*s13^2 - 108*s13^3)*s23 +
              (28*s12^2 - 156*s12*s13 - 256*s13^2)*s23^2 + (40*s12 - 136*s13)*
               s23^3 + 12*s23^4)) + p3q^2*(p2q^3*(72*s12^2*s13^2 -
              36*s12*s13^3 + (-72*s12^2*s13 - 180*s12*s13^2 - 180*s13^3)*
               s23 + (-6*s12^2 - 196*s12*s13 - 256*s13^2)*s23^2 -
              124*s13*s23^3) + p1q^3*((8*s12^2 + 16*s12*s13 + 8*s13^2)*s23^
                2 + (12*s12 + 12*s13)*s23^3 + 4*s23^4) +
            p1q*p2q^2*(72*s12^2*s13^2 + (36*s12^2*s13 - 108*s12*s13^2 -
                216*s13^3)*s23 + (20*s12^2 - 60*s12*s13 - 304*s13^2)*s23^2 +
              (36*s12 - 108*s13)*s23^3 + 12*s23^4) + p1q^2*p2q*
             ((36*s12^2*s13 - 36*s12*s13^2 - 72*s13^3)*s23 +
              (32*s12^2 + 24*s12*s13 - 116*s13^2)*s23^2 + (44*s12 - 32*s13)*
               s23^3 + 12*s23^4)))*Log(s12/(s12 + s13 + s23)))/
        (3*p2q*p3q^4*s12*s13*s23^2 + p3q^3*(3*p1q*p2q*s12*s13*s23^2 +
           9*p2q^2*s12*s13*s23^2) + p3q^2*(6*p1q*p2q^2*s12*s13*s23^2 +
           9*p2q^3*s12*s13*s23^2) + p3q*(3*p1q*p2q^3*s12*s13*s23^2 +
           3*p2q^4*s12*s13*s23^2)) +
       ((p3q^5*((-18*s12^3 - 54*s12^2*s13 - 36*s12*s13^2)*s23 +
            (-52*s12^2 - 70*s12*s13)*s23^2 - 34*s12*s23^3) +
          p2q^5*((2*s12*s13 + 2*s13^2)*s23^2 + 2*s13*s23^3) +
          p1q*p2q^4*((4*s12^2 + 12*s12*s13 + 8*s13^2)*s23^2 +
            (6*s12 + 10*s13)*s23^3 + 2*s23^4) + p1q^3*p2q^2*
           ((8*s12^2 + 16*s12*s13 + 8*s13^2)*s23^2 + (12*s12 + 12*s13)*
             s23^3 + 4*s23^4) + p1q^2*p2q^3*((8*s12^2 + 20*s12*s13 +
              12*s13^2)*s23^2 + (12*s12 + 16*s13)*s23^3 + 4*s23^4) +
          p3q^4*(p2q*(-36*s12^3*s13 + (-108*s12^3 - 198*s12^2*s13 -
                90*s12*s13^2)*s23 + (-196*s12^2 - 194*s12*s13 - 2*s13^2)*s23^
                2 - 104*s12*s23^3) + p1q*((-36*s12^3 - 108*s12^2*s13 -
                72*s12*s13^2)*s23 + (-118*s12^2 - 150*s12*s13 + 4*s13^2)*s23^
                2 + (-80*s12 + 6*s13)*s23^3 + 2*s23^4)) +
          p3q^3*(p2q^2*(-36*s12^3*s13 + 72*s12^2*s13^2 + (-180*s12^3 -
                180*s12^2*s13 - 72*s12*s13^2)*s23 + (-256*s12^2 -
                196*s12*s13 - 6*s13^2)*s23^2 - 124*s12*s23^3) +
            p1q^2*((-36*s12^3 - 108*s12^2*s13 - 72*s12*s13^2)*s23 +
              (-132*s12^2 - 160*s12*s13 + 8*s13^2)*s23^2 + (-92*s12 + 12*s13)*
               s23^3 + 4*s23^4) + p1q*p2q*(-36*s12^3*s13 + (-180*s12^3 -
                288*s12^2*s13 - 108*s12*s13^2)*s23 + (-340*s12^2 -
                270*s12*s13 + 12*s13^2)*s23^2 + (-168*s12 + 22*s13)*s23^3 +
              8*s23^4)) + p3q^2*(p2q^3*(72*s12^2*s13^2 - 36*s12*s13^3 +
              (-126*s12^3 - 54*s12^2*s13 - 72*s12*s13^2)*s23 +
              (-150*s12^2 - 106*s12*s13 - 4*s13^2)*s23^2 + (-72*s12 + 2*s13)*
               s23^3) + p1q^3*((-28*s12^2 - 20*s12*s13 + 8*s13^2)*s23^2 +
              (-24*s12 + 12*s13)*s23^3 + 4*s23^4) + p1q*p2q^2*
             (72*s12^2*s13^2 + (-216*s12^3 - 108*s12^2*s13 + 36*s12*s13^2)*
               s23 + (-304*s12^2 - 60*s12*s13 + 20*s13^2)*s23^2 +
              (-108*s12 + 36*s13)*s23^3 + 12*s23^4) + p1q^2*p2q*
             ((-108*s12^3 - 144*s12^2*s13 - 36*s12*s13^2)*s23 +
              (-256*s12^2 - 156*s12*s13 + 28*s13^2)*s23^2 + (-136*s12 +
                40*s13)*s23^3 + 12*s23^4)) +
          p3q*(p2q^4*(-36*s12*s13^3 + (-36*s12^3 - 18*s12^2*s13 -
                54*s12*s13^2)*s23 + (-38*s12^2 - 32*s12*s13 + 2*s13^2)*s23^
                2 + (-18*s12 + 4*s13)*s23^3) + p1q^3*p2q*
             ((-20*s12^2 - 4*s12*s13 + 16*s13^2)*s23^2 + (-12*s12 + 24*s13)*
               s23^3 + 8*s23^4) + p1q*p2q^3*(-36*s12*s13^3 - 72*s12^3*s23 +
              (-78*s12^2 + 36*s12*s13 + 20*s13^2)*s23^2 + (-14*s12 + 30*s13)*
               s23^3 + 8*s23^4) + p1q^2*p2q^2*((-72*s12^3 - 36*s12^2*s13 +
                36*s12*s13^2)*s23 + (-116*s12^2 + 24*s12*s13 + 32*s13^2)*s23^
                2 + (-32*s12 + 44*s13)*s23^3 + 12*s23^4)))*
         Log(s13/(s12 + s13 + s23)))/(3*p2q*p3q^4*s12*s13*s23^2 +
         p3q^3*(3*p1q*p2q*s12*s13*s23^2 + 9*p2q^2*s12*s13*s23^2) +
         p3q^2*(6*p1q*p2q^2*s12*s13*s23^2 + 9*p2q^3*s12*s13*s23^2) +
         p3q*(3*p1q*p2q^3*s12*s13*s23^2 + 3*p2q^4*s12*s13*s23^2)) +
       ((p3q^5*((-6*s12^3 - 18*s12^2*s13 - 12*s12*s13^2)*s23 +
            (-18*s12^2 - 24*s12*s13)*s23^2 - 12*s12*s23^3) +
          p1q^2*p2q^3*((-24*s12^2*s13 - 36*s12*s13^2 - 12*s13^3)*s23 +
            (-60*s12*s13 - 48*s13^2)*s23^2 - 36*s13*s23^3) +
          p1q*p2q^4*((-24*s12^2*s13 - 36*s12*s13^2 - 12*s13^3)*s23 +
            (-54*s12*s13 - 42*s13^2)*s23^2 - 30*s13*s23^3) +
          p2q^5*((-12*s12^2*s13 - 18*s12*s13^2 - 6*s13^3)*s23 +
            (-24*s12*s13 - 18*s13^2)*s23^2 - 12*s13*s23^3) +
          p1q^3*p2q^2*((-12*s12*s13 - 12*s13^2)*s23^2 - 12*s13*s23^3) +
          p3q^2*(p1q^3*((-12*s12^2 - 12*s12*s13)*s23^2 - 12*s12*s23^3) +
            p1q*p2q^2*(48*s12^2*s13^2 + (-72*s12^3 - 24*s12^2*s13 -
                24*s12*s13^2 - 72*s13^3)*s23 + (-108*s12^2 - 72*s12*s13 -
                108*s13^2)*s23^2 + (-48*s12 - 48*s13)*s23^3) +
            p2q^3*(48*s12^2*s13^2 - 24*s12*s13^3 + (-42*s12^3 -
                42*s12^2*s13 - 84*s12*s13^2 - 60*s13^3)*s23 +
              (-48*s12^2 - 102*s12*s13 - 84*s13^2)*s23^2 + (-24*s12 - 42*s13)*
               s23^3) + p1q^2*p2q*((-36*s12^3 - 36*s12^2*s13 - 24*s12*s13^2 -
                24*s13^3)*s23 + (-96*s12^2 - 84*s12*s13 - 48*s13^2)*s23^2 +
              (-60*s12 - 24*s13)*s23^3)) +
          p3q^3*(p1q^2*((-12*s12^3 - 36*s12^2*s13 - 24*s12*s13^2)*s23 +
              (-48*s12^2 - 60*s12*s13)*s23^2 - 36*s12*s23^3) +
            p2q^2*(-24*s12^3*s13 + 48*s12^2*s13^2 + (-60*s12^3 -
                84*s12^2*s13 - 42*s12*s13^2 - 42*s13^3)*s23 +
              (-84*s12^2 - 102*s12*s13 - 48*s13^2)*s23^2 + (-42*s12 - 24*s13)*
               s23^3) + p1q*p2q*(-24*s12^3*s13 + (-60*s12^3 - 96*s12^2*s13 -
                36*s12*s13^2 - 24*s13^3)*s23 + (-120*s12^2 - 102*s12*s13 -
                30*s13^2)*s23^2 + (-66*s12 - 12*s13)*s23^3)) +
          p3q*(p1q*p2q^3*(-24*s12*s13^3 + (-24*s12^3 - 36*s12^2*s13 -
                96*s12*s13^2 - 60*s13^3)*s23 + (-30*s12^2 - 102*s12*s13 -
                120*s13^2)*s23^2 + (-12*s12 - 66*s13)*s23^3) +
            p1q^2*p2q^2*((-24*s12^3 - 24*s12^2*s13 - 36*s12*s13^2 - 36*s13^3)*
               s23 + (-48*s12^2 - 84*s12*s13 - 96*s13^2)*s23^2 +
              (-24*s12 - 60*s13)*s23^3) + p2q^4*(-24*s12*s13^3 +
              (-12*s12^3 - 36*s12^2*s13 - 84*s12*s13^2 - 36*s13^3)*s23 +
              (-12*s12^2 - 78*s12*s13 - 66*s13^2)*s23^2 + (-6*s12 - 36*s13)*
               s23^3) + p1q^3*p2q*((-12*s12^2 - 24*s12*s13 - 12*s13^2)*s23^
                2 + (-12*s12 - 12*s13)*s23^3)) +
          p3q^4*(p1q*((-12*s12^3 - 36*s12^2*s13 - 24*s12*s13^2)*s23 +
              (-42*s12^2 - 54*s12*s13)*s23^2 - 30*s12*s23^3) +
            p2q*(-24*s12^3*s13 + (-36*s12^3 - 84*s12^2*s13 - 36*s12*s13^2 -
                12*s13^3)*s23 + (-66*s12^2 - 78*s12*s13 - 12*s13^2)*s23^2 +
              (-36*s12 - 6*s13)*s23^3)))*Log(s23/(s12 + s13 + s23)))/
        (p2q*p3q^4*s12*s13*s23^2 + p3q^3*(p1q*p2q*s12*s13*s23^2 +
           3*p2q^2*s12*s13*s23^2) + p3q^2*(2*p1q*p2q^2*s12*s13*s23^2 +
           3*p2q^3*s12*s13*s23^2) + p3q*(p1q*p2q^3*s12*s13*s23^2 +
           p2q^4*s12*s13*s23^2))) + Log(p1q/(p1q + p2q + p3q))*
      ((p3q^5*((18*s12^3 + 54*s12^2*s13 + 36*s12*s13^2)*s23 +
           (34*s12^2 + 52*s12*s13)*s23^2 + 16*s12*s23^3) +
         p2q^5*((36*s12^2*s13 + 54*s12*s13^2 + 18*s13^3)*s23 +
           (52*s12*s13 + 34*s13^2)*s23^2 + 16*s13*s23^3) +
         p1q*p2q^4*((-40*s12^2 - 62*s12*s13 - 22*s13^2)*s23^2 +
           (-60*s12 - 42*s13)*s23^3 - 20*s23^4) +
         p3q^2*(p2q^3*(-144*s12^2*s13^2 + 72*s12*s13^3 +
             (90*s12^3 + 198*s12^2*s13 + 288*s12*s13^2 + 108*s13^3)*s23 +
             (150*s12^2 + 448*s12*s13 + 184*s13^2)*s23^2 + (48*s12 + 64*s13)*
              s23^3) + p1q*p2q^2*(-144*s12^2*s13^2 + (-72*s12^2*s13 - 72*s12*
                s13^2)*s23 + (-116*s12^2 - 168*s12*s13 - 116*s13^2)*s23^2 +
             (-204*s12 - 204*s13)*s23^3 - 80*s23^4)) +
         p3q^3*(p2q^2*(72*s12^3*s13 - 144*s12^2*s13^2 +
             (108*s12^3 + 288*s12^2*s13 + 198*s12*s13^2 + 90*s13^3)*s23 +
             (184*s12^2 + 448*s12*s13 + 150*s13^2)*s23^2 + (64*s12 + 48*s13)*
              s23^3) + p1q*p2q*(72*s12^3*s13 + 72*s12^2*s13*s23 +
             (-80*s12^2 - 110*s12*s13 - 98*s13^2)*s23^2 +
             (-144*s12 - 162*s13)*s23^3 - 60*s23^4)) +
         p3q*(p2q^4*(72*s12*s13^3 + (36*s12^3 + 144*s12^2*s13 + 252*s12*
                s13^2 + 72*s13^3)*s23 + (56*s12^2 + 248*s12*s13 + 124*s13^2)*
              s23^2 + (16*s12 + 48*s13)*s23^3) + p1q*p2q^3*
            (72*s12*s13^3 + 72*s12*s13^2*s23 + (-98*s12^2 - 110*s12*s13 - 80*
                s13^2)*s23^2 + (-162*s12 - 144*s13)*s23^3 - 60*s23^4)) +
         p3q^4*(p2q*(72*s12^3*s13 + (72*s12^3 + 252*s12^2*s13 + 144*s12*
                s13^2 + 36*s13^3)*s23 + (124*s12^2 + 248*s12*s13 + 56*s13^2)*
              s23^2 + (48*s12 + 16*s13)*s23^3) +
           p1q*((-22*s12^2 - 62*s12*s13 - 40*s13^2)*s23^2 +
             (-42*s12 - 60*s13)*s23^3 - 20*s23^4)))/
        (27*p2q*p3q^4*s12*s13*s23^2 + p3q^3*(27*p1q*p2q*s12*s13*s23^2 +
           81*p2q^2*s12*s13*s23^2) + p3q^2*(54*p1q*p2q^2*s12*s13*s23^2 +
           81*p2q^3*s12*s13*s23^2) + p3q*(27*p1q*p2q^3*s12*s13*s23^2 +
           27*p2q^4*s12*s13*s23^2)) +
       ((p3q^3*(-10*s12^3 - 20*s12^2*s13 - 10*s12*s13^2 +
            (-20*s12^2 - 20*s12*s13)*s23 - 10*s12*s23^2) +
          p2q^3*(-8*s12^2*s13 - 16*s12*s13^2 - 8*s13^3 +
            (-16*s12*s13 - 16*s13^2)*s23 - 8*s13*s23^2) +
          p1q*p2q^2*(-16*s12^2*s13 - 32*s12*s13^2 - 16*s13^3 +
            (10*s12^2 - 12*s12*s13 - 22*s13^2)*s23 + (20*s12 + 4*s13)*s23^2 +
            10*s23^3) + p1q^2*p2q*(-16*s12^2*s13 - 32*s12*s13^2 - 16*s13^3 +
            (20*s12^2 + 8*s12*s13 - 12*s13^2)*s23 + (40*s12 + 24*s13)*s23^2 +
            20*s23^3) + p1q^3*((20*s12^2 + 40*s12*s13 + 20*s13^2)*s23 +
            (40*s12 + 40*s13)*s23^2 + 20*s23^3) +
          p3q^2*(p2q*(-20*s12^3 - 48*s12^2*s13 - 36*s12*s13^2 - 8*s13^3 +
              (-40*s12^2 - 56*s12*s13 - 16*s13^2)*s23 + (-20*s12 - 8*s13)*s23^
                2) + p1q*(-20*s12^3 - 40*s12^2*s13 - 20*s12*s13^2 +
              (-30*s12^2 - 20*s12*s13 + 10*s13^2)*s23 + 20*s13*s23^2 +
              10*s23^3)) + p3q*(p2q^2*(-10*s12^3 - 36*s12^2*s13 -
              42*s12*s13^2 - 16*s13^3 + (-20*s12^2 - 52*s12*s13 - 32*s13^2)*
               s23 + (-10*s12 - 16*s13)*s23^2) + p1q*p2q*(-20*s12^3 -
              56*s12^2*s13 - 52*s12*s13^2 - 16*s13^3 + (-20*s12^2 -
                32*s12*s13 - 12*s13^2)*s23 + (20*s12 + 24*s13)*s23^2 +
              20*s23^3) + p1q^2*(-20*s12^3 - 40*s12^2*s13 - 20*s12*s13^2 +
              (-20*s12^2 + 20*s13^2)*s23 + (20*s12 + 40*s13)*s23^2 +
              20*s23^3)))*Log(p2q/(p1q + p2q + p3q)))/
        (27*p2q*p3q^2*s12*s13*s23 + p3q*(27*p1q*p2q*s12*s13*s23 +
           27*p2q^2*s12*s13*s23)) +
       ((p3q^5*(9*s12^3*s13 + 9*s12^2*s13^2 + (10*s12^3 + 19*s12^2*s13)*s23 +
            10*s12^2*s23^2) + p1q^2*p2q^3*(36*s12^2*s13^2 + 36*s12*s13^3 +
            (-(s12^2*s13) + 21*s12*s13^2 - 14*s13^3)*s23 +
            (-30*s12^2 - 45*s12*s13 - 28*s13^2)*s23^2 + (-30*s12 - 14*s13)*
             s23^3) + p1q^3*p2q^2*(18*s12^2*s13^2 + 18*s12*s13^3 +
            (-28*s12^2*s13 - 22*s12*s13^2 - 12*s13^3)*s23 +
            (-40*s12^2 - 80*s12*s13 - 24*s13^2)*s23^2 + (-40*s12 - 12*s13)*
             s23^3) + p1q*p2q^4*(27*s12^2*s13^2 + 27*s12*s13^3 +
            (13*s12^2*s13 + 32*s12*s13^2 - 8*s13^3)*s23 +
            (-10*s12^2 - 5*s12*s13 - 16*s13^2)*s23^2 + (-10*s12 - 8*s13)*
             s23^3) + p1q^4*p2q*((-22*s12^2*s13 - 26*s12*s13^2 - 4*s13^3)*
             s23 + (-20*s12^2 - 46*s12*s13 - 8*s13^2)*s23^2 +
            (-20*s12 - 4*s13)*s23^3) + p2q^5*(9*s12^2*s13^2 + 9*s12*s13^3 +
            (8*s12^2*s13 + 15*s12*s13^2 - 2*s13^3)*s23 +
            (6*s12*s13 - 4*s13^2)*s23^2 - 2*s13*s23^3) +
          p3q^4*(p2q*(18*s12^3*s13 - 18*s12*s13^3 + (20*s12^3 +
                18*s12^2*s13 - 38*s12*s13^2)*s23 + (20*s12^2 - 20*s12*s13)*
               s23^2) + p1q*(18*s12^3*s13 + 9*s12^2*s13^2 - 9*s12*s13^3 +
              (30*s12^3 + 30*s12^2*s13 - 27*s12*s13^2)*s23 +
              (20*s12^2 - 28*s12*s13)*s23^2 - 10*s12*s23^3)) +
          p3q^2*(p2q^3*(-9*s12^3*s13 - 45*s12^2*s13^2 - 18*s12*s13^3 +
              18*s13^4 + (20*s12^3 - 26*s12^2*s13 - 53*s12*s13^2 + 38*s13^3)*
               s23 + (20*s12^2 - 37*s12*s13 + 20*s13^2)*s23^2) +
            p1q^2*p2q*(-18*s12^3*s13 - 90*s12^2*s13^2 - 54*s12*s13^3 +
              18*s13^4 + (80*s12^3 - 124*s12^2*s13 - 282*s12*s13^2 - 6*s13^3)*
               s23 + (10*s12^2 - 299*s12*s13 - 67*s13^2)*s23^2 +
              (-70*s12 - 43*s13)*s23^3) + p1q^3*(-18*s12^2*s13^2 -
              18*s12*s13^3 + (20*s12^3 - 56*s12^2*s13 - 116*s12*s13^2 -
                22*s13^3)*s23 + (-20*s12^2 - 138*s12*s13 - 44*s13^2)*s23^2 +
              (-40*s12 - 22*s13)*s23^3) + p1q*p2q^2*(-18*s12^3*s13 -
              108*s12^2*s13^2 - 54*s12*s13^3 + 36*s13^4 + (70*s12^3 -
                87*s12^2*s13 - 210*s12*s13^2 + 55*s13^3)*s23 +
              (50*s12^2 - 179*s12*s13 - s13^2)*s23^2 + (-20*s12 - 20*s13)*s23^
                3)) + p3q^3*(p2q^2*(18*s12^3*s13 - 18*s12^2*s13^2 -
              27*s12*s13^3 + 9*s13^4 + (20*s12^3 - 2*s12^2*s13 -
                66*s12*s13^2 + 19*s13^3)*s23 + (20*s12^2 - 40*s12*s13 +
                10*s13^2)*s23^2) + p1q^2*(18*s12^3*s13 - 18*s12*s13^3 +
              (40*s12^3 + 2*s12^2*s13 - 85*s12*s13^2 - 11*s13^3)*s23 +
              (10*s12^2 - 97*s12*s13 - 22*s13^2)*s23^2 + (-30*s12 - 11*s13)*
               s23^3) + p1q*p2q*(36*s12^3*s13 - 18*s12^2*s13^2 -
              45*s12*s13^3 + 9*s13^4 + (70*s12^3 + 21*s12^2*s13 -
                139*s12*s13^2 + 9*s13^3)*s23 + (50*s12^2 - 115*s12*s13 -
                10*s13^2)*s23^2 + (-20*s12 - 10*s13)*s23^3)) +
          p3q*(p1q^2*p2q^2*(-36*s12^3*s13 - 18*s12^2*s13^2 + 72*s12*s13^3 +
              54*s13^4 + (40*s12^3 - 154*s12^2*s13 - 158*s12*s13^2 +
                36*s13^3)*s23 + (-30*s12^2 - 301*s12*s13 - 91*s13^2)*s23^2 +
              (-70*s12 - 73*s13)*s23^3) + p1q^3*p2q*(-18*s12^3*s13 -
              18*s12^2*s13^2 + 18*s12*s13^3 + 18*s13^4 + (20*s12^3 -
                156*s12^2*s13 - 210*s12*s13^2 - 34*s13^3)*s23 +
              (-60*s12^2 - 308*s12*s13 - 122*s13^2)*s23^2 + (-80*s12 -
                70*s13)*s23^3) + p1q*p2q^3*(-27*s12^3*s13 - 9*s12^2*s13^2 +
              72*s12*s13^3 + 54*s13^4 + (30*s12^3 - 56*s12^2*s13 -
                12*s12*s13^2 + 83*s13^3)*s23 + (10*s12^2 - 106*s12*s13 +
                2*s13^2)*s23^2 + (-20*s12 - 27*s13)*s23^3) +
            p1q^4*((-40*s12^2*s13 - 62*s12*s13^2 - 22*s13^3)*s23 +
              (-20*s12^2 - 82*s12*s13 - 44*s13^2)*s23^2 + (-20*s12 - 22*s13)*
               s23^3) + p2q^4*(-9*s12^3*s13 + 27*s12*s13^3 + 18*s13^4 +
              (10*s12^3 + s12^2*s13 + 26*s12*s13^2 + 35*s13^3)*s23 +
              (10*s12^2 - 2*s12*s13 + 15*s13^2)*s23^2 - 2*s13*s23^3)))*
         Log((p1q + p2q)/(p1q + p2q + p3q)))/(27*p2q*p3q^4*s12^2*s13*s23 +
         p3q^2*(p1q*p2q^2*((27*s12^2*s13 - 81*s12*s13^2)*s23 -
             81*s12*s13*s23^2) + p2q^3*((27*s12^2*s13 - 54*s12*s13^2)*s23 -
             54*s12*s13*s23^2) + p1q^2*p2q*(-27*s12*s13^2*s23 -
             27*s12*s13*s23^2)) + p3q*(p1q*p2q^3*(-54*s12*s13^2*s23 -
             54*s12*s13*s23^2) + p1q^2*p2q^2*(-27*s12*s13^2*s23 -
             27*s12*s13*s23^2) + p2q^4*(-27*s12*s13^2*s23 -
             27*s12*s13*s23^2)) + p3q^3*
          (p1q*p2q*((27*s12^2*s13 - 27*s12*s13^2)*s23 - 27*s12*s13*s23^2) +
           p2q^2*((54*s12^2*s13 - 27*s12*s13^2)*s23 - 27*s12*s13*s23^2))) +
       ((p3q^3*(-8*s12^3 - 16*s12^2*s13 - 8*s12*s13^2 +
            (-16*s12^2 - 16*s12*s13)*s23 - 8*s12*s23^2) +
          p2q^3*(-10*s12^2*s13 - 20*s12*s13^2 - 10*s13^3 +
            (-20*s12*s13 - 20*s13^2)*s23 - 10*s13*s23^2) +
          p1q*p2q^2*(-20*s12^2*s13 - 40*s12*s13^2 - 20*s13^3 +
            (10*s12^2 - 20*s12*s13 - 30*s13^2)*s23 + 20*s12*s23^2 +
            10*s23^3) + p1q^2*p2q*(-20*s12^2*s13 - 40*s12*s13^2 - 20*s13^3 +
            (20*s12^2 - 20*s13^2)*s23 + (40*s12 + 20*s13)*s23^2 + 20*s23^3) +
          p1q^3*((20*s12^2 + 40*s12*s13 + 20*s13^2)*s23 + (40*s12 + 40*s13)*
             s23^2 + 20*s23^3) + p3q^2*(p2q*(-16*s12^3 - 42*s12^2*s13 -
              36*s12*s13^2 - 10*s13^3 + (-32*s12^2 - 52*s12*s13 - 20*s13^2)*
               s23 + (-16*s12 - 10*s13)*s23^2) + p1q*(-16*s12^3 -
              32*s12^2*s13 - 16*s12*s13^2 + (-22*s12^2 - 12*s12*s13 +
                10*s13^2)*s23 + (4*s12 + 20*s13)*s23^2 + 10*s23^3)) +
          p3q*(p2q^2*(-8*s12^3 - 36*s12^2*s13 - 48*s12*s13^2 - 20*s13^3 +
              (-16*s12^2 - 56*s12*s13 - 40*s13^2)*s23 + (-8*s12 - 20*s13)*s23^
                2) + p1q*p2q*(-16*s12^3 - 52*s12^2*s13 - 56*s12*s13^2 -
              20*s13^3 + (-12*s12^2 - 32*s12*s13 - 20*s13^2)*s23 +
              (24*s12 + 20*s13)*s23^2 + 20*s23^3) +
            p1q^2*(-16*s12^3 - 32*s12^2*s13 - 16*s12*s13^2 + (-12*s12^2 +
                8*s12*s13 + 20*s13^2)*s23 + (24*s12 + 40*s13)*s23^2 +
              20*s23^3)))*Log(p3q/(p1q + p2q + p3q)))/
        (27*p2q*p3q^2*s12*s13*s23 + p3q*(27*p1q*p2q*s12*s13*s23 +
           27*p2q^2*s12*s13*s23)) +
       ((p2q^5*(-9*s12^2*s13^2 - 9*s12*s13^3 + (-19*s12*s13^2 - 10*s13^3)*
             s23 - 10*s13^2*s23^2) + p3q^5*(-9*s12^3*s13 - 9*s12^2*s13^2 +
            (2*s12^3 - 15*s12^2*s13 - 8*s12*s13^2)*s23 +
            (4*s12^2 - 6*s12*s13)*s23^2 + 2*s12*s23^3) +
          p1q*p2q^4*(9*s12^3*s13 - 9*s12^2*s13^2 - 18*s12*s13^3 +
            (27*s12^2*s13 - 30*s12*s13^2 - 30*s13^3)*s23 +
            (28*s12*s13 - 20*s13^2)*s23^2 + 10*s13*s23^3) +
          p1q^4*p2q*((22*s12^3 + 62*s12^2*s13 + 40*s12*s13^2)*s23 +
            (44*s12^2 + 82*s12*s13 + 20*s13^2)*s23^2 + (22*s12 + 20*s13)*
             s23^3) + p1q^2*p2q^3*(18*s12^3*s13 - 18*s12*s13^3 +
            (11*s12^3 + 85*s12^2*s13 - 2*s12*s13^2 - 40*s13^3)*s23 +
            (22*s12^2 + 97*s12*s13 - 10*s13^2)*s23^2 + (11*s12 + 30*s13)*
             s23^3) + p1q^3*p2q^2*(18*s12^3*s13 + 18*s12^2*s13^2 +
            (22*s12^3 + 116*s12^2*s13 + 56*s12*s13^2 - 20*s13^3)*s23 +
            (44*s12^2 + 138*s12*s13 + 20*s13^2)*s23^2 + (22*s12 + 40*s13)*
             s23^3) + p3q^4*(p2q*(-18*s12^4 - 27*s12^3*s13 + 9*s12*s13^3 +
              (-35*s12^3 - 26*s12^2*s13 - s12*s13^2 - 10*s13^3)*s23 +
              (-15*s12^2 + 2*s12*s13 - 10*s13^2)*s23^2 + 2*s12*s23^3) +
            p1q*(-27*s12^3*s13 - 27*s12^2*s13^2 + (8*s12^3 - 32*s12^2*s13 -
                13*s12*s13^2)*s23 + (16*s12^2 + 5*s12*s13 + 10*s13^2)*s23^2 +
              (8*s12 + 10*s13)*s23^3)) +
          p3q^3*(p2q^2*(-18*s12^4 + 18*s12^3*s13 + 45*s12^2*s13^2 +
              9*s12*s13^3 + (-38*s12^3 + 53*s12^2*s13 + 26*s12*s13^2 -
                20*s13^3)*s23 + (-20*s12^2 + 37*s12*s13 - 20*s13^2)*s23^2) +
            p1q*p2q*(-54*s12^4 - 72*s12^3*s13 + 9*s12^2*s13^2 +
              27*s12*s13^3 + (-83*s12^3 + 12*s12^2*s13 + 56*s12*s13^2 -
                30*s13^3)*s23 + (-2*s12^2 + 106*s12*s13 - 10*s13^2)*s23^2 +
              (27*s12 + 20*s13)*s23^3) + p1q^2*(-36*s12^3*s13 -
              36*s12^2*s13^2 + (14*s12^3 - 21*s12^2*s13 + s12*s13^2)*s23 +
              (28*s12^2 + 45*s12*s13 + 30*s13^2)*s23^2 + (14*s12 + 30*s13)*
               s23^3)) + p3q^2*(p2q^3*(-9*s12^4 + 27*s12^3*s13 +
              18*s12^2*s13^2 - 18*s12*s13^3 + (-19*s12^3 + 66*s12^2*s13 +
                2*s12*s13^2 - 20*s13^3)*s23 + (-10*s12^2 + 40*s12*s13 -
                20*s13^2)*s23^2) + p1q*p2q^2*(-36*s12^4 + 54*s12^3*s13 +
              108*s12^2*s13^2 + 18*s12*s13^3 + (-55*s12^3 + 210*s12^2*s13 +
                87*s12*s13^2 - 70*s13^3)*s23 + (s12^2 + 179*s12*s13 -
                50*s13^2)*s23^2 + (20*s12 + 20*s13)*s23^3) +
            p1q^3*(-18*s12^3*s13 - 18*s12^2*s13^2 + (12*s12^3 +
                22*s12^2*s13 + 28*s12*s13^2)*s23 + (24*s12^2 + 80*s12*s13 +
                40*s13^2)*s23^2 + (12*s12 + 40*s13)*s23^3) +
            p1q^2*p2q*(-54*s12^4 - 72*s12^3*s13 + 18*s12^2*s13^2 +
              36*s12*s13^3 + (-36*s12^3 + 158*s12^2*s13 + 154*s12*s13^2 -
                40*s13^3)*s23 + (91*s12^2 + 301*s12*s13 + 30*s13^2)*s23^2 +
              (73*s12 + 70*s13)*s23^3)) +
          p3q*(p2q^4*(18*s12^3*s13 - 18*s12*s13^3 + (38*s12^2*s13 -
                18*s12*s13^2 - 20*s13^3)*s23 + (20*s12*s13 - 20*s13^2)*s23^
                2) + p1q^4*((4*s12^3 + 26*s12^2*s13 + 22*s12*s13^2)*s23 +
              (8*s12^2 + 46*s12*s13 + 20*s13^2)*s23^2 + (4*s12 + 20*s13)*s23^
                3) + p1q*p2q^3*(-9*s12^4 + 45*s12^3*s13 + 18*s12^2*s13^2 -
              36*s12*s13^3 + (-9*s12^3 + 139*s12^2*s13 - 21*s12*s13^2 -
                70*s13^3)*s23 + (10*s12^2 + 115*s12*s13 - 50*s13^2)*s23^2 +
              (10*s12 + 20*s13)*s23^3) + p1q^2*p2q^2*(-18*s12^4 +
              54*s12^3*s13 + 90*s12^2*s13^2 + 18*s12*s13^3 +
              (6*s12^3 + 282*s12^2*s13 + 124*s12*s13^2 - 80*s13^3)*s23 +
              (67*s12^2 + 299*s12*s13 - 10*s13^2)*s23^2 + (43*s12 + 70*s13)*
               s23^3) + p1q^3*p2q*(-18*s12^4 - 18*s12^3*s13 +
              18*s12^2*s13^2 + 18*s12*s13^3 + (34*s12^3 + 210*s12^2*s13 +
                156*s12*s13^2 - 20*s13^3)*s23 + (122*s12^2 + 308*s12*s13 +
                60*s13^2)*s23^2 + (70*s12 + 80*s13)*s23^3)))*
         Log((p1q + p3q)/(p1q + p2q + p3q)))/
        (p2q*p3q^4*(27*s12^2*s13*s23 + 27*s12*s13*s23^2) +
         p3q*(-27*p2q^4*s12*s13^2*s23 + p1q^2*p2q^2*(27*s12^2*s13*s23 +
             27*s12*s13*s23^2) + p1q*p2q^3*((27*s12^2*s13 - 27*s12*s13^2)*
              s23 + 27*s12*s13*s23^2)) +
         p3q^3*(p1q*p2q*(54*s12^2*s13*s23 + 54*s12*s13*s23^2) +
           p2q^2*((54*s12^2*s13 - 27*s12*s13^2)*s23 + 54*s12*s13*s23^2)) +
         p3q^2*(p1q^2*p2q*(27*s12^2*s13*s23 + 27*s12*s13*s23^2) +
           p2q^3*((27*s12^2*s13 - 54*s12*s13^2)*s23 + 27*s12*s13*s23^2) +
           p1q*p2q^2*((81*s12^2*s13 - 27*s12*s13^2)*s23 +
             81*s12*s13*s23^2))) +
       ((p3q^6*((-3*s12^3*s13 - 6*s12^2*s13^2 - 3*s12*s13^3)*s23 +
            (-s12^3 - 6*s12^2*s13 - 5*s12*s13^2)*s23^2 + (-s12^2 - 2*s12*s13)*
             s23^3) + p2q^6*((-3*s12^3*s13 - 6*s12^2*s13^2 - 3*s12*s13^3)*
             s23 + (-5*s12^2*s13 - 6*s12*s13^2 - s13^3)*s23^2 +
            (-2*s12*s13 - s13^2)*s23^3) + p1q*p2q^5*
           ((-6*s12^3*s13 - 12*s12^2*s13^2 - 6*s12*s13^3)*s23 +
            (s12^3 - 7*s12^2*s13 - 11*s12*s13^2 - 3*s13^3)*s23^2 +
            (s12^2 - s12*s13 - 2*s13^2)*s23^3 + s13*s23^4) +
          p1q^4*p2q^2*((-2*s12^2 + 2*s13^2)*s23^3 + (-2*s12 + 2*s13)*s23^4) +
          p1q^2*p2q^4*((-6*s12^3*s13 - 12*s12^2*s13^2 - 6*s12*s13^3)*s23 +
            (2*s12^3 - 4*s12^2*s13 - 10*s12*s13^2 - 4*s13^3)*s23^2 +
            (s12^2 + 2*s12*s13 - s13^2)*s23^3 + (-s12 + 3*s13)*s23^4) +
          p1q^3*p2q^3*((2*s12^3 + 6*s12^2*s13 + 2*s12*s13^2 - 2*s13^3)*
             s23^2 + (6*s12*s13 + 2*s13^2)*s23^3 + (-2*s12 + 4*s13)*s23^4) +
          p3q^5*(p2q*(-8*s12^4*s13 - 8*s12^3*s13^2 + (-2*s12^4 -
                20*s12^3*s13 - 15*s12^2*s13^2 - 6*s12*s13^3 - s13^4)*s23 +
              (-4*s12^3 - 17*s12^2*s13 - 10*s12*s13^2 - s13^3)*s23^2 +
              (-2*s12^2 - 5*s12*s13)*s23^3) +
            p1q*((-6*s12^3*s13 - 12*s12^2*s13^2 - 6*s12*s13^3)*s23 +
              (-3*s12^3 - 11*s12^2*s13 - 7*s12*s13^2 + s13^3)*s23^2 +
              (-2*s12^2 - s12*s13 + s13^2)*s23^3 + s12*s23^4)) +
          p3q^3*(p2q^3*(-8*s12^4*s13 + 24*s12^3*s13^2 + 24*s12^2*s13^3 -
              8*s12*s13^4 + (-7*s12^4 - 6*s12^3*s13 + 50*s12^2*s13^2 -
                6*s12*s13^3 - 7*s13^4)*s23 + (-7*s12^3 + 7*s12^2*s13 +
                7*s12*s13^2 - 7*s13^3)*s23^2 - 2*s12*s13*s23^3) +
            p1q*p2q^2*(-8*s12^4*s13 + 8*s12^3*s13^2 + 16*s12^2*s13^3 +
              (-10*s12^4 + 2*s12^3*s13 + 54*s12^2*s13^2 + 10*s12*s13^3 -
                8*s13^4)*s23 + (-2*s12^3 + 20*s12^2*s13 + 20*s12*s13^2 +
                2*s13^3)*s23^2 + (9*s12^2 - 7*s12*s13 + 10*s13^2)*s23^3 +
              s12*s23^4) + p1q^2*p2q*((-2*s12^4 + 8*s12^3*s13 +
                12*s12^2*s13^2 - 2*s13^4)*s23 + (4*s12^2*s13 + 4*s12*s13^2 +
                8*s13^3)*s23^2 + (5*s12^2 - 8*s12*s13 + 7*s13^2)*s23^3 +
              (3*s12 - 3*s13)*s23^4) + p1q^3*((-2*s12^3 + 2*s12^2*s13 +
                6*s12*s13^2 + 2*s13^3)*s23^2 + (2*s12^2 + 6*s12*s13)*s23^3 +
              (4*s12 - 2*s13)*s23^4)) +
          p3q^4*(p2q^2*(-16*s12^4*s13 + 16*s12^2*s13^3 + (-6*s12^4 -
                27*s12^3*s13 + 16*s12^2*s13^2 + s12*s13^3 - 4*s13^4)*s23 +
              (-7*s12^3 - 10*s12^2*s13 + s12*s13^2 - 4*s13^3)*s23^2 +
              (-s12^2 - 4*s12*s13)*s23^3) + p1q*p2q*(-8*s12^4*s13 -
              8*s12^3*s13^2 + (-4*s12^4 - 12*s12^3*s13 - 2*s12^2*s13^2 -
                4*s12*s13^3 - 2*s13^4)*s23 + (-5*s12^3 - 3*s12^2*s13 +
                s12*s13^2 + 3*s13^3)*s23^2 + (s12^2 + 5*s13^2)*s23^3 +
              2*s12*s23^4) + p1q^2*((-6*s12^3*s13 - 12*s12^2*s13^2 -
                6*s12*s13^3)*s23 + (-4*s12^3 - 10*s12^2*s13 - 4*s12*s13^2 +
                2*s13^3)*s23^2 + (-s12^2 + 2*s12*s13 + s13^2)*s23^3 +
              (3*s12 - s13)*s23^4)) + p3q^2*(p2q^4*(16*s12^3*s13^2 -
              16*s12*s13^4 + (-4*s12^4 + s12^3*s13 + 16*s12^2*s13^2 -
                27*s12*s13^3 - 6*s13^4)*s23 + (-4*s12^3 + s12^2*s13 -
                10*s12*s13^2 - 7*s13^3)*s23^2 + (-4*s12*s13 - s13^2)*s23^3) +
            p1q^3*p2q*((2*s12^3 - 10*s12^2*s13 - 6*s12*s13^2 + 6*s13^3)*s23^
                2 + (4*s12^2 - 14*s12*s13 + 2*s13^2)*s23^3 +
              (2*s12 - 4*s13)*s23^4) + p1q^2*p2q^2*((-4*s12^4 + 4*s12^3*s13 +
                16*s12^2*s13^2 + 4*s12*s13^3 - 4*s13^4)*s23 +
              (10*s12^3 - 10*s12^2*s13 - 10*s12*s13^2 + 10*s13^3)*s23^2 +
              (12*s12^2 - 36*s12*s13 + 12*s13^2)*s23^3 + (-2*s12 - 2*s13)*s23^
                4) + p1q^4*((2*s12^2 - 2*s13^2)*s23^3 + (2*s12 - 2*s13)*s23^
                4) + p1q*p2q^3*(16*s12^3*s13^2 + 8*s12^2*s13^3 -
              8*s12*s13^4 + (-8*s12^4 + 10*s12^3*s13 + 54*s12^2*s13^2 +
                2*s12*s13^3 - 10*s13^4)*s23 + (2*s12^3 + 20*s12^2*s13 +
                20*s12*s13^2 - 2*s13^3)*s23^2 + (10*s12^2 - 7*s12*s13 +
                9*s13^2)*s23^3 + s13*s23^4)) +
          p3q*(p2q^5*(-8*s12^2*s13^3 - 8*s12*s13^4 + (-s12^4 - 6*s12^3*s13 -
                15*s12^2*s13^2 - 20*s12*s13^3 - 2*s13^4)*s23 +
              (-s12^3 - 10*s12^2*s13 - 17*s12*s13^2 - 4*s13^3)*s23^2 +
              (-5*s12*s13 - 2*s13^2)*s23^3) + p1q*p2q^4*(-8*s12^2*s13^3 -
              8*s12*s13^4 + (-2*s12^4 - 4*s12^3*s13 - 2*s12^2*s13^2 -
                12*s12*s13^3 - 4*s13^4)*s23 + (3*s12^3 + s12^2*s13 -
                3*s12*s13^2 - 5*s13^3)*s23^2 + (5*s12^2 + s13^2)*s23^3 +
              2*s13*s23^4) + p1q^3*p2q^2*((6*s12^3 - 6*s12^2*s13 -
                10*s12*s13^2 + 2*s13^3)*s23^2 + (2*s12^2 - 14*s12*s13 +
                4*s13^2)*s23^3 + (-4*s12 + 2*s13)*s23^4) +
            p1q^2*p2q^3*((-2*s12^4 + 12*s12^2*s13^2 + 8*s12*s13^3 - 2*s13^4)*
               s23 + (8*s12^3 + 4*s12^2*s13 + 4*s12*s13^2)*s23^2 +
              (7*s12^2 - 8*s12*s13 + 5*s13^2)*s23^3 + (-3*s12 + 3*s13)*s23^
                4)))*Log((p2q + p3q)/(p1q + p2q + p3q)))/
        (p2q*p3q^5*(3*s12^2*s13 + 3*s12*s13^2)*s23^2 +
         p3q^3*(p2q^3*(18*s12^2*s13 + 18*s12*s13^2)*s23^2 -
           3*p1q^2*p2q*s12*s13*s23^3 + p1q*p2q^2*((9*s12^2*s13 + 9*s12*s13^2)*
              s23^2 - 9*s12*s13*s23^3)) +
         p3q^2*(p2q^4*(12*s12^2*s13 + 12*s12*s13^2)*s23^2 -
           6*p1q^2*p2q^2*s12*s13*s23^3 + p1q*p2q^3*
            ((9*s12^2*s13 + 9*s12*s13^2)*s23^2 - 9*s12*s13*s23^3)) +
         p3q^4*(p2q^2*(12*s12^2*s13 + 12*s12*s13^2)*s23^2 +
           p1q*p2q*((3*s12^2*s13 + 3*s12*s13^2)*s23^2 - 3*s12*s13*s23^3)) +
         p3q*(p2q^5*(3*s12^2*s13 + 3*s12*s13^2)*s23^2 - 3*p1q^2*p2q^3*s12*s13*
            s23^3 + p1q*p2q^4*((3*s12^2*s13 + 3*s12*s13^2)*s23^2 -
             3*s12*s13*s23^3))) +
       ((p3q^5*((18*s12^3 + 54*s12^2*s13 + 36*s12*s13^2)*s23 +
            (34*s12^2 + 52*s12*s13)*s23^2 + 16*s12*s23^3) +
          p2q^5*((36*s12^2*s13 + 54*s12*s13^2 + 18*s13^3)*s23 +
            (52*s12*s13 + 34*s13^2)*s23^2 + 16*s13*s23^3) +
          p1q^3*p2q^2*((-80*s12^2 - 124*s12*s13 - 44*s13^2)*s23^2 +
            (-120*s12 - 84*s13)*s23^3 - 40*s23^4) + p1q^2*p2q^3*
           ((72*s12^2*s13 + 108*s12*s13^2 + 36*s13^3)*s23 +
            (-80*s12^2 - 20*s12*s13 + 24*s13^2)*s23^2 + (-120*s12 - 52*s13)*
             s23^3 - 40*s23^4) + p1q*p2q^4*((72*s12^2*s13 + 108*s12*s13^2 +
              36*s13^3)*s23 + (-40*s12^2 + 42*s12*s13 + 46*s13^2)*s23^2 +
            (-60*s12 - 10*s13)*s23^3 - 20*s23^4) +
          p3q*(p2q^4*(72*s12*s13^3 + (36*s12^3 + 108*s12^2*s13 +
                252*s12*s13^2 + 108*s13^3)*s23 + (56*s12^2 + 194*s12*s13 +
                178*s13^2)*s23^2 + (18*s12 + 68*s13)*s23^3) +
            p1q^2*p2q^2*((72*s12^3 + 72*s12^2*s13 + 108*s12*s13^2 +
                108*s13^3)*s23 + (-136*s12^2 - 348*s12*s13 - 32*s13^2)*s23^
                2 + (-328*s12 - 260*s13)*s23^3 - 120*s23^4) +
            p1q^3*p2q*((-124*s12^2 - 248*s12*s13 - 124*s13^2)*s23^2 +
              (-204*s12 - 204*s13)*s23^3 - 80*s23^4) + p1q*p2q^3*
             (72*s12*s13^3 + (72*s12^3 + 108*s12^2*s13 + 288*s12*s13^2 +
                180*s13^3)*s23 + (-30*s12^2 - 54*s12*s13 + 160*s13^2)*s23^2 +
              (-184*s12 - 102*s13)*s23^3 - 80*s23^4)) +
          p3q^2*(p2q^3*(-144*s12^2*s13^2 + 72*s12*s13^3 + (126*s12^3 +
                126*s12^2*s13 + 252*s12*s13^2 + 180*s13^3)*s23 +
              (204*s12^2 + 286*s12*s13 + 292*s13^2)*s23^2 +
              (72*s12 + 106*s13)*s23^3) + p1q^2*p2q*
             ((108*s12^3 + 108*s12^2*s13 + 72*s12*s13^2 + 72*s13^3)*s23 +
              (-32*s12^2 - 348*s12*s13 - 136*s13^2)*s23^2 + (-260*s12 -
                328*s13)*s23^3 - 120*s23^4) + p1q*p2q^2*(-144*s12^2*s13^2 +
              (216*s12^3 + 72*s12^2*s13 + 72*s12*s13^2 + 216*s13^3)*s23 +
              (124*s12^2 - 264*s12*s13 + 124*s13^2)*s23^2 + (-216*s12 -
                216*s13)*s23^3 - 120*s23^4) +
            p1q^3*((-44*s12^2 - 124*s12*s13 - 80*s13^2)*s23^2 +
              (-84*s12 - 120*s13)*s23^3 - 40*s23^4)) +
          p3q^3*(p2q^2*(72*s12^3*s13 - 144*s12^2*s13^2 + (180*s12^3 +
                252*s12^2*s13 + 126*s12*s13^2 + 126*s13^3)*s23 +
              (292*s12^2 + 286*s12*s13 + 204*s13^2)*s23^2 + (106*s12 +
                72*s13)*s23^3) + p1q*p2q*(72*s12^3*s13 + (180*s12^3 +
                288*s12^2*s13 + 108*s12*s13^2 + 72*s13^3)*s23 +
              (160*s12^2 - 54*s12*s13 - 30*s13^2)*s23^2 + (-102*s12 -
                184*s13)*s23^3 - 80*s23^4) + p1q^2*
             ((36*s12^3 + 108*s12^2*s13 + 72*s12*s13^2)*s23 +
              (24*s12^2 - 20*s12*s13 - 80*s13^2)*s23^2 + (-52*s12 - 120*s13)*
               s23^3 - 40*s23^4)) + p3q^4*(p2q*(72*s12^3*s13 +
              (108*s12^3 + 252*s12^2*s13 + 108*s12*s13^2 + 36*s13^3)*s23 +
              (178*s12^2 + 194*s12*s13 + 56*s13^2)*s23^2 + (68*s12 + 18*s13)*
               s23^3) + p1q*((36*s12^3 + 108*s12^2*s13 + 72*s12*s13^2)*s23 +
              (46*s12^2 + 42*s12*s13 - 40*s13^2)*s23^2 + (-10*s12 - 60*s13)*
               s23^3 - 20*s23^4)))*Log(-s12 - s13 - s23))/
        (27*p2q*p3q^4*s12*s13*s23^2 + p3q^3*(27*p1q*p2q*s12*s13*s23^2 +
           81*p2q^2*s12*s13*s23^2) + p3q^2*(54*p1q*p2q^2*s12*s13*s23^2 +
           81*p2q^3*s12*s13*s23^2) + p3q*(27*p1q*p2q^3*s12*s13*s23^2 +
           27*p2q^4*s12*s13*s23^2)) +
       ((p3q^5*(10*s12^4 + 11*s12^3*s13 + s12^2*s13^2 +
            (10*s12^3 + s12^2*s13)*s23) + p2q^5*(-17*s12^2*s13^2 -
            25*s12*s13^3 - 8*s13^4 + (-16*s12^2*s13 - 47*s12*s13^2 -
              22*s13^3)*s23 + (-22*s12*s13 - 20*s13^2)*s23^2 - 6*s13*s23^3) +
          p1q*p2q^4*(-51*s12^2*s13^2 - 75*s12*s13^3 - 24*s13^4 +
            (-27*s12^2*s13 - 108*s12*s13^2 - 54*s13^3)*s23 +
            (20*s12^2 - 3*s12*s13 - 26*s13^2)*s23^2 + (30*s12 + 14*s13)*
             s23^3 + 10*s23^4) + p1q^4*p2q*((42*s12^2*s13 + 66*s12*s13^2 +
              24*s13^3)*s23 + (40*s12^2 + 126*s12*s13 + 68*s13^2)*s23^2 +
            (60*s12 + 64*s13)*s23^3 + 20*s23^4) + p1q^2*p2q^3*
           (-68*s12^2*s13^2 - 100*s12*s13^3 - 32*s13^4 +
            (-(s12^2*s13) - 89*s12*s13^2 - 52*s13^3)*s23 +
            (60*s12^2 + 101*s12*s13 + 22*s13^2)*s23^2 + (90*s12 + 72*s13)*
             s23^3 + 30*s23^4) + p1q^3*p2q^2*(-34*s12^2*s13^2 -
            50*s12*s13^3 - 16*s13^4 + (52*s12^2*s13 + 38*s12*s13^2 + 4*s13^3)*
             s23 + (80*s12^2 + 208*s12*s13 + 96*s13^2)*s23^2 +
            (120*s12 + 116*s13)*s23^3 + 40*s23^4) +
          p3q^4*(p1q*(20*s12^4 + 12*s12^3*s13 - 9*s12^2*s13^2 - s12*s13^3 +
              (-10*s12^3 - 50*s12^2*s13 - 13*s12*s13^2)*s23 +
              (-40*s12^2 - 22*s12*s13)*s23^2 - 10*s12*s23^3) +
            p2q*(30*s12^4 + 40*s12^3*s13 + 26*s12^2*s13^2 + 16*s12*s13^3 +
              (30*s12^3 + 18*s12^2*s13 + 24*s12*s13^2)*s23 + (-10*s12^2 -
                2*s12*s13)*s23^2 - 10*s12*s23^3)) +
          p3q^3*(p2q^2*(30*s12^4 + 36*s12^3*s13 + 28*s12^2*s13^2 +
              5*s12*s13^3 - 17*s13^4 + (10*s12^3 - 18*s12^2*s13 -
                8*s12*s13^2 - 43*s13^3)*s23 + (-50*s12^2 - 42*s12*s13 -
                34*s13^2)*s23^2 + (-30*s12 - 8*s13)*s23^3) +
            p1q*p2q*(40*s12^4 + 10*s12^3*s13 - 18*s12^2*s13^2 - 5*s12*s13^3 -
              17*s13^4 + (-70*s12^3 - 167*s12^2*s13 - 21*s12*s13^2 -
                23*s13^3)*s23 + (-160*s12^2 - 55*s12*s13 + 16*s13^2)*s23^2 +
              (-40*s12 + 32*s13)*s23^3 + 10*s23^4) +
            p1q^2*(20*s12^4 + 2*s12^3*s13 - 20*s12^2*s13^2 - 2*s12*s13^3 +
              (-40*s12^3 - 72*s12^2*s13 + 25*s12*s13^2 + 21*s13^3)*s23 +
              (-60*s12^2 + 37*s12*s13 + 52*s13^2)*s23^2 + (10*s12 + 41*s13)*
               s23^3 + 10*s23^4)) + p3q^2*(p2q^3*(10*s12^4 + 23*s12^3*s13 +
              19*s12^2*s13^2 - 36*s12*s13^3 - 42*s13^4 + (-30*s12^3 -
                50*s12^2*s13 - 85*s12*s13^2 - 110*s13^3)*s23 +
              (-70*s12^2 - 77*s12*s13 - 92*s13^2)*s23^2 + (-30*s12 - 24*s13)*
               s23^3) + p1q^3*(-20*s12^3*s13 - 22*s12^2*s13^2 - 2*s12*s13^3 +
              (-60*s12^3 - 44*s12^2*s13 + 76*s12*s13^2 + 42*s13^3)*s23 +
              (-40*s12^2 + 118*s12*s13 + 104*s13^2)*s23^2 + (40*s12 + 82*s13)*
               s23^3 + 20*s23^4) + p1q*p2q^2*(20*s12^4 + 20*s12^3*s13 +
              12*s12^2*s13^2 - 64*s12*s13^3 - 76*s13^4 + (-130*s12^3 -
                159*s12^2*s13 - 66*s12*s13^2 - 145*s13^3)*s23 +
              (-200*s12^2 - 19*s12*s13 - 29*s13^2)*s23^2 + (-20*s12 + 70*s13)*
               s23^3 + 30*s23^4) + p1q^2*p2q*(20*s12^4 + 14*s12^3*s13 +
              6*s12^2*s13^2 - 22*s12*s13^3 - 34*s13^4 + (-140*s12^3 -
                90*s12^2*s13 + 130*s12*s13^2 + 8*s13^3)*s23 +
              (-140*s12^2 + 223*s12*s13 + 169*s13^2)*s23^2 +
              (70*s12 + 177*s13)*s23^3 + 50*s23^4)) +
          p3q*(p2q^4*(7*s12^3*s13 - 28*s12^2*s13^2 - 77*s12*s13^3 -
              42*s13^4 + (-20*s12^3 - 49*s12^2*s13 - 136*s12*s13^2 -
                107*s13^3)*s23 + (-30*s12^2 - 68*s12*s13 - 87*s13^2)*s23^2 +
              (-10*s12 - 22*s13)*s23^3) + p1q^4*((60*s12^2*s13 +
                102*s12*s13^2 + 42*s13^3)*s23 + (40*s12^2 + 162*s12*s13 +
                104*s13^2)*s23^2 + (60*s12 + 82*s13)*s23^3 + 20*s23^4) +
            p1q*p2q^3*(13*s12^3*s13 - 75*s12^2*s13^2 - 198*s12*s13^3 -
              110*s13^4 + (-70*s12^3 - 78*s12^2*s13 - 220*s12*s13^2 -
                221*s13^3)*s23 + (-60*s12^2 + 20*s12*s13 - 80*s13^2)*s23^2 +
              (40*s12 + 61*s13)*s23^3 + 30*s23^4) + p1q^3*p2q*
             (-2*s12^3*s13 - 38*s12^2*s13^2 - 70*s12*s13^3 - 34*s13^4 +
              (-60*s12^3 + 80*s12^2*s13 + 186*s12*s13^2 + 46*s13^3)*s23 +
              (40*s12^2 + 416*s12*s13 + 254*s13^2)*s23^2 + (160*s12 +
                234*s13)*s23^3 + 60*s23^4) + p1q^2*p2q^2*(12*s12^3*s13 -
              78*s12^2*s13^2 - 192*s12*s13^3 - 102*s13^4 + (-100*s12^3 +
                8*s12^2*s13 - 2*s12*s13^2 - 110*s13^3)*s23 + (-20*s12^2 +
                341*s12*s13 + 157*s13^2)*s23^2 + (150*s12 + 235*s13)*s23^3 +
              70*s23^4)))*Log(s12/(s12 + s13 + s23)))/
        (27*p2q*p3q^4*s12^2*s13*s23 +
         p3q^2*(p1q*p2q^2*((27*s12^2*s13 - 81*s12*s13^2)*s23 -
             81*s12*s13*s23^2) + p2q^3*((27*s12^2*s13 - 54*s12*s13^2)*s23 -
             54*s12*s13*s23^2) + p1q^2*p2q*(-27*s12*s13^2*s23 -
             27*s12*s13*s23^2)) + p3q*(p1q*p2q^3*(-54*s12*s13^2*s23 -
             54*s12*s13*s23^2) + p1q^2*p2q^2*(-27*s12*s13^2*s23 -
             27*s12*s13*s23^2) + p2q^4*(-27*s12*s13^2*s23 -
             27*s12*s13*s23^2)) + p3q^3*
          (p1q*p2q*((27*s12^2*s13 - 27*s12*s13^2)*s23 - 27*s12*s13*s23^2) +
           p2q^2*((54*s12^2*s13 - 27*s12*s13^2)*s23 - 27*s12*s13*s23^2))) +
       ((p2q^5*(-(s12^2*s13^2) - 11*s12*s13^3 - 10*s13^4 +
            (-(s12*s13^2) - 10*s13^3)*s23) + p3q^5*(8*s12^4 + 25*s12^3*s13 +
            17*s12^2*s13^2 + (22*s12^3 + 47*s12^2*s13 + 16*s12*s13^2)*s23 +
            (20*s12^2 + 22*s12*s13)*s23^2 + 6*s12*s23^3) +
          p1q*p2q^4*(s12^3*s13 + 9*s12^2*s13^2 - 12*s12*s13^3 - 20*s13^4 +
            (13*s12^2*s13 + 50*s12*s13^2 + 10*s13^3)*s23 +
            (22*s12*s13 + 40*s13^2)*s23^2 + 10*s13*s23^3) +
          p1q^4*p2q*((-42*s12^3 - 102*s12^2*s13 - 60*s12*s13^2)*s23 +
            (-104*s12^2 - 162*s12*s13 - 40*s13^2)*s23^2 + (-82*s12 - 60*s13)*
             s23^3 - 20*s23^4) + p1q^3*p2q^2*(2*s12^3*s13 + 22*s12^2*s13^2 +
            20*s12*s13^3 + (-42*s12^3 - 76*s12^2*s13 + 44*s12*s13^2 +
              60*s13^3)*s23 + (-104*s12^2 - 118*s12*s13 + 40*s13^2)*s23^2 +
            (-82*s12 - 40*s13)*s23^3 - 20*s23^4) + p1q^2*p2q^3*
           (2*s12^3*s13 + 20*s12^2*s13^2 - 2*s12*s13^3 - 20*s13^4 +
            (-21*s12^3 - 25*s12^2*s13 + 72*s12*s13^2 + 40*s13^3)*s23 +
            (-52*s12^2 - 37*s12*s13 + 60*s13^2)*s23^2 + (-41*s12 - 10*s13)*
             s23^3 - 10*s23^4) + p3q^3*(p2q^2*(42*s12^4 + 36*s12^3*s13 -
              19*s12^2*s13^2 - 23*s12*s13^3 - 10*s13^4 + (110*s12^3 +
                85*s12^2*s13 + 50*s12*s13^2 + 30*s13^3)*s23 +
              (92*s12^2 + 77*s12*s13 + 70*s13^2)*s23^2 + (24*s12 + 30*s13)*
               s23^3) + p1q^2*(32*s12^4 + 100*s12^3*s13 + 68*s12^2*s13^2 +
              (52*s12^3 + 89*s12^2*s13 + s12*s13^2)*s23 + (-22*s12^2 -
                101*s12*s13 - 60*s13^2)*s23^2 + (-72*s12 - 90*s13)*s23^3 -
              30*s23^4) + p1q*p2q*(110*s12^4 + 198*s12^3*s13 +
              75*s12^2*s13^2 - 13*s12*s13^3 + (221*s12^3 + 220*s12^2*s13 +
                78*s12*s13^2 + 70*s13^3)*s23 + (80*s12^2 - 20*s12*s13 +
                60*s13^2)*s23^2 + (-61*s12 - 40*s13)*s23^3 - 30*s23^4)) +
          p3q^2*(p2q^3*(17*s12^4 - 5*s12^3*s13 - 28*s12^2*s13^2 -
              36*s12*s13^3 - 30*s13^4 + (43*s12^3 + 8*s12^2*s13 +
                18*s12*s13^2 - 10*s13^3)*s23 + (34*s12^2 + 42*s12*s13 +
                50*s13^2)*s23^2 + (8*s12 + 30*s13)*s23^3) +
            p1q^2*p2q*(102*s12^4 + 192*s12^3*s13 + 78*s12^2*s13^2 -
              12*s12*s13^3 + (110*s12^3 + 2*s12^2*s13 - 8*s12*s13^2 +
                100*s13^3)*s23 + (-157*s12^2 - 341*s12*s13 + 20*s13^2)*s23^
                2 + (-235*s12 - 150*s13)*s23^3 - 70*s23^4) +
            p1q^3*(16*s12^4 + 50*s12^3*s13 + 34*s12^2*s13^2 +
              (-4*s12^3 - 38*s12^2*s13 - 52*s12*s13^2)*s23 + (-96*s12^2 -
                208*s12*s13 - 80*s13^2)*s23^2 + (-116*s12 - 120*s13)*s23^3 -
              40*s23^4) + p1q*p2q^2*(76*s12^4 + 64*s12^3*s13 -
              12*s12^2*s13^2 - 20*s12*s13^3 - 20*s13^4 + (145*s12^3 +
                66*s12^2*s13 + 159*s12*s13^2 + 130*s13^3)*s23 +
              (29*s12^2 + 19*s12*s13 + 200*s13^2)*s23^2 + (-70*s12 + 20*s13)*
               s23^3 - 30*s23^4)) + p3q^4*(p2q*(42*s12^4 + 77*s12^3*s13 +
              28*s12^2*s13^2 - 7*s12*s13^3 + (107*s12^3 + 136*s12^2*s13 +
                49*s12*s13^2 + 20*s13^3)*s23 + (87*s12^2 + 68*s12*s13 +
                30*s13^2)*s23^2 + (22*s12 + 10*s13)*s23^3) +
            p1q*(24*s12^4 + 75*s12^3*s13 + 51*s12^2*s13^2 + (54*s12^3 +
                108*s12^2*s13 + 27*s12*s13^2)*s23 + (26*s12^2 + 3*s12*s13 -
                20*s13^2)*s23^2 + (-14*s12 - 30*s13)*s23^3 - 10*s23^4)) +
          p3q*(p2q^4*(-16*s12^3*s13 - 26*s12^2*s13^2 - 40*s12*s13^3 -
              30*s13^4 + (-24*s12^2*s13 - 18*s12*s13^2 - 30*s13^3)*s23 +
              (2*s12*s13 + 10*s13^2)*s23^2 + 10*s13*s23^3) +
            p1q^3*p2q*(34*s12^4 + 70*s12^3*s13 + 38*s12^2*s13^2 +
              2*s12*s13^3 + (-46*s12^3 - 186*s12^2*s13 - 80*s12*s13^2 +
                60*s13^3)*s23 + (-254*s12^2 - 416*s12*s13 - 40*s13^2)*s23^2 +
              (-234*s12 - 160*s13)*s23^3 - 60*s23^4) + p1q^2*p2q^2*
             (34*s12^4 + 22*s12^3*s13 - 6*s12^2*s13^2 - 14*s12*s13^3 -
              20*s13^4 + (-8*s12^3 - 130*s12^2*s13 + 90*s12*s13^2 +
                140*s13^3)*s23 + (-169*s12^2 - 223*s12*s13 + 140*s13^2)*s23^
                2 + (-177*s12 - 70*s13)*s23^3 - 50*s23^4) +
            p1q^4*((-24*s12^3 - 66*s12^2*s13 - 42*s12*s13^2)*s23 +
              (-68*s12^2 - 126*s12*s13 - 40*s13^2)*s23^2 + (-64*s12 - 60*s13)*
               s23^3 - 20*s23^4) + p1q*p2q^3*(17*s12^4 + 5*s12^3*s13 +
              18*s12^2*s13^2 - 10*s12*s13^3 - 40*s13^4 + (23*s12^3 +
                21*s12^2*s13 + 167*s12*s13^2 + 70*s13^3)*s23 +
              (-16*s12^2 + 55*s12*s13 + 160*s13^2)*s23^2 + (-32*s12 + 40*s13)*
               s23^3 - 10*s23^4)))*Log(s13/(s12 + s13 + s23)))/
        (p2q*p3q^4*(27*s12^2*s13*s23 + 27*s12*s13*s23^2) +
         p3q*(-27*p2q^4*s12*s13^2*s23 + p1q^2*p2q^2*(27*s12^2*s13*s23 +
             27*s12*s13*s23^2) + p1q*p2q^3*((27*s12^2*s13 - 27*s12*s13^2)*
              s23 + 27*s12*s13*s23^2)) +
         p3q^3*(p1q*p2q*(54*s12^2*s13*s23 + 54*s12*s13*s23^2) +
           p2q^2*((54*s12^2*s13 - 27*s12*s13^2)*s23 + 54*s12*s13*s23^2)) +
         p3q^2*(p1q^2*p2q*(27*s12^2*s13*s23 + 27*s12*s13*s23^2) +
           p2q^3*((27*s12^2*s13 - 54*s12*s13^2)*s23 + 27*s12*s13*s23^2) +
           p1q*p2q^2*((81*s12^2*s13 - 27*s12*s13^2)*s23 +
             81*s12*s13*s23^2))) +
       ((p3q^6*(9*s12^3*s13 + 18*s12^2*s13^2 + 9*s12*s13^3 +
            (11*s12^3 + 40*s12^2*s13 + 29*s12*s13^2)*s23 +
            (11*s12^2 + 20*s12*s13)*s23^2) + p2q^6*(9*s12^3*s13 +
            18*s12^2*s13^2 + 9*s12*s13^3 + (29*s12^2*s13 + 40*s12*s13^2 +
              11*s13^3)*s23 + (20*s12*s13 + 11*s13^2)*s23^2) +
          p1q^3*p2q^3*((22*s12^3 + 66*s12^2*s13 + 66*s12*s13^2 + 22*s13^3)*
             s23 + (-22*s12*s13 - 22*s13^2)*s23^2 + (-22*s12 - 44*s13)*
             s23^3) + p1q^2*p2q^4*(18*s12^3*s13 + 36*s12^2*s13^2 +
            18*s12*s13^3 + (22*s12^3 + 124*s12^2*s13 + 146*s12*s13^2 +
              44*s13^3)*s23 + (11*s12^2 + 40*s12*s13 + 11*s13^2)*s23^2 +
            (-11*s12 - 33*s13)*s23^3) + p1q^4*p2q^2*
           ((-22*s12^2 - 44*s12*s13 - 22*s13^2)*s23^2 + (-22*s12 - 22*s13)*
             s23^3) + p1q*p2q^5*(18*s12^3*s13 + 36*s12^2*s13^2 +
            18*s12*s13^3 + (11*s12^3 + 91*s12^2*s13 + 113*s12*s13^2 +
              33*s13^3)*s23 + (11*s12^2 + 51*s12*s13 + 22*s13^2)*s23^2 -
            11*s13*s23^3) + p3q^5*(p2q*(-18*s12^4 + 36*s12^3*s13 +
              9*s12^2*s13^2 + 18*s12*s13^3 - 9*s13^4 + (4*s12^3 +
                91*s12^2*s13 + 40*s12*s13^2 - 11*s13^3)*s23 +
              (24*s12^2 + 51*s12*s13)*s23^2) + p1q*(18*s12^3*s13 +
              36*s12^2*s13^2 + 18*s12*s13^3 + (33*s12^3 + 113*s12^2*s13 +
                91*s12*s13^2 + 11*s13^3)*s23 + (22*s12^2 + 51*s12*s13 +
                11*s13^2)*s23^2 - 11*s12*s23^3)) +
          p3q^3*(p2q^3*(-63*s12^4 + 90*s12^3*s13 - 126*s12^2*s13^2 +
              90*s12*s13^3 - 63*s13^4 + (-73*s12^3 - 51*s12^2*s13 -
                51*s12*s13^2 - 73*s13^3)*s23 + (2*s12^2 + 22*s12*s13 +
                2*s13^2)*s23^2) + p1q*p2q^2*(-90*s12^4 + 90*s12^3*s13 -
              90*s12^2*s13^2 + 90*s12*s13^3 - 72*s13^4 + (38*s12^3 +
                370*s12^2*s13 + 326*s12*s13^2 + 30*s13^3)*s23 +
              (129*s12^2 + 267*s12*s13 + 114*s13^2)*s23^2 - 11*s12*s23^3) +
            p1q^2*p2q*(-18*s12^4 - 36*s12^2*s13^2 - 18*s13^4 +
              (136*s12^3 + 400*s12^2*s13 + 356*s12*s13^2 + 92*s13^3)*s23 +
              (79*s12^2 + 154*s12*s13 + 79*s13^2)*s23^2 + (-77*s12 - 33*s13)*
               s23^3) + p1q^3*((22*s12^3 + 66*s12^2*s13 + 66*s12*s13^2 +
                22*s13^3)*s23 + (-22*s12^2 - 22*s12*s13)*s23^2 +
              (-44*s12 - 22*s13)*s23^3)) +
          p3q^4*(p2q^2*(-54*s12^4 + 81*s12^3*s13 - 72*s12^2*s13^2 +
              45*s12*s13^3 - 36*s13^4 + (-47*s12^3 + 40*s12^2*s13 -
                29*s12*s13^2 - 44*s13^3)*s23 + (15*s12^2 + 42*s12*s13)*s23^
                2) + p1q*p2q*(-36*s12^4 + 36*s12^3*s13 - 18*s12^2*s13^2 +
              36*s12*s13^3 - 18*s13^4 + (63*s12^3 + 271*s12^2*s13 +
                205*s12*s13^2 + 33*s13^3)*s23 + (81*s12^2 + 150*s12*s13 +
                55*s13^2)*s23^2 - 22*s12*s23^3) + p1q^2*(18*s12^3*s13 +
              36*s12^2*s13^2 + 18*s12*s13^3 + (44*s12^3 + 146*s12^2*s13 +
                124*s12*s13^2 + 22*s13^3)*s23 + (11*s12^2 + 40*s12*s13 +
                11*s13^2)*s23^2 + (-33*s12 - 11*s13)*s23^3)) +
          p3q*(p2q^5*(-9*s12^4 + 18*s12^3*s13 + 9*s12^2*s13^2 +
              36*s12*s13^3 - 18*s13^4 + (-11*s12^3 + 40*s12^2*s13 +
                91*s12*s13^2 + 4*s13^3)*s23 + (51*s12*s13 + 24*s13^2)*s23^
                2) + p1q^3*p2q^2*((66*s12^3 + 198*s12^2*s13 + 198*s12*s13^2 +
                66*s13^3)*s23 + (-22*s12^2 - 66*s12*s13 - 44*s13^2)*s23^2 +
              (-88*s12 - 110*s13)*s23^3) + p1q^2*p2q^3*(-18*s12^4 -
              36*s12^2*s13^2 - 18*s13^4 + (92*s12^3 + 356*s12^2*s13 +
                400*s12*s13^2 + 136*s13^3)*s23 + (79*s12^2 + 154*s12*s13 +
                79*s13^2)*s23^2 + (-33*s12 - 77*s13)*s23^3) +
            p1q^4*p2q*((-44*s12^2 - 88*s12*s13 - 44*s13^2)*s23^2 +
              (-44*s12 - 44*s13)*s23^3) + p1q*p2q^4*(-18*s12^4 +
              36*s12^3*s13 - 18*s12^2*s13^2 + 36*s12*s13^3 - 36*s13^4 +
              (33*s12^3 + 205*s12^2*s13 + 271*s12*s13^2 + 63*s13^3)*s23 +
              (55*s12^2 + 150*s12*s13 + 81*s13^2)*s23^2 - 22*s13*s23^3)) +
          p3q^2*(p2q^4*(-36*s12^4 + 45*s12^3*s13 - 72*s12^2*s13^2 +
              81*s12*s13^3 - 54*s13^4 + (-44*s12^3 - 29*s12^2*s13 +
                40*s12*s13^2 - 47*s13^3)*s23 + (42*s12*s13 + 15*s13^2)*s23^
                2) + p1q^3*p2q*((66*s12^3 + 198*s12^2*s13 + 198*s12*s13^2 +
                66*s13^3)*s23 + (-44*s12^2 - 66*s12*s13 - 22*s13^2)*s23^2 +
              (-110*s12 - 88*s13)*s23^3) + p1q^2*p2q^2*(-36*s12^4 +
              36*s12^3*s13 + 36*s12*s13^3 - 36*s13^4 + (162*s12^3 +
                630*s12^2*s13 + 630*s12*s13^2 + 162*s13^3)*s23 +
              (136*s12^2 + 300*s12*s13 + 136*s13^2)*s23^2 + (-66*s12 -
                66*s13)*s23^3) + p1q^4*((-22*s12^2 - 44*s12*s13 - 22*s13^2)*
               s23^2 + (-22*s12 - 22*s13)*s23^3) + p1q*p2q^3*
             (-72*s12^4 + 90*s12^3*s13 - 90*s12^2*s13^2 + 90*s12*s13^3 -
              90*s13^4 + (30*s12^3 + 326*s12^2*s13 + 370*s12*s13^2 +
                38*s13^3)*s23 + (114*s12^2 + 267*s12*s13 + 129*s13^2)*s23^2 -
              11*s13*s23^3)))*Log(s23/(s12 + s13 + s23)))/
        (p2q*p3q^5*(27*s12^2*s13 + 27*s12*s13^2)*s23 +
         p3q^3*(p2q^3*(162*s12^2*s13 + 162*s12*s13^2)*s23 -
           27*p1q^2*p2q*s12*s13*s23^2 + p1q*p2q^2*
            ((81*s12^2*s13 + 81*s12*s13^2)*s23 - 81*s12*s13*s23^2)) +
         p3q^2*(p2q^4*(108*s12^2*s13 + 108*s12*s13^2)*s23 -
           54*p1q^2*p2q^2*s12*s13*s23^2 + p1q*p2q^3*
            ((81*s12^2*s13 + 81*s12*s13^2)*s23 - 81*s12*s13*s23^2)) +
         p3q^4*(p2q^2*(108*s12^2*s13 + 108*s12*s13^2)*s23 +
           p1q*p2q*((27*s12^2*s13 + 27*s12*s13^2)*s23 - 27*s12*s13*s23^2)) +
         p3q*(p2q^5*(27*s12^2*s13 + 27*s12*s13^2)*s23 - 27*p1q^2*p2q^3*s12*
            s13*s23^2 + p1q*p2q^4*((27*s12^2*s13 + 27*s12*s13^2)*s23 -
             27*s12*s13*s23^2)))) +
     ((p3q^5*((36*s12^3 + 108*s12^2*s13 + 72*s12*s13^2)*s23 +
           (104*s12^2 + 140*s12*s13)*s23^2 + 68*s12*s23^3) +
         p2q^5*((72*s12^2*s13 + 108*s12*s13^2 + 36*s13^3)*s23 +
           (140*s12*s13 + 104*s13^2)*s23^2 + 68*s13*s23^3) +
         p1q*p2q^4*((-8*s12^2 + 20*s12*s13 + 28*s13^2)*s23^2 +
           (-12*s12 + 24*s13)*s23^3 - 4*s23^4) +
         p3q^2*(p2q^3*(-288*s12^2*s13^2 + 144*s12*s13^3 +
             (180*s12^3 + 396*s12^2*s13 + 576*s12*s13^2 + 216*s13^3)*s23 +
             (192*s12^2 + 932*s12*s13 + 296*s13^2)*s23^2 +
             (204*s12 + 272*s13)*s23^3) + p1q*p2q^2*(-288*s12^2*s13^2 +
             (-144*s12^2*s13 - 144*s12*s13^2)*s23 + (-88*s12^2 + 96*s12*s13 -
               88*s13^2)*s23^2 + (24*s12 + 24*s13)*s23^3 - 16*s23^4)) +
         p3q^3*(p2q^2*(144*s12^3*s13 - 288*s12^2*s13^2 +
             (216*s12^3 + 576*s12^2*s13 + 396*s12*s13^2 + 180*s13^3)*s23 +
             (296*s12^2 + 932*s12*s13 + 192*s13^2)*s23^2 +
             (272*s12 + 204*s13)*s23^3) + p1q*p2q*(144*s12^3*s13 +
             144*s12^2*s13*s23 + (-16*s12^2 + 140*s12*s13 - 52*s13^2)*s23^2 +
             36*s12*s23^3 - 12*s23^4)) +
         p3q*(p2q^4*(144*s12*s13^3 + (72*s12^3 + 288*s12^2*s13 + 504*s12*
                s13^2 + 144*s13^3)*s23 + (76*s12^2 + 568*s12*s13 + 284*s13^2)*
              s23^2 + (68*s12 + 204*s13)*s23^3) + p1q*p2q^3*
            (144*s12*s13^3 + 144*s12*s13^2*s23 + (-52*s12^2 + 140*s12*s13 -
               16*s13^2)*s23^2 + 36*s13*s23^3 - 12*s23^4)) +
         p3q^4*(p2q*(144*s12^3*s13 + (144*s12^3 + 504*s12^2*s13 + 288*s12*
                s13^2 + 72*s13^3)*s23 + (284*s12^2 + 568*s12*s13 + 76*s13^2)*
              s23^2 + (204*s12 + 68*s13)*s23^3) +
           p1q*((28*s12^2 + 20*s12*s13 - 8*s13^2)*s23^2 + (24*s12 - 12*s13)*
              s23^3 - 4*s23^4)))/(3*p2q*p3q^4*s12*s13*s23^2 +
         p3q^3*(3*p1q*p2q*s12*s13*s23^2 + 9*p2q^2*s12*s13*s23^2) +
         p3q^2*(6*p1q*p2q^2*s12*s13*s23^2 + 9*p2q^3*s12*s13*s23^2) +
         p3q*(3*p1q*p2q^3*s12*s13*s23^2 + 3*p2q^4*s12*s13*s23^2)) +
       ((p3q^5*((-18*s12^3 - 54*s12^2*s13 - 36*s12*s13^2)*s23 +
            (-34*s12^2 - 52*s12*s13)*s23^2 - 16*s12*s23^3) +
          p2q^5*((-36*s12^2*s13 - 54*s12*s13^2 - 18*s13^3)*s23 +
            (-52*s12*s13 - 34*s13^2)*s23^2 - 16*s13*s23^3) +
          p1q*p2q^4*((-72*s12^2*s13 - 108*s12*s13^2 - 36*s13^3)*s23 +
            (40*s12^2 - 42*s12*s13 - 46*s13^2)*s23^2 + (60*s12 + 10*s13)*
             s23^3 + 20*s23^4) + p1q^2*p2q^3*
           ((-72*s12^2*s13 - 108*s12*s13^2 - 36*s13^3)*s23 +
            (80*s12^2 + 20*s12*s13 - 24*s13^2)*s23^2 + (120*s12 + 52*s13)*
             s23^3 + 40*s23^4) + p1q^3*p2q^2*
           ((80*s12^2 + 124*s12*s13 + 44*s13^2)*s23^2 + (120*s12 + 84*s13)*
             s23^3 + 40*s23^4) + p3q^4*(p2q*(-72*s12^3*s13 + (-108*s12^3 -
                252*s12^2*s13 - 108*s12*s13^2 - 36*s13^3)*s23 +
              (-178*s12^2 - 194*s12*s13 - 56*s13^2)*s23^2 + (-68*s12 -
                18*s13)*s23^3) + p1q*((-36*s12^3 - 108*s12^2*s13 -
                72*s12*s13^2)*s23 + (-46*s12^2 - 42*s12*s13 + 40*s13^2)*s23^
                2 + (10*s12 + 60*s13)*s23^3 + 20*s23^4)) +
          p3q^3*(p2q^2*(-72*s12^3*s13 + 144*s12^2*s13^2 + (-180*s12^3 -
                252*s12^2*s13 - 126*s12*s13^2 - 126*s13^3)*s23 +
              (-292*s12^2 - 286*s12*s13 - 204*s13^2)*s23^2 +
              (-106*s12 - 72*s13)*s23^3) + p1q^2*((-36*s12^3 - 108*s12^2*
                 s13 - 72*s12*s13^2)*s23 + (-24*s12^2 + 20*s12*s13 +
                80*s13^2)*s23^2 + (52*s12 + 120*s13)*s23^3 + 40*s23^4) +
            p1q*p2q*(-72*s12^3*s13 + (-180*s12^3 - 288*s12^2*s13 -
                108*s12*s13^2 - 72*s13^3)*s23 + (-160*s12^2 + 54*s12*s13 +
                30*s13^2)*s23^2 + (102*s12 + 184*s13)*s23^3 + 80*s23^4)) +
          p3q*(p2q^4*(-72*s12*s13^3 + (-36*s12^3 - 108*s12^2*s13 -
                252*s12*s13^2 - 108*s13^3)*s23 + (-56*s12^2 - 194*s12*s13 -
                178*s13^2)*s23^2 + (-18*s12 - 68*s13)*s23^3) +
            p1q*p2q^3*(-72*s12*s13^3 + (-72*s12^3 - 108*s12^2*s13 -
                288*s12*s13^2 - 180*s13^3)*s23 + (30*s12^2 + 54*s12*s13 -
                160*s13^2)*s23^2 + (184*s12 + 102*s13)*s23^3 + 80*s23^4) +
            p1q^3*p2q*((124*s12^2 + 248*s12*s13 + 124*s13^2)*s23^2 +
              (204*s12 + 204*s13)*s23^3 + 80*s23^4) + p1q^2*p2q^2*
             ((-72*s12^3 - 72*s12^2*s13 - 108*s12*s13^2 - 108*s13^3)*s23 +
              (136*s12^2 + 348*s12*s13 + 32*s13^2)*s23^2 + (328*s12 +
                260*s13)*s23^3 + 120*s23^4)) +
          p3q^2*(p2q^3*(144*s12^2*s13^2 - 72*s12*s13^3 + (-126*s12^3 -
                126*s12^2*s13 - 252*s12*s13^2 - 180*s13^3)*s23 +
              (-204*s12^2 - 286*s12*s13 - 292*s13^2)*s23^2 +
              (-72*s12 - 106*s13)*s23^3) + p1q^3*((44*s12^2 + 124*s12*s13 +
                80*s13^2)*s23^2 + (84*s12 + 120*s13)*s23^3 + 40*s23^4) +
            p1q*p2q^2*(144*s12^2*s13^2 + (-216*s12^3 - 72*s12^2*s13 -
                72*s12*s13^2 - 216*s13^3)*s23 + (-124*s12^2 + 264*s12*s13 -
                124*s13^2)*s23^2 + (216*s12 + 216*s13)*s23^3 + 120*s23^4) +
            p1q^2*p2q*((-108*s12^3 - 108*s12^2*s13 - 72*s12*s13^2 - 72*s13^3)*
               s23 + (32*s12^2 + 348*s12*s13 + 136*s13^2)*s23^2 +
              (260*s12 + 328*s13)*s23^3 + 120*s23^4)))*
         Log(p1q/(p1q + p2q + p3q)))/(27*p2q*p3q^4*s12*s13*s23^2 +
         p3q^3*(27*p1q*p2q*s12*s13*s23^2 + 81*p2q^2*s12*s13*s23^2) +
         p3q^2*(54*p1q*p2q^2*s12*s13*s23^2 + 81*p2q^3*s12*s13*s23^2) +
         p3q*(27*p1q*p2q^3*s12*s13*s23^2 + 27*p2q^4*s12*s13*s23^2)) +
       ((p3q^5*((18*s12^3 + 54*s12^2*s13 + 36*s12*s13^2)*s23 +
            (52*s12^2 + 70*s12*s13)*s23^2 + 34*s12*s23^3) +
          p2q^5*((-2*s12*s13 - 2*s13^2)*s23^2 - 2*s13*s23^3) +
          p1q^2*p2q^3*((-8*s12^2 - 20*s12*s13 - 12*s13^2)*s23^2 +
            (-12*s12 - 16*s13)*s23^3 - 4*s23^4) + p1q^3*p2q^2*
           ((-8*s12^2 - 16*s12*s13 - 8*s13^2)*s23^2 + (-12*s12 - 12*s13)*
             s23^3 - 4*s23^4) + p1q*p2q^4*((-4*s12^2 - 12*s12*s13 - 8*s13^2)*
             s23^2 + (-6*s12 - 10*s13)*s23^3 - 2*s23^4) +
          p3q*(p2q^4*(36*s12*s13^3 + (36*s12^3 + 18*s12^2*s13 + 54*s12*s13^2)*
               s23 + (38*s12^2 + 32*s12*s13 - 2*s13^2)*s23^2 +
              (18*s12 - 4*s13)*s23^3) + p1q^2*p2q^2*
             ((72*s12^3 + 36*s12^2*s13 - 36*s12*s13^2)*s23 + (116*s12^2 -
                24*s12*s13 - 32*s13^2)*s23^2 + (32*s12 - 44*s13)*s23^3 -
              12*s23^4) + p1q*p2q^3*(36*s12*s13^3 + 72*s12^3*s23 +
              (78*s12^2 - 36*s12*s13 - 20*s13^2)*s23^2 + (14*s12 - 30*s13)*
               s23^3 - 8*s23^4) + p1q^3*p2q*((20*s12^2 + 4*s12*s13 -
                16*s13^2)*s23^2 + (12*s12 - 24*s13)*s23^3 - 8*s23^4)) +
          p3q^2*(p2q^3*(-72*s12^2*s13^2 + 36*s12*s13^3 + (126*s12^3 +
                54*s12^2*s13 + 72*s12*s13^2)*s23 + (150*s12^2 + 106*s12*s13 +
                4*s13^2)*s23^2 + (72*s12 - 2*s13)*s23^3) +
            p1q^2*p2q*((108*s12^3 + 144*s12^2*s13 + 36*s12*s13^2)*s23 +
              (256*s12^2 + 156*s12*s13 - 28*s13^2)*s23^2 + (136*s12 - 40*s13)*
               s23^3 - 12*s23^4) + p1q*p2q^2*(-72*s12^2*s13^2 +
              (216*s12^3 + 108*s12^2*s13 - 36*s12*s13^2)*s23 +
              (304*s12^2 + 60*s12*s13 - 20*s13^2)*s23^2 + (108*s12 - 36*s13)*
               s23^3 - 12*s23^4) + p1q^3*((28*s12^2 + 20*s12*s13 - 8*s13^2)*
               s23^2 + (24*s12 - 12*s13)*s23^3 - 4*s23^4)) +
          p3q^3*(p2q^2*(36*s12^3*s13 - 72*s12^2*s13^2 + (180*s12^3 +
                180*s12^2*s13 + 72*s12*s13^2)*s23 + (256*s12^2 +
                196*s12*s13 + 6*s13^2)*s23^2 + 124*s12*s23^3) +
            p1q*p2q*(36*s12^3*s13 + (180*s12^3 + 288*s12^2*s13 +
                108*s12*s13^2)*s23 + (340*s12^2 + 270*s12*s13 - 12*s13^2)*s23^
                2 + (168*s12 - 22*s13)*s23^3 - 8*s23^4) +
            p1q^2*((36*s12^3 + 108*s12^2*s13 + 72*s12*s13^2)*s23 +
              (132*s12^2 + 160*s12*s13 - 8*s13^2)*s23^2 + (92*s12 - 12*s13)*
               s23^3 - 4*s23^4)) + p3q^4*(p2q*(36*s12^3*s13 +
              (108*s12^3 + 198*s12^2*s13 + 90*s12*s13^2)*s23 +
              (196*s12^2 + 194*s12*s13 + 2*s13^2)*s23^2 + 104*s12*s23^3) +
            p1q*((36*s12^3 + 108*s12^2*s13 + 72*s12*s13^2)*s23 +
              (118*s12^2 + 150*s12*s13 - 4*s13^2)*s23^2 + (80*s12 - 6*s13)*
               s23^3 - 2*s23^4)))*Log(p2q/(p1q + p2q + p3q)))/
        (3*p2q*p3q^4*s12*s13*s23^2 + p3q^3*(3*p1q*p2q*s12*s13*s23^2 +
           9*p2q^2*s12*s13*s23^2) + p3q^2*(6*p1q*p2q^2*s12*s13*s23^2 +
           9*p2q^3*s12*s13*s23^2) + p3q*(3*p1q*p2q^3*s12*s13*s23^2 +
           3*p2q^4*s12*s13*s23^2)) +
       ((p3q^5*((-2*s12^2 - 2*s12*s13)*s23^2 - 2*s12*s23^3) +
          p2q^5*((36*s12^2*s13 + 54*s12*s13^2 + 18*s13^3)*s23 +
            (70*s12*s13 + 52*s13^2)*s23^2 + 34*s13*s23^3) +
          p1q^3*p2q^2*((-8*s12^2 + 20*s12*s13 + 28*s13^2)*s23^2 +
            (-12*s12 + 24*s13)*s23^3 - 4*s23^4) + p1q^2*p2q^3*
           ((72*s12^2*s13 + 108*s12*s13^2 + 36*s13^3)*s23 +
            (-8*s12^2 + 160*s12*s13 + 132*s13^2)*s23^2 + (-12*s12 + 92*s13)*
             s23^3 - 4*s23^4) + p1q*p2q^4*((72*s12^2*s13 + 108*s12*s13^2 +
              36*s13^3)*s23 + (-4*s12^2 + 150*s12*s13 + 118*s13^2)*s23^2 +
            (-6*s12 + 80*s13)*s23^3 - 2*s23^4) +
          p3q*(p2q^4*(36*s12*s13^3 + (90*s12^2*s13 + 198*s12*s13^2 +
                108*s13^3)*s23 + (2*s12^2 + 194*s12*s13 + 196*s13^2)*s23^2 +
              104*s13*s23^3) + p1q^2*p2q^2*((36*s12^2*s13 + 144*s12*s13^2 +
                108*s13^3)*s23 + (-28*s12^2 + 156*s12*s13 + 256*s13^2)*s23^
                2 + (-40*s12 + 136*s13)*s23^3 - 12*s23^4) +
            p1q^3*p2q*((-16*s12^2 + 4*s12*s13 + 20*s13^2)*s23^2 +
              (-24*s12 + 12*s13)*s23^3 - 8*s23^4) + p1q*p2q^3*
             (36*s12*s13^3 + (108*s12^2*s13 + 288*s12*s13^2 + 180*s13^3)*
               s23 + (-12*s12^2 + 270*s12*s13 + 340*s13^2)*s23^2 +
              (-22*s12 + 168*s13)*s23^3 - 8*s23^4)) +
          p3q^3*(p2q^2*(36*s12^3*s13 - 72*s12^2*s13^2 + (72*s12^2*s13 +
                54*s12*s13^2 + 126*s13^3)*s23 + (4*s12^2 + 106*s12*s13 +
                150*s13^2)*s23^2 + (-2*s12 + 72*s13)*s23^3) +
            p1q*p2q*(36*s12^3*s13 + 72*s13^3*s23 + (-20*s12^2 - 36*s12*s13 +
                78*s13^2)*s23^2 + (-30*s12 + 14*s13)*s23^3 - 8*s23^4) +
            p1q^2*((-12*s12^2 - 20*s12*s13 - 8*s13^2)*s23^2 +
              (-16*s12 - 12*s13)*s23^3 - 4*s23^4)) +
          p3q^2*(p2q^3*(-72*s12^2*s13^2 + 36*s12*s13^3 + (72*s12^2*s13 +
                180*s12*s13^2 + 180*s13^3)*s23 + (6*s12^2 + 196*s12*s13 +
                256*s13^2)*s23^2 + 124*s13*s23^3) + p1q^2*p2q*
             ((-36*s12^2*s13 + 36*s12*s13^2 + 72*s13^3)*s23 +
              (-32*s12^2 - 24*s12*s13 + 116*s13^2)*s23^2 + (-44*s12 + 32*s13)*
               s23^3 - 12*s23^4) + p1q*p2q^2*(-72*s12^2*s13^2 +
              (-36*s12^2*s13 + 108*s12*s13^2 + 216*s13^3)*s23 +
              (-20*s12^2 + 60*s12*s13 + 304*s13^2)*s23^2 + (-36*s12 +
                108*s13)*s23^3 - 12*s23^4) + p1q^3*((-8*s12^2 - 16*s12*s13 -
                8*s13^2)*s23^2 + (-12*s12 - 12*s13)*s23^3 - 4*s23^4)) +
          p3q^4*(p2q*(36*s12^3*s13 + (54*s12^2*s13 + 18*s12*s13^2 + 36*s13^3)*
               s23 + (-2*s12^2 + 32*s12*s13 + 38*s13^2)*s23^2 +
              (-4*s12 + 18*s13)*s23^3) + p1q*((-8*s12^2 - 12*s12*s13 -
                4*s13^2)*s23^2 + (-10*s12 - 6*s13)*s23^3 - 2*s23^4)))*
         Log(p3q/(p1q + p2q + p3q)))/(3*p2q*p3q^4*s12*s13*s23^2 +
         p3q^3*(3*p1q*p2q*s12*s13*s23^2 + 9*p2q^2*s12*s13*s23^2) +
         p3q^2*(6*p1q*p2q^2*s12*s13*s23^2 + 9*p2q^3*s12*s13*s23^2) +
         p3q*(3*p1q*p2q^3*s12*s13*s23^2 + 3*p2q^4*s12*s13*s23^2)) +
       ((p3q^5*((36*s12^3 + 108*s12^2*s13 + 72*s12*s13^2)*s23 +
            (104*s12^2 + 140*s12*s13)*s23^2 + 68*s12*s23^3) +
          p2q^5*((72*s12^2*s13 + 108*s12*s13^2 + 36*s13^3)*s23 +
            (140*s12*s13 + 104*s13^2)*s23^2 + 68*s13*s23^3) +
          p1q^3*p2q^2*((-16*s12^2 + 40*s12*s13 + 56*s13^2)*s23^2 +
            (-24*s12 + 48*s13)*s23^3 - 8*s23^4) + p1q^2*p2q^3*
           ((144*s12^2*s13 + 216*s12*s13^2 + 72*s13^3)*s23 +
            (-16*s12^2 + 320*s12*s13 + 264*s13^2)*s23^2 + (-24*s12 + 184*s13)*
             s23^3 - 8*s23^4) + p1q*p2q^4*((144*s12^2*s13 + 216*s12*s13^2 +
              72*s13^3)*s23 + (-8*s12^2 + 300*s12*s13 + 236*s13^2)*s23^2 +
            (-12*s12 + 160*s13)*s23^3 - 4*s23^4) +
          p3q*(p2q^4*(144*s12*s13^3 + (72*s12^3 + 216*s12^2*s13 +
                504*s12*s13^2 + 216*s13^3)*s23 + (76*s12^2 + 460*s12*s13 +
                392*s13^2)*s23^2 + (36*s12 + 208*s13)*s23^3) +
            p1q^2*p2q^2*((144*s12^3 + 144*s12^2*s13 + 216*s12*s13^2 +
                216*s13^3)*s23 + (232*s12^2 + 384*s12*s13 + 512*s13^2)*s23^
                2 + (64*s12 + 272*s13)*s23^3 - 24*s23^4) +
            p1q^3*p2q*((40*s12^2 + 80*s12*s13 + 40*s13^2)*s23^2 +
              (24*s12 + 24*s13)*s23^3 - 16*s23^4) + p1q*p2q^3*
             (144*s12*s13^3 + (144*s12^3 + 216*s12^2*s13 + 576*s12*s13^2 +
                360*s13^3)*s23 + (156*s12^2 + 540*s12*s13 + 680*s13^2)*s23^
                2 + (28*s12 + 336*s13)*s23^3 - 16*s23^4)) +
          p3q^2*(p2q^3*(-288*s12^2*s13^2 + 144*s12*s13^3 + (252*s12^3 +
                252*s12^2*s13 + 504*s12*s13^2 + 360*s13^3)*s23 +
              (300*s12^2 + 608*s12*s13 + 512*s13^2)*s23^2 + (144*s12 +
                248*s13)*s23^3) + p1q^2*p2q*((216*s12^3 + 216*s12^2*s13 +
                144*s12*s13^2 + 144*s13^3)*s23 + (512*s12^2 + 384*s12*s13 +
                232*s13^2)*s23^2 + (272*s12 + 64*s13)*s23^3 - 24*s23^4) +
            p1q*p2q^2*(-288*s12^2*s13^2 + (432*s12^3 + 144*s12^2*s13 +
                144*s12*s13^2 + 432*s13^3)*s23 + (608*s12^2 + 336*s12*s13 +
                608*s13^2)*s23^2 + (216*s12 + 216*s13)*s23^3 - 24*s23^4) +
            p1q^3*((56*s12^2 + 40*s12*s13 - 16*s13^2)*s23^2 +
              (48*s12 - 24*s13)*s23^3 - 8*s23^4)) +
          p3q^3*(p2q^2*(144*s12^3*s13 - 288*s12^2*s13^2 + (360*s12^3 +
                504*s12^2*s13 + 252*s12*s13^2 + 252*s13^3)*s23 +
              (512*s12^2 + 608*s12*s13 + 300*s13^2)*s23^2 + (248*s12 +
                144*s13)*s23^3) + p1q*p2q*(144*s12^3*s13 + (360*s12^3 +
                576*s12^2*s13 + 216*s12*s13^2 + 144*s13^3)*s23 +
              (680*s12^2 + 540*s12*s13 + 156*s13^2)*s23^2 + (336*s12 +
                28*s13)*s23^3 - 16*s23^4) + p1q^2*
             ((72*s12^3 + 216*s12^2*s13 + 144*s12*s13^2)*s23 +
              (264*s12^2 + 320*s12*s13 - 16*s13^2)*s23^2 + (184*s12 - 24*s13)*
               s23^3 - 8*s23^4)) + p3q^4*(p2q*(144*s12^3*s13 +
              (216*s12^3 + 504*s12^2*s13 + 216*s12*s13^2 + 72*s13^3)*s23 +
              (392*s12^2 + 460*s12*s13 + 76*s13^2)*s23^2 + (208*s12 + 36*s13)*
               s23^3) + p1q*((72*s12^3 + 216*s12^2*s13 + 144*s12*s13^2)*s23 +
              (236*s12^2 + 300*s12*s13 - 8*s13^2)*s23^2 + (160*s12 - 12*s13)*
               s23^3 - 4*s23^4)))*Log(-s12 - s13 - s23))/
        (3*p2q*p3q^4*s12*s13*s23^2 + p3q^3*(3*p1q*p2q*s12*s13*s23^2 +
           9*p2q^2*s12*s13*s23^2) + p3q^2*(6*p1q*p2q^2*s12*s13*s23^2 +
           9*p2q^3*s12*s13*s23^2) + p3q*(3*p1q*p2q^3*s12*s13*s23^2 +
           3*p2q^4*s12*s13*s23^2)) +
       ((p3q^5*((-2*s12^2 - 2*s12*s13)*s23^2 - 2*s12*s23^3) +
          p2q^5*((36*s12^2*s13 + 54*s12*s13^2 + 18*s13^3)*s23 +
            (70*s12*s13 + 52*s13^2)*s23^2 + 34*s13*s23^3) +
          p1q^3*p2q^2*((-8*s12^2 + 20*s12*s13 + 28*s13^2)*s23^2 +
            (-12*s12 + 24*s13)*s23^3 - 4*s23^4) + p1q^2*p2q^3*
           ((72*s12^2*s13 + 108*s12*s13^2 + 36*s13^3)*s23 +
            (-8*s12^2 + 160*s12*s13 + 132*s13^2)*s23^2 + (-12*s12 + 92*s13)*
             s23^3 - 4*s23^4) + p1q*p2q^4*((72*s12^2*s13 + 108*s12*s13^2 +
              36*s13^3)*s23 + (-4*s12^2 + 150*s12*s13 + 118*s13^2)*s23^2 +
            (-6*s12 + 80*s13)*s23^3 - 2*s23^4) +
          p3q*(p2q^4*(36*s12*s13^3 + (90*s12^2*s13 + 198*s12*s13^2 +
                108*s13^3)*s23 + (2*s12^2 + 194*s12*s13 + 196*s13^2)*s23^2 +
              104*s13*s23^3) + p1q^2*p2q^2*((36*s12^2*s13 + 144*s12*s13^2 +
                108*s13^3)*s23 + (-28*s12^2 + 156*s12*s13 + 256*s13^2)*s23^
                2 + (-40*s12 + 136*s13)*s23^3 - 12*s23^4) +
            p1q^3*p2q*((-16*s12^2 + 4*s12*s13 + 20*s13^2)*s23^2 +
              (-24*s12 + 12*s13)*s23^3 - 8*s23^4) + p1q*p2q^3*
             (36*s12*s13^3 + (108*s12^2*s13 + 288*s12*s13^2 + 180*s13^3)*
               s23 + (-12*s12^2 + 270*s12*s13 + 340*s13^2)*s23^2 +
              (-22*s12 + 168*s13)*s23^3 - 8*s23^4)) +
          p3q^3*(p2q^2*(36*s12^3*s13 - 72*s12^2*s13^2 + (72*s12^2*s13 +
                54*s12*s13^2 + 126*s13^3)*s23 + (4*s12^2 + 106*s12*s13 +
                150*s13^2)*s23^2 + (-2*s12 + 72*s13)*s23^3) +
            p1q*p2q*(36*s12^3*s13 + 72*s13^3*s23 + (-20*s12^2 - 36*s12*s13 +
                78*s13^2)*s23^2 + (-30*s12 + 14*s13)*s23^3 - 8*s23^4) +
            p1q^2*((-12*s12^2 - 20*s12*s13 - 8*s13^2)*s23^2 +
              (-16*s12 - 12*s13)*s23^3 - 4*s23^4)) +
          p3q^2*(p2q^3*(-72*s12^2*s13^2 + 36*s12*s13^3 + (72*s12^2*s13 +
                180*s12*s13^2 + 180*s13^3)*s23 + (6*s12^2 + 196*s12*s13 +
                256*s13^2)*s23^2 + 124*s13*s23^3) + p1q^2*p2q*
             ((-36*s12^2*s13 + 36*s12*s13^2 + 72*s13^3)*s23 +
              (-32*s12^2 - 24*s12*s13 + 116*s13^2)*s23^2 + (-44*s12 + 32*s13)*
               s23^3 - 12*s23^4) + p1q*p2q^2*(-72*s12^2*s13^2 +
              (-36*s12^2*s13 + 108*s12*s13^2 + 216*s13^3)*s23 +
              (-20*s12^2 + 60*s12*s13 + 304*s13^2)*s23^2 + (-36*s12 +
                108*s13)*s23^3 - 12*s23^4) + p1q^3*((-8*s12^2 - 16*s12*s13 -
                8*s13^2)*s23^2 + (-12*s12 - 12*s13)*s23^3 - 4*s23^4)) +
          p3q^4*(p2q*(36*s12^3*s13 + (54*s12^2*s13 + 18*s12*s13^2 + 36*s13^3)*
               s23 + (-2*s12^2 + 32*s12*s13 + 38*s13^2)*s23^2 +
              (-4*s12 + 18*s13)*s23^3) + p1q*((-8*s12^2 - 12*s12*s13 -
                4*s13^2)*s23^2 + (-10*s12 - 6*s13)*s23^3 - 2*s23^4)))*
         Log(s12/(s12 + s13 + s23)))/(3*p2q*p3q^4*s12*s13*s23^2 +
         p3q^3*(3*p1q*p2q*s12*s13*s23^2 + 9*p2q^2*s12*s13*s23^2) +
         p3q^2*(6*p1q*p2q^2*s12*s13*s23^2 + 9*p2q^3*s12*s13*s23^2) +
         p3q*(3*p1q*p2q^3*s12*s13*s23^2 + 3*p2q^4*s12*s13*s23^2)) +
       ((p3q^5*((18*s12^3 + 54*s12^2*s13 + 36*s12*s13^2)*s23 +
            (52*s12^2 + 70*s12*s13)*s23^2 + 34*s12*s23^3) +
          p2q^5*((-2*s12*s13 - 2*s13^2)*s23^2 - 2*s13*s23^3) +
          p1q^2*p2q^3*((-8*s12^2 - 20*s12*s13 - 12*s13^2)*s23^2 +
            (-12*s12 - 16*s13)*s23^3 - 4*s23^4) + p1q^3*p2q^2*
           ((-8*s12^2 - 16*s12*s13 - 8*s13^2)*s23^2 + (-12*s12 - 12*s13)*
             s23^3 - 4*s23^4) + p1q*p2q^4*((-4*s12^2 - 12*s12*s13 - 8*s13^2)*
             s23^2 + (-6*s12 - 10*s13)*s23^3 - 2*s23^4) +
          p3q*(p2q^4*(36*s12*s13^3 + (36*s12^3 + 18*s12^2*s13 + 54*s12*s13^2)*
               s23 + (38*s12^2 + 32*s12*s13 - 2*s13^2)*s23^2 +
              (18*s12 - 4*s13)*s23^3) + p1q^2*p2q^2*
             ((72*s12^3 + 36*s12^2*s13 - 36*s12*s13^2)*s23 + (116*s12^2 -
                24*s12*s13 - 32*s13^2)*s23^2 + (32*s12 - 44*s13)*s23^3 -
              12*s23^4) + p1q*p2q^3*(36*s12*s13^3 + 72*s12^3*s23 +
              (78*s12^2 - 36*s12*s13 - 20*s13^2)*s23^2 + (14*s12 - 30*s13)*
               s23^3 - 8*s23^4) + p1q^3*p2q*((20*s12^2 + 4*s12*s13 -
                16*s13^2)*s23^2 + (12*s12 - 24*s13)*s23^3 - 8*s23^4)) +
          p3q^2*(p2q^3*(-72*s12^2*s13^2 + 36*s12*s13^3 + (126*s12^3 +
                54*s12^2*s13 + 72*s12*s13^2)*s23 + (150*s12^2 + 106*s12*s13 +
                4*s13^2)*s23^2 + (72*s12 - 2*s13)*s23^3) +
            p1q^2*p2q*((108*s12^3 + 144*s12^2*s13 + 36*s12*s13^2)*s23 +
              (256*s12^2 + 156*s12*s13 - 28*s13^2)*s23^2 + (136*s12 - 40*s13)*
               s23^3 - 12*s23^4) + p1q*p2q^2*(-72*s12^2*s13^2 +
              (216*s12^3 + 108*s12^2*s13 - 36*s12*s13^2)*s23 +
              (304*s12^2 + 60*s12*s13 - 20*s13^2)*s23^2 + (108*s12 - 36*s13)*
               s23^3 - 12*s23^4) + p1q^3*((28*s12^2 + 20*s12*s13 - 8*s13^2)*
               s23^2 + (24*s12 - 12*s13)*s23^3 - 4*s23^4)) +
          p3q^3*(p2q^2*(36*s12^3*s13 - 72*s12^2*s13^2 + (180*s12^3 +
                180*s12^2*s13 + 72*s12*s13^2)*s23 + (256*s12^2 +
                196*s12*s13 + 6*s13^2)*s23^2 + 124*s12*s23^3) +
            p1q*p2q*(36*s12^3*s13 + (180*s12^3 + 288*s12^2*s13 +
                108*s12*s13^2)*s23 + (340*s12^2 + 270*s12*s13 - 12*s13^2)*s23^
                2 + (168*s12 - 22*s13)*s23^3 - 8*s23^4) +
            p1q^2*((36*s12^3 + 108*s12^2*s13 + 72*s12*s13^2)*s23 +
              (132*s12^2 + 160*s12*s13 - 8*s13^2)*s23^2 + (92*s12 - 12*s13)*
               s23^3 - 4*s23^4)) + p3q^4*(p2q*(36*s12^3*s13 +
              (108*s12^3 + 198*s12^2*s13 + 90*s12*s13^2)*s23 +
              (196*s12^2 + 194*s12*s13 + 2*s13^2)*s23^2 + 104*s12*s23^3) +
            p1q*((36*s12^3 + 108*s12^2*s13 + 72*s12*s13^2)*s23 +
              (118*s12^2 + 150*s12*s13 - 4*s13^2)*s23^2 + (80*s12 - 6*s13)*
               s23^3 - 2*s23^4)))*Log(s13/(s12 + s13 + s23)))/
        (3*p2q*p3q^4*s12*s13*s23^2 + p3q^3*(3*p1q*p2q*s12*s13*s23^2 +
           9*p2q^2*s12*s13*s23^2) + p3q^2*(6*p1q*p2q^2*s12*s13*s23^2 +
           9*p2q^3*s12*s13*s23^2) + p3q*(3*p1q*p2q^3*s12*s13*s23^2 +
           3*p2q^4*s12*s13*s23^2)) +
       ((p3q^5*((6*s12^3 + 18*s12^2*s13 + 12*s12*s13^2)*s23 +
            (18*s12^2 + 24*s12*s13)*s23^2 + 12*s12*s23^3) +
          p1q^3*p2q^2*((12*s12*s13 + 12*s13^2)*s23^2 + 12*s13*s23^3) +
          p2q^5*((12*s12^2*s13 + 18*s12*s13^2 + 6*s13^3)*s23 +
            (24*s12*s13 + 18*s13^2)*s23^2 + 12*s13*s23^3) +
          p1q*p2q^4*((24*s12^2*s13 + 36*s12*s13^2 + 12*s13^3)*s23 +
            (54*s12*s13 + 42*s13^2)*s23^2 + 30*s13*s23^3) +
          p1q^2*p2q^3*((24*s12^2*s13 + 36*s12*s13^2 + 12*s13^3)*s23 +
            (60*s12*s13 + 48*s13^2)*s23^2 + 36*s13*s23^3) +
          p3q^4*(p1q*((12*s12^3 + 36*s12^2*s13 + 24*s12*s13^2)*s23 +
              (42*s12^2 + 54*s12*s13)*s23^2 + 30*s12*s23^3) +
            p2q*(24*s12^3*s13 + (36*s12^3 + 84*s12^2*s13 + 36*s12*s13^2 +
                12*s13^3)*s23 + (66*s12^2 + 78*s12*s13 + 12*s13^2)*s23^2 +
              (36*s12 + 6*s13)*s23^3)) +
          p3q^3*(p1q^2*((12*s12^3 + 36*s12^2*s13 + 24*s12*s13^2)*s23 +
              (48*s12^2 + 60*s12*s13)*s23^2 + 36*s12*s23^3) +
            p1q*p2q*(24*s12^3*s13 + (60*s12^3 + 96*s12^2*s13 + 36*s12*s13^2 +
                24*s13^3)*s23 + (120*s12^2 + 102*s12*s13 + 30*s13^2)*s23^2 +
              (66*s12 + 12*s13)*s23^3) + p2q^2*(24*s12^3*s13 -
              48*s12^2*s13^2 + (60*s12^3 + 84*s12^2*s13 + 42*s12*s13^2 +
                42*s13^3)*s23 + (84*s12^2 + 102*s12*s13 + 48*s13^2)*s23^2 +
              (42*s12 + 24*s13)*s23^3)) +
          p3q^2*(p1q^3*((12*s12^2 + 12*s12*s13)*s23^2 + 12*s12*s23^3) +
            p1q^2*p2q*((36*s12^3 + 36*s12^2*s13 + 24*s12*s13^2 + 24*s13^3)*
               s23 + (96*s12^2 + 84*s12*s13 + 48*s13^2)*s23^2 +
              (60*s12 + 24*s13)*s23^3) + p2q^3*(-48*s12^2*s13^2 +
              24*s12*s13^3 + (42*s12^3 + 42*s12^2*s13 + 84*s12*s13^2 +
                60*s13^3)*s23 + (48*s12^2 + 102*s12*s13 + 84*s13^2)*s23^2 +
              (24*s12 + 42*s13)*s23^3) + p1q*p2q^2*(-48*s12^2*s13^2 +
              (72*s12^3 + 24*s12^2*s13 + 24*s12*s13^2 + 72*s13^3)*s23 +
              (108*s12^2 + 72*s12*s13 + 108*s13^2)*s23^2 + (48*s12 + 48*s13)*
               s23^3)) + p3q*(p1q^3*p2q*((12*s12^2 + 24*s12*s13 + 12*s13^2)*
               s23^2 + (12*s12 + 12*s13)*s23^3) + p2q^4*(24*s12*s13^3 +
              (12*s12^3 + 36*s12^2*s13 + 84*s12*s13^2 + 36*s13^3)*s23 +
              (12*s12^2 + 78*s12*s13 + 66*s13^2)*s23^2 + (6*s12 + 36*s13)*s23^
                3) + p1q^2*p2q^2*((24*s12^3 + 24*s12^2*s13 + 36*s12*s13^2 +
                36*s13^3)*s23 + (48*s12^2 + 84*s12*s13 + 96*s13^2)*s23^2 +
              (24*s12 + 60*s13)*s23^3) + p1q*p2q^3*(24*s12*s13^3 +
              (24*s12^3 + 36*s12^2*s13 + 96*s12*s13^2 + 60*s13^3)*s23 +
              (30*s12^2 + 102*s12*s13 + 120*s13^2)*s23^2 + (12*s12 + 66*s13)*
               s23^3)))*Log(s23/(s12 + s13 + s23)))/
        (p2q*p3q^4*s12*s13*s23^2 + p3q^3*(p1q*p2q*s12*s13*s23^2 +
           3*p2q^2*s12*s13*s23^2) + p3q^2*(2*p1q*p2q^2*s12*s13*s23^2 +
           3*p2q^3*s12*s13*s23^2) + p3q*(p1q*p2q^3*s12*s13*s23^2 +
           p2q^4*s12*s13*s23^2)))/ep + Log((p1q + p2q)/(p1q + p2q + p3q))*
      (((p3q^5*(-9*s12^3*s13 - 9*s12^2*s13^2 + (-s12^3 - 10*s12^2*s13)*s23 -
            s12^2*s23^2) + p1q^2*p2q^3*(-36*s12^2*s13^2 - 36*s12*s13^3 +
            (-89*s12^2*s13 - 237*s12*s13^2 - 112*s13^3)*s23 +
            (3*s12^2 - 198*s12*s13 - 224*s13^2)*s23^2 + (3*s12 - 112*s13)*
             s23^3) + p1q^3*p2q^2*(-18*s12^2*s13^2 - 18*s12*s13^3 +
            (-62*s12^2*s13 - 176*s12*s13^2 - 96*s13^3)*s23 +
            (4*s12^2 - 154*s12*s13 - 192*s13^2)*s23^2 + (4*s12 - 96*s13)*
             s23^3) + p1q*p2q^4*(-27*s12^2*s13^2 - 27*s12*s13^3 +
            (-58*s12^2*s13 - 149*s12*s13^2 - 64*s13^3)*s23 +
            (s12^2 - 121*s12*s13 - 128*s13^2)*s23^2 + (s12 - 64*s13)*s23^3) +
          p1q^4*p2q*((-14*s12^2*s13 - 46*s12*s13^2 - 32*s13^3)*s23 +
            (2*s12^2 - 44*s12*s13 - 64*s13^2)*s23^2 + (2*s12 - 32*s13)*
             s23^3) + p2q^5*(-9*s12^2*s13^2 - 9*s12*s13^3 +
            (-17*s12^2*s13 - 42*s12*s13^2 - 16*s13^3)*s23 +
            (-33*s12*s13 - 32*s13^2)*s23^2 - 16*s13*s23^3) +
          p3q^4*(p2q*(-18*s12^3*s13 + 18*s12*s13^3 + (-2*s12^3 -
                18*s12^2*s13 + 20*s12*s13^2)*s23 + (-2*s12^2 + 2*s12*s13)*s23^
                2) + p1q*(-18*s12^3*s13 - 9*s12^2*s13^2 + 9*s12*s13^3 +
              (-3*s12^3 - 3*s12^2*s13 + 27*s12*s13^2)*s23 + (-2*s12^2 +
                19*s12*s13)*s23^2 + s12*s23^3)) +
          p3q*(p1q^2*p2q^2*(36*s12^3*s13 + 18*s12^2*s13^2 - 72*s12*s13^3 -
              54*s13^4 + (-4*s12^3 + 64*s12^2*s13 - 130*s12*s13^2 -
                198*s13^3)*s23 + (3*s12^2 - 59*s12*s13 - 242*s13^2)*s23^2 +
              (7*s12 - 98*s13)*s23^3) + p1q^3*p2q*(18*s12^3*s13 +
              18*s12^2*s13^2 - 18*s12*s13^3 - 18*s13^4 + (-2*s12^3 +
                48*s12^2*s13 - 60*s12*s13^2 - 110*s13^3)*s23 +
              (6*s12^2 - 34*s12*s13 - 166*s13^2)*s23^2 + (8*s12 - 74*s13)*s23^
                3) + p1q*p2q^3*(27*s12^3*s13 + 9*s12^2*s13^2 - 72*s12*s13^3 -
              54*s13^4 + (-3*s12^3 + 38*s12^2*s13 - 96*s12*s13^2 - 146*s13^3)*
               s23 + (-s12^2 - 38*s12*s13 - 146*s13^2)*s23^2 +
              (2*s12 - 54*s13)*s23^3) + p1q^4*((4*s12^2*s13 - 10*s12*s13^2 -
                14*s13^3)*s23 + (2*s12^2 - 8*s12*s13 - 28*s13^2)*s23^2 +
              (2*s12 - 14*s13)*s23^3) + p2q^4*(9*s12^3*s13 - 27*s12*s13^3 -
              18*s13^4 + (-s12^3 + 8*s12^2*s13 - 35*s12*s13^2 - 44*s13^3)*
               s23 + (-s12^2 - 16*s12*s13 - 42*s13^2)*s23^2 -
              16*s13*s23^3)) + p3q^3*(p2q^2*(-18*s12^3*s13 + 18*s12^2*s13^2 +
              27*s12*s13^3 - 9*s13^4 + (-2*s12^3 - 16*s12^2*s13 +
                39*s12*s13^2 - 10*s13^3)*s23 + (-2*s12^2 + 4*s12*s13 - s13^2)*
               s23^2) + p1q^2*(-18*s12^3*s13 + 18*s12*s13^3 +
              (-4*s12^3 + 16*s12^2*s13 + 49*s12*s13^2 - 7*s13^3)*s23 +
              (-s12^2 + 34*s12*s13 - 14*s13^2)*s23^2 + (3*s12 - 7*s13)*s23^
                3) + p1q*p2q*(-36*s12^3*s13 + 18*s12^2*s13^2 + 45*s12*s13^3 -
              9*s13^4 + (-7*s12^3 + 6*s12^2*s13 + 103*s12*s13^2 - 9*s13^3)*
               s23 + (-5*s12^2 + 52*s12*s13 + s13^2)*s23^2 +
              (2*s12 + s13)*s23^3)) + p3q^2*
           (p2q^3*(9*s12^3*s13 + 45*s12^2*s13^2 + 18*s12*s13^3 - 18*s13^4 +
              (-2*s12^3 + 35*s12^2*s13 + 62*s12*s13^2 - 20*s13^3)*s23 +
              (-2*s12^2 + 28*s12*s13 - 2*s13^2)*s23^2) +
            p1q^2*p2q*(18*s12^3*s13 + 90*s12^2*s13^2 + 54*s12*s13^3 -
              18*s13^4 + (-8*s12^3 + 142*s12^2*s13 + 174*s12*s13^2 -
                48*s13^3)*s23 + (-s12^2 + 119*s12*s13 - 50*s13^2)*s23^2 +
              (7*s12 - 20*s13)*s23^3) + p1q^3*(18*s12^2*s13^2 +
              18*s12*s13^3 + (-2*s12^3 + 38*s12^2*s13 + 44*s12*s13^2 -
                14*s13^3)*s23 + (2*s12^2 + 30*s12*s13 - 28*s13^2)*s23^2 +
              (4*s12 - 14*s13)*s23^3) + p1q*p2q^2*(18*s12^3*s13 +
              108*s12^2*s13^2 + 54*s12*s13^3 - 36*s13^4 + (-7*s12^3 +
                114*s12^2*s13 + 183*s12*s13^2 - 46*s13^3)*s23 +
              (-5*s12^2 + 107*s12*s13 - 8*s13^2)*s23^2 + (2*s12 + 2*s13)*s23^
                3)))*Log(p3q/(p1q + p2q + p3q)))/(3*p2q*p3q^4*s12^2*s13*s23 +
         p3q^2*(p1q*p2q^2*((3*s12^2*s13 - 9*s12*s13^2)*s23 -
             9*s12*s13*s23^2) + p2q^3*((3*s12^2*s13 - 6*s12*s13^2)*s23 -
             6*s12*s13*s23^2) + p1q^2*p2q*(-3*s12*s13^2*s23 -
             3*s12*s13*s23^2)) + p3q*(p1q*p2q^3*(-6*s12*s13^2*s23 -
             6*s12*s13*s23^2) + p1q^2*p2q^2*(-3*s12*s13^2*s23 -
             3*s12*s13*s23^2) + p2q^4*(-3*s12*s13^2*s23 - 3*s12*s13*s23^2)) +
         p3q^3*(p1q*p2q*((3*s12^2*s13 - 3*s12*s13^2)*s23 - 3*s12*s13*s23^2) +
           p2q^2*((6*s12^2*s13 - 3*s12*s13^2)*s23 - 3*s12*s13*s23^2))) +
       ((p3q^5*(9*s12^3*s13 + 9*s12^2*s13^2 + (s12^3 + 10*s12^2*s13)*s23 +
            s12^2*s23^2) + p2q^5*(9*s12^2*s13^2 + 9*s12*s13^3 +
            (17*s12^2*s13 + 42*s12*s13^2 + 16*s13^3)*s23 +
            (33*s12*s13 + 32*s13^2)*s23^2 + 16*s13*s23^3) +
          p1q^4*p2q*((14*s12^2*s13 + 46*s12*s13^2 + 32*s13^3)*s23 +
            (-2*s12^2 + 44*s12*s13 + 64*s13^2)*s23^2 + (-2*s12 + 32*s13)*
             s23^3) + p1q*p2q^4*(27*s12^2*s13^2 + 27*s12*s13^3 +
            (58*s12^2*s13 + 149*s12*s13^2 + 64*s13^3)*s23 +
            (-s12^2 + 121*s12*s13 + 128*s13^2)*s23^2 + (-s12 + 64*s13)*
             s23^3) + p1q^3*p2q^2*(18*s12^2*s13^2 + 18*s12*s13^3 +
            (62*s12^2*s13 + 176*s12*s13^2 + 96*s13^3)*s23 +
            (-4*s12^2 + 154*s12*s13 + 192*s13^2)*s23^2 + (-4*s12 + 96*s13)*
             s23^3) + p1q^2*p2q^3*(36*s12^2*s13^2 + 36*s12*s13^3 +
            (89*s12^2*s13 + 237*s12*s13^2 + 112*s13^3)*s23 +
            (-3*s12^2 + 198*s12*s13 + 224*s13^2)*s23^2 + (-3*s12 + 112*s13)*
             s23^3) + p3q^4*(p2q*(18*s12^3*s13 - 18*s12*s13^3 +
              (2*s12^3 + 18*s12^2*s13 - 20*s12*s13^2)*s23 + (2*s12^2 -
                2*s12*s13)*s23^2) + p1q*(18*s12^3*s13 + 9*s12^2*s13^2 -
              9*s12*s13^3 + (3*s12^3 + 3*s12^2*s13 - 27*s12*s13^2)*s23 +
              (2*s12^2 - 19*s12*s13)*s23^2 - s12*s23^3)) +
          p3q^3*(p2q^2*(18*s12^3*s13 - 18*s12^2*s13^2 - 27*s12*s13^3 +
              9*s13^4 + (2*s12^3 + 16*s12^2*s13 - 39*s12*s13^2 + 10*s13^3)*
               s23 + (2*s12^2 - 4*s12*s13 + s13^2)*s23^2) +
            p1q*p2q*(36*s12^3*s13 - 18*s12^2*s13^2 - 45*s12*s13^3 + 9*s13^4 +
              (7*s12^3 - 6*s12^2*s13 - 103*s12*s13^2 + 9*s13^3)*s23 +
              (5*s12^2 - 52*s12*s13 - s13^2)*s23^2 + (-2*s12 - s13)*s23^3) +
            p1q^2*(18*s12^3*s13 - 18*s12*s13^3 + (4*s12^3 - 16*s12^2*s13 -
                49*s12*s13^2 + 7*s13^3)*s23 + (s12^2 - 34*s12*s13 + 14*s13^2)*
               s23^2 + (-3*s12 + 7*s13)*s23^3)) +
          p3q^2*(p2q^3*(-9*s12^3*s13 - 45*s12^2*s13^2 - 18*s12*s13^3 +
              18*s13^4 + (2*s12^3 - 35*s12^2*s13 - 62*s12*s13^2 + 20*s13^3)*
               s23 + (2*s12^2 - 28*s12*s13 + 2*s13^2)*s23^2) +
            p1q*p2q^2*(-18*s12^3*s13 - 108*s12^2*s13^2 - 54*s12*s13^3 +
              36*s13^4 + (7*s12^3 - 114*s12^2*s13 - 183*s12*s13^2 + 46*s13^3)*
               s23 + (5*s12^2 - 107*s12*s13 + 8*s13^2)*s23^2 +
              (-2*s12 - 2*s13)*s23^3) + p1q^3*(-18*s12^2*s13^2 -
              18*s12*s13^3 + (2*s12^3 - 38*s12^2*s13 - 44*s12*s13^2 +
                14*s13^3)*s23 + (-2*s12^2 - 30*s12*s13 + 28*s13^2)*s23^2 +
              (-4*s12 + 14*s13)*s23^3) + p1q^2*p2q*(-18*s12^3*s13 -
              90*s12^2*s13^2 - 54*s12*s13^3 + 18*s13^4 + (8*s12^3 -
                142*s12^2*s13 - 174*s12*s13^2 + 48*s13^3)*s23 +
              (s12^2 - 119*s12*s13 + 50*s13^2)*s23^2 + (-7*s12 + 20*s13)*s23^
                3)) + p3q*(p2q^4*(-9*s12^3*s13 + 27*s12*s13^3 + 18*s13^4 +
              (s12^3 - 8*s12^2*s13 + 35*s12*s13^2 + 44*s13^3)*s23 +
              (s12^2 + 16*s12*s13 + 42*s13^2)*s23^2 + 16*s13*s23^3) +
            p1q^4*((-4*s12^2*s13 + 10*s12*s13^2 + 14*s13^3)*s23 +
              (-2*s12^2 + 8*s12*s13 + 28*s13^2)*s23^2 + (-2*s12 + 14*s13)*s23^
                3) + p1q*p2q^3*(-27*s12^3*s13 - 9*s12^2*s13^2 +
              72*s12*s13^3 + 54*s13^4 + (3*s12^3 - 38*s12^2*s13 +
                96*s12*s13^2 + 146*s13^3)*s23 + (s12^2 + 38*s12*s13 +
                146*s13^2)*s23^2 + (-2*s12 + 54*s13)*s23^3) +
            p1q^3*p2q*(-18*s12^3*s13 - 18*s12^2*s13^2 + 18*s12*s13^3 +
              18*s13^4 + (2*s12^3 - 48*s12^2*s13 + 60*s12*s13^2 + 110*s13^3)*
               s23 + (-6*s12^2 + 34*s12*s13 + 166*s13^2)*s23^2 +
              (-8*s12 + 74*s13)*s23^3) + p1q^2*p2q^2*(-36*s12^3*s13 -
              18*s12^2*s13^2 + 72*s12*s13^3 + 54*s13^4 + (4*s12^3 -
                64*s12^2*s13 + 130*s12*s13^2 + 198*s13^3)*s23 +
              (-3*s12^2 + 59*s12*s13 + 242*s13^2)*s23^2 + (-7*s12 + 98*s13)*
               s23^3)))*Log(s12/(s12 + s13 + s23)))/
        (27*p2q*p3q^4*s12^2*s13*s23 +
         p3q^2*(p1q*p2q^2*((27*s12^2*s13 - 81*s12*s13^2)*s23 -
             81*s12*s13*s23^2) + p2q^3*((27*s12^2*s13 - 54*s12*s13^2)*s23 -
             54*s12*s13*s23^2) + p1q^2*p2q*(-27*s12*s13^2*s23 -
             27*s12*s13*s23^2)) + p3q*(p1q*p2q^3*(-54*s12*s13^2*s23 -
             54*s12*s13*s23^2) + p1q^2*p2q^2*(-27*s12*s13^2*s23 -
             27*s12*s13*s23^2) + p2q^4*(-27*s12*s13^2*s23 -
             27*s12*s13*s23^2)) + p3q^3*
          (p1q*p2q*((27*s12^2*s13 - 27*s12*s13^2)*s23 - 27*s12*s13*s23^2) +
           p2q^2*((54*s12^2*s13 - 27*s12*s13^2)*s23 - 27*s12*s13*s23^2))) +
       ((p3q^4*(s12^3 + s12^2*s13 + s12^2*s23) + p1q^2*p2q^2*
           (-10*s12^2*s13 - 24*s12*s13^2 - 14*s13^3 +
            (-3*s12^2 - 27*s12*s13 - 28*s13^2)*s23 + (-3*s12 - 14*s13)*
             s23^2) + p1q^3*p2q*(-10*s12^2*s13 - 22*s12*s13^2 - 12*s13^3 +
            (-4*s12^2 - 26*s12*s13 - 24*s13^2)*s23 + (-4*s12 - 12*s13)*
             s23^2) + p1q*p2q^3*(-5*s12^2*s13 - 13*s12*s13^2 - 8*s13^3 +
            (-s12^2 - 14*s12*s13 - 16*s13^2)*s23 + (-s12 - 8*s13)*s23^2) +
          p1q^4*(-4*s12^2*s13 - 8*s12*s13^2 - 4*s13^3 +
            (-2*s12^2 - 10*s12*s13 - 8*s13^2)*s23 + (-2*s12 - 4*s13)*s23^2) +
          p2q^4*(-(s12^2*s13) - 3*s12*s13^2 - 2*s13^3 +
            (-3*s12*s13 - 4*s13^2)*s23 - 2*s13*s23^2) +
          p3q^3*(p2q*(s12^3 - s12^2*s13 - 2*s12*s13^2 + (s12^2 - 2*s12*s13)*
               s23) + p1q*(3*s12^3 + 3*s12^2*s13 + (2*s12^2 - s12*s13)*s23 -
              s12*s23^2)) + p3q*(p2q^3*(s12^3 + 2*s12^2*s13 + 2*s12*s13^2 +
              s13^3 + (s12^2 + s12*s13 + s13^2)*s23) + p1q^2*p2q*
             (4*s12^3 - 8*s12*s13^2 - 4*s13^3 + (-13*s12*s13 - 9*s13^2)*s23 +
              (-4*s12 - 5*s13)*s23^2) + p1q^3*(2*s12^3 - 2*s12^2*s13 -
              8*s12*s13^2 - 4*s13^3 + (-2*s12^2 - 12*s12*s13 - 8*s13^2)*s23 +
              (-4*s12 - 4*s13)*s23^2) + p1q*p2q^2*(3*s12^3 + 3*s12^2*s13 +
              s12*s13^2 + s13^3 + (2*s12^2 - 2*s12*s13)*s23 +
              (-s12 - s13)*s23^2)) + p3q^2*(p2q^2*(s12^3 - s12^2*s13 -
              s12*s13^2 + s13^3 + (s12^2 - 2*s12*s13 + s13^2)*s23) +
            p1q^2*(4*s12^3 + 2*s12^2*s13 - 4*s12*s13^2 - 2*s13^3 +
              (s12^2 - 7*s12*s13 - 4*s13^2)*s23 + (-3*s12 - 2*s13)*s23^2) +
            p1q*p2q*(4*s12^3 - 4*s12*s13^2 + (3*s12^2 - 6*s12*s13 - s13^2)*
               s23 + (-s12 - s13)*s23^2)))*Log(s13/(s12 + s13 + s23)))/
        (3*p2q*p3q^3*s12^2*s13 + p3q*(p1q*p2q^2*(-6*s12*s13^2 -
             6*s12*s13*s23) + p1q^2*p2q*(-3*s12*s13^2 - 3*s12*s13*s23) +
           p2q^3*(-3*s12*s13^2 - 3*s12*s13*s23)) +
         p3q^2*(p1q*p2q*(3*s12^2*s13 - 3*s12*s13^2 - 3*s12*s13*s23) +
           p2q^2*(3*s12^2*s13 - 3*s12*s13^2 - 3*s12*s13*s23))) +
       ((p3q^5*(-9*s12^3*s13 - 9*s12^2*s13^2 + (-10*s12^3 - 19*s12^2*s13)*
             s23 - 10*s12^2*s23^2) + p2q^5*(-9*s12^2*s13^2 - 9*s12*s13^3 +
            (-8*s12^2*s13 - 15*s12*s13^2 + 2*s13^3)*s23 +
            (-6*s12*s13 + 4*s13^2)*s23^2 + 2*s13*s23^3) +
          p1q^4*p2q*((22*s12^2*s13 + 26*s12*s13^2 + 4*s13^3)*s23 +
            (20*s12^2 + 46*s12*s13 + 8*s13^2)*s23^2 + (20*s12 + 4*s13)*
             s23^3) + p1q*p2q^4*(-27*s12^2*s13^2 - 27*s12*s13^3 +
            (-13*s12^2*s13 - 32*s12*s13^2 + 8*s13^3)*s23 +
            (10*s12^2 + 5*s12*s13 + 16*s13^2)*s23^2 + (10*s12 + 8*s13)*
             s23^3) + p1q^3*p2q^2*(-18*s12^2*s13^2 - 18*s12*s13^3 +
            (28*s12^2*s13 + 22*s12*s13^2 + 12*s13^3)*s23 +
            (40*s12^2 + 80*s12*s13 + 24*s13^2)*s23^2 + (40*s12 + 12*s13)*
             s23^3) + p1q^2*p2q^3*(-36*s12^2*s13^2 - 36*s12*s13^3 +
            (s12^2*s13 - 21*s12*s13^2 + 14*s13^3)*s23 +
            (30*s12^2 + 45*s12*s13 + 28*s13^2)*s23^2 + (30*s12 + 14*s13)*
             s23^3) + p3q^4*(p2q*(-18*s12^3*s13 + 18*s12*s13^3 +
              (-20*s12^3 - 18*s12^2*s13 + 38*s12*s13^2)*s23 +
              (-20*s12^2 + 20*s12*s13)*s23^2) + p1q*(-18*s12^3*s13 -
              9*s12^2*s13^2 + 9*s12*s13^3 + (-30*s12^3 - 30*s12^2*s13 +
                27*s12*s13^2)*s23 + (-20*s12^2 + 28*s12*s13)*s23^2 +
              10*s12*s23^3)) + p3q^3*(p2q^2*(-18*s12^3*s13 + 18*s12^2*s13^2 +
              27*s12*s13^3 - 9*s13^4 + (-20*s12^3 + 2*s12^2*s13 +
                66*s12*s13^2 - 19*s13^3)*s23 + (-20*s12^2 + 40*s12*s13 -
                10*s13^2)*s23^2) + p1q*p2q*(-36*s12^3*s13 + 18*s12^2*s13^2 +
              45*s12*s13^3 - 9*s13^4 + (-70*s12^3 - 21*s12^2*s13 +
                139*s12*s13^2 - 9*s13^3)*s23 + (-50*s12^2 + 115*s12*s13 +
                10*s13^2)*s23^2 + (20*s12 + 10*s13)*s23^3) +
            p1q^2*(-18*s12^3*s13 + 18*s12*s13^3 + (-40*s12^3 - 2*s12^2*s13 +
                85*s12*s13^2 + 11*s13^3)*s23 + (-10*s12^2 + 97*s12*s13 +
                22*s13^2)*s23^2 + (30*s12 + 11*s13)*s23^3)) +
          p3q^2*(p2q^3*(9*s12^3*s13 + 45*s12^2*s13^2 + 18*s12*s13^3 -
              18*s13^4 + (-20*s12^3 + 26*s12^2*s13 + 53*s12*s13^2 - 38*s13^3)*
               s23 + (-20*s12^2 + 37*s12*s13 - 20*s13^2)*s23^2) +
            p1q*p2q^2*(18*s12^3*s13 + 108*s12^2*s13^2 + 54*s12*s13^3 -
              36*s13^4 + (-70*s12^3 + 87*s12^2*s13 + 210*s12*s13^2 -
                55*s13^3)*s23 + (-50*s12^2 + 179*s12*s13 + s13^2)*s23^2 +
              (20*s12 + 20*s13)*s23^3) + p1q^3*(18*s12^2*s13^2 +
              18*s12*s13^3 + (-20*s12^3 + 56*s12^2*s13 + 116*s12*s13^2 +
                22*s13^3)*s23 + (20*s12^2 + 138*s12*s13 + 44*s13^2)*s23^2 +
              (40*s12 + 22*s13)*s23^3) + p1q^2*p2q*(18*s12^3*s13 +
              90*s12^2*s13^2 + 54*s12*s13^3 - 18*s13^4 + (-80*s12^3 +
                124*s12^2*s13 + 282*s12*s13^2 + 6*s13^3)*s23 +
              (-10*s12^2 + 299*s12*s13 + 67*s13^2)*s23^2 + (70*s12 + 43*s13)*
               s23^3)) + p3q*(p2q^4*(9*s12^3*s13 - 27*s12*s13^3 - 18*s13^4 +
              (-10*s12^3 - s12^2*s13 - 26*s12*s13^2 - 35*s13^3)*s23 +
              (-10*s12^2 + 2*s12*s13 - 15*s13^2)*s23^2 + 2*s13*s23^3) +
            p1q^4*((40*s12^2*s13 + 62*s12*s13^2 + 22*s13^3)*s23 +
              (20*s12^2 + 82*s12*s13 + 44*s13^2)*s23^2 + (20*s12 + 22*s13)*
               s23^3) + p1q*p2q^3*(27*s12^3*s13 + 9*s12^2*s13^2 -
              72*s12*s13^3 - 54*s13^4 + (-30*s12^3 + 56*s12^2*s13 +
                12*s12*s13^2 - 83*s13^3)*s23 + (-10*s12^2 + 106*s12*s13 -
                2*s13^2)*s23^2 + (20*s12 + 27*s13)*s23^3) +
            p1q^3*p2q*(18*s12^3*s13 + 18*s12^2*s13^2 - 18*s12*s13^3 -
              18*s13^4 + (-20*s12^3 + 156*s12^2*s13 + 210*s12*s13^2 +
                34*s13^3)*s23 + (60*s12^2 + 308*s12*s13 + 122*s13^2)*s23^2 +
              (80*s12 + 70*s13)*s23^3) + p1q^2*p2q^2*(36*s12^3*s13 +
              18*s12^2*s13^2 - 72*s12*s13^3 - 54*s13^4 + (-40*s12^3 +
                154*s12^2*s13 + 158*s12*s13^2 - 36*s13^3)*s23 +
              (30*s12^2 + 301*s12*s13 + 91*s13^2)*s23^2 + (70*s12 + 73*s13)*
               s23^3)))*Log(s23/(s12 + s13 + s23)))/
        (27*p2q*p3q^4*s12^2*s13*s23 +
         p3q^2*(p1q*p2q^2*((27*s12^2*s13 - 81*s12*s13^2)*s23 -
             81*s12*s13*s23^2) + p2q^3*((27*s12^2*s13 - 54*s12*s13^2)*s23 -
             54*s12*s13*s23^2) + p1q^2*p2q*(-27*s12*s13^2*s23 -
             27*s12*s13*s23^2)) + p3q*(p1q*p2q^3*(-54*s12*s13^2*s23 -
             54*s12*s13*s23^2) + p1q^2*p2q^2*(-27*s12*s13^2*s23 -
             27*s12*s13*s23^2) + p2q^4*(-27*s12*s13^2*s23 -
             27*s12*s13*s23^2)) + p3q^3*
          (p1q*p2q*((27*s12^2*s13 - 27*s12*s13^2)*s23 - 27*s12*s13*s23^2) +
           p2q^2*((54*s12^2*s13 - 27*s12*s13^2)*s23 - 27*s12*s13*s23^2)))) +
     Log(p2q/(p1q + p2q + p3q))*
      ((p3q^5*((-18*s12^3 - 54*s12^2*s13 - 36*s12*s13^2)*s23 +
           (-52*s12^2 - 70*s12*s13)*s23^2 - 34*s12*s23^3) +
         p2q^5*((2*s12*s13 + 2*s13^2)*s23^2 + 2*s13*s23^3) +
         p1q*p2q^4*((4*s12^2 + 8*s12*s13 + 4*s13^2)*s23^2 +
           (6*s12 + 6*s13)*s23^3 + 2*s23^4) +
         p3q^4*(p2q*(-36*s12^3*s13 + (-72*s12^3 - 162*s12^2*s13 - 90*s12*
                s13^2)*s23 + (-142*s12^2 - 194*s12*s13 - 2*s13^2)*s23^2 +
             (-102*s12 + 2*s13)*s23^3) + p1q*((-14*s12^2 - 10*s12*s13 + 4*
                s13^2)*s23^2 + (-12*s12 + 6*s13)*s23^3 + 2*s23^4)) +
         p3q*(p2q^4*(-36*s12*s13^3 + (-36*s12^3 - 54*s12^2*s13 - 90*s12*
                s13^2)*s23 + (-38*s12^2 - 86*s12*s13 + 2*s13^2)*s23^2 +
             (-34*s12 + 6*s13)*s23^3) + p1q*p2q^3*(-36*s12*s13^3 -
             72*s12*s13^2*s23 + (26*s12^2 - 34*s12*s13 + 8*s13^2)*s23^2 +
             18*s13*s23^3 + 6*s23^4)) +
         p3q^3*(p2q^2*(-36*s12^3*s13 + 72*s12^2*s13^2 +
             (-108*s12^3 - 144*s12^2*s13 - 108*s12*s13^2)*s23 +
             (-148*s12^2 - 250*s12*s13 - 6*s13^2)*s23^2 + (-136*s12 + 6*s13)*
              s23^3) + p1q*p2q*(-36*s12^3*s13 + (8*s12^2 - 16*s12*s13 + 8*
                s13^2)*s23^2 + (-18*s12 + 18*s13)*s23^3 + 6*s23^4)) +
         p3q^2*(p2q^3*(72*s12^2*s13^2 - 36*s12*s13^3 +
             (-90*s12^3 - 90*s12^2*s13 - 144*s12*s13^2)*s23 +
             (-96*s12^2 - 214*s12*s13 - 4*s13^2)*s23^2 + (-102*s12 + 8*s13)*
              s23^3) + p1q*p2q^2*(72*s12^2*s13^2 + 72*s12^2*s13*s23 +
             (44*s12^2 - 12*s12*s13 + 8*s13^2)*s23^2 + (-12*s12 + 24*s13)*
              s23^3 + 8*s23^4)))/(3*p2q*p3q^4*s12*s13*s23^2 +
         p3q^3*(3*p1q*p2q*s12*s13*s23^2 + 9*p2q^2*s12*s13*s23^2) +
         p3q^2*(6*p1q*p2q^2*s12*s13*s23^2 + 9*p2q^3*s12*s13*s23^2) +
         p3q*(3*p1q*p2q^3*s12*s13*s23^2 + 3*p2q^4*s12*s13*s23^2)) +
       ((p3q^4*(10*s12^4 + 20*s12^3*s13 + 10*s12^2*s13^2 +
            (11*s12^3 + 11*s12^2*s13)*s23 + s12^2*s23^2) +
          p2q^4*(-8*s12^2*s13^2 - 16*s12*s13^3 - 8*s13^4 +
            (s12^2*s13 - 5*s12*s13^2 - 6*s13^3)*s23 + (11*s12*s13 + 12*s13^2)*
             s23^2 + 10*s13*s23^3) + p1q*p2q^3*(-24*s12^2*s13^2 -
            48*s12*s13^3 - 24*s13^4 + (49*s12^2*s13 + 77*s12*s13^2 +
              28*s13^3)*s23 + (37*s12^2 + 190*s12*s13 + 156*s13^2)*s23^2 +
            (65*s12 + 132*s13)*s23^3 + 28*s23^4) +
          p1q^4*((92*s12^2*s13 + 184*s12*s13^2 + 92*s13^3)*s23 +
            (74*s12^2 + 314*s12*s13 + 240*s13^2)*s23^2 + (130*s12 + 204*s13)*
             s23^3 + 56*s23^4) + p1q^2*p2q^2*(-32*s12^2*s13^2 -
            64*s12*s13^3 - 32*s13^4 + (142*s12^2*s13 + 256*s12*s13^2 +
              114*s13^3)*s23 + (111*s12^2 + 515*s12*s13 + 408*s13^2)*s23^2 +
            (195*s12 + 346*s13)*s23^3 + 84*s23^4) +
          p1q^3*p2q*(-16*s12^2*s13^2 - 32*s12*s13^3 - 16*s13^4 +
            (186*s12^2*s13 + 358*s12*s13^2 + 172*s13^3)*s23 +
            (148*s12^2 + 650*s12*s13 + 504*s13^2)*s23^2 + (260*s12 + 428*s13)*
             s23^3 + 112*s23^4) + p3q^3*(p1q*(20*s12^4 + 30*s12^3*s13 -
              10*s12*s13^3 + (-25*s12^3 - 83*s12^2*s13 - 58*s12*s13^2)*s23 +
              (-74*s12^2 - 77*s12*s13)*s23^2 - 29*s12*s23^3) +
            p2q*(20*s12^4 + 38*s12^3*s13 + 16*s12^2*s13^2 - 2*s12*s13^3 +
              (21*s12^3 + 25*s12^2*s13 + 4*s12*s13^2)*s23 + (-9*s12^2 -
                4*s12*s13)*s23^2 - 10*s12*s23^3)) +
          p3q^2*(p2q^2*(10*s12^4 + 16*s12^3*s13 - 6*s12^2*s13^2 -
              20*s12*s13^3 - 8*s13^4 + (-9*s12^3 - 27*s12^2*s13 -
                51*s12*s13^2 - 33*s13^3)*s23 + (-39*s12^2 - 42*s12*s13 -
                33*s13^2)*s23^2 + (-20*s12 - 8*s13)*s23^3) +
            p1q*p2q*(20*s12^4 + 16*s12^3*s13 - 36*s12^2*s13^2 -
              40*s12*s13^3 - 8*s13^4 + (-92*s12^3 - 180*s12^2*s13 -
                84*s12*s13^2 + 4*s13^3)*s23 + (-171*s12^2 - 66*s12*s13 +
                69*s13^2)*s23^2 + (-31*s12 + 85*s13)*s23^3 + 28*s23^4) +
            p1q^2*(20*s12^4 + 20*s12^3*s13 - 20*s12^2*s13^2 - 20*s12*s13^3 +
              (-72*s12^3 - 142*s12^2*s13 - 24*s12*s13^2 + 46*s13^3)*s23 +
              (-113*s12^2 + 3*s12*s13 + 120*s13^2)*s23^2 + (7*s12 + 102*s13)*
               s23^3 + 28*s23^4)) + p3q*(p2q^3*(-2*s12^3*s13 -
              20*s12^2*s13^2 - 34*s12*s13^3 - 16*s13^4 + (-19*s12^3 -
                58*s12^2*s13 - 96*s12*s13^2 - 57*s13^3)*s23 +
              (-29*s12^2 - 63*s12*s13 - 57*s13^2)*s23^2 + (-10*s12 - 16*s13)*
               s23^3) + p1q*p2q^2*(-14*s12^3*s13 - 60*s12^2*s13^2 -
              78*s12*s13^3 - 32*s13^4 + (-85*s12^3 - 147*s12^2*s13 -
                111*s12*s13^2 - 49*s13^3)*s23 + (-78*s12^2 + 48*s12*s13 +
                72*s13^2)*s23^2 + (63*s12 + 145*s13)*s23^3 + 56*s23^4) +
            p1q^3*(-20*s12^3*s13 - 40*s12^2*s13^2 - 20*s12*s13^3 +
              (-94*s12^3 - 118*s12^2*s13 + 68*s12*s13^2 + 92*s13^3)*s23 +
              (-78*s12^2 + 160*s12*s13 + 240*s13^2)*s23^2 +
              (72*s12 + 204*s13)*s23^3 + 56*s23^4) + p1q^2*p2q*
             (-24*s12^3*s13 - 64*s12^2*s13^2 - 56*s12*s13^3 - 16*s13^4 +
              (-132*s12^3 - 144*s12^2*s13 + 88*s12*s13^2 + 100*s13^3)*s23 +
              (-80*s12^2 + 317*s12*s13 + 369*s13^2)*s23^2 + (164*s12 +
                365*s13)*s23^3 + 112*s23^4)))*
         Log((p1q + p2q)/(p1q + p2q + p3q)))/(27*p2q*p3q^3*s12^2*s13*s23 +
         p3q*(p1q*p2q^2*(-54*s12*s13^2*s23 - 54*s12*s13*s23^2) +
           p1q^2*p2q*(-27*s12*s13^2*s23 - 27*s12*s13*s23^2) +
           p2q^3*(-27*s12*s13^2*s23 - 27*s12*s13*s23^2)) +
         p3q^2*(p1q*p2q*((27*s12^2*s13 - 27*s12*s13^2)*s23 -
             27*s12*s13*s23^2) + p2q^2*((27*s12^2*s13 - 27*s12*s13^2)*s23 -
             27*s12*s13*s23^2))) +
       ((p2q^2*(6*s12^2 + 12*s12*s13 + 6*s13^2 + (12*s12 + 12*s13)*s23 +
            6*s23^2) + p3q^2*(6*s12^2 + 12*s12*s13 + 6*s13^2 +
            (12*s12 + 12*s13)*s23 + 6*s23^2) + p1q^2*(12*s12^2 + 24*s12*s13 +
            12*s13^2 + (24*s12 + 24*s13)*s23 + 12*s23^2) +
          p1q*p2q*(12*s12^2 + 24*s12*s13 + 12*s13^2 + (24*s12 + 24*s13)*s23 +
            12*s23^2) + p3q*(p1q*(12*s12^2 + 24*s12*s13 + 12*s13^2 +
              (24*s12 + 24*s13)*s23 + 12*s23^2) +
            p2q*(12*s12^2 + 24*s12*s13 + 12*s13^2 + (24*s12 + 24*s13)*s23 +
              12*s23^2)))*Log(p3q/(p1q + p2q + p3q)))/(p1q*p2q*s13*s23 +
         p2q^2*s13*s23 + p2q*p3q*s13*s23) +
       ((p2q^5*(9*s12^2*s13^2 + 9*s12*s13^3 + (10*s12*s13^2 + s13^3)*s23 +
            s13^2*s23^2) + p3q^5*(9*s12^3*s13 + 9*s12^2*s13^2 +
            (16*s12^3 + 42*s12^2*s13 + 17*s12*s13^2)*s23 +
            (32*s12^2 + 33*s12*s13)*s23^2 + 16*s12*s23^3) +
          p1q^3*p2q^2*(-18*s12^3*s13 - 18*s12^2*s13^2 +
            (14*s12^3 - 44*s12^2*s13 - 38*s12*s13^2 + 2*s13^3)*s23 +
            (28*s12^2 - 30*s12*s13 - 2*s13^2)*s23^2 + (14*s12 - 4*s13)*
             s23^3) + p1q^2*p2q^3*(-18*s12^3*s13 + 18*s12*s13^3 +
            (7*s12^3 - 49*s12^2*s13 - 16*s12*s13^2 + 4*s13^3)*s23 +
            (14*s12^2 - 34*s12*s13 + s13^2)*s23^2 + (7*s12 - 3*s13)*s23^3) +
          p1q^4*p2q*((14*s12^3 + 10*s12^2*s13 - 4*s12*s13^2)*s23 +
            (28*s12^2 + 8*s12*s13 - 2*s13^2)*s23^2 + (14*s12 - 2*s13)*
             s23^3) + p1q*p2q^4*(-9*s12^3*s13 + 9*s12^2*s13^2 +
            18*s12*s13^3 + (-27*s12^2*s13 + 3*s12*s13^2 + 3*s13^3)*s23 +
            (-19*s12*s13 + 2*s13^2)*s23^2 - s13*s23^3) +
          p3q^2*(p2q^3*(9*s12^4 - 27*s12^3*s13 - 18*s12^2*s13^2 +
              18*s12*s13^3 + (10*s12^3 - 39*s12^2*s13 + 16*s12*s13^2 +
                2*s13^3)*s23 + (s12^2 - 4*s12*s13 + 2*s13^2)*s23^2) +
            p1q^2*p2q*(54*s12^4 + 72*s12^3*s13 - 18*s12^2*s13^2 -
              36*s12*s13^3 + (198*s12^3 + 130*s12^2*s13 - 64*s12*s13^2 +
                4*s13^3)*s23 + (242*s12^2 + 59*s12*s13 - 3*s13^2)*s23^2 +
              (98*s12 - 7*s13)*s23^3) + p1q^3*(18*s12^3*s13 +
              18*s12^2*s13^2 + (96*s12^3 + 176*s12^2*s13 + 62*s12*s13^2)*
               s23 + (192*s12^2 + 154*s12*s13 - 4*s13^2)*s23^2 +
              (96*s12 - 4*s13)*s23^3) + p1q*p2q^2*(36*s12^4 - 54*s12^3*s13 -
              108*s12^2*s13^2 - 18*s12*s13^3 + (46*s12^3 - 183*s12^2*s13 -
                114*s12*s13^2 + 7*s13^3)*s23 + (8*s12^2 - 107*s12*s13 +
                5*s13^2)*s23^2 + (-2*s12 - 2*s13)*s23^3)) +
          p3q*(p2q^4*(-18*s12^3*s13 + 18*s12*s13^3 + (-20*s12^2*s13 +
                18*s12*s13^2 + 2*s13^3)*s23 + (-2*s12*s13 + 2*s13^2)*s23^2) +
            p1q^3*p2q*(18*s12^4 + 18*s12^3*s13 - 18*s12^2*s13^2 -
              18*s12*s13^3 + (110*s12^3 + 60*s12^2*s13 - 48*s12*s13^2 +
                2*s13^3)*s23 + (166*s12^2 + 34*s12*s13 - 6*s13^2)*s23^2 +
              (74*s12 - 8*s13)*s23^3) + p1q^2*p2q^2*(18*s12^4 -
              54*s12^3*s13 - 90*s12^2*s13^2 - 18*s12*s13^3 +
              (48*s12^3 - 174*s12^2*s13 - 142*s12*s13^2 + 8*s13^3)*s23 +
              (50*s12^2 - 119*s12*s13 + s13^2)*s23^2 + (20*s12 - 7*s13)*s23^
                3) + p1q*p2q^3*(9*s12^4 - 45*s12^3*s13 - 18*s12^2*s13^2 +
              36*s12*s13^3 + (9*s12^3 - 103*s12^2*s13 - 6*s12*s13^2 +
                7*s13^3)*s23 + (-s12^2 - 52*s12*s13 + 5*s13^2)*s23^2 +
              (-s12 - 2*s13)*s23^3) + p1q^4*((32*s12^3 + 46*s12^2*s13 +
                14*s12*s13^2)*s23 + (64*s12^2 + 44*s12*s13 - 2*s13^2)*s23^2 +
              (32*s12 - 2*s13)*s23^3)) +
          p3q^3*(p2q^2*(18*s12^4 - 18*s12^3*s13 - 45*s12^2*s13^2 -
              9*s12*s13^3 + (20*s12^3 - 62*s12^2*s13 - 35*s12*s13^2 +
                2*s13^3)*s23 + (2*s12^2 - 28*s12*s13 + 2*s13^2)*s23^2) +
            p1q^2*(36*s12^3*s13 + 36*s12^2*s13^2 + (112*s12^3 + 237*s12^2*
                 s13 + 89*s12*s13^2)*s23 + (224*s12^2 + 198*s12*s13 -
                3*s13^2)*s23^2 + (112*s12 - 3*s13)*s23^3) +
            p1q*p2q*(54*s12^4 + 72*s12^3*s13 - 9*s12^2*s13^2 - 27*s12*s13^3 +
              (146*s12^3 + 96*s12^2*s13 - 38*s12*s13^2 + 3*s13^3)*s23 +
              (146*s12^2 + 38*s12*s13 + s13^2)*s23^2 + (54*s12 - 2*s13)*s23^
                3)) + p3q^4*(p2q*(18*s12^4 + 27*s12^3*s13 - 9*s12*s13^3 +
              (44*s12^3 + 35*s12^2*s13 - 8*s12*s13^2 + s13^3)*s23 +
              (42*s12^2 + 16*s12*s13 + s13^2)*s23^2 + 16*s12*s23^3) +
            p1q*(27*s12^3*s13 + 27*s12^2*s13^2 + (64*s12^3 + 149*s12^2*s13 +
                58*s12*s13^2)*s23 + (128*s12^2 + 121*s12*s13 - s13^2)*s23^2 +
              (64*s12 - s13)*s23^3)))*Log((p1q + p3q)/(p1q + p2q + p3q)))/
        (p2q*p3q^4*(3*s12^2*s13*s23 + 3*s12*s13*s23^2) +
         p3q*(-3*p2q^4*s12*s13^2*s23 + p1q^2*p2q^2*(3*s12^2*s13*s23 +
             3*s12*s13*s23^2) + p1q*p2q^3*((3*s12^2*s13 - 3*s12*s13^2)*s23 +
             3*s12*s13*s23^2)) + p3q^3*(p1q*p2q*(6*s12^2*s13*s23 +
             6*s12*s13*s23^2) + p2q^2*((6*s12^2*s13 - 3*s12*s13^2)*s23 +
             6*s12*s13*s23^2)) + p3q^2*(p1q^2*p2q*(3*s12^2*s13*s23 +
             3*s12*s13*s23^2) + p2q^3*((3*s12^2*s13 - 6*s12*s13^2)*s23 +
             3*s12*s13*s23^2) + p1q*p2q^2*((9*s12^2*s13 - 3*s12*s13^2)*s23 +
             9*s12*s13*s23^2))) +
       ((p2q^6*((3*s12^2*s13 + 6*s12*s13^2 + 3*s13^3)*s23 +
            (3*s12*s13 + 3*s13^2)*s23^2) + p1q*p2q^5*
           ((6*s12^2*s13 + 12*s12*s13^2 + 6*s13^3)*s23 +
            (-3*s12^2 - 3*s12*s13)*s23^2 + (-3*s12 - 6*s13)*s23^3) +
          p3q^6*((6*s12^2*s13 + 12*s12*s13^2 + 6*s13^3)*s23 +
            (3*s12^2 + 15*s12*s13 + 12*s13^2)*s23^2 + (3*s12 + 6*s13)*
             s23^3) + p1q^2*p2q^4*((6*s12^2*s13 + 12*s12*s13^2 + 6*s13^3)*
             s23 + (-6*s12^2 - 12*s12*s13 - 6*s13^2)*s23^2 +
            (-3*s12 - 9*s13)*s23^3 + 3*s23^4) + p1q^3*p2q^3*
           ((-6*s12^2 - 18*s12*s13 - 12*s13^2)*s23^2 - 6*s13*s23^3 +
            6*s23^4) + p1q^4*p2q^2*((6*s12 + 6*s13)*s23^3 + 6*s23^4) +
          p3q^4*(p2q^2*(24*s12^3*s13 - 24*s12*s13^3 + (18*s12^3 +
                48*s12^2*s13 - 18*s12*s13^2)*s23 + (21*s12^2 + 21*s12*s13 +
                12*s13^2)*s23^2 + (3*s12 + 12*s13)*s23^3) +
            p1q^2*((12*s12^2*s13 + 24*s12*s13^2 + 12*s13^3)*s23 +
              (12*s12^2 + 36*s12*s13 + 24*s13^2)*s23^2 + (3*s12 + 3*s13)*s23^
                3 - 9*s23^4) + p1q*p2q*(12*s12^3*s13 + 12*s12^2*s13^2 +
              (12*s12^3 + 36*s12^2*s13 + 24*s12*s13^2 + 12*s13^3)*s23 +
              (15*s12^2 + 42*s12*s13 + 39*s13^2)*s23^2 + (-3*s12 + 21*s13)*
               s23^3 - 6*s23^4)) + p3q^5*(p2q*(12*s12^3*s13 +
              12*s12^2*s13^2 + (6*s12^3 + 36*s12^2*s13 + 30*s12*s13^2 +
                12*s13^3)*s23 + (12*s12^2 + 39*s12*s13 + 27*s13^2)*s23^2 +
              (6*s12 + 15*s13)*s23^3) + p1q*((12*s12^2*s13 + 24*s12*s13^2 +
                12*s13^3)*s23 + (9*s12^2 + 33*s12*s13 + 24*s13^2)*s23^2 +
              (6*s12 + 9*s13)*s23^3 - 3*s23^4)) +
          p3q^3*(p2q^3*(12*s12^3*s13 - 36*s12^2*s13^2 - 36*s12*s13^3 +
              12*s13^4 + (21*s12^3 + 12*s12^2*s13 - 75*s12*s13^2 + 6*s13^3)*
               s23 + (21*s12^2 - 18*s12*s13 - 3*s13^2)*s23^2 + 3*s13*s23^3) +
            p1q^3*((6*s12^2 + 6*s12*s13)*s23^2 + (-6*s12 - 12*s13)*s23^3 -
              12*s23^4) + p1q^2*p2q*((6*s12^3 - 6*s12*s13^2)*s23 +
              (24*s12*s13 + 36*s13^2)*s23^2 + (-15*s12 + 27*s13)*s23^3 -
              9*s23^4) + p1q*p2q^2*(12*s12^3*s13 - 12*s12^2*s13^2 -
              24*s12*s13^3 + (30*s12^3 + 24*s12^2*s13 - 66*s12*s13^2 -
                24*s13^3)*s23 + (6*s12^2 - 15*s12*s13 + 3*s13^2)*s23^2 +
              (-27*s12 + 24*s13)*s23^3 - 3*s23^4)) +
          p3q^2*(p2q^4*(-24*s12^2*s13^2 + 24*s13^4 + (12*s12^3 -
                3*s12^2*s13 - 30*s12*s13^2 + 33*s13^3)*s23 +
              (12*s12^2 - 15*s12*s13 + 9*s13^2)*s23^2) +
            p1q*p2q^3*(-24*s12^2*s13^2 - 12*s12*s13^3 + 12*s13^4 +
              (24*s12^3 - 6*s12^2*s13 - 96*s12*s13^2 - 30*s13^3)*s23 +
              (-6*s12^2 - 63*s12*s13 - 45*s13^2)*s23^2 + (-30*s12 - 3*s13)*
               s23^3) + p1q^4*((-6*s12 - 6*s13)*s23^3 - 6*s23^4) +
            p1q^3*p2q*((-6*s12^2 + 18*s12*s13 + 24*s13^2)*s23^2 +
              (-12*s12 + 18*s13)*s23^3 - 6*s23^4) + p1q^2*p2q^2*
             ((12*s12^3 + 6*s12^2*s13 - 24*s12*s13^2 - 18*s13^3)*s23 +
              (-30*s12^2 + 30*s13^2)*s23^2 + (-36*s12 + 54*s13)*s23^3 +
              6*s23^4)) + p3q*(p2q^5*(12*s12*s13^3 + 12*s13^4 +
              (3*s12^3 + 6*s12^2*s13 + 15*s12*s13^2 + 24*s13^3)*s23 +
              (3*s12^2 + 3*s12*s13 + 12*s13^2)*s23^2) +
            p1q*p2q^4*(12*s12*s13^3 + 12*s13^4 + (6*s12^3 - 18*s12*s13^2)*
               s23 + (-9*s12^2 - 42*s12*s13 - 33*s13^2)*s23^2 +
              (-15*s12 - 21*s13)*s23^3) + p1q^2*p2q^3*
             ((6*s12^3 - 30*s12*s13^2 - 24*s13^3)*s23 + (-24*s12^2 -
                48*s12*s13 - 36*s13^2)*s23^2 + (-21*s12 - 3*s13)*s23^3 +
              9*s23^4) + p1q^3*p2q^2*((-18*s12^2 - 6*s12*s13 + 12*s13^2)*s23^
                2 + (-6*s12 + 24*s13)*s23^3 + 12*s23^4)))*
         Log((p2q + p3q)/(p1q + p2q + p3q)))/(p2q*p3q^5*(s12*s13 + s13^2)*
          s23^2 + p3q^3*(p2q^3*(6*s12*s13 + 6*s13^2)*s23^2 -
           p1q^2*p2q*s13*s23^3 + p1q*p2q^2*((3*s12*s13 + 3*s13^2)*s23^2 -
             3*s13*s23^3)) + p3q^2*(p2q^4*(4*s12*s13 + 4*s13^2)*s23^2 -
           2*p1q^2*p2q^2*s13*s23^3 + p1q*p2q^3*((3*s12*s13 + 3*s13^2)*s23^2 -
             3*s13*s23^3)) + p3q^4*(p2q^2*(4*s12*s13 + 4*s13^2)*s23^2 +
           p1q*p2q*((s12*s13 + s13^2)*s23^2 - s13*s23^3)) +
         p3q*(p2q^5*(s12*s13 + s13^2)*s23^2 - p1q^2*p2q^3*s13*s23^3 +
           p1q*p2q^4*((s12*s13 + s13^2)*s23^2 - s13*s23^3))) +
       ((p3q^5*((-18*s12^3 - 54*s12^2*s13 - 36*s12*s13^2)*s23 +
            (-52*s12^2 - 70*s12*s13)*s23^2 - 34*s12*s23^3) +
          p2q^5*((2*s12*s13 + 2*s13^2)*s23^2 + 2*s13*s23^3) +
          p1q*p2q^4*((4*s12^2 + 12*s12*s13 + 8*s13^2)*s23^2 +
            (6*s12 + 10*s13)*s23^3 + 2*s23^4) + p1q^3*p2q^2*
           ((8*s12^2 + 16*s12*s13 + 8*s13^2)*s23^2 + (12*s12 + 12*s13)*
             s23^3 + 4*s23^4) + p1q^2*p2q^3*((8*s12^2 + 20*s12*s13 +
              12*s13^2)*s23^2 + (12*s12 + 16*s13)*s23^3 + 4*s23^4) +
          p3q^4*(p2q*(-36*s12^3*s13 + (-108*s12^3 - 198*s12^2*s13 -
                90*s12*s13^2)*s23 + (-196*s12^2 - 194*s12*s13 - 2*s13^2)*s23^
                2 - 104*s12*s23^3) + p1q*((-36*s12^3 - 108*s12^2*s13 -
                72*s12*s13^2)*s23 + (-118*s12^2 - 150*s12*s13 + 4*s13^2)*s23^
                2 + (-80*s12 + 6*s13)*s23^3 + 2*s23^4)) +
          p3q^3*(p2q^2*(-36*s12^3*s13 + 72*s12^2*s13^2 + (-180*s12^3 -
                180*s12^2*s13 - 72*s12*s13^2)*s23 + (-256*s12^2 -
                196*s12*s13 - 6*s13^2)*s23^2 - 124*s12*s23^3) +
            p1q^2*((-36*s12^3 - 108*s12^2*s13 - 72*s12*s13^2)*s23 +
              (-132*s12^2 - 160*s12*s13 + 8*s13^2)*s23^2 + (-92*s12 + 12*s13)*
               s23^3 + 4*s23^4) + p1q*p2q*(-36*s12^3*s13 + (-180*s12^3 -
                288*s12^2*s13 - 108*s12*s13^2)*s23 + (-340*s12^2 -
                270*s12*s13 + 12*s13^2)*s23^2 + (-168*s12 + 22*s13)*s23^3 +
              8*s23^4)) + p3q^2*(p2q^3*(72*s12^2*s13^2 - 36*s12*s13^3 +
              (-126*s12^3 - 54*s12^2*s13 - 72*s12*s13^2)*s23 +
              (-150*s12^2 - 106*s12*s13 - 4*s13^2)*s23^2 + (-72*s12 + 2*s13)*
               s23^3) + p1q^3*((-28*s12^2 - 20*s12*s13 + 8*s13^2)*s23^2 +
              (-24*s12 + 12*s13)*s23^3 + 4*s23^4) + p1q*p2q^2*
             (72*s12^2*s13^2 + (-216*s12^3 - 108*s12^2*s13 + 36*s12*s13^2)*
               s23 + (-304*s12^2 - 60*s12*s13 + 20*s13^2)*s23^2 +
              (-108*s12 + 36*s13)*s23^3 + 12*s23^4) + p1q^2*p2q*
             ((-108*s12^3 - 144*s12^2*s13 - 36*s12*s13^2)*s23 +
              (-256*s12^2 - 156*s12*s13 + 28*s13^2)*s23^2 + (-136*s12 +
                40*s13)*s23^3 + 12*s23^4)) +
          p3q*(p2q^4*(-36*s12*s13^3 + (-36*s12^3 - 18*s12^2*s13 -
                54*s12*s13^2)*s23 + (-38*s12^2 - 32*s12*s13 + 2*s13^2)*s23^
                2 + (-18*s12 + 4*s13)*s23^3) + p1q^3*p2q*
             ((-20*s12^2 - 4*s12*s13 + 16*s13^2)*s23^2 + (-12*s12 + 24*s13)*
               s23^3 + 8*s23^4) + p1q*p2q^3*(-36*s12*s13^3 - 72*s12^3*s23 +
              (-78*s12^2 + 36*s12*s13 + 20*s13^2)*s23^2 + (-14*s12 + 30*s13)*
               s23^3 + 8*s23^4) + p1q^2*p2q^2*((-72*s12^3 - 36*s12^2*s13 +
                36*s12*s13^2)*s23 + (-116*s12^2 + 24*s12*s13 + 32*s13^2)*s23^
                2 + (-32*s12 + 44*s13)*s23^3 + 12*s23^4)))*
         Log(-s12 - s13 - s23))/(3*p2q*p3q^4*s12*s13*s23^2 +
         p3q^3*(3*p1q*p2q*s12*s13*s23^2 + 9*p2q^2*s12*s13*s23^2) +
         p3q^2*(6*p1q*p2q^2*s12*s13*s23^2 + 9*p2q^3*s12*s13*s23^2) +
         p3q*(3*p1q*p2q^3*s12*s13*s23^2 + 3*p2q^4*s12*s13*s23^2)) +
       ((p3q^4*(s12^3 + s12^2*s13 + s12^2*s23) +
          p2q^4*(-(s12^2*s13) - 3*s12*s13^2 - 2*s13^3 +
            (-3*s12*s13 - 4*s13^2)*s23 - 2*s13*s23^2) +
          p1q^3*p2q*(-18*s12^2*s13 - 38*s12*s13^2 - 20*s13^3 +
            (-12*s12^2 - 58*s12*s13 - 48*s13^2)*s23 + (-20*s12 - 36*s13)*
             s23^2 - 8*s23^3) + p1q^2*p2q^2*(-16*s12^2*s13 - 36*s12*s13^2 -
            20*s13^3 + (-9*s12^2 - 51*s12*s13 - 46*s13^2)*s23 +
            (-15*s12 - 32*s13)*s23^2 - 6*s23^3) +
          p1q^4*(-8*s12^2*s13 - 16*s12*s13^2 - 8*s13^3 +
            (-6*s12^2 - 26*s12*s13 - 20*s13^2)*s23 + (-10*s12 - 16*s13)*
             s23^2 - 4*s23^3) + p1q*p2q^3*(-7*s12^2*s13 - 17*s12*s13^2 -
            10*s13^3 + (-3*s12^2 - 22*s12*s13 - 22*s13^2)*s23 +
            (-5*s12 - 14*s13)*s23^2 - 2*s23^3) +
          p3q^3*(p2q*(s12^3 - s12^2*s13 - 2*s12*s13^2 + (s12^2 - 2*s12*s13)*
               s23) + p1q*(5*s12^3 + 7*s12^2*s13 + 2*s12*s13^2 +
              (6*s12^2 + 3*s12*s13)*s23 + s12*s23^2)) +
          p3q*(p2q^3*(s12^3 + 2*s12^2*s13 + 2*s12*s13^2 + s13^3 +
              (s12^2 + s12*s13 + s13^2)*s23) + p1q^2*p2q*(8*s12^3 -
              20*s12*s13^2 - 12*s13^3 + (-37*s12*s13 - 33*s13^2)*s23 +
              (-16*s12 - 29*s13)*s23^2 - 8*s23^3) +
            p1q^3*(6*s12^3 + 2*s12^2*s13 - 12*s12*s13^2 - 8*s13^3 +
              (2*s12^2 - 20*s12*s13 - 20*s13^2)*s23 + (-8*s12 - 16*s13)*s23^
                2 - 4*s23^3) + p1q*p2q^2*(5*s12^3 + 3*s12^2*s13 -
              5*s12*s13^2 - 3*s13^3 + (2*s12^2 - 14*s12*s13 - 12*s13^2)*s23 +
              (-7*s12 - 13*s13)*s23^2 - 4*s23^3)) +
          p3q^2*(p2q^2*(s12^3 - s12^2*s13 - s12*s13^2 + s13^3 +
              (s12^2 - 2*s12*s13 + s13^2)*s23) + p1q^2*(8*s12^3 +
              8*s12^2*s13 - 4*s12*s13^2 - 4*s13^3 + (7*s12^2 - 7*s12*s13 -
                10*s13^2)*s23 + (-3*s12 - 8*s13)*s23^2 - 2*s23^3) +
            p1q*p2q*(8*s12^3 + 6*s12^2*s13 - 4*s12*s13^2 - 2*s13^3 +
              (9*s12^2 - 6*s12*s13 - 7*s13^2)*s23 + (-s12 - 7*s13)*s23^2 -
              2*s23^3)))*Log(s12/(s12 + s13 + s23)))/(3*p2q*p3q^3*s12^2*s13 +
         p3q*(p1q*p2q^2*(-6*s12*s13^2 - 6*s12*s13*s23) +
           p1q^2*p2q*(-3*s12*s13^2 - 3*s12*s13*s23) +
           p2q^3*(-3*s12*s13^2 - 3*s12*s13*s23)) +
         p3q^2*(p1q*p2q*(3*s12^2*s13 - 3*s12*s13^2 - 3*s12*s13*s23) +
           p2q^2*(3*s12^2*s13 - 3*s12*s13^2 - 3*s12*s13*s23))) +
       ((p3q^6*((9*s12^3*s13 + 9*s12^2*s13^2)*s23 +
            (10*s12^2*s13 + s12*s13^2)*s23^2 + s12*s13*s23^3) +
          p2q^6*((-9*s12^2*s13^2 - 9*s12*s13^3)*s23 + (-8*s12*s13^2 + s13^3)*
             s23^2 + s13^2*s23^3) + p1q^3*p2q^3*
           ((18*s12^3*s13 + 18*s12^2*s13^2)*s23 + (-18*s12^3 + 36*s12^2*s13 +
              38*s12*s13^2 + 2*s13^3)*s23^2 + (-36*s12^2 + 14*s12*s13 -
              2*s13^2)*s23^3 + (-18*s12 - 4*s13)*s23^4) +
          p1q^2*p2q^4*((18*s12^3*s13 - 18*s12*s13^3)*s23 +
            (-9*s12^3 + 45*s12^2*s13 + 22*s12*s13^2 + 4*s13^3)*s23^2 +
            (-18*s12^2 + 24*s12*s13 + s13^2)*s23^3 + (-9*s12 - 3*s13)*
             s23^4) + p1q^4*p2q^2*((-18*s12^3 - 18*s12^2*s13)*s23^2 +
            (-36*s12^2 - 20*s12*s13 - 2*s13^2)*s23^3 + (-18*s12 - 2*s13)*
             s23^4) + p1q*p2q^5*((9*s12^3*s13 - 9*s12^2*s13^2 - 18*s12*s13^3)*
             s23 + (27*s12^2*s13 + 3*s12*s13^2 + 3*s13^3)*s23^2 +
            (17*s12*s13 + 2*s13^2)*s23^3 - s13*s23^4) +
          p3q^4*(p2q^2*(36*s12^4*s13 - 108*s12^3*s13^2 + (36*s12^4 -
                45*s12^3*s13 - 117*s12^2*s13^2)*s23 + (48*s12^3 -
                81*s12^2*s13 - 37*s12*s13^2 - 5*s13^3)*s23^2 +
              (12*s12^2 - 40*s12*s13 + 3*s13^2)*s23^3) +
            p1q*p2q*(72*s12^4*s13 + (54*s12^4 + 99*s12^3*s13 - 36*s12^2*
                 s13^2 - 9*s12*s13^3)*s23 + (82*s12^3 - 47*s12^2*s13 -
                86*s12*s13^2 - s13^3)*s23^2 + (18*s12^2 - 93*s12*s13)*s23^3 +
              (-10*s12 - 3*s13)*s23^4) + p1q^2*((36*s12^3*s13 +
                36*s12^2*s13^2)*s23 + (13*s12^2*s13 - 23*s12*s13^2)*s23^2 +
              (-26*s12*s13 - 3*s13^2)*s23^3 - 3*s13*s23^4)) +
          p3q^3*(p1q^2*p2q*(36*s12^4*s13 + (54*s12^4 - 90*s12^2*s13^2)*s23 +
              (54*s12^3 - 253*s12^2*s13 - 177*s12*s13^2)*s23^2 +
              (-46*s12^2 - 237*s12*s13 - 10*s13^2)*s23^3 + (-46*s12 - 12*s13)*
               s23^4) + p1q*p2q^2*(36*s12^4*s13 - 180*s12^3*s13^2 +
              (90*s12^4 - 198*s12^3*s13 - 279*s12^2*s13^2 + 45*s12*s13^3)*
               s23 + (128*s12^3 - 341*s12^2*s13 - 100*s12*s13^2 - 6*s13^3)*
               s23^2 + (26*s12^2 - 171*s12*s13 - 2*s13^2)*s23^3 +
              (-12*s12 - 8*s13)*s23^4) + p1q^3*((18*s12^3*s13 +
                18*s12^2*s13^2)*s23 + (-16*s12^2*s13 - 34*s12*s13^2)*s23^2 +
              (-38*s12*s13 - 4*s13^2)*s23^3 - 4*s13*s23^4) +
            p2q^3*(-108*s12^3*s13^2 + 108*s12^2*s13^3 + (27*s12^4 -
                117*s12^3*s13 + 27*s12^2*s13^2 + 63*s12*s13^3)*s23 +
              (30*s12^3 - 67*s12^2*s13 + 43*s12*s13^2 - 10*s13^3)*s23^2 +
              (3*s12^2 - 24*s12*s13)*s23^3 - 2*s13*s23^4)) +
          p3q^2*(p1q^2*p2q^2*(-72*s12^3*s13^2 + (72*s12^4 - 198*s12^3*s13 -
                180*s12^2*s13^2 + 90*s12*s13^3)*s23 + (54*s12^3 -
                428*s12^2*s13 - 74*s12*s13^2 + 4*s13^3)*s23^2 +
              (-92*s12^2 - 264*s12*s13 - 10*s13^2)*s23^3 + (-74*s12 - 18*s13)*
               s23^4) + p1q^3*p2q*((18*s12^4 - 36*s12^3*s13 - 36*s12^2*
                 s13^2 + 18*s12*s13^3)*s23 + (-18*s12^3 - 212*s12^2*s13 -
                102*s12*s13^2 + 2*s13^3)*s23^2 + (-90*s12^2 - 188*s12*s13 -
                10*s13^2)*s23^3 + (-54*s12 - 12*s13)*s23^4) +
            p1q*p2q^3*(-72*s12^3*s13^2 + 144*s12^2*s13^3 + (45*s12^4 -
                171*s12^3*s13 + 126*s12^2*s13^2 + 198*s12*s13^3)*s23 +
              (55*s12^3 - 106*s12^2*s13 + 208*s12*s13^2 - 6*s13^3)*s23^2 +
              (7*s12^2 - 11*s12*s13 - 6*s13^2)*s23^3 + (-3*s12 - 12*s13)*s23^
                4) + p2q^4*(108*s12^2*s13^3 - 36*s12*s13^4 +
              (9*s12^4 - 27*s12^3*s13 + 144*s12^2*s13^2)*s23 +
              (10*s12^3 + 31*s12^2*s13 + 38*s12*s13^2 - 8*s13^3)*s23^2 +
              (s12^2 - 2*s12*s13 - 4*s13^2)*s23^3 - 4*s13*s23^4) +
            p1q^4*((-18*s12^2*s13 - 18*s12*s13^2)*s23^2 + (-20*s12*s13 -
                2*s13^2)*s23^3 - 2*s13*s23^4)) +
          p3q*(p1q^3*p2q^2*((18*s12^4 - 36*s12^3*s13 - 36*s12^2*s13^2 +
                18*s12*s13^3)*s23 + (-36*s12^3 - 160*s12^2*s13 -
                30*s12*s13^2 + 4*s13^3)*s23^2 + (-126*s12^2 - 136*s12*s13 -
                8*s13^2)*s23^3 + (-72*s12 - 12*s13)*s23^4) +
            p1q^2*p2q^3*(36*s12^2*s13^3 + (18*s12^4 - 36*s12^3*s13 +
                90*s12^2*s13^2 + 108*s12*s13^3)*s23 + (-9*s12^3 -
                9*s12^2*s13 + 174*s12*s13^2 + 8*s13^3)*s23^2 +
              (-64*s12^2 + 7*s12*s13 - 2*s13^2)*s23^3 + (-37*s12 - 12*s13)*
               s23^4) + p1q*p2q^4*(36*s12^2*s13^3 - 36*s12*s13^4 +
              (9*s12^4 + 117*s12^2*s13^2 + 18*s12*s13^3)*s23 +
              (9*s12^3 + 86*s12^2*s13 + 123*s12*s13^2 + 2*s13^3)*s23^2 +
              (-s12^2 + 55*s12*s13 - s13^2)*s23^3 + (-s12 - 7*s13)*s23^4) +
            p1q^4*p2q*((-18*s12^3 - 36*s12^2*s13 - 18*s12*s13^2)*s23^2 +
              (-36*s12^2 - 40*s12*s13 - 4*s13^2)*s23^3 + (-18*s12 - 4*s13)*
               s23^4) + p2q^5*(-36*s12*s13^4 + (9*s12^2*s13^2 - 63*s12*s13^3)*
               s23 + (16*s12^2*s13 - 26*s12*s13^2 - s13^3)*s23^2 +
              (-2*s12*s13 - s13^2)*s23^3 - 2*s13*s23^4)) +
          p3q^5*(p2q*(36*s12^4*s13 + (18*s12^4 + 54*s12^3*s13 -
                9*s12^2*s13^2 - 9*s12*s13^3)*s23 + (28*s12^3 + 11*s12^2*s13 -
                23*s12*s13^2 - s13^3)*s23^2 + (10*s12^2 - 15*s12*s13 + s13^2)*
               s23^3) + p1q*((27*s12^3*s13 + 27*s12^2*s13^2)*s23 +
              (21*s12^2*s13 - 6*s12*s13^2)*s23^2 + (-7*s12*s13 - s13^2)*s23^
                3 - s13*s23^4)))*Log(s13/(s12 + s13 + s23)))/
        (p2q*p3q^5*(3*s12^2*s13*s23^2 + 3*s12*s13*s23^3) +
         p3q*(-3*p2q^5*s12*s13^2*s23^2 + p1q^2*p2q^3*(3*s12^2*s13*s23^2 +
             3*s12*s13*s23^3) + p1q*p2q^4*((3*s12^2*s13 - 3*s12*s13^2)*
              s23^2 + 3*s12*s13*s23^3)) +
         p3q^4*(p1q*p2q*(6*s12^2*s13*s23^2 + 6*s12*s13*s23^3) +
           p2q^2*((9*s12^2*s13 - 3*s12*s13^2)*s23^2 + 9*s12*s13*s23^3)) +
         p3q^2*(p2q^4*((3*s12^2*s13 - 9*s12*s13^2)*s23^2 + 3*s12*s13*s23^3) +
           p1q^2*p2q^2*(6*s12^2*s13*s23^2 + 6*s12*s13*s23^3) +
           p1q*p2q^3*((12*s12^2*s13 - 6*s12*s13^2)*s23^2 +
             12*s12*s13*s23^3)) + p3q^3*(p1q^2*p2q*(3*s12^2*s13*s23^2 +
             3*s12*s13*s23^3) + p2q^3*((9*s12^2*s13 - 9*s12*s13^2)*s23^2 +
             9*s12*s13*s23^3) + p1q*p2q^2*((15*s12^2*s13 - 3*s12*s13^2)*
              s23^2 + 15*s12*s13*s23^3))) +
       ((p2q^6*((-3*s12^2*s13 - 6*s12*s13^2 - 3*s13^3)*s23 +
            (-3*s12*s13 - 3*s13^2)*s23^2) +
          p3q^6*((-6*s12^3 - 24*s12^2*s13 - 30*s12*s13^2 - 12*s13^3)*s23 +
            (-15*s12^2 - 39*s12*s13 - 24*s13^2)*s23^2 + (-9*s12 - 12*s13)*
             s23^3) + p1q*p2q^5*((-6*s12^2*s13 - 12*s12*s13^2 - 6*s13^3)*
             s23 + (3*s12^2 + 3*s12*s13)*s23^2 + (3*s12 + 6*s13)*s23^3) +
          p1q^4*p2q^2*((-6*s12 - 6*s13)*s23^3 - 6*s23^4) +
          p1q^3*p2q^3*((6*s12^2 + 18*s12*s13 + 12*s13^2)*s23^2 +
            6*s13*s23^3 - 6*s23^4) + p1q^2*p2q^4*
           ((-6*s12^2*s13 - 12*s12*s13^2 - 6*s13^3)*s23 +
            (6*s12^2 + 12*s12*s13 + 6*s13^2)*s23^2 + (3*s12 + 9*s13)*s23^3 -
            3*s23^4) + p3q*(p1q^3*p2q^2*((30*s12^2 + 30*s12*s13)*s23^2 +
              30*s12*s23^3) + p2q^5*(-12*s12*s13^3 - 12*s13^4 +
              (-9*s12^3 - 24*s12^2*s13 - 33*s12*s13^2 - 30*s13^3)*s23 +
              (-15*s12^2 - 27*s12*s13 - 24*s13^2)*s23^2 + (-6*s12 - 6*s13)*
               s23^3) + p1q^2*p2q^3*((-18*s12^3 - 36*s12^2*s13 -
                6*s12*s13^2 + 12*s13^3)*s23 + (12*s12^2 + 24*s12*s13 +
                24*s13^2)*s23^2 + (33*s12 + 15*s13)*s23^3 + 3*s23^4) +
            p1q*p2q^4*(-12*s12*s13^3 - 12*s13^4 + (-18*s12^3 - 36*s12^2*s13 -
                18*s12*s13^2 - 12*s13^3)*s23 + (-9*s12^2 + 6*s12*s13 +
                15*s13^2)*s23^2 + (15*s12 + 21*s13)*s23^3 + 6*s23^4)) +
          p3q^5*(p2q*(-12*s12^3*s13 - 12*s12^2*s13^2 + (-36*s12^3 -
                126*s12^2*s13 - 120*s12*s13^2 - 42*s13^3)*s23 +
              (-72*s12^2 - 159*s12*s13 - 87*s13^2)*s23^2 + (-36*s12 - 45*s13)*
               s23^3) + p1q*((-12*s12^3 - 48*s12^2*s13 - 60*s12*s13^2 -
                24*s13^3)*s23 + (-27*s12^2 - 69*s12*s13 - 42*s13^2)*s23^2 +
              (-6*s12 - 9*s13)*s23^3 + 9*s23^4)) +
          p3q^4*(p2q^2*(-24*s12^3*s13 + 24*s12*s13^3 + (-78*s12^3 -
                228*s12^2*s13 - 162*s12*s13^2 - 60*s13^3)*s23 +
              (-141*s12^2 - 261*s12*s13 - 132*s13^2)*s23^2 +
              (-63*s12 - 72*s13)*s23^3) + p1q^2*((-12*s12^3 - 48*s12^2*s13 -
                60*s12*s13^2 - 24*s13^3)*s23 + (-24*s12^2 - 60*s12*s13 -
                36*s13^2)*s23^2 + (9*s12 + 9*s13)*s23^3 + 21*s23^4) +
            p1q*p2q*(-12*s12^3*s13 - 12*s12^2*s13^2 + (-60*s12^3 -
                180*s12^2*s13 - 168*s12*s13^2 - 60*s13^3)*s23 +
              (-87*s12^2 - 186*s12*s13 - 111*s13^2)*s23^2 + (3*s12 - 21*s13)*
               s23^3 + 30*s23^4)) + p3q^2*(p2q^4*(24*s12^2*s13^2 - 24*s13^4 +
              (-42*s12^3 - 87*s12^2*s13 - 60*s12*s13^2 - 63*s13^3)*s23 +
              (-72*s12^2 - 105*s12*s13 - 69*s13^2)*s23^2 + (-30*s12 - 30*s13)*
               s23^3) + p1q^4*((6*s12 + 6*s13)*s23^3 + 6*s23^4) +
            p1q*p2q^3*(24*s12^2*s13^2 + 12*s12*s13^3 - 12*s13^4 +
              (-72*s12^3 - 138*s12^2*s13 - 48*s12*s13^2 - 18*s13^3)*s23 +
              (-66*s12^2 - 81*s12*s13 - 27*s13^2)*s23^2 + (30*s12 + 3*s13)*
               s23^3 + 24*s23^4) + p1q^2*p2q^2*((-48*s12^3 - 114*s12^2*s13 -
                84*s12*s13^2 - 18*s13^3)*s23 + (-6*s12^2 - 72*s12*s13 -
                66*s13^2)*s23^2 + (72*s12 - 18*s13)*s23^3 + 30*s23^4) +
            p1q^3*p2q*((30*s12^2 + 30*s12*s13)*s23^2 + (60*s12 + 30*s13)*s23^
                3 + 30*s23^4)) + p3q^3*(p2q^3*(-12*s12^3*s13 +
              36*s12^2*s13^2 + 36*s12*s13^3 - 12*s13^4 + (-81*s12^3 -
                192*s12^2*s13 - 105*s12*s13^2 - 66*s13^3)*s23 +
              (-141*s12^2 - 222*s12*s13 - 117*s13^2)*s23^2 +
              (-60*s12 - 63*s13)*s23^3) + p1q^3*((6*s12^2 + 18*s12*s13 +
                12*s13^2)*s23^2 + (30*s12 + 36*s13)*s23^3 + 24*s23^4) +
            p1q*p2q^2*(-12*s12^3*s13 + 12*s12^2*s13^2 + 24*s12*s13^3 +
              (-102*s12^3 - 240*s12^2*s13 - 150*s12*s13^2 - 48*s13^3)*s23 +
              (-114*s12^2 - 201*s12*s13 - 111*s13^2)*s23^2 +
              (27*s12 - 24*s13)*s23^3 + 39*s23^4) + p1q^2*p2q*
             ((-42*s12^3 - 108*s12^2*s13 - 102*s12*s13^2 - 36*s13^3)*s23 +
              (-36*s12^2 - 96*s12*s13 - 72*s13^2)*s23^2 + (51*s12 + 9*s13)*
               s23^3 + 45*s23^4)))*Log(s23/(s12 + s13 + s23)))/
        (p2q*p3q^5*(s12*s13 + s13^2)*s23^2 +
         p3q^3*(p2q^3*(6*s12*s13 + 6*s13^2)*s23^2 - p1q^2*p2q*s13*s23^3 +
           p1q*p2q^2*((3*s12*s13 + 3*s13^2)*s23^2 - 3*s13*s23^3)) +
         p3q^2*(p2q^4*(4*s12*s13 + 4*s13^2)*s23^2 - 2*p1q^2*p2q^2*s13*s23^3 +
           p1q*p2q^3*((3*s12*s13 + 3*s13^2)*s23^2 - 3*s13*s23^3)) +
         p3q^4*(p2q^2*(4*s12*s13 + 4*s13^2)*s23^2 +
           p1q*p2q*((s12*s13 + s13^2)*s23^2 - s13*s23^3)) +
         p3q*(p2q^5*(s12*s13 + s13^2)*s23^2 - p1q^2*p2q^3*s13*s23^3 +
           p1q*p2q^4*((s12*s13 + s13^2)*s23^2 - s13*s23^3)))) +
     Log(p3q/(p1q + p2q + p3q))*
      ((p3q^5*((2*s12^2 + 2*s12*s13)*s23^2 + 2*s12*s23^3) +
         p2q^5*((-36*s12^2*s13 - 54*s12*s13^2 - 18*s13^3)*s23 +
           (-70*s12*s13 - 52*s13^2)*s23^2 - 34*s13*s23^3) +
         p1q*p2q^4*((4*s12^2 - 10*s12*s13 - 14*s13^2)*s23^2 +
           (6*s12 - 12*s13)*s23^3 + 2*s23^4) +
         p3q^4*(p2q*(-36*s12^3*s13 + (-90*s12^2*s13 - 54*s12*s13^2 - 36*
                s13^3)*s23 + (2*s12^2 - 86*s12*s13 - 38*s13^2)*s23^2 +
             (6*s12 - 34*s13)*s23^3) + p1q*((4*s12^2 + 8*s12*s13 + 4*s13^2)*
              s23^2 + (6*s12 + 6*s13)*s23^3 + 2*s23^4)) +
         p3q^3*(p2q^2*(-36*s12^3*s13 + 72*s12^2*s13^2 +
             (-144*s12^2*s13 - 90*s12*s13^2 - 90*s13^3)*s23 +
             (-4*s12^2 - 214*s12*s13 - 96*s13^2)*s23^2 + (8*s12 - 102*s13)*
              s23^3) + p1q*p2q*(-36*s12^3*s13 - 72*s12^2*s13*s23 +
             (8*s12^2 - 34*s12*s13 + 26*s13^2)*s23^2 + 18*s12*s23^3 +
             6*s23^4)) + p3q*(p2q^4*(-36*s12*s13^3 + (-90*s12^2*s13 - 162*s12*
                s13^2 - 72*s13^3)*s23 + (-2*s12^2 - 194*s12*s13 - 142*s13^2)*
              s23^2 + (2*s12 - 102*s13)*s23^3) + p1q*p2q^3*(-36*s12*s13^3 +
             (8*s12^2 - 16*s12*s13 + 8*s13^2)*s23^2 + (18*s12 - 18*s13)*
              s23^3 + 6*s23^4)) + p3q^2*(p2q^3*(72*s12^2*s13^2 -
             36*s12*s13^3 + (-108*s12^2*s13 - 144*s12*s13^2 - 108*s13^3)*
              s23 + (-6*s12^2 - 250*s12*s13 - 148*s13^2)*s23^2 +
             (6*s12 - 136*s13)*s23^3) + p1q*p2q^2*(72*s12^2*s13^2 +
             72*s12*s13^2*s23 + (8*s12^2 - 12*s12*s13 + 44*s13^2)*s23^2 +
             (24*s12 - 12*s13)*s23^3 + 8*s23^4)))/
        (3*p2q*p3q^4*s12*s13*s23^2 + p3q^3*(3*p1q*p2q*s12*s13*s23^2 +
           9*p2q^2*s12*s13*s23^2) + p3q^2*(6*p1q*p2q^2*s12*s13*s23^2 +
           9*p2q^3*s12*s13*s23^2) + p3q*(3*p1q*p2q^3*s12*s13*s23^2 +
           3*p2q^4*s12*s13*s23^2)) +
       ((p2q^4*(-10*s12^2*s13^2 - 20*s12*s13^3 - 10*s13^4 +
            (-11*s12*s13^2 - 11*s13^3)*s23 - s13^2*s23^2) +
          p3q^4*(8*s12^4 + 16*s12^3*s13 + 8*s12^2*s13^2 +
            (6*s12^3 + 5*s12^2*s13 - s12*s13^2)*s23 +
            (-12*s12^2 - 11*s12*s13)*s23^2 - 10*s12*s23^3) +
          p1q*p2q^3*(10*s12^3*s13 - 30*s12*s13^3 - 20*s13^4 +
            (58*s12^2*s13 + 83*s12*s13^2 + 25*s13^3)*s23 +
            (77*s12*s13 + 74*s13^2)*s23^2 + 29*s13*s23^3) +
          p1q^4*((-92*s12^3 - 184*s12^2*s13 - 92*s12*s13^2)*s23 +
            (-240*s12^2 - 314*s12*s13 - 74*s13^2)*s23^2 +
            (-204*s12 - 130*s13)*s23^3 - 56*s23^4) +
          p1q^3*p2q*(20*s12^3*s13 + 40*s12^2*s13^2 + 20*s12*s13^3 +
            (-92*s12^3 - 68*s12^2*s13 + 118*s12*s13^2 + 94*s13^3)*s23 +
            (-240*s12^2 - 160*s12*s13 + 78*s13^2)*s23^2 + (-204*s12 - 72*s13)*
             s23^3 - 56*s23^4) + p1q^2*p2q^2*(20*s12^3*s13 + 20*s12^2*s13^2 -
            20*s12*s13^3 - 20*s13^4 + (-46*s12^3 + 24*s12^2*s13 +
              142*s12*s13^2 + 72*s13^3)*s23 + (-120*s12^2 - 3*s12*s13 +
              113*s13^2)*s23^2 + (-102*s12 - 7*s13)*s23^3 - 28*s23^4) +
          p3q^2*(p2q^2*(8*s12^4 + 20*s12^3*s13 + 6*s12^2*s13^2 -
              16*s12*s13^3 - 10*s13^4 + (33*s12^3 + 51*s12^2*s13 +
                27*s12*s13^2 + 9*s13^3)*s23 + (33*s12^2 + 42*s12*s13 +
                39*s13^2)*s23^2 + (8*s12 + 20*s13)*s23^3) +
            p1q^2*(32*s12^4 + 64*s12^3*s13 + 32*s12^2*s13^2 +
              (-114*s12^3 - 256*s12^2*s13 - 142*s12*s13^2)*s23 +
              (-408*s12^2 - 515*s12*s13 - 111*s13^2)*s23^2 +
              (-346*s12 - 195*s13)*s23^3 - 84*s23^4) +
            p1q*p2q*(32*s12^4 + 78*s12^3*s13 + 60*s12^2*s13^2 +
              14*s12*s13^3 + (49*s12^3 + 111*s12^2*s13 + 147*s12*s13^2 +
                85*s13^3)*s23 + (-72*s12^2 - 48*s12*s13 + 78*s13^2)*s23^2 +
              (-145*s12 - 63*s13)*s23^3 - 56*s23^4)) +
          p3q^3*(p2q*(16*s12^4 + 34*s12^3*s13 + 20*s12^2*s13^2 +
              2*s12*s13^3 + (57*s12^3 + 96*s12^2*s13 + 58*s12*s13^2 +
                19*s13^3)*s23 + (57*s12^2 + 63*s12*s13 + 29*s13^2)*s23^2 +
              (16*s12 + 10*s13)*s23^3) + p1q*(24*s12^4 + 48*s12^3*s13 +
              24*s12^2*s13^2 + (-28*s12^3 - 77*s12^2*s13 - 49*s12*s13^2)*
               s23 + (-156*s12^2 - 190*s12*s13 - 37*s13^2)*s23^2 +
              (-132*s12 - 65*s13)*s23^3 - 28*s23^4)) +
          p3q*(p2q^3*(2*s12^3*s13 - 16*s12^2*s13^2 - 38*s12*s13^3 -
              20*s13^4 + (-4*s12^2*s13 - 25*s12*s13^2 - 21*s13^3)*s23 +
              (4*s12*s13 + 9*s13^2)*s23^2 + 10*s13*s23^3) +
            p1q^3*(16*s12^4 + 32*s12^3*s13 + 16*s12^2*s13^2 +
              (-172*s12^3 - 358*s12^2*s13 - 186*s12*s13^2)*s23 +
              (-504*s12^2 - 650*s12*s13 - 148*s13^2)*s23^2 +
              (-428*s12 - 260*s13)*s23^3 - 112*s23^4) +
            p1q^2*p2q*(16*s12^4 + 56*s12^3*s13 + 64*s12^2*s13^2 +
              24*s12*s13^3 + (-100*s12^3 - 88*s12^2*s13 + 144*s12*s13^2 +
                132*s13^3)*s23 + (-369*s12^2 - 317*s12*s13 + 80*s13^2)*s23^
                2 + (-365*s12 - 164*s13)*s23^3 - 112*s23^4) +
            p1q*p2q^2*(8*s12^4 + 40*s12^3*s13 + 36*s12^2*s13^2 -
              16*s12*s13^3 - 20*s13^4 + (-4*s12^3 + 84*s12^2*s13 +
                180*s12*s13^2 + 92*s13^3)*s23 + (-69*s12^2 + 66*s12*s13 +
                171*s13^2)*s23^2 + (-85*s12 + 31*s13)*s23^3 - 28*s23^4)))*
         Log((p1q + p3q)/(p1q + p2q + p3q)))/
        (p2q*p3q^3*(27*s12^2*s13*s23 + 27*s12*s13*s23^2) +
         p3q*(-27*p2q^3*s12*s13^2*s23 + p1q^2*p2q*(27*s12^2*s13*s23 +
             27*s12*s13*s23^2) + p1q*p2q^2*((27*s12^2*s13 - 27*s12*s13^2)*
              s23 + 27*s12*s13*s23^2)) +
         p3q^2*(p2q^2*((27*s12^2*s13 - 27*s12*s13^2)*s23 +
             27*s12*s13*s23^2) + p1q*p2q*(54*s12^2*s13*s23 +
             54*s12*s13*s23^2))) +
       ((p3q^6*((-6*s12^4 - 15*s12^3*s13 - 12*s12^2*s13^2 - 3*s12*s13^3)*
             s23 + (-12*s12^3 - 21*s12^2*s13 - 9*s12*s13^2)*s23^2 +
            (-6*s12^2 - 6*s12*s13)*s23^3) +
          p2q^6*((12*s12^3*s13 + 30*s12^2*s13^2 + 24*s12*s13^3 + 6*s13^4)*
             s23 + (24*s12^2*s13 + 39*s12*s13^2 + 15*s13^3)*s23^2 +
            (12*s12*s13 + 9*s13^2)*s23^3) + p1q^3*p2q^3*
           ((-12*s12^2*s13 - 18*s12*s13^2 - 6*s13^3)*s23^2 +
            (-36*s12*s13 - 30*s13^2)*s23^3 - 24*s13*s23^4) +
          p1q^2*p2q^4*((24*s12^3*s13 + 60*s12^2*s13^2 + 48*s12*s13^3 +
              12*s13^4)*s23 + (36*s12^2*s13 + 60*s12*s13^2 + 24*s13^3)*
             s23^2 + (-9*s12*s13 - 9*s13^2)*s23^3 - 21*s13*s23^4) +
          p1q*p2q^5*((24*s12^3*s13 + 60*s12^2*s13^2 + 48*s12*s13^3 +
              12*s13^4)*s23 + (42*s12^2*s13 + 69*s12*s13^2 + 27*s13^3)*
             s23^2 + (9*s12*s13 + 6*s13^2)*s23^3 - 9*s13*s23^4) +
          p1q^4*p2q^2*((-6*s12*s13 - 6*s13^2)*s23^3 - 6*s13*s23^4) +
          p3q^5*(p2q*(12*s12^4*s13 + 12*s12^3*s13^2 + (-30*s12^4 -
                60*s12^3*s13 - 57*s12^2*s13^2 - 6*s12*s13^3 + 9*s13^4)*s23 +
              (-60*s12^3 - 96*s12^2*s13 - 33*s12*s13^2 + 15*s13^3)*s23^2 +
              (-30*s12^2 - 24*s12*s13 + 6*s13^2)*s23^3) +
            p1q*((-12*s12^4 - 30*s12^3*s13 - 24*s12^2*s13^2 - 6*s12*s13^3)*
               s23 + (-18*s12^3 - 36*s12^2*s13 - 21*s12*s13^2 - 3*s13^3)*s23^
                2 + (-6*s12*s13 - 3*s13^2)*s23^3 + 6*s12*s23^4)) +
          p3q*(p2q^5*(12*s12^2*s13^3 + 12*s12*s13^4 + (-6*s12^4 +
                24*s12^3*s13 + 102*s12^2*s13^2 + 120*s12*s13^3 + 36*s13^4)*
               s23 + (-12*s12^3 + 63*s12^2*s13 + 147*s12*s13^2 + 72*s13^3)*
               s23^2 + (-6*s12^2 + 39*s12*s13 + 36*s13^2)*s23^3) +
            p1q^2*p2q^3*((-12*s12^4 + 66*s12^2*s13^2 + 96*s12*s13^3 +
                42*s13^4)*s23 + (-12*s12^3 + 48*s12^2*s13 + 84*s12*s13^2 +
                36*s13^3)*s23^2 + (12*s12^2 + 3*s12*s13 - 51*s13^2)*s23^3 +
              (12*s12 - 45*s13)*s23^4) + p1q*p2q^4*(12*s12^2*s13^3 +
              12*s12*s13^4 + (-12*s12^4 + 24*s12^3*s13 + 132*s12^2*s13^2 +
                168*s12*s13^3 + 60*s13^4)*s23 + (-18*s12^3 + 75*s12^2*s13 +
                168*s12*s13^2 + 87*s13^3)*s23^2 + (21*s12*s13 - 3*s13^2)*s23^
                3 + (6*s12 - 30*s13)*s23^4) + p1q^3*p2q^2*
             ((12*s12^3 + 24*s12^2*s13 - 18*s12*s13^2 - 30*s13^3)*s23^2 +
              (24*s12^2 - 6*s12*s13 - 60*s13^2)*s23^3 + (12*s12 - 30*s13)*s23^
                4)) + p3q^2*(p2q^4*(-24*s12^3*s13^2 + 24*s12*s13^4 +
              (-30*s12^4 - 30*s12^3*s13 + 72*s12^2*s13^2 + 198*s12*s13^3 +
                78*s13^4)*s23 + (-60*s12^3 + 12*s12^2*s13 + 201*s12*s13^2 +
                141*s13^3)*s23^2 + (-30*s12^2 + 42*s12*s13 + 63*s13^2)*s23^
                3) + p1q^3*p2q*((24*s12^3 + 48*s12^2*s13 - 6*s12*s13^2 -
                30*s13^3)*s23^2 + (48*s12^2 + 48*s12*s13 - 30*s13^2)*s23^3 +
              24*s12*s23^4) + p1q*p2q^3*(-24*s12^3*s13^2 - 12*s12^2*s13^3 +
              12*s12*s13^4 + (-48*s12^4 - 96*s12^3*s13 + 6*s12^2*s13^2 +
                192*s12*s13^3 + 102*s13^4)*s23 + (-72*s12^3 - 33*s12^2*s13 +
                129*s12*s13^2 + 114*s13^3)*s23^2 + (24*s12*s13 - 27*s13^2)*
               s23^3 + (24*s12 - 39*s13)*s23^4) + p1q^2*p2q^2*
             ((-36*s12^4 - 90*s12^3*s13 - 24*s12^2*s13^2 + 78*s12*s13^3 +
                48*s13^4)*s23 + (-36*s12^3 - 6*s12^2*s13 + 36*s12*s13^2 +
                6*s13^3)*s23^2 + (36*s12^2 + 54*s12*s13 - 72*s13^2)*s23^3 +
              (36*s12 - 30*s13)*s23^4) + p1q^4*((6*s12*s13 + 6*s13^2)*s23^3 +
              6*s13*s23^4)) + p3q^4*(p2q^2*(24*s12^4*s13 - 24*s12^2*s13^3 +
              (-60*s12^4 - 117*s12^3*s13 - 120*s12^2*s13^2 + 27*s12*s13^3 +
                42*s13^4)*s23 + (-120*s12^3 - 171*s12^2*s13 - 15*s12*s13^2 +
                72*s13^3)*s23^2 + (-60*s12^2 - 30*s12*s13 + 30*s13^2)*s23^
                3) + p1q*p2q*(12*s12^4*s13 + 12*s12^3*s13^2 +
              (-48*s12^4 - 132*s12^3*s13 - 126*s12^2*s13^2 - 12*s12*s13^3 +
                18*s13^4)*s23 + (-72*s12^3 - 159*s12^2*s13 - 78*s12*s13^2 +
                9*s13^3)*s23^2 + (-21*s12*s13 - 15*s13^2)*s23^3 +
              (24*s12 - 6*s13)*s23^4) + p1q^2*((-12*s12^4 - 30*s12^3*s13 -
                24*s12^2*s13^2 - 6*s12*s13^3)*s23 + (-12*s12^3 -
                30*s12^2*s13 - 24*s12*s13^2 - 6*s13^3)*s23^2 +
              (12*s12^2 + 3*s12*s13 - 3*s13^2)*s23^3 + (12*s12 + 3*s13)*s23^
                4)) + p3q^3*(p2q^3*(12*s12^4*s13 - 36*s12^3*s13^2 -
              36*s12^2*s13^3 + 12*s12*s13^4 + (-60*s12^4 - 114*s12^3*s13 -
                75*s12^2*s13^2 + 132*s12*s13^3 + 81*s13^4)*s23 +
              (-120*s12^3 - 123*s12^2*s13 + 102*s12*s13^2 + 141*s13^3)*s23^
                2 + (-60*s12^2 + 3*s12*s13 + 60*s13^2)*s23^3) +
            p1q*p2q^2*(12*s12^4*s13 - 12*s12^3*s13^2 - 24*s12^2*s13^3 +
              (-72*s12^4 - 198*s12^3*s13 - 168*s12^2*s13^2 + 66*s12*s13^3 +
                72*s13^4)*s23 + (-108*s12^3 - 189*s12^2*s13 - 27*s12*s13^2 +
                66*s13^3)*s23^2 + (-3*s12*s13 - 30*s13^2)*s23^3 +
              (36*s12 - 24*s13)*s23^4) + p1q^2*p2q*
             ((-36*s12^4 - 120*s12^3*s13 - 102*s12^2*s13^2 + 18*s13^4)*s23 +
              (-36*s12^3 - 96*s12^2*s13 - 60*s12*s13^2 - 12*s13^3)*s23^2 +
              (36*s12^2 + 21*s12*s13 - 33*s13^2)*s23^3 + (36*s12 - 3*s13)*s23^
                4) + p1q^3*((12*s12^3 + 12*s12^2*s13 - 6*s12*s13^2 - 6*s13^3)*
               s23^2 + (24*s12^2 + 18*s12*s13)*s23^3 + (12*s12 + 6*s13)*s23^
                4)))*Log((p2q + p3q)/(p1q + p2q + p3q)))/
        (p2q*p3q^5*(s12^2*s13 + s12*s13^2)*s23^2 +
         p3q^3*(p2q^3*(6*s12^2*s13 + 6*s12*s13^2)*s23^2 - p1q^2*p2q*s12*s13*
            s23^3 + p1q*p2q^2*((3*s12^2*s13 + 3*s12*s13^2)*s23^2 -
             3*s12*s13*s23^3)) + p3q^2*(p2q^4*(4*s12^2*s13 + 4*s12*s13^2)*
            s23^2 - 2*p1q^2*p2q^2*s12*s13*s23^3 + p1q*p2q^3*
            ((3*s12^2*s13 + 3*s12*s13^2)*s23^2 - 3*s12*s13*s23^3)) +
         p3q^4*(p2q^2*(4*s12^2*s13 + 4*s12*s13^2)*s23^2 +
           p1q*p2q*((s12^2*s13 + s12*s13^2)*s23^2 - s12*s13*s23^3)) +
         p3q*(p2q^5*(s12^2*s13 + s12*s13^2)*s23^2 - p1q^2*p2q^3*s12*s13*
            s23^3 + p1q*p2q^4*((s12^2*s13 + s12*s13^2)*s23^2 -
             s12*s13*s23^3))) +
       ((p3q^5*((2*s12^2 + 2*s12*s13)*s23^2 + 2*s12*s23^3) +
          p2q^5*((-36*s12^2*s13 - 54*s12*s13^2 - 18*s13^3)*s23 +
            (-70*s12*s13 - 52*s13^2)*s23^2 - 34*s13*s23^3) +
          p1q*p2q^4*((-72*s12^2*s13 - 108*s12*s13^2 - 36*s13^3)*s23 +
            (4*s12^2 - 150*s12*s13 - 118*s13^2)*s23^2 + (6*s12 - 80*s13)*
             s23^3 + 2*s23^4) + p1q^2*p2q^3*((-72*s12^2*s13 - 108*s12*s13^2 -
              36*s13^3)*s23 + (8*s12^2 - 160*s12*s13 - 132*s13^2)*s23^2 +
            (12*s12 - 92*s13)*s23^3 + 4*s23^4) + p1q^3*p2q^2*
           ((8*s12^2 - 20*s12*s13 - 28*s13^2)*s23^2 + (12*s12 - 24*s13)*
             s23^3 + 4*s23^4) + p3q^4*(p2q*(-36*s12^3*s13 + (-54*s12^2*s13 -
                18*s12*s13^2 - 36*s13^3)*s23 + (2*s12^2 - 32*s12*s13 -
                38*s13^2)*s23^2 + (4*s12 - 18*s13)*s23^3) +
            p1q*((8*s12^2 + 12*s12*s13 + 4*s13^2)*s23^2 + (10*s12 + 6*s13)*
               s23^3 + 2*s23^4)) + p3q^3*(p2q^2*(-36*s12^3*s13 +
              72*s12^2*s13^2 + (-72*s12^2*s13 - 54*s12*s13^2 - 126*s13^3)*
               s23 + (-4*s12^2 - 106*s12*s13 - 150*s13^2)*s23^2 +
              (2*s12 - 72*s13)*s23^3) + p1q^2*((12*s12^2 + 20*s12*s13 +
                8*s13^2)*s23^2 + (16*s12 + 12*s13)*s23^3 + 4*s23^4) +
            p1q*p2q*(-36*s12^3*s13 - 72*s13^3*s23 + (20*s12^2 + 36*s12*s13 -
                78*s13^2)*s23^2 + (30*s12 - 14*s13)*s23^3 + 8*s23^4)) +
          p3q*(p2q^4*(-36*s12*s13^3 + (-90*s12^2*s13 - 198*s12*s13^2 -
                108*s13^3)*s23 + (-2*s12^2 - 194*s12*s13 - 196*s13^2)*s23^2 -
              104*s13*s23^3) + p1q*p2q^3*(-36*s12*s13^3 + (-108*s12^2*s13 -
                288*s12*s13^2 - 180*s13^3)*s23 + (12*s12^2 - 270*s12*s13 -
                340*s13^2)*s23^2 + (22*s12 - 168*s13)*s23^3 + 8*s23^4) +
            p1q^3*p2q*((16*s12^2 - 4*s12*s13 - 20*s13^2)*s23^2 +
              (24*s12 - 12*s13)*s23^3 + 8*s23^4) + p1q^2*p2q^2*
             ((-36*s12^2*s13 - 144*s12*s13^2 - 108*s13^3)*s23 +
              (28*s12^2 - 156*s12*s13 - 256*s13^2)*s23^2 + (40*s12 - 136*s13)*
               s23^3 + 12*s23^4)) + p3q^2*(p2q^3*(72*s12^2*s13^2 -
              36*s12*s13^3 + (-72*s12^2*s13 - 180*s12*s13^2 - 180*s13^3)*
               s23 + (-6*s12^2 - 196*s12*s13 - 256*s13^2)*s23^2 -
              124*s13*s23^3) + p1q^3*((8*s12^2 + 16*s12*s13 + 8*s13^2)*s23^
                2 + (12*s12 + 12*s13)*s23^3 + 4*s23^4) +
            p1q*p2q^2*(72*s12^2*s13^2 + (36*s12^2*s13 - 108*s12*s13^2 -
                216*s13^3)*s23 + (20*s12^2 - 60*s12*s13 - 304*s13^2)*s23^2 +
              (36*s12 - 108*s13)*s23^3 + 12*s23^4) + p1q^2*p2q*
             ((36*s12^2*s13 - 36*s12*s13^2 - 72*s13^3)*s23 +
              (32*s12^2 + 24*s12*s13 - 116*s13^2)*s23^2 + (44*s12 - 32*s13)*
               s23^3 + 12*s23^4)))*Log(-s12 - s13 - s23))/
        (3*p2q*p3q^4*s12*s13*s23^2 + p3q^3*(3*p1q*p2q*s12*s13*s23^2 +
           9*p2q^2*s12*s13*s23^2) + p3q^2*(6*p1q*p2q^2*s12*s13*s23^2 +
           9*p2q^3*s12*s13*s23^2) + p3q*(3*p1q*p2q^3*s12*s13*s23^2 +
           3*p2q^4*s12*s13*s23^2)) +
       ((p3q^6*((9*s12^3*s13 + 9*s12^2*s13^2)*s23 + (-s12^3 + 8*s12^2*s13)*
             s23^2 - s12^2*s23^3) + p2q^6*((-9*s12^2*s13^2 - 9*s12*s13^3)*
             s23 + (-(s12^2*s13) - 10*s12*s13^2)*s23^2 - s12*s13*s23^3) +
          p1q*p2q^5*((-27*s12^2*s13^2 - 27*s12*s13^3)*s23 +
            (6*s12^2*s13 - 21*s12*s13^2)*s23^2 + (s12^2 + 7*s12*s13)*s23^3 +
            s12*s23^4) + p1q^4*p2q^2*((18*s12^2*s13 + 18*s12*s13^2)*s23^2 +
            (2*s12^2 + 20*s12*s13)*s23^3 + 2*s12*s23^4) +
          p1q^2*p2q^4*((-36*s12^2*s13^2 - 36*s12*s13^3)*s23 +
            (23*s12^2*s13 - 13*s12*s13^2)*s23^2 + (3*s12^2 + 26*s12*s13)*
             s23^3 + 3*s12*s23^4) + p1q^3*p2q^3*
           ((-18*s12^2*s13^2 - 18*s12*s13^3)*s23 +
            (34*s12^2*s13 + 16*s12*s13^2)*s23^2 + (4*s12^2 + 38*s12*s13)*
             s23^3 + 4*s12*s23^4) + p3q^5*
           (p1q*((18*s12^3*s13 + 9*s12^2*s13^2 - 9*s12*s13^3)*s23 +
              (-3*s12^3 - 3*s12^2*s13 - 27*s12*s13^2)*s23^2 +
              (-2*s12^2 - 17*s12*s13)*s23^3 + s12*s23^4) +
            p2q*(36*s12^4*s13 + (63*s12^3*s13 - 9*s12^2*s13^2)*s23 +
              (s12^3 + 26*s12^2*s13 - 16*s12*s13^2)*s23^2 +
              (s12^2 + 2*s12*s13)*s23^3 + 2*s12*s23^4)) +
          p3q^4*(p2q^2*(36*s12^4*s13 - 108*s12^3*s13^2 + (-144*s12^2*s13^2 +
                27*s12*s13^3 - 9*s13^4)*s23 + (8*s12^3 - 38*s12^2*s13 -
                31*s12*s13^2 - 10*s13^3)*s23^2 + (4*s12^2 + 2*s12*s13 -
                s13^2)*s23^3 + 4*s12*s23^4) + p1q*p2q*(36*s12^4*s13 -
              36*s12^3*s13^2 + (-18*s12^3*s13 - 117*s12^2*s13^2 - 9*s13^4)*
               s23 + (-2*s12^3 - 123*s12^2*s13 - 86*s12*s13^2 - 9*s13^3)*s23^
                2 + (s12^2 - 55*s12*s13 + s13^2)*s23^3 + (7*s12 + s13)*s23^
                4) + p1q^2*((18*s12^3*s13 - 18*s12*s13^3)*s23 +
              (-4*s12^3 - 22*s12^2*s13 - 45*s12*s13^2 + 9*s13^3)*s23^2 +
              (-s12^2 - 24*s12*s13 + 18*s13^2)*s23^3 + (3*s12 + 9*s13)*s23^
                4)) + p3q^3*(p2q^3*(-108*s12^3*s13^2 + 108*s12^2*s13^3 +
              (-63*s12^3*s13 - 27*s12^2*s13^2 + 117*s12*s13^3 - 27*s13^4)*
               s23 + (10*s12^3 - 43*s12^2*s13 + 67*s12*s13^2 - 30*s13^3)*s23^
                2 + (24*s12*s13 - 3*s13^2)*s23^3 + 2*s12*s23^4) +
            p1q*p2q^2*(-144*s12^3*s13^2 + 72*s12^2*s13^3 + (-198*s12^3*s13 -
                126*s12^2*s13^2 + 171*s12*s13^3 - 45*s13^4)*s23 +
              (6*s12^3 - 208*s12^2*s13 + 106*s12*s13^2 - 55*s13^3)*s23^2 +
              (6*s12^2 + 11*s12*s13 - 7*s13^2)*s23^3 + (12*s12 + 3*s13)*s23^
                4) + p1q^3*((-18*s12^2*s13^2 - 18*s12*s13^3)*s23 +
              (-2*s12^3 - 38*s12^2*s13 - 36*s12*s13^2 + 18*s13^3)*s23^2 +
              (2*s12^2 - 14*s12*s13 + 36*s13^2)*s23^3 + (4*s12 + 18*s13)*s23^
                4) + p1q^2*p2q*(-36*s12^3*s13^2 + (-108*s12^3*s13 -
                90*s12^2*s13^2 + 36*s12*s13^3 - 18*s13^4)*s23 +
              (-8*s12^3 - 174*s12^2*s13 + 9*s12*s13^2 + 9*s13^3)*s23^2 +
              (2*s12^2 - 7*s12*s13 + 64*s13^2)*s23^3 + (12*s12 + 37*s13)*s23^
                4)) + p3q*(p2q^5*(-36*s12*s13^4 + (9*s12^3*s13 +
                9*s12^2*s13^2 - 54*s12*s13^3 - 18*s13^4)*s23 +
              (s12^3 + 23*s12^2*s13 - 11*s12*s13^2 - 28*s13^3)*s23^2 +
              (-s12^2 + 15*s12*s13 - 10*s13^2)*s23^3) +
            p1q*p2q^4*(-72*s12*s13^4 + (9*s12^3*s13 + 36*s12^2*s13^2 -
                99*s12*s13^3 - 54*s13^4)*s23 + (s12^3 + 86*s12^2*s13 +
                47*s12*s13^2 - 82*s13^3)*s23^2 + (93*s12*s13 - 18*s13^2)*s23^
                3 + (3*s12 + 10*s13)*s23^4) + p1q^4*p2q*
             ((18*s12^2*s13 + 36*s12*s13^2 + 18*s13^3)*s23^2 +
              (4*s12^2 + 40*s12*s13 + 36*s13^2)*s23^3 + (4*s12 + 18*s13)*s23^
                4) + p1q^2*p2q^3*(-36*s12*s13^4 + (90*s12^2*s13^2 - 54*s13^4)*
               s23 + (177*s12^2*s13 + 253*s12*s13^2 - 54*s13^3)*s23^2 +
              (10*s12^2 + 237*s12*s13 + 46*s13^2)*s23^3 + (12*s12 + 46*s13)*
               s23^4) + p1q^3*p2q^2*((-18*s12^3*s13 + 36*s12^2*s13^2 +
                36*s12*s13^3 - 18*s13^4)*s23 + (-2*s12^3 + 102*s12^2*s13 +
                212*s12*s13^2 + 18*s13^3)*s23^2 + (10*s12^2 + 188*s12*s13 +
                90*s13^2)*s23^3 + (12*s12 + 54*s13)*s23^4)) +
          p3q^2*(p2q^4*(108*s12^2*s13^3 - 36*s12*s13^4 + (117*s12^2*s13^2 +
                45*s12*s13^3 - 36*s13^4)*s23 + (5*s12^3 + 37*s12^2*s13 +
                81*s12*s13^2 - 48*s13^3)*s23^2 + (-3*s12^2 + 40*s12*s13 -
                12*s13^2)*s23^3) + p1q*p2q^3*(180*s12^2*s13^3 -
              36*s12*s13^4 + (-45*s12^3*s13 + 279*s12^2*s13^2 +
                198*s12*s13^3 - 90*s13^4)*s23 + (6*s12^3 + 100*s12^2*s13 +
                341*s12*s13^2 - 128*s13^3)*s23^2 + (2*s12^2 + 171*s12*s13 -
                26*s13^2)*s23^3 + (8*s12 + 12*s13)*s23^4) +
            p1q^4*((18*s12*s13^2 + 18*s13^3)*s23^2 + (2*s12^2 + 20*s12*s13 +
                36*s13^2)*s23^3 + (2*s12 + 18*s13)*s23^4) +
            p1q^3*p2q*((-18*s12^3*s13 + 36*s12^2*s13^2 + 36*s12*s13^3 -
                18*s13^4)*s23 + (-4*s12^3 + 30*s12^2*s13 + 160*s12*s13^2 +
                36*s13^3)*s23^2 + (8*s12^2 + 136*s12*s13 + 126*s13^2)*s23^3 +
              (12*s12 + 72*s13)*s23^4) + p1q^2*p2q^2*(72*s12^2*s13^3 +
              (-90*s12^3*s13 + 180*s12^2*s13^2 + 198*s12*s13^3 - 72*s13^4)*
               s23 + (-4*s12^3 + 74*s12^2*s13 + 428*s12*s13^2 - 54*s13^3)*s23^
                2 + (10*s12^2 + 264*s12*s13 + 92*s13^2)*s23^3 +
              (18*s12 + 74*s13)*s23^4)))*Log(s12/(s12 + s13 + s23)))/
        (3*p2q*p3q^5*s12^2*s13*s23^2 +
         p3q^2*(p1q*p2q^3*((3*s12^2*s13 - 15*s12*s13^2)*s23^2 -
             15*s12*s13*s23^3) + p2q^4*((3*s12^2*s13 - 9*s12*s13^2)*s23^2 -
             9*s12*s13*s23^3) + p1q^2*p2q^2*(-6*s12*s13^2*s23^2 -
             6*s12*s13*s23^3)) + p3q^3*
          (p1q*p2q^2*((6*s12^2*s13 - 12*s12*s13^2)*s23^2 -
             12*s12*s13*s23^3) + p2q^3*((9*s12^2*s13 - 9*s12*s13^2)*s23^2 -
             9*s12*s13*s23^3) + p1q^2*p2q*(-3*s12*s13^2*s23^2 -
             3*s12*s13*s23^3)) + p3q*(p1q*p2q^4*(-6*s12*s13^2*s23^2 -
             6*s12*s13*s23^3) + p1q^2*p2q^3*(-3*s12*s13^2*s23^2 -
             3*s12*s13*s23^3) + p2q^5*(-3*s12*s13^2*s23^2 -
             3*s12*s13*s23^3)) + p3q^4*(p1q*p2q*((3*s12^2*s13 - 3*s12*s13^2)*
              s23^2 - 3*s12*s13*s23^3) + p2q^2*((9*s12^2*s13 - 3*s12*s13^2)*
              s23^2 - 3*s12*s13*s23^3))) +
       ((p2q^4*(-(s12*s13^2) - s13^3 - s13^2*s23) +
          p3q^4*(2*s12^3 + 3*s12^2*s13 + s12*s13^2 + (4*s12^2 + 3*s12*s13)*
             s23 + 2*s12*s23^2) + p1q*p2q^3*(-2*s12^2*s13 - 7*s12*s13^2 -
            5*s13^3 + (-3*s12*s13 - 6*s13^2)*s23 - s13*s23^2) +
          p1q^2*p2q^2*(4*s12^3 + 4*s12^2*s13 - 8*s12*s13^2 - 8*s13^3 +
            (10*s12^2 + 7*s12*s13 - 7*s13^2)*s23 + (8*s12 + 3*s13)*s23^2 +
            2*s23^3) + p1q^3*p2q*(8*s12^3 + 12*s12^2*s13 - 2*s12*s13^2 -
            6*s13^3 + (20*s12^2 + 20*s12*s13 - 2*s13^2)*s23 +
            (16*s12 + 8*s13)*s23^2 + 4*s23^3) +
          p1q^4*(8*s12^3 + 16*s12^2*s13 + 8*s12*s13^2 +
            (20*s12^2 + 26*s12*s13 + 6*s13^2)*s23 + (16*s12 + 10*s13)*s23^2 +
            4*s23^3) + p3q^3*(p2q*(-s12^3 - 2*s12^2*s13 - 2*s12*s13^2 -
              s13^3 + (-s12^2 - s12*s13 - s13^2)*s23) +
            p1q*(10*s12^3 + 17*s12^2*s13 + 7*s12*s13^2 + (22*s12^2 +
                22*s12*s13 + 3*s13^2)*s23 + (14*s12 + 5*s13)*s23^2 +
              2*s23^3)) + p3q^2*(p2q^2*(-s12^3 + s12^2*s13 + s12*s13^2 -
              s13^3 + (-s12^2 + 2*s12*s13 - s13^2)*s23) +
            p1q*p2q*(3*s12^3 + 5*s12^2*s13 - 3*s12*s13^2 - 5*s13^3 +
              (12*s12^2 + 14*s12*s13 - 2*s13^2)*s23 + (13*s12 + 7*s13)*s23^
                2 + 4*s23^3) + p1q^2*(20*s12^3 + 36*s12^2*s13 +
              16*s12*s13^2 + (46*s12^2 + 51*s12*s13 + 9*s13^2)*s23 +
              (32*s12 + 15*s13)*s23^2 + 6*s23^3)) +
          p3q*(p2q^3*(2*s12^2*s13 + s12*s13^2 - s13^3 + (2*s12*s13 - s13^2)*
               s23) + p1q*p2q^2*(2*s12^3 + 4*s12^2*s13 - 6*s12*s13^2 -
              8*s13^3 + (7*s12^2 + 6*s12*s13 - 9*s13^2)*s23 +
              (7*s12 + s13)*s23^2 + 2*s23^3) + p1q^2*p2q*(12*s12^3 +
              20*s12^2*s13 - 8*s13^3 + (33*s12^2 + 37*s12*s13)*s23 +
              (29*s12 + 16*s13)*s23^2 + 8*s23^3) +
            p1q^3*(20*s12^3 + 38*s12^2*s13 + 18*s12*s13^2 + (48*s12^2 +
                58*s12*s13 + 12*s13^2)*s23 + (36*s12 + 20*s13)*s23^2 +
              8*s23^3)))*Log(s13/(s12 + s13 + s23)))/
        (p2q*p3q^3*(3*s12^2*s13 + 3*s12*s13*s23) +
         p3q*(-3*p2q^3*s12*s13^2 + p1q^2*p2q*(3*s12^2*s13 + 3*s12*s13*s23) +
           p1q*p2q^2*(3*s12^2*s13 - 3*s12*s13^2 + 3*s12*s13*s23)) +
         p3q^2*(p2q^2*(3*s12^2*s13 - 3*s12*s13^2 + 3*s12*s13*s23) +
           p1q*p2q*(6*s12^2*s13 + 6*s12*s13*s23))) +
       ((p3q^6*((-3*s12^3 - 6*s12^2*s13 - 3*s12*s13^2)*s23 +
            (-3*s12^2 - 3*s12*s13)*s23^2) +
          p2q^6*((-12*s12^3 - 30*s12^2*s13 - 24*s12*s13^2 - 6*s13^3)*s23 +
            (-24*s12^2 - 39*s12*s13 - 15*s13^2)*s23^2 + (-12*s12 - 9*s13)*
             s23^3) + p1q^4*p2q^2*((6*s12 + 6*s13)*s23^3 + 6*s23^4) +
          p1q*p2q^5*((-24*s12^3 - 60*s12^2*s13 - 48*s12*s13^2 - 12*s13^3)*
             s23 + (-42*s12^2 - 69*s12*s13 - 27*s13^2)*s23^2 +
            (-9*s12 - 6*s13)*s23^3 + 9*s23^4) + p1q^2*p2q^4*
           ((-24*s12^3 - 60*s12^2*s13 - 48*s12*s13^2 - 12*s13^3)*s23 +
            (-36*s12^2 - 60*s12*s13 - 24*s13^2)*s23^2 + (9*s12 + 9*s13)*
             s23^3 + 21*s23^4) + p1q^3*p2q^3*
           ((12*s12^2 + 18*s12*s13 + 6*s13^2)*s23^2 + (36*s12 + 30*s13)*
             s23^3 + 24*s23^4) + p3q^5*(p2q*(-12*s12^4 - 12*s12^3*s13 +
              (-30*s12^3 - 33*s12^2*s13 - 24*s12*s13^2 - 9*s13^3)*s23 +
              (-24*s12^2 - 27*s12*s13 - 15*s13^2)*s23^2 + (-6*s12 - 6*s13)*
               s23^3) + p1q*((-6*s12^3 - 12*s12^2*s13 - 6*s12*s13^2)*s23 +
              (3*s12*s13 + 3*s13^2)*s23^2 + (6*s12 + 3*s13)*s23^3)) +
          p3q^4*(p2q^2*(-24*s12^4 + 24*s12^2*s13^2 + (-63*s12^3 -
                60*s12^2*s13 - 87*s12*s13^2 - 42*s13^3)*s23 +
              (-69*s12^2 - 105*s12*s13 - 72*s13^2)*s23^2 + (-30*s12 - 30*s13)*
               s23^3) + p1q^2*((-6*s12^3 - 12*s12^2*s13 - 6*s12*s13^2)*s23 +
              (6*s12^2 + 12*s12*s13 + 6*s13^2)*s23^2 + (9*s12 + 3*s13)*s23^
                3 - 3*s23^4) + p1q*p2q*(-12*s12^4 - 12*s12^3*s13 +
              (-12*s12^3 - 18*s12^2*s13 - 36*s12*s13^2 - 18*s13^3)*s23 +
              (15*s12^2 + 6*s12*s13 - 9*s13^2)*s23^2 + (21*s12 + 15*s13)*s23^
                3 + 6*s23^4)) + p3q^3*(p2q^3*(-12*s12^4 + 36*s12^3*s13 +
              36*s12^2*s13^2 - 12*s12*s13^3 + (-66*s12^3 - 105*s12^2*s13 -
                192*s12*s13^2 - 81*s13^3)*s23 + (-117*s12^2 - 222*s12*s13 -
                141*s13^2)*s23^2 + (-63*s12 - 60*s13)*s23^3) +
            p1q^3*((12*s12^2 + 18*s12*s13 + 6*s13^2)*s23^2 + 6*s12*s23^3 -
              6*s23^4) + p1q^2*p2q*((12*s12^3 - 6*s12^2*s13 - 36*s12*s13^2 -
                18*s13^3)*s23 + (24*s12^2 + 24*s12*s13 + 12*s13^2)*s23^2 +
              (15*s12 + 33*s13)*s23^3 + 3*s23^4) + p1q*p2q^2*
             (-12*s12^4 + 12*s12^3*s13 + 24*s12^2*s13^2 + (-18*s12^3 -
                48*s12^2*s13 - 138*s12*s13^2 - 72*s13^3)*s23 +
              (-27*s12^2 - 81*s12*s13 - 66*s13^2)*s23^2 + (3*s12 + 30*s13)*
               s23^3 + 24*s23^4)) + p3q^2*(p2q^4*(24*s12^3*s13 -
              24*s12*s13^3 + (-60*s12^3 - 162*s12^2*s13 - 228*s12*s13^2 -
                78*s13^3)*s23 + (-132*s12^2 - 261*s12*s13 - 141*s13^2)*s23^
                2 + (-72*s12 - 63*s13)*s23^3) + p1q^3*p2q*
             ((30*s12*s13 + 30*s13^2)*s23^2 + 30*s13*s23^3) +
            p1q^4*((-6*s12 - 6*s13)*s23^3 - 6*s23^4) + p1q^2*p2q^2*
             ((-18*s12^3 - 84*s12^2*s13 - 114*s12*s13^2 - 48*s13^3)*s23 +
              (-66*s12^2 - 72*s12*s13 - 6*s13^2)*s23^2 + (-18*s12 + 72*s13)*
               s23^3 + 30*s23^4) + p1q*p2q^3*(24*s12^3*s13 + 12*s12^2*s13^2 -
              12*s12*s13^3 + (-48*s12^3 - 150*s12^2*s13 - 240*s12*s13^2 -
                102*s13^3)*s23 + (-111*s12^2 - 201*s12*s13 - 114*s13^2)*s23^
                2 + (-24*s12 + 27*s13)*s23^3 + 39*s23^4)) +
          p3q*(p2q^5*(-12*s12^2*s13^2 - 12*s12*s13^3 + (-42*s12^3 -
                120*s12^2*s13 - 126*s12*s13^2 - 36*s13^3)*s23 +
              (-87*s12^2 - 159*s12*s13 - 72*s13^2)*s23^2 + (-45*s12 - 36*s13)*
               s23^3) + p1q*p2q^4*(-12*s12^2*s13^2 - 12*s12*s13^3 +
              (-60*s12^3 - 168*s12^2*s13 - 180*s12*s13^2 - 60*s13^3)*s23 +
              (-111*s12^2 - 186*s12*s13 - 87*s13^2)*s23^2 + (-21*s12 + 3*s13)*
               s23^3 + 30*s23^4) + p1q^3*p2q^2*((30*s12*s13 + 30*s13^2)*s23^
                2 + (30*s12 + 60*s13)*s23^3 + 30*s23^4) +
            p1q^2*p2q^3*((-36*s12^3 - 102*s12^2*s13 - 108*s12*s13^2 -
                42*s13^3)*s23 + (-72*s12^2 - 96*s12*s13 - 36*s13^2)*s23^2 +
              (9*s12 + 51*s13)*s23^3 + 45*s23^4)))*
         Log(s23/(s12 + s13 + s23)))/(p2q*p3q^5*(s12^2 + s12*s13)*s23^2 +
         p3q^3*(p2q^3*(6*s12^2 + 6*s12*s13)*s23^2 - p1q^2*p2q*s12*s23^3 +
           p1q*p2q^2*((3*s12^2 + 3*s12*s13)*s23^2 - 3*s12*s23^3)) +
         p3q^2*(p2q^4*(4*s12^2 + 4*s12*s13)*s23^2 - 2*p1q^2*p2q^2*s12*s23^3 +
           p1q*p2q^3*((3*s12^2 + 3*s12*s13)*s23^2 - 3*s12*s23^3)) +
         p3q^4*(p2q^2*(4*s12^2 + 4*s12*s13)*s23^2 +
           p1q*p2q*((s12^2 + s12*s13)*s23^2 - s12*s23^3)) +
         p3q*(p2q^5*(s12^2 + s12*s13)*s23^2 - p1q^2*p2q^3*s12*s23^3 +
           p1q*p2q^4*((s12^2 + s12*s13)*s23^2 - s12*s23^3)))) +
     Log((p2q + p3q)/(p1q + p2q + p3q))*
      (((p3q^6*((-3*s12^3 - 6*s12^2*s13 - 3*s12*s13^2)*s23 +
            (-3*s12^2 - 3*s12*s13)*s23^2) +
          p2q^6*((-6*s12^3 - 12*s12^2*s13 - 6*s12*s13^2)*s23 +
            (-12*s12^2 - 15*s12*s13 - 3*s13^2)*s23^2 + (-6*s12 - 3*s13)*
             s23^3) + p1q*p2q^5*((-12*s12^3 - 24*s12^2*s13 - 12*s12*s13^2)*
             s23 + (-24*s12^2 - 33*s12*s13 - 9*s13^2)*s23^2 +
            (-9*s12 - 6*s13)*s23^3 + 3*s23^4) + p1q^4*p2q^2*
           ((6*s12 + 6*s13)*s23^3 + 6*s23^4) + p1q^2*p2q^4*
           ((-12*s12^3 - 24*s12^2*s13 - 12*s12*s13^2)*s23 +
            (-24*s12^2 - 36*s12*s13 - 12*s13^2)*s23^2 + (-3*s12 - 3*s13)*
             s23^3 + 9*s23^4) + p1q^3*p2q^3*((-6*s12*s13 - 6*s13^2)*s23^2 +
            (12*s12 + 6*s13)*s23^3 + 12*s23^4) +
          p3q^5*(p2q*(-12*s12^4 - 12*s12^3*s13 + (-24*s12^3 - 15*s12^2*s13 -
                6*s12*s13^2 - 3*s13^3)*s23 + (-12*s12^2 - 3*s12*s13 -
                3*s13^2)*s23^2) + p1q*((-6*s12^3 - 12*s12^2*s13 -
                6*s12*s13^2)*s23 + (3*s12*s13 + 3*s13^2)*s23^2 +
              (6*s12 + 3*s13)*s23^3)) +
          p3q^3*(p2q^3*(-12*s12^4 + 36*s12^3*s13 + 36*s12^2*s13^2 -
              12*s12*s13^3 + (-6*s12^3 + 75*s12^2*s13 - 12*s12*s13^2 -
                21*s13^3)*s23 + (3*s12^2 + 18*s12*s13 - 21*s13^2)*s23^2 -
              3*s12*s23^3) + p1q*p2q^2*(-12*s12^4 + 12*s12^3*s13 +
              24*s12^2*s13^2 + (30*s12^3 + 96*s12^2*s13 + 6*s12*s13^2 -
                24*s13^3)*s23 + (45*s12^2 + 63*s12*s13 + 6*s13^2)*s23^2 +
              (3*s12 + 30*s13)*s23^3) + p1q^2*p2q*((24*s12^3 + 30*s12^2*s13 -
                6*s13^3)*s23 + (36*s12^2 + 48*s12*s13 + 24*s13^2)*s23^2 +
              (3*s12 + 21*s13)*s23^3 - 9*s23^4) +
            p1q^3*((12*s12^2 + 18*s12*s13 + 6*s13^2)*s23^2 + 6*s12*s23^3 -
              6*s23^4)) + p3q^4*(p2q^2*(-24*s12^4 + 24*s12^2*s13^2 +
              (-33*s12^3 + 30*s12^2*s13 + 3*s12*s13^2 - 12*s13^3)*s23 +
              (-9*s12^2 + 15*s12*s13 - 12*s13^2)*s23^2) +
            p1q*p2q*(-12*s12^4 - 12*s12^3*s13 + (18*s12^2*s13 - 6*s13^3)*
               s23 + (33*s12^2 + 42*s12*s13 + 9*s13^2)*s23^2 +
              (21*s12 + 15*s13)*s23^3) + p1q^2*((-6*s12^3 - 12*s12^2*s13 -
                6*s12*s13^2)*s23 + (6*s12^2 + 12*s12*s13 + 6*s13^2)*s23^2 +
              (9*s12 + 3*s13)*s23^3 - 3*s23^4)) +
          p3q^2*(p2q^4*(24*s12^3*s13 - 24*s12*s13^3 + (18*s12^2*s13 -
                48*s12*s13^2 - 18*s13^3)*s23 + (-12*s12^2 - 21*s12*s13 -
                21*s13^2)*s23^2 + (-12*s12 - 3*s13)*s23^3) +
            p1q^3*p2q*((-12*s12^2 + 6*s12*s13 + 18*s13^2)*s23^2 +
              (-24*s12 + 6*s13)*s23^3 - 12*s23^4) +
            p1q^4*((-6*s12 - 6*s13)*s23^3 - 6*s23^4) + p1q^2*p2q^2*
             ((18*s12^3 + 24*s12^2*s13 - 6*s12*s13^2 - 12*s13^3)*s23 +
              (-30*s12^2 + 30*s13^2)*s23^2 + (-54*s12 + 36*s13)*s23^3 -
              6*s23^4) + p1q*p2q^3*(24*s12^3*s13 + 12*s12^2*s13^2 -
              12*s12*s13^3 + (24*s12^3 + 66*s12^2*s13 - 24*s12*s13^2 -
                30*s13^3)*s23 + (-3*s12^2 + 15*s12*s13 - 6*s13^2)*s23^2 +
              (-24*s12 + 27*s13)*s23^3 + 3*s23^4)) +
          p3q*(p2q^5*(-12*s12^2*s13^2 - 12*s12*s13^3 + (-12*s12^3 -
                30*s12^2*s13 - 36*s12*s13^2 - 6*s13^3)*s23 + (-27*s12^2 -
                39*s12*s13 - 12*s13^2)*s23^2 + (-15*s12 - 6*s13)*s23^3) +
            p1q*p2q^4*(-12*s12^2*s13^2 - 12*s12*s13^3 + (-12*s12^3 -
                24*s12^2*s13 - 36*s12*s13^2 - 12*s13^3)*s23 +
              (-39*s12^2 - 42*s12*s13 - 15*s13^2)*s23^2 + (-21*s12 + 3*s13)*
               s23^3 + 6*s23^4) + p1q^3*p2q^2*((-24*s12^2 - 18*s12*s13 +
                6*s13^2)*s23^2 + (-18*s12 + 12*s13)*s23^3 + 6*s23^4) +
            p1q^2*p2q^3*((6*s12^2*s13 - 6*s13^3)*s23 + (-36*s12^2 -
                24*s12*s13)*s23^2 + (-27*s12 + 15*s13)*s23^3 + 9*s23^4)))*
         Log(s12/(s12 + s13 + s23)))/(p2q*p3q^5*(s12^2 + s12*s13)*s23^2 +
         p3q^3*(p2q^3*(6*s12^2 + 6*s12*s13)*s23^2 - p1q^2*p2q*s12*s23^3 +
           p1q*p2q^2*((3*s12^2 + 3*s12*s13)*s23^2 - 3*s12*s23^3)) +
         p3q^2*(p2q^4*(4*s12^2 + 4*s12*s13)*s23^2 - 2*p1q^2*p2q^2*s12*s23^3 +
           p1q*p2q^3*((3*s12^2 + 3*s12*s13)*s23^2 - 3*s12*s23^3)) +
         p3q^4*(p2q^2*(4*s12^2 + 4*s12*s13)*s23^2 +
           p1q*p2q*((s12^2 + s12*s13)*s23^2 - s12*s23^3)) +
         p3q*(p2q^5*(s12^2 + s12*s13)*s23^2 - p1q^2*p2q^3*s12*s23^3 +
           p1q*p2q^4*((s12^2 + s12*s13)*s23^2 - s12*s23^3))) +
       ((p2q^6*((-3*s12^2*s13 - 6*s12*s13^2 - 3*s13^3)*s23 +
            (-3*s12*s13 - 3*s13^2)*s23^2) +
          p3q^6*((-6*s12^2*s13 - 12*s12*s13^2 - 6*s13^3)*s23 +
            (-3*s12^2 - 15*s12*s13 - 12*s13^2)*s23^2 + (-3*s12 - 6*s13)*
             s23^3) + p1q*p2q^5*((-6*s12^2*s13 - 12*s12*s13^2 - 6*s13^3)*
             s23 + (3*s12^2 + 3*s12*s13)*s23^2 + (3*s12 + 6*s13)*s23^3) +
          p1q^4*p2q^2*((-6*s12 - 6*s13)*s23^3 - 6*s23^4) +
          p1q^3*p2q^3*((6*s12^2 + 18*s12*s13 + 12*s13^2)*s23^2 +
            6*s13*s23^3 - 6*s23^4) + p1q^2*p2q^4*
           ((-6*s12^2*s13 - 12*s12*s13^2 - 6*s13^3)*s23 +
            (6*s12^2 + 12*s12*s13 + 6*s13^2)*s23^2 + (3*s12 + 9*s13)*s23^3 -
            3*s23^4) + p3q*(p2q^5*(-12*s12*s13^3 - 12*s13^4 +
              (-3*s12^3 - 6*s12^2*s13 - 15*s12*s13^2 - 24*s13^3)*s23 +
              (-3*s12^2 - 3*s12*s13 - 12*s13^2)*s23^2) +
            p1q*p2q^4*(-12*s12*s13^3 - 12*s13^4 + (-6*s12^3 + 18*s12*s13^2)*
               s23 + (9*s12^2 + 42*s12*s13 + 33*s13^2)*s23^2 +
              (15*s12 + 21*s13)*s23^3) + p1q^3*p2q^2*((18*s12^2 + 6*s12*s13 -
                12*s13^2)*s23^2 + (6*s12 - 24*s13)*s23^3 - 12*s23^4) +
            p1q^2*p2q^3*((-6*s12^3 + 30*s12*s13^2 + 24*s13^3)*s23 +
              (24*s12^2 + 48*s12*s13 + 36*s13^2)*s23^2 + (21*s12 + 3*s13)*s23^
                3 - 9*s23^4)) + p3q^5*(p2q*(-12*s12^3*s13 - 12*s12^2*s13^2 +
              (-6*s12^3 - 36*s12^2*s13 - 30*s12*s13^2 - 12*s13^3)*s23 +
              (-12*s12^2 - 39*s12*s13 - 27*s13^2)*s23^2 + (-6*s12 - 15*s13)*
               s23^3) + p1q*((-12*s12^2*s13 - 24*s12*s13^2 - 12*s13^3)*s23 +
              (-9*s12^2 - 33*s12*s13 - 24*s13^2)*s23^2 + (-6*s12 - 9*s13)*s23^
                3 + 3*s23^4)) + p3q^2*(p2q^4*(24*s12^2*s13^2 - 24*s13^4 +
              (-12*s12^3 + 3*s12^2*s13 + 30*s12*s13^2 - 33*s13^3)*s23 +
              (-12*s12^2 + 15*s12*s13 - 9*s13^2)*s23^2) +
            p1q*p2q^3*(24*s12^2*s13^2 + 12*s12*s13^3 - 12*s13^4 +
              (-24*s12^3 + 6*s12^2*s13 + 96*s12*s13^2 + 30*s13^3)*s23 +
              (6*s12^2 + 63*s12*s13 + 45*s13^2)*s23^2 + (30*s12 + 3*s13)*s23^
                3) + p1q^2*p2q^2*((-12*s12^3 - 6*s12^2*s13 + 24*s12*s13^2 +
                18*s13^3)*s23 + (30*s12^2 - 30*s13^2)*s23^2 +
              (36*s12 - 54*s13)*s23^3 - 6*s23^4) + p1q^3*p2q*
             ((6*s12^2 - 18*s12*s13 - 24*s13^2)*s23^2 + (12*s12 - 18*s13)*s23^
                3 + 6*s23^4) + p1q^4*((6*s12 + 6*s13)*s23^3 + 6*s23^4)) +
          p3q^4*(p2q^2*(-24*s12^3*s13 + 24*s12*s13^3 + (-18*s12^3 -
                48*s12^2*s13 + 18*s12*s13^2)*s23 + (-21*s12^2 - 21*s12*s13 -
                12*s13^2)*s23^2 + (-3*s12 - 12*s13)*s23^3) +
            p1q*p2q*(-12*s12^3*s13 - 12*s12^2*s13^2 + (-12*s12^3 -
                36*s12^2*s13 - 24*s12*s13^2 - 12*s13^3)*s23 +
              (-15*s12^2 - 42*s12*s13 - 39*s13^2)*s23^2 + (3*s12 - 21*s13)*
               s23^3 + 6*s23^4) + p1q^2*((-12*s12^2*s13 - 24*s12*s13^2 -
                12*s13^3)*s23 + (-12*s12^2 - 36*s12*s13 - 24*s13^2)*s23^2 +
              (-3*s12 - 3*s13)*s23^3 + 9*s23^4)) +
          p3q^3*(p2q^3*(-12*s12^3*s13 + 36*s12^2*s13^2 + 36*s12*s13^3 -
              12*s13^4 + (-21*s12^3 - 12*s12^2*s13 + 75*s12*s13^2 - 6*s13^3)*
               s23 + (-21*s12^2 + 18*s12*s13 + 3*s13^2)*s23^2 -
              3*s13*s23^3) + p1q*p2q^2*(-12*s12^3*s13 + 12*s12^2*s13^2 +
              24*s12*s13^3 + (-30*s12^3 - 24*s12^2*s13 + 66*s12*s13^2 +
                24*s13^3)*s23 + (-6*s12^2 + 15*s12*s13 - 3*s13^2)*s23^2 +
              (27*s12 - 24*s13)*s23^3 + 3*s23^4) + p1q^2*p2q*
             ((-6*s12^3 + 6*s12*s13^2)*s23 + (-24*s12*s13 - 36*s13^2)*s23^2 +
              (15*s12 - 27*s13)*s23^3 + 9*s23^4) +
            p1q^3*((-6*s12^2 - 6*s12*s13)*s23^2 + (6*s12 + 12*s13)*s23^3 +
              12*s23^4)))*Log(s13/(s12 + s13 + s23)))/
        (p2q*p3q^5*(s12*s13 + s13^2)*s23^2 +
         p3q^3*(p2q^3*(6*s12*s13 + 6*s13^2)*s23^2 - p1q^2*p2q*s13*s23^3 +
           p1q*p2q^2*((3*s12*s13 + 3*s13^2)*s23^2 - 3*s13*s23^3)) +
         p3q^2*(p2q^4*(4*s12*s13 + 4*s13^2)*s23^2 - 2*p1q^2*p2q^2*s13*s23^3 +
           p1q*p2q^3*((3*s12*s13 + 3*s13^2)*s23^2 - 3*s13*s23^3)) +
         p3q^4*(p2q^2*(4*s12*s13 + 4*s13^2)*s23^2 +
           p1q*p2q*((s12*s13 + s13^2)*s23^2 - s13*s23^3)) +
         p3q*(p2q^5*(s12*s13 + s13^2)*s23^2 - p1q^2*p2q^3*s13*s23^3 +
           p1q*p2q^4*((s12*s13 + s13^2)*s23^2 - s13*s23^3))) +
       ((p3q^6*((9*s12^3*s13 + 18*s12^2*s13^2 + 9*s12*s13^3)*s23 +
            (3*s12^3 + 18*s12^2*s13 + 15*s12*s13^2)*s23^2 +
            (3*s12^2 + 6*s12*s13)*s23^3) +
          p2q^6*((9*s12^3*s13 + 18*s12^2*s13^2 + 9*s12*s13^3)*s23 +
            (15*s12^2*s13 + 18*s12*s13^2 + 3*s13^3)*s23^2 +
            (6*s12*s13 + 3*s13^2)*s23^3) + p1q^3*p2q^3*
           ((-6*s12^3 - 18*s12^2*s13 - 6*s12*s13^2 + 6*s13^3)*s23^2 +
            (-18*s12*s13 - 6*s13^2)*s23^3 + (6*s12 - 12*s13)*s23^4) +
          p1q^2*p2q^4*((18*s12^3*s13 + 36*s12^2*s13^2 + 18*s12*s13^3)*s23 +
            (-6*s12^3 + 12*s12^2*s13 + 30*s12*s13^2 + 12*s13^3)*s23^2 +
            (-3*s12^2 - 6*s12*s13 + 3*s13^2)*s23^3 + (3*s12 - 9*s13)*s23^4) +
          p1q^4*p2q^2*((6*s12^2 - 6*s13^2)*s23^3 + (6*s12 - 6*s13)*s23^4) +
          p1q*p2q^5*((18*s12^3*s13 + 36*s12^2*s13^2 + 18*s12*s13^3)*s23 +
            (-3*s12^3 + 21*s12^2*s13 + 33*s12*s13^2 + 9*s13^3)*s23^2 +
            (-3*s12^2 + 3*s12*s13 + 6*s13^2)*s23^3 - 3*s13*s23^4) +
          p3q^5*(p2q*(24*s12^4*s13 + 24*s12^3*s13^2 + (6*s12^4 +
                60*s12^3*s13 + 45*s12^2*s13^2 + 18*s12*s13^3 + 3*s13^4)*s23 +
              (12*s12^3 + 51*s12^2*s13 + 30*s12*s13^2 + 3*s13^3)*s23^2 +
              (6*s12^2 + 15*s12*s13)*s23^3) +
            p1q*((18*s12^3*s13 + 36*s12^2*s13^2 + 18*s12*s13^3)*s23 +
              (9*s12^3 + 33*s12^2*s13 + 21*s12*s13^2 - 3*s13^3)*s23^2 +
              (6*s12^2 + 3*s12*s13 - 3*s13^2)*s23^3 - 3*s12*s23^4)) +
          p3q*(p2q^5*(24*s12^2*s13^3 + 24*s12*s13^4 + (3*s12^4 +
                18*s12^3*s13 + 45*s12^2*s13^2 + 60*s12*s13^3 + 6*s13^4)*s23 +
              (3*s12^3 + 30*s12^2*s13 + 51*s12*s13^2 + 12*s13^3)*s23^2 +
              (15*s12*s13 + 6*s13^2)*s23^3) + p1q^2*p2q^3*
             ((6*s12^4 - 36*s12^2*s13^2 - 24*s12*s13^3 + 6*s13^4)*s23 +
              (-24*s12^3 - 12*s12^2*s13 - 12*s12*s13^2)*s23^2 +
              (-21*s12^2 + 24*s12*s13 - 15*s13^2)*s23^3 + (9*s12 - 9*s13)*s23^
                4) + p1q^3*p2q^2*((-18*s12^3 + 18*s12^2*s13 + 30*s12*s13^2 -
                6*s13^3)*s23^2 + (-6*s12^2 + 42*s12*s13 - 12*s13^2)*s23^3 +
              (12*s12 - 6*s13)*s23^4) + p1q*p2q^4*(24*s12^2*s13^3 +
              24*s12*s13^4 + (6*s12^4 + 12*s12^3*s13 + 6*s12^2*s13^2 +
                36*s12*s13^3 + 12*s13^4)*s23 + (-9*s12^3 - 3*s12^2*s13 +
                9*s12*s13^2 + 15*s13^3)*s23^2 + (-15*s12^2 - 3*s13^2)*s23^3 -
              6*s13*s23^4)) + p3q^4*(p2q^2*(48*s12^4*s13 - 48*s12^2*s13^3 +
              (18*s12^4 + 81*s12^3*s13 - 48*s12^2*s13^2 - 3*s12*s13^3 +
                12*s13^4)*s23 + (21*s12^3 + 30*s12^2*s13 - 3*s12*s13^2 +
                12*s13^3)*s23^2 + (3*s12^2 + 12*s12*s13)*s23^3) +
            p1q*p2q*(24*s12^4*s13 + 24*s12^3*s13^2 + (12*s12^4 +
                36*s12^3*s13 + 6*s12^2*s13^2 + 12*s12*s13^3 + 6*s13^4)*s23 +
              (15*s12^3 + 9*s12^2*s13 - 3*s12*s13^2 - 9*s13^3)*s23^2 +
              (-3*s12^2 - 15*s13^2)*s23^3 - 6*s12*s23^4) +
            p1q^2*((18*s12^3*s13 + 36*s12^2*s13^2 + 18*s12*s13^3)*s23 +
              (12*s12^3 + 30*s12^2*s13 + 12*s12*s13^2 - 6*s13^3)*s23^2 +
              (3*s12^2 - 6*s12*s13 - 3*s13^2)*s23^3 + (-9*s12 + 3*s13)*s23^
                4)) + p3q^3*(p2q^3*(24*s12^4*s13 - 72*s12^3*s13^2 -
              72*s12^2*s13^3 + 24*s12*s13^4 + (21*s12^4 + 18*s12^3*s13 -
                150*s12^2*s13^2 + 18*s12*s13^3 + 21*s13^4)*s23 +
              (21*s12^3 - 21*s12^2*s13 - 21*s12*s13^2 + 21*s13^3)*s23^2 +
              6*s12*s13*s23^3) + p1q*p2q^2*(24*s12^4*s13 - 24*s12^3*s13^2 -
              48*s12^2*s13^3 + (30*s12^4 - 6*s12^3*s13 - 162*s12^2*s13^2 -
                30*s12*s13^3 + 24*s13^4)*s23 + (6*s12^3 - 60*s12^2*s13 -
                60*s12*s13^2 - 6*s13^3)*s23^2 + (-27*s12^2 + 21*s12*s13 -
                30*s13^2)*s23^3 - 3*s12*s23^4) +
            p1q^3*((6*s12^3 - 6*s12^2*s13 - 18*s12*s13^2 - 6*s13^3)*s23^2 +
              (-6*s12^2 - 18*s12*s13)*s23^3 + (-12*s12 + 6*s13)*s23^4) +
            p1q^2*p2q*((6*s12^4 - 24*s12^3*s13 - 36*s12^2*s13^2 + 6*s13^4)*
               s23 + (-12*s12^2*s13 - 12*s12*s13^2 - 24*s13^3)*s23^2 +
              (-15*s12^2 + 24*s12*s13 - 21*s13^2)*s23^3 + (-9*s12 + 9*s13)*
               s23^4)) + p3q^2*(p2q^4*(-48*s12^3*s13^2 + 48*s12*s13^4 +
              (12*s12^4 - 3*s12^3*s13 - 48*s12^2*s13^2 + 81*s12*s13^3 +
                18*s13^4)*s23 + (12*s12^3 - 3*s12^2*s13 + 30*s12*s13^2 +
                21*s13^3)*s23^2 + (12*s12*s13 + 3*s13^2)*s23^3) +
            p1q*p2q^3*(-48*s12^3*s13^2 - 24*s12^2*s13^3 + 24*s12*s13^4 +
              (24*s12^4 - 30*s12^3*s13 - 162*s12^2*s13^2 - 6*s12*s13^3 +
                30*s13^4)*s23 + (-6*s12^3 - 60*s12^2*s13 - 60*s12*s13^2 +
                6*s13^3)*s23^2 + (-30*s12^2 + 21*s12*s13 - 27*s13^2)*s23^3 -
              3*s13*s23^4) + p1q^4*((-6*s12^2 + 6*s13^2)*s23^3 +
              (-6*s12 + 6*s13)*s23^4) + p1q^2*p2q^2*
             ((12*s12^4 - 12*s12^3*s13 - 48*s12^2*s13^2 - 12*s12*s13^3 +
                12*s13^4)*s23 + (-30*s12^3 + 30*s12^2*s13 + 30*s12*s13^2 -
                30*s13^3)*s23^2 + (-36*s12^2 + 108*s12*s13 - 36*s13^2)*s23^
                3 + (6*s12 + 6*s13)*s23^4) + p1q^3*p2q*
             ((-6*s12^3 + 30*s12^2*s13 + 18*s12*s13^2 - 18*s13^3)*s23^2 +
              (-12*s12^2 + 42*s12*s13 - 6*s13^2)*s23^3 + (-6*s12 + 12*s13)*
               s23^4)))*Log(s23/(s12 + s13 + s23)))/
        (p2q*p3q^5*(s12^2*s13 + s12*s13^2)*s23^2 +
         p3q^3*(p2q^3*(6*s12^2*s13 + 6*s12*s13^2)*s23^2 - p1q^2*p2q*s12*s13*
            s23^3 + p1q*p2q^2*((3*s12^2*s13 + 3*s12*s13^2)*s23^2 -
             3*s12*s13*s23^3)) + p3q^2*(p2q^4*(4*s12^2*s13 + 4*s12*s13^2)*
            s23^2 - 2*p1q^2*p2q^2*s12*s13*s23^3 + p1q*p2q^3*
            ((3*s12^2*s13 + 3*s12*s13^2)*s23^2 - 3*s12*s13*s23^3)) +
         p3q^4*(p2q^2*(4*s12^2*s13 + 4*s12*s13^2)*s23^2 +
           p1q*p2q*((s12^2*s13 + s12*s13^2)*s23^2 - s12*s13*s23^3)) +
         p3q*(p2q^5*(s12^2*s13 + s12*s13^2)*s23^2 - p1q^2*p2q^3*s12*s13*
            s23^3 + p1q*p2q^4*((s12^2*s13 + s12*s13^2)*s23^2 -
             s12*s13*s23^3)))) + Log(s23/(s12 + s13 + s23))*
      ((p3q^5*((-162*s12^6*s13 - 810*s12^5*s13^2 - 1458*s12^4*s13^3 -
             1134*s12^3*s13^4 - 324*s12^2*s13^5)*s23 +
           (-10*s12^6 - 408*s12^5*s13 - 1434*s12^4*s13^2 - 1684*s12^3*s13^3 -
             648*s12^2*s13^4)*s23^2 + (-10*s12^5 - 236*s12^4*s13 -
             550*s12^3*s13^2 - 324*s12^2*s13^3)*s23^3) +
         p2q^5*((-324*s12^5*s13^2 - 1134*s12^4*s13^3 - 1458*s12^3*s13^4 -
             810*s12^2*s13^5 - 162*s12*s13^6)*s23 +
           (-648*s12^4*s13^2 - 1684*s12^3*s13^3 - 1434*s12^2*s13^4 -
             408*s12*s13^5 - 10*s13^6)*s23^2 + (-324*s12^3*s13^2 -
             550*s12^2*s13^3 - 236*s12*s13^4 - 10*s13^5)*s23^3) +
         p1q*p2q^4*((-162*s12^4*s13^2 - 235*s12^3*s13^3 + 6*s12^2*s13^4 +
             69*s12*s13^5 - 10*s13^6)*s23^2 + (-260*s12^3*s13^2 -
             204*s12^2*s13^3 + 66*s12*s13^4 + 10*s13^5)*s23^3 +
           (-98*s12^2*s13^2 - 33*s12*s13^3 + 20*s13^4)*s23^4) +
         p1q^2*p2q^3*((-153*s12^4*s13^2 - 153*s12^3*s13^3 + 153*s12^2*s13^4 +
             153*s12*s13^5)*s23^2 + (-80*s12^4*s13 - 609*s12^3*s13^2 -
             562*s12^2*s13^3 - 13*s12*s13^4 + 20*s13^5)*s23^3 +
           (-80*s12^3*s13 - 431*s12^2*s13^2 - 251*s12*s13^3 + 10*s13^4)*
            s23^4 + (-55*s12*s13^2 - 10*s13^3)*s23^5) +
         p1q^3*p2q^2*((153*s12^4*s13 + 153*s12^3*s13^2 - 153*s12^2*s13^3 -
             153*s12*s13^4)*s23^3 + (80*s12^4 + 358*s12^3*s13 +
             70*s12^2*s13^2 - 218*s12*s13^3 - 10*s13^4)*s23^4 +
           (80*s12^3 + 125*s12^2*s13 - 55*s12*s13^2 - 10*s13^3)*s23^5) +
         p3q^4*(p2q*(-648*s12^6*s13^2 - 1296*s12^5*s13^3 - 648*s12^4*s13^4 +
             (-90*s12^7 - 612*s12^6*s13 - 3744*s12^5*s13^2 - 6354*s12^4*
                s13^3 - 4842*s12^3*s13^4 - 2034*s12^2*s13^5 - 324*s12*s13^6)*
              s23 + (-110*s12^6 - 1014*s12^5*s13 - 4954*s12^4*s13^2 - 6712*
                s12^3*s13^3 - 3166*s12^2*s13^4 - 324*s12*s13^5)*s23^2 +
             (-20*s12^5 - 796*s12^4*s13 - 1984*s12^3*s13^2 - 1532*s12^2*
                s13^3 - 324*s12*s13^4)*s23^3) +
           p1q*((-10*s12^6 + 69*s12^5*s13 + 6*s12^4*s13^2 - 235*s12^3*s13^3 -
               162*s12^2*s13^4)*s23^2 + (10*s12^5 + 66*s12^4*s13 - 204*s12^3*
                s13^2 - 260*s12^2*s13^3)*s23^3 + (20*s12^4 - 33*s12^3*s13 -
               98*s12^2*s13^2)*s23^4)) +
         p3q^3*(p2q^2*(-648*s12^6*s13^2 + 1944*s12^4*s13^4 +
             1296*s12^3*s13^5 + (-90*s12^7 - 756*s12^6*s13 - 5094*s12^5*
                s13^2 - 7758*s12^4*s13^3 - 6570*s12^3*s13^4 - 3870*s12^2*
                s13^5 - 630*s12*s13^6)*s23 + (-100*s12^6 - 912*s12^5*s13 -
               6990*s12^4*s13^2 - 10996*s12^3*s13^3 - 5988*s12^2*s13^4 - 630*
                s12*s13^5)*s23^2 + (-10*s12^5 - 1208*s12^4*s13 - 3202*s12^3*
                s13^2 - 2976*s12^2*s13^3 - 972*s12*s13^4)*s23^3) +
           p1q*p2q*(-648*s12^6*s13^2 - 1296*s12^5*s13^3 - 648*s12^4*s13^4 +
             (306*s12^6*s13 - 648*s12^5*s13^2 - 1296*s12^4*s13^3 - 648*s12^3*
                s13^4 - 306*s12^2*s13^5)*s23 + (250*s12^6 + 976*s12^5*s13 +
               178*s12^4*s13^2 - 338*s12^3*s13^3 - 68*s12^2*s13^4 + 82*s12*
                s13^5)*s23^2 + (290*s12^5 + 90*s12^4*s13 - 34*s12^3*s13^2 +
               124*s12^2*s13^3 - 222*s12*s13^4)*s23^3 +
             (40*s12^4 - 46*s12^3*s13 + 24*s12^2*s13^2 + 20*s12*s13^3)*
              s23^4) + p1q^2*((153*s12^5*s13 + 153*s12^4*s13^2 - 153*s12^3*
                s13^3 - 153*s12^2*s13^4)*s23^2 + (20*s12^5 - 13*s12^4*s13 -
               562*s12^3*s13^2 - 609*s12^2*s13^3 - 80*s12*s13^4)*s23^3 +
             (10*s12^4 - 251*s12^3*s13 - 431*s12^2*s13^2 - 80*s12*s13^3)*
              s23^4 + (-10*s12^3 - 55*s12^2*s13)*s23^5)) +
         p3q*(p2q^4*(-648*s12^4*s13^4 - 1296*s12^3*s13^5 - 648*s12^2*s13^6 +
             (-324*s12^6*s13 - 2034*s12^5*s13^2 - 4842*s12^4*s13^3 - 6354*
                s12^3*s13^4 - 3744*s12^2*s13^5 - 612*s12*s13^6 - 90*s13^7)*
              s23 + (-324*s12^5*s13 - 3166*s12^4*s13^2 - 6712*s12^3*s13^3 -
               4954*s12^2*s13^4 - 1014*s12*s13^5 - 110*s13^6)*s23^2 +
             (-324*s12^4*s13 - 1532*s12^3*s13^2 - 1984*s12^2*s13^3 - 796*s12*
                s13^4 - 20*s13^5)*s23^3) + p1q*p2q^3*(-648*s12^4*s13^4 -
             1296*s12^3*s13^5 - 648*s12^2*s13^6 + (-306*s12^5*s13^2 - 648*
                s12^4*s13^3 - 1296*s12^3*s13^4 - 648*s12^2*s13^5 + 306*s12*
                s13^6)*s23 + (82*s12^5*s13 - 68*s12^4*s13^2 - 338*s12^3*
                s13^3 + 178*s12^2*s13^4 + 976*s12*s13^5 + 250*s13^6)*s23^2 +
             (-222*s12^4*s13 + 124*s12^3*s13^2 - 34*s12^2*s13^3 + 90*s12*
                s13^4 + 290*s13^5)*s23^3 + (20*s12^3*s13 + 24*s12^2*s13^2 -
               46*s12*s13^3 + 40*s13^4)*s23^4) + p1q^2*p2q^2*
            ((-459*s12^5*s13 - 153*s12^4*s13^2 + 765*s12^3*s13^3 + 153*s12^2*
                s13^4 - 306*s12*s13^5)*s23^2 + (-250*s12^5 - 1199*s12^4*s13 -
               340*s12^3*s13^2 - 293*s12^2*s13^3 - 1132*s12*s13^4 - 230*
                s13^5)*s23^3 + (-260*s12^4 - 555*s12^3*s13 - 321*s12^2*
                s13^2 - 726*s12*s13^3 - 250*s13^4)*s23^4 +
             (-10*s12^3 - 55*s12^2*s13 - 110*s12*s13^2 - 20*s13^3)*s23^5) +
           p1q^3*p2q*((70*s12^4 + 140*s12^3*s13 + 140*s12^2*s13^2 + 140*s12*
                s13^3 + 70*s13^4)*s23^4 + (70*s12^3 + 70*s12^2*s13 + 70*s12*
                s13^2 + 70*s13^3)*s23^5)) +
         p3q^2*(p2q^3*(1296*s12^5*s13^3 + 1944*s12^4*s13^4 -
             648*s12^2*s13^6 + (-630*s12^6*s13 - 3870*s12^5*s13^2 - 6570*
                s12^4*s13^3 - 7758*s12^3*s13^4 - 5094*s12^2*s13^5 - 756*s12*
                s13^6 - 90*s13^7)*s23 + (-630*s12^5*s13 - 5988*s12^4*s13^2 -
               10996*s12^3*s13^3 - 6990*s12^2*s13^4 - 912*s12*s13^5 - 100*
                s13^6)*s23^2 + (-972*s12^4*s13 - 2976*s12^3*s13^2 - 3202*
                s12^2*s13^3 - 1208*s12*s13^4 - 10*s13^5)*s23^3) +
           p1q*p2q^2*(1296*s12^5*s13^3 + 2592*s12^4*s13^4 +
             1296*s12^3*s13^5 + (306*s12^6*s13 + 342*s12^5*s13^2 + 1944*s12^4*
                s13^3 + 1944*s12^3*s13^4 + 342*s12^2*s13^5 + 306*s12*s13^6)*
              s23 + (260*s12^6 + 989*s12^5*s13 + 914*s12^4*s13^2 + 1090*s12^3*
                s13^3 + 914*s12^2*s13^4 + 989*s12*s13^5 + 260*s13^6)*s23^2 +
             (280*s12^5 - 198*s12^4*s13 + 554*s12^3*s13^2 + 554*s12^2*s13^3 -
               198*s12*s13^4 + 280*s13^5)*s23^3 + (20*s12^4 + 7*s12^3*s13 +
               244*s12^2*s13^2 + 7*s12*s13^3 + 20*s13^4)*s23^4) +
           p1q^2*p2q*((-306*s12^5*s13 + 153*s12^4*s13^2 + 765*s12^3*s13^3 -
               153*s12^2*s13^4 - 459*s12*s13^5)*s23^2 +
             (-230*s12^5 - 1132*s12^4*s13 - 293*s12^3*s13^2 - 340*s12^2*
                s13^3 - 1199*s12*s13^4 - 250*s13^5)*s23^3 +
             (-250*s12^4 - 726*s12^3*s13 - 321*s12^2*s13^2 - 555*s12*s13^3 -
               260*s13^4)*s23^4 + (-20*s12^3 - 110*s12^2*s13 - 55*s12*s13^2 -
               10*s13^3)*s23^5) + p1q^3*((-153*s12^4*s13 - 153*s12^3*s13^2 +
               153*s12^2*s13^3 + 153*s12*s13^4)*s23^3 +
             (-10*s12^4 - 218*s12^3*s13 + 70*s12^2*s13^2 + 358*s12*s13^3 + 80*
                s13^4)*s23^4 + (-10*s12^3 - 55*s12^2*s13 + 125*s12*s13^2 + 80*
                s13^3)*s23^5)))/(p2q*p3q^4*(27*s12^4*s13^2 + 54*s12^3*s13^3 +
           27*s12^2*s13^4)*s23^2 + p3q*(p1q*p2q^3*(27*s12^4*s13^2 +
             54*s12^3*s13^3 + 27*s12^2*s13^4)*s23^2 +
           p2q^4*(27*s12^4*s13^2 + 54*s12^3*s13^3 + 27*s12^2*s13^4)*s23^2) +
         p3q^3*(p1q*p2q*(27*s12^4*s13^2 + 54*s12^3*s13^3 + 27*s12^2*s13^4)*
            s23^2 + p2q^2*(81*s12^4*s13^2 + 162*s12^3*s13^3 + 81*s12^2*s13^4)*
            s23^2) + p3q^2*(p1q*p2q^2*(54*s12^4*s13^2 + 108*s12^3*s13^3 +
             54*s12^2*s13^4)*s23^2 + p2q^3*(81*s12^4*s13^2 +
             162*s12^3*s13^3 + 81*s12^2*s13^4)*s23^2)) +
       ((p3q^5*((90*s12^5*s13^3 + 180*s12^4*s13^4 + 90*s12^3*s13^5)*s23 +
            (10*s12^7 + 40*s12^6*s13 + 140*s12^5*s13^2 + 200*s12^4*s13^3 +
              90*s12^3*s13^4)*s23^2 + (10*s12^6 + 30*s12^5*s13 +
              110*s12^4*s13^2)*s23^3) +
          p2q^5*((90*s12^5*s13^3 + 180*s12^4*s13^4 + 90*s12^3*s13^5)*s23 +
            (90*s12^4*s13^3 + 200*s12^3*s13^4 + 140*s12^2*s13^5 +
              40*s12*s13^6 + 10*s13^7)*s23^2 + (110*s12^2*s13^4 +
              30*s12*s13^5 + 10*s13^6)*s23^3) + p1q*p2q^4*
           ((180*s12^5*s13^3 + 360*s12^4*s13^4 + 180*s12^3*s13^5)*s23 +
            (-90*s12^5*s13^2 - 90*s12^4*s13^3 + 300*s12^3*s13^4 +
              340*s12^2*s13^5 + 50*s12*s13^6 + 10*s13^7)*s23^2 +
            (-90*s12^4*s13^2 - 290*s12^3*s13^3 + 130*s12^2*s13^4 -
              50*s12*s13^5 - 20*s13^6)*s23^3 + (-110*s12^2*s13^3 -
              60*s12*s13^4 - 30*s13^5)*s23^4) + p1q^2*p2q^3*
           ((180*s12^5*s13^3 + 360*s12^4*s13^4 + 180*s12^3*s13^5)*s23 +
            (-17*s12^5*s13^2 - 34*s12^4*s13^3 + 353*s12^3*s13^4 +
              380*s12^2*s13^5 + 10*s12*s13^6)*s23^2 +
            (80*s12^5*s13 + 233*s12^4*s13^2 - 327*s12^3*s13^3 -
              10*s12^2*s13^4 - 100*s12*s13^5 - 30*s13^6)*s23^3 +
            (80*s12^4*s13 + 170*s12^3*s13^2 - 270*s12^2*s13^3 - 20*s12*s13^4)*
             s23^4 + (30*s12*s13^3 + 30*s13^4)*s23^5) +
          p1q^3*p2q^2*((-180*s12^5*s13^2 - 540*s12^4*s13^3 - 180*s12^3*s13^
                4 + 180*s12^2*s13^5)*s23^2 + (-163*s12^5*s13 -
              489*s12^4*s13^2 - 876*s12^3*s13^3 - 210*s12^2*s13^4 -
              20*s12*s13^5)*s23^3 + (-80*s12^5 - 403*s12^4*s13 -
              306*s12^3*s13^2 - 330*s12^2*s13^3 + 50*s12*s13^4 + 30*s13^5)*
             s23^4 + (-80*s12^4 - 160*s12^3*s13 + 30*s12*s13^3 + 20*s13^4)*
             s23^5 - 10*s13^3*s23^6) + p1q^4*p2q*
           ((180*s12^4*s13^2 - 180*s12^2*s13^4)*s23^3 +
            (163*s12^4*s13 + 343*s12^3*s13^2 - 170*s12^2*s13^3 +
              10*s12*s13^4)*s23^4 + (80*s12^4 + 243*s12^3*s13 - 10*s13^4)*
             s23^5 + (80*s12^3 - 10*s13^3)*s23^6) +
          p3q^4*(p2q*(720*s12^6*s13^3 + 720*s12^5*s13^4 + (90*s12^8 +
                27*s12^7*s13 + 477*s12^6*s13^2 + 990*s12^5*s13^3 +
                927*s12^4*s13^4 + 117*s12^3*s13^5 + 360*s12^2*s13^6)*s23 +
              (110*s12^7 + 17*s12^6*s13 + 730*s12^5*s13^2 + 674*s12^4*s13^3 +
                381*s12^3*s13^4 + 170*s12^2*s13^5)*s23^2 + (20*s12^6 +
                60*s12^5*s13 + 330*s12^4*s13^2 + 120*s12^3*s13^3 +
                10*s12^2*s13^4)*s23^3) + p1q*((180*s12^5*s13^3 +
                360*s12^4*s13^4 + 180*s12^3*s13^5)*s23 + (10*s12^7 +
                50*s12^6*s13 + 340*s12^5*s13^2 + 300*s12^4*s13^3 -
                90*s12^3*s13^4 - 90*s12^2*s13^5)*s23^2 + (-20*s12^6 -
                50*s12^5*s13 + 130*s12^4*s13^2 - 290*s12^3*s13^3 -
                90*s12^2*s13^4)*s23^3 + (-30*s12^5 - 60*s12^4*s13 -
                110*s12^3*s13^2)*s23^4)) +
          p3q^3*(p2q^2*(720*s12^6*s13^3 - 720*s12^5*s13^4 - 1440*s12^4*s13^
                5 + (90*s12^8 - 153*s12^7*s13 + 963*s12^6*s13^2 -
                54*s12^5*s13^3 - 1053*s12^4*s13^4 - 927*s12^3*s13^5 +
                846*s12^2*s13^6 - 180*s12*s13^7)*s23 + (100*s12^7 -
                203*s12^6*s13 + 886*s12^5*s13^2 - 68*s12^4*s13^3 -
                251*s12^3*s13^4 + 466*s12^2*s13^5 - 180*s12*s13^6)*s23^2 +
              (10*s12^6 + 30*s12^5*s13 + 250*s12^4*s13^2 + 180*s12^3*s13^3 +
                40*s12^2*s13^4)*s23^3) + p1q*p2q*(720*s12^6*s13^3 +
              720*s12^5*s13^4 + (-153*s12^7*s13 + 927*s12^6*s13^2 +
                180*s12^5*s13^3 + 180*s12^4*s13^4 - 387*s12^3*s13^5 +
                693*s12^2*s13^6)*s23 + (-340*s12^7 - 234*s12^6*s13 +
                1219*s12^5*s13^2 - 266*s12^4*s13^3 - 326*s12^3*s13^4 +
                53*s12^2*s13^5 + 80*s12*s13^6)*s23^2 + (-390*s12^6 +
                89*s12^5*s13 - 10*s12^4*s13^2 - 114*s12^3*s13^3 -
                370*s12^2*s13^4 + 60*s12*s13^5)*s23^3 + (-50*s12^5 -
                120*s12^4*s13 - 170*s12^3*s13^2 - 30*s12^2*s13^3 -
                20*s12*s13^4)*s23^4) + p1q^2*((180*s12^5*s13^3 +
                360*s12^4*s13^4 + 180*s12^3*s13^5)*s23 + (10*s12^6*s13 +
                380*s12^5*s13^2 + 353*s12^4*s13^3 - 34*s12^3*s13^4 -
                17*s12^2*s13^5)*s23^2 + (-30*s12^6 - 100*s12^5*s13 -
                10*s12^4*s13^2 - 327*s12^3*s13^3 + 233*s12^2*s13^4 +
                80*s12*s13^5)*s23^3 + (-20*s12^4*s13 - 270*s12^3*s13^2 +
                170*s12^2*s13^3 + 80*s12*s13^4)*s23^4 + (30*s12^4 +
                30*s12^3*s13)*s23^5)) +
          p3q^2*(p2q^3*(-1440*s12^5*s13^4 - 720*s12^4*s13^5 +
              720*s12^3*s13^6 + (-180*s12^7*s13 + 846*s12^6*s13^2 -
                927*s12^5*s13^3 - 1053*s12^4*s13^4 - 54*s12^3*s13^5 +
                963*s12^2*s13^6 - 153*s12*s13^7 + 90*s13^8)*s23 +
              (-180*s12^6*s13 + 466*s12^5*s13^2 - 251*s12^4*s13^3 -
                68*s12^3*s13^4 + 886*s12^2*s13^5 - 203*s12*s13^6 + 100*s13^7)*
               s23^2 + (40*s12^4*s13^2 + 180*s12^3*s13^3 + 250*s12^2*s13^4 +
                30*s12*s13^5 + 10*s13^6)*s23^3) + p1q*p2q^2*
             (-1440*s12^5*s13^4 - 1440*s12^4*s13^5 + (-153*s12^7*s13 +
                1620*s12^6*s13^2 - 2007*s12^5*s13^3 - 3240*s12^4*s13^4 -
                2007*s12^3*s13^5 + 1620*s12^2*s13^6 - 153*s12*s13^7)*s23 +
              (-260*s12^7 - 87*s12^6*s13 + 1166*s12^5*s13^2 - 1765*s12^4*
                 s13^3 - 1765*s12^3*s13^4 + 1166*s12^2*s13^5 - 87*s12*s13^6 -
                260*s13^7)*s23^2 + (-280*s12^6 + 226*s12^5*s13 -
                303*s12^4*s13^2 - 8*s12^3*s13^3 - 303*s12^2*s13^4 +
                226*s12*s13^5 - 280*s13^6)*s23^3 + (-20*s12^5 -
                80*s12^4*s13 - 90*s12^3*s13^2 - 90*s12^2*s13^3 -
                80*s12*s13^4 - 20*s13^5)*s23^4) + p1q^2*p2q*
             ((540*s12^6*s13^2 - 900*s12^5*s13^3 - 720*s12^4*s13^4 -
                180*s12^3*s13^5 + 540*s12^2*s13^6)*s23 + (479*s12^6*s13 +
                509*s12^5*s13^2 - 120*s12^4*s13^3 + 573*s12^3*s13^4 +
                319*s12^2*s13^5 + 316*s12*s13^6)*s23^2 + (490*s12^6 +
                650*s12^5*s13 - 729*s12^4*s13^2 + 1073*s12^3*s13^3 -
                243*s12^2*s13^4 + 623*s12*s13^5 + 250*s13^6)*s23^3 +
              (530*s12^5 - 219*s12^4*s13 - 40*s12^3*s13^2 + 67*s12^2*s13^3 +
                97*s12*s13^4 + 260*s13^5)*s23^4 + (40*s12^4 + 60*s12^3*s13 +
                30*s12*s13^3 + 10*s13^4)*s23^5) +
            p1q^3*((180*s12^5*s13^2 - 180*s12^4*s13^3 - 540*s12^3*s13^4 -
                180*s12^2*s13^5)*s23^2 + (-20*s12^5*s13 - 210*s12^4*s13^2 -
                876*s12^3*s13^3 - 489*s12^2*s13^4 - 163*s12*s13^5)*s23^3 +
              (30*s12^5 + 50*s12^4*s13 - 330*s12^3*s13^2 - 306*s12^2*s13^3 -
                403*s12*s13^4 - 80*s13^5)*s23^4 + (20*s12^4 + 30*s12^3*s13 -
                160*s12*s13^3 - 80*s13^4)*s23^5 - 10*s12^3*s23^6)) +
          p3q*(p2q^4*(720*s12^4*s13^5 + 720*s12^3*s13^6 + (360*s12^6*s13^2 +
                117*s12^5*s13^3 + 927*s12^4*s13^4 + 990*s12^3*s13^5 +
                477*s12^2*s13^6 + 27*s12*s13^7 + 90*s13^8)*s23 +
              (170*s12^5*s13^2 + 381*s12^4*s13^3 + 674*s12^3*s13^4 +
                730*s12^2*s13^5 + 17*s12*s13^6 + 110*s13^7)*s23^2 +
              (10*s12^4*s13^2 + 120*s12^3*s13^3 + 330*s12^2*s13^4 +
                60*s12*s13^5 + 20*s13^6)*s23^3) + p1q*p2q^3*
             (720*s12^4*s13^5 + 720*s12^3*s13^6 + (693*s12^6*s13^2 -
                387*s12^5*s13^3 + 180*s12^4*s13^4 + 180*s12^3*s13^5 +
                927*s12^2*s13^6 - 153*s12*s13^7)*s23 + (80*s12^6*s13 +
                53*s12^5*s13^2 - 326*s12^4*s13^3 - 266*s12^3*s13^4 +
                1219*s12^2*s13^5 - 234*s12*s13^6 - 340*s13^7)*s23^2 +
              (60*s12^5*s13 - 370*s12^4*s13^2 - 114*s12^3*s13^3 -
                10*s12^2*s13^4 + 89*s12*s13^5 - 390*s13^6)*s23^3 +
              (-20*s12^4*s13 - 30*s12^3*s13^2 - 170*s12^2*s13^3 -
                120*s12*s13^4 - 50*s13^5)*s23^4) + p1q^2*p2q^2*
             ((540*s12^6*s13^2 - 180*s12^5*s13^3 - 720*s12^4*s13^4 -
                900*s12^3*s13^5 + 540*s12^2*s13^6)*s23 + (316*s12^6*s13 +
                319*s12^5*s13^2 + 573*s12^4*s13^3 - 120*s12^3*s13^4 +
                509*s12^2*s13^5 + 479*s12*s13^6)*s23^2 + (250*s12^6 +
                623*s12^5*s13 - 243*s12^4*s13^2 + 1073*s12^3*s13^3 -
                729*s12^2*s13^4 + 650*s12*s13^5 + 490*s13^6)*s23^3 +
              (260*s12^5 + 97*s12^4*s13 + 67*s12^3*s13^2 - 40*s12^2*s13^3 -
                219*s12*s13^4 + 530*s13^5)*s23^4 + (10*s12^4 + 30*s12^3*s13 +
                60*s12*s13^3 + 40*s13^4)*s23^5) + p1q^3*p2q*
             ((-360*s12^5*s13^2 + 1080*s12^4*s13^3 + 1080*s12^3*s13^4 -
                360*s12^2*s13^5)*s23^2 + (-489*s12^5*s13 - 699*s12^4*s13^2 +
                1740*s12^3*s13^3 - 699*s12^2*s13^4 - 489*s12*s13^5)*s23^3 +
              (-320*s12^5 - 686*s12^4*s13 + 273*s12^3*s13^2 + 273*s12^2*
                 s13^3 - 686*s12*s13^4 - 320*s13^5)*s23^4 + (-330*s12^4 +
                113*s12^3*s13 + 113*s12*s13^3 - 330*s13^4)*s23^5 +
              (-10*s12^3 - 10*s13^3)*s23^6) + p1q^4*((-180*s12^4*s13^2 +
                180*s12^2*s13^4)*s23^3 + (10*s12^4*s13 - 170*s12^3*s13^2 +
                343*s12^2*s13^3 + 163*s12*s13^4)*s23^4 + (-10*s12^4 +
                243*s12*s13^3 + 80*s13^4)*s23^5 + (-10*s12^3 + 80*s13^3)*s23^
                6)))*Log((s12 + s13)/(s12 + s13 + s23)))/
        (p2q*p3q^4*(27*s12^4*s13^3 + 27*s12^3*s13^4)*s23^2 +
         p3q^2*(p2q^3*(81*s12^4*s13^3 + 81*s12^3*s13^4)*s23^2 -
           27*p1q^2*p2q*s12^3*s13^3*s23^3 + p1q*p2q^2*
            ((54*s12^4*s13^3 + 54*s12^3*s13^4)*s23^2 - 54*s12^3*s13^3*
              s23^3)) + p3q^3*(p2q^2*(81*s12^4*s13^3 + 81*s12^3*s13^4)*
            s23^2 + p1q*p2q*((27*s12^4*s13^3 + 27*s12^3*s13^4)*s23^2 -
             27*s12^3*s13^3*s23^3)) +
         p3q*(p2q^4*(27*s12^4*s13^3 + 27*s12^3*s13^4)*s23^2 -
           27*p1q^2*p2q^2*s12^3*s13^3*s23^3 + p1q*p2q^3*
            ((27*s12^4*s13^3 + 27*s12^3*s13^4)*s23^2 - 27*s12^3*s13^3*
              s23^3))) + ((p3q^3*(6*s12^3 + 12*s12^2*s13 + 6*s12*s13^2 +
            (12*s12^2 + 12*s12*s13)*s23 + 6*s12*s23^2) +
          p2q^3*(6*s12^2*s13 + 12*s12*s13^2 + 6*s13^3 +
            (12*s12*s13 + 12*s13^2)*s23 + 6*s13*s23^2) +
          p1q^2*p2q*(12*s12^2*s13 + 24*s12*s13^2 + 12*s13^3 +
            (24*s12*s13 + 24*s13^2)*s23 + 12*s13*s23^2) +
          p1q*p2q^2*(12*s12^2*s13 + 24*s12*s13^2 + 12*s13^3 +
            (24*s12*s13 + 24*s13^2)*s23 + 12*s13*s23^2) +
          p3q^2*(p1q*(12*s12^3 + 24*s12^2*s13 + 12*s12*s13^2 +
              (24*s12^2 + 24*s12*s13)*s23 + 12*s12*s23^2) +
            p2q*(12*s12^3 + 30*s12^2*s13 + 24*s12*s13^2 + 6*s13^3 +
              (24*s12^2 + 36*s12*s13 + 12*s13^2)*s23 + (12*s12 + 6*s13)*s23^
                2)) + p3q*(p1q^2*(12*s12^3 + 24*s12^2*s13 + 12*s12*s13^2 +
              (24*s12^2 + 24*s12*s13)*s23 + 12*s12*s23^2) +
            p2q^2*(6*s12^3 + 24*s12^2*s13 + 30*s12*s13^2 + 12*s13^3 +
              (12*s12^2 + 36*s12*s13 + 24*s13^2)*s23 + (6*s12 + 12*s13)*s23^
                2) + p1q*p2q*(12*s12^3 + 36*s12^2*s13 + 36*s12*s13^2 +
              12*s13^3 + (24*s12^2 + 48*s12*s13 + 24*s13^2)*s23 +
              (12*s12 + 12*s13)*s23^2)))*Log((p2q*s12 + p3q*s12 + p2q*s13 +
            p3q*s13 - p1q*s23)/((p1q + p2q + p3q)*(s12 + s13 + s23))))/
        (p2q*p3q^2*s12*s13*s23 + p3q*(p1q*p2q*s12*s13*s23 +
           p2q^2*s12*s13*s23))) + Log(s12/(s12 + s13 + s23))*
      ((p3q^5*((-5*s12^5*s13 - 10*s12^4*s13^2 - 5*s12^3*s13^3)*s23 +
           (-25*s12^4*s13 - 18*s12^3*s13^2 + 25*s12^2*s13^3 + 18*s12*s13^4)*
            s23^2 + (-10*s12^4 - 23*s12^3*s13 + 50*s12^2*s13^2 +
             54*s12*s13^3)*s23^3 + (-10*s12^3 + 25*s12^2*s13 + 54*s12*s13^2)*
            s23^4 + 18*s12*s13*s23^5) +
         p2q^5*((-364*s12^2*s13^4 - 566*s12*s13^5 - 202*s13^6)*s23 +
           (-648*s12^2*s13^3 - 1682*s12*s13^4 - 872*s13^5)*s23^2 +
           (-324*s12^2*s13^2 - 1746*s12*s13^3 - 1444*s13^4)*s23^3 +
           (-630*s12*s13^2 - 1080*s13^3)*s23^4 - 306*s13^2*s23^5) +
         p1q^2*p2q^3*((-40*s12^2*s13^3 + 96*s12*s13^4 + 136*s13^5)*s23^2 +
           (-160*s12^2*s13^2 + 32*s12*s13^3 + 368*s13^4)*s23^3 +
           (-80*s12^2*s13 - 144*s12*s13^2 + 328*s13^3)*s23^4 +
           (-80*s12*s13 + 96*s13^2)*s23^5) + p1q^3*p2q^2*
          ((176*s12^2*s13^2 + 176*s12*s13^3)*s23^3 +
           (256*s12^2*s13 + 432*s12*s13^2)*s23^4 + (80*s12^2 + 336*s12*s13)*
            s23^5 + 80*s12*s23^6) + p1q*p2q^4*
          ((-136*s12^2*s13^4 - 272*s12*s13^5 - 136*s13^6)*s23 +
           (-20*s12^2*s13^3 - 474*s12*s13^4 - 454*s13^5)*s23^2 +
           (72*s12^2*s13^2 - 238*s12*s13^3 - 608*s13^4)*s23^3 +
           (36*s12^2*s13 + 18*s12*s13^2 - 380*s13^3)*s23^4 +
           (54*s12*s13 - 72*s13^2)*s23^5 + 18*s13*s23^6) +
         p3q^4*(p2q*(-324*s12^3*s13^4 + (-145*s12^5*s13 + 13*s12^4*s13^2 -
               718*s12^3*s13^3 - 642*s12^2*s13^4 - 486*s12*s13^5 - 324*s13^6)*
              s23 + (-90*s12^5 - 122*s12^4*s13 - 222*s12^3*s13^2 - 1656*s12^2*
                s13^3 - 1627*s12*s13^4 - 990*s13^5)*s23^2 +
             (-110*s12^4 + 107*s12^3*s13 - 902*s12^2*s13^2 - 1854*s12*s13^3 -
               1314*s13^4)*s23^3 + (-20*s12^3 + 32*s12^2*s13 - 659*s12*
                s13^2 - 954*s13^3)*s23^4 + (54*s12*s13 - 306*s13^2)*s23^5) +
           p1q*((17*s12^4*s13^2 + 34*s12^3*s13^3 + 17*s12^2*s13^4)*s23 +
             (7*s12^4*s13 + 92*s12^3*s13^2 + 121*s12^2*s13^3 + 72*s12*s13^4 +
               36*s13^5)*s23^2 + (-10*s12^4 + 73*s12^3*s13 + 209*s12^2*
                s13^2 + 191*s12*s13^3 + 126*s13^4)*s23^3 +
             (10*s12^3 + 125*s12^2*s13 + 166*s12*s13^2 + 162*s13^3)*s23^4 +
             (20*s12^2 + 47*s12*s13 + 90*s13^2)*s23^5 + 18*s13*s23^6)) +
         p3q*(p2q^4*(-324*s12*s13^6 + (-60*s12^3*s13^3 - 677*s12^2*s13^4 -
               2389*s12*s13^5 - 728*s13^6)*s23 + (-90*s12^3*s13^2 - 1545*
                s12^2*s13^3 - 5250*s12*s13^4 - 2734*s13^5)*s23^2 +
             (-926*s12^2*s13^2 - 4923*s12*s13^3 - 4202*s13^4)*s23^3 +
             (-18*s12^2*s13 - 1720*s12*s13^2 - 3114*s13^3)*s23^4 +
             (18*s12*s13 - 918*s13^2)*s23^5) + p1q^2*p2q^2*
            ((-391*s12^3*s13^2 - 92*s12^2*s13^3 + 571*s12*s13^4 + 272*s13^5)*
              s23^2 + (-681*s12^3*s13 - 816*s12^2*s13^2 + 1019*s12*s13^3 +
               736*s13^4)*s23^3 + (-250*s12^3 - 904*s12^2*s13 + 475*s12*
                s13^2 + 656*s13^3)*s23^4 + (-260*s12^2 + 17*s12*s13 + 192*
                s13^2)*s23^5 - 10*s12*s23^6) + p1q^3*p2q*
            ((154*s12^2*s13^2 + 154*s12*s13^3)*s23^3 +
             (224*s12^2*s13 + 378*s12*s13^2)*s23^4 + (70*s12^2 + 294*s12*s13)*
              s23^5 + 70*s12*s23^6) + p1q*p2q^3*(-324*s12*s13^6 +
             (-79*s12^3*s13^3 - 34*s12^2*s13^4 - 1271*s12*s13^5 - 272*s13^6)*
              s23 + (-149*s12^3*s13^2 + 187*s12^2*s13^3 - 1084*s12*s13^4 -
               584*s13^5)*s23^2 + (-80*s12^3*s13 + 113*s12^2*s13^2 + 59*s12*
                s13^3 - 514*s13^4)*s23^3 + (12*s12^2*s13 + 378*s12*s13^2 -
               310*s13^3)*s23^4 + (182*s12*s13 - 54*s13^2)*s23^5 +
             54*s13*s23^6)) + p3q^3*(p2q^2*(-324*s12^3*s13^4 +
             648*s12^2*s13^5 + (-140*s12^5*s13 + 263*s12^4*s13^2 - 824*s12^3*
                s13^3 + 486*s12^2*s13^4 - 933*s12*s13^5 - 810*s13^6)*s23 +
             (-90*s12^5 + 83*s12^4*s13 - 120*s12^3*s13^2 - 2142*s12^2*s13^3 -
               3412*s12*s13^4 - 2484*s13^5)*s23^2 + (-100*s12^4 + 310*s12^3*
                s13 - 1809*s12^2*s13^2 - 4329*s12*s13^3 - 3456*s13^4)*s23^3 +
             (-10*s12^3 - 29*s12^2*s13 - 1778*s12*s13^2 - 2700*s13^3)*s23^4 +
             (72*s12*s13 - 918*s13^2)*s23^5) +
           p1q^2*((5*s12^3*s13^2 - 12*s12^2*s13^3 - 17*s12*s13^4)*s23^2 +
             (30*s12^3*s13 - 28*s12^2*s13^2 - 80*s12*s13^3)*s23^3 +
             (20*s12^3 - 6*s12^2*s13 - 119*s12*s13^2)*s23^4 +
             (10*s12^2 - 66*s12*s13)*s23^5 - 10*s12*s23^6) +
           p1q*p2q*(-324*s12^3*s13^4 + (232*s12^4*s13^2 - 461*s12^3*s13^3 -
               178*s12^2*s13^4 + 119*s12*s13^5)*s23 +
             (572*s12^4*s13 + 206*s12^3*s13^2 - 737*s12^2*s13^3 + 395*s12*
                s13^4 + 234*s13^5)*s23^2 + (250*s12^4 + 678*s12^3*s13 - 585*
                s12^2*s13^2 + 449*s12*s13^3 + 468*s13^4)*s23^3 +
             (290*s12^3 - 26*s12^2*s13 + 341*s12*s13^2 + 288*s13^3)*s23^4 +
             (40*s12^2 + 168*s12*s13 + 108*s13^2)*s23^5 + 54*s13*s23^6)) +
         p3q^2*(p2q^3*(648*s12^2*s13^5 - 324*s12*s13^6 +
             (240*s12^4*s13^2 - 171*s12^3*s13^3 + 815*s12^2*s13^4 - 2270*s12*
                s13^5 - 1012*s13^6)*s23 + (180*s12^4*s13 - 6*s12^3*s13^2 -
               1358*s12^2*s13^3 - 5335*s12*s13^4 - 3356*s13^5)*s23^2 +
             (180*s12^3*s13 - 1459*s12^2*s13^2 - 5598*s12*s13^3 - 4900*s13^4)*
              s23^3 + (-54*s12^2*s13 - 2155*s12*s13^2 - 3780*s13^3)*s23^4 +
             (54*s12*s13 - 1224*s13^2)*s23^5) + p1q^2*p2q*
            ((-386*s12^3*s13^2 - 64*s12^2*s13^3 + 458*s12*s13^4 + 136*s13^5)*
              s23^2 + (-651*s12^3*s13 - 684*s12^2*s13^2 + 907*s12*s13^3 + 368*
                s13^4)*s23^3 + (-230*s12^3 - 830*s12^2*s13 + 500*s12*s13^2 +
               328*s13^3)*s23^4 + (-250*s12^2 + 31*s12*s13 + 96*s13^2)*
              s23^5 - 20*s12*s23^6) + p1q^3*((-22*s12^2*s13^2 - 22*s12*s13^3)*
              s23^3 + (-32*s12^2*s13 - 54*s12*s13^2)*s23^4 +
             (-10*s12^2 - 42*s12*s13)*s23^5 - 10*s12*s23^6) +
           p1q*p2q^2*(648*s12^2*s13^5 + (215*s12^4*s13^2 + 74*s12^3*s13^3 +
               1851*s12^2*s13^4 + 416*s12*s13^5 - 136*s13^6)*s23 +
             (565*s12^4*s13 + 289*s12^3*s13^2 + 1293*s12^2*s13^3 + 1657*s12*
                s13^4 + 68*s13^5)*s23^2 + (260*s12^4 + 525*s12^3*s13 - 105*
                s12^2*s13^2 + 1851*s12*s13^3 + 436*s13^4)*s23^3 +
             (280*s12^3 - 175*s12^2*s13 + 859*s12*s13^2 + 196*s13^3)*s23^4 +
             (20*s12^2 + 249*s12*s13 + 36*s13^2)*s23^5 + 72*s13*s23^6)))/
        (p2q*p3q^4*(27*s12*s13^4*s23^2 + 54*s12*s13^3*s23^3 +
           27*s12*s13^2*s23^4) + p3q*(p1q*p2q^3*(27*s12*s13^4*s23^2 +
             54*s12*s13^3*s23^3 + 27*s12*s13^2*s23^4) +
           p2q^4*(27*s12*s13^4*s23^2 + 54*s12*s13^3*s23^3 +
             27*s12*s13^2*s23^4)) + p3q^3*(p1q*p2q*(27*s12*s13^4*s23^2 +
             54*s12*s13^3*s23^3 + 27*s12*s13^2*s23^4) +
           p2q^2*(81*s12*s13^4*s23^2 + 162*s12*s13^3*s23^3 +
             81*s12*s13^2*s23^4)) + p3q^2*(p1q*p2q^2*(54*s12*s13^4*s23^2 +
             108*s12*s13^3*s23^3 + 54*s12*s13^2*s23^4) +
           p2q^3*(81*s12*s13^4*s23^2 + 162*s12*s13^3*s23^3 +
             81*s12*s13^2*s23^4))) +
       ((p3q^5*((s12^4 - s12^2*s13^2)*s23^2 + 2*s12^3*s23^3 + s12^2*s23^4) +
          p2q^5*((-(s12^2*s13^2) + s13^4)*s23^2 + 2*s13^3*s23^3 +
            s13^2*s23^4) + p1q*p2q^4*(3*s12^2*s13^4 + 6*s12*s13^5 + 3*s13^6 +
            (3*s12^2*s13^3 + 12*s12*s13^4 + 9*s13^5)*s23 +
            (s12^3*s13 + 11*s12*s13^3 + 15*s13^4)*s23^2 +
            (5*s12^2*s13 + 10*s12*s13^2 + 16*s13^3)*s23^3 +
            (5*s12*s13 + 8*s13^2)*s23^4 + s13*s23^5) +
          p1q^4*p2q*((3*s12^3*s13^2 + 6*s12^2*s13^3 + 3*s12*s13^4)*s23 +
            (-3*s12^3*s13 + 5*s12^2*s13^2 + 17*s12*s13^3 + 9*s13^4)*s23^2 +
            (-12*s12^3 - 25*s12^2*s13 - 3*s12*s13^2 + 11*s13^3)*s23^3 +
            (-32*s12^2 - 45*s12*s13 - 13*s13^2)*s23^4 + (-28*s12 - 23*s13)*
             s23^5 - 8*s23^6) + p1q^3*p2q^2*(-3*s12^3*s13^3 - 6*s12^2*s13^4 -
            3*s12*s13^5 + (-12*s12^2*s13^3 - 18*s12*s13^4 - 6*s13^5)*s23 +
            (s12^3*s13 + s12^2*s13^2 - 4*s12*s13^3 - s13^4)*s23^2 +
            (-9*s12^3 - 4*s12^2*s13 + 13*s12*s13^2 + 14*s13^3)*s23^3 +
            (-24*s12^2 - 19*s12*s13 + s13^2)*s23^4 + (-21*s12 - 14*s13)*
             s23^5 - 6*s23^6) + p1q^5*((-4*s12^3*s13 - 8*s12^2*s13^2 -
              4*s12*s13^3)*s23^2 + (-6*s12^3 - 22*s12^2*s13 - 22*s12*s13^2 -
              6*s13^3)*s23^3 + (-16*s12^2 - 32*s12*s13 - 16*s13^2)*s23^4 +
            (-14*s12 - 14*s13)*s23^5 - 4*s23^6) + p1q^2*p2q^3*
           (-3*s12^3*s13^3 - 3*s12^2*s13^4 + 3*s12*s13^5 + 3*s13^6 +
            (-3*s12^3*s13^2 - 15*s12^2*s13^3 - 9*s12*s13^4 + 3*s13^5)*s23 +
            (s12^3*s13 - 11*s12^2*s13^2 - 14*s12*s13^3 + 4*s13^4)*s23^2 +
            (-3*s12^3 + 4*s12^2*s13 + 4*s12*s13^2 + 11*s13^3)*s23^3 +
            (-8*s12^2 - s12*s13 + 5*s13^2)*s23^4 + (-7*s12 - 4*s13)*s23^5 -
            2*s23^6) + p3q^4*(p2q*((-4*s12^4 - 2*s12^3*s13 - 4*s12^2*s13^2 +
                2*s12*s13^3)*s23^2 + (-7*s12^3 - 4*s12^2*s13 - s12*s13^2)*s23^
                3 + (-5*s12^2 - s12*s13)*s23^4 - 2*s12*s23^5) +
            p1q*(3*s12^6 + 6*s12^5*s13 + 3*s12^4*s13^2 + (9*s12^5 +
                12*s12^4*s13 + 3*s12^3*s13^2)*s23 + (15*s12^4 +
                11*s12^3*s13 + s12*s13^3)*s23^2 + (16*s12^3 + 10*s12^2*s13 +
                5*s12*s13^2)*s23^3 + (8*s12^2 + 5*s12*s13)*s23^4 +
              s12*s23^5)) + p3q^2*(p2q^3*((-s12^4 + 8*s12^3*s13 -
                3*s12^2*s13^2 + 8*s12*s13^3 - 4*s13^4)*s23^2 +
              (s12^3 + 4*s12^2*s13 + 7*s12*s13^2 - 2*s13^3)*s23^3 +
              (2*s12^2 + 5*s12*s13 + 2*s13^2)*s23^4) + p1q^2*p2q*
             (-9*s12^5*s13 - 9*s12^4*s13^2 + 9*s12^3*s13^3 + 9*s12^2*s13^4 +
              (-3*s12^5 - 21*s12^4*s13 + 9*s12^3*s13^2 + 33*s12^2*s13^3 +
                6*s12*s13^4)*s23 + (-2*s12^4 + 14*s12^2*s13^2 +
                19*s12*s13^3 + s13^4)*s23^2 + (3*s12^3 - s12^2*s13 -
                6*s12*s13^2 - 6*s13^3)*s23^3 + (-19*s12^2 - 44*s12*s13 -
                31*s13^2)*s23^4 + (-31*s12 - 34*s13)*s23^5 - 10*s23^6) +
            p1q^3*(-3*s12^5*s13 - 6*s12^4*s13^2 - 3*s12^3*s13^3 +
              (-6*s12^5 - 18*s12^4*s13 - 12*s12^3*s13^2)*s23 +
              (-s12^4 - 4*s12^3*s13 + s12^2*s13^2 + s12*s13^3)*s23^2 +
              (14*s12^3 + 13*s12^2*s13 - 4*s12*s13^2 - 9*s13^3)*s23^3 +
              (s12^2 - 19*s12*s13 - 24*s13^2)*s23^4 + (-14*s12 - 21*s13)*s23^
                5 - 6*s23^6) + p1q*p2q^2*(18*s12^4*s13^2 + 36*s12^3*s13^3 +
              18*s12^2*s13^4 + (9*s12^4*s13 + 63*s12^3*s13^2 + 63*s12^2*
                 s13^3 + 9*s12*s13^4)*s23 + (-2*s12^4 + 40*s12^3*s13 +
                54*s12^2*s13^2 + 40*s12*s13^3 - 2*s13^4)*s23^2 +
              (4*s12^3 + 29*s12^2*s13 + 29*s12*s13^2 + 4*s13^3)*s23^3 +
              (-2*s12^2 - 2*s12*s13 - 2*s13^2)*s23^4 + (-12*s12 - 12*s13)*s23^
                5 - 4*s23^6)) + p3q*(p2q^4*((2*s12^3*s13 - 4*s12^2*s13^2 -
                2*s12*s13^3 - 4*s13^4)*s23^2 + (-(s12^2*s13) - 4*s12*s13^2 -
                7*s13^3)*s23^3 + (-(s12*s13) - 5*s13^2)*s23^4 -
              2*s13*s23^5) + p1q^3*p2q*(6*s12^4*s13^2 + 12*s12^3*s13^3 +
              6*s12^2*s13^4 + (6*s12^4*s13 + 30*s12^3*s13^2 + 30*s12^2*
                 s13^3 + 6*s12*s13^4)*s23 + (7*s12^4 + 16*s12^3*s13 +
                16*s12^2*s13^2 + 16*s12*s13^3 + 7*s13^4)*s23^2 +
              (-3*s12^3 - 29*s12^2*s13 - 29*s12*s13^2 - 3*s13^3)*s23^3 +
              (-46*s12^2 - 90*s12*s13 - 46*s13^2)*s23^4 + (-52*s12 - 52*s13)*
               s23^5 - 16*s23^6) + p1q^2*p2q^2*(9*s12^4*s13^2 +
              9*s12^3*s13^3 - 9*s12^2*s13^4 - 9*s12*s13^5 + (6*s12^4*s13 +
                33*s12^3*s13^2 + 9*s12^2*s13^3 - 21*s12*s13^4 - 3*s13^5)*
               s23 + (s12^4 + 19*s12^3*s13 + 14*s12^2*s13^2 - 2*s13^4)*s23^
                2 + (-6*s12^3 - 6*s12^2*s13 - s12*s13^2 + 3*s13^3)*s23^3 +
              (-31*s12^2 - 44*s12*s13 - 19*s13^2)*s23^4 + (-34*s12 - 31*s13)*
               s23^5 - 10*s23^6) + p1q^4*((3*s12^4*s13 + 6*s12^3*s13^2 +
                3*s12^2*s13^3)*s23 + (9*s12^4 + 17*s12^3*s13 + 5*s12^2*
                 s13^2 - 3*s12*s13^3)*s23^2 + (11*s12^3 - 3*s12^2*s13 -
                25*s12*s13^2 - 12*s13^3)*s23^3 + (-13*s12^2 - 45*s12*s13 -
                32*s13^2)*s23^4 + (-23*s12 - 28*s13)*s23^5 - 8*s23^6) +
            p1q*p2q^3*(-12*s12^3*s13^3 - 24*s12^2*s13^4 - 12*s12*s13^5 +
              (-9*s12^3*s13^2 - 45*s12^2*s13^3 - 39*s12*s13^4 - 3*s13^5)*
               s23 + (-s12^4 + 2*s12^3*s13 - 38*s12^2*s13^2 - 42*s12*s13^3 -
                13*s13^4)*s23^2 + (-3*s12^3 - 10*s12^2*s13 - 22*s12*s13^2 -
                13*s13^3)*s23^3 + (-8*s12^2 - 12*s12*s13 - 10*s13^2)*s23^4 +
              (-8*s12 - 9*s13)*s23^5 - 2*s23^6)) +
          p3q^3*(p2q^2*((-4*s12^4 + 8*s12^3*s13 - 3*s12^2*s13^2 +
                8*s12*s13^3 - s13^4)*s23^2 + (-2*s12^3 + 7*s12^2*s13 +
                4*s12*s13^2 + s13^3)*s23^3 + (2*s12^2 + 5*s12*s13 + 2*s13^2)*
               s23^4) + p1q*p2q*(-12*s12^5*s13 - 24*s12^4*s13^2 -
              12*s12^3*s13^3 + (-3*s12^5 - 39*s12^4*s13 - 45*s12^3*s13^2 -
                9*s12^2*s13^3)*s23 + (-13*s12^4 - 42*s12^3*s13 -
                38*s12^2*s13^2 + 2*s12*s13^3 - s13^4)*s23^2 +
              (-13*s12^3 - 22*s12^2*s13 - 10*s12*s13^2 - 3*s13^3)*s23^3 +
              (-10*s12^2 - 12*s12*s13 - 8*s13^2)*s23^4 + (-9*s12 - 8*s13)*s23^
                5 - 2*s23^6) + p1q^2*(3*s12^6 + 3*s12^5*s13 - 3*s12^4*s13^2 -
              3*s12^3*s13^3 + (3*s12^5 - 9*s12^4*s13 - 15*s12^3*s13^2 -
                3*s12^2*s13^3)*s23 + (4*s12^4 - 14*s12^3*s13 - 11*s12^2*
                 s13^2 + s12*s13^3)*s23^2 + (11*s12^3 + 4*s12^2*s13 +
                4*s12*s13^2 - 3*s13^3)*s23^3 + (5*s12^2 - s12*s13 - 8*s13^2)*
               s23^4 + (-4*s12 - 7*s13)*s23^5 - 2*s23^6)))*
         Log(s13/(s12 + s13 + s23)))/(p2q*p3q^4*(3*s12^3*s13*s23^2 +
           3*s12^2*s13*s23^3) + p3q^2*
          (p1q*p2q^2*((3*s12^3*s13 - 12*s12^2*s13^2 + 3*s12*s13^3)*s23^2 +
             (-6*s12^2*s13 - 6*s12*s13^2)*s23^3 - 9*s12*s13*s23^4) +
           p1q^2*p2q*((3*s12^3*s13 - 6*s12^2*s13^2)*s23^2 +
             (-3*s12^2*s13 - 6*s12*s13^2)*s23^3 - 6*s12*s13*s23^4) +
           p2q^3*((-6*s12^2*s13^2 + 3*s12*s13^3)*s23^2 - 3*s12^2*s13*s23^3 -
             3*s12*s13*s23^4)) + p3q^3*(p2q^2*((3*s12^3*s13 - 6*s12^2*s13^2)*
              s23^2 - 3*s12*s13^2*s23^3 - 3*s12*s13*s23^4) +
           p1q*p2q*((6*s12^3*s13 - 3*s12^2*s13^2)*s23^2 +
             (3*s12^2*s13 - 3*s12*s13^2)*s23^3 - 3*s12*s13*s23^4)) +
         p3q*(p2q^4*(3*s12*s13^3*s23^2 + 3*s12*s13^2*s23^3) +
           p1q^2*p2q^2*((-6*s12^2*s13^2 + 3*s12*s13^3)*s23^2 +
             (-6*s12^2*s13 - 3*s12*s13^2)*s23^3 - 6*s12*s13*s23^4) +
           p1q^3*p2q*(-3*s12^2*s13^2*s23^2 + (-3*s12^2*s13 - 3*s12*s13^2)*
              s23^3 - 3*s12*s13*s23^4) + p1q*p2q^3*
            ((-3*s12^2*s13^2 + 6*s12*s13^3)*s23^2 + (-3*s12^2*s13 + 3*s12*
                s13^2)*s23^3 - 3*s12*s13*s23^4))) +
       ((p3q^6*((-10*s12^6 - 40*s12^5*s13 - 60*s12^4*s13^2 - 40*s12^3*s13^3 -
              10*s12^2*s13^4)*s23^2 + (-10*s12^5 - 30*s12^4*s13 -
              30*s12^3*s13^2 - 10*s12^2*s13^3)*s23^3) +
          p2q^6*((243*s12^3*s13^4 + 648*s12^2*s13^5 + 567*s12*s13^6 +
              162*s13^7)*s23 + (242*s12^3*s13^3 + 1051*s12^2*s13^4 +
              1376*s12*s13^5 + 567*s13^6)*s23^2 + (404*s12^2*s13^3 +
              971*s12*s13^4 + 648*s13^5)*s23^3 + (162*s12*s13^3 + 243*s13^4)*
             s23^4) + p1q*p2q^5*((729*s12^3*s13^4 + 1944*s12^2*s13^5 +
              1701*s12*s13^6 + 486*s13^7)*s23 + (645*s12^3*s13^3 +
              2748*s12^2*s13^4 + 3723*s12*s13^5 + 1620*s13^6)*s23^2 +
            (-80*s12^3*s13^2 + 729*s12^2*s13^3 + 1943*s12*s13^4 + 1539*s13^5)*
             s23^3 + (-80*s12^2*s13^2 - 79*s12*s13^3 + 162*s13^4)*s23^4 -
            243*s13^3*s23^5) + p1q^2*p2q^4*
           ((972*s12^3*s13^4 + 2592*s12^2*s13^5 + 2268*s12*s13^6 + 648*s13^7)*
             s23 + (888*s12^3*s13^3 + 3315*s12^2*s13^4 + 4452*s12*s13^5 +
              2025*s13^6)*s23^2 + (3*s12^3*s13^2 + 897*s12^2*s13^3 +
              1380*s12*s13^4 + 1296*s13^5)*s23^3 +
            (80*s12^3*s13 + 243*s12^2*s13^2 - 644*s12*s13^3 - 891*s13^4)*
             s23^4 + (80*s12^2*s13 + 160*s12*s13^2 - 810*s13^3)*s23^5) +
          p1q^3*p2q^3*((486*s12^3*s13^4 + 1296*s12^2*s13^5 + 1134*s12*s13^6 +
              324*s13^7)*s23 + (323*s12^3*s13^3 + 808*s12^2*s13^4 +
              1295*s12*s13^5 + 810*s13^6)*s23^2 + (-240*s12^3*s13^2 -
              721*s12^2*s13^3 - 1858*s12*s13^4 - 567*s13^5)*s23^3 +
            (-163*s12^3*s13 - 569*s12^2*s13^2 - 2185*s12*s13^3 - 2268*s13^4)*
             s23^4 + (-80*s12^3 - 403*s12^2*s13 - 326*s12*s13^2 - 1215*s13^3)*
             s23^5 + (-80*s12^2 - 160*s12*s13)*s23^6) +
          p1q^4*p2q^2*((-162*s12^3*s13^3 - 810*s12^2*s13^4 - 810*s12*s13^5 -
              162*s13^6)*s23^2 + (-323*s12^3*s13^2 - 1131*s12^2*s13^3 -
              2266*s12*s13^4 - 1134*s13^5)*s23^3 +
            (-243*s12^3*s13 - 569*s12^2*s13^2 - 1459*s12*s13^3 - 1782*s13^4)*
             s23^4 + (-80*s12^3 - 240*s12^2*s13 + 80*s12*s13^2 - 810*s13^3)*
             s23^5 + 163*s12*s13*s23^6 + 80*s12*s23^7) +
          p1q^5*p2q*((162*s12^2*s13^3 - 162*s13^5)*s23^3 +
            (323*s12^2*s13^2 + 323*s12*s13^3 - 324*s13^4)*s23^4 +
            (243*s12^2*s13 + 566*s12*s13^2 - 162*s13^3)*s23^5 +
            (80*s12^2 + 323*s12*s13)*s23^6 + 80*s12*s23^7) +
          p3q^5*(p1q*((-10*s12^6 - 40*s12^5*s13 - 60*s12^4*s13^2 -
                40*s12^3*s13^3 - 10*s12^2*s13^4)*s23^2 + (30*s12^5 +
                100*s12^4*s13 + 120*s12^3*s13^2 + 60*s12^2*s13^3 +
                10*s12*s13^4)*s23^3 + (40*s12^4 + 90*s12^3*s13 +
                60*s12^2*s13^2 + 10*s12*s13^3)*s23^4) +
            p2q*(-324*s12^5*s13^3 - 324*s12^4*s13^4 + (-90*s12^7 -
                27*s12^6*s13 - 117*s12^5*s13^2 - 333*s12^4*s13^3 -
                639*s12^3*s13^4 - 486*s12^2*s13^5 - 324*s12*s13^6)*s23 +
              (-110*s12^6 - 7*s12^5*s13 - 230*s12^4*s13^2 - 312*s12^3*s13^3 -
                616*s12^2*s13^4 - 313*s12*s13^5)*s23^2 + (-10*s12^5 -
                10*s12^4*s13 + 30*s12^3*s13^2 - 103*s12^2*s13^3 -
                133*s12*s13^4)*s23^3 + (10*s12^4 + 30*s12^3*s13 +
                40*s12^2*s13^2 + 20*s12*s13^3)*s23^4)) +
          p3q^4*(p2q^2*(-324*s12^5*s13^3 + 648*s12^4*s13^4 + 972*s12^3*s13^
                5 + (-90*s12^7 + 243*s12^6*s13 - 216*s12^5*s13^2 +
                153*s12^4*s13^3 - 612*s12^3*s13^4 - 990*s12^2*s13^5 -
                648*s12*s13^6 + 324*s13^7)*s23 + (-10*s12^6 + 340*s12^5*s13 -
                312*s12^4*s13^2 - 446*s12^3*s13^3 - 1230*s12^2*s13^4 -
                151*s12*s13^5 + 647*s13^6)*s23^2 + (100*s12^5 + 7*s12^4*s13 +
                310*s12^3*s13^2 - 180*s12^2*s13^3 + 226*s12*s13^4 +
                485*s13^5)*s23^3 + (20*s12^4 + 60*s12^3*s13 + 100*s12^2*
                 s13^2 + 222*s12*s13^3 + 162*s13^4)*s23^4) +
            p1q*p2q*(-324*s12^5*s13^3 + 324*s12^3*s13^5 + (243*s12^6*s13 -
                180*s12^5*s13^2 + 558*s12^4*s13^3 + 162*s12^3*s13^4 -
                9*s12^2*s13^5 - 162*s12*s13^6 + 324*s13^7)*s23 +
              (430*s12^6 + 381*s12^5*s13 - 155*s12^4*s13^2 + 868*s12^3*
                 s13^3 + 355*s12^2*s13^4 + 659*s12*s13^5 + 648*s13^6)*s23^2 +
              (510*s12^5 - 22*s12^4*s13 + 810*s12^3*s13^2 + 529*s12^2*s13^3 +
                878*s12*s13^4 + 487*s13^5)*s23^3 + (50*s12^4 + 100*s12^3*
                 s13 + 80*s12^2*s13^2 + 346*s12*s13^3 + 163*s13^4)*s23^4 +
              (-30*s12^3 - 60*s12^2*s13 - 40*s12*s13^2)*s23^5) +
            p1q^2*((-10*s12^4*s13^2 - 20*s12^3*s13^3 - 10*s12^2*s13^4)*s23^
                2 + (40*s12^5 + 130*s12^4*s13 + 140*s12^3*s13^2 +
                60*s12^2*s13^3 + 10*s12*s13^4)*s23^3 + (-20*s12^4 -
                60*s12^3*s13 - 60*s12^2*s13^2 - 20*s12*s13^3)*s23^4 +
              (-60*s12^3 - 90*s12^2*s13 - 30*s12*s13^2)*s23^5)) +
          p3q^3*(p2q^3*(972*s12^4*s13^4 - 972*s12^2*s13^6 + (270*s12^6*s13 -
                459*s12^5*s13^2 + 90*s12^4*s13^3 - 2646*s12^3*s13^4 -
                2646*s12^2*s13^5 + 9*s12*s13^6 + 1134*s13^7)*s23 +
              (90*s12^6 + 127*s12^5*s13 - 326*s12^4*s13^2 - 1153*s12^3*
                 s13^3 - 1612*s12^2*s13^4 + 1605*s12*s13^5 + 2427*s13^6)*s23^
                2 + (100*s12^5 - 193*s12^4*s13 + 516*s12^3*s13^2 +
                120*s12^2*s13^3 + 1819*s12*s13^4 + 1941*s13^5)*s23^3 +
              (10*s12^4 + 30*s12^3*s13 + 90*s12^2*s13^2 + 718*s12*s13^3 +
                648*s13^4)*s23^4) + p1q*p2q^2*(1296*s12^4*s13^4 +
              648*s12^3*s13^5 - 648*s12^2*s13^6 + (243*s12^6*s13 -
                846*s12^5*s13^2 + 1368*s12^4*s13^3 - 1305*s12^3*s13^4 -
                1323*s12^2*s13^5 + 333*s12*s13^6 + 1782*s13^7)*s23 +
              (350*s12^6 - 459*s12^5*s13 - 373*s12^4*s13^2 + 696*s12^3*
                 s13^3 + 142*s12^2*s13^4 + 3067*s12*s13^5 + 3563*s13^6)*s23^
                2 + (40*s12^5 - 1043*s12^4*s13 + 1627*s12^3*s13^2 +
                685*s12^2*s13^3 + 3345*s12*s13^4 + 2433*s13^5)*s23^3 +
              (-360*s12^4 + 149*s12^3*s13 - 320*s12^2*s13^2 + 1172*s12*
                 s13^3 + 490*s13^4)*s23^4 + (-50*s12^3 - 120*s12^2*s13 -
                100*s12*s13^2 - 162*s13^3)*s23^5) + p1q^2*p2q*
             (324*s12^4*s13^4 + 324*s12^3*s13^5 + (-333*s12^5*s13^2 +
                801*s12^4*s13^3 - 333*s12^3*s13^4 - 495*s12^2*s13^5 +
                648*s13^7)*s23 + (-972*s12^5*s13 - 66*s12^4*s13^2 +
                189*s12^3*s13^3 - 1186*s12^2*s13^4 + 629*s12*s13^5 +
                1134*s13^6)*s23^2 + (-830*s12^5 - 1294*s12^4*s13 +
                1247*s12^3*s13^2 - 1073*s12^2*s13^3 + 831*s12*s13^4 +
                487*s13^5)*s23^3 + (-950*s12^4 + 158*s12^3*s13 -
                750*s12^2*s13^2 + 228*s12*s13^3 - 162*s13^4)*s23^4 +
              (-90*s12^3 - 170*s12^2*s13 - 110*s12*s13^2 - 163*s13^3)*s23^5 +
              (30*s12^2 + 30*s12*s13)*s23^6) +
            p1q^3*((-10*s12^4*s13^2 - 20*s12^3*s13^3 - 10*s12^2*s13^4)*s23^
                2 + (10*s12^3*s13^2 + 20*s12^2*s13^3 + 10*s12*s13^4)*s23^3 +
              (-60*s12^4 - 150*s12^3*s13 - 100*s12^2*s13^2 - 20*s12*s13^3)*
               s23^4 + (-20*s12^3 - 20*s12^2*s13)*s23^5 + (40*s12^2 +
                30*s12*s13)*s23^6)) + p3q^2*(p2q^4*(-972*s12^3*s13^5 -
              648*s12^2*s13^6 + 324*s12*s13^7 + (-360*s12^5*s13^2 -
                459*s12^4*s13^3 - 2799*s12^3*s13^4 - 405*s12^2*s13^5 +
                2619*s12*s13^6 + 1620*s13^7)*s23 + (-180*s12^5*s13 +
                6*s12^4*s13^2 - 703*s12^3*s13^3 + 1380*s12^2*s13^4 +
                5506*s12*s13^5 + 3885*s13^6)*s23^2 + (-180*s12^4*s13 +
                426*s12^3*s13^2 + 1263*s12^2*s13^3 + 4137*s12*s13^4 +
                3399*s13^5)*s23^3 + (40*s12^2*s13^2 + 1093*s12*s13^3 +
                1134*s13^4)*s23^4) + p1q*p2q^3*(-1620*s12^3*s13^5 -
              1296*s12^2*s13^6 + 324*s12*s13^7 + (-666*s12^5*s13^2 -
                144*s12^4*s13^3 - 4689*s12^3*s13^4 - 486*s12^2*s13^5 +
                4401*s12*s13^6 + 3564*s13^7)*s23 + (-673*s12^5*s13 +
                586*s12^4*s13^2 - 394*s12^3*s13^3 + 2800*s12^2*s13^4 +
                9743*s12*s13^5 + 7936*s13^6)*s23^2 + (-260*s12^5 -
                607*s12^4*s13 + 1488*s12^3*s13^2 + 1864*s12^2*s13^3 +
                7073*s12*s13^4 + 5835*s13^5)*s23^3 + (-280*s12^4 +
                226*s12^3*s13 - 573*s12^2*s13^2 + 1652*s12*s13^3 + 977*s13^4)*
               s23^4 + (-20*s12^3 - 80*s12^2*s13 - 90*s12*s13^2 - 486*s13^3)*
               s23^5) + p1q^2*p2q^2*(-648*s12^3*s13^5 - 648*s12^2*s13^6 +
              (-333*s12^5*s13^2 + 162*s12^4*s13^3 - 3078*s12^3*s13^4 -
                486*s12^2*s13^5 + 2439*s12*s13^6 + 2592*s13^7)*s23 +
              (-729*s12^5*s13 + 1113*s12^4*s13^2 - 771*s12^3*s13^3 +
                316*s12^2*s13^4 + 5935*s12*s13^5 + 5346*s13^6)*s23^2 +
              (-510*s12^5 - 21*s12^4*s13 + 1764*s12^3*s13^2 - 690*s12^2*
                 s13^3 + 4735*s12*s13^4 + 2919*s13^5)*s23^3 +
              (-50*s12^4 + 1289*s12^3*s13 - 1788*s12^2*s13^2 + 1398*s12*
                 s13^3 - 647*s13^4)*s23^4 + (500*s12^3 - 289*s12^2*s13 +
                50*s12*s13^2 - 812*s13^3)*s23^5 + (40*s12^2 + 60*s12*s13)*s23^
                6) + p1q^4*((20*s12^3*s13^2 + 30*s12^2*s13^3 + 10*s12*s13^4)*
               s23^3 + 10*s12^2*s13^2*s23^4 + (40*s12^3 + 70*s12^2*s13 +
                20*s12*s13^2)*s23^5 + (30*s12^2 + 20*s12*s13)*s23^6 -
              10*s12*s23^7) + p1q^3*p2q*((162*s12^4*s13^3 - 324*s12^3*s13^4 +
                486*s12^2*s13^5 + 972*s12*s13^6 + 648*s13^7)*s23 +
              (979*s12^4*s13^2 - 347*s12^3*s13^3 + 293*s12^2*s13^4 +
                2573*s12*s13^5 + 1296*s13^6)*s23^2 + (1458*s12^4*s13 +
                1238*s12^3*s13^2 - 978*s12^2*s13^3 + 2624*s12*s13^4 +
                486*s13^5)*s23^3 + (810*s12^4 + 1876*s12^3*s13 -
                1471*s12^2*s13^2 + 1104*s12*s13^3 - 487*s13^4)*s23^4 +
              (890*s12^3 - 222*s12^2*s13 + 170*s12*s13^2 - 325*s13^3)*s23^5 +
              (70*s12^2 + 80*s12*s13)*s23^6 - 10*s12*s23^7)) +
          p3q*(p2q^5*(324*s12^2*s13^6 + 324*s12*s13^7 + (-63*s12^4*s13^3 +
                117*s12^3*s13^4 + 2385*s12^2*s13^5 + 2853*s12*s13^6 +
                972*s13^7)*s23 + (190*s12^4*s13^2 + 518*s12^3*s13^3 +
                3419*s12^2*s13^4 + 5439*s12*s13^5 + 2672*s13^6)*s23^2 +
              (160*s12^3*s13^2 + 1460*s12^2*s13^3 + 3648*s12*s13^4 +
                2591*s13^5)*s23^3 + (10*s12^2*s13^2 + 739*s12*s13^3 +
                891*s13^4)*s23^4) + p1q*p2q^4*(648*s12^2*s13^6 +
              648*s12*s13^7 + (18*s12^4*s13^3 + 423*s12^3*s13^4 +
                5688*s12^2*s13^5 + 6579*s12*s13^6 + 2592*s13^7)*s23 +
              (693*s12^4*s13^2 + 1507*s12^3*s13^3 + 7913*s12^2*s13^4 +
                12021*s12*s13^5 + 6560*s13^6)*s23^2 + (80*s12^4*s13 +
                363*s12^3*s13^2 + 2953*s12^2*s13^3 + 7007*s12*s13^4 +
                5266*s13^5)*s23^3 + (60*s12^3*s13 - 340*s12^2*s13^2 +
                890*s12*s13^3 + 731*s13^4)*s23^4 + (-20*s12^2*s13 -
                30*s12*s13^2 - 567*s13^3)*s23^5) + p1q^2*p2q^3*
             (324*s12^2*s13^6 + 324*s12*s13^7 + (9*s12^4*s13^3 +
                171*s12^3*s13^4 + 4545*s12^2*s13^5 + 5355*s12*s13^6 +
                2592*s13^7)*s23 + (926*s12^4*s13^2 + 1195*s12^3*s13^3 +
                6247*s12^2*s13^4 + 9668*s12*s13^5 + 5994*s13^6)*s23^2 +
              (566*s12^4*s13 + 552*s12^3*s13^2 + 1943*s12^2*s13^3 +
                4799*s12*s13^4 + 3323*s13^5)*s23^3 + (250*s12^4 +
                863*s12^3*s13 - 756*s12^2*s13^2 + 182*s12*s13^3 - 1457*s13^4)*
               s23^4 + (260*s12^3 + 87*s12^2*s13 + 47*s12*s13^2 - 1378*s13^3)*
               s23^5 + (10*s12^2 + 30*s12*s13)*s23^6) +
            p1q^4*p2q*((-324*s12^3*s13^3 - 324*s13^6)*s23^2 +
              (-969*s12^3*s13^2 - 453*s12^2*s13^3 + 354*s12*s13^4 -
                1134*s13^5)*s23^3 + (-972*s12^3*s13 - 1558*s12^2*s13^2 +
                737*s12*s13^3 - 1296*s13^4)*s23^4 + (-400*s12^3 -
                1259*s12^2*s13 + 496*s12*s13^2 - 486*s13^3)*s23^5 +
              (-420*s12^2 + 93*s12*s13)*s23^6 - 20*s12*s23^7) +
            p1q^5*((-10*s12^2*s13^2 - 10*s12*s13^3)*s23^4 - 10*s12*s13^2*s23^
                5 + (-10*s12^2 - 10*s12*s13)*s23^6 - 10*s12*s23^7) +
            p1q^3*p2q^2*((162*s12^4*s13^3 + 486*s12^3*s13^4 + 1782*s12^2*
                 s13^5 + 1782*s12*s13^6 + 972*s13^7)*s23 + (656*s12^4*s13^2 +
                959*s12^3*s13^3 + 3046*s12^2*s13^4 + 3535*s12*s13^5 +
                1782*s13^6)*s23^2 + (729*s12^4*s13 + 322*s12^3*s13^2 +
                1206*s12^2*s13^3 + 2223*s12*s13^4 - 486*s13^5)*s23^3 +
              (330*s12^4 + 477*s12^3*s13 - 1175*s12^2*s13^2 + 901*s12*s13^3 -
                2593*s13^4)*s23^4 + (20*s12^3 - 749*s12^2*s13 +
                573*s12*s13^2 - 1297*s13^3)*s23^5 + (-320*s12^2 +
                133*s12*s13)*s23^6 - 10*s12*s23^7)))*
         Log(s23/(s12 + s13 + s23)))/(p2q*p3q^5*(27*s12^3*s13^3 +
           27*s12^2*s13^4)*s23^2 + p3q^4*
          (p1q*p2q*((27*s12^3*s13^3 - 27*s12*s13^5)*s23^2 +
             (-54*s12^2*s13^3 - 27*s12*s13^4)*s23^3) +
           p2q^2*((81*s12^3*s13^3 + 54*s12^2*s13^4 - 27*s12*s13^5)*s23^2 +
             (-27*s12^2*s13^3 - 27*s12*s13^4)*s23^3)) +
         p3q^3*(p2q^3*((81*s12^3*s13^3 - 81*s12*s13^5)*s23^2 +
             (-81*s12^2*s13^3 - 81*s12*s13^4)*s23^3) +
           p1q^2*p2q*((-27*s12^2*s13^4 - 27*s12*s13^5)*s23^2 -
             54*s12^2*s13^3*s23^3 + 27*s12*s13^3*s23^4) +
           p1q*p2q^2*((54*s12^3*s13^3 - 54*s12^2*s13^4 - 108*s12*s13^5)*
              s23^2 + (-162*s12^2*s13^3 - 81*s12*s13^4)*s23^3 +
             27*s12*s13^3*s23^4)) +
         p3q*(p2q^5*((-27*s12^2*s13^4 - 27*s12*s13^5)*s23^2 +
             (-27*s12^2*s13^3 - 27*s12*s13^4)*s23^3) + p1q^3*p2q^2*
            (27*s12*s13^4*s23^3 + 27*s12*s13^3*s23^4) +
           p1q*p2q^4*((-54*s12^2*s13^4 - 54*s12*s13^5)*s23^2 +
             (-54*s12^2*s13^3 - 27*s12*s13^4)*s23^3 + 27*s12*s13^3*s23^4) +
           p1q^2*p2q^3*((-27*s12^2*s13^4 - 27*s12*s13^5)*s23^2 +
             (-27*s12^2*s13^3 + 27*s12*s13^4)*s23^3 + 54*s12*s13^3*s23^4)) +
         p3q^2*(p2q^4*((27*s12^3*s13^3 - 54*s12^2*s13^4 - 81*s12*s13^5)*
              s23^2 + (-81*s12^2*s13^3 - 81*s12*s13^4)*s23^3) +
           p1q^3*p2q*(27*s12*s13^4*s23^3 + 27*s12*s13^3*s23^4) +
           p1q*p2q^3*((27*s12^3*s13^3 - 108*s12^2*s13^4 - 135*s12*s13^5)*
              s23^2 + (-162*s12^2*s13^3 - 81*s12*s13^4)*s23^3 +
             54*s12*s13^3*s23^4) + p1q^2*p2q^2*((-54*s12^2*s13^4 - 54*s12*
                s13^5)*s23^2 + (-81*s12^2*s13^3 + 27*s12*s13^4)*s23^3 +
             81*s12*s13^3*s23^4))) +
       ((p3q^5*((10*s12^4*s13^2 + 20*s12^3*s13^3 + 10*s12^2*s13^4)*s23 +
            (10*s12^5 + 30*s12^4*s13 + 50*s12^3*s13^2 + 30*s12^2*s13^3)*
             s23^2 + (10*s12^4 + 20*s12^3*s13 + 20*s12^2*s13^2)*s23^3) +
          p2q^5*((-170*s12^2*s13^4 - 340*s12*s13^5 - 170*s13^6)*s23 +
            (-250*s12^2*s13^3 - 760*s12*s13^4 - 510*s13^5)*s23^2 +
            (-420*s12*s13^3 - 510*s13^4)*s23^3 - 170*s13^3*s23^4) +
          p1q*p2q^4*(27*s12^2*s13^5 + 54*s12*s13^6 + 27*s13^7 +
            (-483*s12^2*s13^4 - 912*s12*s13^5 - 429*s13^6)*s23 +
            (-740*s12^2*s13^3 - 2206*s12*s13^4 - 1439*s13^5)*s23^2 +
            (90*s12^2*s13^2 - 1140*s12*s13^3 - 1473*s13^4)*s23^3 +
            (100*s12*s13^2 - 480*s13^3)*s23^4 + 10*s13^2*s23^5) +
          p1q^2*p2q^3*(27*s12^2*s13^5 + 54*s12*s13^6 + 27*s13^7 +
            (-680*s12^2*s13^4 - 1306*s12*s13^5 - 626*s13^6)*s23 +
            (-1160*s12^2*s13^3 - 3197*s12*s13^4 - 2010*s13^5)*s23^2 +
            (27*s12^2*s13^2 - 1780*s12*s13^3 - 2004*s13^4)*s23^3 +
            (-80*s12^2*s13 - 23*s12*s13^2 - 617*s13^3)*s23^4 +
            (-80*s12*s13 + 30*s13^2)*s23^5) + p1q^4*p2q*
           ((20*s12^2*s13^3 + 40*s12*s13^4 + 20*s13^5)*s23^2 +
            (343*s12^2*s13^2 + 403*s12*s13^3 + 60*s13^4)*s23^3 +
            (243*s12^2*s13 + 606*s12*s13^2 + 60*s13^3)*s23^4 +
            (80*s12^2 + 323*s12*s13 + 20*s13^2)*s23^5 + 80*s12*s23^6) +
          p1q^3*p2q^2*((-367*s12^2*s13^4 - 734*s12*s13^5 - 367*s13^6)*s23 +
            (-650*s12^2*s13^3 - 1711*s12*s13^4 - 1061*s13^5)*s23^2 +
            (280*s12^2*s13^2 - 657*s12*s13^3 - 981*s13^4)*s23^3 +
            (163*s12^2*s13 + 483*s12*s13^2 - 247*s13^3)*s23^4 +
            (80*s12^2 + 243*s12*s13 + 40*s13^2)*s23^5 + 80*s12*s23^6) +
          p3q^4*(p1q*(-27*s12^5*s13^2 - 54*s12^4*s13^3 - 27*s12^3*s13^4 +
              (-34*s12^4*s13^2 - 24*s12^3*s13^3 - 10*s12*s13^5)*s23 +
              (10*s12^5 + 30*s12^4*s13 + 23*s12^3*s13^2 - 10*s12^2*s13^3 -
                40*s12*s13^4)*s23^2 + (-20*s12^4 - 50*s12^3*s13 -
                60*s12^2*s13^2 - 60*s12*s13^3)*s23^3 + (-30*s12^3 -
                40*s12^2*s13 - 30*s12*s13^2)*s23^4) +
            p2q*((90*s12^6 - 63*s12^5*s13 + 210*s12^4*s13^2 - 113*s12^3*
                 s13^3 + 350*s12^2*s13^4 + 160*s12*s13^5)*s23 +
              (100*s12^5 - 133*s12^4*s13 + 353*s12^3*s13^2 - 76*s12^2*s13^3 +
                380*s12*s13^4)*s23^2 + (-20*s12^3*s13 - 30*s12^2*s13^2 +
                30*s12*s13^3)*s23^3 + (-10*s12^3 - 20*s12^2*s13 -
                30*s12*s13^2)*s23^4)) +
          p3q^3*(p2q^2*((-270*s12^5*s13 + 399*s12^4*s13^2 - 153*s12^3*s13^3 +
                1486*s12^2*s13^4 + 140*s12*s13^5 - 170*s13^6)*s23 +
              (-90*s12^5 - 217*s12^4*s13 + 389*s12^3*s13^2 + 281*s12^2*
                 s13^3 + 816*s12*s13^4 - 590*s13^5)*s23^2 + (-100*s12^4 +
                113*s12^3*s13 - 393*s12^2*s13^2 + 206*s12*s13^3 - 590*s13^4)*
               s23^3 + (-10*s12^3 - 20*s12^2*s13 - 70*s12*s13^2 - 170*s13^3)*
               s23^4) + p1q*p2q*(-27*s12^5*s13^2 + 27*s12^4*s13^3 +
              135*s12^3*s13^4 + 81*s12^2*s13^5 + (-243*s12^5*s13 +
                436*s12^4*s13^2 + 199*s12^3*s13^3 + 972*s12^2*s13^4 -
                50*s12*s13^5 - 170*s13^6)*s23 + (-350*s12^5 - 134*s12^4*s13 +
                436*s12^3*s13^2 - 284*s12^2*s13^3 + 396*s12*s13^4 -
                500*s13^5)*s23^2 + (-390*s12^4 + 349*s12^3*s13 -
                849*s12^2*s13^2 + 86*s12*s13^3 - 400*s13^4)*s23^3 +
              (-20*s12^3 - 30*s12^2*s13 - 100*s12*s13^2 - 60*s13^3)*s23^4 +
              (20*s12^2 + 20*s12*s13 + 10*s13^2)*s23^5) +
            p1q^2*(27*s12^4*s13^3 + 54*s12^3*s13^4 + 27*s12^2*s13^5 +
              (74*s12^4*s13^2 + 182*s12^3*s13^3 + 88*s12^2*s13^4 -
                20*s12*s13^5)*s23 + (118*s12^3*s13^2 + 75*s12^2*s13^3 -
                60*s12*s13^4 + 10*s13^5)*s23^2 + (-30*s12^4 - 70*s12^3*s13 -
                36*s12^2*s13^2 - 70*s12*s13^3 + 30*s13^4)*s23^3 +
              (10*s12^2*s13 - 10*s12*s13^2 + 30*s13^3)*s23^4 +
              (30*s12^2 + 20*s12*s13 + 10*s13^2)*s23^5)) +
          p3q^2*(p2q^3*((370*s12^4*s13^2 + 131*s12^3*s13^3 + 1396*s12^2*
                 s13^4 - 873*s12*s13^5 - 510*s13^6)*s23 + (180*s12^4*s13 -
                6*s12^3*s13^2 + 494*s12^2*s13^3 - 854*s12*s13^4 - 1690*s13^5)*
               s23^2 + (180*s12^3*s13 - 496*s12^2*s13^2 - 361*s12*s13^3 -
                1690*s13^4)*s23^3 + (-60*s12*s13^2 - 510*s13^3)*s23^4) +
            p1q*p2q^2*(81*s12^4*s13^3 + 81*s12^3*s13^4 - 81*s12^2*s13^5 -
              81*s12*s13^6 + (713*s12^4*s13^2 + 146*s12^3*s13^3 +
                1308*s12^2*s13^4 - 1639*s12*s13^5 - 850*s13^6)*s23 +
              (673*s12^4*s13 - 212*s12^3*s13^2 - 242*s12^2*s13^3 -
                1254*s12*s13^4 - 2600*s13^5)*s23^2 + (260*s12^4 +
                607*s12^3*s13 - 1581*s12^2*s13^2 + 117*s12*s13^3 -
                2380*s13^4)*s23^3 + (280*s12^3 - 266*s12^2*s13 +
                253*s12*s13^2 - 600*s13^3)*s23^4 + (20*s12^2 + 40*s12*s13 +
                30*s13^2)*s23^5) + p1q^3*((-47*s12^3*s13^3 - 94*s12^2*s13^4 -
                47*s12*s13^5)*s23 + (-57*s12^3*s13^2 - 198*s12^2*s13^3 -
                121*s12*s13^4 + 20*s13^5)*s23^2 + (-114*s12^2*s13^2 -
                111*s12*s13^3 + 60*s13^4)*s23^3 + (30*s12^3 + 50*s12^2*s13 -
                17*s12*s13^2 + 60*s13^3)*s23^4 + (20*s12^2 + 10*s12*s13 +
                20*s13^2)*s23^5 - 10*s12*s23^6) + p1q^2*p2q*(27*s12^4*s13^3 -
              81*s12^2*s13^5 - 54*s12*s13^6 + (407*s12^4*s13^2 +
                428*s12^3*s13^3 + 465*s12^2*s13^4 - 562*s12*s13^5 -
                340*s13^6)*s23 + (729*s12^4*s13 - 229*s12^3*s13^2 -
                533*s12^2*s13^3 - 160*s12*s13^4 - 970*s13^5)*s23^2 +
              (510*s12^4 + 750*s12^3*s13 - 1608*s12^2*s13^2 + 524*s12*s13^3 -
                790*s13^4)*s23^3 + (560*s12^3 - 379*s12^2*s13 +
                316*s12*s13^2 - 110*s13^3)*s23^4 + (40*s12^2 + 50*s12*s13 +
                50*s13^2)*s23^5 - 10*s12*s23^6)) +
          p3q*(p2q^4*((-20*s12^3*s13^3 - 127*s12^2*s13^4 - 1283*s12*s13^5 -
                510*s13^6)*s23 + (-200*s12^3*s13^2 - 377*s12^2*s13^3 -
                2230*s12*s13^4 - 1610*s13^5)*s23^2 + (-180*s12^2*s13^2 -
                1047*s12*s13^3 - 1610*s13^4)*s23^3 + (-20*s12*s13^2 -
                510*s13^3)*s23^4) + p1q*p2q^3*(-81*s12^3*s13^4 -
              135*s12^2*s13^5 - 27*s12*s13^6 + 27*s13^7 + (-167*s12^3*s13^3 -
                570*s12^2*s13^4 - 2844*s12*s13^5 - 1109*s13^6)*s23 +
              (-733*s12^3*s13^2 - 1158*s12^2*s13^3 - 4715*s12*s13^4 -
                3539*s13^5)*s23^2 + (-80*s12^3*s13 - 603*s12^2*s13^2 -
                1898*s12*s13^3 - 3453*s13^4)*s23^3 + (-60*s12^2*s13 +
                180*s12*s13^2 - 1020*s13^3)*s23^4 + (20*s12*s13 + 30*s13^2)*
               s23^5) + p1q^3*p2q*((-47*s12^3*s13^3 - 461*s12^2*s13^4 -
                781*s12*s13^5 - 367*s13^6)*s23 + (-723*s12^3*s13^2 -
                848*s12^2*s13^3 - 1166*s12*s13^4 - 1041*s13^5)*s23^2 +
              (-729*s12^3*s13 - 833*s12^2*s13^2 + 294*s12*s13^3 - 921*s13^4)*
               s23^3 + (-330*s12^3 - 876*s12^2*s13 + 862*s12*s13^2 -
                187*s13^3)*s23^4 + (-350*s12^2 + 163*s12*s13 + 60*s13^2)*s23^
                5 - 20*s12*s23^6) + p1q^4*((20*s12^2*s13^3 + 40*s12*s13^4 +
                20*s13^5)*s23^2 + (10*s12^2*s13^2 + 70*s12*s13^3 + 60*s13^4)*
               s23^3 + (30*s12*s13^2 + 60*s13^3)*s23^4 + (-10*s12^2 -
                10*s12*s13 + 20*s13^2)*s23^5 - 10*s12*s23^6) +
            p1q^2*p2q^2*(-54*s12^3*s13^4 - 81*s12^2*s13^5 + 27*s13^7 +
              (-87*s12^3*s13^3 - 636*s12^2*s13^4 - 2181*s12*s13^5 -
                966*s13^6)*s23 + (-1013*s12^3*s13^2 - 1192*s12^2*s13^3 -
                3450*s12*s13^4 - 2990*s13^5)*s23^2 + (-566*s12^3*s13 -
                780*s12^2*s13^2 - 520*s12*s13^3 - 2824*s13^4)*s23^3 +
              (-250*s12^3 - 613*s12^2*s13 + 1032*s12*s13^2 - 757*s13^3)*s23^
                4 + (-260*s12^2 + 193*s12*s13 + 70*s13^2)*s23^5 -
              10*s12*s23^6)))*Log((s13 + s23)/(s12 + s13 + s23)))/
        (27*p2q*p3q^4*s12^2*s13^3*s23^2 +
         p3q^2*(p1q*p2q^2*((27*s12^2*s13^3 - 81*s12*s13^4)*s23^2 -
             81*s12*s13^3*s23^3) + p2q^3*((27*s12^2*s13^3 - 54*s12*s13^4)*
              s23^2 - 54*s12*s13^3*s23^3) + p1q^2*p2q*(-27*s12*s13^4*s23^2 -
             27*s12*s13^3*s23^3)) + p3q*(p1q*p2q^3*(-54*s12*s13^4*s23^2 -
             54*s12*s13^3*s23^3) + p1q^2*p2q^2*(-27*s12*s13^4*s23^2 -
             27*s12*s13^3*s23^3) + p2q^4*(-27*s12*s13^4*s23^2 -
             27*s12*s13^3*s23^3)) +
         p3q^3*(p1q*p2q*((27*s12^2*s13^3 - 27*s12*s13^4)*s23^2 -
             27*s12*s13^3*s23^3) + p2q^2*((54*s12^2*s13^3 - 27*s12*s13^4)*
              s23^2 - 27*s12*s13^3*s23^3))) +
       ((p3q^3*(-10*s12^3 - 20*s12^2*s13 - 10*s12*s13^2 +
            (-20*s12^2 - 20*s12*s13)*s23 - 10*s12*s23^2) +
          p2q^3*(-8*s12^2*s13 - 16*s12*s13^2 - 8*s13^3 +
            (-16*s12*s13 - 16*s13^2)*s23 - 8*s13*s23^2) +
          p1q^2*p2q*(-16*s12^2*s13 - 32*s12*s13^2 - 16*s13^3 +
            (-16*s12^2 - 64*s12*s13 - 48*s13^2)*s23 + (-32*s12 - 48*s13)*
             s23^2 - 16*s23^3) + p1q^3*((-16*s12^2 - 32*s12*s13 - 16*s13^2)*
             s23 + (-32*s12 - 32*s13)*s23^2 - 16*s23^3) +
          p1q*p2q^2*(-16*s12^2*s13 - 32*s12*s13^2 - 16*s13^3 +
            (-8*s12^2 - 48*s12*s13 - 40*s13^2)*s23 + (-16*s12 - 32*s13)*
             s23^2 - 8*s23^3) + p3q*(p2q^2*(-10*s12^3 - 36*s12^2*s13 -
              42*s12*s13^2 - 16*s13^3 + (-20*s12^2 - 52*s12*s13 - 32*s13^2)*
               s23 + (-10*s12 - 16*s13)*s23^2) + p1q*p2q*(-20*s12^3 -
              56*s12^2*s13 - 52*s12*s13^2 - 16*s13^3 + (-56*s12^2 -
                104*s12*s13 - 48*s13^2)*s23 + (-52*s12 - 48*s13)*s23^2 -
              16*s23^3) + p1q^2*(-20*s12^3 - 40*s12^2*s13 - 20*s12*s13^2 +
              (-56*s12^2 - 72*s12*s13 - 16*s13^2)*s23 + (-52*s12 - 32*s13)*
               s23^2 - 16*s23^3)) + p3q^2*(p2q*(-20*s12^3 - 48*s12^2*s13 -
              36*s12*s13^2 - 8*s13^3 + (-40*s12^2 - 56*s12*s13 - 16*s13^2)*
               s23 + (-20*s12 - 8*s13)*s23^2) + p1q*(-20*s12^3 -
              40*s12^2*s13 - 20*s12*s13^2 + (-48*s12^2 - 56*s12*s13 -
                8*s13^2)*s23 + (-36*s12 - 16*s13)*s23^2 - 8*s23^3)))*
         Log((-(p3q*s12) + p1q*s13 + p2q*s13 + p1q*s23 + p2q*s23)/
           ((p1q + p2q + p3q)*(s12 + s13 + s23))))/
        (27*p2q*p3q^2*s12*s13*s23 + p3q*(27*p1q*p2q*s12*s13*s23 +
           27*p2q^2*s12*s13*s23))) + Log(s13/(s12 + s13 + s23))*
      ((p3q^5*((-202*s12^6 - 566*s12^5*s13 - 364*s12^4*s13^2)*s23 +
           (-872*s12^5 - 1682*s12^4*s13 - 648*s12^3*s13^2)*s23^2 +
           (-1444*s12^4 - 1746*s12^3*s13 - 324*s12^2*s13^2)*s23^3 +
           (-1080*s12^3 - 630*s12^2*s13)*s23^4 - 306*s12^2*s23^5) +
         p2q^5*((-5*s12^3*s13^3 - 10*s12^2*s13^4 - 5*s12*s13^5)*s23 +
           (18*s12^4*s13 + 25*s12^3*s13^2 - 18*s12^2*s13^3 - 25*s12*s13^4)*
            s23^2 + (54*s12^3*s13 + 50*s12^2*s13^2 - 23*s12*s13^3 - 10*s13^4)*
            s23^3 + (54*s12^2*s13 + 25*s12*s13^2 - 10*s13^3)*s23^4 +
           18*s12*s13*s23^5) + p1q*p2q^4*((17*s12^4*s13^2 + 34*s12^3*s13^3 +
             17*s12^2*s13^4)*s23 + (36*s12^5 + 72*s12^4*s13 +
             121*s12^3*s13^2 + 92*s12^2*s13^3 + 7*s12*s13^4)*s23^2 +
           (126*s12^4 + 191*s12^3*s13 + 209*s12^2*s13^2 + 73*s12*s13^3 -
             10*s13^4)*s23^3 + (162*s12^3 + 166*s12^2*s13 + 125*s12*s13^2 +
             10*s13^3)*s23^4 + (90*s12^2 + 47*s12*s13 + 20*s13^2)*s23^5 +
           18*s12*s23^6) + p1q^3*p2q^2*((-22*s12^3*s13 - 22*s12^2*s13^2)*
            s23^3 + (-54*s12^2*s13 - 32*s12*s13^2)*s23^4 +
           (-42*s12*s13 - 10*s13^2)*s23^5 - 10*s13*s23^6) +
         p1q^2*p2q^3*((-17*s12^4*s13 - 12*s12^3*s13^2 + 5*s12^2*s13^3)*
            s23^2 + (-80*s12^3*s13 - 28*s12^2*s13^2 + 30*s12*s13^3)*s23^3 +
           (-119*s12^2*s13 - 6*s12*s13^2 + 20*s13^3)*s23^4 +
           (-66*s12*s13 + 10*s13^2)*s23^5 - 10*s13*s23^6) +
         p3q^4*(p2q*(-324*s12^6*s13 + (-728*s12^6 - 2389*s12^5*s13 - 677*
                s12^4*s13^2 - 60*s12^3*s13^3)*s23 + (-2734*s12^5 - 5250*s12^4*
                s13 - 1545*s12^3*s13^2 - 90*s12^2*s13^3)*s23^2 +
             (-4202*s12^4 - 4923*s12^3*s13 - 926*s12^2*s13^2)*s23^3 +
             (-3114*s12^3 - 1720*s12^2*s13 - 18*s12*s13^2)*s23^4 +
             (-918*s12^2 + 18*s12*s13)*s23^5) +
           p1q*((-136*s12^6 - 272*s12^5*s13 - 136*s12^4*s13^2)*s23 +
             (-454*s12^5 - 474*s12^4*s13 - 20*s12^3*s13^2)*s23^2 +
             (-608*s12^4 - 238*s12^3*s13 + 72*s12^2*s13^2)*s23^3 +
             (-380*s12^3 + 18*s12^2*s13 + 36*s12*s13^2)*s23^4 +
             (-72*s12^2 + 54*s12*s13)*s23^5 + 18*s12*s23^6)) +
         p3q^3*(p1q^2*((136*s12^5 + 96*s12^4*s13 - 40*s12^3*s13^2)*s23^2 +
             (368*s12^4 + 32*s12^3*s13 - 160*s12^2*s13^2)*s23^3 +
             (328*s12^3 - 144*s12^2*s13 - 80*s12*s13^2)*s23^4 +
             (96*s12^2 - 80*s12*s13)*s23^5) + p2q^2*(-324*s12^6*s13 +
             648*s12^5*s13^2 + (-1012*s12^6 - 2270*s12^5*s13 + 815*s12^4*
                s13^2 - 171*s12^3*s13^3 + 240*s12^2*s13^4)*s23 +
             (-3356*s12^5 - 5335*s12^4*s13 - 1358*s12^3*s13^2 - 6*s12^2*
                s13^3 + 180*s12*s13^4)*s23^2 + (-4900*s12^4 - 5598*s12^3*
                s13 - 1459*s12^2*s13^2 + 180*s12*s13^3)*s23^3 +
             (-3780*s12^3 - 2155*s12^2*s13 - 54*s12*s13^2)*s23^4 +
             (-1224*s12^2 + 54*s12*s13)*s23^5) + p1q*p2q*(-324*s12^6*s13 +
             (-272*s12^6 - 1271*s12^5*s13 - 34*s12^4*s13^2 - 79*s12^3*s13^3)*
              s23 + (-584*s12^5 - 1084*s12^4*s13 + 187*s12^3*s13^2 - 149*
                s12^2*s13^3)*s23^2 + (-514*s12^4 + 59*s12^3*s13 + 113*s12^2*
                s13^2 - 80*s12*s13^3)*s23^3 + (-310*s12^3 + 378*s12^2*s13 +
               12*s12*s13^2)*s23^4 + (-54*s12^2 + 182*s12*s13)*s23^5 +
             54*s12*s23^6)) + p3q*(p2q^4*(-324*s12^4*s13^3 +
             (-324*s12^6 - 486*s12^5*s13 - 642*s12^4*s13^2 - 718*s12^3*
                s13^3 + 13*s12^2*s13^4 - 145*s12*s13^5)*s23 +
             (-990*s12^5 - 1627*s12^4*s13 - 1656*s12^3*s13^2 - 222*s12^2*
                s13^3 - 122*s12*s13^4 - 90*s13^5)*s23^2 +
             (-1314*s12^4 - 1854*s12^3*s13 - 902*s12^2*s13^2 + 107*s12*
                s13^3 - 110*s13^4)*s23^3 + (-954*s12^3 - 659*s12^2*s13 + 32*
                s12*s13^2 - 20*s13^3)*s23^4 + (-306*s12^2 + 54*s12*s13)*
              s23^5) + p1q*p2q^3*(-324*s12^4*s13^3 + (119*s12^5*s13 - 178*
                s12^4*s13^2 - 461*s12^3*s13^3 + 232*s12^2*s13^4)*s23 +
             (234*s12^5 + 395*s12^4*s13 - 737*s12^3*s13^2 + 206*s12^2*s13^3 +
               572*s12*s13^4)*s23^2 + (468*s12^4 + 449*s12^3*s13 - 585*s12^2*
                s13^2 + 678*s12*s13^3 + 250*s13^4)*s23^3 +
             (288*s12^3 + 341*s12^2*s13 - 26*s12*s13^2 + 290*s13^3)*s23^4 +
             (108*s12^2 + 168*s12*s13 + 40*s13^2)*s23^5 + 54*s12*s23^6) +
           p1q^2*p2q^2*((136*s12^5 + 458*s12^4*s13 - 64*s12^3*s13^2 - 386*
                s12^2*s13^3)*s23^2 + (368*s12^4 + 907*s12^3*s13 - 684*s12^2*
                s13^2 - 651*s12*s13^3)*s23^3 + (328*s12^3 + 500*s12^2*s13 -
               830*s12*s13^2 - 230*s13^3)*s23^4 + (96*s12^2 + 31*s12*s13 -
               250*s13^2)*s23^5 - 20*s13*s23^6) + p1q^3*p2q*
            ((154*s12^3*s13 + 154*s12^2*s13^2)*s23^3 +
             (378*s12^2*s13 + 224*s12*s13^2)*s23^4 + (294*s12*s13 + 70*s13^2)*
              s23^5 + 70*s13*s23^6)) +
         p3q^2*(p2q^3*(648*s12^5*s13^2 - 324*s12^4*s13^3 +
             (-810*s12^6 - 933*s12^5*s13 + 486*s12^4*s13^2 - 824*s12^3*
                s13^3 + 263*s12^2*s13^4 - 140*s12*s13^5)*s23 +
             (-2484*s12^5 - 3412*s12^4*s13 - 2142*s12^3*s13^2 - 120*s12^2*
                s13^3 + 83*s12*s13^4 - 90*s13^5)*s23^2 +
             (-3456*s12^4 - 4329*s12^3*s13 - 1809*s12^2*s13^2 + 310*s12*
                s13^3 - 100*s13^4)*s23^3 + (-2700*s12^3 - 1778*s12^2*s13 - 29*
                s12*s13^2 - 10*s13^3)*s23^4 + (-918*s12^2 + 72*s12*s13)*
              s23^5) + p1q*p2q^2*(648*s12^5*s13^2 + (-136*s12^6 + 416*s12^5*
                s13 + 1851*s12^4*s13^2 + 74*s12^3*s13^3 + 215*s12^2*s13^4)*
              s23 + (68*s12^5 + 1657*s12^4*s13 + 1293*s12^3*s13^2 + 289*s12^2*
                s13^3 + 565*s12*s13^4)*s23^2 + (436*s12^4 + 1851*s12^3*s13 -
               105*s12^2*s13^2 + 525*s12*s13^3 + 260*s13^4)*s23^3 +
             (196*s12^3 + 859*s12^2*s13 - 175*s12*s13^2 + 280*s13^3)*s23^4 +
             (36*s12^2 + 249*s12*s13 + 20*s13^2)*s23^5 + 72*s12*s23^6) +
           p1q^2*p2q*((272*s12^5 + 571*s12^4*s13 - 92*s12^3*s13^2 - 391*s12^2*
                s13^3)*s23^2 + (736*s12^4 + 1019*s12^3*s13 - 816*s12^2*
                s13^2 - 681*s12*s13^3)*s23^3 + (656*s12^3 + 475*s12^2*s13 -
               904*s12*s13^2 - 250*s13^3)*s23^4 + (192*s12^2 + 17*s12*s13 -
               260*s13^2)*s23^5 - 10*s13*s23^6) +
           p1q^3*((176*s12^3*s13 + 176*s12^2*s13^2)*s23^3 +
             (432*s12^2*s13 + 256*s12*s13^2)*s23^4 + (336*s12*s13 + 80*s13^2)*
              s23^5 + 80*s13*s23^6)))/(p2q*p3q^4*(27*s12^4*s13*s23^2 +
           54*s12^3*s13*s23^3 + 27*s12^2*s13*s23^4) +
         p3q*(p1q*p2q^3*(27*s12^4*s13*s23^2 + 54*s12^3*s13*s23^3 +
             27*s12^2*s13*s23^4) + p2q^4*(27*s12^4*s13*s23^2 +
             54*s12^3*s13*s23^3 + 27*s12^2*s13*s23^4)) +
         p3q^3*(p1q*p2q*(27*s12^4*s13*s23^2 + 54*s12^3*s13*s23^3 +
             27*s12^2*s13*s23^4) + p2q^2*(81*s12^4*s13*s23^2 +
             162*s12^3*s13*s23^3 + 81*s12^2*s13*s23^4)) +
         p3q^2*(p1q*p2q^2*(54*s12^4*s13*s23^2 + 108*s12^3*s13*s23^3 +
             54*s12^2*s13*s23^4) + p2q^3*(81*s12^4*s13*s23^2 +
             162*s12^3*s13*s23^3 + 81*s12^2*s13*s23^4))) +
       ((p2q^6*((10*s12^4*s13^2 + 40*s12^3*s13^3 + 60*s12^2*s13^4 +
              40*s12*s13^5 + 10*s13^6)*s23^2 + (10*s12^3*s13^2 +
              30*s12^2*s13^3 + 30*s12*s13^4 + 10*s13^5)*s23^3) +
          p3q^6*((-162*s12^7 - 567*s12^6*s13 - 648*s12^5*s13^2 -
              243*s12^4*s13^3)*s23 + (-567*s12^6 - 1376*s12^5*s13 -
              1051*s12^4*s13^2 - 242*s12^3*s13^3)*s23^2 +
            (-648*s12^5 - 971*s12^4*s13 - 404*s12^3*s13^2)*s23^3 +
            (-243*s12^4 - 162*s12^3*s13)*s23^4) + p1q*p2q^5*
           ((10*s12^4*s13^2 + 40*s12^3*s13^3 + 60*s12^2*s13^4 +
              40*s12*s13^5 + 10*s13^6)*s23^2 + (-10*s12^4*s13 -
              60*s12^3*s13^2 - 120*s12^2*s13^3 - 100*s12*s13^4 - 30*s13^5)*
             s23^3 + (-10*s12^3*s13 - 60*s12^2*s13^2 - 90*s12*s13^3 -
              40*s13^4)*s23^4) + p1q^2*p2q^4*
           ((10*s12^4*s13^2 + 20*s12^3*s13^3 + 10*s12^2*s13^4)*s23^2 +
            (-10*s12^4*s13 - 60*s12^3*s13^2 - 140*s12^2*s13^3 -
              130*s12*s13^4 - 40*s13^5)*s23^3 + (20*s12^3*s13 +
              60*s12^2*s13^2 + 60*s12*s13^3 + 20*s13^4)*s23^4 +
            (30*s12^2*s13 + 90*s12*s13^2 + 60*s13^3)*s23^5) +
          p1q^3*p2q^3*((10*s12^4*s13^2 + 20*s12^3*s13^3 + 10*s12^2*s13^4)*
             s23^2 + (-10*s12^4*s13 - 20*s12^3*s13^2 - 10*s12^2*s13^3)*
             s23^3 + (20*s12^3*s13 + 100*s12^2*s13^2 + 150*s12*s13^3 +
              60*s13^4)*s23^4 + (20*s12*s13^2 + 20*s13^3)*s23^5 +
            (-30*s12*s13 - 40*s13^2)*s23^6) + p1q^4*p2q^2*
           ((-10*s12^4*s13 - 30*s12^3*s13^2 - 20*s12^2*s13^3)*s23^3 -
            10*s12^2*s13^2*s23^4 + (-20*s12^2*s13 - 70*s12*s13^2 - 40*s13^3)*
             s23^5 + (-20*s12*s13 - 30*s13^2)*s23^6 + 10*s13*s23^7) +
          p1q^5*p2q*((10*s12^3*s13 + 10*s12^2*s13^2)*s23^4 +
            10*s12^2*s13*s23^5 + (10*s12*s13 + 10*s13^2)*s23^6 +
            10*s13*s23^7) + p3q^5*(p2q*(-324*s12^7*s13 - 324*s12^6*s13^2 +
              (-972*s12^7 - 2853*s12^6*s13 - 2385*s12^5*s13^2 - 117*s12^4*
                 s13^3 + 63*s12^3*s13^4)*s23 + (-2672*s12^6 - 5439*s12^5*
                 s13 - 3419*s12^4*s13^2 - 518*s12^3*s13^3 - 190*s12^2*s13^4)*
               s23^2 + (-2591*s12^5 - 3648*s12^4*s13 - 1460*s12^3*s13^2 -
                160*s12^2*s13^3)*s23^3 + (-891*s12^4 - 739*s12^3*s13 -
                10*s12^2*s13^2)*s23^4) + p1q*((-486*s12^7 - 1701*s12^6*s13 -
                1944*s12^5*s13^2 - 729*s12^4*s13^3)*s23 + (-1620*s12^6 -
                3723*s12^5*s13 - 2748*s12^4*s13^2 - 645*s12^3*s13^3)*s23^2 +
              (-1539*s12^5 - 1943*s12^4*s13 - 729*s12^3*s13^2 +
                80*s12^2*s13^3)*s23^3 + (-162*s12^4 + 79*s12^3*s13 +
                80*s12^2*s13^2)*s23^4 + 243*s12^3*s23^5)) +
          p3q^4*(p2q^2*(-324*s12^7*s13 + 648*s12^6*s13^2 + 972*s12^5*s13^3 +
              (-1620*s12^7 - 2619*s12^6*s13 + 405*s12^5*s13^2 + 2799*s12^4*
                 s13^3 + 459*s12^3*s13^4 + 360*s12^2*s13^5)*s23 +
              (-3885*s12^6 - 5506*s12^5*s13 - 1380*s12^4*s13^2 +
                703*s12^3*s13^3 - 6*s12^2*s13^4 + 180*s12*s13^5)*s23^2 +
              (-3399*s12^5 - 4137*s12^4*s13 - 1263*s12^3*s13^2 -
                426*s12^2*s13^3 + 180*s12*s13^4)*s23^3 + (-1134*s12^4 -
                1093*s12^3*s13 - 40*s12^2*s13^2)*s23^4) +
            p1q^2*((-648*s12^7 - 2268*s12^6*s13 - 2592*s12^5*s13^2 -
                972*s12^4*s13^3)*s23 + (-2025*s12^6 - 4452*s12^5*s13 -
                3315*s12^4*s13^2 - 888*s12^3*s13^3)*s23^2 + (-1296*s12^5 -
                1380*s12^4*s13 - 897*s12^3*s13^2 - 3*s12^2*s13^3)*s23^3 +
              (891*s12^4 + 644*s12^3*s13 - 243*s12^2*s13^2 - 80*s12*s13^3)*
               s23^4 + (810*s12^3 - 160*s12^2*s13 - 80*s12*s13^2)*s23^5) +
            p1q*p2q*(-648*s12^7*s13 - 648*s12^6*s13^2 + (-2592*s12^7 -
                6579*s12^6*s13 - 5688*s12^5*s13^2 - 423*s12^4*s13^3 -
                18*s12^3*s13^4)*s23 + (-6560*s12^6 - 12021*s12^5*s13 -
                7913*s12^4*s13^2 - 1507*s12^3*s13^3 - 693*s12^2*s13^4)*s23^
                2 + (-5266*s12^5 - 7007*s12^4*s13 - 2953*s12^3*s13^2 -
                363*s12^2*s13^3 - 80*s12*s13^4)*s23^3 + (-731*s12^4 -
                890*s12^3*s13 + 340*s12^2*s13^2 - 60*s12*s13^3)*s23^4 +
              (567*s12^3 + 30*s12^2*s13 + 20*s12*s13^2)*s23^5)) +
          p3q^3*(p2q^3*(972*s12^6*s13^2 - 972*s12^4*s13^4 + (-1134*s12^7 -
                9*s12^6*s13 + 2646*s12^5*s13^2 + 2646*s12^4*s13^3 -
                90*s12^3*s13^4 + 459*s12^2*s13^5 - 270*s12*s13^6)*s23 +
              (-2427*s12^6 - 1605*s12^5*s13 + 1612*s12^4*s13^2 +
                1153*s12^3*s13^3 + 326*s12^2*s13^4 - 127*s12*s13^5 -
                90*s13^6)*s23^2 + (-1941*s12^5 - 1819*s12^4*s13 -
                120*s12^3*s13^2 - 516*s12^2*s13^3 + 193*s12*s13^4 -
                100*s13^5)*s23^3 + (-648*s12^4 - 718*s12^3*s13 -
                90*s12^2*s13^2 - 30*s12*s13^3 - 10*s13^4)*s23^4) +
            p1q*p2q^2*(-324*s12^7*s13 + 1296*s12^6*s13^2 + 1620*s12^5*s13^3 +
              (-3564*s12^7 - 4401*s12^6*s13 + 486*s12^5*s13^2 + 4689*s12^4*
                 s13^3 + 144*s12^3*s13^4 + 666*s12^2*s13^5)*s23 +
              (-7936*s12^6 - 9743*s12^5*s13 - 2800*s12^4*s13^2 +
                394*s12^3*s13^3 - 586*s12^2*s13^4 + 673*s12*s13^5)*s23^2 +
              (-5835*s12^5 - 7073*s12^4*s13 - 1864*s12^3*s13^2 -
                1488*s12^2*s13^3 + 607*s12*s13^4 + 260*s13^5)*s23^3 +
              (-977*s12^4 - 1652*s12^3*s13 + 573*s12^2*s13^2 - 226*s12*
                 s13^3 + 280*s13^4)*s23^4 + (486*s12^3 + 90*s12^2*s13 +
                80*s12*s13^2 + 20*s13^3)*s23^5) + p1q^2*p2q*(-324*s12^7*s13 -
              324*s12^6*s13^2 + (-2592*s12^7 - 5355*s12^6*s13 - 4545*s12^5*
                 s13^2 - 171*s12^4*s13^3 - 9*s12^3*s13^4)*s23 +
              (-5994*s12^6 - 9668*s12^5*s13 - 6247*s12^4*s13^2 -
                1195*s12^3*s13^3 - 926*s12^2*s13^4)*s23^2 + (-3323*s12^5 -
                4799*s12^4*s13 - 1943*s12^3*s13^2 - 552*s12^2*s13^3 -
                566*s12*s13^4)*s23^3 + (1457*s12^4 - 182*s12^3*s13 +
                756*s12^2*s13^2 - 863*s12*s13^3 - 250*s13^4)*s23^4 +
              (1378*s12^3 - 47*s12^2*s13 - 87*s12*s13^2 - 260*s13^3)*s23^5 +
              (-30*s12*s13 - 10*s13^2)*s23^6) +
            p1q^3*((-324*s12^7 - 1134*s12^6*s13 - 1296*s12^5*s13^2 -
                486*s12^4*s13^3)*s23 + (-810*s12^6 - 1295*s12^5*s13 -
                808*s12^4*s13^2 - 323*s12^3*s13^3)*s23^2 + (567*s12^5 +
                1858*s12^4*s13 + 721*s12^3*s13^2 + 240*s12^2*s13^3)*s23^3 +
              (2268*s12^4 + 2185*s12^3*s13 + 569*s12^2*s13^2 + 163*s12*s13^3)*
               s23^4 + (1215*s12^3 + 326*s12^2*s13 + 403*s12*s13^2 +
                80*s13^3)*s23^5 + (160*s12*s13 + 80*s13^2)*s23^6)) +
          p3q^2*(p2q^4*(-972*s12^5*s13^3 - 648*s12^4*s13^4 + 324*s12^3*s13^
                5 + (-324*s12^7 + 648*s12^6*s13 + 990*s12^5*s13^2 +
                612*s12^4*s13^3 - 153*s12^3*s13^4 + 216*s12^2*s13^5 -
                243*s12*s13^6 + 90*s13^7)*s23 + (-647*s12^6 + 151*s12^5*s13 +
                1230*s12^4*s13^2 + 446*s12^3*s13^3 + 312*s12^2*s13^4 -
                340*s12*s13^5 + 10*s13^6)*s23^2 + (-485*s12^5 - 226*s12^4*
                 s13 + 180*s12^3*s13^2 - 310*s12^2*s13^3 - 7*s12*s13^4 -
                100*s13^5)*s23^3 + (-162*s12^4 - 222*s12^3*s13 -
                100*s12^2*s13^2 - 60*s12*s13^3 - 20*s13^4)*s23^4) +
            p1q*p2q^3*(648*s12^6*s13^2 - 648*s12^5*s13^3 - 1296*s12^4*s13^4 +
              (-1782*s12^7 - 333*s12^6*s13 + 1323*s12^5*s13^2 + 1305*s12^4*
                 s13^3 - 1368*s12^3*s13^4 + 846*s12^2*s13^5 - 243*s12*s13^6)*
               s23 + (-3563*s12^6 - 3067*s12^5*s13 - 142*s12^4*s13^2 -
                696*s12^3*s13^3 + 373*s12^2*s13^4 + 459*s12*s13^5 -
                350*s13^6)*s23^2 + (-2433*s12^5 - 3345*s12^4*s13 -
                685*s12^3*s13^2 - 1627*s12^2*s13^3 + 1043*s12*s13^4 -
                40*s13^5)*s23^3 + (-490*s12^4 - 1172*s12^3*s13 +
                320*s12^2*s13^2 - 149*s12*s13^3 + 360*s13^4)*s23^4 +
              (162*s12^3 + 100*s12^2*s13 + 120*s12*s13^2 + 50*s13^3)*s23^5) +
            p1q^2*p2q^2*(648*s12^6*s13^2 + 648*s12^5*s13^3 + (-2592*s12^7 -
                2439*s12^6*s13 + 486*s12^5*s13^2 + 3078*s12^4*s13^3 -
                162*s12^3*s13^4 + 333*s12^2*s13^5)*s23 + (-5346*s12^6 -
                5935*s12^5*s13 - 316*s12^4*s13^2 + 771*s12^3*s13^3 -
                1113*s12^2*s13^4 + 729*s12*s13^5)*s23^2 + (-2919*s12^5 -
                4735*s12^4*s13 + 690*s12^3*s13^2 - 1764*s12^2*s13^3 +
                21*s12*s13^4 + 510*s13^5)*s23^3 + (647*s12^4 - 1398*s12^3*
                 s13 + 1788*s12^2*s13^2 - 1289*s12*s13^3 + 50*s13^4)*s23^4 +
              (812*s12^3 - 50*s12^2*s13 + 289*s12*s13^2 - 500*s13^3)*s23^5 +
              (-60*s12*s13 - 40*s13^2)*s23^6) +
            p1q^4*((162*s12^6 + 810*s12^5*s13 + 810*s12^4*s13^2 +
                162*s12^3*s13^3)*s23^2 + (1134*s12^5 + 2266*s12^4*s13 +
                1131*s12^3*s13^2 + 323*s12^2*s13^3)*s23^3 + (1782*s12^4 +
                1459*s12^3*s13 + 569*s12^2*s13^2 + 243*s12*s13^3)*s23^4 +
              (810*s12^3 - 80*s12^2*s13 + 240*s12*s13^2 + 80*s13^3)*s23^5 -
              163*s12*s13*s23^6 - 80*s13*s23^7) + p1q^3*p2q*
             ((-972*s12^7 - 1782*s12^6*s13 - 1782*s12^5*s13^2 - 486*s12^4*
                 s13^3 - 162*s12^3*s13^4)*s23 + (-1782*s12^6 - 3535*s12^5*
                 s13 - 3046*s12^4*s13^2 - 959*s12^3*s13^3 - 656*s12^2*s13^4)*
               s23^2 + (486*s12^5 - 2223*s12^4*s13 - 1206*s12^3*s13^2 -
                322*s12^2*s13^3 - 729*s12*s13^4)*s23^3 + (2593*s12^4 -
                901*s12^3*s13 + 1175*s12^2*s13^2 - 477*s12*s13^3 - 330*s13^4)*
               s23^4 + (1297*s12^3 - 573*s12^2*s13 + 749*s12*s13^2 -
                20*s13^3)*s23^5 + (-133*s12*s13 + 320*s13^2)*s23^6 +
              10*s13*s23^7)) + p3q*(p2q^5*(324*s12^4*s13^4 + 324*s12^3*s13^
                5 + (324*s12^6*s13 + 486*s12^5*s13^2 + 639*s12^4*s13^3 +
                333*s12^3*s13^4 + 117*s12^2*s13^5 + 27*s12*s13^6 + 90*s13^7)*
               s23 + (313*s12^5*s13 + 616*s12^4*s13^2 + 312*s12^3*s13^3 +
                230*s12^2*s13^4 + 7*s12*s13^5 + 110*s13^6)*s23^2 +
              (133*s12^4*s13 + 103*s12^3*s13^2 - 30*s12^2*s13^3 +
                10*s12*s13^4 + 10*s13^5)*s23^3 + (-20*s12^3*s13 -
                40*s12^2*s13^2 - 30*s12*s13^3 - 10*s13^4)*s23^4) +
            p1q*p2q^4*(-324*s12^5*s13^3 + 324*s12^3*s13^5 + (-324*s12^7 +
                162*s12^6*s13 + 9*s12^5*s13^2 - 162*s12^4*s13^3 -
                558*s12^3*s13^4 + 180*s12^2*s13^5 - 243*s12*s13^6)*s23 +
              (-648*s12^6 - 659*s12^5*s13 - 355*s12^4*s13^2 - 868*s12^3*
                 s13^3 + 155*s12^2*s13^4 - 381*s12*s13^5 - 430*s13^6)*s23^2 +
              (-487*s12^5 - 878*s12^4*s13 - 529*s12^3*s13^2 - 810*s12^2*
                 s13^3 + 22*s12*s13^4 - 510*s13^5)*s23^3 + (-163*s12^4 -
                346*s12^3*s13 - 80*s12^2*s13^2 - 100*s12*s13^3 - 50*s13^4)*
               s23^4 + (40*s12^2*s13 + 60*s12*s13^2 + 30*s13^3)*s23^5) +
            p1q^2*p2q^3*(-324*s12^5*s13^3 - 324*s12^4*s13^4 +
              (-648*s12^7 + 495*s12^5*s13^2 + 333*s12^4*s13^3 - 801*s12^3*
                 s13^4 + 333*s12^2*s13^5)*s23 + (-1134*s12^6 - 629*s12^5*
                 s13 + 1186*s12^4*s13^2 - 189*s12^3*s13^3 + 66*s12^2*s13^4 +
                972*s12*s13^5)*s23^2 + (-487*s12^5 - 831*s12^4*s13 +
                1073*s12^3*s13^2 - 1247*s12^2*s13^3 + 1294*s12*s13^4 +
                830*s13^5)*s23^3 + (162*s12^4 - 228*s12^3*s13 + 750*s12^2*
                 s13^2 - 158*s12*s13^3 + 950*s13^4)*s23^4 + (163*s12^3 +
                110*s12^2*s13 + 170*s12*s13^2 + 90*s13^3)*s23^5 +
              (-30*s12*s13 - 30*s13^2)*s23^6) +
            p1q^5*((162*s12^5 - 162*s12^3*s13^2)*s23^3 + (324*s12^4 -
                323*s12^3*s13 - 323*s12^2*s13^2)*s23^4 + (162*s12^3 -
                566*s12^2*s13 - 243*s12*s13^2)*s23^5 + (-323*s12*s13 -
                80*s13^2)*s23^6 - 80*s13*s23^7) + p1q^3*p2q^2*
             ((-648*s12^7 - 972*s12^6*s13 - 486*s12^5*s13^2 + 324*s12^4*
                 s13^3 - 162*s12^3*s13^4)*s23 + (-1296*s12^6 - 2573*s12^5*
                 s13 - 293*s12^4*s13^2 + 347*s12^3*s13^3 - 979*s12^2*s13^4)*
               s23^2 + (-486*s12^5 - 2624*s12^4*s13 + 978*s12^3*s13^2 -
                1238*s12^2*s13^3 - 1458*s12*s13^4)*s23^3 + (487*s12^4 -
                1104*s12^3*s13 + 1471*s12^2*s13^2 - 1876*s12*s13^3 -
                810*s13^4)*s23^4 + (325*s12^3 - 170*s12^2*s13 +
                222*s12*s13^2 - 890*s13^3)*s23^5 + (-80*s12*s13 - 70*s13^2)*
               s23^6 + 10*s13*s23^7) + p1q^4*p2q*((324*s12^6 + 324*s12^3*
                 s13^3)*s23^2 + (1134*s12^5 - 354*s12^4*s13 + 453*s12^3*
                 s13^2 + 969*s12^2*s13^3)*s23^3 + (1296*s12^4 - 737*s12^3*
                 s13 + 1558*s12^2*s13^2 + 972*s12*s13^3)*s23^4 +
              (486*s12^3 - 496*s12^2*s13 + 1259*s12*s13^2 + 400*s13^3)*s23^
                5 + (-93*s12*s13 + 420*s13^2)*s23^6 + 20*s13*s23^7)))*
         Log(s23/(s12 + s13 + s23)))/
        (p2q*p3q^5*((27*s12^5*s13 + 27*s12^4*s13^2)*s23^2 +
           (27*s12^4*s13 + 27*s12^3*s13^2)*s23^3) +
         p3q^3*(p2q^3*((81*s12^5*s13 - 81*s12^3*s13^3)*s23^2 +
             (81*s12^4*s13 + 81*s12^3*s13^2)*s23^3) +
           p1q^2*p2q*((27*s12^5*s13 + 27*s12^4*s13^2)*s23^2 +
             (-27*s12^4*s13 + 27*s12^3*s13^2)*s23^3 - 54*s12^3*s13*s23^4) +
           p1q*p2q^2*((135*s12^5*s13 + 108*s12^4*s13^2 - 27*s12^3*s13^3)*
              s23^2 + (81*s12^4*s13 + 162*s12^3*s13^2)*s23^3 -
             54*s12^3*s13*s23^4)) +
         p3q*(p2q^5*(-27*s12^4*s13^2 - 27*s12^3*s13^3)*s23^2 +
           p1q*p2q^4*((27*s12^5*s13 - 27*s12^3*s13^3)*s23^2 +
             (27*s12^4*s13 + 54*s12^3*s13^2)*s23^3) + p1q^3*p2q^2*
            (-27*s12^4*s13*s23^3 - 27*s12^3*s13*s23^4) +
           p1q^2*p2q^3*((27*s12^5*s13 + 27*s12^4*s13^2)*s23^2 +
             54*s12^3*s13^2*s23^3 - 27*s12^3*s13*s23^4)) +
         p3q^4*(p2q^2*((81*s12^5*s13 + 54*s12^4*s13^2 - 27*s12^3*s13^3)*
              s23^2 + (81*s12^4*s13 + 81*s12^3*s13^2)*s23^3) +
           p1q*p2q*((54*s12^5*s13 + 54*s12^4*s13^2)*s23^2 +
             (27*s12^4*s13 + 54*s12^3*s13^2)*s23^3 - 27*s12^3*s13*s23^4)) +
         p3q^2*(p2q^4*((27*s12^5*s13 - 54*s12^4*s13^2 - 81*s12^3*s13^3)*
              s23^2 + (27*s12^4*s13 + 27*s12^3*s13^2)*s23^3) +
           p1q^2*p2q^2*((54*s12^5*s13 + 54*s12^4*s13^2)*s23^2 +
             (-27*s12^4*s13 + 81*s12^3*s13^2)*s23^3 - 81*s12^3*s13*s23^4) +
           p1q^3*p2q*(-27*s12^4*s13*s23^3 - 27*s12^3*s13*s23^4) +
           p1q*p2q^3*((108*s12^5*s13 + 54*s12^4*s13^2 - 54*s12^3*s13^3)*
              s23^2 + (81*s12^4*s13 + 162*s12^3*s13^2)*s23^3 -
             27*s12^3*s13*s23^4))) +
       ((p2q^5*((-10*s12^4*s13^2 - 20*s12^3*s13^3 - 10*s12^2*s13^4)*s23 +
            (-30*s12^3*s13^2 - 50*s12^2*s13^3 - 30*s12*s13^4 - 10*s13^5)*
             s23^2 + (-20*s12^2*s13^2 - 20*s12*s13^3 - 10*s13^4)*s23^3) +
          p3q^5*((170*s12^6 + 340*s12^5*s13 + 170*s12^4*s13^2)*s23 +
            (510*s12^5 + 760*s12^4*s13 + 250*s12^3*s13^2)*s23^2 +
            (510*s12^4 + 420*s12^3*s13)*s23^3 + 170*s12^3*s23^4) +
          p1q*p2q^4*(27*s12^4*s13^3 + 54*s12^3*s13^4 + 27*s12^2*s13^5 +
            (10*s12^5*s13 + 24*s12^3*s13^3 + 34*s12^2*s13^4)*s23 +
            (40*s12^4*s13 + 10*s12^3*s13^2 - 23*s12^2*s13^3 - 30*s12*s13^4 -
              10*s13^5)*s23^2 + (60*s12^3*s13 + 60*s12^2*s13^2 +
              50*s12*s13^3 + 20*s13^4)*s23^3 + (30*s12^2*s13 + 40*s12*s13^2 +
              30*s13^3)*s23^4) + p1q^2*p2q^3*(-27*s12^5*s13^2 -
            54*s12^4*s13^3 - 27*s12^3*s13^4 + (20*s12^5*s13 -
              88*s12^4*s13^2 - 182*s12^3*s13^3 - 74*s12^2*s13^4)*s23 +
            (-10*s12^5 + 60*s12^4*s13 - 75*s12^3*s13^2 - 118*s12^2*s13^3)*
             s23^2 + (-30*s12^4 + 70*s12^3*s13 + 36*s12^2*s13^2 +
              70*s12*s13^3 + 30*s13^4)*s23^3 + (-30*s12^3 + 10*s12^2*s13 -
              10*s12*s13^2)*s23^4 + (-10*s12^2 - 20*s12*s13 - 30*s13^2)*
             s23^5) + p1q^3*p2q^2*((47*s12^5*s13 + 94*s12^4*s13^2 +
              47*s12^3*s13^3)*s23 + (-20*s12^5 + 121*s12^4*s13 +
              198*s12^3*s13^2 + 57*s12^2*s13^3)*s23^2 +
            (-60*s12^4 + 111*s12^3*s13 + 114*s12^2*s13^2)*s23^3 +
            (-60*s12^3 + 17*s12^2*s13 - 50*s12*s13^2 - 30*s13^3)*s23^4 +
            (-20*s12^2 - 10*s12*s13 - 20*s13^2)*s23^5 + 10*s13*s23^6) +
          p1q^4*p2q*((-20*s12^5 - 40*s12^4*s13 - 20*s12^3*s13^2)*s23^2 +
            (-60*s12^4 - 70*s12^3*s13 - 10*s12^2*s13^2)*s23^3 +
            (-60*s12^3 - 30*s12^2*s13)*s23^4 + (-20*s12^2 + 10*s12*s13 +
              10*s13^2)*s23^5 + 10*s13*s23^6) +
          p3q^4*(p2q*((510*s12^6 + 1283*s12^5*s13 + 127*s12^4*s13^2 +
                20*s12^3*s13^3)*s23 + (1610*s12^5 + 2230*s12^4*s13 +
                377*s12^3*s13^2 + 200*s12^2*s13^3)*s23^2 + (1610*s12^4 +
                1047*s12^3*s13 + 180*s12^2*s13^2)*s23^3 + (510*s12^3 +
                20*s12^2*s13)*s23^4) + p1q*(-27*s12^7 - 54*s12^6*s13 -
              27*s12^5*s13^2 + (429*s12^6 + 912*s12^5*s13 + 483*s12^4*s13^2)*
               s23 + (1439*s12^5 + 2206*s12^4*s13 + 740*s12^3*s13^2)*s23^2 +
              (1473*s12^4 + 1140*s12^3*s13 - 90*s12^2*s13^2)*s23^3 +
              (480*s12^3 - 100*s12^2*s13)*s23^4 - 10*s12^2*s23^5)) +
          p3q^3*(p2q^2*((510*s12^6 + 873*s12^5*s13 - 1396*s12^4*s13^2 -
                131*s12^3*s13^3 - 370*s12^2*s13^4)*s23 + (1690*s12^5 +
                854*s12^4*s13 - 494*s12^3*s13^2 + 6*s12^2*s13^3 -
                180*s12*s13^4)*s23^2 + (1690*s12^4 + 361*s12^3*s13 +
                496*s12^2*s13^2 - 180*s12*s13^3)*s23^3 + (510*s12^3 +
                60*s12^2*s13)*s23^4) + p1q*p2q*(-27*s12^7 + 27*s12^6*s13 +
              135*s12^5*s13^2 + 81*s12^4*s13^3 + (1109*s12^6 + 2844*s12^5*
                 s13 + 570*s12^4*s13^2 + 167*s12^3*s13^3)*s23 +
              (3539*s12^5 + 4715*s12^4*s13 + 1158*s12^3*s13^2 + 733*s12^2*
                 s13^3)*s23^2 + (3453*s12^4 + 1898*s12^3*s13 + 603*s12^2*
                 s13^2 + 80*s12*s13^3)*s23^3 + (1020*s12^3 - 180*s12^2*s13 +
                60*s12*s13^2)*s23^4 + (-30*s12^2 - 20*s12*s13)*s23^5) +
            p1q^2*(-27*s12^7 - 54*s12^6*s13 - 27*s12^5*s13^2 +
              (626*s12^6 + 1306*s12^5*s13 + 680*s12^4*s13^2)*s23 +
              (2010*s12^5 + 3197*s12^4*s13 + 1160*s12^3*s13^2)*s23^2 +
              (2004*s12^4 + 1780*s12^3*s13 - 27*s12^2*s13^2)*s23^3 +
              (617*s12^3 + 23*s12^2*s13 + 80*s12*s13^2)*s23^4 +
              (-30*s12^2 + 80*s12*s13)*s23^5)) +
          p3q^2*(p2q^3*((170*s12^6 - 140*s12^5*s13 - 1486*s12^4*s13^2 +
                153*s12^3*s13^3 - 399*s12^2*s13^4 + 270*s12*s13^5)*s23 +
              (590*s12^5 - 816*s12^4*s13 - 281*s12^3*s13^2 - 389*s12^2*
                 s13^3 + 217*s12*s13^4 + 90*s13^5)*s23^2 + (590*s12^4 -
                206*s12^3*s13 + 393*s12^2*s13^2 - 113*s12*s13^3 + 100*s13^4)*
               s23^3 + (170*s12^3 + 70*s12^2*s13 + 20*s12*s13^2 + 10*s13^3)*
               s23^4) + p1q*p2q^2*(81*s12^6*s13 + 81*s12^5*s13^2 -
              81*s12^4*s13^3 - 81*s12^3*s13^4 + (850*s12^6 + 1639*s12^5*s13 -
                1308*s12^4*s13^2 - 146*s12^3*s13^3 - 713*s12^2*s13^4)*s23 +
              (2600*s12^5 + 1254*s12^4*s13 + 242*s12^3*s13^2 + 212*s12^2*
                 s13^3 - 673*s12*s13^4)*s23^2 + (2380*s12^4 - 117*s12^3*s13 +
                1581*s12^2*s13^2 - 607*s12*s13^3 - 260*s13^4)*s23^3 +
              (600*s12^3 - 253*s12^2*s13 + 266*s12*s13^2 - 280*s13^3)*s23^4 +
              (-30*s12^2 - 40*s12*s13 - 20*s13^2)*s23^5) +
            p1q^3*((367*s12^6 + 734*s12^5*s13 + 367*s12^4*s13^2)*s23 +
              (1061*s12^5 + 1711*s12^4*s13 + 650*s12^3*s13^2)*s23^2 +
              (981*s12^4 + 657*s12^3*s13 - 280*s12^2*s13^2)*s23^3 +
              (247*s12^3 - 483*s12^2*s13 - 163*s12*s13^2)*s23^4 +
              (-40*s12^2 - 243*s12*s13 - 80*s13^2)*s23^5 - 80*s13*s23^6) +
            p1q^2*p2q*(-27*s12^7 + 81*s12^5*s13^2 + 54*s12^4*s13^3 +
              (966*s12^6 + 2181*s12^5*s13 + 636*s12^4*s13^2 + 87*s12^3*s13^3)*
               s23 + (2990*s12^5 + 3450*s12^4*s13 + 1192*s12^3*s13^2 +
                1013*s12^2*s13^3)*s23^2 + (2824*s12^4 + 520*s12^3*s13 +
                780*s12^2*s13^2 + 566*s12*s13^3)*s23^3 + (757*s12^3 -
                1032*s12^2*s13 + 613*s12*s13^2 + 250*s13^3)*s23^4 +
              (-70*s12^2 - 193*s12*s13 + 260*s13^2)*s23^5 + 10*s13*s23^6)) +
          p3q*(p2q^4*((-160*s12^5*s13 - 350*s12^4*s13^2 + 113*s12^3*s13^3 -
                210*s12^2*s13^4 + 63*s12*s13^5 - 90*s13^6)*s23 +
              (-380*s12^4*s13 + 76*s12^3*s13^2 - 353*s12^2*s13^3 +
                133*s12*s13^4 - 100*s13^5)*s23^2 + (-30*s12^3*s13 +
                30*s12^2*s13^2 + 20*s12*s13^3)*s23^3 + (30*s12^2*s13 +
                20*s12*s13^2 + 10*s13^3)*s23^4) + p1q*p2q^3*
             (-81*s12^5*s13^2 - 135*s12^4*s13^3 - 27*s12^3*s13^4 +
              27*s12^2*s13^5 + (170*s12^6 + 50*s12^5*s13 - 972*s12^4*s13^2 -
                199*s12^3*s13^3 - 436*s12^2*s13^4 + 243*s12*s13^5)*s23 +
              (500*s12^5 - 396*s12^4*s13 + 284*s12^3*s13^2 - 436*s12^2*
                 s13^3 + 134*s12*s13^4 + 350*s13^5)*s23^2 + (400*s12^4 -
                86*s12^3*s13 + 849*s12^2*s13^2 - 349*s12*s13^3 + 390*s13^4)*
               s23^3 + (60*s12^3 + 100*s12^2*s13 + 30*s12*s13^2 + 20*s13^3)*
               s23^4 + (-10*s12^2 - 20*s12*s13 - 20*s13^2)*s23^5) +
            p1q^4*((-20*s12^5 - 40*s12^4*s13 - 20*s12^3*s13^2)*s23^2 +
              (-60*s12^4 - 403*s12^3*s13 - 343*s12^2*s13^2)*s23^3 +
              (-60*s12^3 - 606*s12^2*s13 - 243*s12*s13^2)*s23^4 +
              (-20*s12^2 - 323*s12*s13 - 80*s13^2)*s23^5 - 80*s13*s23^6) +
            p1q^2*p2q^2*(54*s12^6*s13 + 81*s12^5*s13^2 - 27*s12^3*s13^4 +
              (340*s12^6 + 562*s12^5*s13 - 465*s12^4*s13^2 - 428*s12^3*
                 s13^3 - 407*s12^2*s13^4)*s23 + (970*s12^5 + 160*s12^4*s13 +
                533*s12^3*s13^2 + 229*s12^2*s13^3 - 729*s12*s13^4)*s23^2 +
              (790*s12^4 - 524*s12^3*s13 + 1608*s12^2*s13^2 - 750*s12*s13^3 -
                510*s13^4)*s23^3 + (110*s12^3 - 316*s12^2*s13 +
                379*s12*s13^2 - 560*s13^3)*s23^4 + (-50*s12^2 - 50*s12*s13 -
                40*s13^2)*s23^5 + 10*s13*s23^6) + p1q^3*p2q*
             ((367*s12^6 + 781*s12^5*s13 + 461*s12^4*s13^2 + 47*s12^3*s13^3)*
               s23 + (1041*s12^5 + 1166*s12^4*s13 + 848*s12^3*s13^2 +
                723*s12^2*s13^3)*s23^2 + (921*s12^4 - 294*s12^3*s13 +
                833*s12^2*s13^2 + 729*s12*s13^3)*s23^3 + (187*s12^3 -
                862*s12^2*s13 + 876*s12*s13^2 + 330*s13^3)*s23^4 +
              (-60*s12^2 - 163*s12*s13 + 350*s13^2)*s23^5 + 20*s13*s23^6)))*
         Log((s12 + s23)/(s12 + s13 + s23)))/
        (p2q*p3q^4*(27*s12^4*s13*s23^2 + 27*s12^3*s13*s23^3) +
         p3q*(-27*p2q^4*s12^3*s13^2*s23^2 + p1q^2*p2q^2*(27*s12^4*s13*s23^2 +
             27*s12^3*s13*s23^3) + p1q*p2q^3*((27*s12^4*s13 - 27*s12^3*s13^2)*
              s23^2 + 27*s12^3*s13*s23^3)) +
         p3q^3*(p1q*p2q*(54*s12^4*s13*s23^2 + 54*s12^3*s13*s23^3) +
           p2q^2*((54*s12^4*s13 - 27*s12^3*s13^2)*s23^2 + 54*s12^3*s13*
              s23^3)) + p3q^2*(p1q^2*p2q*(27*s12^4*s13*s23^2 +
             27*s12^3*s13*s23^3) + p2q^3*((27*s12^4*s13 - 54*s12^3*s13^2)*
              s23^2 + 27*s12^3*s13*s23^3) + p1q*p2q^2*
            ((81*s12^4*s13 - 27*s12^3*s13^2)*s23^2 + 81*s12^3*s13*s23^3))) +
       ((p3q^3*(-8*s12^3 - 16*s12^2*s13 - 8*s12*s13^2 +
            (-16*s12^2 - 16*s12*s13)*s23 - 8*s12*s23^2) +
          p2q^3*(-10*s12^2*s13 - 20*s12*s13^2 - 10*s13^3 +
            (-20*s12*s13 - 20*s13^2)*s23 - 10*s13*s23^2) +
          p1q^2*p2q*(-20*s12^2*s13 - 40*s12*s13^2 - 20*s13^3 +
            (-16*s12^2 - 72*s12*s13 - 56*s13^2)*s23 + (-32*s12 - 52*s13)*
             s23^2 - 16*s23^3) + p1q^3*((-16*s12^2 - 32*s12*s13 - 16*s13^2)*
             s23 + (-32*s12 - 32*s13)*s23^2 - 16*s23^3) +
          p1q*p2q^2*(-20*s12^2*s13 - 40*s12*s13^2 - 20*s13^3 +
            (-8*s12^2 - 56*s12*s13 - 48*s13^2)*s23 + (-16*s12 - 36*s13)*
             s23^2 - 8*s23^3) + p3q*(p2q^2*(-8*s12^3 - 36*s12^2*s13 -
              48*s12*s13^2 - 20*s13^3 + (-16*s12^2 - 56*s12*s13 - 40*s13^2)*
               s23 + (-8*s12 - 20*s13)*s23^2) + p1q*p2q*(-16*s12^3 -
              52*s12^2*s13 - 56*s12*s13^2 - 20*s13^3 + (-48*s12^2 -
                104*s12*s13 - 56*s13^2)*s23 + (-48*s12 - 52*s13)*s23^2 -
              16*s23^3) + p1q^2*(-16*s12^3 - 32*s12^2*s13 - 16*s12*s13^2 +
              (-48*s12^2 - 64*s12*s13 - 16*s13^2)*s23 + (-48*s12 - 32*s13)*
               s23^2 - 16*s23^3)) + p3q^2*(p2q*(-16*s12^3 - 42*s12^2*s13 -
              36*s12*s13^2 - 10*s13^3 + (-32*s12^2 - 52*s12*s13 - 20*s13^2)*
               s23 + (-16*s12 - 10*s13)*s23^2) + p1q*(-16*s12^3 -
              32*s12^2*s13 - 16*s12*s13^2 + (-40*s12^2 - 48*s12*s13 -
                8*s13^2)*s23 + (-32*s12 - 16*s13)*s23^2 - 8*s23^3)))*
         Log((p1q*s12 + p3q*s12 - p2q*s13 + p1q*s23 + p3q*s23)/
           ((p1q + p2q + p3q)*(s12 + s13 + s23))))/
        (27*p2q*p3q^2*s12*s13*s23 + p3q*(27*p1q*p2q*s12*s13*s23 +
           27*p2q^2*s12*s13*s23))) +
     ((p3q^3*(-10*s12^3 - 20*s12^2*s13 - 10*s12*s13^2 +
          (-20*s12^2 - 20*s12*s13)*s23 - 10*s12*s23^2) +
        p2q^3*(-8*s12^2*s13 - 16*s12*s13^2 - 8*s13^3 +
          (-16*s12*s13 - 16*s13^2)*s23 - 8*s13*s23^2) +
        p1q*p2q^2*(-16*s12^2*s13 - 32*s12*s13^2 - 16*s13^3 +
          (28*s12^2 + 24*s12*s13 - 4*s13^2)*s23 + (56*s12 + 40*s13)*s23^2 +
          28*s23^3) + p1q^2*p2q*(-16*s12^2*s13 - 32*s12*s13^2 - 16*s13^3 +
          (56*s12^2 + 80*s12*s13 + 24*s13^2)*s23 + (112*s12 + 96*s13)*s23^2 +
          56*s23^3) + p1q^3*((56*s12^2 + 112*s12*s13 + 56*s13^2)*s23 +
          (112*s12 + 112*s13)*s23^2 + 56*s23^3) +
        p3q^2*(p2q*(-20*s12^3 - 48*s12^2*s13 - 36*s12*s13^2 - 8*s13^3 +
            (-40*s12^2 - 56*s12*s13 - 16*s13^2)*s23 + (-20*s12 - 8*s13)*
             s23^2) + p1q*(-20*s12^3 - 40*s12^2*s13 - 20*s12*s13^2 +
            (-12*s12^2 + 16*s12*s13 + 28*s13^2)*s23 + (36*s12 + 56*s13)*
             s23^2 + 28*s23^3)) + p3q*(p2q^2*(-10*s12^3 - 36*s12^2*s13 -
            42*s12*s13^2 - 16*s13^3 + (-20*s12^2 - 52*s12*s13 - 32*s13^2)*
             s23 + (-10*s12 - 16*s13)*s23^2) + p1q*p2q*(-20*s12^3 -
            56*s12^2*s13 - 52*s12*s13^2 - 16*s13^3 +
            (16*s12^2 + 40*s12*s13 + 24*s13^2)*s23 + (92*s12 + 96*s13)*
             s23^2 + 56*s23^3) + p1q^2*(-20*s12^3 - 40*s12^2*s13 -
            20*s12*s13^2 + (16*s12^2 + 72*s12*s13 + 56*s13^2)*s23 +
            (92*s12 + 112*s13)*s23^2 + 56*s23^3)))*
       PolyLog(2, p1q/(p1q + p2q)))/(27*p2q*p3q^2*s12*s13*s23 +
       p3q*(27*p1q*p2q*s12*s13*s23 + 27*p2q^2*s12*s13*s23)) +
     ((p3q^3*(-8*s12^3 - 16*s12^2*s13 - 8*s12*s13^2 +
          (-16*s12^2 - 16*s12*s13)*s23 - 8*s12*s23^2) +
        p2q^3*(-10*s12^2*s13 - 20*s12*s13^2 - 10*s13^3 +
          (-20*s12*s13 - 20*s13^2)*s23 - 10*s13*s23^2) +
        p1q*p2q^2*(-20*s12^2*s13 - 40*s12*s13^2 - 20*s13^3 +
          (28*s12^2 + 16*s12*s13 - 12*s13^2)*s23 + (56*s12 + 36*s13)*s23^2 +
          28*s23^3) + p1q^2*p2q*(-20*s12^2*s13 - 40*s12*s13^2 - 20*s13^3 +
          (56*s12^2 + 72*s12*s13 + 16*s13^2)*s23 + (112*s12 + 92*s13)*s23^2 +
          56*s23^3) + p1q^3*((56*s12^2 + 112*s12*s13 + 56*s13^2)*s23 +
          (112*s12 + 112*s13)*s23^2 + 56*s23^3) +
        p3q^2*(p2q*(-16*s12^3 - 42*s12^2*s13 - 36*s12*s13^2 - 10*s13^3 +
            (-32*s12^2 - 52*s12*s13 - 20*s13^2)*s23 + (-16*s12 - 10*s13)*
             s23^2) + p1q*(-16*s12^3 - 32*s12^2*s13 - 16*s12*s13^2 +
            (-4*s12^2 + 24*s12*s13 + 28*s13^2)*s23 + (40*s12 + 56*s13)*
             s23^2 + 28*s23^3)) + p3q*(p2q^2*(-8*s12^3 - 36*s12^2*s13 -
            48*s12*s13^2 - 20*s13^3 + (-16*s12^2 - 56*s12*s13 - 40*s13^2)*
             s23 + (-8*s12 - 20*s13)*s23^2) + p1q*p2q*(-16*s12^3 -
            52*s12^2*s13 - 56*s12*s13^2 - 20*s13^3 +
            (24*s12^2 + 40*s12*s13 + 16*s13^2)*s23 + (96*s12 + 92*s13)*
             s23^2 + 56*s23^3) + p1q^2*(-16*s12^3 - 32*s12^2*s13 -
            16*s12*s13^2 + (24*s12^2 + 80*s12*s13 + 56*s13^2)*s23 +
            (96*s12 + 112*s13)*s23^2 + 56*s23^3)))*
       PolyLog(2, p1q/(p1q + p3q)))/(27*p2q*p3q^2*s12*s13*s23 +
       p3q*(27*p1q*p2q*s12*s13*s23 + 27*p2q^2*s12*s13*s23)) +
     ((p3q^3*(6*s12^3 + 12*s12^2*s13 + 6*s12*s13^2 + (12*s12^2 + 12*s12*s13)*
           s23 + 6*s12*s23^2) + p1q^2*p2q*(-12*s12^2*s13 - 24*s12*s13^2 -
          12*s13^3 + (-24*s12*s13 - 24*s13^2)*s23 - 12*s13*s23^2) +
        p1q*p2q^2*(-12*s12^2*s13 - 24*s12*s13^2 - 12*s13^3 +
          (-24*s12*s13 - 24*s13^2)*s23 - 12*s13*s23^2) +
        p2q^3*(-6*s12^2*s13 - 12*s12*s13^2 - 6*s13^3 +
          (-12*s12*s13 - 12*s13^2)*s23 - 6*s13*s23^2) +
        p3q*(p1q^2*(12*s12^3 + 24*s12^2*s13 + 12*s12*s13^2 +
            (24*s12^2 + 24*s12*s13)*s23 + 12*s12*s23^2) +
          p2q^2*(6*s12^3 - 18*s12*s13^2 - 12*s13^3 +
            (12*s12^2 - 12*s12*s13 - 24*s13^2)*s23 + (6*s12 - 12*s13)*
             s23^2) + p1q*p2q*(12*s12^3 + 12*s12^2*s13 - 12*s12*s13^2 -
            12*s13^3 + (24*s12^2 - 24*s13^2)*s23 + (12*s12 - 12*s13)*
             s23^2)) + p3q^2*(p1q*(12*s12^3 + 24*s12^2*s13 + 12*s12*s13^2 +
            (24*s12^2 + 24*s12*s13)*s23 + 12*s12*s23^2) +
          p2q*(12*s12^3 + 18*s12^2*s13 - 6*s13^3 + (24*s12^2 + 12*s12*s13 -
              12*s13^2)*s23 + (12*s12 - 6*s13)*s23^2)))*
       PolyLog(2, p2q/(p2q + p3q)))/(p2q*p3q^2*s12*s13*s23 +
       p3q*(p1q*p2q*s12*s13*s23 + p2q^2*s12*s13*s23)) +
     ((p3q^6*((-30*s12^3*s13 - 60*s12^2*s13^2 - 30*s12*s13^3)*s23 +
          (-10*s12^3 - 60*s12^2*s13 - 50*s12*s13^2)*s23^2 +
          (-10*s12^2 - 20*s12*s13)*s23^3) +
        p2q^6*((-30*s12^3*s13 - 60*s12^2*s13^2 - 30*s12*s13^3)*s23 +
          (-50*s12^2*s13 - 60*s12*s13^2 - 10*s13^3)*s23^2 +
          (-20*s12*s13 - 10*s13^2)*s23^3) + p1q*p2q^5*
         ((-60*s12^3*s13 - 120*s12^2*s13^2 - 60*s12*s13^3)*s23 +
          (10*s12^3 - 70*s12^2*s13 - 110*s12*s13^2 - 30*s13^3)*s23^2 +
          (10*s12^2 - 10*s12*s13 - 20*s13^2)*s23^3 + 10*s13*s23^4) +
        p1q^4*p2q^2*((-20*s12^2 + 20*s13^2)*s23^3 + (-20*s12 + 20*s13)*
           s23^4) + p1q^2*p2q^4*((-60*s12^3*s13 - 120*s12^2*s13^2 -
            60*s12*s13^3)*s23 + (20*s12^3 - 40*s12^2*s13 - 100*s12*s13^2 -
            40*s13^3)*s23^2 + (10*s12^2 + 20*s12*s13 - 10*s13^2)*s23^3 +
          (-10*s12 + 30*s13)*s23^4) + p1q^3*p2q^3*
         ((20*s12^3 + 60*s12^2*s13 + 20*s12*s13^2 - 20*s13^3)*s23^2 +
          (60*s12*s13 + 20*s13^2)*s23^3 + (-20*s12 + 40*s13)*s23^4) +
        p3q^5*(p2q*(-80*s12^4*s13 - 80*s12^3*s13^2 +
            (-20*s12^4 - 200*s12^3*s13 - 150*s12^2*s13^2 - 60*s12*s13^3 -
              10*s13^4)*s23 + (-40*s12^3 - 170*s12^2*s13 - 100*s12*s13^2 -
              10*s13^3)*s23^2 + (-20*s12^2 - 50*s12*s13)*s23^3) +
          p1q*((-60*s12^3*s13 - 120*s12^2*s13^2 - 60*s12*s13^3)*s23 +
            (-30*s12^3 - 110*s12^2*s13 - 70*s12*s13^2 + 10*s13^3)*s23^2 +
            (-20*s12^2 - 10*s12*s13 + 10*s13^2)*s23^3 + 10*s12*s23^4)) +
        p3q^3*(p2q^3*(-80*s12^4*s13 + 240*s12^3*s13^2 + 240*s12^2*s13^3 -
            80*s12*s13^4 + (-70*s12^4 - 60*s12^3*s13 + 500*s12^2*s13^2 -
              60*s12*s13^3 - 70*s13^4)*s23 + (-70*s12^3 + 70*s12^2*s13 +
              70*s12*s13^2 - 70*s13^3)*s23^2 - 20*s12*s13*s23^3) +
          p1q*p2q^2*(-80*s12^4*s13 + 80*s12^3*s13^2 + 160*s12^2*s13^3 +
            (-100*s12^4 + 20*s12^3*s13 + 540*s12^2*s13^2 + 100*s12*s13^3 -
              80*s13^4)*s23 + (-20*s12^3 + 200*s12^2*s13 + 200*s12*s13^2 +
              20*s13^3)*s23^2 + (90*s12^2 - 70*s12*s13 + 100*s13^2)*s23^3 +
            10*s12*s23^4) + p1q^2*p2q*((-20*s12^4 + 80*s12^3*s13 +
              120*s12^2*s13^2 - 20*s13^4)*s23 + (40*s12^2*s13 +
              40*s12*s13^2 + 80*s13^3)*s23^2 + (50*s12^2 - 80*s12*s13 +
              70*s13^2)*s23^3 + (30*s12 - 30*s13)*s23^4) +
          p1q^3*((-20*s12^3 + 20*s12^2*s13 + 60*s12*s13^2 + 20*s13^3)*s23^2 +
            (20*s12^2 + 60*s12*s13)*s23^3 + (40*s12 - 20*s13)*s23^4)) +
        p3q^4*(p2q^2*(-160*s12^4*s13 + 160*s12^2*s13^3 +
            (-60*s12^4 - 270*s12^3*s13 + 160*s12^2*s13^2 + 10*s12*s13^3 -
              40*s13^4)*s23 + (-70*s12^3 - 100*s12^2*s13 + 10*s12*s13^2 -
              40*s13^3)*s23^2 + (-10*s12^2 - 40*s12*s13)*s23^3) +
          p1q*p2q*(-80*s12^4*s13 - 80*s12^3*s13^2 +
            (-40*s12^4 - 120*s12^3*s13 - 20*s12^2*s13^2 - 40*s12*s13^3 -
              20*s13^4)*s23 + (-50*s12^3 - 30*s12^2*s13 + 10*s12*s13^2 +
              30*s13^3)*s23^2 + (10*s12^2 + 50*s13^2)*s23^3 + 20*s12*s23^4) +
          p1q^2*((-60*s12^3*s13 - 120*s12^2*s13^2 - 60*s12*s13^3)*s23 +
            (-40*s12^3 - 100*s12^2*s13 - 40*s12*s13^2 + 20*s13^3)*s23^2 +
            (-10*s12^2 + 20*s12*s13 + 10*s13^2)*s23^3 + (30*s12 - 10*s13)*
             s23^4)) + p3q^2*(p2q^4*(160*s12^3*s13^2 - 160*s12*s13^4 +
            (-40*s12^4 + 10*s12^3*s13 + 160*s12^2*s13^2 - 270*s12*s13^3 -
              60*s13^4)*s23 + (-40*s12^3 + 10*s12^2*s13 - 100*s12*s13^2 -
              70*s13^3)*s23^2 + (-40*s12*s13 - 10*s13^2)*s23^3) +
          p1q^3*p2q*((20*s12^3 - 100*s12^2*s13 - 60*s12*s13^2 + 60*s13^3)*
             s23^2 + (40*s12^2 - 140*s12*s13 + 20*s13^2)*s23^3 +
            (20*s12 - 40*s13)*s23^4) + p1q^2*p2q^2*
           ((-40*s12^4 + 40*s12^3*s13 + 160*s12^2*s13^2 + 40*s12*s13^3 -
              40*s13^4)*s23 + (100*s12^3 - 100*s12^2*s13 - 100*s12*s13^2 +
              100*s13^3)*s23^2 + (120*s12^2 - 360*s12*s13 + 120*s13^2)*
             s23^3 + (-20*s12 - 20*s13)*s23^4) +
          p1q^4*((20*s12^2 - 20*s13^2)*s23^3 + (20*s12 - 20*s13)*s23^4) +
          p1q*p2q^3*(160*s12^3*s13^2 + 80*s12^2*s13^3 - 80*s12*s13^4 +
            (-80*s12^4 + 100*s12^3*s13 + 540*s12^2*s13^2 + 20*s12*s13^3 -
              100*s13^4)*s23 + (20*s12^3 + 200*s12^2*s13 + 200*s12*s13^2 -
              20*s13^3)*s23^2 + (100*s12^2 - 70*s12*s13 + 90*s13^2)*s23^3 +
            10*s13*s23^4)) + p3q*(p2q^5*(-80*s12^2*s13^3 - 80*s12*s13^4 +
            (-10*s12^4 - 60*s12^3*s13 - 150*s12^2*s13^2 - 200*s12*s13^3 -
              20*s13^4)*s23 + (-10*s12^3 - 100*s12^2*s13 - 170*s12*s13^2 -
              40*s13^3)*s23^2 + (-50*s12*s13 - 20*s13^2)*s23^3) +
          p1q*p2q^4*(-80*s12^2*s13^3 - 80*s12*s13^4 +
            (-20*s12^4 - 40*s12^3*s13 - 20*s12^2*s13^2 - 120*s12*s13^3 -
              40*s13^4)*s23 + (30*s12^3 + 10*s12^2*s13 - 30*s12*s13^2 -
              50*s13^3)*s23^2 + (50*s12^2 + 10*s13^2)*s23^3 + 20*s13*s23^4) +
          p1q^3*p2q^2*((60*s12^3 - 60*s12^2*s13 - 100*s12*s13^2 + 20*s13^3)*
             s23^2 + (20*s12^2 - 140*s12*s13 + 40*s13^2)*s23^3 +
            (-40*s12 + 20*s13)*s23^4) + p1q^2*p2q^3*
           ((-20*s12^4 + 120*s12^2*s13^2 + 80*s12*s13^3 - 20*s13^4)*s23 +
            (80*s12^3 + 40*s12^2*s13 + 40*s12*s13^2)*s23^2 +
            (70*s12^2 - 80*s12*s13 + 50*s13^2)*s23^3 + (-30*s12 + 30*s13)*
             s23^4)))*PolyLog(2, p1q/(p1q + p2q + p3q)))/
      (p2q*p3q^5*(3*s12^2*s13 + 3*s12*s13^2)*s23^2 +
       p3q^3*(p2q^3*(18*s12^2*s13 + 18*s12*s13^2)*s23^2 -
         3*p1q^2*p2q*s12*s13*s23^3 + p1q*p2q^2*((9*s12^2*s13 + 9*s12*s13^2)*
            s23^2 - 9*s12*s13*s23^3)) +
       p3q^2*(p2q^4*(12*s12^2*s13 + 12*s12*s13^2)*s23^2 -
         6*p1q^2*p2q^2*s12*s13*s23^3 + p1q*p2q^3*((9*s12^2*s13 + 9*s12*s13^2)*
            s23^2 - 9*s12*s13*s23^3)) +
       p3q^4*(p2q^2*(12*s12^2*s13 + 12*s12*s13^2)*s23^2 +
         p1q*p2q*((3*s12^2*s13 + 3*s12*s13^2)*s23^2 - 3*s12*s13*s23^3)) +
       p3q*(p2q^5*(3*s12^2*s13 + 3*s12*s13^2)*s23^2 - 3*p1q^2*p2q^3*s12*s13*
          s23^3 + p1q*p2q^4*((3*s12^2*s13 + 3*s12*s13^2)*s23^2 -
           3*s12*s13*s23^3))) +
     ((p2q^5*(90*s12^2*s13^2 + 90*s12*s13^3 + (100*s12*s13^2 + 10*s13^3)*
           s23 + 10*s13^2*s23^2) + p3q^5*(90*s12^3*s13 + 90*s12^2*s13^2 +
          (160*s12^3 + 420*s12^2*s13 + 170*s12*s13^2)*s23 +
          (320*s12^2 + 330*s12*s13)*s23^2 + 160*s12*s23^3) +
        p1q^3*p2q^2*(-180*s12^3*s13 - 180*s12^2*s13^2 +
          (140*s12^3 - 440*s12^2*s13 - 380*s12*s13^2 + 20*s13^3)*s23 +
          (280*s12^2 - 300*s12*s13 - 20*s13^2)*s23^2 + (140*s12 - 40*s13)*
           s23^3) + p1q^2*p2q^3*(-180*s12^3*s13 + 180*s12*s13^3 +
          (70*s12^3 - 490*s12^2*s13 - 160*s12*s13^2 + 40*s13^3)*s23 +
          (140*s12^2 - 340*s12*s13 + 10*s13^2)*s23^2 + (70*s12 - 30*s13)*
           s23^3) + p1q^4*p2q*((140*s12^3 + 100*s12^2*s13 - 40*s12*s13^2)*
           s23 + (280*s12^2 + 80*s12*s13 - 20*s13^2)*s23^2 +
          (140*s12 - 20*s13)*s23^3) + p1q*p2q^4*(-90*s12^3*s13 +
          90*s12^2*s13^2 + 180*s12*s13^3 + (-270*s12^2*s13 + 30*s12*s13^2 +
            30*s13^3)*s23 + (-190*s12*s13 + 20*s13^2)*s23^2 - 10*s13*s23^3) +
        p3q^2*(p2q^3*(90*s12^4 - 270*s12^3*s13 - 180*s12^2*s13^2 +
            180*s12*s13^3 + (100*s12^3 - 390*s12^2*s13 + 160*s12*s13^2 +
              20*s13^3)*s23 + (10*s12^2 - 40*s12*s13 + 20*s13^2)*s23^2) +
          p1q^2*p2q*(540*s12^4 + 720*s12^3*s13 - 180*s12^2*s13^2 -
            360*s12*s13^3 + (1980*s12^3 + 1300*s12^2*s13 - 640*s12*s13^2 +
              40*s13^3)*s23 + (2420*s12^2 + 590*s12*s13 - 30*s13^2)*s23^2 +
            (980*s12 - 70*s13)*s23^3) + p1q^3*(180*s12^3*s13 +
            180*s12^2*s13^2 + (960*s12^3 + 1760*s12^2*s13 + 620*s12*s13^2)*
             s23 + (1920*s12^2 + 1540*s12*s13 - 40*s13^2)*s23^2 +
            (960*s12 - 40*s13)*s23^3) + p1q*p2q^2*(360*s12^4 -
            540*s12^3*s13 - 1080*s12^2*s13^2 - 180*s12*s13^3 +
            (460*s12^3 - 1830*s12^2*s13 - 1140*s12*s13^2 + 70*s13^3)*s23 +
            (80*s12^2 - 1070*s12*s13 + 50*s13^2)*s23^2 + (-20*s12 - 20*s13)*
             s23^3)) + p3q*(p2q^4*(-180*s12^3*s13 + 180*s12*s13^3 +
            (-200*s12^2*s13 + 180*s12*s13^2 + 20*s13^3)*s23 +
            (-20*s12*s13 + 20*s13^2)*s23^2) + p1q^3*p2q*(180*s12^4 +
            180*s12^3*s13 - 180*s12^2*s13^2 - 180*s12*s13^3 +
            (1100*s12^3 + 600*s12^2*s13 - 480*s12*s13^2 + 20*s13^3)*s23 +
            (1660*s12^2 + 340*s12*s13 - 60*s13^2)*s23^2 + (740*s12 - 80*s13)*
             s23^3) + p1q^2*p2q^2*(180*s12^4 - 540*s12^3*s13 -
            900*s12^2*s13^2 - 180*s12*s13^3 + (480*s12^3 - 1740*s12^2*s13 -
              1420*s12*s13^2 + 80*s13^3)*s23 + (500*s12^2 - 1190*s12*s13 +
              10*s13^2)*s23^2 + (200*s12 - 70*s13)*s23^3) +
          p1q*p2q^3*(90*s12^4 - 450*s12^3*s13 - 180*s12^2*s13^2 +
            360*s12*s13^3 + (90*s12^3 - 1030*s12^2*s13 - 60*s12*s13^2 +
              70*s13^3)*s23 + (-10*s12^2 - 520*s12*s13 + 50*s13^2)*s23^2 +
            (-10*s12 - 20*s13)*s23^3) +
          p1q^4*((320*s12^3 + 460*s12^2*s13 + 140*s12*s13^2)*s23 +
            (640*s12^2 + 440*s12*s13 - 20*s13^2)*s23^2 + (320*s12 - 20*s13)*
             s23^3)) + p3q^3*(p2q^2*(180*s12^4 - 180*s12^3*s13 -
            450*s12^2*s13^2 - 90*s12*s13^3 + (200*s12^3 - 620*s12^2*s13 -
              350*s12*s13^2 + 20*s13^3)*s23 + (20*s12^2 - 280*s12*s13 +
              20*s13^2)*s23^2) + p1q^2*(360*s12^3*s13 + 360*s12^2*s13^2 +
            (1120*s12^3 + 2370*s12^2*s13 + 890*s12*s13^2)*s23 +
            (2240*s12^2 + 1980*s12*s13 - 30*s13^2)*s23^2 +
            (1120*s12 - 30*s13)*s23^3) + p1q*p2q*(540*s12^4 + 720*s12^3*s13 -
            90*s12^2*s13^2 - 270*s12*s13^3 + (1460*s12^3 + 960*s12^2*s13 -
              380*s12*s13^2 + 30*s13^3)*s23 + (1460*s12^2 + 380*s12*s13 +
              10*s13^2)*s23^2 + (540*s12 - 20*s13)*s23^3)) +
        p3q^4*(p2q*(180*s12^4 + 270*s12^3*s13 - 90*s12*s13^3 +
            (440*s12^3 + 350*s12^2*s13 - 80*s12*s13^2 + 10*s13^3)*s23 +
            (420*s12^2 + 160*s12*s13 + 10*s13^2)*s23^2 + 160*s12*s23^3) +
          p1q*(270*s12^3*s13 + 270*s12^2*s13^2 +
            (640*s12^3 + 1490*s12^2*s13 + 580*s12*s13^2)*s23 +
            (1280*s12^2 + 1210*s12*s13 - 10*s13^2)*s23^2 + (640*s12 - 10*s13)*
             s23^3)))*PolyLog(2, p2q/(p1q + p2q + p3q)))/
      (p2q*p3q^4*(27*s12^2*s13*s23 + 27*s12*s13*s23^2) +
       p3q*(-27*p2q^4*s12*s13^2*s23 + p1q^2*p2q^2*(27*s12^2*s13*s23 +
           27*s12*s13*s23^2) + p1q*p2q^3*((27*s12^2*s13 - 27*s12*s13^2)*s23 +
           27*s12*s13*s23^2)) + p3q^3*(p1q*p2q*(54*s12^2*s13*s23 +
           54*s12*s13*s23^2) + p2q^2*((54*s12^2*s13 - 27*s12*s13^2)*s23 +
           54*s12*s13*s23^2)) + p3q^2*(p1q^2*p2q*(27*s12^2*s13*s23 +
           27*s12*s13*s23^2) + p2q^3*((27*s12^2*s13 - 54*s12*s13^2)*s23 +
           27*s12*s13*s23^2) + p1q*p2q^2*((81*s12^2*s13 - 27*s12*s13^2)*s23 +
           81*s12*s13*s23^2))) +
     ((p3q^5*(-90*s12^3*s13 - 90*s12^2*s13^2 + (-10*s12^3 - 100*s12^2*s13)*
           s23 - 10*s12^2*s23^2) + p1q^2*p2q^3*(-360*s12^2*s13^2 -
          360*s12*s13^3 + (-890*s12^2*s13 - 2370*s12*s13^2 - 1120*s13^3)*
           s23 + (30*s12^2 - 1980*s12*s13 - 2240*s13^2)*s23^2 +
          (30*s12 - 1120*s13)*s23^3) + p1q^3*p2q^2*(-180*s12^2*s13^2 -
          180*s12*s13^3 + (-620*s12^2*s13 - 1760*s12*s13^2 - 960*s13^3)*s23 +
          (40*s12^2 - 1540*s12*s13 - 1920*s13^2)*s23^2 + (40*s12 - 960*s13)*
           s23^3) + p1q*p2q^4*(-270*s12^2*s13^2 - 270*s12*s13^3 +
          (-580*s12^2*s13 - 1490*s12*s13^2 - 640*s13^3)*s23 +
          (10*s12^2 - 1210*s12*s13 - 1280*s13^2)*s23^2 + (10*s12 - 640*s13)*
           s23^3) + p1q^4*p2q*((-140*s12^2*s13 - 460*s12*s13^2 - 320*s13^3)*
           s23 + (20*s12^2 - 440*s12*s13 - 640*s13^2)*s23^2 +
          (20*s12 - 320*s13)*s23^3) + p2q^5*(-90*s12^2*s13^2 - 90*s12*s13^3 +
          (-170*s12^2*s13 - 420*s12*s13^2 - 160*s13^3)*s23 +
          (-330*s12*s13 - 320*s13^2)*s23^2 - 160*s13*s23^3) +
        p3q^4*(p2q*(-180*s12^3*s13 + 180*s12*s13^3 +
            (-20*s12^3 - 180*s12^2*s13 + 200*s12*s13^2)*s23 +
            (-20*s12^2 + 20*s12*s13)*s23^2) + p1q*(-180*s12^3*s13 -
            90*s12^2*s13^2 + 90*s12*s13^3 + (-30*s12^3 - 30*s12^2*s13 +
              270*s12*s13^2)*s23 + (-20*s12^2 + 190*s12*s13)*s23^2 +
            10*s12*s23^3)) + p3q*(p1q^2*p2q^2*(360*s12^3*s13 +
            180*s12^2*s13^2 - 720*s12*s13^3 - 540*s13^4 +
            (-40*s12^3 + 640*s12^2*s13 - 1300*s12*s13^2 - 1980*s13^3)*s23 +
            (30*s12^2 - 590*s12*s13 - 2420*s13^2)*s23^2 + (70*s12 - 980*s13)*
             s23^3) + p1q^3*p2q*(180*s12^3*s13 + 180*s12^2*s13^2 -
            180*s12*s13^3 - 180*s13^4 + (-20*s12^3 + 480*s12^2*s13 -
              600*s12*s13^2 - 1100*s13^3)*s23 + (60*s12^2 - 340*s12*s13 -
              1660*s13^2)*s23^2 + (80*s12 - 740*s13)*s23^3) +
          p1q*p2q^3*(270*s12^3*s13 + 90*s12^2*s13^2 - 720*s12*s13^3 -
            540*s13^4 + (-30*s12^3 + 380*s12^2*s13 - 960*s12*s13^2 -
              1460*s13^3)*s23 + (-10*s12^2 - 380*s12*s13 - 1460*s13^2)*
             s23^2 + (20*s12 - 540*s13)*s23^3) +
          p1q^4*((40*s12^2*s13 - 100*s12*s13^2 - 140*s13^3)*s23 +
            (20*s12^2 - 80*s12*s13 - 280*s13^2)*s23^2 + (20*s12 - 140*s13)*
             s23^3) + p2q^4*(90*s12^3*s13 - 270*s12*s13^3 - 180*s13^4 +
            (-10*s12^3 + 80*s12^2*s13 - 350*s12*s13^2 - 440*s13^3)*s23 +
            (-10*s12^2 - 160*s12*s13 - 420*s13^2)*s23^2 - 160*s13*s23^3)) +
        p3q^3*(p2q^2*(-180*s12^3*s13 + 180*s12^2*s13^2 + 270*s12*s13^3 -
            90*s13^4 + (-20*s12^3 - 160*s12^2*s13 + 390*s12*s13^2 -
              100*s13^3)*s23 + (-20*s12^2 + 40*s12*s13 - 10*s13^2)*s23^2) +
          p1q^2*(-180*s12^3*s13 + 180*s12*s13^3 +
            (-40*s12^3 + 160*s12^2*s13 + 490*s12*s13^2 - 70*s13^3)*s23 +
            (-10*s12^2 + 340*s12*s13 - 140*s13^2)*s23^2 + (30*s12 - 70*s13)*
             s23^3) + p1q*p2q*(-360*s12^3*s13 + 180*s12^2*s13^2 +
            450*s12*s13^3 - 90*s13^4 + (-70*s12^3 + 60*s12^2*s13 +
              1030*s12*s13^2 - 90*s13^3)*s23 + (-50*s12^2 + 520*s12*s13 +
              10*s13^2)*s23^2 + (20*s12 + 10*s13)*s23^3)) +
        p3q^2*(p2q^3*(90*s12^3*s13 + 450*s12^2*s13^2 + 180*s12*s13^3 -
            180*s13^4 + (-20*s12^3 + 350*s12^2*s13 + 620*s12*s13^2 -
              200*s13^3)*s23 + (-20*s12^2 + 280*s12*s13 - 20*s13^2)*s23^2) +
          p1q^2*p2q*(180*s12^3*s13 + 900*s12^2*s13^2 + 540*s12*s13^3 -
            180*s13^4 + (-80*s12^3 + 1420*s12^2*s13 + 1740*s12*s13^2 -
              480*s13^3)*s23 + (-10*s12^2 + 1190*s12*s13 - 500*s13^2)*s23^2 +
            (70*s12 - 200*s13)*s23^3) + p1q^3*(180*s12^2*s13^2 +
            180*s12*s13^3 + (-20*s12^3 + 380*s12^2*s13 + 440*s12*s13^2 -
              140*s13^3)*s23 + (20*s12^2 + 300*s12*s13 - 280*s13^2)*s23^2 +
            (40*s12 - 140*s13)*s23^3) + p1q*p2q^2*(180*s12^3*s13 +
            1080*s12^2*s13^2 + 540*s12*s13^3 - 360*s13^4 +
            (-70*s12^3 + 1140*s12^2*s13 + 1830*s12*s13^2 - 460*s13^3)*s23 +
            (-50*s12^2 + 1070*s12*s13 - 80*s13^2)*s23^2 + (20*s12 + 20*s13)*
             s23^3)))*PolyLog(2, p3q/(p1q + p2q + p3q)))/
      (27*p2q*p3q^4*s12^2*s13*s23 +
       p3q^2*(p1q*p2q^2*((27*s12^2*s13 - 81*s12*s13^2)*s23 -
           81*s12*s13*s23^2) + p2q^3*((27*s12^2*s13 - 54*s12*s13^2)*s23 -
           54*s12*s13*s23^2) + p1q^2*p2q*(-27*s12*s13^2*s23 -
           27*s12*s13*s23^2)) + p3q*(p1q*p2q^3*(-54*s12*s13^2*s23 -
           54*s12*s13*s23^2) + p1q^2*p2q^2*(-27*s12*s13^2*s23 -
           27*s12*s13*s23^2) + p2q^4*(-27*s12*s13^2*s23 -
           27*s12*s13*s23^2)) +
       p3q^3*(p1q*p2q*((27*s12^2*s13 - 27*s12*s13^2)*s23 -
           27*s12*s13*s23^2) + p2q^2*((54*s12^2*s13 - 27*s12*s13^2)*s23 -
           27*s12*s13*s23^2))) +
     ((p3q^5*((10*s12^5 + 30*s12^4*s13 + 30*s12^3*s13^2 + 10*s12^2*s13^3)*
           s23^2 + (10*s12^4 + 20*s12^3*s13 + 10*s12^2*s13^2)*s23^3) +
        p2q^5*((-162*s12^2*s13^4 - 324*s12*s13^5 - 162*s13^6)*s23 +
          (-242*s12^2*s13^3 - 728*s12*s13^4 - 486*s13^5)*s23^2 +
          (-404*s12*s13^3 - 486*s13^4)*s23^3 - 162*s13^3*s23^4) +
        p1q*p2q^4*(27*s12^2*s13^5 + 54*s12*s13^6 + 27*s13^7 +
          (-459*s12^2*s13^4 - 864*s12*s13^5 - 405*s13^6)*s23 +
          (-708*s12^2*s13^3 - 2094*s12*s13^4 - 1359*s13^5)*s23^2 +
          (98*s12^2*s13^2 - 1060*s12*s13^3 - 1377*s13^4)*s23^3 +
          (116*s12*s13^2 - 432*s13^3)*s23^4 + 18*s13^2*s23^5) +
        p1q^2*p2q^3*(27*s12^2*s13^5 + 54*s12*s13^6 + 27*s13^7 +
          (-648*s12^2*s13^4 - 1242*s12*s13^5 - 594*s13^6)*s23 +
          (-1104*s12^2*s13^3 - 3021*s12*s13^4 - 1890*s13^5)*s23^2 +
          (51*s12^2*s13^2 - 1620*s12*s13^3 - 1836*s13^4)*s23^3 +
          (-80*s12^2*s13 + 25*s12*s13^2 - 513*s13^3)*s23^4 +
          (-80*s12*s13 + 54*s13^2)*s23^5) + p1q^4*p2q*
         ((36*s12^2*s13^3 + 72*s12*s13^4 + 36*s13^5)*s23^2 +
          (359*s12^2*s13^2 + 467*s12*s13^3 + 108*s13^4)*s23^3 +
          (243*s12^2*s13 + 638*s12*s13^2 + 108*s13^3)*s23^4 +
          (80*s12^2 + 323*s12*s13 + 36*s13^2)*s23^5 + 80*s12*s23^6) +
        p1q^3*p2q^2*((-351*s12^2*s13^4 - 702*s12*s13^5 - 351*s13^6)*s23 +
          (-602*s12^2*s13^3 - 1583*s12*s13^4 - 981*s13^5)*s23^2 +
          (312*s12^2*s13^2 - 497*s12*s13^3 - 837*s13^4)*s23^3 +
          (163*s12^2*s13 + 547*s12*s13^2 - 135*s13^3)*s23^4 +
          (80*s12^2 + 243*s12*s13 + 72*s13^2)*s23^5 + 80*s12*s23^6) +
        p3q^4*(p1q*(-27*s12^5*s13^2 - 54*s12^4*s13^3 - 27*s12^3*s13^4 +
            (-54*s12^4*s13^2 - 54*s12^3*s13^3)*s23 +
            (10*s12^5 + 30*s12^4*s13 - 15*s12^3*s13^2 - 26*s12^2*s13^3 -
              18*s12*s13^4)*s23^2 + (-20*s12^4 - 50*s12^3*s13 -
              76*s12^2*s13^2 - 46*s12*s13^3)*s23^3 +
            (-30*s12^3 - 40*s12^2*s13 - 28*s12*s13^2)*s23^4) +
          p2q*((90*s12^6 - 63*s12^5*s13 + 180*s12^4*s13^2 - 171*s12^3*s13^3 +
              324*s12^2*s13^4 + 162*s12*s13^5)*s23 +
            (100*s12^5 - 133*s12^4*s13 + 303*s12^3*s13^2 - 112*s12^2*s13^3 +
              394*s12*s13^4)*s23^2 + (-20*s12^3*s13 - 40*s12^2*s13^2 +
              52*s12*s13^3)*s23^3 + (-10*s12^3 - 20*s12^2*s13 - 20*s12*s13^2)*
             s23^4)) + p3q^3*(p2q^2*((-270*s12^5*s13 + 369*s12^4*s13^2 -
              207*s12^3*s13^3 + 1476*s12^2*s13^4 + 162*s12*s13^5 - 162*s13^6)*
             s23 + (-90*s12^5 - 217*s12^4*s13 + 359*s12^3*s13^2 +
              301*s12^2*s13^3 + 890*s12*s13^4 - 566*s13^5)*s23^2 +
            (-100*s12^4 + 113*s12^3*s13 - 363*s12^2*s13^2 + 288*s12*s13^3 -
              566*s13^4)*s23^3 + (-10*s12^3 - 20*s12^2*s13 - 40*s12*s13^2 -
              162*s13^3)*s23^4) + p1q*p2q*(-27*s12^5*s13^2 + 27*s12^4*s13^3 +
            135*s12^3*s13^4 + 81*s12^2*s13^5 + (-243*s12^5*s13 +
              396*s12^4*s13^2 + 153*s12^3*s13^3 + 1008*s12^2*s13^4 -
              162*s13^6)*s23 + (-350*s12^5 - 134*s12^4*s13 + 382*s12^3*s13^
                2 - 228*s12^2*s13^3 + 538*s12*s13^4 - 468*s13^5)*s23^2 +
            (-390*s12^4 + 349*s12^3*s13 - 829*s12^2*s13^2 + 220*s12*s13^3 -
              352*s13^4)*s23^3 + (-20*s12^3 - 30*s12^2*s13 - 58*s12*s13^2 -
              28*s13^3)*s23^4 + (20*s12^2 + 20*s12*s13 + 18*s13^2)*s23^5) +
          p1q^2*(27*s12^4*s13^3 + 54*s12^3*s13^4 + 27*s12^2*s13^5 +
            (54*s12^4*s13^2 + 162*s12^3*s13^3 + 108*s12^2*s13^4)*s23 +
            (82*s12^3*s13^2 + 91*s12^2*s13^3 + 18*s13^5)*s23^2 +
            (-30*s12^4 - 70*s12^3*s13 - 40*s12^2*s13^2 - 10*s12*s13^3 +
              54*s13^4)*s23^3 + (10*s12^2*s13 + 10*s12*s13^2 + 54*s13^3)*
             s23^4 + (30*s12^2 + 20*s12*s13 + 18*s13^2)*s23^5)) +
        p3q^2*(p2q^3*((360*s12^4*s13^2 + 117*s12^3*s13^3 + 1422*s12^2*s13^4 -
              819*s12*s13^5 - 486*s13^6)*s23 + (180*s12^4*s13 +
              4*s12^3*s13^2 + 570*s12^2*s13^3 - 716*s12*s13^4 - 1618*s13^5)*
             s23^2 + (180*s12^3*s13 - 446*s12^2*s13^2 - 247*s12*s13^3 -
              1618*s13^4)*s23^3 + (-30*s12*s13^2 - 486*s13^3)*s23^4) +
          p1q*p2q^2*(81*s12^4*s13^3 + 81*s12^3*s13^4 - 81*s12^2*s13^5 -
            81*s12*s13^6 + (693*s12^4*s13^2 + 144*s12^3*s13^3 +
              1404*s12^2*s13^4 - 1521*s12*s13^5 - 810*s13^6)*s23 +
            (673*s12^4*s13 - 206*s12^3*s13^2 - 50*s12^2*s13^3 -
              924*s12*s13^4 - 2456*s13^5)*s23^2 +
            (260*s12^4 + 607*s12^3*s13 - 1485*s12^2*s13^2 + 423*s12*s13^3 -
              2188*s13^4)*s23^3 + (280*s12^3 - 266*s12^2*s13 +
              347*s12*s13^2 - 488*s13^3)*s23^4 + (20*s12^2 + 40*s12*s13 +
              54*s13^2)*s23^5) + p1q^3*((-27*s12^3*s13^3 - 54*s12^2*s13^4 -
              27*s12*s13^5)*s23 + (-53*s12^3*s13^2 - 134*s12^2*s13^3 -
              45*s12*s13^4 + 36*s13^5)*s23^2 + (-90*s12^2*s13^2 -
              19*s12*s13^3 + 108*s13^4)*s23^3 + (30*s12^3 + 50*s12^2*s13 +
              19*s12*s13^2 + 108*s13^3)*s23^4 + (20*s12^2 + 10*s12*s13 +
              36*s13^2)*s23^5 - 10*s12*s23^6) + p1q^2*p2q*(27*s12^4*s13^3 -
            81*s12^2*s13^5 - 54*s12*s13^6 + (387*s12^4*s13^2 +
              432*s12^3*s13^3 + 549*s12^2*s13^4 - 486*s12*s13^5 - 324*s13^6)*
             s23 + (729*s12^4*s13 - 241*s12^3*s13^2 - 373*s12^2*s13^3 +
              100*s12*s13^4 - 882*s13^5)*s23^2 + (510*s12^4 + 750*s12^3*s13 -
              1532*s12^2*s13^2 + 816*s12*s13^3 - 622*s13^4)*s23^3 +
            (560*s12^3 - 379*s12^2*s13 + 424*s12*s13^2 + 26*s13^3)*s23^4 +
            (40*s12^2 + 50*s12*s13 + 90*s13^2)*s23^5 - 10*s12*s23^6)) +
        p3q*(p2q^4*((-18*s12^3*s13^3 - 99*s12^2*s13^4 - 1233*s12*s13^5 -
              486*s13^6)*s23 + (-190*s12^3*s13^2 - 329*s12^2*s13^3 -
              2120*s12*s13^4 - 1538*s13^5)*s23^2 + (-160*s12^2*s13^2 -
              977*s12*s13^3 - 1538*s13^4)*s23^3 + (-10*s12*s13^2 - 486*s13^3)*
             s23^4) + p1q*p2q^3*(-81*s12^3*s13^4 - 135*s12^2*s13^5 -
            27*s12*s13^6 + 27*s13^7 + (-153*s12^3*s13^3 - 486*s12^2*s13^4 -
              2718*s12*s13^5 - 1053*s13^6)*s23 + (-711*s12^3*s13^2 -
              1006*s12^2*s13^3 - 4393*s12*s13^4 - 3347*s13^5)*s23^2 +
            (-80*s12^3*s13 - 535*s12^2*s13^2 - 1632*s12*s13^3 - 3213*s13^4)*
             s23^3 + (-60*s12^2*s13 + 250*s12*s13^2 - 892*s13^3)*s23^4 +
            (20*s12*s13 + 54*s13^2)*s23^5) + p1q^3*p2q*
           ((-27*s12^3*s13^3 - 405*s12^2*s13^4 - 729*s12*s13^5 - 351*s13^6)*
             s23 + (-719*s12^3*s13^2 - 736*s12^2*s13^3 - 962*s12*s13^4 -
              945*s13^5)*s23^2 + (-729*s12^3*s13 - 777*s12^2*s13^2 +
              546*s12*s13^3 - 729*s13^4)*s23^3 +
            (-330*s12^3 - 876*s12^2*s13 + 962*s12*s13^2 - 27*s13^3)*s23^4 +
            (-350*s12^2 + 163*s12*s13 + 108*s13^2)*s23^5 - 20*s12*s23^6) +
          p1q^4*((36*s12^2*s13^3 + 72*s12*s13^4 + 36*s13^5)*s23^2 +
            (26*s12^2*s13^2 + 134*s12*s13^3 + 108*s13^4)*s23^3 +
            (62*s12*s13^2 + 108*s13^3)*s23^4 + (-10*s12^2 - 10*s12*s13 +
              36*s13^2)*s23^5 - 10*s12*s23^6) + p1q^2*p2q^2*
           (-54*s12^3*s13^4 - 81*s12^2*s13^5 + 27*s13^7 +
            (-63*s12^3*s13^3 - 540*s12^2*s13^4 - 2061*s12*s13^5 - 918*s13^6)*
             s23 + (-989*s12^3*s13^2 - 992*s12^2*s13^3 - 3074*s12*s13^4 -
              2790*s13^5)*s23^2 + (-566*s12^3*s13 - 676*s12^2*s13^2 -
              128*s12*s13^3 - 2512*s13^4)*s23^3 +
            (-250*s12^3 - 613*s12^2*s13 + 1168*s12*s13^2 - 541*s13^3)*s23^4 +
            (-260*s12^2 + 193*s12*s13 + 126*s13^2)*s23^5 - 10*s12*s23^6)))*
       PolyLog(2, s12/(s12 + s13 + s23)))/(27*p2q*p3q^4*s12^2*s13^3*s23^2 +
       p3q^2*(p1q*p2q^2*((27*s12^2*s13^3 - 81*s12*s13^4)*s23^2 -
           81*s12*s13^3*s23^3) + p2q^3*((27*s12^2*s13^3 - 54*s12*s13^4)*
            s23^2 - 54*s12*s13^3*s23^3) + p1q^2*p2q*(-27*s12*s13^4*s23^2 -
           27*s12*s13^3*s23^3)) +
       p3q*(p1q*p2q^3*(-54*s12*s13^4*s23^2 - 54*s12*s13^3*s23^3) +
         p1q^2*p2q^2*(-27*s12*s13^4*s23^2 - 27*s12*s13^3*s23^3) +
         p2q^4*(-27*s12*s13^4*s23^2 - 27*s12*s13^3*s23^3)) +
       p3q^3*(p1q*p2q*((27*s12^2*s13^3 - 27*s12*s13^4)*s23^2 -
           27*s12*s13^3*s23^3) + p2q^2*((54*s12^2*s13^3 - 27*s12*s13^4)*
            s23^2 - 27*s12*s13^3*s23^3))) +
     ((p2q^5*((-10*s12^3*s13^2 - 30*s12^2*s13^3 - 30*s12*s13^4 - 10*s13^5)*
           s23^2 + (-10*s12^2*s13^2 - 20*s12*s13^3 - 10*s13^4)*s23^3) +
        p3q^5*((162*s12^6 + 324*s12^5*s13 + 162*s12^4*s13^2)*s23 +
          (486*s12^5 + 728*s12^4*s13 + 242*s12^3*s13^2)*s23^2 +
          (486*s12^4 + 404*s12^3*s13)*s23^3 + 162*s12^3*s23^4) +
        p1q*p2q^4*(27*s12^4*s13^3 + 54*s12^3*s13^4 + 27*s12^2*s13^5 +
          (54*s12^3*s13^3 + 54*s12^2*s13^4)*s23 +
          (18*s12^4*s13 + 26*s12^3*s13^2 + 15*s12^2*s13^3 - 30*s12*s13^4 -
            10*s13^5)*s23^2 + (46*s12^3*s13 + 76*s12^2*s13^2 + 50*s12*s13^3 +
            20*s13^4)*s23^3 + (28*s12^2*s13 + 40*s12*s13^2 + 30*s13^3)*
           s23^4) + p1q^2*p2q^3*(-27*s12^5*s13^2 - 54*s12^4*s13^3 -
          27*s12^3*s13^4 + (-108*s12^4*s13^2 - 162*s12^3*s13^3 -
            54*s12^2*s13^4)*s23 + (-18*s12^5 - 91*s12^3*s13^2 -
            82*s12^2*s13^3)*s23^2 + (-54*s12^4 + 10*s12^3*s13 +
            40*s12^2*s13^2 + 70*s12*s13^3 + 30*s13^4)*s23^3 +
          (-54*s12^3 - 10*s12^2*s13 - 10*s12*s13^2)*s23^4 +
          (-18*s12^2 - 20*s12*s13 - 30*s13^2)*s23^5) +
        p1q^3*p2q^2*((27*s12^5*s13 + 54*s12^4*s13^2 + 27*s12^3*s13^3)*s23 +
          (-36*s12^5 + 45*s12^4*s13 + 134*s12^3*s13^2 + 53*s12^2*s13^3)*
           s23^2 + (-108*s12^4 + 19*s12^3*s13 + 90*s12^2*s13^2)*s23^3 +
          (-108*s12^3 - 19*s12^2*s13 - 50*s12*s13^2 - 30*s13^3)*s23^4 +
          (-36*s12^2 - 10*s12*s13 - 20*s13^2)*s23^5 + 10*s13*s23^6) +
        p1q^4*p2q*((-36*s12^5 - 72*s12^4*s13 - 36*s12^3*s13^2)*s23^2 +
          (-108*s12^4 - 134*s12^3*s13 - 26*s12^2*s13^2)*s23^3 +
          (-108*s12^3 - 62*s12^2*s13)*s23^4 + (-36*s12^2 + 10*s12*s13 +
            10*s13^2)*s23^5 + 10*s13*s23^6) +
        p3q^4*(p2q*((486*s12^6 + 1233*s12^5*s13 + 99*s12^4*s13^2 +
              18*s12^3*s13^3)*s23 + (1538*s12^5 + 2120*s12^4*s13 +
              329*s12^3*s13^2 + 190*s12^2*s13^3)*s23^2 +
            (1538*s12^4 + 977*s12^3*s13 + 160*s12^2*s13^2)*s23^3 +
            (486*s12^3 + 10*s12^2*s13)*s23^4) +
          p1q*(-27*s12^7 - 54*s12^6*s13 - 27*s12^5*s13^2 +
            (405*s12^6 + 864*s12^5*s13 + 459*s12^4*s13^2)*s23 +
            (1359*s12^5 + 2094*s12^4*s13 + 708*s12^3*s13^2)*s23^2 +
            (1377*s12^4 + 1060*s12^3*s13 - 98*s12^2*s13^2)*s23^3 +
            (432*s12^3 - 116*s12^2*s13)*s23^4 - 18*s12^2*s23^5)) +
        p3q^3*(p2q^2*((486*s12^6 + 819*s12^5*s13 - 1422*s12^4*s13^2 -
              117*s12^3*s13^3 - 360*s12^2*s13^4)*s23 +
            (1618*s12^5 + 716*s12^4*s13 - 570*s12^3*s13^2 - 4*s12^2*s13^3 -
              180*s12*s13^4)*s23^2 + (1618*s12^4 + 247*s12^3*s13 +
              446*s12^2*s13^2 - 180*s12*s13^3)*s23^3 +
            (486*s12^3 + 30*s12^2*s13)*s23^4) + p1q*p2q*(-27*s12^7 +
            27*s12^6*s13 + 135*s12^5*s13^2 + 81*s12^4*s13^3 +
            (1053*s12^6 + 2718*s12^5*s13 + 486*s12^4*s13^2 + 153*s12^3*s13^3)*
             s23 + (3347*s12^5 + 4393*s12^4*s13 + 1006*s12^3*s13^2 +
              711*s12^2*s13^3)*s23^2 + (3213*s12^4 + 1632*s12^3*s13 +
              535*s12^2*s13^2 + 80*s12*s13^3)*s23^3 +
            (892*s12^3 - 250*s12^2*s13 + 60*s12*s13^2)*s23^4 +
            (-54*s12^2 - 20*s12*s13)*s23^5) + p1q^2*(-27*s12^7 -
            54*s12^6*s13 - 27*s12^5*s13^2 + (594*s12^6 + 1242*s12^5*s13 +
              648*s12^4*s13^2)*s23 + (1890*s12^5 + 3021*s12^4*s13 +
              1104*s12^3*s13^2)*s23^2 + (1836*s12^4 + 1620*s12^3*s13 -
              51*s12^2*s13^2)*s23^3 + (513*s12^3 - 25*s12^2*s13 +
              80*s12*s13^2)*s23^4 + (-54*s12^2 + 80*s12*s13)*s23^5)) +
        p3q^2*(p2q^3*((162*s12^6 - 162*s12^5*s13 - 1476*s12^4*s13^2 +
              207*s12^3*s13^3 - 369*s12^2*s13^4 + 270*s12*s13^5)*s23 +
            (566*s12^5 - 890*s12^4*s13 - 301*s12^3*s13^2 - 359*s12^2*s13^3 +
              217*s12*s13^4 + 90*s13^5)*s23^2 + (566*s12^4 - 288*s12^3*s13 +
              363*s12^2*s13^2 - 113*s12*s13^3 + 100*s13^4)*s23^3 +
            (162*s12^3 + 40*s12^2*s13 + 20*s12*s13^2 + 10*s13^3)*s23^4) +
          p1q*p2q^2*(81*s12^6*s13 + 81*s12^5*s13^2 - 81*s12^4*s13^3 -
            81*s12^3*s13^4 + (810*s12^6 + 1521*s12^5*s13 - 1404*s12^4*s13^2 -
              144*s12^3*s13^3 - 693*s12^2*s13^4)*s23 +
            (2456*s12^5 + 924*s12^4*s13 + 50*s12^3*s13^2 + 206*s12^2*s13^3 -
              673*s12*s13^4)*s23^2 + (2188*s12^4 - 423*s12^3*s13 +
              1485*s12^2*s13^2 - 607*s12*s13^3 - 260*s13^4)*s23^3 +
            (488*s12^3 - 347*s12^2*s13 + 266*s12*s13^2 - 280*s13^3)*s23^4 +
            (-54*s12^2 - 40*s12*s13 - 20*s13^2)*s23^5) +
          p1q^3*((351*s12^6 + 702*s12^5*s13 + 351*s12^4*s13^2)*s23 +
            (981*s12^5 + 1583*s12^4*s13 + 602*s12^3*s13^2)*s23^2 +
            (837*s12^4 + 497*s12^3*s13 - 312*s12^2*s13^2)*s23^3 +
            (135*s12^3 - 547*s12^2*s13 - 163*s12*s13^2)*s23^4 +
            (-72*s12^2 - 243*s12*s13 - 80*s13^2)*s23^5 - 80*s13*s23^6) +
          p1q^2*p2q*(-27*s12^7 + 81*s12^5*s13^2 + 54*s12^4*s13^3 +
            (918*s12^6 + 2061*s12^5*s13 + 540*s12^4*s13^2 + 63*s12^3*s13^3)*
             s23 + (2790*s12^5 + 3074*s12^4*s13 + 992*s12^3*s13^2 +
              989*s12^2*s13^3)*s23^2 + (2512*s12^4 + 128*s12^3*s13 +
              676*s12^2*s13^2 + 566*s12*s13^3)*s23^3 +
            (541*s12^3 - 1168*s12^2*s13 + 613*s12*s13^2 + 250*s13^3)*s23^4 +
            (-126*s12^2 - 193*s12*s13 + 260*s13^2)*s23^5 + 10*s13*s23^6)) +
        p3q*(p2q^4*((-162*s12^5*s13 - 324*s12^4*s13^2 + 171*s12^3*s13^3 -
              180*s12^2*s13^4 + 63*s12*s13^5 - 90*s13^6)*s23 +
            (-394*s12^4*s13 + 112*s12^3*s13^2 - 303*s12^2*s13^3 +
              133*s12*s13^4 - 100*s13^5)*s23^2 + (-52*s12^3*s13 +
              40*s12^2*s13^2 + 20*s12*s13^3)*s23^3 +
            (20*s12^2*s13 + 20*s12*s13^2 + 10*s13^3)*s23^4) +
          p1q*p2q^3*(-81*s12^5*s13^2 - 135*s12^4*s13^3 - 27*s12^3*s13^4 +
            27*s12^2*s13^5 + (162*s12^6 - 1008*s12^4*s13^2 - 153*s12^3*s13^
                3 - 396*s12^2*s13^4 + 243*s12*s13^5)*s23 +
            (468*s12^5 - 538*s12^4*s13 + 228*s12^3*s13^2 - 382*s12^2*s13^3 +
              134*s12*s13^4 + 350*s13^5)*s23^2 + (352*s12^4 - 220*s12^3*s13 +
              829*s12^2*s13^2 - 349*s12*s13^3 + 390*s13^4)*s23^3 +
            (28*s12^3 + 58*s12^2*s13 + 30*s12*s13^2 + 20*s13^3)*s23^4 +
            (-18*s12^2 - 20*s12*s13 - 20*s13^2)*s23^5) +
          p1q^4*((-36*s12^5 - 72*s12^4*s13 - 36*s12^3*s13^2)*s23^2 +
            (-108*s12^4 - 467*s12^3*s13 - 359*s12^2*s13^2)*s23^3 +
            (-108*s12^3 - 638*s12^2*s13 - 243*s12*s13^2)*s23^4 +
            (-36*s12^2 - 323*s12*s13 - 80*s13^2)*s23^5 - 80*s13*s23^6) +
          p1q^2*p2q^2*(54*s12^6*s13 + 81*s12^5*s13^2 - 27*s12^3*s13^4 +
            (324*s12^6 + 486*s12^5*s13 - 549*s12^4*s13^2 - 432*s12^3*s13^3 -
              387*s12^2*s13^4)*s23 + (882*s12^5 - 100*s12^4*s13 +
              373*s12^3*s13^2 + 241*s12^2*s13^3 - 729*s12*s13^4)*s23^2 +
            (622*s12^4 - 816*s12^3*s13 + 1532*s12^2*s13^2 - 750*s12*s13^3 -
              510*s13^4)*s23^3 + (-26*s12^3 - 424*s12^2*s13 + 379*s12*s13^2 -
              560*s13^3)*s23^4 + (-90*s12^2 - 50*s12*s13 - 40*s13^2)*s23^5 +
            10*s13*s23^6) + p1q^3*p2q*((351*s12^6 + 729*s12^5*s13 +
              405*s12^4*s13^2 + 27*s12^3*s13^3)*s23 +
            (945*s12^5 + 962*s12^4*s13 + 736*s12^3*s13^2 + 719*s12^2*s13^3)*
             s23^2 + (729*s12^4 - 546*s12^3*s13 + 777*s12^2*s13^2 +
              729*s12*s13^3)*s23^3 + (27*s12^3 - 962*s12^2*s13 +
              876*s12*s13^2 + 330*s13^3)*s23^4 + (-108*s12^2 - 163*s12*s13 +
              350*s13^2)*s23^5 + 20*s13*s23^6)))*
       PolyLog(2, s13/(s12 + s13 + s23)))/
      (p2q*p3q^4*(27*s12^4*s13*s23^2 + 27*s12^3*s13*s23^3) +
       p3q*(-27*p2q^4*s12^3*s13^2*s23^2 + p1q^2*p2q^2*(27*s12^4*s13*s23^2 +
           27*s12^3*s13*s23^3) + p1q*p2q^3*((27*s12^4*s13 - 27*s12^3*s13^2)*
            s23^2 + 27*s12^3*s13*s23^3)) +
       p3q^3*(p1q*p2q*(54*s12^4*s13*s23^2 + 54*s12^3*s13*s23^3) +
         p2q^2*((54*s12^4*s13 - 27*s12^3*s13^2)*s23^2 + 54*s12^3*s13*
            s23^3)) + p3q^2*(p1q^2*p2q*(27*s12^4*s13*s23^2 +
           27*s12^3*s13*s23^3) + p2q^3*((27*s12^4*s13 - 54*s12^3*s13^2)*
            s23^2 + 27*s12^3*s13*s23^3) + p1q*p2q^2*
          ((81*s12^4*s13 - 27*s12^3*s13^2)*s23^2 + 81*s12^3*s13*s23^3))) +
     ((p3q^5*((162*s12^6*s13^2 + 576*s12^5*s13^3 + 666*s12^4*s13^4 +
            252*s12^3*s13^5)*s23 + (10*s12^7 + 40*s12^6*s13 +
            464*s12^5*s13^2 + 848*s12^4*s13^3 + 414*s12^3*s13^4)*s23^2 +
          (10*s12^6 + 30*s12^5*s13 + 272*s12^4*s13^2 + 162*s12^3*s13^3)*
           s23^3) + p2q^5*((252*s12^5*s13^3 + 666*s12^4*s13^4 +
            576*s12^3*s13^5 + 162*s12^2*s13^6)*s23 +
          (414*s12^4*s13^3 + 848*s12^3*s13^4 + 464*s12^2*s13^5 +
            40*s12*s13^6 + 10*s13^7)*s23^2 + (162*s12^3*s13^3 +
            272*s12^2*s13^4 + 30*s12*s13^5 + 10*s13^6)*s23^3) +
        p1q*p2q^4*((504*s12^5*s13^3 + 1332*s12^4*s13^4 + 1152*s12^3*s13^5 +
            324*s12^2*s13^6)*s23 + (-90*s12^5*s13^2 + 396*s12^4*s13^3 +
            1272*s12^3*s13^4 + 826*s12^2*s13^5 + 50*s12*s13^6 + 10*s13^7)*
           s23^2 + (-90*s12^4*s13^2 - 290*s12^3*s13^3 + 130*s12^2*s13^4 -
            50*s12*s13^5 - 20*s13^6)*s23^3 + (-272*s12^2*s13^3 -
            60*s12*s13^4 - 30*s13^5)*s23^4) + p1q^2*p2q^3*
         ((504*s12^5*s13^3 + 1332*s12^4*s13^4 + 1152*s12^3*s13^5 +
            324*s12^2*s13^6)*s23 + (-17*s12^5*s13^2 + 290*s12^4*s13^3 +
            1001*s12^3*s13^4 + 704*s12^2*s13^5 + 10*s12*s13^6)*s23^2 +
          (80*s12^5*s13 + 233*s12^4*s13^2 - 651*s12^3*s13^3 -
            334*s12^2*s13^4 - 100*s12*s13^5 - 30*s13^6)*s23^3 +
          (80*s12^4*s13 + 170*s12^3*s13^2 - 594*s12^2*s13^3 - 20*s12*s13^4)*
           s23^4 + (30*s12*s13^3 + 30*s13^4)*s23^5) +
        p1q^3*p2q^2*((-180*s12^5*s13^2 - 864*s12^4*s13^3 - 828*s12^3*s13^4 -
            144*s12^2*s13^5)*s23^2 + (-163*s12^5*s13 - 489*s12^4*s13^2 -
            1524*s12^3*s13^3 - 858*s12^2*s13^4 - 20*s12*s13^5)*s23^3 +
          (-80*s12^5 - 403*s12^4*s13 - 306*s12^3*s13^2 - 654*s12^2*s13^3 +
            50*s12*s13^4 + 30*s13^5)*s23^4 + (-80*s12^4 - 160*s12^3*s13 +
            30*s12*s13^3 + 20*s13^4)*s23^5 - 10*s13^3*s23^6) +
        p1q^4*p2q*((180*s12^4*s13^2 - 180*s12^2*s13^4)*s23^3 +
          (163*s12^4*s13 + 343*s12^3*s13^2 - 170*s12^2*s13^3 + 10*s12*s13^4)*
           s23^4 + (80*s12^4 + 243*s12^3*s13 - 10*s13^4)*s23^5 +
          (80*s12^3 - 10*s13^3)*s23^6) +
        p3q^4*(p2q*(720*s12^6*s13^3 + 720*s12^5*s13^4 +
            (90*s12^8 + 27*s12^7*s13 + 1125*s12^6*s13^2 + 3096*s12^5*s13^3 +
              3357*s12^4*s13^4 + 1251*s12^3*s13^5 + 522*s12^2*s13^6)*s23 +
            (110*s12^7 + 17*s12^6*s13 + 2026*s12^5*s13^2 + 3590*s12^4*s13^3 +
              2325*s12^3*s13^4 + 494*s12^2*s13^5)*s23^2 +
            (20*s12^6 + 60*s12^5*s13 + 978*s12^4*s13^2 + 930*s12^3*s13^3 +
              172*s12^2*s13^4)*s23^3) +
          p1q*((324*s12^6*s13^2 + 1152*s12^5*s13^3 + 1332*s12^4*s13^4 +
              504*s12^3*s13^5)*s23 + (10*s12^7 + 50*s12^6*s13 +
              826*s12^5*s13^2 + 1272*s12^4*s13^3 + 396*s12^3*s13^4 -
              90*s12^2*s13^5)*s23^2 + (-20*s12^6 - 50*s12^5*s13 +
              130*s12^4*s13^2 - 290*s12^3*s13^3 - 90*s12^2*s13^4)*s23^3 +
            (-30*s12^5 - 60*s12^4*s13 - 272*s12^3*s13^2)*s23^4)) +
        p3q^3*(p2q^2*(720*s12^6*s13^3 - 720*s12^5*s13^4 - 1440*s12^4*s13^5 +
            (90*s12^8 - 153*s12^7*s13 + 1935*s12^6*s13^2 + 3510*s12^5*s13^3 +
              3807*s12^4*s13^4 + 1989*s12^3*s13^5 + 1494*s12^2*s13^6 -
              180*s12*s13^7)*s23 + (100*s12^7 - 203*s12^6*s13 +
              2830*s12^5*s13^2 + 5116*s12^4*s13^3 + 4285*s12^3*s13^4 +
              1762*s12^2*s13^5 - 180*s12*s13^6)*s23^2 +
            (10*s12^6 + 30*s12^5*s13 + 1222*s12^4*s13^2 + 1800*s12^3*s13^3 +
              688*s12^2*s13^4)*s23^3) + p1q*p2q*(720*s12^6*s13^3 +
            720*s12^5*s13^4 + (-153*s12^7*s13 + 1899*s12^6*s13^2 +
              3420*s12^5*s13^3 + 4068*s12^4*s13^4 + 1557*s12^3*s13^5 +
              1017*s12^2*s13^6)*s23 + (-340*s12^7 - 234*s12^6*s13 +
              2677*s12^5*s13^2 + 3136*s12^4*s13^3 + 2104*s12^3*s13^4 +
              539*s12^2*s13^5 + 80*s12*s13^6)*s23^2 +
            (-390*s12^6 + 89*s12^5*s13 - 10*s12^4*s13^2 - 114*s12^3*s13^3 -
              370*s12^2*s13^4 + 60*s12*s13^5)*s23^3 +
            (-50*s12^5 - 120*s12^4*s13 - 656*s12^3*s13^2 - 192*s12^2*s13^3 -
              20*s12*s13^4)*s23^4) + p1q^2*
           ((324*s12^6*s13^2 + 1152*s12^5*s13^3 + 1332*s12^4*s13^4 +
              504*s12^3*s13^5)*s23 + (10*s12^6*s13 + 704*s12^5*s13^2 +
              1001*s12^4*s13^3 + 290*s12^3*s13^4 - 17*s12^2*s13^5)*s23^2 +
            (-30*s12^6 - 100*s12^5*s13 - 334*s12^4*s13^2 - 651*s12^3*s13^3 +
              233*s12^2*s13^4 + 80*s12*s13^5)*s23^3 +
            (-20*s12^4*s13 - 594*s12^3*s13^2 + 170*s12^2*s13^3 +
              80*s12*s13^4)*s23^4 + (30*s12^4 + 30*s12^3*s13)*s23^5)) +
        p3q^2*(p2q^3*(-1440*s12^5*s13^4 - 720*s12^4*s13^5 + 720*s12^3*s13^6 +
            (-180*s12^7*s13 + 1494*s12^6*s13^2 + 1989*s12^5*s13^3 +
              3807*s12^4*s13^4 + 3510*s12^3*s13^5 + 1935*s12^2*s13^6 -
              153*s12*s13^7 + 90*s13^8)*s23 + (-180*s12^6*s13 +
              1762*s12^5*s13^2 + 4285*s12^4*s13^3 + 5116*s12^3*s13^4 +
              2830*s12^2*s13^5 - 203*s12*s13^6 + 100*s13^7)*s23^2 +
            (688*s12^4*s13^2 + 1800*s12^3*s13^3 + 1222*s12^2*s13^4 +
              30*s12*s13^5 + 10*s13^6)*s23^3) + p1q*p2q^2*
           (-1440*s12^5*s13^4 - 1440*s12^4*s13^5 +
            (-153*s12^7*s13 + 2592*s12^6*s13^2 + 1881*s12^5*s13^3 +
              2592*s12^4*s13^4 + 1881*s12^3*s13^5 + 2592*s12^2*s13^6 -
              153*s12*s13^7)*s23 + (-260*s12^7 - 87*s12^6*s13 +
              2624*s12^5*s13^2 + 2609*s12^4*s13^3 + 2609*s12^3*s13^4 +
              2624*s12^2*s13^5 - 87*s12*s13^6 - 260*s13^7)*s23^2 +
            (-280*s12^6 + 226*s12^5*s13 - 303*s12^4*s13^2 - 8*s12^3*s13^3 -
              303*s12^2*s13^4 + 226*s12*s13^5 - 280*s13^6)*s23^3 +
            (-20*s12^5 - 80*s12^4*s13 - 576*s12^3*s13^2 - 576*s12^2*s13^3 -
              80*s12*s13^4 - 20*s13^5)*s23^4) + p1q^2*p2q*
           ((1188*s12^6*s13^2 + 1368*s12^5*s13^3 + 2196*s12^4*s13^4 +
              1440*s12^3*s13^5 + 864*s12^2*s13^6)*s23 +
            (479*s12^6*s13 + 1157*s12^5*s13^2 + 1500*s12^4*s13^3 +
              1869*s12^3*s13^4 + 643*s12^2*s13^5 + 316*s12*s13^6)*s23^2 +
            (490*s12^6 + 650*s12^5*s13 - 1377*s12^4*s13^2 + 101*s12^3*s13^3 -
              567*s12^2*s13^4 + 623*s12*s13^5 + 250*s13^6)*s23^3 +
            (530*s12^5 - 219*s12^4*s13 - 688*s12^3*s13^2 - 257*s12^2*s13^3 +
              97*s12*s13^4 + 260*s13^5)*s23^4 + (40*s12^4 + 60*s12^3*s13 +
              30*s12*s13^3 + 10*s13^4)*s23^5) +
          p1q^3*((-144*s12^5*s13^2 - 828*s12^4*s13^3 - 864*s12^3*s13^4 -
              180*s12^2*s13^5)*s23^2 + (-20*s12^5*s13 - 858*s12^4*s13^2 -
              1524*s12^3*s13^3 - 489*s12^2*s13^4 - 163*s12*s13^5)*s23^3 +
            (30*s12^5 + 50*s12^4*s13 - 654*s12^3*s13^2 - 306*s12^2*s13^3 -
              403*s12*s13^4 - 80*s13^5)*s23^4 + (20*s12^4 + 30*s12^3*s13 -
              160*s12*s13^3 - 80*s13^4)*s23^5 - 10*s12^3*s23^6)) +
        p3q*(p2q^4*(720*s12^4*s13^5 + 720*s12^3*s13^6 +
            (522*s12^6*s13^2 + 1251*s12^5*s13^3 + 3357*s12^4*s13^4 +
              3096*s12^3*s13^5 + 1125*s12^2*s13^6 + 27*s12*s13^7 + 90*s13^8)*
             s23 + (494*s12^5*s13^2 + 2325*s12^4*s13^3 + 3590*s12^3*s13^4 +
              2026*s12^2*s13^5 + 17*s12*s13^6 + 110*s13^7)*s23^2 +
            (172*s12^4*s13^2 + 930*s12^3*s13^3 + 978*s12^2*s13^4 +
              60*s12*s13^5 + 20*s13^6)*s23^3) + p1q*p2q^3*(720*s12^4*s13^5 +
            720*s12^3*s13^6 + (1017*s12^6*s13^2 + 1557*s12^5*s13^3 +
              4068*s12^4*s13^4 + 3420*s12^3*s13^5 + 1899*s12^2*s13^6 -
              153*s12*s13^7)*s23 + (80*s12^6*s13 + 539*s12^5*s13^2 +
              2104*s12^4*s13^3 + 3136*s12^3*s13^4 + 2677*s12^2*s13^5 -
              234*s12*s13^6 - 340*s13^7)*s23^2 +
            (60*s12^5*s13 - 370*s12^4*s13^2 - 114*s12^3*s13^3 -
              10*s12^2*s13^4 + 89*s12*s13^5 - 390*s13^6)*s23^3 +
            (-20*s12^4*s13 - 192*s12^3*s13^2 - 656*s12^2*s13^3 -
              120*s12*s13^4 - 50*s13^5)*s23^4) + p1q^2*p2q^2*
           ((864*s12^6*s13^2 + 1440*s12^5*s13^3 + 2196*s12^4*s13^4 +
              1368*s12^3*s13^5 + 1188*s12^2*s13^6)*s23 +
            (316*s12^6*s13 + 643*s12^5*s13^2 + 1869*s12^4*s13^3 +
              1500*s12^3*s13^4 + 1157*s12^2*s13^5 + 479*s12*s13^6)*s23^2 +
            (250*s12^6 + 623*s12^5*s13 - 567*s12^4*s13^2 + 101*s12^3*s13^3 -
              1377*s12^2*s13^4 + 650*s12*s13^5 + 490*s13^6)*s23^3 +
            (260*s12^5 + 97*s12^4*s13 - 257*s12^3*s13^2 - 688*s12^2*s13^3 -
              219*s12*s13^4 + 530*s13^5)*s23^4 + (10*s12^4 + 30*s12^3*s13 +
              60*s12*s13^3 + 40*s13^4)*s23^5) + p1q^3*p2q*
           ((-684*s12^5*s13^2 + 108*s12^4*s13^3 + 108*s12^3*s13^4 -
              684*s12^2*s13^5)*s23^2 + (-489*s12^5*s13 - 1347*s12^4*s13^2 +
              444*s12^3*s13^3 - 1347*s12^2*s13^4 - 489*s12*s13^5)*s23^3 +
            (-320*s12^5 - 686*s12^4*s13 - 51*s12^3*s13^2 - 51*s12^2*s13^3 -
              686*s12*s13^4 - 320*s13^5)*s23^4 +
            (-330*s12^4 + 113*s12^3*s13 + 113*s12*s13^3 - 330*s13^4)*s23^5 +
            (-10*s12^3 - 10*s13^3)*s23^6) +
          p1q^4*((-180*s12^4*s13^2 + 180*s12^2*s13^4)*s23^3 +
            (10*s12^4*s13 - 170*s12^3*s13^2 + 343*s12^2*s13^3 +
              163*s12*s13^4)*s23^4 + (-10*s12^4 + 243*s12*s13^3 + 80*s13^4)*
             s23^5 + (-10*s12^3 + 80*s13^3)*s23^6)))*
       PolyLog(2, s23/(s12 + s13 + s23)))/
      (p2q*p3q^4*(27*s12^4*s13^3 + 27*s12^3*s13^4)*s23^2 +
       p3q^2*(p2q^3*(81*s12^4*s13^3 + 81*s12^3*s13^4)*s23^2 -
         27*p1q^2*p2q*s12^3*s13^3*s23^3 + p1q*p2q^2*
          ((54*s12^4*s13^3 + 54*s12^3*s13^4)*s23^2 - 54*s12^3*s13^3*s23^3)) +
       p3q^3*(p2q^2*(81*s12^4*s13^3 + 81*s12^3*s13^4)*s23^2 +
         p1q*p2q*((27*s12^4*s13^3 + 27*s12^3*s13^4)*s23^2 -
           27*s12^3*s13^3*s23^3)) +
       p3q*(p2q^4*(27*s12^4*s13^3 + 27*s12^3*s13^4)*s23^2 -
         27*p1q^2*p2q^2*s12^3*s13^3*s23^3 + p1q*p2q^3*
          ((27*s12^4*s13^3 + 27*s12^3*s13^4)*s23^2 - 27*s12^3*s13^3*
            s23^3))) + ((p3q^3*(10*s12^3 + 20*s12^2*s13 + 10*s12*s13^2 +
          (20*s12^2 + 20*s12*s13)*s23 + 10*s12*s23^2) +
        p2q^3*(8*s12^2*s13 + 16*s12*s13^2 + 8*s13^3 + (16*s12*s13 + 16*s13^2)*
           s23 + 8*s13*s23^2) + p1q*p2q^2*(16*s12^2*s13 + 32*s12*s13^2 +
          16*s13^3 + (8*s12^2 + 48*s12*s13 + 40*s13^2)*s23 +
          (16*s12 + 32*s13)*s23^2 + 8*s23^3) +
        p1q^3*((16*s12^2 + 32*s12*s13 + 16*s13^2)*s23 + (32*s12 + 32*s13)*
           s23^2 + 16*s23^3) + p1q^2*p2q*(16*s12^2*s13 + 32*s12*s13^2 +
          16*s13^3 + (16*s12^2 + 64*s12*s13 + 48*s13^2)*s23 +
          (32*s12 + 48*s13)*s23^2 + 16*s23^3) +
        p3q^2*(p2q*(20*s12^3 + 48*s12^2*s13 + 36*s12*s13^2 + 8*s13^3 +
            (40*s12^2 + 56*s12*s13 + 16*s13^2)*s23 + (20*s12 + 8*s13)*
             s23^2) + p1q*(20*s12^3 + 40*s12^2*s13 + 20*s12*s13^2 +
            (48*s12^2 + 56*s12*s13 + 8*s13^2)*s23 + (36*s12 + 16*s13)*s23^2 +
            8*s23^3)) + p3q*(p2q^2*(10*s12^3 + 36*s12^2*s13 + 42*s12*s13^2 +
            16*s13^3 + (20*s12^2 + 52*s12*s13 + 32*s13^2)*s23 +
            (10*s12 + 16*s13)*s23^2) + p1q^2*(20*s12^3 + 40*s12^2*s13 +
            20*s12*s13^2 + (56*s12^2 + 72*s12*s13 + 16*s13^2)*s23 +
            (52*s12 + 32*s13)*s23^2 + 16*s23^3) +
          p1q*p2q*(20*s12^3 + 56*s12^2*s13 + 52*s12*s13^2 + 16*s13^3 +
            (56*s12^2 + 104*s12*s13 + 48*s13^2)*s23 + (52*s12 + 48*s13)*
             s23^2 + 16*s23^3)))*PolyLog(2,
        -((p3q*s12)/(-((p1q + p2q + p3q)*s12) + (p1q + p2q)*
            (s12 + s13 + s23)))))/(27*p2q*p3q^2*s12*s13*s23 +
       p3q*(27*p1q*p2q*s12*s13*s23 + 27*p2q^2*s12*s13*s23)) +
     ((p3q^3*(-10*s12^3 - 20*s12^2*s13 - 10*s12*s13^2 +
          (-20*s12^2 - 20*s12*s13)*s23 - 10*s12*s23^2) +
        p2q^3*(-8*s12^2*s13 - 16*s12*s13^2 - 8*s13^3 +
          (-16*s12*s13 - 16*s13^2)*s23 - 8*s13*s23^2) +
        p1q^2*p2q*(-16*s12^2*s13 - 32*s12*s13^2 - 16*s13^3 +
          (-16*s12^2 - 64*s12*s13 - 48*s13^2)*s23 + (-32*s12 - 48*s13)*
           s23^2 - 16*s23^3) + p1q^3*((-16*s12^2 - 32*s12*s13 - 16*s13^2)*
           s23 + (-32*s12 - 32*s13)*s23^2 - 16*s23^3) +
        p1q*p2q^2*(-16*s12^2*s13 - 32*s12*s13^2 - 16*s13^3 +
          (-8*s12^2 - 48*s12*s13 - 40*s13^2)*s23 + (-16*s12 - 32*s13)*s23^2 -
          8*s23^3) + p3q*(p2q^2*(-10*s12^3 - 36*s12^2*s13 - 42*s12*s13^2 -
            16*s13^3 + (-20*s12^2 - 52*s12*s13 - 32*s13^2)*s23 +
            (-10*s12 - 16*s13)*s23^2) + p1q*p2q*(-20*s12^3 - 56*s12^2*s13 -
            52*s12*s13^2 - 16*s13^3 + (-56*s12^2 - 104*s12*s13 - 48*s13^2)*
             s23 + (-52*s12 - 48*s13)*s23^2 - 16*s23^3) +
          p1q^2*(-20*s12^3 - 40*s12^2*s13 - 20*s12*s13^2 +
            (-56*s12^2 - 72*s12*s13 - 16*s13^2)*s23 + (-52*s12 - 32*s13)*
             s23^2 - 16*s23^3)) + p3q^2*(p2q*(-20*s12^3 - 48*s12^2*s13 -
            36*s12*s13^2 - 8*s13^3 + (-40*s12^2 - 56*s12*s13 - 16*s13^2)*
             s23 + (-20*s12 - 8*s13)*s23^2) + p1q*(-20*s12^3 - 40*s12^2*s13 -
            20*s12*s13^2 + (-48*s12^2 - 56*s12*s13 - 8*s13^2)*s23 +
            (-36*s12 - 16*s13)*s23^2 - 8*s23^3)))*
       PolyLog(2, -((p3q*(s12 + s13 + s23))/(-((p1q + p2q + p3q)*s12) +
           (p1q + p2q)*(s12 + s13 + s23)))))/(27*p2q*p3q^2*s12*s13*s23 +
       p3q*(27*p1q*p2q*s12*s13*s23 + 27*p2q^2*s12*s13*s23)) +
     ((p3q^3*(8*s12^3 + 16*s12^2*s13 + 8*s12*s13^2 + (16*s12^2 + 16*s12*s13)*
           s23 + 8*s12*s23^2) + p2q^3*(10*s12^2*s13 + 20*s12*s13^2 +
          10*s13^3 + (20*s12*s13 + 20*s13^2)*s23 + 10*s13*s23^2) +
        p1q*p2q^2*(20*s12^2*s13 + 40*s12*s13^2 + 20*s13^3 +
          (8*s12^2 + 56*s12*s13 + 48*s13^2)*s23 + (16*s12 + 36*s13)*s23^2 +
          8*s23^3) + p1q^3*((16*s12^2 + 32*s12*s13 + 16*s13^2)*s23 +
          (32*s12 + 32*s13)*s23^2 + 16*s23^3) +
        p1q^2*p2q*(20*s12^2*s13 + 40*s12*s13^2 + 20*s13^3 +
          (16*s12^2 + 72*s12*s13 + 56*s13^2)*s23 + (32*s12 + 52*s13)*s23^2 +
          16*s23^3) + p3q^2*(p2q*(16*s12^3 + 42*s12^2*s13 + 36*s12*s13^2 +
            10*s13^3 + (32*s12^2 + 52*s12*s13 + 20*s13^2)*s23 +
            (16*s12 + 10*s13)*s23^2) + p1q*(16*s12^3 + 32*s12^2*s13 +
            16*s12*s13^2 + (40*s12^2 + 48*s12*s13 + 8*s13^2)*s23 +
            (32*s12 + 16*s13)*s23^2 + 8*s23^3)) +
        p3q*(p2q^2*(8*s12^3 + 36*s12^2*s13 + 48*s12*s13^2 + 20*s13^3 +
            (16*s12^2 + 56*s12*s13 + 40*s13^2)*s23 + (8*s12 + 20*s13)*
             s23^2) + p1q^2*(16*s12^3 + 32*s12^2*s13 + 16*s12*s13^2 +
            (48*s12^2 + 64*s12*s13 + 16*s13^2)*s23 + (48*s12 + 32*s13)*
             s23^2 + 16*s23^3) + p1q*p2q*(16*s12^3 + 52*s12^2*s13 +
            56*s12*s13^2 + 20*s13^3 + (48*s12^2 + 104*s12*s13 + 56*s13^2)*
             s23 + (48*s12 + 52*s13)*s23^2 + 16*s23^3)))*
       PolyLog(2, -((p2q*s13)/(-((p1q + p2q + p3q)*s13) +
           (p1q + p3q)*(s12 + s13 + s23)))))/(27*p2q*p3q^2*s12*s13*s23 +
       p3q*(27*p1q*p2q*s12*s13*s23 + 27*p2q^2*s12*s13*s23)) +
     ((p3q^3*(-8*s12^3 - 16*s12^2*s13 - 8*s12*s13^2 +
          (-16*s12^2 - 16*s12*s13)*s23 - 8*s12*s23^2) +
        p2q^3*(-10*s12^2*s13 - 20*s12*s13^2 - 10*s13^3 +
          (-20*s12*s13 - 20*s13^2)*s23 - 10*s13*s23^2) +
        p1q^2*p2q*(-20*s12^2*s13 - 40*s12*s13^2 - 20*s13^3 +
          (-16*s12^2 - 72*s12*s13 - 56*s13^2)*s23 + (-32*s12 - 52*s13)*
           s23^2 - 16*s23^3) + p1q^3*((-16*s12^2 - 32*s12*s13 - 16*s13^2)*
           s23 + (-32*s12 - 32*s13)*s23^2 - 16*s23^3) +
        p1q*p2q^2*(-20*s12^2*s13 - 40*s12*s13^2 - 20*s13^3 +
          (-8*s12^2 - 56*s12*s13 - 48*s13^2)*s23 + (-16*s12 - 36*s13)*s23^2 -
          8*s23^3) + p3q*(p2q^2*(-8*s12^3 - 36*s12^2*s13 - 48*s12*s13^2 -
            20*s13^3 + (-16*s12^2 - 56*s12*s13 - 40*s13^2)*s23 +
            (-8*s12 - 20*s13)*s23^2) + p1q*p2q*(-16*s12^3 - 52*s12^2*s13 -
            56*s12*s13^2 - 20*s13^3 + (-48*s12^2 - 104*s12*s13 - 56*s13^2)*
             s23 + (-48*s12 - 52*s13)*s23^2 - 16*s23^3) +
          p1q^2*(-16*s12^3 - 32*s12^2*s13 - 16*s12*s13^2 +
            (-48*s12^2 - 64*s12*s13 - 16*s13^2)*s23 + (-48*s12 - 32*s13)*
             s23^2 - 16*s23^3)) + p3q^2*(p2q*(-16*s12^3 - 42*s12^2*s13 -
            36*s12*s13^2 - 10*s13^3 + (-32*s12^2 - 52*s12*s13 - 20*s13^2)*
             s23 + (-16*s12 - 10*s13)*s23^2) +
          p1q*(-16*s12^3 - 32*s12^2*s13 - 16*s12*s13^2 +
            (-40*s12^2 - 48*s12*s13 - 8*s13^2)*s23 + (-32*s12 - 16*s13)*
             s23^2 - 8*s23^3)))*PolyLog(2, -((p2q*(s12 + s13 + s23))/
          (-((p1q + p2q + p3q)*s13) + (p1q + p3q)*(s12 + s13 + s23)))))/
      (27*p2q*p3q^2*s12*s13*s23 + p3q*(27*p1q*p2q*s12*s13*s23 +
         27*p2q^2*s12*s13*s23)) +
     ((p3q^3*(-6*s12^3 - 12*s12^2*s13 - 6*s12*s13^2 +
          (-12*s12^2 - 12*s12*s13)*s23 - 6*s12*s23^2) +
        p1q^2*p2q*(-12*s12^2*s13 - 24*s12*s13^2 - 12*s13^3 +
          (-24*s12*s13 - 24*s13^2)*s23 - 12*s13*s23^2) +
        p1q*p2q^2*(-12*s12^2*s13 - 24*s12*s13^2 - 12*s13^3 +
          (-24*s12*s13 - 24*s13^2)*s23 - 12*s13*s23^2) +
        p2q^3*(-6*s12^2*s13 - 12*s12*s13^2 - 6*s13^3 +
          (-12*s12*s13 - 12*s13^2)*s23 - 6*s13*s23^2) +
        p3q*(p1q^2*(-12*s12^3 - 24*s12^2*s13 - 12*s12*s13^2 +
            (-24*s12^2 - 24*s12*s13)*s23 - 12*s12*s23^2) +
          p1q*p2q*(-12*s12^3 - 36*s12^2*s13 - 36*s12*s13^2 - 12*s13^3 +
            (-24*s12^2 - 48*s12*s13 - 24*s13^2)*s23 + (-12*s12 - 12*s13)*
             s23^2) + p2q^2*(-6*s12^3 - 24*s12^2*s13 - 30*s12*s13^2 -
            12*s13^3 + (-12*s12^2 - 36*s12*s13 - 24*s13^2)*s23 +
            (-6*s12 - 12*s13)*s23^2)) +
        p3q^2*(p1q*(-12*s12^3 - 24*s12^2*s13 - 12*s12*s13^2 +
            (-24*s12^2 - 24*s12*s13)*s23 - 12*s12*s23^2) +
          p2q*(-12*s12^3 - 30*s12^2*s13 - 24*s12*s13^2 - 6*s13^3 +
            (-24*s12^2 - 36*s12*s13 - 12*s13^2)*s23 + (-12*s12 - 6*s13)*
             s23^2)))*PolyLog(2, -((p1q*s23)/(-((p1q + p2q + p3q)*s23) +
           (p2q + p3q)*(s12 + s13 + s23)))))/(p2q*p3q^2*s12*s13*s23 +
       p3q*(p1q*p2q*s12*s13*s23 + p2q^2*s12*s13*s23)) +
     ((p3q^3*(6*s12^3 + 12*s12^2*s13 + 6*s12*s13^2 + (12*s12^2 + 12*s12*s13)*
           s23 + 6*s12*s23^2) + p2q^3*(6*s12^2*s13 + 12*s12*s13^2 + 6*s13^3 +
          (12*s12*s13 + 12*s13^2)*s23 + 6*s13*s23^2) +
        p1q^2*p2q*(12*s12^2*s13 + 24*s12*s13^2 + 12*s13^3 +
          (24*s12*s13 + 24*s13^2)*s23 + 12*s13*s23^2) +
        p1q*p2q^2*(12*s12^2*s13 + 24*s12*s13^2 + 12*s13^3 +
          (24*s12*s13 + 24*s13^2)*s23 + 12*s13*s23^2) +
        p3q^2*(p1q*(12*s12^3 + 24*s12^2*s13 + 12*s12*s13^2 +
            (24*s12^2 + 24*s12*s13)*s23 + 12*s12*s23^2) +
          p2q*(12*s12^3 + 30*s12^2*s13 + 24*s12*s13^2 + 6*s13^3 +
            (24*s12^2 + 36*s12*s13 + 12*s13^2)*s23 + (12*s12 + 6*s13)*
             s23^2)) + p3q*(p1q^2*(12*s12^3 + 24*s12^2*s13 + 12*s12*s13^2 +
            (24*s12^2 + 24*s12*s13)*s23 + 12*s12*s23^2) +
          p2q^2*(6*s12^3 + 24*s12^2*s13 + 30*s12*s13^2 + 12*s13^3 +
            (12*s12^2 + 36*s12*s13 + 24*s13^2)*s23 + (6*s12 + 12*s13)*
             s23^2) + p1q*p2q*(12*s12^3 + 36*s12^2*s13 + 36*s12*s13^2 +
            12*s13^3 + (24*s12^2 + 48*s12*s13 + 24*s13^2)*s23 +
            (12*s12 + 12*s13)*s23^2)))*PolyLog(2,
        -((p1q*(s12 + s13 + s23))/(-((p1q + p2q + p3q)*s23) +
           (p2q + p3q)*(s12 + s13 + s23)))))/(p2q*p3q^2*s12*s13*s23 +
       p3q*(p1q*p2q*s12*s13*s23 + p2q^2*s12*s13*s23)));


l P1AvgExp = P1PolExp;
