l P0PolExp = (((-9*(p2q + p3q)^2*s23*(s12 + s13 + s23)*
         (p2q*s13*(3*s12 + s13 + 2*s23) + p3q*s12*(s12 + 3*s13 + 2*s23)) -
        9*p1q^2*(p2q + p3q)*s23*(s13*s23*(s13 + s23) + s12^2*(4*s13 + s23) +
          s12*(4*s13^2 + 6*s13*s23 + s23^2)) +
        p1q*(p3q^2*(9*s12^3*(4*s13 + s23) + 2*s12^2*s23*(18*s13 + 5*s23) +
            s23^2*(s13^2 + 11*s13*s23 + 2*s23^2) + s12*s23*
             (-9*s13^2 + 27*s13*s23 + 11*s23^2)) +
          p2q*p3q*(9*s12^3*s23 + s12^2*(-72*s13^2 - 45*s13*s23 + 11*s23^2) +
            s12*s23*(-45*s13^2 + 18*s13*s23 + 22*s23^2) +
            s23*(9*s13^3 + 11*s13^2*s23 + 22*s13*s23^2 + 4*s23^3)) +
          p2q^2*(s12^2*s23*(-9*s13 + s23) + s23*(9*s13^3 + 10*s13^2*s23 +
              11*s13*s23^2 + 2*s23^3) + s12*(36*s13^3 + 36*s13^2*s23 +
              27*s13*s23^2 + 11*s23^3))))*E0.E0conj)/
      (12*p1q*(p2q + p3q)^2*s12*s13*s23^2) +
     ((s12 + s13 + s23)*(-36*p2q^2*s13*(2*s12 + s23) +
        p1q*p3q*s23*(27*s12 - 9*s13 + 2*s23) + p1q*p2q*s23*
         (9*s12 + 9*s13 + 2*s23) - 18*p2q*p3q*(s13*s23 + s12*(4*s13 + s23)))*
       p1.E0conj*p2.E0)/(6*p1q*(p2q + p3q)*s12*s13*s23^2) -
     (2*(s12 + s13 + s23)*(9*p2q^2*s13*(2*s12 + s23) -
        p1q*p3q*s23*(9*s12 + s23) + 9*p3q^2*s12*(2*s13 + s23) -
        p1q*p2q*s23*(9*s13 + s23) + 9*p2q*p3q*(s13*s23 + s12*(4*s13 + s23)))*
       p2.E0*p2.E0conj)/(3*p1q*(p2q + p3q)*s12*s13*s23^2) +
     p1.E0*(((s12 + s13 + s23)*(-18*p2q^2*s13*(2*s12 + s23) +
          p1q*p2q*s23*(9*s12 + s23) + p1q*p3q*s23*(9*s12 + s23))*p1.E0conj)/
        (3*p1q*(p2q + p3q)*s12*s13*s23^2) +
       ((s12 + s13 + s23)*(-36*p2q^2*s13*(2*s12 + s23) +
          p1q*p3q*s23*(27*s12 - 9*s13 + 2*s23) + p1q*p2q*s23*
           (9*s12 + 9*s13 + 2*s23) - 18*p2q*p3q*(s13*s23 +
            s12*(4*s13 + s23)))*p2.E0conj)/(6*p1q*(p2q + p3q)*s12*s13*
         s23^2)) +
     (Ioperator*((2*(9*(p2q + p3q)^2*s23*(s12 + s13 + s23)*
            (p2q*s13*(3*s12 + s13 + 2*s23) + p3q*s12*(s12 + 3*s13 + 2*s23)) +
           9*p1q^2*(p2q + p3q)*s23*(s13*s23*(s13 + s23) +
             s12^2*(4*s13 + s23) + s12*(4*s13^2 + 6*s13*s23 + s23^2)) -
           p1q*(p3q^2*(9*s12^3*(4*s13 + s23) + 2*s12^2*s23*(18*s13 + 5*s23) +
               s23^2*(s13^2 + 11*s13*s23 + 2*s23^2) + s12*s23*(-9*s13^2 +
                 27*s13*s23 + 11*s23^2)) + p2q*p3q*(9*s12^3*s23 + s12^2*
                (-72*s13^2 - 45*s13*s23 + 11*s23^2) + s12*s23*(-45*s13^2 +
                 18*s13*s23 + 22*s23^2) + s23*(9*s13^3 + 11*s13^2*s23 +
                 22*s13*s23^2 + 4*s23^3)) + p2q^2*(s12^2*s23*(-9*s13 + s23) +
               s23*(9*s13^3 + 10*s13^2*s23 + 11*s13*s23^2 + 2*s23^3) + s12*
                (36*s13^3 + 36*s13^2*s23 + 27*s13*s23^2 + 11*s23^3))))*
          E0.E0conj)/(9*p1q*(p2q + p3q)^2*s12*s13*s23^2) +
        (4*(s12 + s13 + s23)*(p1q*p3q*(-27*s12 + 9*s13 - 2*s23)*s23 +
           36*p2q^2*s13*(2*s12 + s23) - p1q*p2q*s23*(9*s12 + 9*s13 + 2*s23) +
           18*p2q*p3q*(s13*s23 + s12*(4*s13 + s23)))*p1.E0conj*p2.E0)/
         (9*p1q*(p2q + p3q)*s12*s13*s23^2) +
        (16*(s12 + s13 + s23)*(9*p2q^2*s13*(2*s12 + s23) -
           p1q*p3q*s23*(9*s12 + s23) + 9*p3q^2*s12*(2*s13 + s23) -
           p1q*p2q*s23*(9*s13 + s23) + 9*p2q*p3q*(s13*s23 +
             s12*(4*s13 + s23)))*p2.E0*p2.E0conj)/(9*p1q*(p2q + p3q)*s12*
          s13*s23^2) + p1.E0*((-8*(s12 + s13 + s23)*
            (-18*p2q^2*s13*(2*s12 + s23) + p1q*p2q*s23*(9*s12 + s23) +
             p1q*p3q*s23*(9*s12 + s23))*p1.E0conj)/(9*p1q*(p2q + p3q)*s12*
            s13*s23^2) + (4*(s12 + s13 + s23)*(p1q*p3q*(-27*s12 + 9*s13 - 2*
                s23)*s23 + 36*p2q^2*s13*(2*s12 + s23) - p1q*p2q*s23*
              (9*s12 + 9*s13 + 2*s23) + 18*p2q*p3q*(s13*s23 + s12*
                (4*s13 + s23)))*p2.E0conj)/(9*p1q*(p2q + p3q)*s12*s13*
            s23^2))))/ep^2 + Ioperator*
      ((7*(-1 + (4*s12)/s13 + (4*s13)/s12)*E0.E0conj)/6 -
       (21*(s12 - s13)*(s12 + s13 + s23)*p1.E0conj*p2.E0)/
        (2*s12*s13*s23) - (7*(s12 + s13 + s23)*p1.E0*(18*s12*p1.E0conj +
          2*s23*p1.E0conj + 9*s12*p2.E0conj - 9*s13*p2.E0conj))/
        (6*s12*s13*s23) + nl*(((1 - (4*s12)/s13 - (4*s13)/s12)*E0.E0conj)/
          9 + ((s12 - s13)*(s12 + s13 + s23)*p1.E0conj*p2.E0)/
          (s12*s13*s23) + ((s12 + s13 + s23)*p1.E0*(18*s12*p1.E0conj +
            2*s23*p1.E0conj + 9*s12*p2.E0conj - 9*s13*p2.E0conj))/
          (9*s12*s13*s23)) + ((9*(s12^2 + s13^2)*E0.E0conj)/(4*s12*s13) -
         (9*(s12 - s13)*(s12 + s13 + s23)*p1.E0conj*p2.E0)/
          (2*s12*s13*s23) + (9*(s12 + s13 + s23)*p1.E0*
           (-2*s12*p1.E0conj - s12*p2.E0conj + s13*p2.E0conj))/
          (2*s12*s13*s23))*Log(p1q/(p1q + p2q + p3q)) +
       ((-1/2 + (2*s12)/s13 - s13/(4*s12))*E0.E0conj -
         (9*(s12 + s13 + s23)*p1.E0conj*p2.E0)/(2*s13*s23) -
         ((s12 + s13 + s23)*p1.E0*(18*s12*p1.E0conj + 2*s23*p1.E0conj +
            9*s12*p2.E0conj))/(2*s12*s13*s23))*Log(p2q/(p1q + p2q + p3q)) +
       ((-1/2 - s12/(4*s13) + (2*s13)/s12)*E0.E0conj +
         (9*(s12 + s13 + s23)*p1.E0conj*p2.E0)/(2*s12*s23) +
         ((s12 + s13 + s23)*p1.E0*(-2*s23*p1.E0conj + 9*s13*p2.E0conj))/
          (2*s12*s13*s23))*Log(p3q/(p1q + p2q + p3q)) +
       ((4*(-1 + (4*s12)/s13 + (4*s13)/s12)*E0.E0conj)/9 -
         (4*(s12 - s13)*(s12 + s13 + s23)*p1.E0conj*p2.E0)/
          (s12*s13*s23) - (4*(s12 + s13 + s23)*p1.E0*(18*s12*p1.E0conj +
            2*s23*p1.E0conj + 9*s12*p2.E0conj - 9*s13*p2.E0conj))/
          (9*s12*s13*s23))*Log(-s12 - s13 - s23) +
       ((-1/2 - s12/(4*s13) + (2*s13)/s12)*E0.E0conj +
         (9*(s12 + s13 + s23)*p1.E0conj*p2.E0)/(2*s12*s23) +
         ((s12 + s13 + s23)*p1.E0*(-2*s23*p1.E0conj + 9*s13*p2.E0conj))/
          (2*s12*s13*s23))*Log(s12/(s12 + s13 + s23)) +
       ((-1/2 + (2*s12)/s13 - s13/(4*s12))*E0.E0conj -
         (9*(s12 + s13 + s23)*p1.E0conj*p2.E0)/(2*s13*s23) -
         ((s12 + s13 + s23)*p1.E0*(18*s12*p1.E0conj + 2*s23*p1.E0conj +
            9*s12*p2.E0conj))/(2*s12*s13*s23))*Log(s13/(s12 + s13 + s23)) +
       (((20 + s12/s13 + s13/s12)*E0.E0conj)/36 +
         ((s12 - s13)*(s12 + s13 + s23)*p1.E0conj*p2.E0)/
          (2*s12*s13*s23) + ((s12 + s13 + s23)*p1.E0*(18*s12*p1.E0conj +
            20*s23*p1.E0conj + 9*s12*p2.E0conj - 9*s13*p2.E0conj))/
          (18*s12*s13*s23))*Log(s23/(s12 + s13 + s23))) +
     (Ioperator*(((-189*(p2q + p3q)^2*s23*(s12 + s13 + s23)*
            (p2q*s13*(3*s12 + s13 + 2*s23) + p3q*s12*(s12 + 3*s13 + 2*s23)) -
           189*p1q^2*(p2q + p3q)*s23*(s13*s23*(s13 + s23) +
             s12^2*(4*s13 + s23) + s12*(4*s13^2 + 6*s13*s23 + s23^2)) +
           p1q*(p3q^2*(189*s12^3*(4*s13 + s23) + 2*s12^2*s23*(378*s13 +
                 73*s23) + s23^2*(-43*s13^2 + 231*s13*s23 + 42*s23^2) + s12*
                s23*(-189*s13^2 + 583*s13*s23 + 231*s23^2)) +
             p2q*p3q*(189*s12^3*s23 + s12^2*(-1512*s13^2 - 945*s13*s23 +
                 103*s23^2) + s12*s23*(-945*s13^2 + 410*s13*s23 +
                 462*s23^2) + s23*(189*s13^3 + 103*s13^2*s23 + 462*s13*
                  s23^2 + 84*s23^3)) + p2q^2*(-(s12^2*s23*(189*s13 +
                  43*s23)) + s23*(189*s13^3 + 146*s13^2*s23 + 231*s13*s23^2 +
                 42*s23^3) + s12*(756*s13^3 + 756*s13^2*s23 + 583*s13*s23^2 +
                 231*s23^3))))*E0.E0conj)/(36*p1q*(p2q + p3q)^2*s12*s13*
          s23^2) + ((s12 + s13 + s23)*(-252*p2q^2*s13*(2*s12 + s23) +
           p1q*p3q*s23*(213*s12 - 87*s13 + 14*s23) + p1q*p2q*s23*
            (87*s12 + 39*s13 + 14*s23) - 126*p2q*p3q*(s13*s23 +
             s12*(4*s13 + s23)))*p1.E0conj*p2.E0)/(6*p1q*(p2q + p3q)*s12*
          s13*s23^2) - (14*(s12 + s13 + s23)*(9*p2q^2*s13*(2*s12 + s23) -
           p1q*p3q*s23*(9*s12 + s23) + 9*p3q^2*s12*(2*s13 + s23) -
           p1q*p2q*s23*(9*s13 + s23) + 9*p2q*p3q*(s13*s23 +
             s12*(4*s13 + s23)))*p2.E0*p2.E0conj)/(3*p1q*(p2q + p3q)*s12*
          s13*s23^2) + p1.E0*(((s12 + s13 + s23)*
            (-378*p2q^2*s13*(2*s12 + s23) + 29*p1q*p2q*s23*(9*s12 + s23) +
             29*p1q*p3q*s23*(9*s12 + s23))*p1.E0conj)/(9*p1q*(p2q + p3q)*
            s12*s13*s23^2) + ((s12 + s13 + s23)*(-252*p2q^2*s13*
              (2*s12 + s23) + p1q*p3q*s23*(213*s12 - 87*s13 + 14*s23) +
             p1q*p2q*s23*(87*s12 + 39*s13 + 14*s23) - 126*p2q*p3q*
              (s13*s23 + s12*(4*s13 + s23)))*p2.E0conj)/(6*p1q*(p2q + p3q)*
            s12*s13*s23^2)) +
        nl*(((9*(p2q + p3q)^2*s23*(s12 + s13 + s23)*(p2q*s13*(3*s12 + s13 +
                 2*s23) + p3q*s12*(s12 + 3*s13 + 2*s23)) +
             9*p1q^2*(p2q + p3q)*s23*(s13*s23*(s13 + s23) + s12^2*
                (4*s13 + s23) + s12*(4*s13^2 + 6*s13*s23 + s23^2)) -
             p1q*(p3q^2*(9*s12^3*(4*s13 + s23) + 2*s12^2*s23*(18*s13 +
                   5*s23) + s23^2*(s13^2 + 11*s13*s23 + 2*s23^2) +
                 s12*s23*(-9*s13^2 + 27*s13*s23 + 11*s23^2)) + p2q*p3q*
                (9*s12^3*s23 + s12^2*(-72*s13^2 - 45*s13*s23 + 11*s23^2) +
                 s12*s23*(-45*s13^2 + 18*s13*s23 + 22*s23^2) +
                 s23*(9*s13^3 + 11*s13^2*s23 + 22*s13*s23^2 + 4*s23^3)) +
               p2q^2*(s12^2*s23*(-9*s13 + s23) + s23*(9*s13^3 + 10*s13^2*
                    s23 + 11*s13*s23^2 + 2*s23^3) + s12*(36*s13^3 +
                   36*s13^2*s23 + 27*s13*s23^2 + 11*s23^3))))*E0.E0conj)/
           (18*p1q*(p2q + p3q)^2*s12*s13*s23^2) +
          ((s12 + s13 + s23)*(p1q*p3q*(-27*s12 + 9*s13 - 2*s23)*s23 +
             36*p2q^2*s13*(2*s12 + s23) - p1q*p2q*s23*(9*s12 + 9*s13 + 2*
                s23) + 18*p2q*p3q*(s13*s23 + s12*(4*s13 + s23)))*p1.E0conj*
            p2.E0)/(9*p1q*(p2q + p3q)*s12*s13*s23^2) +
          (4*(s12 + s13 + s23)*(9*p2q^2*s13*(2*s12 + s23) -
             p1q*p3q*s23*(9*s12 + s23) + 9*p3q^2*s12*(2*s13 + s23) -
             p1q*p2q*s23*(9*s13 + s23) + 9*p2q*p3q*(s13*s23 + s12*
                (4*s13 + s23)))*p2.E0*p2.E0conj)/(9*p1q*(p2q + p3q)*s12*
            s13*s23^2) + p1.E0*((-2*(s12 + s13 + s23)*(-18*p2q^2*s13*
                (2*s12 + s23) + p1q*p2q*s23*(9*s12 + s23) + p1q*p3q*s23*
                (9*s12 + s23))*p1.E0conj)/(9*p1q*(p2q + p3q)*s12*s13*
              s23^2) + ((s12 + s13 + s23)*(p1q*p3q*(-27*s12 + 9*s13 - 2*s23)*
                s23 + 36*p2q^2*s13*(2*s12 + s23) - p1q*p2q*s23*(9*s12 +
                 9*s13 + 2*s23) + 18*p2q*p3q*(s13*s23 + s12*(4*s13 + s23)))*
              p2.E0conj)/(9*p1q*(p2q + p3q)*s12*s13*s23^2))) +
        ((-9*((p2q + p3q)^2*s23*(s12 + s13 + s23)*(p2q*s13*(3*s12 + s13 +
                 2*s23) + p3q*s12*(s12 + 3*s13 + 2*s23)) + p1q^2*(p2q + p3q)*
              s23*(s13*s23*(s13 + s23) + s12^2*(4*s13 + s23) + s12*
                (4*s13^2 + 6*s13*s23 + s23^2)) - p1q*(p3q^2*(s13*s23^3 +
                 s12^3*(4*s13 + s23) + s12^2*s23*(4*s13 + s23) +
                 s12*s23*(-s13^2 + 3*s13*s23 + s23^2)) + p2q*p3q*
                (s12^3*s23 + s12^2*(-8*s13^2 - 5*s13*s23 + s23^2) +
                 s13*s23*(s13^2 + s13*s23 + 2*s23^2) + s12*s23*(-5*s13^2 +
                   2*s13*s23 + 2*s23^2)) + p2q^2*(-(s12^2*s13*s23) +
                 s13*s23*(s13^2 + s13*s23 + s23^2) + s12*(4*s13^3 +
                   4*s13^2*s23 + 3*s13*s23^2 + s23^3))))*E0.E0conj)/
           (4*p1q*(p2q + p3q)^2*s12*s13*s23^2) -
          (9*(s12 + s13 + s23)*(p1q*p3q*(-3*s12 + s13)*s23 -
             p1q*p2q*(s12 + s13)*s23 + 4*p2q^2*s13*(2*s12 + s23) +
             2*p2q*p3q*(s13*s23 + s12*(4*s13 + s23)))*p1.E0conj*p2.E0)/
           (2*p1q*(p2q + p3q)*s12*s13*s23^2) - (18*(s12 + s13 + s23)*
            (p2q^2*s13*(2*s12 + s23) + p3q*s12*(-(p1q*s23) + p3q*
                (2*s13 + s23)) + p2q*(-(p1q*s13*s23) + p3q*s13*s23 + p3q*s12*
                (4*s13 + s23)))*p2.E0*p2.E0conj)/(p1q*(p2q + p3q)*s12*s13*
            s23^2) + p1.E0*((9*(s12 + s13 + s23)*(p1q*p2q*s12*s23 + p1q*p3q*
                s12*s23 - 2*p2q^2*s13*(2*s12 + s23))*p1.E0conj)/
             (p1q*(p2q + p3q)*s12*s13*s23^2) - (9*(s12 + s13 + s23)*
              (p1q*p3q*(-3*s12 + s13)*s23 - p1q*p2q*(s12 + s13)*s23 + 4*p2q^2*
                s13*(2*s12 + s23) + 2*p2q*p3q*(s13*s23 + s12*(4*s13 + s23)))*
              p2.E0conj)/(2*p1q*(p2q + p3q)*s12*s13*s23^2)))*
         Log(p1q/(p1q + p2q + p3q)) +
        (((-9*p1q^2*(p2q + p3q)*s12*s23*(s12 + s13 + s23)*(2*s13 + s23) -
             9*(p2q + p3q)^2*s12*s23*(s12 + s13 + s23)*(p2q*s13 + p3q*
                (s12 + 2*(s13 + s23))) + p1q*(p3q^2*(9*s12^3*(2*s13 + s23) +
                 s12^2*s23*(9*s13 + 10*s23) + s12*s23^2*(9*s13 + 11*s23) +
                 s23^2*(s13^2 + 2*s13*s23 + 2*s23^2)) + p2q*p3q*
                (9*s12^3*s23 + 2*s23^2*(s13^2 + 2*s13*s23 + 2*s23^2) +
                 s12^2*(-36*s13^2 - 36*s13*s23 + 11*s23^2) + s12*s23*
                  (-9*s13^2 + 9*s13*s23 + 22*s23^2)) + p2q^2*
                (s12^2*s23*(-9*s13 + s23) + s23^2*(s13^2 + 2*s13*s23 +
                   2*s23^2) + s12*(18*s13^3 + 27*s13^2*s23 + 18*s13*s23^2 +
                   11*s23^3))))*E0.E0conj)/(4*p1q*(p2q + p3q)^2*s12*s13*
            s23^2) + ((s12 + s13 + s23)*(-36*p2q^2*s12*s13 -
             18*p2q*p3q*s12*(2*s13 + s23) + p1q*p2q*s23*(9*s12 + 2*s23) +
             p1q*p3q*s23*(27*s12 + 2*s23))*p1.E0conj*p2.E0)/
           (2*p1q*(p2q + p3q)*s12*s13*s23^2) + (2*(s12 + s13 + s23)*
            (-9*p2q^2*s12*s13 + p1q*p2q*s23^2 + p1q*p3q*s23*(9*s12 + s23) -
             9*p3q^2*s12*(s13 + s23) - 9*p2q*p3q*s12*(2*s13 + s23))*p2.E0*
            p2.E0conj)/(p1q*(p2q + p3q)*s12*s13*s23^2) +
          p1.E0*(((s12 + s13 + s23)*(-18*p2q^2*s12*s13 + p1q*p2q*s23*
                (9*s12 + s23) + p1q*p3q*s23*(9*s12 + s23))*p1.E0conj)/
             (p1q*(p2q + p3q)*s12*s13*s23^2) + ((s12 + s13 + s23)*
              (-36*p2q^2*s12*s13 - 18*p2q*p3q*s12*(2*s13 + s23) + p1q*p2q*s23*
                (9*s12 + 2*s23) + p1q*p3q*s23*(27*s12 + 2*s23))*p2.E0conj)/
             (2*p1q*(p2q + p3q)*s12*s13*s23^2)))*Log(p2q/(p1q + p2q + p3q)) +
        (((-9*p1q^2*(p2q + p3q)*s13*s23*(2*s12 + s23)*(s12 + s13 + s23) -
             9*(p2q + p3q)^2*s13*s23*(s12 + s13 + s23)*(p3q*s12 + p2q*
                (2*s12 + s13 + 2*s23)) + p1q*(p3q^2*(18*s12^3*s13 +
                 s12^2*s23*(27*s13 + s23) + s23^2*(s13^2 + 11*s13*s23 +
                   2*s23^2) + s12*s23*(-9*s13^2 + 18*s13*s23 + 2*s23^2)) +
               p2q^2*(s12^2*s23^2 + s12*(18*s13^3 + 9*s13^2*s23 +
                   9*s13*s23^2 + 2*s23^3) + s23*(9*s13^3 + 10*s13^2*s23 +
                   11*s13*s23^2 + 2*s23^3)) + p2q*p3q*(s12^2*(-36*s13^2 -
                   9*s13*s23 + 2*s23^2) + s12*s23*(-36*s13^2 + 9*s13*s23 +
                   4*s23^2) + s23*(9*s13^3 + 11*s13^2*s23 + 22*s13*s23^2 +
                   4*s23^3))))*E0.E0conj)/(4*p1q*(p2q + p3q)^2*s12*s13*
            s23^2) - ((s12 + s13 + s23)*(p1q*p3q*(9*s13 - 2*s23)*s23 +
             36*p2q^2*s13*(s12 + s23) + 18*p2q*p3q*s13*(2*s12 + s23) -
             p1q*p2q*s23*(9*s13 + 2*s23))*p1.E0conj*p2.E0)/
           (2*p1q*(p2q + p3q)*s12*s13*s23^2) + (2*(s12 + s13 + s23)*
            (-9*p2q^2*s13*(s12 + s23) - 9*p2q*p3q*s13*(2*s12 + s23) +
             p1q*p2q*s23*(9*s13 + s23) + p3q*(-9*p3q*s12*s13 + p1q*s23^2))*
            p2.E0*p2.E0conj)/(p1q*(p2q + p3q)*s12*s13*s23^2) +
          p1.E0*(((s12 + s13 + s23)*(p1q*p2q*s23^2 + p1q*p3q*s23^2 - 18*
                p2q^2*s13*(s12 + s23))*p1.E0conj)/(p1q*(p2q + p3q)*s12*s13*
              s23^2) - ((s12 + s13 + s23)*(p1q*p3q*(9*s13 - 2*s23)*s23 + 36*
                p2q^2*s13*(s12 + s23) + 18*p2q*p3q*s13*(2*s12 + s23) - p1q*
                p2q*s23*(9*s13 + 2*s23))*p2.E0conj)/(2*p1q*(p2q + p3q)*s12*
              s13*s23^2)))*Log(p3q/(p1q + p2q + p3q)) +
        ((-2*(9*(p2q + p3q)^2*s23*(s12 + s13 + s23)*(p2q*s13*(3*s12 + s13 +
                 2*s23) + p3q*s12*(s12 + 3*s13 + 2*s23)) +
             9*p1q^2*(p2q + p3q)*s23*(s13*s23*(s13 + s23) + s12^2*
                (4*s13 + s23) + s12*(4*s13^2 + 6*s13*s23 + s23^2)) -
             p1q*(p3q^2*(9*s12^3*(4*s13 + s23) + 2*s12^2*s23*(18*s13 +
                   5*s23) + s23^2*(s13^2 + 11*s13*s23 + 2*s23^2) +
                 s12*s23*(-9*s13^2 + 27*s13*s23 + 11*s23^2)) + p2q*p3q*
                (9*s12^3*s23 + s12^2*(-72*s13^2 - 45*s13*s23 + 11*s23^2) +
                 s12*s23*(-45*s13^2 + 18*s13*s23 + 22*s23^2) +
                 s23*(9*s13^3 + 11*s13^2*s23 + 22*s13*s23^2 + 4*s23^3)) +
               p2q^2*(s12^2*s23*(-9*s13 + s23) + s23*(9*s13^3 + 10*s13^2*
                    s23 + 11*s13*s23^2 + 2*s23^3) + s12*(36*s13^3 +
                   36*s13^2*s23 + 27*s13*s23^2 + 11*s23^3))))*E0.E0conj)/
           (9*p1q*(p2q + p3q)^2*s12*s13*s23^2) -
          (4*(s12 + s13 + s23)*(p1q*p3q*(-27*s12 + 9*s13 - 2*s23)*s23 +
             36*p2q^2*s13*(2*s12 + s23) - p1q*p2q*s23*(9*s12 + 9*s13 + 2*
                s23) + 18*p2q*p3q*(s13*s23 + s12*(4*s13 + s23)))*p1.E0conj*
            p2.E0)/(9*p1q*(p2q + p3q)*s12*s13*s23^2) -
          (16*(s12 + s13 + s23)*(9*p2q^2*s13*(2*s12 + s23) -
             p1q*p3q*s23*(9*s12 + s23) + 9*p3q^2*s12*(2*s13 + s23) -
             p1q*p2q*s23*(9*s13 + s23) + 9*p2q*p3q*(s13*s23 + s12*
                (4*s13 + s23)))*p2.E0*p2.E0conj)/(9*p1q*(p2q + p3q)*s12*
            s13*s23^2) + p1.E0*((8*(s12 + s13 + s23)*(-18*p2q^2*s13*
                (2*s12 + s23) + p1q*p2q*s23*(9*s12 + s23) + p1q*p3q*s23*
                (9*s12 + s23))*p1.E0conj)/(9*p1q*(p2q + p3q)*s12*s13*
              s23^2) - (4*(s12 + s13 + s23)*(p1q*p3q*(-27*s12 + 9*s13 -
                 2*s23)*s23 + 36*p2q^2*s13*(2*s12 + s23) - p1q*p2q*s23*
                (9*s12 + 9*s13 + 2*s23) + 18*p2q*p3q*(s13*s23 +
                 s12*(4*s13 + s23)))*p2.E0conj)/(9*p1q*(p2q + p3q)*s12*s13*
              s23^2)))*Log(-s12 - s13 - s23) +
        (((-9*p1q^2*(p2q + p3q)*s13*s23*(2*s12 + s23)*(s12 + s13 + s23) -
             9*(p2q + p3q)^2*s13*s23*(s12 + s13 + s23)*(p3q*s12 + p2q*
                (2*s12 + s13 + 2*s23)) + p1q*(p3q^2*(18*s12^3*s13 +
                 s12^2*s23*(27*s13 + s23) + s23^2*(s13^2 + 11*s13*s23 +
                   2*s23^2) + s12*s23*(-9*s13^2 + 18*s13*s23 + 2*s23^2)) +
               p2q^2*(s12^2*s23^2 + s12*(18*s13^3 + 9*s13^2*s23 +
                   9*s13*s23^2 + 2*s23^3) + s23*(9*s13^3 + 10*s13^2*s23 +
                   11*s13*s23^2 + 2*s23^3)) + p2q*p3q*(s12^2*(-36*s13^2 -
                   9*s13*s23 + 2*s23^2) + s12*s23*(-36*s13^2 + 9*s13*s23 +
                   4*s23^2) + s23*(9*s13^3 + 11*s13^2*s23 + 22*s13*s23^2 +
                   4*s23^3))))*E0.E0conj)/(4*p1q*(p2q + p3q)^2*s12*s13*
            s23^2) - ((s12 + s13 + s23)*(p1q*p3q*(9*s13 - 2*s23)*s23 +
             36*p2q^2*s13*(s12 + s23) + 18*p2q*p3q*s13*(2*s12 + s23) -
             p1q*p2q*s23*(9*s13 + 2*s23))*p1.E0conj*p2.E0)/
           (2*p1q*(p2q + p3q)*s12*s13*s23^2) + (2*(s12 + s13 + s23)*
            (-9*p2q^2*s13*(s12 + s23) - 9*p2q*p3q*s13*(2*s12 + s23) +
             p1q*p2q*s23*(9*s13 + s23) + p3q*(-9*p3q*s12*s13 + p1q*s23^2))*
            p2.E0*p2.E0conj)/(p1q*(p2q + p3q)*s12*s13*s23^2) +
          p1.E0*(((s12 + s13 + s23)*(p1q*p2q*s23^2 + p1q*p3q*s23^2 - 18*
                p2q^2*s13*(s12 + s23))*p1.E0conj)/(p1q*(p2q + p3q)*s12*s13*
              s23^2) - ((s12 + s13 + s23)*(p1q*p3q*(9*s13 - 2*s23)*s23 + 36*
                p2q^2*s13*(s12 + s23) + 18*p2q*p3q*s13*(2*s12 + s23) - p1q*
                p2q*s23*(9*s13 + 2*s23))*p2.E0conj)/(2*p1q*(p2q + p3q)*s12*
              s13*s23^2)))*Log(s12/(s12 + s13 + s23)) +
        (((-9*p1q^2*(p2q + p3q)*s12*s23*(s12 + s13 + s23)*(2*s13 + s23) -
             9*(p2q + p3q)^2*s12*s23*(s12 + s13 + s23)*(p2q*s13 + p3q*
                (s12 + 2*(s13 + s23))) + p1q*(p3q^2*(9*s12^3*(2*s13 + s23) +
                 s12^2*s23*(9*s13 + 10*s23) + s12*s23^2*(9*s13 + 11*s23) +
                 s23^2*(s13^2 + 2*s13*s23 + 2*s23^2)) + p2q*p3q*
                (9*s12^3*s23 + 2*s23^2*(s13^2 + 2*s13*s23 + 2*s23^2) +
                 s12^2*(-36*s13^2 - 36*s13*s23 + 11*s23^2) + s12*s23*
                  (-9*s13^2 + 9*s13*s23 + 22*s23^2)) + p2q^2*
                (s12^2*s23*(-9*s13 + s23) + s23^2*(s13^2 + 2*s13*s23 +
                   2*s23^2) + s12*(18*s13^3 + 27*s13^2*s23 + 18*s13*s23^2 +
                   11*s23^3))))*E0.E0conj)/(4*p1q*(p2q + p3q)^2*s12*s13*
            s23^2) + ((s12 + s13 + s23)*(-36*p2q^2*s12*s13 -
             18*p2q*p3q*s12*(2*s13 + s23) + p1q*p2q*s23*(9*s12 + 2*s23) +
             p1q*p3q*s23*(27*s12 + 2*s23))*p1.E0conj*p2.E0)/
           (2*p1q*(p2q + p3q)*s12*s13*s23^2) + (2*(s12 + s13 + s23)*
            (-9*p2q^2*s12*s13 + p1q*p2q*s23^2 + p1q*p3q*s23*(9*s12 + s23) -
             9*p3q^2*s12*(s13 + s23) - 9*p2q*p3q*s12*(2*s13 + s23))*p2.E0*
            p2.E0conj)/(p1q*(p2q + p3q)*s12*s13*s23^2) +
          p1.E0*(((s12 + s13 + s23)*(-18*p2q^2*s12*s13 + p1q*p2q*s23*
                (9*s12 + s23) + p1q*p3q*s23*(9*s12 + s23))*p1.E0conj)/
             (p1q*(p2q + p3q)*s12*s13*s23^2) + ((s12 + s13 + s23)*
              (-36*p2q^2*s12*s13 - 18*p2q*p3q*s12*(2*s13 + s23) + p1q*p2q*s23*
                (9*s12 + 2*s23) + p1q*p3q*s23*(27*s12 + 2*s23))*p2.E0conj)/
             (2*p1q*(p2q + p3q)*s12*s13*s23^2)))*Log(s13/(s12 + s13 + s23)) +
        (((9*(p2q + p3q)^2*s23*(s12 + s13 + s23)*(p2q*s13*(3*s12 + s13 +
                 2*s23) + p3q*s12*(s12 + 3*s13 + 2*s23)) +
             9*p1q^2*(p2q + p3q)*s23*(s13*s23*(s13 + s23) + s12^2*
                (4*s13 + s23) + s12*(4*s13^2 + 6*s13*s23 + s23^2)) -
             p1q*(p3q^2*(9*s12^3*(4*s13 + s23) + s12^2*s23*(36*s13 +
                   19*s23) + s23^2*(10*s13^2 + 29*s13*s23 + 20*s23^2) +
                 s12*s23*(-9*s13^2 + 27*s13*s23 + 29*s23^2)) + p2q^2*
                (s12^2*s23*(-9*s13 + 10*s23) + s23*(9*s13^3 + 19*s13^2*s23 +
                   29*s13*s23^2 + 20*s23^3) + s12*(36*s13^3 + 36*s13^2*s23 +
                   27*s13*s23^2 + 29*s23^3)) + p2q*p3q*(9*s12^3*s23 +
                 s12^2*(-72*s13^2 - 45*s13*s23 + 29*s23^2) + s12*s23*
                  (-45*s13^2 + 18*s13*s23 + 58*s23^2) + s23*(9*s13^3 +
                   29*s13^2*s23 + 58*s13*s23^2 + 40*s23^3))))*E0.E0conj)/
           (36*p1q*(p2q + p3q)^2*s12*s13*s23^2) +
          ((s12 + s13 + s23)*(p1q*p3q*(-27*s12 + 9*s13 - 20*s23)*s23 +
             36*p2q^2*s13*(2*s12 + s23) - p1q*p2q*s23*(9*s12 + 9*s13 + 20*
                s23) + 18*p2q*p3q*(s13*s23 + s12*(4*s13 + s23)))*p1.E0conj*
            p2.E0)/(18*p1q*(p2q + p3q)*s12*s13*s23^2) +
          (2*(s12 + s13 + s23)*(9*p2q^2*s13*(2*s12 + s23) +
             9*p3q^2*s12*(2*s13 + s23) - p1q*p3q*s23*(9*s12 + 10*s23) -
             p1q*p2q*s23*(9*s13 + 10*s23) + 9*p2q*p3q*(s13*s23 + s12*
                (4*s13 + s23)))*p2.E0*p2.E0conj)/(9*p1q*(p2q + p3q)*s12*
            s13*s23^2) + p1.E0*(((s12 + s13 + s23)*(18*p2q^2*s13*
                (2*s12 + s23) - p1q*p2q*s23*(9*s12 + 10*s23) - p1q*p3q*s23*
                (9*s12 + 10*s23))*p1.E0conj)/(9*p1q*(p2q + p3q)*s12*s13*
              s23^2) + ((s12 + s13 + s23)*(p1q*p3q*(-27*s12 + 9*s13 - 20*s23)*
                s23 + 36*p2q^2*s13*(2*s12 + s23) - p1q*p2q*s23*(9*s12 +
                 9*s13 + 20*s23) + 18*p2q*p3q*(s13*s23 + s12*(4*s13 + s23)))*
              p2.E0conj)/(18*p1q*(p2q + p3q)*s12*s13*s23^2)))*
         Log(s23/(s12 + s13 + s23))))/ep);


l P0AvgExp = (-1/6*((s12 + s13 + s23)*
        (-(p1q^3*s23*(p3q*(9*s12 + s23) + p2q*(9*s13 + s23))) +
         9*p2q*p3q*(p2q + p3q)*(p2q*s13*(3*s12 + s13 + 2*s23) +
           p3q*s12*(s12 + 3*s13 + 2*s23)) + p1q*(p3q^3*s12*(9*s12 + s23) +
           p2q^3*s13*(9*s13 + s23) + p2q*p3q^2*(63*s12*s13 + 9*s12*s23 +
             8*s13*s23 - 2*s23^2) + p2q^2*p3q*(63*s12*s13 + 8*s12*s23 +
             9*s13*s23 - 2*s23^2)) + p1q^2*(p3q^2*(9*s12^2 - 8*s12*s23 -
             s23^2) + p2q^2*(9*s13^2 - 8*s13*s23 - s23^2) +
           p2q*p3q*((s13 - 2*s23)*s23 + s12*(54*s13 + s23)))))/
       (p1q*(p2q + p3q)*(p1q + p2q + p3q)^2*s12*s13*s23) -
     (2*Ioperator*(9*(p2q + p3q)^2*(p2q^2 + p3q^2)*s23*(s12 + s13 + s23)*
         (p2q*s13*(3*s12 + s13 + 2*s23) + p3q*s12*(s12 + 3*s13 + 2*s23)) +
        9*p1q^4*(p2q + p3q)*s23*(s13*s23*(s13 + s23) + s12^2*(4*s13 + s23) +
          s12*(4*s13^2 + 6*s13*s23 + s23^2)) + p1q*(p2q + p3q)*
         (p3q^3*(-18*s12^3*(2*s13 + s23) + 3*s12^2*s23*(6*s13 + 5*s23) -
            s23^2*(s13^2 + 11*s13*s23 + 2*s23^2) + s12*s23*
             (72*s13^2 + 70*s13*s23 + 23*s23^2)) + p2q*p3q^2*
           (-36*s12^3*s13 + s23^2*(17*s13^2 - 9*s13*s23 - 2*s23^2) +
            s12*s23*(126*s13^2 + 92*s13*s23 + 25*s23^2) +
            s12^2*(72*s13^2 + 90*s13*s23 + 51*s23^2)) +
          p2q^2*p3q*(s23^2*(51*s13^2 + 25*s13*s23 - 2*s23^2) +
            s12^2*(72*s13^2 + 126*s13*s23 + 17*s23^2) +
            s12*(-36*s13^3 + 90*s13^2*s23 + 92*s13*s23^2 - 9*s23^3)) +
          p2q^3*(s12^2*(72*s13 - s23)*s23 + s12*(-36*s13^3 + 18*s13^2*s23 +
              70*s13*s23^2 - 11*s23^3) + s23*(-18*s13^3 + 15*s13^2*s23 +
              23*s13*s23^2 - 2*s23^3))) +
        p1q^3*(p3q^2*(-9*s12^3*(4*s13 + s23) + s12^2*s23*(36*s13 + 17*s23) -
            2*s23^2*(-4*s13^2 + s13*s23 + s23^2) + s12*s23*
             (81*s13^2 + 81*s13*s23 + 16*s23^2)) +
          p2q*p3q*(-9*s12^3*s23 + s12*s23*(189*s13^2 + 198*s13*s23 +
              14*s23^2) + s12^2*(72*s13^2 + 189*s13*s23 + 25*s23^2) +
            s23*(-9*s13^3 + 25*s13^2*s23 + 14*s13*s23^2 - 4*s23^3)) +
          p2q^2*(s12^2*s23*(81*s13 + 8*s23) + s23*(-9*s13^3 + 17*s13^2*s23 +
              16*s13*s23^2 - 2*s23^3) + s12*(-36*s13^3 + 36*s13^2*s23 +
              81*s13*s23^2 - 2*s23^3))) +
        2*p1q^2*(p3q^3*(-9*s12^3*(4*s13 + s23) - s23^3*(9*s13 + s23) +
            s12^2*s23*(9*s13 + 17*s23) + s12*s23*(54*s13^2 + 46*s13*s23 +
              17*s23^2)) + p2q*p3q^2*(-9*s12^3*(4*s13 + s23) +
            s23^2*(17*s13^2 - 10*s13*s23 - 3*s23^2) + 2*s12*s23*
             (72*s13^2 + 51*s13*s23 + 8*s23^2) + s12^2*(72*s13^2 +
              99*s13*s23 + 34*s23^2)) + p2q^2*p3q*
           (s12^2*(72*s13^2 + 144*s13*s23 + 17*s23^2) +
            s12*(-36*s13^3 + 99*s13^2*s23 + 102*s13*s23^2 - 10*s23^3) +
            s23*(-9*s13^3 + 34*s13^2*s23 + 16*s13*s23^2 - 3*s23^3)) +
          p2q^3*(54*s12^2*s13*s23 + s12*(-36*s13^3 + 9*s13^2*s23 +
              46*s13*s23^2 - 9*s23^3) - s23*(9*s13^3 - 17*s13^2*s23 -
              17*s13*s23^2 + s23^3)))))/(9*ep^2*p1q*(p2q + p3q)^2*
       (p1q + p2q + p3q)^2*s12*s13*s23^2) +
     (9*(p2q + p3q)^4*s23*(s12 + s13 + s23)*(p2q*s13*(3*s12 + s13 + 2*s23) +
         p3q*s12*(s12 + 3*s13 + 2*s23)) + 9*p1q^4*(p2q + p3q)*s23*
        (s13*s23*(s13 + s23) + s12^2*(4*s13 + s23) +
         s12*(4*s13^2 + 6*s13*s23 + s23^2)) + p1q*(p2q + p3q)^2*
        (2*p2q*p3q*(s23^2*(17*s13^2 + 7*s13*s23 - 2*s23^2) +
           s12*s23*(90*s13^2 + 90*s13*s23 + 7*s23^2) +
           s12^2*(36*s13^2 + 90*s13*s23 + 17*s23^2)) +
         p3q^2*(-36*s12^3*s13 + s12^2*s23*(36*s13 + 35*s23) -
           s23^2*(s13^2 + 11*s13*s23 + 2*s23^2) +
           s12*s23*(72*s13^2 + 72*s13*s23 + 25*s23^2)) +
         p2q^2*(s12^2*(72*s13 - s23)*s23 + s23^2*(35*s13^2 + 25*s13*s23 -
             2*s23^2) + s12*(-36*s13^3 + 36*s13^2*s23 + 72*s13*s23^2 -
             11*s23^3))) + 4*p1q^2*(3*p2q*p3q^2*(-6*s12^3*s13 -
           s23^2*(-3*s13^2 + 2*s13*s23 + s23^2) +
           s12*s23*(33*s13^2 + 25*s13*s23 + s23^2) +
           3*s12^2*(4*s13^2 + 9*s13*s23 + 2*s23^2)) +
         p3q^3*(-18*s12^3*s13 + 9*s12^2*s23*(s13 + s23) -
           s23^3*(5*s13 + s23) + s12*s23*(27*s13^2 + 19*s13*s23 + 4*s23^2)) +
         p2q^3*(27*s12^2*s13*s23 + s23^2*(9*s13^2 + 4*s13*s23 - s23^2) +
           s12*(-18*s13^3 + 9*s13^2*s23 + 19*s13*s23^2 - 5*s23^3)) +
         3*p2q^2*p3q*(s23^2*(6*s13^2 + s13*s23 - s23^2) +
           3*s12^2*(4*s13^2 + 11*s13*s23 + s23^2) +
           s12*(-6*s13^3 + 27*s13^2*s23 + 25*s13*s23^2 - 2*s23^3))) -
       p1q^3*(p3q^2*(s12^2*s23*(-36*s13 + s23) + 9*s12^3*(4*s13 + s23) +
           4*s23^2*(-2*s13^2 + s13*s23 + s23^2) +
           s12*s23*(-81*s13^2 - 63*s13*s23 + 4*s23^2)) +
         p2q^2*(-(s12^2*s23*(81*s13 + 8*s23)) +
           s12*(36*s13^3 - 36*s13^2*s23 - 63*s13*s23^2 + 4*s23^3) +
           s23*(9*s13^3 + s13^2*s23 + 4*s13*s23^2 + 4*s23^3)) +
         p2q*p3q*(9*s12^3*s23 - s12^2*(72*s13^2 + 189*s13*s23 + 7*s23^2) +
           s12*s23*(-189*s13^2 - 162*s13*s23 + 8*s23^2) +
           s23*(9*s13^3 - 7*s13^2*s23 + 8*s13*s23^2 + 8*s23^3))))/
      (12*p1q*(p2q + p3q)^2*(p1q + p2q + p3q)^2*s12*s13*s23^2) +
     (Ioperator*(-1/18*(nl*(9*(p2q + p3q)^2*(p2q^2 + p3q^2)*s23*
             (s12 + s13 + s23)*(p2q*s13*(3*s12 + s13 + 2*s23) +
              p3q*s12*(s12 + 3*s13 + 2*s23)) + 9*p1q^4*(p2q + p3q)*s23*
             (s13*s23*(s13 + s23) + s12^2*(4*s13 + s23) + s12*(4*s13^2 +
                6*s13*s23 + s23^2)) + p1q*(p2q + p3q)*
             (p3q^3*(-18*s12^3*(2*s13 + s23) + 3*s12^2*s23*(6*s13 + 5*s23) -
                s23^2*(s13^2 + 11*s13*s23 + 2*s23^2) + s12*s23*(72*s13^2 +
                  70*s13*s23 + 23*s23^2)) + p2q*p3q^2*(-36*s12^3*s13 +
                s23^2*(17*s13^2 - 9*s13*s23 - 2*s23^2) + s12*s23*(126*s13^2 +
                  92*s13*s23 + 25*s23^2) + s12^2*(72*s13^2 + 90*s13*s23 +
                  51*s23^2)) + p2q^2*p3q*(s23^2*(51*s13^2 + 25*s13*s23 -
                  2*s23^2) + s12^2*(72*s13^2 + 126*s13*s23 + 17*s23^2) +
                s12*(-36*s13^3 + 90*s13^2*s23 + 92*s13*s23^2 - 9*s23^3)) +
              p2q^3*(s12^2*(72*s13 - s23)*s23 + s12*(-36*s13^3 + 18*s13^2*
                   s23 + 70*s13*s23^2 - 11*s23^3) + s23*(-18*s13^3 +
                  15*s13^2*s23 + 23*s13*s23^2 - 2*s23^3))) +
            2*p1q^2*(p3q^3*(-9*s12^3*(4*s13 + s23) - s23^3*(9*s13 + s23) +
                s12^2*s23*(9*s13 + 17*s23) + s12*s23*(54*s13^2 + 46*s13*s23 +
                  17*s23^2)) + p2q*p3q^2*(-9*s12^3*(4*s13 + s23) +
                s23^2*(17*s13^2 - 10*s13*s23 - 3*s23^2) + 2*s12*s23*
                 (72*s13^2 + 51*s13*s23 + 8*s23^2) + s12^2*(72*s13^2 +
                  99*s13*s23 + 34*s23^2)) + p2q^2*p3q*(s12^2*(72*s13^2 +
                  144*s13*s23 + 17*s23^2) + s12*(-36*s13^3 + 99*s13^2*s23 +
                  102*s13*s23^2 - 10*s23^3) + s23*(-9*s13^3 + 34*s13^2*s23 +
                  16*s13*s23^2 - 3*s23^3)) + p2q^3*(54*s12^2*s13*s23 +
                s12*(-36*s13^3 + 9*s13^2*s23 + 46*s13*s23^2 - 9*s23^3) -
                s23*(9*s13^3 - 17*s13^2*s23 - 17*s13*s23^2 + s23^3))) -
            p1q^3*(p3q^2*(9*s12^3*(4*s13 + s23) - s12^2*s23*(36*s13 +
                  17*s23) + 2*s23^2*(-4*s13^2 + s13*s23 + s23^2) -
                s12*s23*(81*s13^2 + 81*s13*s23 + 16*s23^2)) -
              p2q^2*(s12^2*s23*(81*s13 + 8*s23) + s23*(-9*s13^3 +
                  17*s13^2*s23 + 16*s13*s23^2 - 2*s23^3) + s12*(-36*s13^3 +
                  36*s13^2*s23 + 81*s13*s23^2 - 2*s23^3)) +
              p2q*p3q*(9*s12^3*s23 - s12*s23*(189*s13^2 + 198*s13*s23 +
                  14*s23^2) - s12^2*(72*s13^2 + 189*s13*s23 + 25*s23^2) +
                s23*(9*s13^3 - 25*s13^2*s23 - 14*s13*s23^2 + 4*s23^3)))))/
          (p1q*(p2q + p3q)^2*(p1q + p2q + p3q)^2*s12*s13*s23^2) +
        (9*(p2q + p3q)^2*(21*p2q^2 + 16*p2q*p3q + 21*p3q^2)*s23*
           (s12 + s13 + s23)*(p2q*s13*(3*s12 + s13 + 2*s23) +
            p3q*s12*(s12 + 3*s13 + 2*s23)) + 189*p1q^4*(p2q + p3q)*s23*
           (s13*s23*(s13 + s23) + s12^2*(4*s13 + s23) +
            s12*(4*s13^2 + 6*s13*s23 + s23^2)) +
          p1q^3*(p3q^2*(-189*s12^3*(4*s13 + s23) + s12^2*s23*(756*s13 +
                277*s23) - 58*s23^2*(-4*s13^2 + s13*s23 + s23^2) +
              s12*s23*(1701*s13^2 + 1541*s13*s23 + 176*s23^2)) +
            p2q*p3q*(-189*s12^3*s23 + s12*s23*(3969*s13^2 + 3838*s13*s23 +
                118*s23^2) + s12^2*(1512*s13^2 + 3969*s13*s23 + 509*s23^2) +
              s23*(-189*s13^3 + 509*s13^2*s23 + 118*s13*s23^2 - 116*s23^3)) +
            p2q^2*(s12^2*s23*(1701*s13 + 232*s23) + s23*(-189*s13^3 +
                277*s13^2*s23 + 176*s13*s23^2 - 58*s23^3) + s12*(-756*s13^3 +
                756*s13^2*s23 + 1541*s13*s23^2 - 58*s23^3))) +
          2*p1q^2*(p3q^3*(-9*s12^3*(84*s13 + 13*s23) + 3*s12^2*s23*(87*s13 +
                143*s23) + s23^2*(64*s13^2 - 197*s13*s23 - 29*s23^2) +
              s12*s23*(1134*s13^2 + 886*s13*s23 + 285*s23^2)) +
            p2q*p3q^2*(-9*s12^3*(84*s13 + 13*s23) + s23^2*(557*s13^2 -
                226*s13*s23 - 87*s23^2) + 2*s12*s23*(1728*s13^2 +
                1239*s13*s23 + 128*s23^2) + s12^2*(1512*s13^2 +
                2583*s13*s23 + 922*s23^2)) + p2q^2*p3q*
             (s12^2*(1512*s13^2 + 3456*s13*s23 + 557*s23^2) +
              s12*(-756*s13^3 + 2583*s13^2*s23 + 2478*s13*s23^2 -
                226*s23^3) + s23*(-117*s13^3 + 922*s13^2*s23 + 256*s13*
                 s23^2 - 87*s23^3)) + p2q^3*(2*s12^2*s23*(567*s13 + 32*s23) +
              s12*(-756*s13^3 + 261*s13^2*s23 + 886*s13*s23^2 - 197*s23^3) +
              s23*(-117*s13^3 + 429*s13^2*s23 + 285*s13*s23^2 - 29*s23^3))) +
          p1q*(p2q + p3q)*(p2q*p3q^2*(-756*s12^3*s13 + s23^2*(677*s13^2 -
                93*s13*s23 - 74*s23^2) + 21*s12^2*(72*s13^2 + 138*s13*s23 +
                67*s23^2) + 7*s12*s23*(522*s13^2 + 452*s13*s23 + 91*s23^2)) +
            p3q^3*(-18*s12^3*(42*s13 + 13*s23) + s12^2*s23*(522*s13 +
                539*s23) + s23^2*(43*s13^2 - 231*s13*s23 - 42*s23^2) +
              s12*s23*(1512*s13^2 + 1470*s13*s23 + 499*s23^2)) +
            p2q^2*p3q*(s23^2*(1407*s13^2 + 637*s13*s23 - 74*s23^2) +
              s12^2*(1512*s13^2 + 3654*s13*s23 + 677*s23^2) +
              s12*(-756*s13^3 + 2898*s13^2*s23 + 3164*s13*s23^2 -
                93*s23^3)) + p2q^3*(s12^2*s23*(1512*s13 + 43*s23) +
              s23*(-234*s13^3 + 539*s13^2*s23 + 499*s13*s23^2 - 42*s23^3) -
              3*s12*(252*s13^3 - 174*s13^2*s23 - 490*s13*s23^2 + 77*s23^3))))/
         (36*p1q*(p2q + p3q)^2*(p1q + p2q + p3q)^2*s12*s13*s23^2) +
        (9*((p2q + p3q)^2*(p2q^2 + p3q^2)*s23*(s12 + s13 + s23)*
            (p2q*s13*(3*s12 + s13 + 2*s23) + p3q*s12*(s12 + 3*s13 + 2*s23)) +
           p1q^4*(p2q + p3q)*s23*(s13*s23*(s13 + s23) + s12^2*(4*s13 + s23) +
             s12*(4*s13^2 + 6*s13*s23 + s23^2)) +
           p1q^3*(p3q^2*(s13^2*s23^2 + 2*s12^2*s23*(2*s13 + s23) - s12^3*
                (4*s13 + s23) + s12*s23*(9*s13^2 + 9*s13*s23 + 2*s23^2)) +
             p2q*p3q*(-(s12^3*s23) + s13*s23*(-s13^2 + 3*s13*s23 + 2*s23^2) +
               s12*s23*(21*s13^2 + 22*s13*s23 + 2*s23^2) + s12^2*
                (8*s13^2 + 21*s13*s23 + 3*s23^2)) + p2q^2*(s12^2*s23*
                (9*s13 + s23) + s13*s23*(-s13^2 + 2*s13*s23 + 2*s23^2) + s12*
                s13*(-4*s13^2 + 4*s13*s23 + 9*s23^2))) +
           2*p1q^2*(p3q^3*(-(s13*s23^3) - s12^3*(4*s13 + s23) + s12^2*s23*
                (s13 + 2*s23) + s12*s23*(6*s13^2 + 5*s13*s23 + 2*s23^2)) +
             p2q*p3q^2*(s13*(2*s13 - s23)*s23^2 - s12^3*(4*s13 + s23) + s12*
                s23*(16*s13^2 + 11*s13*s23 + 2*s23^2) + s12^2*(8*s13^2 +
                 11*s13*s23 + 4*s23^2)) + p2q^3*(6*s12^2*s13*s23 + s13*s23*
                (-s13^2 + 2*s13*s23 + 2*s23^2) + s12*(-4*s13^3 + s13^2*s23 +
                 5*s13*s23^2 - s23^3)) + p2q^2*p3q*(2*s12^2*(4*s13^2 +
                 8*s13*s23 + s23^2) + s13*s23*(-s13^2 + 4*s13*s23 +
                 2*s23^2) - s12*(4*s13^3 - 11*s13^2*s23 - 11*s13*s23^2 +
                 s23^3))) + p1q*(p2q + p3q)*(p3q^3*(-(s13*s23^3) + 2*s12^2*
                s23*(s13 + s23) - 2*s12^3*(2*s13 + s23) + s12*s23*
                (8*s13^2 + 8*s13*s23 + 3*s23^2)) + p2q*p3q^2*
              (-4*s12^3*s13 + s13*(2*s13 - s23)*s23^2 + 2*s12^2*(4*s13^2 +
                 5*s13*s23 + 3*s23^2) + s12*s23*(14*s13^2 + 10*s13*s23 +
                 3*s23^2)) + p2q^2*p3q*(3*s13*s23^2*(2*s13 + s23) + 2*s12^2*
                (4*s13^2 + 7*s13*s23 + s23^2) - s12*(4*s13^3 - 10*s13^2*s23 -
                 10*s13*s23^2 + s23^3)) + p2q^3*(8*s12^2*s13*s23 + s13*s23*
                (-2*s13^2 + 2*s13*s23 + 3*s23^2) - s12*(4*s13^3 -
                 2*s13^2*s23 - 8*s13*s23^2 + s23^3))))*
          Log(p1q/(p1q + p2q + p3q)))/(4*p1q*(p2q + p3q)^2*
          (p1q + p2q + p3q)^2*s12*s13*s23^2) +
        ((9*p1q^4*(p2q + p3q)*s12*s23*(s12 + s13 + s23)*(2*s13 + s23) +
           9*(p2q + p3q)^2*(p2q^2 + p3q^2)*s12*s23*(s12 + s13 + s23)*
            (p2q*s13 + p3q*(s12 + 2*(s13 + s23))) + p1q*(p2q + p3q)*
            (p3q^3*(-18*s12^3*(s13 + s23) + 3*s12^2*s23*(6*s13 + 5*s23) -
               s23^2*(s13^2 + 2*s13*s23 + 2*s23^2) + s12*s23*(36*s13^2 +
                 61*s13*s23 + 23*s23^2)) + p2q*p3q^2*(-18*s12^3*s13 - s23^2*
                (s13^2 + 2*s23^2) + s12*s23*(54*s13^2 + 83*s13*s23 +
                 25*s23^2) + s12^2*(36*s13^2 + 90*s13*s23 + 51*s23^2)) +
             p2q^3*(s12^2*(36*s13 - s23)*s23 - s23^2*(3*s13^2 + 4*s13*s23 +
                 2*s23^2) + s12*(-18*s13^3 + 7*s13*s23^2 - 11*s23^3)) +
             p2q^2*p3q*(-(s23^2*(3*s13^2 + 2*s13*s23 + 2*s23^2)) + s12^2*
                (36*s13^2 + 72*s13*s23 + 17*s23^2) + s12*(-18*s13^3 +
                 11*s13*s23^2 - 9*s23^3))) +
           p1q^3*(p3q^2*(-9*s12^3*(2*s13 + s23) + s12^2*s23*(27*s13 +
                 17*s23) - s23^2*(s13^2 + 2*s13*s23 + 2*s23^2) + 2*s12*s23*
                (18*s13^2 + 27*s13*s23 + 8*s23^2)) + p2q*p3q*
              (-9*s12^3*s23 - 2*s23^2*(s13^2 + 2*s13*s23 + 2*s23^2) + s12*s23*
                (81*s13^2 + 99*s13*s23 + 14*s23^2) + s12^2*(36*s13^2 +
                 108*s13*s23 + 25*s23^2)) + p2q^2*(s12^2*s23*(45*s13 +
                 8*s23) - s23^2*(s13^2 + 2*s13*s23 + 2*s23^2) + s12*
                (-18*s13^3 + 9*s13^2*s23 + 27*s13*s23^2 - 2*s23^3))) +
           2*p1q^2*(p3q^3*(-s23^4 - 9*s12^3*(2*s13 + s23) + s12^2*s23*
                (18*s13 + 17*s23) + s12*s23*(27*s13^2 + 46*s13*s23 +
                 17*s23^2)) + p2q*p3q^2*(-9*s12^3*(2*s13 + s23) - s23^2*
                (s13^2 + s13*s23 + 3*s23^2) + s12*s23*(54*s13^2 +
                 75*s13*s23 + 16*s23^2) + s12^2*(36*s13^2 + 81*s13*s23 +
                 34*s23^2)) + p2q^3*(27*s12^2*s13*s23 - s23^2*(s13^2 +
                 s13*s23 + s23^2) + s12*(-18*s13^3 - 9*s13^2*s23 +
                 s13*s23^2 - 9*s23^3)) + p2q^2*p3q*(-(s23^2*(2*s13^2 +
                  2*s13*s23 + 3*s23^2)) + s12^2*(36*s13^2 + 90*s13*s23 +
                 17*s23^2) - 2*s12*(9*s13^3 - 9*s13^2*s23 - 15*s13*s23^2 +
                 5*s23^3))))*Log(p2q/(p1q + p2q + p3q)))/
         (4*p1q*(p2q + p3q)^2*(p1q + p2q + p3q)^2*s12*s13*s23^2) +
        ((9*p1q^4*(p2q + p3q)*s13*s23*(2*s12 + s23)*(s12 + s13 + s23) +
           9*(p2q + p3q)^2*(p2q^2 + p3q^2)*s13*s23*(s12 + s13 + s23)*
            (p3q*s12 + p2q*(2*s12 + s13 + 2*s23)) +
           p1q^3*(-(p3q^2*(18*s12^3*s13 + s12^2*s23*(-9*s13 + s23) +
                2*s23^2*(-4*s13^2 + s13*s23 + s23^2) + s12*s23*(-45*s13^2 -
                  27*s13*s23 + 2*s23^2))) + p2q*p3q*(s12*s23*(108*s13^2 +
                 99*s13*s23 - 4*s23^2) + s12^2*(36*s13^2 + 81*s13*s23 -
                 2*s23^2) + s23*(-9*s13^3 + 25*s13^2*s23 + 14*s13*s23^2 -
                 4*s23^3)) + p2q^2*(s12^2*(36*s13 - s23)*s23 + s23*
                (-9*s13^3 + 17*s13^2*s23 + 16*s13*s23^2 - 2*s23^3) + s12*
                (-18*s13^3 + 27*s13^2*s23 + 54*s13*s23^2 - 2*s23^3))) +
           p1q*(p2q + p3q)*(p2q*p3q^2*(-18*s12^3*s13 + s12^2*(36*s13^2 -
                 3*s23^2) + s23^2*(17*s13^2 - 9*s13*s23 - 2*s23^2) + s12*s23*
                (72*s13^2 + 11*s13*s23 - 2*s23^2)) - p3q^3*(18*s12^3*s13 + 3*
                s12^2*s23^2 + s23^2*(s13^2 + 11*s13*s23 + 2*s23^2) + s12*s23*
                (-36*s13^2 - 7*s13*s23 + 4*s23^2)) + p2q^2*p3q*
              (s23^2*(51*s13^2 + 25*s13*s23 - 2*s23^2) + s12^2*(36*s13^2 +
                 54*s13*s23 - s23^2) + s12*s13*(-18*s13^2 + 90*s13*s23 +
                 83*s23^2)) + p2q^3*(s12^2*(36*s13 - s23)*s23 + s23*
                (-18*s13^3 + 15*s13^2*s23 + 23*s13*s23^2 - 2*s23^3) + s12*
                (-18*s13^3 + 18*s13^2*s23 + 61*s13*s23^2 - 2*s23^3))) +
           2*p1q^2*(p2q*p3q^2*(-18*s12^3*s13 + s23^2*(17*s13^2 - 10*s13*s23 -
                 3*s23^2) + 2*s12^2*(18*s13^2 + 9*s13*s23 - s23^2) - 2*s12*
                s23*(-45*s13^2 - 15*s13*s23 + s23^2)) -
             p3q^3*(18*s12^3*s13 + s12^2*s23*(9*s13 + s23) + s23^3*
                (9*s13 + s23) + s12*s23*(-27*s13^2 - s13*s23 + s23^2)) +
             p2q^2*p3q*(s12^2*(36*s13^2 + 54*s13*s23 - s23^2) + s23*
                (-9*s13^3 + 34*s13^2*s23 + 16*s13*s23^2 - 3*s23^3) - s12*
                (18*s13^3 - 81*s13^2*s23 - 75*s13*s23^2 + s23^3)) +
             p2q^3*(27*s12^2*s13*s23 + 2*s12*s13*(-9*s13^2 + 9*s13*s23 +
                 23*s23^2) - s23*(9*s13^3 - 17*s13^2*s23 - 17*s13*s23^2 +
                 s23^3))))*Log(p3q/(p1q + p2q + p3q)))/(4*p1q*(p2q + p3q)^2*
          (p1q + p2q + p3q)^2*s12*s13*s23^2) +
        (2*(9*(p2q + p3q)^2*(p2q^2 + p3q^2)*s23*(s12 + s13 + s23)*
            (p2q*s13*(3*s12 + s13 + 2*s23) + p3q*s12*(s12 + 3*s13 + 2*s23)) +
           9*p1q^4*(p2q + p3q)*s23*(s13*s23*(s13 + s23) +
             s12^2*(4*s13 + s23) + s12*(4*s13^2 + 6*s13*s23 + s23^2)) +
           p1q*(p2q + p3q)*(p3q^3*(-18*s12^3*(2*s13 + s23) + 3*s12^2*s23*
                (6*s13 + 5*s23) - s23^2*(s13^2 + 11*s13*s23 + 2*s23^2) + s12*
                s23*(72*s13^2 + 70*s13*s23 + 23*s23^2)) +
             p2q*p3q^2*(-36*s12^3*s13 + s23^2*(17*s13^2 - 9*s13*s23 -
                 2*s23^2) + s12*s23*(126*s13^2 + 92*s13*s23 + 25*s23^2) +
               s12^2*(72*s13^2 + 90*s13*s23 + 51*s23^2)) +
             p2q^2*p3q*(s23^2*(51*s13^2 + 25*s13*s23 - 2*s23^2) + s12^2*
                (72*s13^2 + 126*s13*s23 + 17*s23^2) + s12*(-36*s13^3 +
                 90*s13^2*s23 + 92*s13*s23^2 - 9*s23^3)) +
             p2q^3*(s12^2*(72*s13 - s23)*s23 + s12*(-36*s13^3 + 18*s13^2*
                  s23 + 70*s13*s23^2 - 11*s23^3) + s23*(-18*s13^3 +
                 15*s13^2*s23 + 23*s13*s23^2 - 2*s23^3))) +
           p1q^3*(p3q^2*(-9*s12^3*(4*s13 + s23) + s12^2*s23*(36*s13 +
                 17*s23) - 2*s23^2*(-4*s13^2 + s13*s23 + s23^2) + s12*s23*
                (81*s13^2 + 81*s13*s23 + 16*s23^2)) +
             p2q*p3q*(-9*s12^3*s23 + s12*s23*(189*s13^2 + 198*s13*s23 +
                 14*s23^2) + s12^2*(72*s13^2 + 189*s13*s23 + 25*s23^2) + s23*
                (-9*s13^3 + 25*s13^2*s23 + 14*s13*s23^2 - 4*s23^3)) +
             p2q^2*(s12^2*s23*(81*s13 + 8*s23) + s23*(-9*s13^3 +
                 17*s13^2*s23 + 16*s13*s23^2 - 2*s23^3) + s12*(-36*s13^3 +
                 36*s13^2*s23 + 81*s13*s23^2 - 2*s23^3))) +
           2*p1q^2*(p3q^3*(-9*s12^3*(4*s13 + s23) - s23^3*(9*s13 + s23) +
               s12^2*s23*(9*s13 + 17*s23) + s12*s23*(54*s13^2 + 46*s13*s23 +
                 17*s23^2)) + p2q*p3q^2*(-9*s12^3*(4*s13 + s23) + s23^2*
                (17*s13^2 - 10*s13*s23 - 3*s23^2) + 2*s12*s23*(72*s13^2 +
                 51*s13*s23 + 8*s23^2) + s12^2*(72*s13^2 + 99*s13*s23 +
                 34*s23^2)) + p2q^2*p3q*(s12^2*(72*s13^2 + 144*s13*s23 +
                 17*s23^2) + s12*(-36*s13^3 + 99*s13^2*s23 + 102*s13*s23^2 -
                 10*s23^3) + s23*(-9*s13^3 + 34*s13^2*s23 + 16*s13*s23^2 -
                 3*s23^3)) + p2q^3*(54*s12^2*s13*s23 + s12*(-36*s13^3 +
                 9*s13^2*s23 + 46*s13*s23^2 - 9*s23^3) - s23*(9*s13^3 -
                 17*s13^2*s23 - 17*s13*s23^2 + s23^3))))*
          Log(-s12 - s13 - s23))/(9*p1q*(p2q + p3q)^2*(p1q + p2q + p3q)^2*s12*
          s13*s23^2) + ((9*p1q^4*(p2q + p3q)*s13*s23*(2*s12 + s23)*
            (s12 + s13 + s23) + 9*(p2q + p3q)^2*(p2q^2 + p3q^2)*s13*s23*
            (s12 + s13 + s23)*(p3q*s12 + p2q*(2*s12 + s13 + 2*s23)) +
           p1q^3*(-(p3q^2*(18*s12^3*s13 + s12^2*s23*(-9*s13 + s23) +
                2*s23^2*(-4*s13^2 + s13*s23 + s23^2) + s12*s23*(-45*s13^2 -
                  27*s13*s23 + 2*s23^2))) + p2q*p3q*(s12*s23*(108*s13^2 +
                 99*s13*s23 - 4*s23^2) + s12^2*(36*s13^2 + 81*s13*s23 -
                 2*s23^2) + s23*(-9*s13^3 + 25*s13^2*s23 + 14*s13*s23^2 -
                 4*s23^3)) + p2q^2*(s12^2*(36*s13 - s23)*s23 + s23*
                (-9*s13^3 + 17*s13^2*s23 + 16*s13*s23^2 - 2*s23^3) + s12*
                (-18*s13^3 + 27*s13^2*s23 + 54*s13*s23^2 - 2*s23^3))) +
           p1q*(p2q + p3q)*(p2q*p3q^2*(-18*s12^3*s13 + s12^2*(36*s13^2 -
                 3*s23^2) + s23^2*(17*s13^2 - 9*s13*s23 - 2*s23^2) + s12*s23*
                (72*s13^2 + 11*s13*s23 - 2*s23^2)) - p3q^3*(18*s12^3*s13 + 3*
                s12^2*s23^2 + s23^2*(s13^2 + 11*s13*s23 + 2*s23^2) + s12*s23*
                (-36*s13^2 - 7*s13*s23 + 4*s23^2)) + p2q^2*p3q*
              (s23^2*(51*s13^2 + 25*s13*s23 - 2*s23^2) + s12^2*(36*s13^2 +
                 54*s13*s23 - s23^2) + s12*s13*(-18*s13^2 + 90*s13*s23 +
                 83*s23^2)) + p2q^3*(s12^2*(36*s13 - s23)*s23 + s23*
                (-18*s13^3 + 15*s13^2*s23 + 23*s13*s23^2 - 2*s23^3) + s12*
                (-18*s13^3 + 18*s13^2*s23 + 61*s13*s23^2 - 2*s23^3))) +
           2*p1q^2*(p2q*p3q^2*(-18*s12^3*s13 + s23^2*(17*s13^2 - 10*s13*s23 -
                 3*s23^2) + 2*s12^2*(18*s13^2 + 9*s13*s23 - s23^2) - 2*s12*
                s23*(-45*s13^2 - 15*s13*s23 + s23^2)) -
             p3q^3*(18*s12^3*s13 + s12^2*s23*(9*s13 + s23) + s23^3*
                (9*s13 + s23) + s12*s23*(-27*s13^2 - s13*s23 + s23^2)) +
             p2q^2*p3q*(s12^2*(36*s13^2 + 54*s13*s23 - s23^2) + s23*
                (-9*s13^3 + 34*s13^2*s23 + 16*s13*s23^2 - 3*s23^3) - s12*
                (18*s13^3 - 81*s13^2*s23 - 75*s13*s23^2 + s23^3)) +
             p2q^3*(27*s12^2*s13*s23 + 2*s12*s13*(-9*s13^2 + 9*s13*s23 +
                 23*s23^2) - s23*(9*s13^3 - 17*s13^2*s23 - 17*s13*s23^2 +
                 s23^3))))*Log(s12/(s12 + s13 + s23)))/(4*p1q*(p2q + p3q)^2*
          (p1q + p2q + p3q)^2*s12*s13*s23^2) +
        ((9*p1q^4*(p2q + p3q)*s12*s23*(s12 + s13 + s23)*(2*s13 + s23) +
           9*(p2q + p3q)^2*(p2q^2 + p3q^2)*s12*s23*(s12 + s13 + s23)*
            (p2q*s13 + p3q*(s12 + 2*(s13 + s23))) + p1q*(p2q + p3q)*
            (p3q^3*(-18*s12^3*(s13 + s23) + 3*s12^2*s23*(6*s13 + 5*s23) -
               s23^2*(s13^2 + 2*s13*s23 + 2*s23^2) + s12*s23*(36*s13^2 +
                 61*s13*s23 + 23*s23^2)) + p2q*p3q^2*(-18*s12^3*s13 - s23^2*
                (s13^2 + 2*s23^2) + s12*s23*(54*s13^2 + 83*s13*s23 +
                 25*s23^2) + s12^2*(36*s13^2 + 90*s13*s23 + 51*s23^2)) +
             p2q^3*(s12^2*(36*s13 - s23)*s23 - s23^2*(3*s13^2 + 4*s13*s23 +
                 2*s23^2) + s12*(-18*s13^3 + 7*s13*s23^2 - 11*s23^3)) +
             p2q^2*p3q*(-(s23^2*(3*s13^2 + 2*s13*s23 + 2*s23^2)) + s12^2*
                (36*s13^2 + 72*s13*s23 + 17*s23^2) + s12*(-18*s13^3 +
                 11*s13*s23^2 - 9*s23^3))) +
           p1q^3*(p3q^2*(-9*s12^3*(2*s13 + s23) + s12^2*s23*(27*s13 +
                 17*s23) - s23^2*(s13^2 + 2*s13*s23 + 2*s23^2) + 2*s12*s23*
                (18*s13^2 + 27*s13*s23 + 8*s23^2)) + p2q*p3q*
              (-9*s12^3*s23 - 2*s23^2*(s13^2 + 2*s13*s23 + 2*s23^2) + s12*s23*
                (81*s13^2 + 99*s13*s23 + 14*s23^2) + s12^2*(36*s13^2 +
                 108*s13*s23 + 25*s23^2)) + p2q^2*(s12^2*s23*(45*s13 +
                 8*s23) - s23^2*(s13^2 + 2*s13*s23 + 2*s23^2) + s12*
                (-18*s13^3 + 9*s13^2*s23 + 27*s13*s23^2 - 2*s23^3))) +
           2*p1q^2*(p3q^3*(-s23^4 - 9*s12^3*(2*s13 + s23) + s12^2*s23*
                (18*s13 + 17*s23) + s12*s23*(27*s13^2 + 46*s13*s23 +
                 17*s23^2)) + p2q*p3q^2*(-9*s12^3*(2*s13 + s23) - s23^2*
                (s13^2 + s13*s23 + 3*s23^2) + s12*s23*(54*s13^2 +
                 75*s13*s23 + 16*s23^2) + s12^2*(36*s13^2 + 81*s13*s23 +
                 34*s23^2)) + p2q^3*(27*s12^2*s13*s23 - s23^2*(s13^2 +
                 s13*s23 + s23^2) + s12*(-18*s13^3 - 9*s13^2*s23 +
                 s13*s23^2 - 9*s23^3)) + p2q^2*p3q*(-(s23^2*(2*s13^2 +
                  2*s13*s23 + 3*s23^2)) + s12^2*(36*s13^2 + 90*s13*s23 +
                 17*s23^2) - 2*s12*(9*s13^3 - 9*s13^2*s23 - 15*s13*s23^2 +
                 5*s23^3))))*Log(s13/(s12 + s13 + s23)))/
         (4*p1q*(p2q + p3q)^2*(p1q + p2q + p3q)^2*s12*s13*s23^2) -
        ((9*(p2q + p3q)^2*(p2q^2 + p3q^2)*s23*(s12 + s13 + s23)*
            (p2q*s13*(3*s12 + s13 + 2*s23) + p3q*s12*(s12 + 3*s13 + 2*s23)) +
           9*p1q^4*(p2q + p3q)*s23*(s13*s23*(s13 + s23) +
             s12^2*(4*s13 + s23) + s12*(4*s13^2 + 6*s13*s23 + s23^2)) +
           p1q*(p2q + p3q)*(p2q*p3q^2*(-36*s12^3*s13 + s23^2*(8*s13^2 -
                 9*s13*s23 - 20*s23^2) + 6*s12^2*(12*s13^2 + 15*s13*s23 +
                 4*s23^2) + s12*s23*(126*s13^2 + 110*s13*s23 + 7*s23^2)) -
             p3q^3*(-6*s12^2*(3*s13 - 2*s23)*s23 + 18*s12^3*(2*s13 + s23) +
               s12*s23*(-72*s13^2 - 52*s13*s23 + 13*s23^2) + s23^2*
                (10*s13^2 + 29*s13*s23 + 20*s23^2)) + p2q^2*p3q*
              (s23^2*(24*s13^2 + 7*s13*s23 - 20*s23^2) + 2*s12^2*
                (36*s13^2 + 63*s13*s23 + 4*s23^2) + s12*(-36*s13^3 +
                 90*s13^2*s23 + 110*s13*s23^2 - 9*s23^3)) +
             p2q^3*(2*s12^2*(36*s13 - 5*s23)*s23 + s12*(-36*s13^3 +
                 18*s13^2*s23 + 52*s13*s23^2 - 29*s23^3) - s23*(18*s13^3 +
                 12*s13^2*s23 + 13*s13*s23^2 + 20*s23^3))) +
           2*p1q^2*(p3q^3*(-9*s12^3*(4*s13 + s23) + s12^2*s23*(9*s13 +
                 8*s23) - s23^3*(9*s13 + 10*s23) + s12*s23*(54*s13^2 +
                 55*s13*s23 + 8*s23^2)) + p2q*p3q^2*(-9*s12^3*(4*s13 + s23) +
               s23^2*(8*s13^2 - 19*s13*s23 - 30*s23^2) + s12*s23*
                (144*s13^2 + 129*s13*s23 - 2*s23^2) + s12^2*(72*s13^2 +
                 99*s13*s23 + 16*s23^2)) + p2q^3*(54*s12^2*s13*s23 + s23*
                (-9*s13^3 + 8*s13^2*s23 + 8*s13*s23^2 - 10*s23^3) + s12*
                (-36*s13^3 + 9*s13^2*s23 + 55*s13*s23^2 - 9*s23^3)) +
             p2q^2*p3q*(8*s12^2*(9*s13^2 + 18*s13*s23 + s23^2) + s12*
                (-36*s13^3 + 99*s13^2*s23 + 129*s13*s23^2 - 19*s23^3) - s23*
                (9*s13^3 - 16*s13^2*s23 + 2*s13*s23^2 + 30*s23^3))) -
           p1q^3*(p3q^2*(9*s12^3*(4*s13 + s23) - 4*s12^2*s23*(9*s13 +
                 2*s23) + s12*s23*(-81*s13^2 - 81*s13*s23 + 2*s23^2) + s23^2*
                (s13^2 + 20*s13*s23 + 20*s23^2)) + p2q^2*(s12^2*s23*
                (-81*s13 + s23) + s12*(36*s13^3 - 36*s13^2*s23 -
                 81*s13*s23^2 + 20*s23^3) + s23*(9*s13^3 - 8*s13^2*s23 +
                 2*s13*s23^2 + 20*s23^3)) + p2q*p3q*(9*s12^3*s23 - s12^2*
                (72*s13^2 + 189*s13*s23 + 7*s23^2) + s12*s23*(-189*s13^2 -
                 198*s13*s23 + 22*s23^2) + s23*(9*s13^3 - 7*s13^2*s23 +
                 22*s13*s23^2 + 40*s23^3))))*Log(s23/(s12 + s13 + s23)))/
         (36*p1q*(p2q + p3q)^2*(p1q + p2q + p3q)^2*s12*s13*s23^2)))/ep +
     Ioperator*((7*(1 - (4*s12)/s13 - (4*s13)/s12))/6 -
       (13*(s12 + s13 + s23)*(-(p1q^3*s23*(p3q*(9*s12 + s23) +
             p2q*(9*s13 + s23))) + 9*p2q*p3q*(p2q + p3q)*
           (p2q*s13*(3*s12 + s13 + 2*s23) + p3q*s12*(s12 + 3*s13 + 2*s23)) +
          p1q*(p3q^3*s12*(9*s12 + s23) + p2q^3*s13*(9*s13 + s23) +
            p2q*p3q^2*(63*s12*s13 + 9*s12*s23 + 8*s13*s23 - 2*s23^2) +
            p2q^2*p3q*(63*s12*s13 + 8*s12*s23 + 9*s13*s23 - 2*s23^2)) +
          p1q^2*(p3q^2*(9*s12^2 - 8*s12*s23 - s23^2) +
            p2q^2*(9*s13^2 - 8*s13*s23 - s23^2) + p2q*p3q*
             ((s13 - 2*s23)*s23 + s12*(54*s13 + s23)))))/
        (18*p1q*(p2q + p3q)*(p1q + p2q + p3q)^2*s12*s13*s23) +
       nl*((-1 + (4*s12)/s13 + (4*s13)/s12)/9 +
         ((s12 + s13 + s23)*(-(p1q^3*s23*(p3q*(9*s12 + s23) + p2q*
                (9*s13 + s23))) + 9*p2q*p3q*(p2q + p3q)*
             (p2q*s13*(3*s12 + s13 + 2*s23) + p3q*s12*(s12 + 3*s13 +
                2*s23)) + p1q*(p3q^3*s12*(9*s12 + s23) + p2q^3*s13*(9*s13 +
                s23) + p2q*p3q^2*(63*s12*s13 + 9*s12*s23 + 8*s13*s23 -
                2*s23^2) + p2q^2*p3q*(63*s12*s13 + 8*s12*s23 + 9*s13*s23 -
                2*s23^2)) + p1q^2*(p3q^2*(9*s12^2 - 8*s12*s23 - s23^2) +
              p2q^2*(9*s13^2 - 8*s13*s23 - s23^2) + p2q*p3q*((s13 - 2*s23)*
                 s23 + s12*(54*s13 + s23)))))/(9*p1q*(p2q + p3q)*
           (p1q + p2q + p3q)^2*s12*s13*s23)) +
       ((-9*(s12^2 + s13^2))/(4*s12*s13) -
         (9*(p1q^2*(6*p2q*p3q*s12*s13 + p3q^2*s12*(s12 - s23) +
              p2q^2*s13*(s13 - s23))*(s12 + s13 + s23) -
            p1q^3*(p3q*s12 + p2q*s13)*s23*(s12 + s13 + s23) +
            p2q*p3q*(p2q + p3q)*(s12 + s13 + s23)*(p2q*s13*(3*s12 + s13 +
                2*s23) + p3q*s12*(s12 + 3*s13 + 2*s23)) +
            p1q*(p3q^3*s12^2*(s12 + s13 + s23) + p2q^3*s13^2*(s12 + s13 +
                s23) + p2q^2*p3q*(s13*s23*(s13 + s23) + s12^2*(7*s13 + s23) +
                s12*(7*s13^2 + 9*s13*s23 + s23^2)) + p2q*p3q^2*(
                s13*s23*(s13 + s23) + s12^2*(7*s13 + s23) +
                s12*(7*s13^2 + 9*s13*s23 + s23^2)))))/(2*p1q*(p2q + p3q)*
           (p1q + p2q + p3q)^2*s12*s13*s23))*Log(p1q/(p1q + p2q + p3q)) +
       ((2 - (8*s12)/s13 + s13/s12)/4 -
         (-(p1q^3*s23*(s12 + s13 + s23)*(p2q*s23 + p3q*(9*s12 + s23))) +
           9*p2q*p3q*(p2q + p3q)*s12*(s12 + s13 + s23)*(p2q*s13 +
             p3q*(s12 + 2*(s13 + s23))) + p1q^2*(s12 + s13 + s23)*
            (p2q^2*(s13 - s23)*s23 + p3q^2*(9*s12^2 - 8*s12*s23 - s23^2) +
             p2q*p3q*((s13 - 2*s23)*s23 + s12*(27*s13 + s23))) +
           p1q*(p2q^3*s13*s23*(s12 + s13 + s23) + p3q^3*s12*(9*s12 + s23)*
              (s12 + s13 + s23) + 2*p2q^2*p3q*(-(s23^2*(s13 + s23)) + 2*s12^2*
                (9*s13 + 2*s23) + s12*(18*s13^2 + 22*s13*s23 + 3*s23^2)) +
             p2q*p3q^2*(9*s12^2*(3*s13 + s23) - s23*(s13^2 + 3*s13*s23 +
                 2*s23^2) + s12*(27*s13^2 + 35*s13*s23 + 7*s23^2))))/
          (2*p1q*(p2q + p3q)*(p1q + p2q + p3q)^2*s12*s13*s23))*
        Log(p2q/(p1q + p2q + p3q)) + ((2 + s12/s13 - (8*s13)/s12)/4 -
         (-(p1q^3*s23*(s12 + s13 + s23)*(p3q*s23 + p2q*(9*s13 + s23))) +
           9*p2q*p3q*(p2q + p3q)*s13*(s12 + s13 + s23)*(p3q*s12 +
             p2q*(2*s12 + s13 + 2*s23)) + p1q^2*(s12 + s13 + s23)*
            (p3q^2*(s12 - s23)*s23 + p2q^2*(9*s13^2 - 8*s13*s23 - s23^2) +
             p2q*p3q*((s13 - 2*s23)*s23 + s12*(27*s13 + s23))) +
           p1q*(p3q^3*s12*s23*(s12 + s13 + s23) + p2q^3*s13*(s12 + s13 + s23)*
              (9*s13 + s23) + p2q^2*p3q*(s12^2*(27*s13 - s23) + s12*
                (27*s13^2 + 35*s13*s23 - 3*s23^2) + s23*(9*s13^2 +
                 7*s13*s23 - 2*s23^2)) + 2*p2q*p3q^2*(18*s12^2*s13 + s23*
                (4*s13^2 + 3*s13*s23 - s23^2) + s12*(18*s13^2 + 22*s13*s23 -
                 s23^2))))/(2*p1q*(p2q + p3q)*(p1q + p2q + p3q)^2*s12*s13*
           s23))*Log(p3q/(p1q + p2q + p3q)) +
       ((4*(1 - (4*s12)/s13 - (4*s13)/s12))/9 -
         (4*(s12 + s13 + s23)*(-(p1q^3*s23*(p3q*(9*s12 + s23) + p2q*
                (9*s13 + s23))) + 9*p2q*p3q*(p2q + p3q)*
             (p2q*s13*(3*s12 + s13 + 2*s23) + p3q*s12*(s12 + 3*s13 +
                2*s23)) + p1q*(p3q^3*s12*(9*s12 + s23) + p2q^3*s13*(9*s13 +
                s23) + p2q*p3q^2*(63*s12*s13 + 9*s12*s23 + 8*s13*s23 -
                2*s23^2) + p2q^2*p3q*(63*s12*s13 + 8*s12*s23 + 9*s13*s23 -
                2*s23^2)) + p1q^2*(p3q^2*(9*s12^2 - 8*s12*s23 - s23^2) +
              p2q^2*(9*s13^2 - 8*s13*s23 - s23^2) + p2q*p3q*((s13 - 2*s23)*
                 s23 + s12*(54*s13 + s23)))))/(9*p1q*(p2q + p3q)*
           (p1q + p2q + p3q)^2*s12*s13*s23))*Log(-s12 - s13 - s23) +
       ((2 + s12/s13 - (8*s13)/s12)/4 -
         (-(p1q^3*s23*(s12 + s13 + s23)*(p3q*s23 + p2q*(9*s13 + s23))) +
           9*p2q*p3q*(p2q + p3q)*s13*(s12 + s13 + s23)*(p3q*s12 +
             p2q*(2*s12 + s13 + 2*s23)) + p1q^2*(s12 + s13 + s23)*
            (p3q^2*(s12 - s23)*s23 + p2q^2*(9*s13^2 - 8*s13*s23 - s23^2) +
             p2q*p3q*((s13 - 2*s23)*s23 + s12*(27*s13 + s23))) +
           p1q*(p3q^3*s12*s23*(s12 + s13 + s23) + p2q^3*s13*(s12 + s13 + s23)*
              (9*s13 + s23) + p2q^2*p3q*(s12^2*(27*s13 - s23) + s12*
                (27*s13^2 + 35*s13*s23 - 3*s23^2) + s23*(9*s13^2 +
                 7*s13*s23 - 2*s23^2)) + 2*p2q*p3q^2*(18*s12^2*s13 + s23*
                (4*s13^2 + 3*s13*s23 - s23^2) + s12*(18*s13^2 + 22*s13*s23 -
                 s23^2))))/(2*p1q*(p2q + p3q)*(p1q + p2q + p3q)^2*s12*s13*
           s23))*Log(s12/(s12 + s13 + s23)) +
       ((2 - (8*s12)/s13 + s13/s12)/4 -
         (-(p1q^3*s23*(s12 + s13 + s23)*(p2q*s23 + p3q*(9*s12 + s23))) +
           9*p2q*p3q*(p2q + p3q)*s12*(s12 + s13 + s23)*(p2q*s13 +
             p3q*(s12 + 2*(s13 + s23))) + p1q^2*(s12 + s13 + s23)*
            (p2q^2*(s13 - s23)*s23 + p3q^2*(9*s12^2 - 8*s12*s23 - s23^2) +
             p2q*p3q*((s13 - 2*s23)*s23 + s12*(27*s13 + s23))) +
           p1q*(p2q^3*s13*s23*(s12 + s13 + s23) + p3q^3*s12*(9*s12 + s23)*
              (s12 + s13 + s23) + 2*p2q^2*p3q*(-(s23^2*(s13 + s23)) + 2*s12^2*
                (9*s13 + 2*s23) + s12*(18*s13^2 + 22*s13*s23 + 3*s23^2)) +
             p2q*p3q^2*(9*s12^2*(3*s13 + s23) - s23*(s13^2 + 3*s13*s23 +
                 2*s23^2) + s12*(27*s13^2 + 35*s13*s23 + 7*s23^2))))/
          (2*p1q*(p2q + p3q)*(p1q + p2q + p3q)^2*s12*s13*s23))*
        Log(s13/(s12 + s13 + s23)) + ((-20 - s12/s13 - s13/s12)/36 +
         ((s12 + s13 + s23)*(-(p1q^3*s23*(9*p3q*s12 + 9*p2q*s13 + 10*p2q*
                s23 + 10*p3q*s23)) + 9*p2q*p3q*(p2q + p3q)*
             (p2q*s13*(3*s12 + s13 + 2*s23) + p3q*s12*(s12 + 3*s13 +
                2*s23)) + p1q^2*(p3q^2*(9*s12^2 + s12*s23 - 10*s23^2) +
              p2q^2*(9*s13^2 + s13*s23 - 10*s23^2) + 2*p2q*p3q*(
                5*(s13 - 2*s23)*s23 + s12*(27*s13 + 5*s23))) +
            p1q*(p3q^3*s12*(9*s12 + 10*s23) + p2q^3*s13*(9*s13 + 10*s23) +
              p2q^2*p3q*(63*s12*s13 - s12*s23 + 9*s13*s23 - 20*s23^2) +
              p2q*p3q^2*(9*s12*(7*s13 + s23) - s23*(s13 + 20*s23)))))/
          (18*p1q*(p2q + p3q)*(p1q + p2q + p3q)^2*s12*s13*s23))*
        Log(s23/(s12 + s13 + s23))));

l P1PolExp = ((((p3q^3*((18*s12^3 + 72*s12^2*s13 + 54*s12*s13^2)*s23 +
            (54*s12^2 + 90*s12*s13)*s23^2 + 36*s12*s23^3) +
          p2q^3*((54*s12^2*s13 + 72*s12*s13^2 + 18*s13^3)*s23 +
            (90*s12*s13 + 54*s13^2)*s23^2 + 36*s13*s23^3) +
          p1q^2*p2q*((72*s12^2*s13 + 72*s12*s13^2)*s23 +
            (18*s12^2 + 108*s12*s13 + 18*s13^2)*s23^2 + (18*s12 + 18*s13)*
             s23^3) + p1q*p2q^2*(-72*s12*s13^3 +
            (18*s12^2*s13 - 72*s12*s13^2 - 18*s13^3)*s23 +
            (-2*s12^2 - 54*s12*s13 - 20*s13^2)*s23^2 + (-22*s12 - 22*s13)*
             s23^3 - 4*s23^4) + p3q*(p1q^2*((72*s12^2*s13 + 72*s12*s13^2)*
               s23 + (18*s12^2 + 108*s12*s13 + 18*s13^2)*s23^2 +
              (18*s12 + 18*s13)*s23^3) + p2q^2*((18*s12^3 + 180*s12^2*s13 +
                198*s12*s13^2 + 36*s13^3)*s23 + (54*s12^2 + 270*s12*s13 +
                108*s13^2)*s23^2 + (36*s12 + 72*s13)*s23^3) +
            p1q*p2q*(144*s12^2*s13^2 + (-18*s12^3 + 90*s12^2*s13 +
                90*s12*s13^2 - 18*s13^3)*s23 + (-22*s12^2 - 36*s12*s13 -
                22*s13^2)*s23^2 + (-44*s12 - 44*s13)*s23^3 - 8*s23^4)) +
          p3q^2*(p2q*((36*s12^3 + 198*s12^2*s13 + 180*s12*s13^2 + 18*s13^3)*
               s23 + (108*s12^2 + 270*s12*s13 + 54*s13^2)*s23^2 +
              (72*s12 + 36*s13)*s23^3) + p1q*(-72*s12^3*s13 +
              (-18*s12^3 - 72*s12^2*s13 + 18*s12*s13^2)*s23 +
              (-20*s12^2 - 54*s12*s13 - 2*s13^2)*s23^2 + (-22*s12 - 22*s13)*
               s23^3 - 4*s23^4)))*E0.E0conj)/(9*p1q*p2q^2*s12*s13*s23^2 +
         18*p1q*p2q*p3q*s12*s13*s23^2 + 9*p1q*p3q^2*s12*s13*s23^2) +
       ((p2q^2*(288*s12^2*s13 + 288*s12*s13^2 + (432*s12*s13 + 144*s13^2)*
             s23 + 144*s13*s23^2) + p1q*p2q*((-36*s12^2 - 72*s12*s13 -
              36*s13^2)*s23 + (-44*s12 - 44*s13)*s23^2 - 8*s23^3) +
          p3q*(p2q*(288*s12^2*s13 + 288*s12*s13^2 + (72*s12^2 + 432*s12*s13 +
                72*s13^2)*s23 + (72*s12 + 72*s13)*s23^2) +
            p1q*((-108*s12^2 - 72*s12*s13 + 36*s13^2)*s23 + (-116*s12 +
                28*s13)*s23^2 - 8*s23^3)))*p1.E0conj*p2.E0)/
        (9*p1q*p2q*s12*s13*s23^2 + 9*p1q*p3q*s12*s13*s23^2) +
       ((p3q^2*(288*s12^2*s13 + 288*s12*s13^2 + (144*s12^2 + 432*s12*s13)*
             s23 + 144*s12*s23^2) + p2q^2*(288*s12^2*s13 + 288*s12*s13^2 +
            (432*s12*s13 + 144*s13^2)*s23 + 144*s13*s23^2) +
          p1q*p2q*((-144*s12*s13 - 144*s13^2)*s23 + (-16*s12 - 160*s13)*
             s23^2 - 16*s23^3) + p3q*(p2q*(576*s12^2*s13 + 576*s12*s13^2 +
              (144*s12^2 + 864*s12*s13 + 144*s13^2)*s23 + (144*s12 + 144*s13)*
               s23^2) + p1q*((-144*s12^2 - 144*s12*s13)*s23 +
              (-160*s12 - 16*s13)*s23^2 - 16*s23^3)))*p2.E0*p2.E0conj)/
        (9*p1q*p2q*s12*s13*s23^2 + 9*p1q*p3q*s12*s13*s23^2) +
       p1.E0*(((p2q^2*(288*s12^2*s13 + 288*s12*s13^2 + (432*s12*s13 +
                144*s13^2)*s23 + 144*s13*s23^2) + p1q*p2q*
             ((-72*s12^2 - 72*s12*s13)*s23 + (-80*s12 - 8*s13)*s23^2 -
              8*s23^3) + p1q*p3q*((-72*s12^2 - 72*s12*s13)*s23 +
              (-80*s12 - 8*s13)*s23^2 - 8*s23^3))*p1.E0conj)/
          (9*p1q*p2q*s12*s13*s23^2 + 9*p1q*p3q*s12*s13*s23^2) +
         ((p2q^2*(288*s12^2*s13 + 288*s12*s13^2 + (432*s12*s13 + 144*s13^2)*
               s23 + 144*s13*s23^2) + p1q*p2q*((-36*s12^2 - 72*s12*s13 -
                36*s13^2)*s23 + (-44*s12 - 44*s13)*s23^2 - 8*s23^3) +
            p3q*(p2q*(288*s12^2*s13 + 288*s12*s13^2 + (72*s12^2 +
                  432*s12*s13 + 72*s13^2)*s23 + (72*s12 + 72*s13)*s23^2) +
              p1q*((-108*s12^2 - 72*s12*s13 + 36*s13^2)*s23 +
                (-116*s12 + 28*s13)*s23^2 - 8*s23^3)))*p2.E0conj)/
          (9*p1q*p2q*s12*s13*s23^2 + 9*p1q*p3q*s12*s13*s23^2)))/ep^2 +
     (p2.E0*p2.E0conj*((nl*(p3q^2*(72*s12^2*s13 + 72*s12*s13^2 +
              (36*s12^2 + 108*s12*s13)*s23 + 36*s12*s23^2) +
            p2q^2*(72*s12^2*s13 + 72*s12*s13^2 + (108*s12*s13 + 36*s13^2)*
               s23 + 36*s13*s23^2) + p1q*p2q*((-36*s12*s13 - 36*s13^2)*s23 +
              (-4*s12 - 40*s13)*s23^2 - 4*s23^3) +
            p3q*(p2q*(144*s12^2*s13 + 144*s12*s13^2 + (36*s12^2 +
                  216*s12*s13 + 36*s13^2)*s23 + (36*s12 + 36*s13)*s23^2) +
              p1q*((-36*s12^2 - 36*s12*s13)*s23 + (-40*s12 - 4*s13)*s23^2 -
                4*s23^3))))/(9*p1q*p2q*s12*s13*s23^2 + 9*p1q*p3q*s12*s13*
            s23^2) + (p3q^2*(-252*s12^2*s13 - 252*s12*s13^2 +
             (-126*s12^2 - 378*s12*s13)*s23 - 126*s12*s23^2) +
           p2q^2*(-252*s12^2*s13 - 252*s12*s13^2 + (-378*s12*s13 - 126*s13^2)*
              s23 - 126*s13*s23^2) + p1q*p2q*((126*s12*s13 + 126*s13^2)*s23 +
             (14*s12 + 140*s13)*s23^2 + 14*s23^3) +
           p3q*(p2q*(-504*s12^2*s13 - 504*s12*s13^2 + (-126*s12^2 -
                 756*s12*s13 - 126*s13^2)*s23 + (-126*s12 - 126*s13)*s23^2) +
             p1q*((126*s12^2 + 126*s12*s13)*s23 + (140*s12 + 14*s13)*s23^2 +
               14*s23^3)))/(3*p1q*p2q*s12*s13*s23^2 + 3*p1q*p3q*s12*s13*
            s23^2) + ((p3q^2*(-36*s12^2*s13 - 36*s12*s13^2 + (-18*s12^2 -
                54*s12*s13)*s23 - 18*s12*s23^2) + p2q^2*(-36*s12^2*s13 -
              36*s12*s13^2 + (-54*s12*s13 - 18*s13^2)*s23 - 18*s13*s23^2) +
            p1q*p2q*((18*s12*s13 + 18*s13^2)*s23 + 18*s13*s23^2) +
            p3q*(p1q*((18*s12^2 + 18*s12*s13)*s23 + 18*s12*s23^2) +
              p2q*(-72*s12^2*s13 - 72*s12*s13^2 + (-18*s12^2 - 108*s12*s13 -
                  18*s13^2)*s23 + (-18*s12 - 18*s13)*s23^2)))*
           Log(p1q/(p1q + p2q + p3q)))/(p1q*p2q*s12*s13*s23^2 +
           p1q*p3q*s12*s13*s23^2) +
         ((p2q^2*(-18*s12^2*s13 - 18*s12*s13^2 - 18*s12*s13*s23) +
            p3q^2*(-18*s12^2*s13 - 18*s12*s13^2 + (-18*s12^2 - 36*s12*s13)*
               s23 - 18*s12*s23^2) + p1q*p2q*((2*s12 + 2*s13)*s23^2 +
              2*s23^3) + p3q*(p2q*(-36*s12^2*s13 - 36*s12*s13^2 +
                (-18*s12^2 - 54*s12*s13)*s23 - 18*s12*s23^2) +
              p1q*((18*s12^2 + 18*s12*s13)*s23 + (20*s12 + 2*s13)*s23^2 +
                2*s23^3)))*Log(p2q/(p1q + p2q + p3q)))/
          (p1q*p2q*s12*s13*s23^2 + p1q*p3q*s12*s13*s23^2) +
         ((p3q^2*(-18*s12^2*s13 - 18*s12*s13^2 - 18*s12*s13*s23) +
            p2q^2*(-18*s12^2*s13 - 18*s12*s13^2 + (-36*s12*s13 - 18*s13^2)*
               s23 - 18*s13*s23^2) + p1q*p2q*((18*s12*s13 + 18*s13^2)*s23 +
              (2*s12 + 20*s13)*s23^2 + 2*s23^3) +
            p3q*(p2q*(-36*s12^2*s13 - 36*s12*s13^2 + (-54*s12*s13 - 18*s13^2)*
                 s23 - 18*s13*s23^2) + p1q*((2*s12 + 2*s13)*s23^2 +
                2*s23^3)))*Log(p3q/(p1q + p2q + p3q)))/
          (p1q*p2q*s12*s13*s23^2 + p1q*p3q*s12*s13*s23^2) +
         ((p3q^2*(-288*s12^2*s13 - 288*s12*s13^2 + (-144*s12^2 - 432*s12*s13)*
               s23 - 144*s12*s23^2) + p2q^2*(-288*s12^2*s13 - 288*s12*s13^2 +
              (-432*s12*s13 - 144*s13^2)*s23 - 144*s13*s23^2) +
            p1q*p2q*((144*s12*s13 + 144*s13^2)*s23 + (16*s12 + 160*s13)*s23^
                2 + 16*s23^3) + p3q*(p2q*(-576*s12^2*s13 - 576*s12*s13^2 +
                (-144*s12^2 - 864*s12*s13 - 144*s13^2)*s23 +
                (-144*s12 - 144*s13)*s23^2) + p1q*((144*s12^2 + 144*s12*s13)*
                 s23 + (160*s12 + 16*s13)*s23^2 + 16*s23^3)))*
           Log(-s12 - s13 - s23))/(9*p1q*p2q*s12*s13*s23^2 +
           9*p1q*p3q*s12*s13*s23^2) +
         ((p3q^2*(-18*s12^2*s13 - 18*s12*s13^2 - 18*s12*s13*s23) +
            p2q^2*(-18*s12^2*s13 - 18*s12*s13^2 + (-36*s12*s13 - 18*s13^2)*
               s23 - 18*s13*s23^2) + p1q*p2q*((18*s12*s13 + 18*s13^2)*s23 +
              (2*s12 + 20*s13)*s23^2 + 2*s23^3) +
            p3q*(p2q*(-36*s12^2*s13 - 36*s12*s13^2 + (-54*s12*s13 - 18*s13^2)*
                 s23 - 18*s13*s23^2) + p1q*((2*s12 + 2*s13)*s23^2 +
                2*s23^3)))*Log(s12/(s12 + s13 + s23)))/
          (p1q*p2q*s12*s13*s23^2 + p1q*p3q*s12*s13*s23^2) +
         ((p2q^2*(-18*s12^2*s13 - 18*s12*s13^2 - 18*s12*s13*s23) +
            p3q^2*(-18*s12^2*s13 - 18*s12*s13^2 + (-18*s12^2 - 36*s12*s13)*
               s23 - 18*s12*s23^2) + p1q*p2q*((2*s12 + 2*s13)*s23^2 +
              2*s23^3) + p3q*(p2q*(-36*s12^2*s13 - 36*s12*s13^2 +
                (-18*s12^2 - 54*s12*s13)*s23 - 18*s12*s23^2) +
              p1q*((18*s12^2 + 18*s12*s13)*s23 + (20*s12 + 2*s13)*s23^2 +
                2*s23^3)))*Log(s13/(s12 + s13 + s23)))/
          (p1q*p2q*s12*s13*s23^2 + p1q*p3q*s12*s13*s23^2) +
         ((p3q^2*(36*s12^2*s13 + 36*s12*s13^2 + (18*s12^2 + 54*s12*s13)*s23 +
              18*s12*s23^2) + p2q^2*(36*s12^2*s13 + 36*s12*s13^2 +
              (54*s12*s13 + 18*s13^2)*s23 + 18*s13*s23^2) +
            p1q*p2q*((-18*s12*s13 - 18*s13^2)*s23 + (-20*s12 - 38*s13)*s23^
                2 - 20*s23^3) + p3q*(p2q*(72*s12^2*s13 + 72*s12*s13^2 +
                (18*s12^2 + 108*s12*s13 + 18*s13^2)*s23 + (18*s12 + 18*s13)*
                 s23^2) + p1q*((-18*s12^2 - 18*s12*s13)*s23 +
                (-38*s12 - 20*s13)*s23^2 - 20*s23^3)))*
           Log(s23/(s12 + s13 + s23)))/(9*p1q*p2q*s12*s13*s23^2 +
           9*p1q*p3q*s12*s13*s23^2)) + p1.E0conj*p2.E0*
        ((nl*(p2q^2*(72*s12^2*s13 + 72*s12*s13^2 + (108*s12*s13 + 36*s13^2)*
               s23 + 36*s13*s23^2) + p1q*p2q*((-9*s12^2 - 18*s12*s13 -
                9*s13^2)*s23 + (-11*s12 - 11*s13)*s23^2 - 2*s23^3) +
            p3q*(p2q*(72*s12^2*s13 + 72*s12*s13^2 + (18*s12^2 + 108*s12*s13 +
                  18*s13^2)*s23 + (18*s12 + 18*s13)*s23^2) +
              p1q*((-27*s12^2 - 18*s12*s13 + 9*s13^2)*s23 + (-29*s12 + 7*s13)*
                 s23^2 - 2*s23^3))))/(9*p1q*p2q*s12*s13*s23^2 +
           9*p1q*p3q*s12*s13*s23^2) +
         (p2q^2*(-504*s12^2*s13 - 504*s12*s13^2 + (-756*s12*s13 - 252*s13^2)*
              s23 - 252*s13*s23^2) + p1q*p2q*((87*s12^2 + 126*s12*s13 + 39*
                s13^2)*s23 + (101*s12 + 53*s13)*s23^2 + 14*s23^3) +
           p3q*(p2q*(-504*s12^2*s13 - 504*s12*s13^2 + (-126*s12^2 -
                 756*s12*s13 - 126*s13^2)*s23 + (-126*s12 - 126*s13)*s23^2) +
             p1q*((213*s12^2 + 126*s12*s13 - 87*s13^2)*s23 + (227*s12 -
                 73*s13)*s23^2 + 14*s23^3)))/(6*p1q*p2q*s12*s13*s23^2 +
           6*p1q*p3q*s12*s13*s23^2) +
         ((p2q^2*(-72*s12^2*s13 - 72*s12*s13^2 + (-108*s12*s13 - 36*s13^2)*
               s23 - 36*s13*s23^2) + p1q*p2q*((9*s12^2 + 18*s12*s13 +
                9*s13^2)*s23 + (9*s12 + 9*s13)*s23^2) +
            p3q*(p2q*(-72*s12^2*s13 - 72*s12*s13^2 + (-18*s12^2 -
                  108*s12*s13 - 18*s13^2)*s23 + (-18*s12 - 18*s13)*s23^2) +
              p1q*((27*s12^2 + 18*s12*s13 - 9*s13^2)*s23 + (27*s12 - 9*s13)*
                 s23^2)))*Log(p1q/(p1q + p2q + p3q)))/
          (2*p1q*p2q*s12*s13*s23^2 + 2*p1q*p3q*s12*s13*s23^2) +
         ((p2q^2*(-36*s12^2*s13 - 36*s12*s13^2 - 36*s12*s13*s23) +
            p1q*p2q*((9*s12^2 + 9*s12*s13)*s23 + (11*s12 + 2*s13)*s23^2 +
              2*s23^3) + p3q*(p2q*(-36*s12^2*s13 - 36*s12*s13^2 +
                (-18*s12^2 - 54*s12*s13)*s23 - 18*s12*s23^2) +
              p1q*((27*s12^2 + 27*s12*s13)*s23 + (29*s12 + 2*s13)*s23^2 +
                2*s23^3)))*Log(p2q/(p1q + p2q + p3q)))/
          (2*p1q*p2q*s12*s13*s23^2 + 2*p1q*p3q*s12*s13*s23^2) +
         ((p2q^2*(-36*s12^2*s13 - 36*s12*s13^2 + (-72*s12*s13 - 36*s13^2)*
               s23 - 36*s13*s23^2) + p1q*p2q*((9*s12*s13 + 9*s13^2)*s23 +
              (2*s12 + 11*s13)*s23^2 + 2*s23^3) +
            p3q*(p2q*(-36*s12^2*s13 - 36*s12*s13^2 + (-54*s12*s13 - 18*s13^2)*
                 s23 - 18*s13*s23^2) + p1q*((-9*s12*s13 - 9*s13^2)*s23 +
                (2*s12 - 7*s13)*s23^2 + 2*s23^3)))*
           Log(p3q/(p1q + p2q + p3q)))/(2*p1q*p2q*s12*s13*s23^2 +
           2*p1q*p3q*s12*s13*s23^2) +
         ((p2q^2*(-288*s12^2*s13 - 288*s12*s13^2 + (-432*s12*s13 - 144*s13^2)*
               s23 - 144*s13*s23^2) + p1q*p2q*((36*s12^2 + 72*s12*s13 +
                36*s13^2)*s23 + (44*s12 + 44*s13)*s23^2 + 8*s23^3) +
            p3q*(p2q*(-288*s12^2*s13 - 288*s12*s13^2 + (-72*s12^2 -
                  432*s12*s13 - 72*s13^2)*s23 + (-72*s12 - 72*s13)*s23^2) +
              p1q*((108*s12^2 + 72*s12*s13 - 36*s13^2)*s23 +
                (116*s12 - 28*s13)*s23^2 + 8*s23^3)))*Log(-s12 - s13 - s23))/
          (9*p1q*p2q*s12*s13*s23^2 + 9*p1q*p3q*s12*s13*s23^2) +
         ((p2q^2*(-36*s12^2*s13 - 36*s12*s13^2 + (-72*s12*s13 - 36*s13^2)*
               s23 - 36*s13*s23^2) + p1q*p2q*((9*s12*s13 + 9*s13^2)*s23 +
              (2*s12 + 11*s13)*s23^2 + 2*s23^3) +
            p3q*(p2q*(-36*s12^2*s13 - 36*s12*s13^2 + (-54*s12*s13 - 18*s13^2)*
                 s23 - 18*s13*s23^2) + p1q*((-9*s12*s13 - 9*s13^2)*s23 +
                (2*s12 - 7*s13)*s23^2 + 2*s23^3)))*
           Log(s12/(s12 + s13 + s23)))/(2*p1q*p2q*s12*s13*s23^2 +
           2*p1q*p3q*s12*s13*s23^2) +
         ((p2q^2*(-36*s12^2*s13 - 36*s12*s13^2 - 36*s12*s13*s23) +
            p1q*p2q*((9*s12^2 + 9*s12*s13)*s23 + (11*s12 + 2*s13)*s23^2 +
              2*s23^3) + p3q*(p2q*(-36*s12^2*s13 - 36*s12*s13^2 +
                (-18*s12^2 - 54*s12*s13)*s23 - 18*s12*s23^2) +
              p1q*((27*s12^2 + 27*s12*s13)*s23 + (29*s12 + 2*s13)*s23^2 +
                2*s23^3)))*Log(s13/(s12 + s13 + s23)))/
          (2*p1q*p2q*s12*s13*s23^2 + 2*p1q*p3q*s12*s13*s23^2) +
         ((p2q^2*(72*s12^2*s13 + 72*s12*s13^2 + (108*s12*s13 + 36*s13^2)*
               s23 + 36*s13*s23^2) + p1q*p2q*((-9*s12^2 - 18*s12*s13 -
                9*s13^2)*s23 + (-29*s12 - 29*s13)*s23^2 - 20*s23^3) +
            p3q*(p2q*(72*s12^2*s13 + 72*s12*s13^2 + (18*s12^2 + 108*s12*s13 +
                  18*s13^2)*s23 + (18*s12 + 18*s13)*s23^2) +
              p1q*((-27*s12^2 - 18*s12*s13 + 9*s13^2)*s23 +
                (-47*s12 - 11*s13)*s23^2 - 20*s23^3)))*
           Log(s23/(s12 + s13 + s23)))/(18*p1q*p2q*s12*s13*s23^2 +
           18*p1q*p3q*s12*s13*s23^2)) + E0.E0conj*
        ((nl*(p3q^3*((9*s12^3 + 36*s12^2*s13 + 27*s12*s13^2)*s23 +
              (27*s12^2 + 45*s12*s13)*s23^2 + 18*s12*s23^3) +
            p2q^3*((27*s12^2*s13 + 36*s12*s13^2 + 9*s13^3)*s23 +
              (45*s12*s13 + 27*s13^2)*s23^2 + 18*s13*s23^3) +
            p1q^2*p2q*((36*s12^2*s13 + 36*s12*s13^2)*s23 + (9*s12^2 +
                54*s12*s13 + 9*s13^2)*s23^2 + (9*s12 + 9*s13)*s23^3) +
            p1q*p2q^2*(-36*s12*s13^3 + (9*s12^2*s13 - 36*s12*s13^2 - 9*s13^3)*
               s23 + (-s12^2 - 27*s12*s13 - 10*s13^2)*s23^2 +
              (-11*s12 - 11*s13)*s23^3 - 2*s23^4) +
            p3q*(p1q^2*((36*s12^2*s13 + 36*s12*s13^2)*s23 +
                (9*s12^2 + 54*s12*s13 + 9*s13^2)*s23^2 + (9*s12 + 9*s13)*
                 s23^3) + p2q^2*((9*s12^3 + 90*s12^2*s13 + 99*s12*s13^2 +
                  18*s13^3)*s23 + (27*s12^2 + 135*s12*s13 + 54*s13^2)*s23^2 +
                (18*s12 + 36*s13)*s23^3) + p1q*p2q*(72*s12^2*s13^2 +
                (-9*s12^3 + 45*s12^2*s13 + 45*s12*s13^2 - 9*s13^3)*s23 +
                (-11*s12^2 - 18*s12*s13 - 11*s13^2)*s23^2 +
                (-22*s12 - 22*s13)*s23^3 - 4*s23^4)) +
            p3q^2*(p2q*((18*s12^3 + 99*s12^2*s13 + 90*s12*s13^2 + 9*s13^3)*
                 s23 + (54*s12^2 + 135*s12*s13 + 27*s13^2)*s23^2 +
                (36*s12 + 18*s13)*s23^3) + p1q*(-36*s12^3*s13 +
                (-9*s12^3 - 36*s12^2*s13 + 9*s12*s13^2)*s23 +
                (-10*s12^2 - 27*s12*s13 - s13^2)*s23^2 + (-11*s12 - 11*s13)*
                 s23^3 - 2*s23^4))))/(18*p1q*p2q^2*s12*s13*s23^2 +
           36*p1q*p2q*p3q*s12*s13*s23^2 + 18*p1q*p3q^2*s12*s13*s23^2) +
         (p3q^3*((-189*s12^3 - 756*s12^2*s13 - 567*s12*s13^2)*s23 +
             (-567*s12^2 - 945*s12*s13)*s23^2 - 378*s12*s23^3) +
           p1q^2*p2q*((-756*s12^2*s13 - 756*s12*s13^2)*s23 +
             (-189*s12^2 - 1134*s12*s13 - 189*s13^2)*s23^2 +
             (-189*s12 - 189*s13)*s23^3) +
           p2q^3*((-567*s12^2*s13 - 756*s12*s13^2 - 189*s13^3)*s23 +
             (-945*s12*s13 - 567*s13^2)*s23^2 - 378*s13*s23^3) +
           p1q*p2q^2*(756*s12*s13^3 + (-189*s12^2*s13 + 756*s12*s13^2 + 189*
                s13^3)*s23 + (-43*s12^2 + 583*s12*s13 + 146*s13^2)*s23^2 +
             (231*s12 + 231*s13)*s23^3 + 42*s23^4) +
           p3q^2*(p2q*((-378*s12^3 - 2079*s12^2*s13 - 1890*s12*s13^2 -
                 189*s13^3)*s23 + (-1134*s12^2 - 2835*s12*s13 - 567*s13^2)*
                s23^2 + (-756*s12 - 378*s13)*s23^3) +
             p1q*(756*s12^3*s13 + (189*s12^3 + 756*s12^2*s13 - 189*s12*s13^2)*
                s23 + (146*s12^2 + 583*s12*s13 - 43*s13^2)*s23^2 +
               (231*s12 + 231*s13)*s23^3 + 42*s23^4)) +
           p3q*(p2q^2*((-189*s12^3 - 1890*s12^2*s13 - 2079*s12*s13^2 -
                 378*s13^3)*s23 + (-567*s12^2 - 2835*s12*s13 - 1134*s13^2)*
                s23^2 + (-378*s12 - 756*s13)*s23^3) +
             p1q^2*((-756*s12^2*s13 - 756*s12*s13^2)*s23 + (-189*s12^2 -
                 1134*s12*s13 - 189*s13^2)*s23^2 + (-189*s12 - 189*s13)*
                s23^3) + p1q*p2q*(-1512*s12^2*s13^2 + (189*s12^3 -
                 945*s12^2*s13 - 945*s12*s13^2 + 189*s13^3)*s23 +
               (103*s12^2 + 410*s12*s13 + 103*s13^2)*s23^2 + (462*s12 +
                 462*s13)*s23^3 + 84*s23^4)))/(36*p1q*p2q^2*s12*s13*s23^2 +
           72*p1q*p2q*p3q*s12*s13*s23^2 + 36*p1q*p3q^2*s12*s13*s23^2) +
         ((p3q^3*((-9*s12^3 - 36*s12^2*s13 - 27*s12*s13^2)*s23 +
              (-27*s12^2 - 45*s12*s13)*s23^2 - 18*s12*s23^3) +
            p1q^2*p2q*((-36*s12^2*s13 - 36*s12*s13^2)*s23 + (-9*s12^2 -
                54*s12*s13 - 9*s13^2)*s23^2 + (-9*s12 - 9*s13)*s23^3) +
            p2q^3*((-27*s12^2*s13 - 36*s12*s13^2 - 9*s13^3)*s23 +
              (-45*s12*s13 - 27*s13^2)*s23^2 - 18*s13*s23^3) +
            p1q*p2q^2*(36*s12*s13^3 + (-9*s12^2*s13 + 36*s12*s13^2 + 9*s13^3)*
               s23 + (27*s12*s13 + 9*s13^2)*s23^2 + (9*s12 + 9*s13)*s23^3) +
            p3q^2*(p2q*((-18*s12^3 - 99*s12^2*s13 - 90*s12*s13^2 - 9*s13^3)*
                 s23 + (-54*s12^2 - 135*s12*s13 - 27*s13^2)*s23^2 +
                (-36*s12 - 18*s13)*s23^3) + p1q*(36*s12^3*s13 +
                (9*s12^3 + 36*s12^2*s13 - 9*s12*s13^2)*s23 +
                (9*s12^2 + 27*s12*s13)*s23^2 + (9*s12 + 9*s13)*s23^3)) +
            p3q*(p2q^2*((-9*s12^3 - 90*s12^2*s13 - 99*s12*s13^2 - 18*s13^3)*
                 s23 + (-27*s12^2 - 135*s12*s13 - 54*s13^2)*s23^2 +
                (-18*s12 - 36*s13)*s23^3) + p1q^2*((-36*s12^2*s13 -
                  36*s12*s13^2)*s23 + (-9*s12^2 - 54*s12*s13 - 9*s13^2)*
                 s23^2 + (-9*s12 - 9*s13)*s23^3) + p1q*p2q*(-72*s12^2*s13^2 +
                (9*s12^3 - 45*s12^2*s13 - 45*s12*s13^2 + 9*s13^3)*s23 +
                (9*s12^2 + 18*s12*s13 + 9*s13^2)*s23^2 + (18*s12 + 18*s13)*
                 s23^3)))*Log(p1q/(p1q + p2q + p3q)))/
          (4*p1q*p2q^2*s12*s13*s23^2 + 8*p1q*p2q*p3q*s12*s13*s23^2 +
           4*p1q*p3q^2*s12*s13*s23^2) +
         ((p2q^3*((-9*s12^2*s13 - 9*s12*s13^2)*s23 - 9*s12*s13*s23^2) +
            p3q^3*((-9*s12^3 - 27*s12^2*s13 - 18*s12*s13^2)*s23 +
              (-27*s12^2 - 36*s12*s13)*s23^2 - 18*s12*s23^3) +
            p1q^2*p2q*((-18*s12^2*s13 - 18*s12*s13^2)*s23 + (-9*s12^2 -
                27*s12*s13)*s23^2 - 9*s12*s23^3) + p1q*p2q^2*
             (18*s12*s13^3 + (-9*s12^2*s13 + 27*s12*s13^2)*s23 +
              (s12^2 + 18*s12*s13 + s13^2)*s23^2 + (11*s12 + 2*s13)*s23^3 +
              2*s23^4) + p3q^2*(p2q*((-18*s12^3 - 63*s12^2*s13 -
                  45*s12*s13^2)*s23 + (-54*s12^2 - 81*s12*s13)*s23^2 -
                36*s12*s23^3) + p1q*(18*s12^3*s13 + (9*s12^3 + 9*s12^2*s13)*
                 s23 + (10*s12^2 + 9*s12*s13 + s13^2)*s23^2 +
                (11*s12 + 2*s13)*s23^3 + 2*s23^4)) +
            p3q*(p2q^2*((-9*s12^3 - 45*s12^2*s13 - 36*s12*s13^2)*s23 +
                (-27*s12^2 - 54*s12*s13)*s23^2 - 18*s12*s23^3) +
              p1q^2*((-18*s12^2*s13 - 18*s12*s13^2)*s23 + (-9*s12^2 -
                  27*s12*s13)*s23^2 - 9*s12*s23^3) + p1q*p2q*(-36*s12^2*
                 s13^2 + (9*s12^3 - 36*s12^2*s13 - 9*s12*s13^2)*s23 +
                (11*s12^2 + 9*s12*s13 + 2*s13^2)*s23^2 + (22*s12 + 4*s13)*
                 s23^3 + 4*s23^4)))*Log(p2q/(p1q + p2q + p3q)))/
          (4*p1q*p2q^2*s12*s13*s23^2 + 8*p1q*p2q*p3q*s12*s13*s23^2 +
           4*p1q*p3q^2*s12*s13*s23^2) +
         ((p3q^3*((-9*s12^2*s13 - 9*s12*s13^2)*s23 - 9*s12*s13*s23^2) +
            p2q^3*((-18*s12^2*s13 - 27*s12*s13^2 - 9*s13^3)*s23 +
              (-36*s12*s13 - 27*s13^2)*s23^2 - 18*s13*s23^3) +
            p1q^2*p2q*((-18*s12^2*s13 - 18*s12*s13^2)*s23 + (-27*s12*s13 -
                9*s13^2)*s23^2 - 9*s13*s23^3) + p1q*p2q^2*(18*s12*s13^3 +
              (9*s12*s13^2 + 9*s13^3)*s23 + (s12^2 + 9*s12*s13 + 10*s13^2)*
               s23^2 + (2*s12 + 11*s13)*s23^3 + 2*s23^4) +
            p3q^2*(p2q*((-36*s12^2*s13 - 45*s12*s13^2 - 9*s13^3)*s23 +
                (-54*s12*s13 - 27*s13^2)*s23^2 - 18*s13*s23^3) +
              p1q*(18*s12^3*s13 + (27*s12^2*s13 - 9*s12*s13^2)*s23 +
                (s12^2 + 18*s12*s13 + s13^2)*s23^2 + (2*s12 + 11*s13)*s23^3 +
                2*s23^4)) + p3q*(p2q^2*((-45*s12^2*s13 - 63*s12*s13^2 -
                  18*s13^3)*s23 + (-81*s12*s13 - 54*s13^2)*s23^2 -
                36*s13*s23^3) + p1q^2*((-18*s12^2*s13 - 18*s12*s13^2)*s23 +
                (-27*s12*s13 - 9*s13^2)*s23^2 - 9*s13*s23^3) +
              p1q*p2q*(-36*s12^2*s13^2 + (-9*s12^2*s13 - 36*s12*s13^2 +
                  9*s13^3)*s23 + (2*s12^2 + 9*s12*s13 + 11*s13^2)*s23^2 +
                (4*s12 + 22*s13)*s23^3 + 4*s23^4)))*
           Log(p3q/(p1q + p2q + p3q)))/(4*p1q*p2q^2*s12*s13*s23^2 +
           8*p1q*p2q*p3q*s12*s13*s23^2 + 4*p1q*p3q^2*s12*s13*s23^2) +
         ((p3q^3*((-18*s12^3 - 72*s12^2*s13 - 54*s12*s13^2)*s23 +
              (-54*s12^2 - 90*s12*s13)*s23^2 - 36*s12*s23^3) +
            p1q^2*p2q*((-72*s12^2*s13 - 72*s12*s13^2)*s23 + (-18*s12^2 -
                108*s12*s13 - 18*s13^2)*s23^2 + (-18*s12 - 18*s13)*s23^3) +
            p2q^3*((-54*s12^2*s13 - 72*s12*s13^2 - 18*s13^3)*s23 +
              (-90*s12*s13 - 54*s13^2)*s23^2 - 36*s13*s23^3) +
            p1q*p2q^2*(72*s12*s13^3 + (-18*s12^2*s13 + 72*s12*s13^2 +
                18*s13^3)*s23 + (2*s12^2 + 54*s12*s13 + 20*s13^2)*s23^2 +
              (22*s12 + 22*s13)*s23^3 + 4*s23^4) +
            p3q^2*(p2q*((-36*s12^3 - 198*s12^2*s13 - 180*s12*s13^2 -
                  18*s13^3)*s23 + (-108*s12^2 - 270*s12*s13 - 54*s13^2)*
                 s23^2 + (-72*s12 - 36*s13)*s23^3) + p1q*(72*s12^3*s13 +
                (18*s12^3 + 72*s12^2*s13 - 18*s12*s13^2)*s23 +
                (20*s12^2 + 54*s12*s13 + 2*s13^2)*s23^2 + (22*s12 + 22*s13)*
                 s23^3 + 4*s23^4)) + p3q*(p2q^2*((-18*s12^3 - 180*s12^2*s13 -
                  198*s12*s13^2 - 36*s13^3)*s23 + (-54*s12^2 - 270*s12*s13 -
                  108*s13^2)*s23^2 + (-36*s12 - 72*s13)*s23^3) +
              p1q^2*((-72*s12^2*s13 - 72*s12*s13^2)*s23 + (-18*s12^2 -
                  108*s12*s13 - 18*s13^2)*s23^2 + (-18*s12 - 18*s13)*s23^3) +
              p1q*p2q*(-144*s12^2*s13^2 + (18*s12^3 - 90*s12^2*s13 -
                  90*s12*s13^2 + 18*s13^3)*s23 + (22*s12^2 + 36*s12*s13 +
                  22*s13^2)*s23^2 + (44*s12 + 44*s13)*s23^3 + 8*s23^4)))*
           Log(-s12 - s13 - s23))/(9*p1q*p2q^2*s12*s13*s23^2 +
           18*p1q*p2q*p3q*s12*s13*s23^2 + 9*p1q*p3q^2*s12*s13*s23^2) +
         ((p3q^3*((-9*s12^2*s13 - 9*s12*s13^2)*s23 - 9*s12*s13*s23^2) +
            p2q^3*((-18*s12^2*s13 - 27*s12*s13^2 - 9*s13^3)*s23 +
              (-36*s12*s13 - 27*s13^2)*s23^2 - 18*s13*s23^3) +
            p1q^2*p2q*((-18*s12^2*s13 - 18*s12*s13^2)*s23 + (-27*s12*s13 -
                9*s13^2)*s23^2 - 9*s13*s23^3) + p1q*p2q^2*(18*s12*s13^3 +
              (9*s12*s13^2 + 9*s13^3)*s23 + (s12^2 + 9*s12*s13 + 10*s13^2)*
               s23^2 + (2*s12 + 11*s13)*s23^3 + 2*s23^4) +
            p3q^2*(p2q*((-36*s12^2*s13 - 45*s12*s13^2 - 9*s13^3)*s23 +
                (-54*s12*s13 - 27*s13^2)*s23^2 - 18*s13*s23^3) +
              p1q*(18*s12^3*s13 + (27*s12^2*s13 - 9*s12*s13^2)*s23 +
                (s12^2 + 18*s12*s13 + s13^2)*s23^2 + (2*s12 + 11*s13)*s23^3 +
                2*s23^4)) + p3q*(p2q^2*((-45*s12^2*s13 - 63*s12*s13^2 -
                  18*s13^3)*s23 + (-81*s12*s13 - 54*s13^2)*s23^2 -
                36*s13*s23^3) + p1q^2*((-18*s12^2*s13 - 18*s12*s13^2)*s23 +
                (-27*s12*s13 - 9*s13^2)*s23^2 - 9*s13*s23^3) +
              p1q*p2q*(-36*s12^2*s13^2 + (-9*s12^2*s13 - 36*s12*s13^2 +
                  9*s13^3)*s23 + (2*s12^2 + 9*s12*s13 + 11*s13^2)*s23^2 +
                (4*s12 + 22*s13)*s23^3 + 4*s23^4)))*
           Log(s12/(s12 + s13 + s23)))/(4*p1q*p2q^2*s12*s13*s23^2 +
           8*p1q*p2q*p3q*s12*s13*s23^2 + 4*p1q*p3q^2*s12*s13*s23^2) +
         ((p2q^3*((-9*s12^2*s13 - 9*s12*s13^2)*s23 - 9*s12*s13*s23^2) +
            p3q^3*((-9*s12^3 - 27*s12^2*s13 - 18*s12*s13^2)*s23 +
              (-27*s12^2 - 36*s12*s13)*s23^2 - 18*s12*s23^3) +
            p1q^2*p2q*((-18*s12^2*s13 - 18*s12*s13^2)*s23 + (-9*s12^2 -
                27*s12*s13)*s23^2 - 9*s12*s23^3) + p1q*p2q^2*
             (18*s12*s13^3 + (-9*s12^2*s13 + 27*s12*s13^2)*s23 +
              (s12^2 + 18*s12*s13 + s13^2)*s23^2 + (11*s12 + 2*s13)*s23^3 +
              2*s23^4) + p3q^2*(p2q*((-18*s12^3 - 63*s12^2*s13 -
                  45*s12*s13^2)*s23 + (-54*s12^2 - 81*s12*s13)*s23^2 -
                36*s12*s23^3) + p1q*(18*s12^3*s13 + (9*s12^3 + 9*s12^2*s13)*
                 s23 + (10*s12^2 + 9*s12*s13 + s13^2)*s23^2 +
                (11*s12 + 2*s13)*s23^3 + 2*s23^4)) +
            p3q*(p2q^2*((-9*s12^3 - 45*s12^2*s13 - 36*s12*s13^2)*s23 +
                (-27*s12^2 - 54*s12*s13)*s23^2 - 18*s12*s23^3) +
              p1q^2*((-18*s12^2*s13 - 18*s12*s13^2)*s23 + (-9*s12^2 -
                  27*s12*s13)*s23^2 - 9*s12*s23^3) + p1q*p2q*(-36*s12^2*
                 s13^2 + (9*s12^3 - 36*s12^2*s13 - 9*s12*s13^2)*s23 +
                (11*s12^2 + 9*s12*s13 + 2*s13^2)*s23^2 + (22*s12 + 4*s13)*
                 s23^3 + 4*s23^4)))*Log(s13/(s12 + s13 + s23)))/
          (4*p1q*p2q^2*s12*s13*s23^2 + 8*p1q*p2q*p3q*s12*s13*s23^2 +
           4*p1q*p3q^2*s12*s13*s23^2) +
         ((p3q^3*((9*s12^3 + 36*s12^2*s13 + 27*s12*s13^2)*s23 +
              (27*s12^2 + 45*s12*s13)*s23^2 + 18*s12*s23^3) +
            p2q^3*((27*s12^2*s13 + 36*s12*s13^2 + 9*s13^3)*s23 +
              (45*s12*s13 + 27*s13^2)*s23^2 + 18*s13*s23^3) +
            p1q^2*p2q*((36*s12^2*s13 + 36*s12*s13^2)*s23 + (9*s12^2 +
                54*s12*s13 + 9*s13^2)*s23^2 + (9*s12 + 9*s13)*s23^3) +
            p1q*p2q^2*(-36*s12*s13^3 + (9*s12^2*s13 - 36*s12*s13^2 - 9*s13^3)*
               s23 + (-10*s12^2 - 27*s12*s13 - 19*s13^2)*s23^2 +
              (-29*s12 - 29*s13)*s23^3 - 20*s23^4) +
            p3q*(p1q^2*((36*s12^2*s13 + 36*s12*s13^2)*s23 +
                (9*s12^2 + 54*s12*s13 + 9*s13^2)*s23^2 + (9*s12 + 9*s13)*
                 s23^3) + p2q^2*((9*s12^3 + 90*s12^2*s13 + 99*s12*s13^2 +
                  18*s13^3)*s23 + (27*s12^2 + 135*s12*s13 + 54*s13^2)*s23^2 +
                (18*s12 + 36*s13)*s23^3) + p1q*p2q*(72*s12^2*s13^2 +
                (-9*s12^3 + 45*s12^2*s13 + 45*s12*s13^2 - 9*s13^3)*s23 +
                (-29*s12^2 - 18*s12*s13 - 29*s13^2)*s23^2 +
                (-58*s12 - 58*s13)*s23^3 - 40*s23^4)) +
            p3q^2*(p2q*((18*s12^3 + 99*s12^2*s13 + 90*s12*s13^2 + 9*s13^3)*
                 s23 + (54*s12^2 + 135*s12*s13 + 27*s13^2)*s23^2 +
                (36*s12 + 18*s13)*s23^3) + p1q*(-36*s12^3*s13 +
                (-9*s12^3 - 36*s12^2*s13 + 9*s12*s13^2)*s23 +
                (-19*s12^2 - 27*s12*s13 - 10*s13^2)*s23^2 +
                (-29*s12 - 29*s13)*s23^3 - 20*s23^4)))*
           Log(s23/(s12 + s13 + s23)))/(36*p1q*p2q^2*s12*s13*s23^2 +
           72*p1q*p2q*p3q*s12*s13*s23^2 + 36*p1q*p3q^2*s12*s13*s23^2)) +
       p1.E0*(p1.E0conj*((nl*(p2q^2*(72*s12^2*s13 + 72*s12*s13^2 +
                (108*s12*s13 + 36*s13^2)*s23 + 36*s13*s23^2) +
              p1q*p2q*((-18*s12^2 - 18*s12*s13)*s23 + (-20*s12 - 2*s13)*
                 s23^2 - 2*s23^3) + p1q*p3q*((-18*s12^2 - 18*s12*s13)*s23 +
                (-20*s12 - 2*s13)*s23^2 - 2*s23^3)))/
            (9*p1q*p2q*s12*s13*s23^2 + 9*p1q*p3q*s12*s13*s23^2) +
           (p2q^2*(-756*s12^2*s13 - 756*s12*s13^2 + (-1134*s12*s13 -
                 378*s13^2)*s23 - 378*s13*s23^2) + p1q*p2q*
              ((261*s12^2 + 261*s12*s13)*s23 + (290*s12 + 29*s13)*s23^2 + 29*
                s23^3) + p1q*p3q*((261*s12^2 + 261*s12*s13)*s23 +
               (290*s12 + 29*s13)*s23^2 + 29*s23^3))/
            (9*p1q*p2q*s12*s13*s23^2 + 9*p1q*p3q*s12*s13*s23^2) +
           ((p1q*p2q*((9*s12^2 + 9*s12*s13)*s23 + 9*s12*s23^2) +
              p1q*p3q*((9*s12^2 + 9*s12*s13)*s23 + 9*s12*s23^2) +
              p2q^2*(-36*s12^2*s13 - 36*s12*s13^2 + (-54*s12*s13 - 18*s13^2)*
                 s23 - 18*s13*s23^2))*Log(p1q/(p1q + p2q + p3q)))/
            (p1q*p2q*s12*s13*s23^2 + p1q*p3q*s12*s13*s23^2) +
           ((p2q^2*(-18*s12^2*s13 - 18*s12*s13^2 - 18*s12*s13*s23) +
              p1q*p2q*((9*s12^2 + 9*s12*s13)*s23 + (10*s12 + s13)*s23^2 +
                s23^3) + p1q*p3q*((9*s12^2 + 9*s12*s13)*s23 + (10*s12 + s13)*
                 s23^2 + s23^3))*Log(p2q/(p1q + p2q + p3q)))/
            (p1q*p2q*s12*s13*s23^2 + p1q*p3q*s12*s13*s23^2) +
           ((p2q^2*(-18*s12^2*s13 - 18*s12*s13^2 + (-36*s12*s13 - 18*s13^2)*
                 s23 - 18*s13*s23^2) + p1q*p2q*((s12 + s13)*s23^2 + s23^3) +
              p1q*p3q*((s12 + s13)*s23^2 + s23^3))*Log(p3q/(p1q + p2q +
                p3q)))/(p1q*p2q*s12*s13*s23^2 + p1q*p3q*s12*s13*s23^2) +
           ((p2q^2*(-288*s12^2*s13 - 288*s12*s13^2 + (-432*s12*s13 -
                  144*s13^2)*s23 - 144*s13*s23^2) + p1q*p2q*(
                (72*s12^2 + 72*s12*s13)*s23 + (80*s12 + 8*s13)*s23^2 +
                8*s23^3) + p1q*p3q*((72*s12^2 + 72*s12*s13)*s23 +
                (80*s12 + 8*s13)*s23^2 + 8*s23^3))*Log(-s12 - s13 - s23))/
            (9*p1q*p2q*s12*s13*s23^2 + 9*p1q*p3q*s12*s13*s23^2) +
           ((p2q^2*(-18*s12^2*s13 - 18*s12*s13^2 + (-36*s12*s13 - 18*s13^2)*
                 s23 - 18*s13*s23^2) + p1q*p2q*((s12 + s13)*s23^2 + s23^3) +
              p1q*p3q*((s12 + s13)*s23^2 + s23^3))*Log(s12/(s12 + s13 +
                s23)))/(p1q*p2q*s12*s13*s23^2 + p1q*p3q*s12*s13*s23^2) +
           ((p2q^2*(-18*s12^2*s13 - 18*s12*s13^2 - 18*s12*s13*s23) +
              p1q*p2q*((9*s12^2 + 9*s12*s13)*s23 + (10*s12 + s13)*s23^2 +
                s23^3) + p1q*p3q*((9*s12^2 + 9*s12*s13)*s23 + (10*s12 + s13)*
                 s23^2 + s23^3))*Log(s13/(s12 + s13 + s23)))/
            (p1q*p2q*s12*s13*s23^2 + p1q*p3q*s12*s13*s23^2) +
           ((p2q^2*(36*s12^2*s13 + 36*s12*s13^2 + (54*s12*s13 + 18*s13^2)*
                 s23 + 18*s13*s23^2) + p1q*p2q*((-9*s12^2 - 9*s12*s13)*s23 +
                (-19*s12 - 10*s13)*s23^2 - 10*s23^3) + p1q*p3q*(
                (-9*s12^2 - 9*s12*s13)*s23 + (-19*s12 - 10*s13)*s23^2 -
                10*s23^3))*Log(s23/(s12 + s13 + s23)))/
            (9*p1q*p2q*s12*s13*s23^2 + 9*p1q*p3q*s12*s13*s23^2)) +
         p2.E0conj*((nl*(p2q^2*(72*s12^2*s13 + 72*s12*s13^2 +
                (108*s12*s13 + 36*s13^2)*s23 + 36*s13*s23^2) +
              p1q*p2q*((-9*s12^2 - 18*s12*s13 - 9*s13^2)*s23 +
                (-11*s12 - 11*s13)*s23^2 - 2*s23^3) +
              p3q*(p2q*(72*s12^2*s13 + 72*s12*s13^2 + (18*s12^2 + 108*s12*
                     s13 + 18*s13^2)*s23 + (18*s12 + 18*s13)*s23^2) +
                p1q*((-27*s12^2 - 18*s12*s13 + 9*s13^2)*s23 +
                  (-29*s12 + 7*s13)*s23^2 - 2*s23^3))))/
            (9*p1q*p2q*s12*s13*s23^2 + 9*p1q*p3q*s12*s13*s23^2) +
           (p2q^2*(-504*s12^2*s13 - 504*s12*s13^2 + (-756*s12*s13 -
                 252*s13^2)*s23 - 252*s13*s23^2) + p1q*p2q*
              ((87*s12^2 + 126*s12*s13 + 39*s13^2)*s23 + (101*s12 + 53*s13)*
                s23^2 + 14*s23^3) + p3q*(p2q*(-504*s12^2*s13 - 504*s12*
                  s13^2 + (-126*s12^2 - 756*s12*s13 - 126*s13^2)*s23 +
                 (-126*s12 - 126*s13)*s23^2) + p1q*((213*s12^2 + 126*s12*
                    s13 - 87*s13^2)*s23 + (227*s12 - 73*s13)*s23^2 +
                 14*s23^3)))/(6*p1q*p2q*s12*s13*s23^2 + 6*p1q*p3q*s12*s13*
              s23^2) + ((p2q^2*(-72*s12^2*s13 - 72*s12*s13^2 +
                (-108*s12*s13 - 36*s13^2)*s23 - 36*s13*s23^2) +
              p1q*p2q*((9*s12^2 + 18*s12*s13 + 9*s13^2)*s23 + (9*s12 + 9*s13)*
                 s23^2) + p3q*(p2q*(-72*s12^2*s13 - 72*s12*s13^2 +
                  (-18*s12^2 - 108*s12*s13 - 18*s13^2)*s23 +
                  (-18*s12 - 18*s13)*s23^2) + p1q*((27*s12^2 + 18*s12*s13 -
                    9*s13^2)*s23 + (27*s12 - 9*s13)*s23^2)))*
             Log(p1q/(p1q + p2q + p3q)))/(2*p1q*p2q*s12*s13*s23^2 +
             2*p1q*p3q*s12*s13*s23^2) +
           ((p2q^2*(-36*s12^2*s13 - 36*s12*s13^2 - 36*s12*s13*s23) +
              p1q*p2q*((9*s12^2 + 9*s12*s13)*s23 + (11*s12 + 2*s13)*s23^2 +
                2*s23^3) + p3q*(p2q*(-36*s12^2*s13 - 36*s12*s13^2 +
                  (-18*s12^2 - 54*s12*s13)*s23 - 18*s12*s23^2) +
                p1q*((27*s12^2 + 27*s12*s13)*s23 + (29*s12 + 2*s13)*s23^2 +
                  2*s23^3)))*Log(p2q/(p1q + p2q + p3q)))/
            (2*p1q*p2q*s12*s13*s23^2 + 2*p1q*p3q*s12*s13*s23^2) +
           ((p2q^2*(-36*s12^2*s13 - 36*s12*s13^2 + (-72*s12*s13 - 36*s13^2)*
                 s23 - 36*s13*s23^2) + p1q*p2q*((9*s12*s13 + 9*s13^2)*s23 +
                (2*s12 + 11*s13)*s23^2 + 2*s23^3) + p3q*(p2q*(-36*s12^2*s13 -
                  36*s12*s13^2 + (-54*s12*s13 - 18*s13^2)*s23 - 18*s13*
                   s23^2) + p1q*((-9*s12*s13 - 9*s13^2)*s23 + (2*s12 - 7*s13)*
                   s23^2 + 2*s23^3)))*Log(p3q/(p1q + p2q + p3q)))/
            (2*p1q*p2q*s12*s13*s23^2 + 2*p1q*p3q*s12*s13*s23^2) +
           ((p2q^2*(-288*s12^2*s13 - 288*s12*s13^2 + (-432*s12*s13 -
                  144*s13^2)*s23 - 144*s13*s23^2) + p1q*p2q*(
                (36*s12^2 + 72*s12*s13 + 36*s13^2)*s23 + (44*s12 + 44*s13)*
                 s23^2 + 8*s23^3) + p3q*(p2q*(-288*s12^2*s13 - 288*s12*
                   s13^2 + (-72*s12^2 - 432*s12*s13 - 72*s13^2)*s23 +
                  (-72*s12 - 72*s13)*s23^2) + p1q*((108*s12^2 + 72*s12*s13 -
                    36*s13^2)*s23 + (116*s12 - 28*s13)*s23^2 + 8*s23^3)))*
             Log(-s12 - s13 - s23))/(9*p1q*p2q*s12*s13*s23^2 +
             9*p1q*p3q*s12*s13*s23^2) +
           ((p2q^2*(-36*s12^2*s13 - 36*s12*s13^2 + (-72*s12*s13 - 36*s13^2)*
                 s23 - 36*s13*s23^2) + p1q*p2q*((9*s12*s13 + 9*s13^2)*s23 +
                (2*s12 + 11*s13)*s23^2 + 2*s23^3) + p3q*(p2q*(-36*s12^2*s13 -
                  36*s12*s13^2 + (-54*s12*s13 - 18*s13^2)*s23 - 18*s13*
                   s23^2) + p1q*((-9*s12*s13 - 9*s13^2)*s23 + (2*s12 - 7*s13)*
                   s23^2 + 2*s23^3)))*Log(s12/(s12 + s13 + s23)))/
            (2*p1q*p2q*s12*s13*s23^2 + 2*p1q*p3q*s12*s13*s23^2) +
           ((p2q^2*(-36*s12^2*s13 - 36*s12*s13^2 - 36*s12*s13*s23) +
              p1q*p2q*((9*s12^2 + 9*s12*s13)*s23 + (11*s12 + 2*s13)*s23^2 +
                2*s23^3) + p3q*(p2q*(-36*s12^2*s13 - 36*s12*s13^2 +
                  (-18*s12^2 - 54*s12*s13)*s23 - 18*s12*s23^2) +
                p1q*((27*s12^2 + 27*s12*s13)*s23 + (29*s12 + 2*s13)*s23^2 +
                  2*s23^3)))*Log(s13/(s12 + s13 + s23)))/
            (2*p1q*p2q*s12*s13*s23^2 + 2*p1q*p3q*s12*s13*s23^2) +
           ((p2q^2*(72*s12^2*s13 + 72*s12*s13^2 + (108*s12*s13 + 36*s13^2)*
                 s23 + 36*s13*s23^2) + p1q*p2q*((-9*s12^2 - 18*s12*s13 -
                  9*s13^2)*s23 + (-29*s12 - 29*s13)*s23^2 - 20*s23^3) +
              p3q*(p2q*(72*s12^2*s13 + 72*s12*s13^2 + (18*s12^2 + 108*s12*
                     s13 + 18*s13^2)*s23 + (18*s12 + 18*s13)*s23^2) +
                p1q*((-27*s12^2 - 18*s12*s13 + 9*s13^2)*s23 +
                  (-47*s12 - 11*s13)*s23^2 - 20*s23^3)))*
             Log(s23/(s12 + s13 + s23)))/(18*p1q*p2q*s12*s13*s23^2 +
             18*p1q*p3q*s12*s13*s23^2))))/ep +
     E0.E0conj*((p3q^3*((-837*s12^4 - 4005*s12^3*s13 - 5499*s12^2*s13^2 -
             2331*s12*s13^3)*s23 + (-2421*s12^3 - 6336*s12^2*s13 -
             3915*s12*s13^2)*s23^2 + (-1584*s12^2 - 1584*s12*s13)*s23^3) +
         p2q^3*((-2331*s12^3*s13 - 5499*s12^2*s13^2 - 4005*s12*s13^3 -
             837*s13^4)*s23 + (-3915*s12^2*s13 - 6336*s12*s13^2 - 2421*s13^3)*
            s23^2 + (-1584*s12*s13 - 1584*s13^2)*s23^3) +
         p1q^2*p2q*((-3168*s12^3*s13 - 6336*s12^2*s13^2 - 3168*s12*s13^3)*
            s23 + (-837*s12^3 - 5571*s12^2*s13 - 5571*s12*s13^2 - 837*s13^3)*
            s23^2 + (-837*s12^2 - 1566*s12*s13 - 837*s13^2)*s23^3) +
         p1q*p2q^2*(3168*s12^2*s13^3 + 3168*s12*s13^4 +
           (-837*s12^3*s13 + 2439*s12^2*s13^2 + 3897*s12*s13^3 + 837*s13^4)*
            s23 + (389*s12^3 + 2690*s12^2*s13 + 3419*s12*s13^2 + 1226*s13^3)*
            s23^2 + (933*s12^2 + 1866*s12*s13 + 933*s13^2)*s23^3 +
           (176*s12 + 176*s13)*s23^4) +
         p3q^2*(p2q*((-1674*s12^4 - 10341*s12^3*s13 - 16497*s12^2*s13^2 -
               8667*s12*s13^3 - 837*s13^4)*s23 + (-4842*s12^3 - 16587*s12^2*
                s13 - 14166*s12*s13^2 - 2421*s13^3)*s23^2 +
             (-3168*s12^2 - 4752*s12*s13 - 1584*s13^2)*s23^3) +
           p1q*(3168*s12^4*s13 + 3168*s12^3*s13^2 + (837*s12^4 + 3897*s12^3*
                s13 + 2439*s12^2*s13^2 - 837*s12*s13^3)*s23 +
             (1226*s12^3 + 3419*s12^2*s13 + 2690*s12*s13^2 + 389*s13^3)*
              s23^2 + (933*s12^2 + 1866*s12*s13 + 933*s13^2)*s23^3 +
             (176*s12 + 176*s13)*s23^4)) +
         p3q*(p2q^2*((-837*s12^4 - 8667*s12^3*s13 - 16497*s12^2*s13^2 - 10341*
                s12*s13^3 - 1674*s13^4)*s23 + (-2421*s12^3 - 14166*s12^2*
                s13 - 16587*s12*s13^2 - 4842*s13^3)*s23^2 +
             (-1584*s12^2 - 4752*s12*s13 - 3168*s13^2)*s23^3) +
           p1q^2*((-3168*s12^3*s13 - 6336*s12^2*s13^2 - 3168*s12*s13^3)*s23 +
             (-837*s12^3 - 5571*s12^2*s13 - 5571*s12*s13^2 - 837*s13^3)*
              s23^2 + (-837*s12^2 - 1566*s12*s13 - 837*s13^2)*s23^3) +
           p1q*p2q*(-6336*s12^3*s13^2 - 6336*s12^2*s13^3 +
             (837*s12^4 - 3276*s12^3*s13 - 7794*s12^2*s13^2 - 3276*s12*
                s13^3 + 837*s13^4)*s23 + (1615*s12^3 + 2941*s12^2*s13 + 2941*
                s12*s13^2 + 1615*s13^3)*s23^2 + (1866*s12^2 + 3732*s12*s13 +
               1866*s13^2)*s23^3 + (352*s12 + 352*s13)*s23^4)))/
        (p1q*p2q^2*(72*s12^2*s13 + 72*s12*s13^2)*s23^2 +
         p1q*p3q^2*(72*s12^2*s13 + 72*s12*s13^2)*s23^2 +
         p1q*p2q*p3q*(144*s12^2*s13 + 144*s12*s13^2)*s23^2) +
       (Pi^2*(p3q^3*((639*s12^4*s13 + 1620*s12^3*s13^2 + 981*s12^2*s13^3)*
             s23 + (90*s12^4 + 1539*s12^3*s13 + 1701*s12^2*s13^2 -
              90*s12*s13^3)*s23^2 + (90*s12^3 + 810*s12^2*s13 - 90*s12*s13^2)*
             s23^3) + p2q^3*((819*s12^3*s13^2 + 1296*s12^2*s13^3 +
              477*s12*s13^4)*s23 + (-90*s12^3*s13 + 1377*s12^2*s13^2 +
              1215*s12*s13^3 + 90*s13^4)*s23^2 + (-90*s12^2*s13 +
              648*s12*s13^2 + 90*s13^3)*s23^3) + p1q*p2q^2*
           (-1296*s12^2*s13^4 + (477*s12^3*s13^2 - 1296*s12^2*s13^3 -
              477*s12*s13^4)*s23 + (-241*s12^3*s13 - 873*s12^2*s13^2 -
              718*s12*s13^3 - 90*s13^4)*s23^2 + (-70*s12^3 - 813*s12^2*s13 -
              723*s12*s13^2 - 160*s13^3)*s23^3 + (-70*s12^2 - 334*s12*s13 -
              70*s13^2)*s23^4) + p1q^2*p2q*
           ((1296*s12^3*s13^2 + 1296*s12^2*s13^3)*s23 +
            (477*s12^3*s13 + 2250*s12^2*s13^2 + 477*s12*s13^3)*s23^2 +
            (90*s12^3 + 567*s12^2*s13 + 567*s12*s13^2 + 90*s13^3)*s23^3 +
            (90*s12^2 + 90*s13^2)*s23^4) +
          p3q^2*(p2q*((1278*s12^4*s13 + 4059*s12^3*s13^2 + 3258*s12^2*s13^3 +
                477*s12*s13^4)*s23 + (180*s12^4 + 2988*s12^3*s13 +
                4779*s12^2*s13^2 + 1035*s12*s13^3 + 90*s13^4)*s23^2 +
              (180*s12^3 + 1530*s12^2*s13 + 468*s12*s13^2 + 90*s13^3)*s23^
                3) + p1q*(-1296*s12^4*s13^2 + (-477*s12^4*s13 - 1296*s12^3*
                 s13^2 + 477*s12^2*s13^3)*s23 + (-90*s12^4 - 718*s12^3*s13 -
                873*s12^2*s13^2 - 241*s12*s13^3)*s23^2 + (-160*s12^3 -
                723*s12^2*s13 - 813*s12*s13^2 - 70*s13^3)*s23^3 +
              (-70*s12^2 - 334*s12*s13 - 70*s13^2)*s23^4)) +
          p3q*(p2q^2*((639*s12^4*s13 + 3258*s12^3*s13^2 + 3573*s12^2*s13^3 +
                954*s12*s13^4)*s23 + (90*s12^4 + 1359*s12^3*s13 +
                4455*s12^2*s13^2 + 2340*s12*s13^3 + 180*s13^4)*s23^2 +
              (90*s12^3 + 630*s12^2*s13 + 1206*s12*s13^2 + 180*s13^3)*s23^
                3) + p1q*p2q*(2592*s12^3*s13^3 + (-477*s12^4*s13 +
                1773*s12^3*s13^2 + 1773*s12^2*s13^3 - 477*s12*s13^4)*s23 +
              (-90*s12^4 - 959*s12^3*s13 - 450*s12^2*s13^2 - 959*s12*s13^3 -
                90*s13^4)*s23^2 + (-230*s12^3 - 1536*s12^2*s13 -
                1536*s12*s13^2 - 230*s13^3)*s23^3 + (-140*s12^2 -
                668*s12*s13 - 140*s13^2)*s23^4) +
            p1q^2*((1296*s12^3*s13^2 + 1296*s12^2*s13^3)*s23 +
              (477*s12^3*s13 + 2250*s12^2*s13^2 + 477*s12*s13^3)*s23^2 +
              (90*s12^3 + 567*s12^2*s13 + 567*s12*s13^2 + 90*s13^3)*s23^3 +
              (90*s12^2 + 90*s13^2)*s23^4))))/(432*p1q*p2q^2*s12^2*s13^2*
          s23^2 + 864*p1q*p2q*p3q*s12^2*s13^2*s23^2 + 432*p1q*p3q^2*s12^2*
          s13^2*s23^2) + ((p3q^3*((9*s12^3 + 36*s12^2*s13 + 27*s12*s13^2)*
             s23 + (27*s12^2 + 45*s12*s13)*s23^2 + 18*s12*s23^3) +
          p1q*p2q^2*(-36*s12*s13^3 + (9*s12^2*s13 - 36*s12*s13^2 - 9*s13^3)*
             s23 + (-27*s12*s13 - 9*s13^2)*s23^2 + (-9*s12 - 9*s13)*s23^3) +
          p2q^3*((27*s12^2*s13 + 36*s12*s13^2 + 9*s13^3)*s23 +
            (45*s12*s13 + 27*s13^2)*s23^2 + 18*s13*s23^3) +
          p1q^2*p2q*((36*s12^2*s13 + 36*s12*s13^2)*s23 +
            (9*s12^2 + 54*s12*s13 + 9*s13^2)*s23^2 + (9*s12 + 9*s13)*s23^3) +
          p3q^2*(p1q*(-36*s12^3*s13 + (-9*s12^3 - 36*s12^2*s13 + 9*s12*s13^2)*
               s23 + (-9*s12^2 - 27*s12*s13)*s23^2 + (-9*s12 - 9*s13)*s23^
                3) + p2q*((18*s12^3 + 99*s12^2*s13 + 90*s12*s13^2 + 9*s13^3)*
               s23 + (54*s12^2 + 135*s12*s13 + 27*s13^2)*s23^2 +
              (36*s12 + 18*s13)*s23^3)) +
          p3q*(p1q*p2q*(72*s12^2*s13^2 + (-9*s12^3 + 45*s12^2*s13 +
                45*s12*s13^2 - 9*s13^3)*s23 + (-9*s12^2 - 18*s12*s13 -
                9*s13^2)*s23^2 + (-18*s12 - 18*s13)*s23^3) +
            p1q^2*((36*s12^2*s13 + 36*s12*s13^2)*s23 + (9*s12^2 +
                54*s12*s13 + 9*s13^2)*s23^2 + (9*s12 + 9*s13)*s23^3) +
            p2q^2*((9*s12^3 + 90*s12^2*s13 + 99*s12*s13^2 + 18*s13^3)*s23 +
              (27*s12^2 + 135*s12*s13 + 54*s13^2)*s23^2 + (18*s12 + 36*s13)*
               s23^3)))*Log(p1q/(p1q + p2q + p3q))^2)/
        (8*p1q*p2q^2*s12*s13*s23^2 + 16*p1q*p2q*p3q*s12*s13*s23^2 +
         8*p1q*p3q^2*s12*s13*s23^2) +
       ((p2q^3*((9*s12^2*s13 + 9*s12*s13^2)*s23 + 9*s12*s13*s23^2) +
          p1q^2*p2q*((18*s12^2*s13 + 18*s12*s13^2)*s23 +
            (9*s12^2 + 27*s12*s13)*s23^2 + 9*s12*s23^3) +
          p3q^3*((9*s12^3 + 27*s12^2*s13 + 18*s12*s13^2)*s23 +
            (27*s12^2 + 36*s12*s13)*s23^2 + 18*s12*s23^3) +
          p1q*p2q^2*(-18*s12*s13^3 + (9*s12^2*s13 - 27*s12*s13^2)*s23 +
            (-s12^2 - 18*s12*s13 - s13^2)*s23^2 + (-11*s12 - 2*s13)*s23^3 -
            2*s23^4) + p3q*(p1q^2*((18*s12^2*s13 + 18*s12*s13^2)*s23 +
              (9*s12^2 + 27*s12*s13)*s23^2 + 9*s12*s23^3) +
            p2q^2*((9*s12^3 + 45*s12^2*s13 + 36*s12*s13^2)*s23 +
              (27*s12^2 + 54*s12*s13)*s23^2 + 18*s12*s23^3) +
            p1q*p2q*(36*s12^2*s13^2 + (-9*s12^3 + 36*s12^2*s13 + 9*s12*s13^2)*
               s23 + (-11*s12^2 - 9*s12*s13 - 2*s13^2)*s23^2 +
              (-22*s12 - 4*s13)*s23^3 - 4*s23^4)) +
          p3q^2*(p2q*((18*s12^3 + 63*s12^2*s13 + 45*s12*s13^2)*s23 +
              (54*s12^2 + 81*s12*s13)*s23^2 + 36*s12*s23^3) +
            p1q*(-18*s12^3*s13 + (-9*s12^3 - 9*s12^2*s13)*s23 +
              (-10*s12^2 - 9*s12*s13 - s13^2)*s23^2 + (-11*s12 - 2*s13)*s23^
                3 - 2*s23^4)))*Log(p2q/(p1q + p2q + p3q))^2)/
        (8*p1q*p2q^2*s12*s13*s23^2 + 16*p1q*p2q*p3q*s12*s13*s23^2 +
         8*p1q*p3q^2*s12*s13*s23^2) +
       ((p3q^3*(9*s12^3*s13 + 9*s12^2*s13^2 + (s12^3 + 10*s12^2*s13)*s23 +
            s12^2*s23^2) + p2q^3*(-9*s12^2*s13^2 - 9*s12*s13^3 +
            (-18*s12^2*s13 - 44*s12*s13^2 - 17*s13^3)*s23 +
            (-35*s12*s13 - 34*s13^2)*s23^2 - 17*s13*s23^3) +
          p1q^3*((-9*s12^2*s13 - 18*s12*s13^2 - 9*s13^3)*s23 +
            (-18*s12*s13 - 18*s13^2)*s23^2 - 9*s13*s23^3) +
          p1q^2*p2q*(-9*s12^2*s13^2 + 9*s13^4 + (-18*s12^2*s13 -
              25*s12*s13^2 + 11*s13^3)*s23 + (s12^2 - 13*s12*s13 + 6*s13^2)*
             s23^2 + (4*s12 + 7*s13)*s23^3 + 3*s23^4) +
          p1q*p2q^2*(9*s12*s13^3 + 9*s13^4 + (-8*s12^2*s13 - 6*s12*s13^2 +
              11*s13^3)*s23 + (2*s12^2 - 2*s12*s13 + 6*s13^2)*s23^2 +
            (5*s12 + 7*s13)*s23^3 + 3*s23^4) +
          p3q^2*(p1q*(9*s12^3*s13 + 9*s12^2*s13^2 + (-s12^3 - 12*s12^2*s13 -
                20*s12*s13^2)*s23 + (-5*s12^2 - 24*s12*s13)*s23^2 -
              4*s12*s23^3) + p2q*(18*s12^3*s13 + 9*s12^2*s13^2 -
              9*s12*s13^3 + (s12^3 + 17*s12^2*s13 - 11*s12*s13^2)*s23 -
              3*s12*s13*s23^2 - s12*s23^3)) +
          p3q*(p2q^2*(9*s12^3*s13 - 9*s12^2*s13^2 - 18*s12*s13^3 +
              (-11*s12^2*s13 - 55*s12*s13^2 - 17*s13^3)*s23 +
              (-s12^2 - 38*s12*s13 - 34*s13^2)*s23^2 + (-s12 - 17*s13)*s23^
                3) + p1q*p2q*(-18*s12^2*s13^2 - 18*s12*s13^3 +
              (-s12^3 - 38*s12^2*s13 - 62*s12*s13^2 - 7*s13^3)*s23 +
              (-3*s12^2 - 35*s12*s13 - 3*s13^2)*s23^2 + (s12 + 7*s13)*s23^3 +
              3*s23^4) + p1q^2*(9*s12^3*s13 - 9*s12*s13^3 + (9*s12^2*s13 -
                7*s12*s13^2 + 2*s13^3)*s23 + (s12^2 + 14*s12*s13 + 15*s13^2)*
               s23^2 + (4*s12 + 16*s13)*s23^3 + 3*s23^4)))*
         Log((p1q + p2q)/(p1q + p2q + p3q))^2)/(8*p1q*p3q^2*s12^2*s13*s23 +
         p1q^2*p2q*(-8*s12*s13^2*s23 - 8*s12*s13*s23^2) +
         p1q*p2q^2*(-8*s12*s13^2*s23 - 8*s12*s13*s23^2) +
         p3q*(p1q^2*(-8*s12*s13^2*s23 - 8*s12*s13*s23^2) +
           p1q*p2q*((8*s12^2*s13 - 8*s12*s13^2)*s23 - 8*s12*s13*s23^2))) +
       ((p3q^3*((9*s12^2*s13 + 9*s12*s13^2)*s23 + 9*s12*s13*s23^2) +
          p1q^2*p2q*((18*s12^2*s13 + 18*s12*s13^2)*s23 +
            (27*s12*s13 + 9*s13^2)*s23^2 + 9*s13*s23^3) +
          p2q^3*((18*s12^2*s13 + 27*s12*s13^2 + 9*s13^3)*s23 +
            (36*s12*s13 + 27*s13^2)*s23^2 + 18*s13*s23^3) +
          p1q*p2q^2*(-18*s12*s13^3 + (-9*s12*s13^2 - 9*s13^3)*s23 +
            (-s12^2 - 9*s12*s13 - 10*s13^2)*s23^2 + (-2*s12 - 11*s13)*s23^3 -
            2*s23^4) + p3q*(p1q^2*((18*s12^2*s13 + 18*s12*s13^2)*s23 +
              (27*s12*s13 + 9*s13^2)*s23^2 + 9*s13*s23^3) +
            p2q^2*((45*s12^2*s13 + 63*s12*s13^2 + 18*s13^3)*s23 +
              (81*s12*s13 + 54*s13^2)*s23^2 + 36*s13*s23^3) +
            p1q*p2q*(36*s12^2*s13^2 + (9*s12^2*s13 + 36*s12*s13^2 - 9*s13^3)*
               s23 + (-2*s12^2 - 9*s12*s13 - 11*s13^2)*s23^2 +
              (-4*s12 - 22*s13)*s23^3 - 4*s23^4)) +
          p3q^2*(p2q*((36*s12^2*s13 + 45*s12*s13^2 + 9*s13^3)*s23 +
              (54*s12*s13 + 27*s13^2)*s23^2 + 18*s13*s23^3) +
            p1q*(-18*s12^3*s13 + (-27*s12^2*s13 + 9*s12*s13^2)*s23 +
              (-s12^2 - 18*s12*s13 - s13^2)*s23^2 + (-2*s12 - 11*s13)*s23^3 -
              2*s23^4)))*Log(p3q/(p1q + p2q + p3q))^2)/
        (8*p1q*p2q^2*s12*s13*s23^2 + 16*p1q*p2q*p3q*s12*s13*s23^2 +
         8*p1q*p3q^2*s12*s13*s23^2) +
       ((p2q^3*(-9*s12^2*s13^2 - 9*s12*s13^3 + (-10*s12*s13^2 - s13^3)*s23 -
            s13^2*s23^2) + p1q^3*((9*s12^3 + 18*s12^2*s13 + 9*s12*s13^2)*
             s23 + (18*s12^2 + 18*s12*s13)*s23^2 + 9*s12*s23^3) +
          p3q^3*(9*s12^3*s13 + 9*s12^2*s13^2 + (17*s12^3 + 44*s12^2*s13 +
              18*s12*s13^2)*s23 + (34*s12^2 + 35*s12*s13)*s23^2 +
            17*s12*s23^3) + p1q*p2q^2*(-9*s12^2*s13^2 - 9*s12*s13^3 +
            (20*s12^2*s13 + 12*s12*s13^2 + s13^3)*s23 +
            (24*s12*s13 + 5*s13^2)*s23^2 + 4*s13*s23^3) +
          p1q^2*p2q*(9*s12^3*s13 - 9*s12*s13^3 + (-2*s12^3 + 7*s12^2*s13 -
              9*s12*s13^2)*s23 + (-15*s12^2 - 14*s12*s13 - s13^2)*s23^2 +
            (-16*s12 - 4*s13)*s23^3 - 3*s23^4) +
          p3q^2*(p2q*(18*s12^3*s13 + 9*s12^2*s13^2 - 9*s12*s13^3 +
              (17*s12^3 + 55*s12^2*s13 + 11*s12*s13^2)*s23 +
              (34*s12^2 + 38*s12*s13 + s13^2)*s23^2 + (17*s12 + s13)*s23^3) +
            p1q*(-9*s12^4 - 9*s12^3*s13 + (-11*s12^3 + 6*s12^2*s13 +
                8*s12*s13^2)*s23 + (-6*s12^2 + 2*s12*s13 - 2*s13^2)*s23^2 +
              (-7*s12 - 5*s13)*s23^3 - 3*s23^4)) +
          p3q*(p2q^2*(9*s12^3*s13 - 9*s12^2*s13^2 - 18*s12*s13^3 +
              (11*s12^2*s13 - 17*s12*s13^2 - s13^3)*s23 + 3*s12*s13*s23^2 +
              s13*s23^3) + p1q^2*(-9*s12^4 + 9*s12^2*s13^2 + (-11*s12^3 +
                25*s12^2*s13 + 18*s12*s13^2)*s23 + (-6*s12^2 + 13*s12*s13 -
                s13^2)*s23^2 + (-7*s12 - 4*s13)*s23^3 - 3*s23^4) +
            p1q*p2q*(18*s12^3*s13 + 18*s12^2*s13^2 + (7*s12^3 +
                62*s12^2*s13 + 38*s12*s13^2 + s13^3)*s23 + (3*s12^2 +
                35*s12*s13 + 3*s13^2)*s23^2 + (-7*s12 - s13)*s23^3 -
              3*s23^4)))*Log((p1q + p3q)/(p1q + p2q + p3q))^2)/
        (-8*p1q*p2q^2*s12*s13^2*s23 + p1q^2*p2q*(8*s12^2*s13*s23 +
           8*s12*s13*s23^2) + p1q*p3q^2*(8*s12^2*s13*s23 + 8*s12*s13*s23^2) +
         p3q*(p1q^2*(8*s12^2*s13*s23 + 8*s12*s13*s23^2) +
           p1q*p2q*((8*s12^2*s13 - 8*s12*s13^2)*s23 + 8*s12*s13*s23^2))) +
       ((p3q^4*((36*s12^3*s13 + 72*s12^2*s13^2 + 36*s12*s13^3)*s23 +
            (9*s12^3 + 72*s12^2*s13 + 63*s12*s13^2)*s23^2 +
            (9*s12^2 + 27*s12*s13)*s23^3) +
          p2q^4*((54*s12^3*s13 + 126*s12^2*s13^2 + 90*s12*s13^3 + 18*s13^4)*
             s23 + (99*s12^2*s13 + 144*s12*s13^2 + 45*s13^3)*s23^2 +
            (45*s12*s13 + 27*s13^2)*s23^3) + p1q^2*p2q^2*
           ((72*s12^3*s13 + 216*s12^2*s13^2 + 144*s12*s13^3)*s23 +
            (9*s12^3 + 153*s12^2*s13 + 243*s12*s13^2 + 27*s13^3)*s23^2 +
            (9*s12^2 + 72*s12*s13 + 27*s13^2)*s23^3) +
          p1q*p2q^3*(-72*s12^2*s13^3 - 72*s12*s13^4 +
            (9*s12^3*s13 - 27*s12^2*s13^2 - 117*s12*s13^3 - 9*s13^4)*s23 +
            (-45*s12^2*s13 - 108*s12*s13^2 - 27*s13^3)*s23^2 +
            (-9*s12^2 - 90*s12*s13 - 45*s13^2)*s23^3 + (-9*s12 - 27*s13)*
             s23^4) + p1q^3*p2q*((-72*s12^2*s13 - 72*s12*s13^2)*s23^2 +
            (-18*s12^2 - 108*s12*s13 - 18*s13^2)*s23^3 + (-18*s12 - 18*s13)*
             s23^4) + p3q^2*(p1q^2*((144*s12^3*s13 + 216*s12^2*s13^2 +
                72*s12*s13^3)*s23 + (27*s12^3 + 243*s12^2*s13 +
                153*s12*s13^2 + 9*s13^3)*s23^2 + (27*s12^2 + 72*s12*s13 +
                9*s13^2)*s23^3) + p2q^2*((270*s12^3*s13 + 594*s12^2*s13^2 +
                378*s12*s13^3 + 54*s13^4)*s23 + (27*s12^3 + 513*s12^2*s13 +
                621*s12*s13^2 + 135*s13^3)*s23^2 + (27*s12^2 + 216*s12*s13 +
                81*s13^2)*s23^3) + p1q*p2q*(-72*s12^4*s13 + 72*s12^3*s13^2 +
              144*s12^2*s13^3 + (-18*s12^4 - 81*s12^3*s13 + 207*s12^2*s13^2 +
                45*s12*s13^3 - 9*s13^4)*s23 + (-18*s12^3 - 117*s12^2*s13 -
                90*s12*s13^2 - 27*s13^3)*s23^2 + (-27*s12^2 - 198*s12*s13 -
                63*s13^2)*s23^3 + (-27*s12 - 45*s13)*s23^4)) +
          p3q*(p1q^2*p2q*((72*s12^3*s13 + 144*s12^2*s13^2 + 72*s12*s13^3)*
               s23 + (36*s12^3 + 108*s12^2*s13 + 108*s12*s13^2 + 36*s13^3)*
               s23^2 + (36*s12^2 + 36*s13^2)*s23^3) +
            p2q^3*((198*s12^3*s13 + 450*s12^2*s13^2 + 306*s12*s13^3 +
                54*s13^4)*s23 + (9*s12^3 + 369*s12^2*s13 + 495*s12*s13^2 +
                135*s13^3)*s23^2 + (9*s12^2 + 162*s12*s13 + 81*s13^2)*s23^
                3) + p1q*p2q^2*(144*s12^3*s13^2 + 72*s12^2*s13^3 -
              72*s12*s13^4 + (-9*s12^4 + 45*s12^3*s13 + 207*s12^2*s13^2 -
                81*s12*s13^3 - 18*s13^4)*s23 + (-9*s12^3 - 90*s12^2*s13 -
                171*s12*s13^2 - 54*s13^3)*s23^2 + (-27*s12^2 - 234*s12*s13 -
                99*s13^2)*s23^3 + (-27*s12 - 63*s13)*s23^4) +
            p1q^3*((-72*s12^2*s13 - 72*s12*s13^2)*s23^2 + (-18*s12^2 -
                108*s12*s13 - 18*s13^2)*s23^3 + (-18*s12 - 18*s13)*s23^4)) +
          p3q^3*(p2q*((162*s12^3*s13 + 342*s12^2*s13^2 + 198*s12*s13^3 +
                18*s13^4)*s23 + (27*s12^3 + 315*s12^2*s13 + 333*s12*s13^2 +
                45*s13^3)*s23^2 + (27*s12^2 + 126*s12*s13 + 27*s13^2)*s23^
                3) + p1q*(-72*s12^4*s13 - 72*s12^3*s13^2 + (-9*s12^4 -
                117*s12^3*s13 - 27*s12^2*s13^2 + 9*s12*s13^3)*s23 +
              (-9*s12^3 - 72*s12^2*s13 - 27*s12*s13^2)*s23^2 +
              (-9*s12^2 - 54*s12*s13 - 9*s13^2)*s23^3 + (-9*s12 - 9*s13)*s23^
                4)))*Log((p2q + p3q)/(p1q + p2q + p3q))^2)/
        (p1q*p2q^3*(8*s12^2*s13 + 8*s12*s13^2)*s23^2 +
         p1q*p3q^3*(8*s12^2*s13 + 8*s12*s13^2)*s23^2 - 8*p1q^2*p2q^2*s12*s13*
          s23^3 + p3q^2*(p1q*p2q*(24*s12^2*s13 + 24*s12*s13^2)*s23^2 -
           8*p1q^2*s12*s13*s23^3) + p3q*(p1q*p2q^2*(24*s12^2*s13 +
             24*s12*s13^2)*s23^2 - 16*p1q^2*p2q*s12*s13*s23^3)) +
       ((p3q^3*((9*s12^3 + 36*s12^2*s13 + 27*s12*s13^2)*s23 +
            (27*s12^2 + 45*s12*s13)*s23^2 + 18*s12*s23^3) +
          p2q^3*((27*s12^2*s13 + 36*s12*s13^2 + 9*s13^3)*s23 +
            (45*s12*s13 + 27*s13^2)*s23^2 + 18*s13*s23^3) +
          p1q^2*p2q*((36*s12^2*s13 + 36*s12*s13^2)*s23 +
            (9*s12^2 + 54*s12*s13 + 9*s13^2)*s23^2 + (9*s12 + 9*s13)*s23^3) +
          p1q*p2q^2*(-36*s12*s13^3 + (9*s12^2*s13 - 36*s12*s13^2 - 9*s13^3)*
             s23 + (-s12^2 - 27*s12*s13 - 10*s13^2)*s23^2 +
            (-11*s12 - 11*s13)*s23^3 - 2*s23^4) +
          p3q*(p1q^2*((36*s12^2*s13 + 36*s12*s13^2)*s23 + (9*s12^2 +
                54*s12*s13 + 9*s13^2)*s23^2 + (9*s12 + 9*s13)*s23^3) +
            p2q^2*((9*s12^3 + 90*s12^2*s13 + 99*s12*s13^2 + 18*s13^3)*s23 +
              (27*s12^2 + 135*s12*s13 + 54*s13^2)*s23^2 + (18*s12 + 36*s13)*
               s23^3) + p1q*p2q*(72*s12^2*s13^2 + (-9*s12^3 + 45*s12^2*s13 +
                45*s12*s13^2 - 9*s13^3)*s23 + (-11*s12^2 - 18*s12*s13 -
                11*s13^2)*s23^2 + (-22*s12 - 22*s13)*s23^3 - 4*s23^4)) +
          p3q^2*(p2q*((18*s12^3 + 99*s12^2*s13 + 90*s12*s13^2 + 9*s13^3)*
               s23 + (54*s12^2 + 135*s12*s13 + 27*s13^2)*s23^2 +
              (36*s12 + 18*s13)*s23^3) + p1q*(-36*s12^3*s13 +
              (-9*s12^3 - 36*s12^2*s13 + 9*s12*s13^2)*s23 + (-10*s12^2 -
                27*s12*s13 - s13^2)*s23^2 + (-11*s12 - 11*s13)*s23^3 -
              2*s23^4)))*Log(-s12 - s13 - s23)^2)/
        (9*p1q*p2q^2*s12*s13*s23^2 + 18*p1q*p2q*p3q*s12*s13*s23^2 +
         9*p1q*p3q^2*s12*s13*s23^2) +
       ((p3q^3*((9*s12^2*s13 + 9*s12*s13^2)*s23 + 9*s12*s13*s23^2) +
          p1q^2*p2q*((18*s12^2*s13 + 18*s12*s13^2)*s23 +
            (27*s12*s13 + 9*s13^2)*s23^2 + 9*s13*s23^3) +
          p2q^3*((18*s12^2*s13 + 27*s12*s13^2 + 9*s13^3)*s23 +
            (36*s12*s13 + 27*s13^2)*s23^2 + 18*s13*s23^3) +
          p1q*p2q^2*(-18*s12*s13^3 + (-9*s12*s13^2 - 9*s13^3)*s23 +
            (-s12^2 - 9*s12*s13 - 10*s13^2)*s23^2 + (-2*s12 - 11*s13)*s23^3 -
            2*s23^4) + p3q*(p1q^2*((18*s12^2*s13 + 18*s12*s13^2)*s23 +
              (27*s12*s13 + 9*s13^2)*s23^2 + 9*s13*s23^3) +
            p2q^2*((45*s12^2*s13 + 63*s12*s13^2 + 18*s13^3)*s23 +
              (81*s12*s13 + 54*s13^2)*s23^2 + 36*s13*s23^3) +
            p1q*p2q*(36*s12^2*s13^2 + (9*s12^2*s13 + 36*s12*s13^2 - 9*s13^3)*
               s23 + (-2*s12^2 - 9*s12*s13 - 11*s13^2)*s23^2 +
              (-4*s12 - 22*s13)*s23^3 - 4*s23^4)) +
          p3q^2*(p2q*((36*s12^2*s13 + 45*s12*s13^2 + 9*s13^3)*s23 +
              (54*s12*s13 + 27*s13^2)*s23^2 + 18*s13*s23^3) +
            p1q*(-18*s12^3*s13 + (-27*s12^2*s13 + 9*s12*s13^2)*s23 +
              (-s12^2 - 18*s12*s13 - s13^2)*s23^2 + (-2*s12 - 11*s13)*s23^3 -
              2*s23^4)))*Log(s12/(s12 + s13 + s23))^2)/
        (8*p1q*p2q^2*s12*s13*s23^2 + 16*p1q*p2q*p3q*s12*s13*s23^2 +
         8*p1q*p3q^2*s12*s13*s23^2) +
       ((p2q^3*((9*s12^2*s13 + 9*s12*s13^2)*s23 + 9*s12*s13*s23^2) +
          p1q^2*p2q*((18*s12^2*s13 + 18*s12*s13^2)*s23 +
            (9*s12^2 + 27*s12*s13)*s23^2 + 9*s12*s23^3) +
          p3q^3*((9*s12^3 + 27*s12^2*s13 + 18*s12*s13^2)*s23 +
            (27*s12^2 + 36*s12*s13)*s23^2 + 18*s12*s23^3) +
          p1q*p2q^2*(-18*s12*s13^3 + (9*s12^2*s13 - 27*s12*s13^2)*s23 +
            (-s12^2 - 18*s12*s13 - s13^2)*s23^2 + (-11*s12 - 2*s13)*s23^3 -
            2*s23^4) + p3q*(p1q^2*((18*s12^2*s13 + 18*s12*s13^2)*s23 +
              (9*s12^2 + 27*s12*s13)*s23^2 + 9*s12*s23^3) +
            p2q^2*((9*s12^3 + 45*s12^2*s13 + 36*s12*s13^2)*s23 +
              (27*s12^2 + 54*s12*s13)*s23^2 + 18*s12*s23^3) +
            p1q*p2q*(36*s12^2*s13^2 + (-9*s12^3 + 36*s12^2*s13 + 9*s12*s13^2)*
               s23 + (-11*s12^2 - 9*s12*s13 - 2*s13^2)*s23^2 +
              (-22*s12 - 4*s13)*s23^3 - 4*s23^4)) +
          p3q^2*(p2q*((18*s12^3 + 63*s12^2*s13 + 45*s12*s13^2)*s23 +
              (54*s12^2 + 81*s12*s13)*s23^2 + 36*s12*s23^3) +
            p1q*(-18*s12^3*s13 + (-9*s12^3 - 9*s12^2*s13)*s23 +
              (-10*s12^2 - 9*s12*s13 - s13^2)*s23^2 + (-11*s12 - 2*s13)*s23^
                3 - 2*s23^4)))*Log(s13/(s12 + s13 + s23))^2)/
        (8*p1q*p2q^2*s12*s13*s23^2 + 16*p1q*p2q*p3q*s12*s13*s23^2 +
         8*p1q*p3q^2*s12*s13*s23^2) +
       ((p3q^3*((189*s12^5 + 1890*s12^4*s13 + 4536*s12^3*s13^2 +
              4158*s12^2*s13^3 + 1323*s12*s13^4)*s23 +
            (657*s12^4 + 3681*s12^3*s13 + 5391*s12^2*s13^2 + 2367*s12*s13^3)*
             s23^2 + (468*s12^3 + 1512*s12^2*s13 + 1044*s12*s13^2)*s23^3) +
          p2q^3*((1323*s12^4*s13 + 4158*s12^3*s13^2 + 4536*s12^2*s13^3 +
              1890*s12*s13^4 + 189*s13^5)*s23 + (2367*s12^3*s13 +
              5391*s12^2*s13^2 + 3681*s12*s13^3 + 657*s13^4)*s23^2 +
            (1044*s12^2*s13 + 1512*s12*s13^2 + 468*s13^3)*s23^3) +
          p1q*p2q^2*(-1512*s12^3*s13^3 - 3024*s12^2*s13^4 - 1512*s12*s13^5 +
            (189*s12^4*s13 + 162*s12^3*s13^2 - 3024*s12^2*s13^3 -
              3186*s12*s13^4 - 189*s13^5)*s23 + (-187*s12^4 - 919*s12^3*s13 -
              2931*s12^2*s13^2 - 2881*s12*s13^3 - 466*s13^4)*s23^2 +
            (-637*s12^3 - 2383*s12^2*s13 - 2581*s12*s13^2 - 727*s13^3)*
             s23^3 + (-448*s12^2 - 896*s12*s13 - 448*s13^2)*s23^4) +
          p1q^2*p2q*((1512*s12^4*s13 + 4536*s12^3*s13^2 + 4536*s12^2*s13^3 +
              1512*s12*s13^4)*s23 + (189*s12^4 + 3564*s12^3*s13 +
              6750*s12^2*s13^2 + 3564*s12*s13^3 + 189*s13^4)*s23^2 +
            (279*s12^3 + 2241*s12^2*s13 + 2241*s12*s13^2 + 279*s13^3)*s23^3 +
            (90*s12^2 + 288*s12*s13 + 90*s13^2)*s23^4) +
          p3q^2*(p2q*((378*s12^5 + 5103*s12^4*s13 + 13230*s12^3*s13^2 +
                12852*s12^2*s13^3 + 4536*s12*s13^4 + 189*s13^5)*s23 +
              (1314*s12^4 + 9729*s12^3*s13 + 16173*s12^2*s13^2 +
                8415*s12*s13^3 + 657*s13^4)*s23^2 + (936*s12^3 +
                4068*s12^2*s13 + 3600*s12*s13^2 + 468*s13^3)*s23^3) +
            p1q*(-1512*s12^5*s13 - 3024*s12^4*s13^2 - 1512*s12^3*s13^3 +
              (-189*s12^5 - 3186*s12^4*s13 - 3024*s12^3*s13^2 + 162*s12^2*
                 s13^3 + 189*s12*s13^4)*s23 + (-466*s12^4 - 2881*s12^3*s13 -
                2931*s12^2*s13^2 - 919*s12*s13^3 - 187*s13^4)*s23^2 +
              (-727*s12^3 - 2581*s12^2*s13 - 2383*s12*s13^2 - 637*s13^3)*s23^
                3 + (-448*s12^2 - 896*s12*s13 - 448*s13^2)*s23^4)) +
          p3q*(p2q^2*((189*s12^5 + 4536*s12^4*s13 + 12852*s12^3*s13^2 +
                13230*s12^2*s13^3 + 5103*s12*s13^4 + 378*s13^5)*s23 +
              (657*s12^4 + 8415*s12^3*s13 + 16173*s12^2*s13^2 +
                9729*s12*s13^3 + 1314*s13^4)*s23^2 + (468*s12^3 +
                3600*s12^2*s13 + 4068*s12*s13^2 + 936*s13^3)*s23^3) +
            p1q*p2q*(3024*s12^4*s13^2 + 6048*s12^3*s13^3 + 3024*s12^2*s13^4 +
              (-189*s12^5 + 27*s12^4*s13 + 6210*s12^3*s13^2 + 6210*s12^2*
                 s13^3 + 27*s12*s13^4 - 189*s13^5)*s23 + (-653*s12^4 -
                2288*s12^3*s13 - 2838*s12^2*s13^2 - 2288*s12*s13^3 -
                653*s13^4)*s23^2 + (-1364*s12^3 - 4964*s12^2*s13 -
                4964*s12*s13^2 - 1364*s13^3)*s23^3 + (-896*s12^2 -
                1792*s12*s13 - 896*s13^2)*s23^4) +
            p1q^2*((1512*s12^4*s13 + 4536*s12^3*s13^2 + 4536*s12^2*s13^3 +
                1512*s12*s13^4)*s23 + (189*s12^4 + 3564*s12^3*s13 +
                6750*s12^2*s13^2 + 3564*s12*s13^3 + 189*s13^4)*s23^2 +
              (279*s12^3 + 2241*s12^2*s13 + 2241*s12*s13^2 + 279*s13^3)*s23^
                3 + (90*s12^2 + 288*s12*s13 + 90*s13^2)*s23^4)))*
         Log(s23/(s12 + s13 + s23)))/(p1q*p2q^2*(72*s12^3*s13 +
           144*s12^2*s13^2 + 72*s12*s13^3)*s23^2 +
         p1q*p3q^2*(72*s12^3*s13 + 144*s12^2*s13^2 + 72*s12*s13^3)*s23^2 +
         p1q*p2q*p3q*(144*s12^3*s13 + 288*s12^2*s13^2 + 144*s12*s13^3)*
          s23^2) + ((p3q^2*(-315*s12^4*s13 - 324*s12^3*s13^2 -
            9*s12^2*s13^3 + (-90*s12^4 - 567*s12^3*s13 - 81*s12^2*s13^2 +
              90*s12*s13^3)*s23 + (-90*s12^3 - 162*s12^2*s13 + 90*s12*s13^2)*
             s23^2) + p2q^2*(-9*s12^3*s13^2 - 324*s12^2*s13^3 -
            315*s12*s13^4 + (90*s12^3*s13 - 81*s12^2*s13^2 - 567*s12*s13^3 -
              90*s13^4)*s23 + (90*s12^2*s13 - 162*s12*s13^2 - 90*s13^3)*
             s23^2) + p1q^2*((-153*s12^3*s13 - 306*s12^2*s13^2 -
              153*s12*s13^3)*s23 + (-90*s12^3 - 243*s12^2*s13 -
              243*s12*s13^2 - 90*s13^3)*s23^2 + (-90*s12^2 - 90*s13^2)*
             s23^3) + p1q*p2q*(-153*s12^3*s13^2 + 153*s12*s13^4 +
            (223*s12^3*s13 - 63*s12^2*s13^2 + 376*s12*s13^3 + 90*s13^4)*s23 +
            (70*s12^3 + 453*s12^2*s13 + 363*s12*s13^2 + 160*s13^3)*s23^2 +
            (70*s12^2 + 280*s12*s13 + 70*s13^2)*s23^3) +
          p3q*(p2q*(-315*s12^4*s13 - 333*s12^3*s13^2 - 333*s12^2*s13^3 -
              315*s12*s13^4 + (-90*s12^4 - 477*s12^3*s13 - 162*s12^2*s13^2 -
                477*s12*s13^3 - 90*s13^4)*s23 + (-90*s12^3 - 72*s12^2*s13 -
                72*s12*s13^2 - 90*s13^3)*s23^2) + p1q*(153*s12^4*s13 -
              153*s12^2*s13^3 + (90*s12^4 + 376*s12^3*s13 - 63*s12^2*s13^2 +
                223*s12*s13^3)*s23 + (160*s12^3 + 363*s12^2*s13 +
                453*s12*s13^2 + 70*s13^3)*s23^2 + (70*s12^2 + 280*s12*s13 +
                70*s13^2)*s23^3)))*Log((s12 + s13)/(s12 + s13 + s23))*
         Log(s23/(s12 + s13 + s23)))/(72*p1q*p2q*s12^2*s13^2*s23 +
         72*p1q*p3q*s12^2*s13^2*s23) +
       ((p3q^3*((-9*s12^3 - 36*s12^2*s13 - 27*s12*s13^2)*s23 +
            (-27*s12^2 - 45*s12*s13)*s23^2 - 18*s12*s23^3) +
          p1q^2*p2q*((-36*s12^2*s13 - 36*s12*s13^2)*s23 +
            (-9*s12^2 - 54*s12*s13 - 9*s13^2)*s23^2 + (-9*s12 - 9*s13)*
             s23^3) + p2q^3*((-27*s12^2*s13 - 36*s12*s13^2 - 9*s13^3)*s23 +
            (-45*s12*s13 - 27*s13^2)*s23^2 - 18*s13*s23^3) +
          p1q*p2q^2*(36*s12*s13^3 + (-9*s12^2*s13 + 36*s12*s13^2 + 9*s13^3)*
             s23 + (10*s12^2 + 27*s12*s13 + 19*s13^2)*s23^2 +
            (29*s12 + 29*s13)*s23^3 + 20*s23^4) +
          p3q^2*(p2q*((-18*s12^3 - 99*s12^2*s13 - 90*s12*s13^2 - 9*s13^3)*
               s23 + (-54*s12^2 - 135*s12*s13 - 27*s13^2)*s23^2 +
              (-36*s12 - 18*s13)*s23^3) + p1q*(36*s12^3*s13 +
              (9*s12^3 + 36*s12^2*s13 - 9*s12*s13^2)*s23 + (19*s12^2 +
                27*s12*s13 + 10*s13^2)*s23^2 + (29*s12 + 29*s13)*s23^3 +
              20*s23^4)) + p3q*(p2q^2*((-9*s12^3 - 90*s12^2*s13 -
                99*s12*s13^2 - 18*s13^3)*s23 + (-27*s12^2 - 135*s12*s13 -
                54*s13^2)*s23^2 + (-18*s12 - 36*s13)*s23^3) +
            p1q^2*((-36*s12^2*s13 - 36*s12*s13^2)*s23 + (-9*s12^2 -
                54*s12*s13 - 9*s13^2)*s23^2 + (-9*s12 - 9*s13)*s23^3) +
            p1q*p2q*(-72*s12^2*s13^2 + (9*s12^3 - 45*s12^2*s13 -
                45*s12*s13^2 + 9*s13^3)*s23 + (29*s12^2 + 18*s12*s13 +
                29*s13^2)*s23^2 + (58*s12 + 58*s13)*s23^3 + 40*s23^4)))*
         Log(s23/(s12 + s13 + s23))^2)/(72*p1q*p2q^2*s12*s13*s23^2 +
         144*p1q*p2q*p3q*s12*s13*s23^2 + 72*p1q*p3q^2*s12*s13*s23^2) +
       Log(p1q/(p1q + p2q + p3q))*((9*s12^2 + 9*s13^2)/(4*s12*s13) +
         (p2q*(-9*s12^2 - 18*s12*s13 - 9*s13^2 + (-18*s12 - 18*s13)*s23 -
            9*s23^2)*Log(p2q/(p1q + p2q + p3q)))/(4*p1q*s12*s23) +
         ((p3q^3*(-9*s12^3 - 9*s12^2*s13 - 9*s12^2*s23) +
            p1q*p2q^2*(-9*s12*s13^2 - 9*s13^3 + (9*s12^2 + 9*s12*s13 -
                9*s13^2)*s23 + 9*s12*s23^2) + p1q^2*p2q*(9*s12^2*s13 -
              9*s13^3 + (18*s12^2 + 27*s12*s13 - 9*s13^2)*s23 +
              18*s12*s23^2) + p1q^3*((9*s12^2 + 18*s12*s13 + 9*s13^2)*s23 +
              (18*s12 + 18*s13)*s23^2 + 9*s23^3) + p2q^3*(9*s12^2*s13 +
              9*s12*s13^2 + (18*s12^2 + 45*s12*s13 + 18*s13^2)*s23 +
              (36*s12 + 36*s13)*s23^2 + 18*s23^3) +
            p3q^2*(p2q*(-18*s12^3 - 9*s12^2*s13 + 9*s12*s13^2 +
                (-18*s12^2 + 9*s12*s13)*s23) + p1q*(-9*s12^3 - 9*s12^2*s13 +
                (9*s12^2 + 18*s12*s13)*s23 + 18*s12*s23^2)) +
            p3q*(p1q*p2q*(18*s12^2*s13 + 18*s12*s13^2 + (36*s12^2 +
                  63*s12*s13 + 9*s13^2)*s23 + (36*s12 + 9*s13)*s23^2) +
              p1q^2*(-9*s12^3 + 9*s12*s13^2 + (-9*s12^2 + 9*s12*s13)*s23 +
                (-9*s12 - 9*s13)*s23^2 - 9*s23^3) + p2q^2*(-9*s12^3 +
                9*s12^2*s13 + 18*s12*s13^2 + (9*s12^2 + 54*s12*s13 +
                  18*s13^2)*s23 + (36*s12 + 36*s13)*s23^2 + 18*s23^3)))*
           Log((p1q + p2q)/(p1q + p2q + p3q)))/(8*p1q*p3q^2*s12^2*s23 +
           p1q^2*p2q*(-8*s12*s13*s23 - 8*s12*s23^2) +
           p1q*p2q^2*(-8*s12*s13*s23 - 8*s12*s23^2) +
           p3q*(p1q^2*(-8*s12*s13*s23 - 8*s12*s23^2) +
             p1q*p2q*((8*s12^2 - 8*s12*s13)*s23 - 8*s12*s23^2))) +
         (p3q*(-9*s12^2 - 18*s12*s13 - 9*s13^2 + (-18*s12 - 18*s13)*s23 -
            9*s23^2)*Log(p3q/(p1q + p2q + p3q)))/(4*p1q*s13*s23) +
         ((p2q^3*(9*s12*s13^2 + 9*s13^3 + 9*s13^2*s23) +
            p1q*p2q^2*(9*s12*s13^2 + 9*s13^3 + (-18*s12*s13 - 9*s13^2)*s23 -
              18*s13*s23^2) + p3q^3*(-9*s12^2*s13 - 9*s12*s13^2 +
              (-18*s12^2 - 45*s12*s13 - 18*s13^2)*s23 + (-36*s12 - 36*s13)*
               s23^2 - 18*s23^3) + p1q^3*((-9*s12^2 - 18*s12*s13 - 9*s13^2)*
               s23 + (-18*s12 - 18*s13)*s23^2 - 9*s23^3) +
            p1q^2*p2q*(-9*s12^2*s13 + 9*s13^3 + (-9*s12*s13 + 9*s13^2)*s23 +
              (9*s12 + 9*s13)*s23^2 + 9*s23^3) +
            p3q*(p2q^2*(-9*s12^2*s13 + 9*s12*s13^2 + 18*s13^3 +
                (-9*s12*s13 + 18*s13^2)*s23) + p1q*p2q*(-18*s12^2*s13 -
                18*s12*s13^2 + (-9*s12^2 - 63*s12*s13 - 36*s13^2)*s23 +
                (-9*s12 - 36*s13)*s23^2) + p1q^2*(9*s12^3 - 9*s12*s13^2 +
                (9*s12^2 - 27*s12*s13 - 18*s13^2)*s23 - 18*s13*s23^2)) +
            p3q^2*(p1q*(9*s12^3 + 9*s12^2*s13 + (9*s12^2 - 9*s12*s13 -
                  9*s13^2)*s23 - 9*s13*s23^2) + p2q*(-18*s12^2*s13 -
                9*s12*s13^2 + 9*s13^3 + (-18*s12^2 - 54*s12*s13 - 9*s13^2)*
                 s23 + (-36*s12 - 36*s13)*s23^2 - 18*s23^3)))*
           Log((p1q + p3q)/(p1q + p2q + p3q)))/(-8*p1q*p2q^2*s13^2*s23 +
           p1q^2*p2q*(8*s12*s13*s23 + 8*s13*s23^2) + p1q*p3q^2*
            (8*s12*s13*s23 + 8*s13*s23^2) +
           p3q*(p1q^2*(8*s12*s13*s23 + 8*s13*s23^2) +
             p1q*p2q*((8*s12*s13 - 8*s13^2)*s23 + 8*s13*s23^2))) +
         ((p3q^4*((-18*s12^4 - 90*s12^3*s13 - 126*s12^2*s13^2 - 54*s12*s13^3)*
               s23 + (-45*s12^3 - 144*s12^2*s13 - 99*s12*s13^2)*s23^2 +
              (-27*s12^2 - 45*s12*s13)*s23^3) + p1q^2*p2q^2*
             ((-72*s12^3*s13 - 216*s12^2*s13^2 - 144*s12*s13^3)*s23 +
              (-9*s12^3 - 153*s12^2*s13 - 243*s12*s13^2 - 27*s13^3)*s23^2 +
              (-9*s12^2 - 72*s12*s13 - 27*s13^2)*s23^3) +
            p2q^4*((-54*s12^3*s13 - 126*s12^2*s13^2 - 90*s12*s13^3 -
                18*s13^4)*s23 + (-99*s12^2*s13 - 144*s12*s13^2 - 45*s13^3)*
               s23^2 + (-45*s12*s13 - 27*s13^2)*s23^3) +
            p1q^3*p2q*((72*s12^2*s13 + 72*s12*s13^2)*s23^2 +
              (18*s12^2 + 108*s12*s13 + 18*s13^2)*s23^3 + (18*s12 + 18*s13)*
               s23^4) + p1q*p2q^3*(72*s12^2*s13^3 + 72*s12*s13^4 +
              (-9*s12^3*s13 + 27*s12^2*s13^2 + 117*s12*s13^3 + 9*s13^4)*s23 +
              (45*s12^2*s13 + 108*s12*s13^2 + 27*s13^3)*s23^2 +
              (9*s12^2 + 90*s12*s13 + 45*s13^2)*s23^3 + (9*s12 + 27*s13)*s23^
                4) + p3q^3*(p2q*((-54*s12^4 - 324*s12^3*s13 - 504*s12^2*
                   s13^2 - 252*s12*s13^3 - 18*s13^4)*s23 + (-135*s12^3 -
                  531*s12^2*s13 - 441*s12*s13^2 - 45*s13^3)*s23^2 +
                (-81*s12^2 - 180*s12*s13 - 27*s13^2)*s23^3) +
              p1q*(72*s12^4*s13 + 72*s12^3*s13^2 + (9*s12^4 + 117*s12^3*s13 +
                  27*s12^2*s13^2 - 9*s12*s13^3)*s23 + (27*s12^3 + 108*s12^2*
                   s13 + 45*s12*s13^2)*s23^2 + (45*s12^2 + 90*s12*s13 +
                  9*s13^2)*s23^3 + (27*s12 + 9*s13)*s23^4)) +
            p3q^2*(p2q^2*((-54*s12^4 - 432*s12^3*s13 - 756*s12^2*s13^2 -
                  432*s12*s13^3 - 54*s13^4)*s23 + (-135*s12^3 - 729*s12^2*
                   s13 - 729*s12*s13^2 - 135*s13^3)*s23^2 +
                (-81*s12^2 - 270*s12*s13 - 81*s13^2)*s23^3) +
              p1q^2*((-144*s12^3*s13 - 216*s12^2*s13^2 - 72*s12*s13^3)*s23 +
                (-27*s12^3 - 243*s12^2*s13 - 153*s12*s13^2 - 9*s13^3)*s23^2 +
                (-27*s12^2 - 72*s12*s13 - 9*s13^2)*s23^3) +
              p1q*p2q*(72*s12^4*s13 - 72*s12^3*s13^2 - 144*s12^2*s13^3 +
                (18*s12^4 + 81*s12^3*s13 - 207*s12^2*s13^2 - 45*s12*s13^3 +
                  9*s13^4)*s23 + (54*s12^3 + 189*s12^2*s13 + 126*s12*s13^2 +
                  27*s13^3)*s23^2 + (99*s12^2 + 270*s12*s13 + 63*s13^2)*
                 s23^3 + (63*s12 + 45*s13)*s23^4)) +
            p3q*(p2q^3*((-18*s12^4 - 252*s12^3*s13 - 504*s12^2*s13^2 -
                  324*s12*s13^3 - 54*s13^4)*s23 + (-45*s12^3 - 441*s12^2*
                   s13 - 531*s12*s13^2 - 135*s13^3)*s23^2 +
                (-27*s12^2 - 180*s12*s13 - 81*s13^2)*s23^3) +
              p1q^2*p2q*((-72*s12^3*s13 - 144*s12^2*s13^2 - 72*s12*s13^3)*
                 s23 + (-36*s12^3 - 108*s12^2*s13 - 108*s12*s13^2 - 36*s13^3)*
                 s23^2 + (-36*s12^2 - 36*s13^2)*s23^3) +
              p1q^3*((72*s12^2*s13 + 72*s12*s13^2)*s23^2 +
                (18*s12^2 + 108*s12*s13 + 18*s13^2)*s23^3 + (18*s12 + 18*s13)*
                 s23^4) + p1q*p2q^2*(-144*s12^3*s13^2 - 72*s12^2*s13^3 +
                72*s12*s13^4 + (9*s12^4 - 45*s12^3*s13 - 207*s12^2*s13^2 +
                  81*s12*s13^3 + 18*s13^4)*s23 + (27*s12^3 + 126*s12^2*s13 +
                  189*s12*s13^2 + 54*s13^3)*s23^2 + (63*s12^2 + 270*s12*s13 +
                  99*s13^2)*s23^3 + (45*s12 + 63*s13)*s23^4)))*
           Log((p2q + p3q)/(p1q + p2q + p3q)))/
          (p1q*p2q^3*(8*s12^2*s13 + 8*s12*s13^2)*s23^2 +
           p1q*p3q^3*(8*s12^2*s13 + 8*s12*s13^2)*s23^2 - 8*p1q^2*p2q^2*s12*
            s13*s23^3 + p3q^2*(p1q*p2q*(24*s12^2*s13 + 24*s12*s13^2)*s23^2 -
             8*p1q^2*s12*s13*s23^3) + p3q*(p1q*p2q^2*(24*s12^2*s13 + 24*s12*
                s13^2)*s23^2 - 16*p1q^2*p2q*s12*s13*s23^3)) +
         ((p3q^3*((9*s12^3 + 36*s12^2*s13 + 27*s12*s13^2)*s23 +
              (27*s12^2 + 45*s12*s13)*s23^2 + 18*s12*s23^3) +
            p1q*p2q^2*(-36*s12*s13^3 + (9*s12^2*s13 - 36*s12*s13^2 - 9*s13^3)*
               s23 + (-27*s12*s13 - 9*s13^2)*s23^2 + (-9*s12 - 9*s13)*s23^
                3) + p2q^3*((27*s12^2*s13 + 36*s12*s13^2 + 9*s13^3)*s23 +
              (45*s12*s13 + 27*s13^2)*s23^2 + 18*s13*s23^3) +
            p1q^2*p2q*((36*s12^2*s13 + 36*s12*s13^2)*s23 + (9*s12^2 +
                54*s12*s13 + 9*s13^2)*s23^2 + (9*s12 + 9*s13)*s23^3) +
            p3q^2*(p1q*(-36*s12^3*s13 + (-9*s12^3 - 36*s12^2*s13 +
                  9*s12*s13^2)*s23 + (-9*s12^2 - 27*s12*s13)*s23^2 +
                (-9*s12 - 9*s13)*s23^3) + p2q*((18*s12^3 + 99*s12^2*s13 +
                  90*s12*s13^2 + 9*s13^3)*s23 + (54*s12^2 + 135*s12*s13 +
                  27*s13^2)*s23^2 + (36*s12 + 18*s13)*s23^3)) +
            p3q*(p1q*p2q*(72*s12^2*s13^2 + (-9*s12^3 + 45*s12^2*s13 +
                  45*s12*s13^2 - 9*s13^3)*s23 + (-9*s12^2 - 18*s12*s13 -
                  9*s13^2)*s23^2 + (-18*s12 - 18*s13)*s23^3) +
              p1q^2*((36*s12^2*s13 + 36*s12*s13^2)*s23 + (9*s12^2 +
                  54*s12*s13 + 9*s13^2)*s23^2 + (9*s12 + 9*s13)*s23^3) +
              p2q^2*((9*s12^3 + 90*s12^2*s13 + 99*s12*s13^2 + 18*s13^3)*s23 +
                (27*s12^2 + 135*s12*s13 + 54*s13^2)*s23^2 + (18*s12 + 36*s13)*
                 s23^3)))*Log(-s12 - s13 - s23))/(4*p1q*p2q^2*s12*s13*s23^2 +
           8*p1q*p2q*p3q*s12*s13*s23^2 + 4*p1q*p3q^2*s12*s13*s23^2) +
         ((p3q^3*(9*s12^3 + 9*s12^2*s13 + 9*s12^2*s23) +
            p1q^2*p2q*(-9*s12^2*s13 + 9*s13^3 + (-18*s12^2 - 27*s12*s13 +
                9*s13^2)*s23 - 18*s12*s23^2) + p2q^3*(-27*s12^2*s13 -
              45*s12*s13^2 - 18*s13^3 + (-36*s12^2 - 117*s12*s13 - 72*s13^2)*
               s23 + (-72*s12 - 90*s13)*s23^2 - 36*s23^3) +
            p1q*p2q^2*(-18*s12^2*s13 - 27*s12*s13^2 - 9*s13^3 +
              (-27*s12^2 - 81*s12*s13 - 45*s13^2)*s23 + (-45*s12 - 54*s13)*
               s23^2 - 18*s23^3) + p1q^3*((-9*s12^2 - 18*s12*s13 - 9*s13^2)*
               s23 + (-18*s12 - 18*s13)*s23^2 - 9*s23^3) +
            p3q^2*(p1q*(9*s12^3 + 9*s12^2*s13 + (-9*s12^2 - 18*s12*s13)*s23 -
                18*s12*s23^2) + p2q*(36*s12^3 + 45*s12^2*s13 + 9*s12*s13^2 +
                (54*s12^2 + 27*s12*s13)*s23 + 18*s12*s23^2)) +
            p3q*(p2q^2*(27*s12^3 + 9*s12^2*s13 - 36*s12*s13^2 - 18*s13^3 +
                (9*s12^2 - 90*s12*s13 - 72*s13^2)*s23 + (-54*s12 - 90*s13)*
                 s23^2 - 36*s23^3) + p1q*p2q*(-36*s12^2*s13 - 54*s12*s13^2 -
                18*s13^3 + (-54*s12^2 - 135*s12*s13 - 63*s13^2)*s23 +
                (-72*s12 - 63*s13)*s23^2 - 18*s23^3) + p1q^2*(9*s12^3 -
                9*s12*s13^2 + (9*s12^2 - 9*s12*s13)*s23 + (9*s12 + 9*s13)*
                 s23^2 + 9*s23^3)))*Log(s12/(s12 + s13 + s23)))/
          (8*p1q*p3q^2*s12^2*s23 + p1q^2*p2q*(-8*s12*s13*s23 - 8*s12*s23^2) +
           p1q*p2q^2*(-8*s12*s13*s23 - 8*s12*s23^2) +
           p3q*(p1q^2*(-8*s12*s13*s23 - 8*s12*s23^2) +
             p1q*p2q*((8*s12^2 - 8*s12*s13)*s23 - 8*s12*s23^2))) +
         ((p2q^3*(-9*s12*s13^2 - 9*s13^3 - 9*s13^2*s23) +
            p1q*p2q^2*(-9*s12*s13^2 - 9*s13^3 + (18*s12*s13 + 9*s13^2)*s23 +
              18*s13*s23^2) + p1q^2*p2q*(9*s12^2*s13 - 9*s13^3 +
              (9*s12*s13 - 9*s13^2)*s23 + (-9*s12 - 9*s13)*s23^2 - 9*s23^3) +
            p1q^3*((9*s12^2 + 18*s12*s13 + 9*s13^2)*s23 + (18*s12 + 18*s13)*
               s23^2 + 9*s23^3) + p3q^3*(18*s12^3 + 45*s12^2*s13 +
              27*s12*s13^2 + (72*s12^2 + 117*s12*s13 + 36*s13^2)*s23 +
              (90*s12 + 72*s13)*s23^2 + 36*s23^3) +
            p3q*(p2q^2*(-9*s12^2*s13 - 45*s12*s13^2 - 36*s13^3 +
                (-27*s12*s13 - 54*s13^2)*s23 - 18*s13*s23^2) +
              p1q^2*(-9*s12^3 + 9*s12*s13^2 + (-9*s12^2 + 27*s12*s13 +
                  18*s13^2)*s23 + 18*s13*s23^2) + p1q*p2q*(18*s12^3 +
                54*s12^2*s13 + 36*s12*s13^2 + (63*s12^2 + 135*s12*s13 +
                  54*s13^2)*s23 + (63*s12 + 72*s13)*s23^2 + 18*s23^3)) +
            p3q^2*(p1q*(9*s12^3 + 27*s12^2*s13 + 18*s12*s13^2 +
                (45*s12^2 + 81*s12*s13 + 27*s13^2)*s23 + (54*s12 + 45*s13)*
                 s23^2 + 18*s23^3) + p2q*(18*s12^3 + 36*s12^2*s13 -
                9*s12*s13^2 - 27*s13^3 + (72*s12^2 + 90*s12*s13 - 9*s13^2)*
                 s23 + (90*s12 + 54*s13)*s23^2 + 36*s23^3)))*
           Log(s13/(s12 + s13 + s23)))/(-8*p1q*p2q^2*s13^2*s23 +
           p1q^2*p2q*(8*s12*s13*s23 + 8*s13*s23^2) + p1q*p3q^2*
            (8*s12*s13*s23 + 8*s13*s23^2) +
           p3q*(p1q^2*(8*s12*s13*s23 + 8*s13*s23^2) +
             p1q*p2q*((8*s12*s13 - 8*s13^2)*s23 + 8*s13*s23^2))) +
         ((p3q^4*((-9*s12^3 + 9*s12*s13^2)*s23 + (-9*s12^2 + 9*s12*s13)*s23^
                2) + p2q^4*((9*s12^2*s13 - 9*s13^3)*s23 + (9*s12*s13 -
                9*s13^2)*s23^2) + p1q^2*p2q^2*(72*s12^2*s13^2 +
              (-9*s12^3 + 45*s12^2*s13 + 45*s12*s13^2 - 9*s13^3)*s23 +
              (-9*s12^2 - 18*s12*s13 - 9*s13^2)*s23^2 + (-18*s12 - 18*s13)*
               s23^3) + p1q*p2q^3*(-9*s12^3*s13 + 27*s12^2*s13^2 -
              27*s12*s13^3 + 9*s13^4 + (63*s12^2*s13 + 36*s12*s13^2 +
                9*s13^3)*s23 + (9*s12^2 + 36*s12*s13 + 27*s13^2)*s23^2 +
              (-9*s12 + 9*s13)*s23^3) + p3q^3*
             (p2q*((-27*s12^3 + 9*s12^2*s13 + 27*s12*s13^2 - 9*s13^3)*s23 +
                (-27*s12^2 + 36*s12*s13 - 9*s13^2)*s23^2) + p1q*(9*s12^4 -
                27*s12^3*s13 + 27*s12^2*s13^2 - 9*s12*s13^3 +
                (9*s12^3 + 36*s12^2*s13 + 63*s12*s13^2)*s23 +
                (27*s12^2 + 36*s12*s13 + 9*s13^2)*s23^2 + (9*s12 - 9*s13)*
                 s23^3)) + p3q^2*(p2q^2*((-27*s12^3 + 27*s12^2*s13 +
                  27*s12*s13^2 - 27*s13^3)*s23 + (-27*s12^2 + 54*s12*s13 -
                  27*s13^2)*s23^2) + p1q^2*(72*s12^2*s13^2 +
                (-9*s12^3 + 45*s12^2*s13 + 45*s12*s13^2 - 9*s13^3)*s23 +
                (-9*s12^2 - 18*s12*s13 - 9*s13^2)*s23^2 + (-18*s12 - 18*s13)*
                 s23^3) + p1q*p2q*(18*s12^4 - 63*s12^3*s13 + 81*s12^2*s13^2 -
                45*s12*s13^3 + 9*s13^4 + (18*s12^3 + 135*s12^2*s13 +
                  162*s12*s13^2 + 9*s13^3)*s23 + (63*s12^2 + 108*s12*s13 +
                  45*s13^2)*s23^2 + (9*s12 - 9*s13)*s23^3)) +
            p3q*(p2q^3*((-9*s12^3 + 27*s12^2*s13 + 9*s12*s13^2 - 27*s13^3)*
                 s23 + (-9*s12^2 + 36*s12*s13 - 27*s13^2)*s23^2) +
              p1q^2*p2q*(-72*s12^3*s13 - 72*s12*s13^3 + (-18*s12^3 -
                  54*s12^2*s13 - 54*s12*s13^2 - 18*s13^3)*s23 +
                (-18*s12^2 - 108*s12*s13 - 18*s13^2)*s23^2 +
                (-36*s12 - 36*s13)*s23^3) + p1q*p2q^2*(9*s12^4 -
                45*s12^3*s13 + 81*s12^2*s13^2 - 63*s12*s13^3 + 18*s13^4 +
                (9*s12^3 + 162*s12^2*s13 + 135*s12*s13^2 + 18*s13^3)*s23 +
                (45*s12^2 + 108*s12*s13 + 63*s13^2)*s23^2 + (-9*s12 + 9*s13)*
                 s23^3)))*Log(s23/(s12 + s13 + s23)))/
          (p1q*p2q^3*(8*s12^2*s13 + 8*s12*s13^2)*s23 +
           p1q*p3q^3*(8*s12^2*s13 + 8*s12*s13^2)*s23 - 8*p1q^2*p2q^2*s12*s13*
            s23^2 + p3q^2*(p1q*p2q*(24*s12^2*s13 + 24*s12*s13^2)*s23 -
             8*p1q^2*s12*s13*s23^2) + p3q*(p1q*p2q^2*(24*s12^2*s13 + 24*s12*
                s13^2)*s23 - 16*p1q^2*p2q*s12*s13*s23^2))) +
       Log(p2q/(p1q + p2q + p3q))*((8*s12^2 - 2*s12*s13 - s13^2)/
          (4*s12*s13) + ((p3q^2*((-s12^3 - s12^2*s13)*s23 - s12^2*s23^2) +
            p2q^2*(-18*s12^2*s13^2 - 36*s12*s13^3 - 18*s13^4 +
              (-18*s12^2*s13 - 73*s12*s13^2 - 55*s13^3)*s23 +
              (-37*s12*s13 - 56*s13^2)*s23^2 - 19*s13*s23^3) +
            p1q*p2q*(-18*s12^2*s13^2 - 36*s12*s13^3 - 18*s13^4 +
              (-19*s12^2*s13 - 75*s12*s13^2 - 56*s13^3)*s23 +
              (-2*s12^2 - 43*s12*s13 - 60*s13^2)*s23^2 + (-5*s12 - 25*s13)*
               s23^3 - 3*s23^4) + p1q^2*((-2*s12*s13^2 - 2*s13^3)*s23 +
              (-s12^2 - 5*s12*s13 - 6*s13^2)*s23^2 + (-4*s12 - 7*s13)*s23^3 -
              3*s23^4) + p3q*(p2q*(18*s12^3*s13 + 36*s12^2*s13^2 +
                18*s12*s13^3 + (38*s12^2*s13 + 38*s12*s13^2)*s23 +
                (s12^2 + 21*s12*s13)*s23^2 + s12*s23^3) +
              p1q*((s12^3 + 3*s12^2*s13 + 2*s12*s13^2)*s23 +
                (5*s12^2 + 6*s12*s13)*s23^2 + 4*s12*s23^3)))*
           Log((p1q + p2q)/(p1q + p2q + p3q)))/(8*p1q*p3q*s12^2*s13*s23 +
           p1q^2*(-8*s12*s13^2*s23 - 8*s12*s13*s23^2) +
           p1q*p2q*(-8*s12*s13^2*s23 - 8*s12*s13*s23^2)) +
         (p3q*(-9*s12^2 - 18*s12*s13 - 9*s13^2 + (-18*s12 - 18*s13)*s23 -
            9*s23^2)*Log(p3q/(p1q + p2q + p3q)))/(4*p1q*s13*s23) +
         ((p2q^3*(9*s12^2*s13^2 + 9*s12*s13^3 + (10*s12*s13^2 + s13^3)*s23 +
              s13^2*s23^2) + p3q^3*(-18*s12^4 - 45*s12^3*s13 -
              27*s12^2*s13^2 + (-71*s12^3 - 116*s12^2*s13 - 36*s12*s13^2)*
               s23 + (-88*s12^2 - 71*s12*s13)*s23^2 - 35*s12*s23^3) +
            p1q^3*((-9*s12^3 - 18*s12^2*s13 - 9*s12*s13^2)*s23 +
              (-18*s12^2 - 18*s12*s13)*s23^2 - 9*s12*s23^3) +
            p1q*p2q^2*(9*s12^2*s13^2 + 9*s12*s13^3 + (-20*s12^2*s13 -
                12*s12*s13^2 - s13^3)*s23 + (-24*s12*s13 - 5*s13^2)*s23^2 -
              4*s13*s23^3) + p1q^2*p2q*(-9*s12^3*s13 + 9*s12*s13^3 +
              (2*s12^3 - 7*s12^2*s13 + 9*s12*s13^2)*s23 + (15*s12^2 +
                14*s12*s13 + s13^2)*s23^2 + (16*s12 + 4*s13)*s23^3 +
              3*s23^4) + p3q*(p2q^2*(9*s12^3*s13 + 45*s12^2*s13^2 +
                36*s12*s13^3 + (25*s12^2*s13 + 53*s12*s13^2 + s13^3)*s23 +
                15*s12*s13*s23^2 - s13*s23^3) + p1q*p2q*(-18*s12^4 -
                54*s12^3*s13 - 36*s12^2*s13^2 + (-61*s12^3 - 134*s12^2*s13 -
                  56*s12*s13^2 - s13^3)*s23 + (-57*s12^2 - 71*s12*s13 -
                  3*s13^2)*s23^2 + (-11*s12 + s13)*s23^3 + 3*s23^4) +
              p1q^2*(9*s12^4 - 9*s12^2*s13^2 + (11*s12^3 - 25*s12^2*s13 -
                  18*s12*s13^2)*s23 + (6*s12^2 - 13*s12*s13 + s13^2)*s23^2 +
                (7*s12 + 4*s13)*s23^3 + 3*s23^4)) +
            p3q^2*(p2q*(-18*s12^4 - 36*s12^3*s13 + 9*s12^2*s13^2 +
                27*s12*s13^3 + (-71*s12^3 - 91*s12^2*s13 + 7*s12*s13^2)*s23 +
                (-88*s12^2 - 56*s12*s13 - s13^2)*s23^2 + (-35*s12 - s13)*
                 s23^3) + p1q*(-9*s12^4 - 27*s12^3*s13 - 18*s12^2*s13^2 +
                (-43*s12^3 - 78*s12^2*s13 - 26*s12*s13^2)*s23 +
                (-48*s12^2 - 38*s12*s13 + 2*s13^2)*s23^2 + (-11*s12 + 5*s13)*
                 s23^3 + 3*s23^4)))*Log((p1q + p3q)/(p1q + p2q + p3q)))/
          (-8*p1q*p2q^2*s12*s13^2*s23 + p1q^2*p2q*(8*s12^2*s13*s23 +
             8*s12*s13*s23^2) + p1q*p3q^2*(8*s12^2*s13*s23 +
             8*s12*s13*s23^2) + p3q*(p1q^2*(8*s12^2*s13*s23 + 8*s12*s13*
                s23^2) + p1q*p2q*((8*s12^2*s13 - 8*s12*s13^2)*s23 + 8*s12*s13*
                s23^2))) + ((p1q^2*p2q^2*((-36*s12^2*s13 - 108*s12*s13^2 -
                72*s13^3)*s23 + (-9*s12^2 - 90*s12*s13 - 117*s13^2)*s23^2 +
              (-9*s12 - 45*s13)*s23^3) + p3q^4*((-18*s12^2*s13 -
                36*s12*s13^2 - 18*s13^3)*s23 + (-9*s12^2 - 45*s12*s13 -
                36*s13^2)*s23^2 + (-9*s12 - 18*s13)*s23^3) +
            p2q^4*((-18*s12^2*s13 - 36*s12*s13^2 - 18*s13^3)*s23 +
              (-27*s12*s13 - 27*s13^2)*s23^2 - 9*s13*s23^3) +
            p1q*p2q^3*(36*s12*s13^3 + 36*s13^4 + (-9*s12^2*s13 +
                18*s12*s13^2 + 63*s13^3)*s23 + (9*s12*s13 + 45*s13^2)*s23^2 +
              (9*s12 + 27*s13)*s23^3 + 9*s23^4) + p1q^3*p2q*
             ((36*s12*s13 + 36*s13^2)*s23^2 + (18*s12 + 54*s13)*s23^3 +
              18*s23^4) + p3q^3*(p2q*((-72*s12^2*s13 - 144*s12*s13^2 -
                  72*s13^3)*s23 + (-27*s12^2 - 162*s12*s13 - 135*s13^2)*
                 s23^2 + (-27*s12 - 63*s13)*s23^3) + p1q*(36*s12^3*s13 +
                36*s12^2*s13^2 + (9*s12^3 + 54*s12^2*s13 + 9*s12*s13^2)*s23 +
                (9*s12^2 + 27*s12*s13 + 18*s13^2)*s23^2 + (9*s12 + 27*s13)*
                 s23^3 + 9*s23^4)) + p3q^2*(p2q^2*((-108*s12^2*s13 -
                  216*s12*s13^2 - 108*s13^3)*s23 + (-27*s12^2 - 216*s12*s13 -
                  189*s13^2)*s23^2 + (-27*s12 - 81*s13)*s23^3) +
              p1q^2*((-72*s12^2*s13 - 108*s12*s13^2 - 36*s13^3)*s23 +
                (-27*s12^2 - 126*s12*s13 - 63*s13^2)*s23^2 +
                (-27*s12 - 27*s13)*s23^3) + p1q*p2q*(36*s12^3*s13 -
                36*s12^2*s13^2 - 72*s12*s13^3 + (18*s12^3 + 27*s12^2*s13 -
                  108*s12*s13^2 - 9*s13^3)*s23 + (18*s12^2 + 27*s12*s13 +
                  45*s13^2)*s23^2 + (27*s12 + 81*s13)*s23^3 + 27*s23^4)) +
            p3q*(p1q^2*p2q*((-36*s12^2*s13 - 72*s12*s13^2 - 36*s13^3)*s23 +
                (-36*s12^2 - 72*s12*s13 - 36*s13^2)*s23^2 - 36*s12*s23^3) +
              p2q^3*((-72*s12^2*s13 - 144*s12*s13^2 - 72*s13^3)*s23 +
                (-9*s12^2 - 126*s12*s13 - 117*s13^2)*s23^2 +
                (-9*s12 - 45*s13)*s23^3) + p1q^3*((36*s12*s13 + 36*s13^2)*
                 s23^2 + (18*s12 + 54*s13)*s23^3 + 18*s23^4) +
              p1q*p2q^2*(-72*s12^2*s13^2 - 36*s12*s13^3 + 36*s13^4 +
                (9*s12^3 - 36*s12^2*s13 - 99*s12*s13^2 + 54*s13^3)*s23 +
                (9*s12^2 + 9*s12*s13 + 72*s13^2)*s23^2 + (27*s12 + 81*s13)*
                 s23^3 + 27*s23^4)))*Log((p2q + p3q)/(p1q + p2q + p3q)))/
          (p1q*p2q^3*(8*s12*s13 + 8*s13^2)*s23^2 + p1q*p3q^3*
            (8*s12*s13 + 8*s13^2)*s23^2 - 8*p1q^2*p2q^2*s13*s23^3 +
           p3q^2*(p1q*p2q*(24*s12*s13 + 24*s13^2)*s23^2 - 8*p1q^2*s13*
              s23^3) + p3q*(p1q*p2q^2*(24*s12*s13 + 24*s13^2)*s23^2 -
             16*p1q^2*p2q*s13*s23^3)) +
         ((p2q^3*((9*s12^2*s13 + 9*s12*s13^2)*s23 + 9*s12*s13*s23^2) +
            p1q^2*p2q*((18*s12^2*s13 + 18*s12*s13^2)*s23 + (9*s12^2 +
                27*s12*s13)*s23^2 + 9*s12*s23^3) +
            p3q^3*((9*s12^3 + 27*s12^2*s13 + 18*s12*s13^2)*s23 +
              (27*s12^2 + 36*s12*s13)*s23^2 + 18*s12*s23^3) +
            p1q*p2q^2*(-18*s12*s13^3 + (9*s12^2*s13 - 27*s12*s13^2)*s23 +
              (-s12^2 - 18*s12*s13 - s13^2)*s23^2 + (-11*s12 - 2*s13)*s23^3 -
              2*s23^4) + p3q*(p1q^2*((18*s12^2*s13 + 18*s12*s13^2)*s23 +
                (9*s12^2 + 27*s12*s13)*s23^2 + 9*s12*s23^3) +
              p2q^2*((9*s12^3 + 45*s12^2*s13 + 36*s12*s13^2)*s23 +
                (27*s12^2 + 54*s12*s13)*s23^2 + 18*s12*s23^3) +
              p1q*p2q*(36*s12^2*s13^2 + (-9*s12^3 + 36*s12^2*s13 +
                  9*s12*s13^2)*s23 + (-11*s12^2 - 9*s12*s13 - 2*s13^2)*
                 s23^2 + (-22*s12 - 4*s13)*s23^3 - 4*s23^4)) +
            p3q^2*(p2q*((18*s12^3 + 63*s12^2*s13 + 45*s12*s13^2)*s23 +
                (54*s12^2 + 81*s12*s13)*s23^2 + 36*s12*s23^3) +
              p1q*(-18*s12^3*s13 + (-9*s12^3 - 9*s12^2*s13)*s23 +
                (-10*s12^2 - 9*s12*s13 - s13^2)*s23^2 + (-11*s12 - 2*s13)*
                 s23^3 - 2*s23^4)))*Log(-s12 - s13 - s23))/
          (4*p1q*p2q^2*s12*s13*s23^2 + 8*p1q*p2q*p3q*s12*s13*s23^2 +
           4*p1q*p3q^2*s12*s13*s23^2) +
         ((p3q^2*(s12^3 + s12^2*s13 + s12^2*s23) + p2q^2*(s12*s13^2 + s13^3 +
              (s12*s13 + 2*s13^2)*s23 + s13*s23^2) +
            p1q^2*(2*s12*s13^2 + 2*s13^3 + (s12^2 + 5*s12*s13 + 6*s13^2)*
               s23 + (4*s12 + 7*s13)*s23^2 + 3*s23^3) +
            p1q*p2q*(s12^2*s13 + 3*s12*s13^2 + 2*s13^3 + (2*s12^2 +
                7*s12*s13 + 6*s13^2)*s23 + (5*s12 + 7*s13)*s23^2 + 3*s23^3) +
            p3q*(p1q*(-s12^3 - 3*s12^2*s13 - 2*s12*s13^2 +
                (-5*s12^2 - 6*s12*s13)*s23 - 4*s12*s23^2) +
              p2q*(-2*s12^2*s13 - 2*s12*s13^2 + (-s12^2 - 3*s12*s13)*s23 -
                s12*s23^2)))*Log(s12/(s12 + s13 + s23)))/
          (8*p1q*p3q*s12^2*s13 + p1q^2*(-8*s12*s13^2 - 8*s12*s13*s23) +
           p1q*p2q*(-8*s12*s13^2 - 8*s12*s13*s23)) +
         ((p2q^4*((9*s12^2*s13^2 + 9*s12*s13^3)*s23 + (8*s12*s13^2 - s13^3)*
               s23^2 - s13^2*s23^3) + p1q*p2q^3*(-36*s12*s13^4 +
              (-18*s12^3*s13 - 9*s12^2*s13^2 - 63*s12*s13^3)*s23 +
              (-18*s12^2*s13 - 42*s12*s13^2 - s13^3)*s23^2 + (-16*s12*s13 +
                s13^2)*s23^3) + p1q^3*p2q*((-36*s12^3*s13 - 36*s12^2*s13^2)*
               s23 + (-9*s12^3 - 72*s12^2*s13 - 27*s12*s13^2)*s23^2 +
              (-18*s12^2 - 36*s12*s13)*s23^3 - 9*s12*s23^4) +
            p3q^4*((-9*s12^3*s13 - 9*s12^2*s13^2)*s23 + (-s12^3 -
                10*s12^2*s13)*s23^2 + (-2*s12^2 - s12*s13)*s23^3 -
              s12*s23^4) + p1q^2*p2q^2*(36*s12^2*s13^3 + (-9*s12^3*s13 +
                90*s12^2*s13^2 + 63*s12*s13^3)*s23 + (43*s12^2*s13 +
                101*s12*s13^2)*s23^2 + (9*s12^2 + 44*s12*s13 + s13^2)*s23^3 +
              10*s12*s23^4 + s23^5) + p3q^3*(p2q*((-27*s12^3*s13 -
                  18*s12^2*s13^2 + 9*s12*s13^3)*s23 + (-2*s12^3 -
                  27*s12^2*s13 + 11*s12*s13^2)*s23^2 + (-4*s12^2 + s12*s13 +
                  s13^2)*s23^3 + (-2*s12 + s13)*s23^4) + p1q*(36*s12^4*s13 +
                (9*s12^4 + 27*s12^3*s13 - 18*s12^2*s13^2)*s23 +
                (9*s12^3 - 12*s12^2*s13 - 8*s12*s13^2)*s23^2 - 12*s12*s13*
                 s23^3 + (s12 - s13)*s23^4 + s23^5)) +
            p3q*(p1q^3*((-36*s12^3*s13 - 36*s12^2*s13^2)*s23 +
                (-9*s12^3 - 72*s12^2*s13 - 27*s12*s13^2)*s23^2 +
                (-18*s12^2 - 36*s12*s13)*s23^3 - 9*s12*s23^4) +
              p2q^3*((-9*s12^3*s13 + 18*s12^2*s13^2 + 27*s12*s13^3)*s23 +
                (-7*s12^2*s13 + 27*s12*s13^2 - 2*s13^3)*s23^2 +
                (3*s12*s13 - s13^2)*s23^3 + s13*s23^4) + p1q*p2q^2*(
                108*s12^2*s13^3 + (-72*s12^3*s13 + 81*s12^2*s13^2 +
                  45*s12*s13^3)*s23 + (-9*s12^3 - 48*s12^2*s13 +
                  34*s12*s13^2 - 2*s13^3)*s23^2 + (-9*s12^2 - 17*s12*s13 +
                  2*s13^2)*s23^3 + (s12 - s13)*s23^4 + s23^5) +
              p1q^2*p2q*(-72*s12^3*s13^2 + (9*s12^4 - 99*s12^3*s13 -
                  81*s12^2*s13^2 + 27*s12*s13^3)*s23 + (9*s12^3 -
                  94*s12^2*s13 + 13*s12*s13^2)*s23^2 + (9*s12^2 -
                  11*s12*s13 + 2*s13^2)*s23^3 + 11*s12*s23^4 + 2*s23^5)) +
            p3q^2*(p2q^2*((-27*s12^3*s13 + 27*s12*s13^3)*s23 +
                (-s12^3 - 24*s12^2*s13 + 30*s12*s13^2 - s13^3)*s23^2 +
                (-2*s12^2 + 5*s12*s13 + s13^2)*s23^3 + (-s12 + 2*s13)*
                 s23^4) + p1q^2*(36*s12^4*s13 + (9*s12^4 + 18*s12^3*s13 -
                  27*s12^2*s13^2)*s23 + (9*s12^3 - 29*s12^2*s13 -
                  16*s12*s13^2)*s23^2 + (-19*s12*s13 + s13^2)*s23^3 +
                s12*s23^4 + s23^5) + p1q*p2q*(-108*s12^3*s13^2 +
                (9*s12^4 - 135*s12^3*s13 - 144*s12^2*s13^2)*s23 +
                (-150*s12^2*s13 - 40*s12*s13^2 - s13^3)*s23^2 +
                (-9*s12^2 - 49*s12*s13 + s13^2)*s23^3 + (2*s12 - 2*s13)*
                 s23^4 + 2*s23^5)))*Log(s13/(s12 + s13 + s23)))/
          (-8*p1q*p2q^3*s12*s13^2*s23^2 + p1q^2*p2q^2*(8*s12^2*s13*s23^2 +
             8*s12*s13*s23^3) + p1q*p3q^3*(8*s12^2*s13*s23^2 +
             8*s12*s13*s23^3) + p3q*(p1q*p2q^2*((8*s12^2*s13 - 16*s12*s13^2)*
                s23^2 + 8*s12*s13*s23^3) + p1q^2*p2q*(16*s12^2*s13*s23^2 + 16*
                s12*s13*s23^3)) + p3q^2*(p1q^2*(8*s12^2*s13*s23^2 + 8*s12*s13*
                s23^3) + p1q*p2q*((16*s12^2*s13 - 8*s12*s13^2)*s23^2 + 16*s12*
                s13*s23^3))) +
         ((p2q^4*((18*s12^2*s13 + 36*s12*s13^2 + 18*s13^3)*s23 +
              (27*s12*s13 + 27*s13^2)*s23^2 + 9*s13*s23^3) +
            p3q^4*((18*s12^3 + 72*s12^2*s13 + 90*s12*s13^2 + 36*s13^3)*s23 +
              (45*s12^2 + 117*s12*s13 + 72*s13^2)*s23^2 + (27*s12 + 36*s13)*
               s23^3) + p1q^2*p2q^2*((36*s12^2*s13 + 108*s12*s13^2 +
                72*s13^3)*s23 + (9*s12^2 + 90*s12*s13 + 117*s13^2)*s23^2 +
              (9*s12 + 45*s13)*s23^3) + p1q^3*p2q*((-36*s12*s13 - 36*s13^2)*
               s23^2 + (-18*s12 - 54*s13)*s23^3 - 18*s23^4) +
            p1q*p2q^3*(-36*s12*s13^3 - 36*s13^4 + (9*s12^2*s13 -
                18*s12*s13^2 - 63*s13^3)*s23 + (-9*s12*s13 - 45*s13^2)*s23^
                2 + (-9*s12 - 27*s13)*s23^3 - 9*s23^4) +
            p3q^2*(p1q^2*((72*s12^2*s13 + 108*s12*s13^2 + 36*s13^3)*s23 +
                (27*s12^2 + 126*s12*s13 + 63*s13^2)*s23^2 + (27*s12 + 27*s13)*
                 s23^3) + p2q^2*((54*s12^3 + 270*s12^2*s13 + 378*s12*s13^2 +
                  162*s13^3)*s23 + (135*s12^2 + 432*s12*s13 + 297*s13^2)*
                 s23^2 + (81*s12 + 135*s13)*s23^3) + p1q*p2q*(-36*s12^3*s13 +
                36*s12^2*s13^2 + 72*s12*s13^3 + (-18*s12^3 - 27*s12^2*s13 +
                  108*s12*s13^2 + 9*s13^3)*s23 + (-54*s12^2 - 99*s12*s13 -
                  81*s13^2)*s23^2 + (-99*s12 - 153*s13)*s23^3 - 63*s23^4)) +
            p3q^3*(p2q*((54*s12^3 + 234*s12^2*s13 + 306*s12*s13^2 +
                  126*s13^3)*s23 + (135*s12^2 + 378*s12*s13 + 243*s13^2)*
                 s23^2 + (81*s12 + 117*s13)*s23^3) + p1q*(-36*s12^3*s13 -
                36*s12^2*s13^2 + (-9*s12^3 - 54*s12^2*s13 - 9*s12*s13^2)*
                 s23 + (-27*s12^2 - 63*s12*s13 - 36*s13^2)*s23^2 +
                (-45*s12 - 63*s13)*s23^3 - 27*s23^4)) +
            p3q*(p1q^2*p2q*((36*s12^2*s13 + 72*s12*s13^2 + 36*s13^3)*s23 +
                (36*s12^2 + 72*s12*s13 + 36*s13^2)*s23^2 + 36*s12*s23^3) +
              p2q^3*((18*s12^3 + 126*s12^2*s13 + 198*s12*s13^2 + 90*s13^3)*
                 s23 + (45*s12^2 + 198*s12*s13 + 153*s13^2)*s23^2 +
                (27*s12 + 63*s13)*s23^3) + p1q*p2q^2*(72*s12^2*s13^2 +
                36*s12*s13^3 - 36*s13^4 + (-9*s12^3 + 36*s12^2*s13 +
                  99*s12*s13^2 - 54*s13^3)*s23 + (-27*s12^2 - 45*s12*s13 -
                  90*s13^2)*s23^2 + (-63*s12 - 117*s13)*s23^3 - 45*s23^4) +
              p1q^3*((-36*s12*s13 - 36*s13^2)*s23^2 + (-18*s12 - 54*s13)*
                 s23^3 - 18*s23^4)))*Log(s23/(s12 + s13 + s23)))/
          (p1q*p2q^3*(8*s12*s13 + 8*s13^2)*s23^2 + p1q*p3q^3*
            (8*s12*s13 + 8*s13^2)*s23^2 - 8*p1q^2*p2q^2*s13*s23^3 +
           p3q^2*(p1q*p2q*(24*s12*s13 + 24*s13^2)*s23^2 - 8*p1q^2*s13*
              s23^3) + p3q*(p1q*p2q^2*(24*s12*s13 + 24*s13^2)*s23^2 -
             16*p1q^2*p2q*s13*s23^3))) + Log(p3q/(p1q + p2q + p3q))*
        ((-s12^2 - 2*s12*s13 + 8*s13^2)/(4*s12*s13) +
         ((p2q^2*((s12*s13^2 + s13^3)*s23 + s13^2*s23^2) +
            p3q^2*(18*s12^4 + 36*s12^3*s13 + 18*s12^2*s13^2 +
              (55*s12^3 + 73*s12^2*s13 + 18*s12*s13^2)*s23 +
              (56*s12^2 + 37*s12*s13)*s23^2 + 19*s12*s23^3) +
            p1q*p2q*((-2*s12^2*s13 - 3*s12*s13^2 - s13^3)*s23 +
              (-6*s12*s13 - 5*s13^2)*s23^2 - 4*s13*s23^3) +
            p1q^2*((2*s12^3 + 2*s12^2*s13)*s23 + (6*s12^2 + 5*s12*s13 +
                s13^2)*s23^2 + (7*s12 + 4*s13)*s23^3 + 3*s23^4) +
            p3q*(p2q*(-18*s12^3*s13 - 36*s12^2*s13^2 - 18*s12*s13^3 +
                (-38*s12^2*s13 - 38*s12*s13^2)*s23 + (-21*s12*s13 - s13^2)*
                 s23^2 - s13*s23^3) + p1q*(18*s12^4 + 36*s12^3*s13 +
                18*s12^2*s13^2 + (56*s12^3 + 75*s12^2*s13 + 19*s12*s13^2)*
                 s23 + (60*s12^2 + 43*s12*s13 + 2*s13^2)*s23^2 +
                (25*s12 + 5*s13)*s23^3 + 3*s23^4)))*
           Log((p1q + p3q)/(p1q + p2q + p3q)))/(-8*p1q*p2q*s12*s13^2*s23 +
           p1q^2*(8*s12^2*s13*s23 + 8*s12*s13*s23^2) +
           p1q*p3q*(8*s12^2*s13*s23 + 8*s12*s13*s23^2)) +
         ((p3q^4*((18*s12^4 + 36*s12^3*s13 + 18*s12^2*s13^2)*s23 +
              (36*s12^3 + 45*s12^2*s13 + 9*s12*s13^2)*s23^2 +
              (18*s12^2 + 9*s12*s13)*s23^3) + p2q^4*((-36*s12^3*s13 -
                90*s12^2*s13^2 - 72*s12*s13^3 - 18*s13^4)*s23 +
              (-72*s12^2*s13 - 117*s12*s13^2 - 45*s13^3)*s23^2 +
              (-36*s12*s13 - 27*s13^2)*s23^3) + p1q^2*p2q^2*
             ((-36*s12^3*s13 - 108*s12^2*s13^2 - 72*s12*s13^3)*s23 +
              (-63*s12^2*s13 - 126*s12*s13^2 - 27*s13^3)*s23^2 +
              (-27*s12*s13 - 27*s13^2)*s23^3) + p1q^3*p2q*
             ((36*s12^2*s13 + 36*s12*s13^2)*s23^2 + (54*s12*s13 + 18*s13^2)*
               s23^3 + 18*s13*s23^4) + p1q*p2q^3*(36*s12^2*s13^3 +
              36*s12*s13^4 + (9*s12^2*s13^2 + 54*s12*s13^3 + 9*s13^4)*s23 +
              (36*s12^2*s13 + 63*s12*s13^2 + 27*s13^3)*s23^2 +
              (63*s12*s13 + 45*s13^2)*s23^3 + 27*s13*s23^4) +
            p3q^3*(p2q*((54*s12^4 + 72*s12^3*s13 - 36*s12^2*s13^2 -
                  72*s12*s13^3 - 18*s13^4)*s23 + (108*s12^3 + 63*s12^2*s13 -
                  90*s12*s13^2 - 45*s13^3)*s23^2 + (54*s12^2 - 9*s12*s13 -
                  27*s13^2)*s23^3) + p1q*(36*s12^4*s13 + 36*s12^3*s13^2 +
                (63*s12^3*s13 + 18*s12^2*s13^2 - 9*s12*s13^3)*s23 +
                (-18*s12^3 + 9*s12^2*s13 - 9*s12*s13^2)*s23^2 +
                (-36*s12^2 - 9*s12*s13 + 9*s13^2)*s23^3 + (-18*s12 + 9*s13)*
                 s23^4)) + p3q^2*(p2q^2*((54*s12^4 - 216*s12^2*s13^2 -
                  216*s12*s13^3 - 54*s13^4)*s23 + (108*s12^3 - 81*s12^2*s13 -
                  324*s12*s13^2 - 135*s13^3)*s23^2 + (54*s12^2 - 81*s12*s13 -
                  81*s13^2)*s23^3) + p1q^2*((-72*s12^3*s13 - 108*s12^2*
                   s13^2 - 36*s12*s13^3)*s23 + (-117*s12^2*s13 -
                  90*s12*s13^2 - 9*s13^3)*s23^2 + (-45*s12*s13 - 9*s13^2)*
                 s23^3) + p1q*p2q*(36*s12^4*s13 - 36*s12^3*s13^2 -
                72*s12^2*s13^3 + (54*s12^3*s13 - 99*s12^2*s13^2 -
                  36*s12*s13^3 + 9*s13^4)*s23 + (-36*s12^3 + 18*s12^2*s13 +
                  9*s12*s13^2 + 27*s13^3)*s23^2 + (-72*s12^2 + 45*s12*s13 +
                  63*s13^2)*s23^3 + (-36*s12 + 45*s13)*s23^4)) +
            p3q*(p1q^2*p2q*((-36*s12^3*s13 - 72*s12^2*s13^2 - 36*s12*s13^3)*
                 s23 + (-36*s12^2*s13 - 72*s12*s13^2 - 36*s13^3)*s23^2 -
                36*s13^2*s23^3) + p2q^3*((18*s12^4 - 72*s12^3*s13 -
                  252*s12^2*s13^2 - 216*s12*s13^3 - 54*s13^4)*s23 +
                (36*s12^3 - 171*s12^2*s13 - 342*s12*s13^2 - 135*s13^3)*
                 s23^2 + (18*s12^2 - 99*s12*s13 - 81*s13^2)*s23^3) +
              p1q^3*((36*s12^2*s13 + 36*s12*s13^2)*s23^2 + (54*s12*s13 +
                  18*s13^2)*s23^3 + 18*s13*s23^4) + p1q*p2q^2*(-72*s12^3*
                 s13^2 - 36*s12^2*s13^3 + 36*s12*s13^4 + (-9*s12^3*s13 -
                  108*s12^2*s13^2 + 27*s12*s13^3 + 18*s13^4)*s23 +
                (-18*s12^3 + 45*s12^2*s13 + 81*s12*s13^2 + 54*s13^3)*s23^2 +
                (-36*s12^2 + 117*s12*s13 + 99*s13^2)*s23^3 +
                (-18*s12 + 63*s13)*s23^4)))*Log((p2q + p3q)/
             (p1q + p2q + p3q)))/(p1q*p2q^3*(8*s12^2*s13 + 8*s12*s13^2)*
            s23^2 + p1q*p3q^3*(8*s12^2*s13 + 8*s12*s13^2)*s23^2 -
           8*p1q^2*p2q^2*s12*s13*s23^3 + p3q^2*(p1q*p2q*(24*s12^2*s13 + 24*
                s12*s13^2)*s23^2 - 8*p1q^2*s12*s13*s23^3) +
           p3q*(p1q*p2q^2*(24*s12^2*s13 + 24*s12*s13^2)*s23^2 -
             16*p1q^2*p2q*s12*s13*s23^3)) +
         ((p3q^3*((9*s12^2*s13 + 9*s12*s13^2)*s23 + 9*s12*s13*s23^2) +
            p1q^2*p2q*((18*s12^2*s13 + 18*s12*s13^2)*s23 + (27*s12*s13 +
                9*s13^2)*s23^2 + 9*s13*s23^3) +
            p2q^3*((18*s12^2*s13 + 27*s12*s13^2 + 9*s13^3)*s23 +
              (36*s12*s13 + 27*s13^2)*s23^2 + 18*s13*s23^3) +
            p1q*p2q^2*(-18*s12*s13^3 + (-9*s12*s13^2 - 9*s13^3)*s23 +
              (-s12^2 - 9*s12*s13 - 10*s13^2)*s23^2 + (-2*s12 - 11*s13)*s23^
                3 - 2*s23^4) + p3q*(p1q^2*((18*s12^2*s13 + 18*s12*s13^2)*
                 s23 + (27*s12*s13 + 9*s13^2)*s23^2 + 9*s13*s23^3) +
              p2q^2*((45*s12^2*s13 + 63*s12*s13^2 + 18*s13^3)*s23 +
                (81*s12*s13 + 54*s13^2)*s23^2 + 36*s13*s23^3) +
              p1q*p2q*(36*s12^2*s13^2 + (9*s12^2*s13 + 36*s12*s13^2 -
                  9*s13^3)*s23 + (-2*s12^2 - 9*s12*s13 - 11*s13^2)*s23^2 +
                (-4*s12 - 22*s13)*s23^3 - 4*s23^4)) +
            p3q^2*(p2q*((36*s12^2*s13 + 45*s12*s13^2 + 9*s13^3)*s23 +
                (54*s12*s13 + 27*s13^2)*s23^2 + 18*s13*s23^3) +
              p1q*(-18*s12^3*s13 + (-27*s12^2*s13 + 9*s12*s13^2)*s23 +
                (-s12^2 - 18*s12*s13 - s13^2)*s23^2 + (-2*s12 - 11*s13)*
                 s23^3 - 2*s23^4)))*Log(-s12 - s13 - s23))/
          (4*p1q*p2q^2*s12*s13*s23^2 + 8*p1q*p2q*p3q*s12*s13*s23^2 +
           4*p1q*p3q^2*s12*s13*s23^2) +
         ((p3q^4*((-9*s12^3*s13 - 9*s12^2*s13^2)*s23 + (s12^3 - 8*s12^2*s13)*
               s23^2 + s12^2*s23^3) + p2q^4*((9*s12^2*s13^2 + 9*s12*s13^3)*
               s23 + (10*s12*s13^2 + s13^3)*s23^2 + (s12*s13 + 2*s13^2)*s23^
                3 + s13*s23^4) + p1q^3*p2q*((36*s12^2*s13^2 + 36*s12*s13^3)*
               s23 + (27*s12^2*s13 + 72*s12*s13^2 + 9*s13^3)*s23^2 +
              (36*s12*s13 + 18*s13^2)*s23^3 + 9*s13*s23^4) +
            p1q*p2q^3*(-36*s12*s13^4 + (18*s12^2*s13^2 - 27*s12*s13^3 -
                9*s13^4)*s23 + (8*s12^2*s13 + 12*s12*s13^2 - 9*s13^3)*s23^2 +
              12*s12*s13*s23^3 + (s12 - s13)*s23^4 - s23^5) +
            p1q^2*p2q^2*(-36*s12*s13^4 + (27*s12^2*s13^2 - 18*s12*s13^3 -
                9*s13^4)*s23 + (16*s12^2*s13 + 29*s12*s13^2 - 9*s13^3)*s23^
                2 + (-s12^2 + 19*s12*s13)*s23^3 - s13*s23^4 - s23^5) +
            p3q^3*(p1q*(36*s12^4*s13 + (63*s12^3*s13 + 9*s12^2*s13^2 +
                  18*s12*s13^3)*s23 + (s12^3 + 42*s12^2*s13 + 18*s12*s13^2)*
                 s23^2 + (-s12^2 + 16*s12*s13)*s23^3) +
              p2q*((-27*s12^3*s13 - 18*s12^2*s13^2 + 9*s12*s13^3)*s23 +
                (2*s12^3 - 27*s12^2*s13 + 7*s12*s13^2)*s23^2 +
                (s12^2 - 3*s12*s13)*s23^3 - s12*s23^4)) +
            p3q*(p1q^3*((36*s12^2*s13^2 + 36*s12*s13^3)*s23 +
                (27*s12^2*s13 + 72*s12*s13^2 + 9*s13^3)*s23^2 +
                (36*s12*s13 + 18*s13^2)*s23^3 + 9*s13*s23^4) +
              p2q^3*((-9*s12^3*s13 + 18*s12^2*s13^2 + 27*s12*s13^3)*s23 +
                (-11*s12^2*s13 + 27*s12*s13^2 + 2*s13^3)*s23^2 +
                (-s12^2 - s12*s13 + 4*s13^2)*s23^3 + (-s12 + 2*s13)*s23^4) +
              p1q*p2q^2*(108*s12^2*s13^3 + (144*s12^2*s13^2 + 135*s12*s13^3 -
                  9*s13^4)*s23 + (s12^3 + 40*s12^2*s13 + 150*s12*s13^2)*
                 s23^2 + (-s12^2 + 49*s12*s13 + 9*s13^2)*s23^3 +
                (2*s12 - 2*s13)*s23^4 - 2*s23^5) + p1q^2*p2q*(72*s12^2*
                 s13^3 + (-27*s12^3*s13 + 81*s12^2*s13^2 + 99*s12*s13^3 -
                  9*s13^4)*s23 + (-13*s12^2*s13 + 94*s12*s13^2 - 9*s13^3)*
                 s23^2 + (-2*s12^2 + 11*s12*s13 - 9*s13^2)*s23^3 -
                11*s13*s23^4 - 2*s23^5)) + p3q^2*
             (p2q^2*((-27*s12^3*s13 + 27*s12*s13^3)*s23 +
                (s12^3 - 30*s12^2*s13 + 24*s12*s13^2 + s13^3)*s23^2 +
                (-s12^2 - 5*s12*s13 + 2*s13^2)*s23^3 + (-2*s12 + s13)*
                 s23^4) + p1q*p2q*(-108*s12^3*s13^2 + (-45*s12^3*s13 -
                  81*s12^2*s13^2 + 72*s12*s13^3)*s23 + (2*s12^3 -
                  34*s12^2*s13 + 48*s12*s13^2 + 9*s13^3)*s23^2 +
                (-2*s12^2 + 17*s12*s13 + 9*s13^2)*s23^3 + (s12 - s13)*s23^4 -
                s23^5) + p1q^2*(-36*s12^3*s13^2 + (-63*s12^3*s13 -
                  90*s12^2*s13^2 + 9*s12*s13^3)*s23 + (-101*s12^2*s13 -
                  43*s12*s13^2)*s23^2 + (-s12^2 - 44*s12*s13 - 9*s13^2)*
                 s23^3 - 10*s13*s23^4 - s23^5)))*Log(s12/(s12 + s13 + s23)))/
          (8*p1q*p3q^3*s12^2*s13*s23^2 + p1q^2*p2q^2*(-8*s12*s13^2*s23^2 -
             8*s12*s13*s23^3) + p1q*p2q^3*(-8*s12*s13^2*s23^2 -
             8*s12*s13*s23^3) + p3q*(p1q^2*p2q*(-16*s12*s13^2*s23^2 - 16*s12*
                s13*s23^3) + p1q*p2q^2*((8*s12^2*s13 - 16*s12*s13^2)*s23^2 -
               16*s12*s13*s23^3)) + p3q^2*(p1q^2*(-8*s12*s13^2*s23^2 - 8*s12*
                s13*s23^3) + p1q*p2q*((16*s12^2*s13 - 8*s12*s13^2)*s23^2 - 8*
                s12*s13*s23^3))) +
         ((p2q^2*(-(s12*s13^2) - s13^3 - s13^2*s23) +
            p3q^2*(-s12^3 - s12^2*s13 + (-2*s12^2 - s12*s13)*s23 -
              s12*s23^2) + p1q*p2q*(2*s12^2*s13 + 3*s12*s13^2 + s13^3 +
              (6*s12*s13 + 5*s13^2)*s23 + 4*s13*s23^2) +
            p1q^2*(-2*s12^3 - 2*s12^2*s13 + (-6*s12^2 - 5*s12*s13 - s13^2)*
               s23 + (-7*s12 - 4*s13)*s23^2 - 3*s23^3) +
            p3q*(p2q*(2*s12^2*s13 + 2*s12*s13^2 + (3*s12*s13 + s13^2)*s23 +
                s13*s23^2) + p1q*(-2*s12^3 - 3*s12^2*s13 - s12*s13^2 +
                (-6*s12^2 - 7*s12*s13 - 2*s13^2)*s23 + (-7*s12 - 5*s13)*
                 s23^2 - 3*s23^3)))*Log(s13/(s12 + s13 + s23)))/
          (-8*p1q*p2q*s12*s13^2 + p1q^2*(8*s12^2*s13 + 8*s12*s13*s23) +
           p1q*p3q*(8*s12^2*s13 + 8*s12*s13*s23)) +
         ((p3q^4*((18*s12^3 + 36*s12^2*s13 + 18*s12*s13^2)*s23 +
              (27*s12^2 + 27*s12*s13)*s23^2 + 9*s12*s23^3) +
            p1q^2*p2q^2*((36*s12^3 + 108*s12^2*s13 + 72*s12*s13^2)*s23 +
              (63*s12^2 + 126*s12*s13 + 27*s13^2)*s23^2 + (27*s12 + 27*s13)*
               s23^3) + p2q^4*((36*s12^3 + 90*s12^2*s13 + 72*s12*s13^2 +
                18*s13^3)*s23 + (72*s12^2 + 117*s12*s13 + 45*s13^2)*s23^2 +
              (36*s12 + 27*s13)*s23^3) + p1q*p2q^3*(-36*s12^2*s13^2 -
              36*s12*s13^3 + (-9*s12^2*s13 - 54*s12*s13^2 - 9*s13^3)*s23 +
              (-36*s12^2 - 63*s12*s13 - 27*s13^2)*s23^2 + (-63*s12 - 45*s13)*
               s23^3 - 27*s23^4) + p1q^3*p2q*((-36*s12^2 - 36*s12*s13)*s23^
                2 + (-54*s12 - 18*s13)*s23^3 - 18*s23^4) +
            p3q^2*(p1q^2*((72*s12^3 + 108*s12^2*s13 + 36*s12*s13^2)*s23 +
                (117*s12^2 + 90*s12*s13 + 9*s13^2)*s23^2 + (45*s12 + 9*s13)*
                 s23^3) + p2q^2*((162*s12^3 + 378*s12^2*s13 + 270*s12*s13^2 +
                  54*s13^3)*s23 + (297*s12^2 + 432*s12*s13 + 135*s13^2)*
                 s23^2 + (135*s12 + 81*s13)*s23^3) + p1q*p2q*(-36*s12^4 +
                36*s12^3*s13 + 72*s12^2*s13^2 + (-54*s12^3 + 99*s12^2*s13 +
                  36*s12*s13^2 - 9*s13^3)*s23 + (-90*s12^2 - 45*s12*s13 -
                  27*s13^2)*s23^2 + (-117*s12 - 63*s13)*s23^3 - 45*s23^4)) +
            p3q*(p1q^2*p2q*((36*s12^3 + 72*s12^2*s13 + 36*s12*s13^2)*s23 +
                (36*s12^2 + 72*s12*s13 + 36*s13^2)*s23^2 + 36*s13*s23^3) +
              p2q^3*((126*s12^3 + 306*s12^2*s13 + 234*s12*s13^2 + 54*s13^3)*
                 s23 + (243*s12^2 + 378*s12*s13 + 135*s13^2)*s23^2 +
                (117*s12 + 81*s13)*s23^3) + p1q*p2q^2*(72*s12^3*s13 +
                36*s12^2*s13^2 - 36*s12*s13^3 + (9*s12^3 + 108*s12^2*s13 -
                  27*s12*s13^2 - 18*s13^3)*s23 + (-81*s12^2 - 99*s12*s13 -
                  54*s13^2)*s23^2 + (-153*s12 - 99*s13)*s23^3 - 63*s23^4) +
              p1q^3*((-36*s12^2 - 36*s12*s13)*s23^2 + (-54*s12 - 18*s13)*
                 s23^3 - 18*s23^4)) + p3q^3*(p2q*((90*s12^3 + 198*s12^2*s13 +
                  126*s12*s13^2 + 18*s13^3)*s23 + (153*s12^2 + 198*s12*s13 +
                  45*s13^2)*s23^2 + (63*s12 + 27*s13)*s23^3) +
              p1q*(-36*s12^4 - 36*s12^3*s13 + (-63*s12^3 - 18*s12^2*s13 +
                  9*s12*s13^2)*s23 + (-45*s12^2 - 9*s12*s13)*s23^2 +
                (-27*s12 - 9*s13)*s23^3 - 9*s23^4)))*
           Log(s23/(s12 + s13 + s23)))/(p1q*p2q^3*(8*s12^2 + 8*s12*s13)*
            s23^2 + p1q*p3q^3*(8*s12^2 + 8*s12*s13)*s23^2 -
           8*p1q^2*p2q^2*s12*s23^3 + p3q^2*(p1q*p2q*(24*s12^2 + 24*s12*s13)*
              s23^2 - 8*p1q^2*s12*s23^3) +
           p3q*(p1q*p2q^2*(24*s12^2 + 24*s12*s13)*s23^2 - 16*p1q^2*p2q*s12*
              s23^3))) + Log(-s12 - s13 - s23)*
        ((p3q^3*((189*s12^3 + 756*s12^2*s13 + 567*s12*s13^2)*s23 +
             (567*s12^2 + 945*s12*s13)*s23^2 + 378*s12*s23^3) +
           p2q^3*((567*s12^2*s13 + 756*s12*s13^2 + 189*s13^3)*s23 +
             (945*s12*s13 + 567*s13^2)*s23^2 + 378*s13*s23^3) +
           p1q^2*p2q*((756*s12^2*s13 + 756*s12*s13^2)*s23 +
             (189*s12^2 + 1134*s12*s13 + 189*s13^2)*s23^2 +
             (189*s12 + 189*s13)*s23^3) + p1q*p2q^2*(-756*s12*s13^3 +
             (189*s12^2*s13 - 756*s12*s13^2 - 189*s13^3)*s23 +
             (43*s12^2 - 583*s12*s13 - 146*s13^2)*s23^2 +
             (-231*s12 - 231*s13)*s23^3 - 42*s23^4) +
           p3q*(p1q^2*((756*s12^2*s13 + 756*s12*s13^2)*s23 + (189*s12^2 +
                 1134*s12*s13 + 189*s13^2)*s23^2 + (189*s12 + 189*s13)*
                s23^3) + p2q^2*((189*s12^3 + 1890*s12^2*s13 + 2079*s12*
                  s13^2 + 378*s13^3)*s23 + (567*s12^2 + 2835*s12*s13 +
                 1134*s13^2)*s23^2 + (378*s12 + 756*s13)*s23^3) +
             p1q*p2q*(1512*s12^2*s13^2 + (-189*s12^3 + 945*s12^2*s13 +
                 945*s12*s13^2 - 189*s13^3)*s23 + (-103*s12^2 - 410*s12*s13 -
                 103*s13^2)*s23^2 + (-462*s12 - 462*s13)*s23^3 - 84*s23^4)) +
           p3q^2*(p2q*((378*s12^3 + 2079*s12^2*s13 + 1890*s12*s13^2 +
                 189*s13^3)*s23 + (1134*s12^2 + 2835*s12*s13 + 567*s13^2)*
                s23^2 + (756*s12 + 378*s13)*s23^3) + p1q*(-756*s12^3*s13 +
               (-189*s12^3 - 756*s12^2*s13 + 189*s12*s13^2)*s23 +
               (-146*s12^2 - 583*s12*s13 + 43*s13^2)*s23^2 + (-231*s12 -
                 231*s13)*s23^3 - 42*s23^4)))/(36*p1q*p2q^2*s12*s13*s23^2 +
           72*p1q*p2q*p3q*s12*s13*s23^2 + 36*p1q*p3q^2*s12*s13*s23^2) +
         ((p3q^3*((9*s12^2*s13 + 9*s12*s13^2)*s23 + 9*s12*s13*s23^2) +
            p1q^2*p2q*((18*s12^2*s13 + 18*s12*s13^2)*s23 + (27*s12*s13 +
                9*s13^2)*s23^2 + 9*s13*s23^3) +
            p2q^3*((18*s12^2*s13 + 27*s12*s13^2 + 9*s13^3)*s23 +
              (36*s12*s13 + 27*s13^2)*s23^2 + 18*s13*s23^3) +
            p1q*p2q^2*(-18*s12*s13^3 + (-9*s12*s13^2 - 9*s13^3)*s23 +
              (-s12^2 - 9*s12*s13 - 10*s13^2)*s23^2 + (-2*s12 - 11*s13)*s23^
                3 - 2*s23^4) + p3q*(p1q^2*((18*s12^2*s13 + 18*s12*s13^2)*
                 s23 + (27*s12*s13 + 9*s13^2)*s23^2 + 9*s13*s23^3) +
              p2q^2*((45*s12^2*s13 + 63*s12*s13^2 + 18*s13^3)*s23 +
                (81*s12*s13 + 54*s13^2)*s23^2 + 36*s13*s23^3) +
              p1q*p2q*(36*s12^2*s13^2 + (9*s12^2*s13 + 36*s12*s13^2 -
                  9*s13^3)*s23 + (-2*s12^2 - 9*s12*s13 - 11*s13^2)*s23^2 +
                (-4*s12 - 22*s13)*s23^3 - 4*s23^4)) +
            p3q^2*(p2q*((36*s12^2*s13 + 45*s12*s13^2 + 9*s13^3)*s23 +
                (54*s12*s13 + 27*s13^2)*s23^2 + 18*s13*s23^3) +
              p1q*(-18*s12^3*s13 + (-27*s12^2*s13 + 9*s12*s13^2)*s23 +
                (-s12^2 - 18*s12*s13 - s13^2)*s23^2 + (-2*s12 - 11*s13)*
                 s23^3 - 2*s23^4)))*Log(s12/(s12 + s13 + s23)))/
          (4*p1q*p2q^2*s12*s13*s23^2 + 8*p1q*p2q*p3q*s12*s13*s23^2 +
           4*p1q*p3q^2*s12*s13*s23^2) +
         ((p2q^3*((9*s12^2*s13 + 9*s12*s13^2)*s23 + 9*s12*s13*s23^2) +
            p1q^2*p2q*((18*s12^2*s13 + 18*s12*s13^2)*s23 + (9*s12^2 +
                27*s12*s13)*s23^2 + 9*s12*s23^3) +
            p3q^3*((9*s12^3 + 27*s12^2*s13 + 18*s12*s13^2)*s23 +
              (27*s12^2 + 36*s12*s13)*s23^2 + 18*s12*s23^3) +
            p1q*p2q^2*(-18*s12*s13^3 + (9*s12^2*s13 - 27*s12*s13^2)*s23 +
              (-s12^2 - 18*s12*s13 - s13^2)*s23^2 + (-11*s12 - 2*s13)*s23^3 -
              2*s23^4) + p3q*(p1q^2*((18*s12^2*s13 + 18*s12*s13^2)*s23 +
                (9*s12^2 + 27*s12*s13)*s23^2 + 9*s12*s23^3) +
              p2q^2*((9*s12^3 + 45*s12^2*s13 + 36*s12*s13^2)*s23 +
                (27*s12^2 + 54*s12*s13)*s23^2 + 18*s12*s23^3) +
              p1q*p2q*(36*s12^2*s13^2 + (-9*s12^3 + 36*s12^2*s13 +
                  9*s12*s13^2)*s23 + (-11*s12^2 - 9*s12*s13 - 2*s13^2)*
                 s23^2 + (-22*s12 - 4*s13)*s23^3 - 4*s23^4)) +
            p3q^2*(p2q*((18*s12^3 + 63*s12^2*s13 + 45*s12*s13^2)*s23 +
                (54*s12^2 + 81*s12*s13)*s23^2 + 36*s12*s23^3) +
              p1q*(-18*s12^3*s13 + (-9*s12^3 - 9*s12^2*s13)*s23 +
                (-10*s12^2 - 9*s12*s13 - s13^2)*s23^2 + (-11*s12 - 2*s13)*
                 s23^3 - 2*s23^4)))*Log(s13/(s12 + s13 + s23)))/
          (4*p1q*p2q^2*s12*s13*s23^2 + 8*p1q*p2q*p3q*s12*s13*s23^2 +
           4*p1q*p3q^2*s12*s13*s23^2) +
         ((p3q^3*((-9*s12^3 - 36*s12^2*s13 - 27*s12*s13^2)*s23 +
              (-27*s12^2 - 45*s12*s13)*s23^2 - 18*s12*s23^3) +
            p1q^2*p2q*((-36*s12^2*s13 - 36*s12*s13^2)*s23 + (-9*s12^2 -
                54*s12*s13 - 9*s13^2)*s23^2 + (-9*s12 - 9*s13)*s23^3) +
            p2q^3*((-27*s12^2*s13 - 36*s12*s13^2 - 9*s13^3)*s23 +
              (-45*s12*s13 - 27*s13^2)*s23^2 - 18*s13*s23^3) +
            p1q*p2q^2*(36*s12*s13^3 + (-9*s12^2*s13 + 36*s12*s13^2 + 9*s13^3)*
               s23 + (10*s12^2 + 27*s12*s13 + 19*s13^2)*s23^2 +
              (29*s12 + 29*s13)*s23^3 + 20*s23^4) +
            p3q^2*(p2q*((-18*s12^3 - 99*s12^2*s13 - 90*s12*s13^2 - 9*s13^3)*
                 s23 + (-54*s12^2 - 135*s12*s13 - 27*s13^2)*s23^2 +
                (-36*s12 - 18*s13)*s23^3) + p1q*(36*s12^3*s13 +
                (9*s12^3 + 36*s12^2*s13 - 9*s12*s13^2)*s23 +
                (19*s12^2 + 27*s12*s13 + 10*s13^2)*s23^2 + (29*s12 + 29*s13)*
                 s23^3 + 20*s23^4)) + p3q*(p2q^2*((-9*s12^3 - 90*s12^2*s13 -
                  99*s12*s13^2 - 18*s13^3)*s23 + (-27*s12^2 - 135*s12*s13 -
                  54*s13^2)*s23^2 + (-18*s12 - 36*s13)*s23^3) +
              p1q^2*((-36*s12^2*s13 - 36*s12*s13^2)*s23 + (-9*s12^2 -
                  54*s12*s13 - 9*s13^2)*s23^2 + (-9*s12 - 9*s13)*s23^3) +
              p1q*p2q*(-72*s12^2*s13^2 + (9*s12^3 - 45*s12^2*s13 -
                  45*s12*s13^2 + 9*s13^3)*s23 + (29*s12^2 + 18*s12*s13 +
                  29*s13^2)*s23^2 + (58*s12 + 58*s13)*s23^3 + 40*s23^4)))*
           Log(s23/(s12 + s13 + s23)))/(36*p1q*p2q^2*s12*s13*s23^2 +
           72*p1q*p2q*p3q*s12*s13*s23^2 + 36*p1q*p3q^2*s12*s13*s23^2)) +
       Log((p2q + p3q)/(p1q + p2q + p3q))*
        (((p3q^4*((18*s12^3 + 36*s12^2*s13 + 18*s12*s13^2)*s23 +
              (27*s12^2 + 27*s12*s13)*s23^2 + 9*s12*s23^3) +
            p2q^4*((18*s12^3 + 36*s12^2*s13 + 18*s12*s13^2)*s23 +
              (36*s12^2 + 45*s12*s13 + 9*s13^2)*s23^2 + (18*s12 + 9*s13)*s23^
                3) + p1q^2*p2q^2*((36*s12^3 + 108*s12^2*s13 + 72*s12*s13^2)*
               s23 + (63*s12^2 + 126*s12*s13 + 27*s13^2)*s23^2 +
              (27*s12 + 27*s13)*s23^3) + p1q^3*p2q*((-36*s12^2 - 36*s12*s13)*
               s23^2 + (-54*s12 - 18*s13)*s23^3 - 18*s23^4) +
            p1q*p2q^3*(-36*s12^2*s13^2 - 36*s12*s13^3 + (-9*s12^2*s13 -
                54*s12*s13^2 - 9*s13^3)*s23 + (-18*s12^2 - 27*s12*s13 -
                9*s13^2)*s23^2 + (-27*s12 - 9*s13)*s23^3 - 9*s23^4) +
            p3q^2*(p1q^2*((72*s12^3 + 108*s12^2*s13 + 36*s12*s13^2)*s23 +
                (117*s12^2 + 90*s12*s13 + 9*s13^2)*s23^2 + (45*s12 + 9*s13)*
                 s23^3) + p2q^2*((108*s12^3 + 216*s12^2*s13 + 108*s12*s13^2)*
                 s23 + (189*s12^2 + 216*s12*s13 + 27*s13^2)*s23^2 +
                (81*s12 + 27*s13)*s23^3) + p1q*p2q*(-36*s12^4 +
                36*s12^3*s13 + 72*s12^2*s13^2 + (-54*s12^3 + 99*s12^2*s13 +
                  36*s12*s13^2 - 9*s13^3)*s23 + (-72*s12^2 - 9*s12*s13 -
                  9*s13^2)*s23^2 + (-81*s12 - 27*s13)*s23^3 - 27*s23^4)) +
            p3q*(p1q^2*p2q*((36*s12^3 + 72*s12^2*s13 + 36*s12*s13^2)*s23 +
                (36*s12^2 + 72*s12*s13 + 36*s13^2)*s23^2 + 36*s13*s23^3) +
              p2q^3*((72*s12^3 + 144*s12^2*s13 + 72*s12*s13^2)*s23 +
                (135*s12^2 + 162*s12*s13 + 27*s13^2)*s23^2 +
                (63*s12 + 27*s13)*s23^3) + p1q*p2q^2*(72*s12^3*s13 +
                36*s12^2*s13^2 - 36*s12*s13^3 + (9*s12^3 + 108*s12^2*s13 -
                  27*s12*s13^2 - 18*s13^3)*s23 + (-45*s12^2 - 27*s12*s13 -
                  18*s13^2)*s23^2 + (-81*s12 - 27*s13)*s23^3 - 27*s23^4) +
              p1q^3*((-36*s12^2 - 36*s12*s13)*s23^2 + (-54*s12 - 18*s13)*
                 s23^3 - 18*s23^4)) + p3q^3*(p2q*((72*s12^3 + 144*s12^2*s13 +
                  72*s12*s13^2)*s23 + (117*s12^2 + 126*s12*s13 + 9*s13^2)*
                 s23^2 + (45*s12 + 9*s13)*s23^3) + p1q*(-36*s12^4 -
                36*s12^3*s13 + (-63*s12^3 - 18*s12^2*s13 + 9*s12*s13^2)*s23 +
                (-45*s12^2 - 9*s12*s13)*s23^2 + (-27*s12 - 9*s13)*s23^3 -
                9*s23^4)))*Log(s12/(s12 + s13 + s23)))/
          (p1q*p2q^3*(8*s12^2 + 8*s12*s13)*s23^2 + p1q*p3q^3*
            (8*s12^2 + 8*s12*s13)*s23^2 - 8*p1q^2*p2q^2*s12*s23^3 +
           p3q^2*(p1q*p2q*(24*s12^2 + 24*s12*s13)*s23^2 - 8*p1q^2*s12*
              s23^3) + p3q*(p1q*p2q^2*(24*s12^2 + 24*s12*s13)*s23^2 -
             16*p1q^2*p2q*s12*s23^3)) +
         ((p2q^4*((18*s12^2*s13 + 36*s12*s13^2 + 18*s13^3)*s23 +
              (27*s12*s13 + 27*s13^2)*s23^2 + 9*s13*s23^3) +
            p3q^4*((18*s12^2*s13 + 36*s12*s13^2 + 18*s13^3)*s23 +
              (9*s12^2 + 45*s12*s13 + 36*s13^2)*s23^2 + (9*s12 + 18*s13)*s23^
                3) + p1q^2*p2q^2*((36*s12^2*s13 + 108*s12*s13^2 + 72*s13^3)*
               s23 + (9*s12^2 + 90*s12*s13 + 117*s13^2)*s23^2 +
              (9*s12 + 45*s13)*s23^3) + p1q^3*p2q*((-36*s12*s13 - 36*s13^2)*
               s23^2 + (-18*s12 - 54*s13)*s23^3 - 18*s23^4) +
            p1q*p2q^3*(-36*s12*s13^3 - 36*s13^4 + (9*s12^2*s13 -
                18*s12*s13^2 - 63*s13^3)*s23 + (-9*s12*s13 - 45*s13^2)*s23^
                2 + (-9*s12 - 27*s13)*s23^3 - 9*s23^4) +
            p3q^2*(p1q^2*((72*s12^2*s13 + 108*s12*s13^2 + 36*s13^3)*s23 +
                (27*s12^2 + 126*s12*s13 + 63*s13^2)*s23^2 + (27*s12 + 27*s13)*
                 s23^3) + p2q^2*((108*s12^2*s13 + 216*s12*s13^2 + 108*s13^3)*
                 s23 + (27*s12^2 + 216*s12*s13 + 189*s13^2)*s23^2 +
                (27*s12 + 81*s13)*s23^3) + p1q*p2q*(-36*s12^3*s13 +
                36*s12^2*s13^2 + 72*s12*s13^3 + (-18*s12^3 - 27*s12^2*s13 +
                  108*s12*s13^2 + 9*s13^3)*s23 + (-18*s12^2 - 27*s12*s13 -
                  45*s13^2)*s23^2 + (-27*s12 - 81*s13)*s23^3 - 27*s23^4)) +
            p3q*(p1q^2*p2q*((36*s12^2*s13 + 72*s12*s13^2 + 36*s13^3)*s23 +
                (36*s12^2 + 72*s12*s13 + 36*s13^2)*s23^2 + 36*s12*s23^3) +
              p2q^3*((72*s12^2*s13 + 144*s12*s13^2 + 72*s13^3)*s23 +
                (9*s12^2 + 126*s12*s13 + 117*s13^2)*s23^2 + (9*s12 + 45*s13)*
                 s23^3) + p1q*p2q^2*(72*s12^2*s13^2 + 36*s12*s13^3 -
                36*s13^4 + (-9*s12^3 + 36*s12^2*s13 + 99*s12*s13^2 -
                  54*s13^3)*s23 + (-9*s12^2 - 9*s12*s13 - 72*s13^2)*s23^2 +
                (-27*s12 - 81*s13)*s23^3 - 27*s23^4) + p1q^3*(
                (-36*s12*s13 - 36*s13^2)*s23^2 + (-18*s12 - 54*s13)*s23^3 -
                18*s23^4)) + p3q^3*(p2q*((72*s12^2*s13 + 144*s12*s13^2 +
                  72*s13^3)*s23 + (27*s12^2 + 162*s12*s13 + 135*s13^2)*
                 s23^2 + (27*s12 + 63*s13)*s23^3) + p1q*(-36*s12^3*s13 -
                36*s12^2*s13^2 + (-9*s12^3 - 54*s12^2*s13 - 9*s12*s13^2)*
                 s23 + (-9*s12^2 - 27*s12*s13 - 18*s13^2)*s23^2 +
                (-9*s12 - 27*s13)*s23^3 - 9*s23^4)))*
           Log(s13/(s12 + s13 + s23)))/(p1q*p2q^3*(8*s12*s13 + 8*s13^2)*
            s23^2 + p1q*p3q^3*(8*s12*s13 + 8*s13^2)*s23^2 -
           8*p1q^2*p2q^2*s13*s23^3 + p3q^2*(p1q*p2q*(24*s12*s13 + 24*s13^2)*
              s23^2 - 8*p1q^2*s13*s23^3) +
           p3q*(p1q*p2q^2*(24*s12*s13 + 24*s13^2)*s23^2 - 16*p1q^2*p2q*s13*
              s23^3)) + ((p3q*(9*s12^3 + 18*s12^2*s13 + 9*s12*s13^2 +
              (18*s12^2 + 18*s12*s13)*s23 + 9*s12*s23^2) +
            p2q*(9*s12^2*s13 + 18*s12*s13^2 + 9*s13^3 + (18*s12*s13 +
                18*s13^2)*s23 + 9*s13*s23^2))*Log((s12 + s13)/
             (s12 + s13 + s23)))/(4*p1q*s12*s13*s23) +
         ((p3q^4*((-18*s12^4 - 90*s12^3*s13 - 126*s12^2*s13^2 - 54*s12*s13^3)*
               s23 + (-45*s12^3 - 144*s12^2*s13 - 99*s12*s13^2)*s23^2 +
              (-27*s12^2 - 45*s12*s13)*s23^3) + p1q^2*p2q^2*
             ((-72*s12^3*s13 - 216*s12^2*s13^2 - 144*s12*s13^3)*s23 +
              (-9*s12^3 - 153*s12^2*s13 - 243*s12*s13^2 - 27*s13^3)*s23^2 +
              (-9*s12^2 - 72*s12*s13 - 27*s13^2)*s23^3) +
            p2q^4*((-54*s12^3*s13 - 126*s12^2*s13^2 - 90*s12*s13^3 -
                18*s13^4)*s23 + (-99*s12^2*s13 - 144*s12*s13^2 - 45*s13^3)*
               s23^2 + (-45*s12*s13 - 27*s13^2)*s23^3) +
            p1q^3*p2q*((72*s12^2*s13 + 72*s12*s13^2)*s23^2 +
              (18*s12^2 + 108*s12*s13 + 18*s13^2)*s23^3 + (18*s12 + 18*s13)*
               s23^4) + p1q*p2q^3*(72*s12^2*s13^3 + 72*s12*s13^4 +
              (-9*s12^3*s13 + 27*s12^2*s13^2 + 117*s12*s13^3 + 9*s13^4)*s23 +
              (45*s12^2*s13 + 108*s12*s13^2 + 27*s13^3)*s23^2 +
              (9*s12^2 + 90*s12*s13 + 45*s13^2)*s23^3 + (9*s12 + 27*s13)*s23^
                4) + p3q^3*(p2q*((-54*s12^4 - 324*s12^3*s13 - 504*s12^2*
                   s13^2 - 252*s12*s13^3 - 18*s13^4)*s23 + (-135*s12^3 -
                  531*s12^2*s13 - 441*s12*s13^2 - 45*s13^3)*s23^2 +
                (-81*s12^2 - 180*s12*s13 - 27*s13^2)*s23^3) +
              p1q*(72*s12^4*s13 + 72*s12^3*s13^2 + (9*s12^4 + 117*s12^3*s13 +
                  27*s12^2*s13^2 - 9*s12*s13^3)*s23 + (27*s12^3 + 108*s12^2*
                   s13 + 45*s12*s13^2)*s23^2 + (45*s12^2 + 90*s12*s13 +
                  9*s13^2)*s23^3 + (27*s12 + 9*s13)*s23^4)) +
            p3q^2*(p2q^2*((-54*s12^4 - 432*s12^3*s13 - 756*s12^2*s13^2 -
                  432*s12*s13^3 - 54*s13^4)*s23 + (-135*s12^3 - 729*s12^2*
                   s13 - 729*s12*s13^2 - 135*s13^3)*s23^2 +
                (-81*s12^2 - 270*s12*s13 - 81*s13^2)*s23^3) +
              p1q^2*((-144*s12^3*s13 - 216*s12^2*s13^2 - 72*s12*s13^3)*s23 +
                (-27*s12^3 - 243*s12^2*s13 - 153*s12*s13^2 - 9*s13^3)*s23^2 +
                (-27*s12^2 - 72*s12*s13 - 9*s13^2)*s23^3) +
              p1q*p2q*(72*s12^4*s13 - 72*s12^3*s13^2 - 144*s12^2*s13^3 +
                (18*s12^4 + 81*s12^3*s13 - 207*s12^2*s13^2 - 45*s12*s13^3 +
                  9*s13^4)*s23 + (54*s12^3 + 189*s12^2*s13 + 126*s12*s13^2 +
                  27*s13^3)*s23^2 + (99*s12^2 + 270*s12*s13 + 63*s13^2)*
                 s23^3 + (63*s12 + 45*s13)*s23^4)) +
            p3q*(p2q^3*((-18*s12^4 - 252*s12^3*s13 - 504*s12^2*s13^2 -
                  324*s12*s13^3 - 54*s13^4)*s23 + (-45*s12^3 - 441*s12^2*
                   s13 - 531*s12*s13^2 - 135*s13^3)*s23^2 +
                (-27*s12^2 - 180*s12*s13 - 81*s13^2)*s23^3) +
              p1q^2*p2q*((-72*s12^3*s13 - 144*s12^2*s13^2 - 72*s12*s13^3)*
                 s23 + (-36*s12^3 - 108*s12^2*s13 - 108*s12*s13^2 - 36*s13^3)*
                 s23^2 + (-36*s12^2 - 36*s13^2)*s23^3) +
              p1q^3*((72*s12^2*s13 + 72*s12*s13^2)*s23^2 +
                (18*s12^2 + 108*s12*s13 + 18*s13^2)*s23^3 + (18*s12 + 18*s13)*
                 s23^4) + p1q*p2q^2*(-144*s12^3*s13^2 - 72*s12^2*s13^3 +
                72*s12*s13^4 + (9*s12^4 - 45*s12^3*s13 - 207*s12^2*s13^2 +
                  81*s12*s13^3 + 18*s13^4)*s23 + (27*s12^3 + 126*s12^2*s13 +
                  189*s12*s13^2 + 54*s13^3)*s23^2 + (63*s12^2 + 270*s12*s13 +
                  99*s13^2)*s23^3 + (45*s12 + 63*s13)*s23^4)))*
           Log(s23/(s12 + s13 + s23)))/(p1q*p2q^3*(8*s12^2*s13 + 8*s12*s13^2)*
            s23^2 + p1q*p3q^3*(8*s12^2*s13 + 8*s12*s13^2)*s23^2 -
           8*p1q^2*p2q^2*s12*s13*s23^3 + p3q^2*(p1q*p2q*(24*s12^2*s13 + 24*
                s12*s13^2)*s23^2 - 8*p1q^2*s12*s13*s23^3) +
           p3q*(p1q*p2q^2*(24*s12^2*s13 + 24*s12*s13^2)*s23^2 -
             16*p1q^2*p2q*s12*s13*s23^3))) +
       nl*((p3q^3*((90*s12^4 + 450*s12^3*s13 + 630*s12^2*s13^2 + 270*s12*
                s13^3)*s23 + (270*s12^3 + 720*s12^2*s13 + 450*s12*s13^2)*
              s23^2 + (180*s12^2 + 180*s12*s13)*s23^3) +
           p1q^2*p2q*((360*s12^3*s13 + 720*s12^2*s13^2 + 360*s12*s13^3)*s23 +
             (90*s12^3 + 576*s12^2*s13 + 576*s12*s13^2 + 90*s13^3)*s23^2 +
             (90*s12^2 + 126*s12*s13 + 90*s13^2)*s23^3) +
           p2q^3*((270*s12^3*s13 + 630*s12^2*s13^2 + 450*s12*s13^3 + 90*
                s13^4)*s23 + (450*s12^2*s13 + 720*s12*s13^2 + 270*s13^3)*
              s23^2 + (180*s12*s13 + 180*s13^2)*s23^3) +
           p1q*p2q^2*(-360*s12^2*s13^3 - 360*s12*s13^4 +
             (90*s12^3*s13 - 324*s12^2*s13^2 - 396*s12*s13^3 - 90*s13^4)*
              s23 + (-58*s12^3 - 343*s12^2*s13 - 379*s12*s13^2 - 148*s13^3)*
              s23^2 + (-110*s12^2 - 220*s12*s13 - 110*s13^2)*s23^3 +
             (-20*s12 - 20*s13)*s23^4) +
           p3q*(p1q^2*((360*s12^3*s13 + 720*s12^2*s13^2 + 360*s12*s13^3)*
                s23 + (90*s12^3 + 576*s12^2*s13 + 576*s12*s13^2 + 90*s13^3)*
                s23^2 + (90*s12^2 + 126*s12*s13 + 90*s13^2)*s23^3) +
             p2q^2*((90*s12^4 + 990*s12^3*s13 + 1890*s12^2*s13^2 +
                 1170*s12*s13^3 + 180*s13^4)*s23 + (270*s12^3 + 1620*s12^2*
                  s13 + 1890*s12*s13^2 + 540*s13^3)*s23^2 + (180*s12^2 +
                 540*s12*s13 + 360*s13^2)*s23^3) + p1q*p2q*(720*s12^3*s13^2 +
               720*s12^2*s13^3 + (-90*s12^4 + 414*s12^3*s13 + 792*s12^2*
                  s13^2 + 414*s12*s13^3 - 90*s13^4)*s23 + (-206*s12^3 -
                 362*s12^2*s13 - 362*s12*s13^2 - 206*s13^3)*s23^2 +
               (-220*s12^2 - 440*s12*s13 - 220*s13^2)*s23^3 + (-40*s12 -
                 40*s13)*s23^4)) + p3q^2*(p2q*((180*s12^4 + 1170*s12^3*s13 +
                 1890*s12^2*s13^2 + 990*s12*s13^3 + 90*s13^4)*s23 +
               (540*s12^3 + 1890*s12^2*s13 + 1620*s12*s13^2 + 270*s13^3)*
                s23^2 + (360*s12^2 + 540*s12*s13 + 180*s13^2)*s23^3) +
             p1q*(-360*s12^4*s13 - 360*s12^3*s13^2 + (-90*s12^4 -
                 396*s12^3*s13 - 324*s12^2*s13^2 + 90*s12*s13^3)*s23 +
               (-148*s12^3 - 379*s12^2*s13 - 343*s12*s13^2 - 58*s13^3)*
                s23^2 + (-110*s12^2 - 220*s12*s13 - 110*s13^2)*s23^3 +
               (-20*s12 - 20*s13)*s23^4)))/(p1q*p2q^2*(108*s12^2*s13 +
             108*s12*s13^2)*s23^2 + p1q*p3q^2*(108*s12^2*s13 + 108*s12*s13^2)*
            s23^2 + p1q*p2q*p3q*(216*s12^2*s13 + 216*s12*s13^2)*s23^2) +
         ((p3q^3*((-9*s12^3 - 36*s12^2*s13 - 27*s12*s13^2)*s23 +
              (-27*s12^2 - 45*s12*s13)*s23^2 - 18*s12*s23^3) +
            p1q^2*p2q*((-36*s12^2*s13 - 36*s12*s13^2)*s23 + (-9*s12^2 -
                54*s12*s13 - 9*s13^2)*s23^2 + (-9*s12 - 9*s13)*s23^3) +
            p2q^3*((-27*s12^2*s13 - 36*s12*s13^2 - 9*s13^3)*s23 +
              (-45*s12*s13 - 27*s13^2)*s23^2 - 18*s13*s23^3) +
            p1q*p2q^2*(36*s12*s13^3 + (-9*s12^2*s13 + 36*s12*s13^2 + 9*s13^3)*
               s23 + (s12^2 + 27*s12*s13 + 10*s13^2)*s23^2 +
              (11*s12 + 11*s13)*s23^3 + 2*s23^4) +
            p3q^2*(p2q*((-18*s12^3 - 99*s12^2*s13 - 90*s12*s13^2 - 9*s13^3)*
                 s23 + (-54*s12^2 - 135*s12*s13 - 27*s13^2)*s23^2 +
                (-36*s12 - 18*s13)*s23^3) + p1q*(36*s12^3*s13 +
                (9*s12^3 + 36*s12^2*s13 - 9*s12*s13^2)*s23 +
                (10*s12^2 + 27*s12*s13 + s13^2)*s23^2 + (11*s12 + 11*s13)*
                 s23^3 + 2*s23^4)) + p3q*(p2q^2*((-9*s12^3 - 90*s12^2*s13 -
                  99*s12*s13^2 - 18*s13^3)*s23 + (-27*s12^2 - 135*s12*s13 -
                  54*s13^2)*s23^2 + (-18*s12 - 36*s13)*s23^3) +
              p1q^2*((-36*s12^2*s13 - 36*s12*s13^2)*s23 + (-9*s12^2 -
                  54*s12*s13 - 9*s13^2)*s23^2 + (-9*s12 - 9*s13)*s23^3) +
              p1q*p2q*(-72*s12^2*s13^2 + (9*s12^3 - 45*s12^2*s13 -
                  45*s12*s13^2 + 9*s13^3)*s23 + (11*s12^2 + 18*s12*s13 +
                  11*s13^2)*s23^2 + (22*s12 + 22*s13)*s23^3 + 4*s23^4)))*
           Log(-s12 - s13 - s23))/(18*p1q*p2q^2*s12*s13*s23^2 +
           36*p1q*p2q*p3q*s12*s13*s23^2 + 18*p1q*p3q^2*s12*s13*s23^2) +
         ((p3q^3*((-s12^5 - 10*s12^4*s13 - 24*s12^3*s13^2 - 22*s12^2*s13^3 -
                7*s12*s13^4)*s23 + (-3*s12^4 - 19*s12^3*s13 - 29*s12^2*
                 s13^2 - 13*s12*s13^3)*s23^2 + (-2*s12^3 - 8*s12^2*s13 -
                6*s12*s13^2)*s23^3) + p2q^3*((-7*s12^4*s13 - 22*s12^3*s13^2 -
                24*s12^2*s13^3 - 10*s12*s13^4 - s13^5)*s23 + (-13*s12^3*s13 -
                29*s12^2*s13^2 - 19*s12*s13^3 - 3*s13^4)*s23^2 +
              (-6*s12^2*s13 - 8*s12*s13^2 - 2*s13^3)*s23^3) +
            p1q^2*p2q*((-8*s12^4*s13 - 24*s12^3*s13^2 - 24*s12^2*s13^3 -
                8*s12*s13^4)*s23 + (-s12^4 - 18*s12^3*s13 - 34*s12^2*s13^2 -
                18*s12*s13^3 - s13^4)*s23^2 + (-s12^3 - 11*s12^2*s13 -
                11*s12*s13^2 - s13^3)*s23^3 - 2*s12*s13*s23^4) +
            p1q*p2q^2*(8*s12^3*s13^3 + 16*s12^2*s13^4 + 8*s12*s13^5 +
              (-(s12^4*s13) + 16*s12^2*s13^3 + 16*s12*s13^4 + s13^5)*s23 +
              (s12^4 + 6*s12^3*s13 + 15*s12^2*s13^2 + 16*s12*s13^3 + 2*s13^4)*
               s23^2 + (3*s12^3 + 12*s12^2*s13 + 14*s12*s13^2 + 3*s13^3)*s23^
                3 + (2*s12^2 + 4*s12*s13 + 2*s13^2)*s23^4) +
            p3q^2*(p2q*((-2*s12^5 - 27*s12^4*s13 - 70*s12^3*s13^2 -
                  68*s12^2*s13^3 - 24*s12*s13^4 - s13^5)*s23 +
                (-6*s12^4 - 51*s12^3*s13 - 87*s12^2*s13^2 - 45*s12*s13^3 -
                  3*s13^4)*s23^2 + (-4*s12^3 - 22*s12^2*s13 - 20*s12*s13^2 -
                  2*s13^3)*s23^3) + p1q*(8*s12^5*s13 + 16*s12^4*s13^2 +
                8*s12^3*s13^3 + (s12^5 + 16*s12^4*s13 + 16*s12^3*s13^2 -
                  s12*s13^4)*s23 + (2*s12^4 + 16*s12^3*s13 + 15*s12^2*s13^2 +
                  6*s12*s13^3 + s13^4)*s23^2 + (3*s12^3 + 14*s12^2*s13 +
                  12*s12*s13^2 + 3*s13^3)*s23^3 + (2*s12^2 + 4*s12*s13 +
                  2*s13^2)*s23^4)) + p3q*(p2q^2*((-s12^5 - 24*s12^4*s13 -
                  68*s12^3*s13^2 - 70*s12^2*s13^3 - 27*s12*s13^4 - 2*s13^5)*
                 s23 + (-3*s12^4 - 45*s12^3*s13 - 87*s12^2*s13^2 -
                  51*s12*s13^3 - 6*s13^4)*s23^2 + (-2*s12^3 - 20*s12^2*s13 -
                  22*s12*s13^2 - 4*s13^3)*s23^3) + p1q^2*((-8*s12^4*s13 -
                  24*s12^3*s13^2 - 24*s12^2*s13^3 - 8*s12*s13^4)*s23 +
                (-s12^4 - 18*s12^3*s13 - 34*s12^2*s13^2 - 18*s12*s13^3 -
                  s13^4)*s23^2 + (-s12^3 - 11*s12^2*s13 - 11*s12*s13^2 -
                  s13^3)*s23^3 - 2*s12*s13*s23^4) + p1q*p2q*(-16*s12^4*
                 s13^2 - 32*s12^3*s13^3 - 16*s12^2*s13^4 +
                (s12^5 - s12^4*s13 - 32*s12^3*s13^2 - 32*s12^2*s13^3 -
                  s12*s13^4 + s13^5)*s23 + (3*s12^4 + 14*s12^3*s13 +
                  14*s12^2*s13^2 + 14*s12*s13^3 + 3*s13^4)*s23^2 +
                (6*s12^3 + 26*s12^2*s13 + 26*s12*s13^2 + 6*s13^3)*s23^3 +
                (4*s12^2 + 8*s12*s13 + 4*s13^2)*s23^4)))*
           Log(s23/(s12 + s13 + s23)))/(p1q*p2q^2*(4*s12^3*s13 +
             8*s12^2*s13^2 + 4*s12*s13^3)*s23^2 + p1q*p3q^2*
            (4*s12^3*s13 + 8*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
           p1q*p2q*p3q*(8*s12^3*s13 + 16*s12^2*s13^2 + 8*s12*s13^3)*s23^2)) +
       Log((p1q + p3q)/(p1q + p2q + p3q))*
        (((p2q^2*(-(s12*s13^2) - s13^3 - s13^2*s23) +
            p3q^2*(-s12^3 - s12^2*s13 + (-2*s12^2 - s12*s13)*s23 -
              s12*s23^2) + p1q*p2q*(-(s12*s13^2) - s13^3 + (2*s12*s13 +
                s13^2)*s23 + 2*s13*s23^2) + p1q^2*(2*s12^2*s13 +
              2*s12*s13^2 + (3*s12*s13 + s13^2)*s23 - s12*s23^2 - s23^3) +
            p3q*(p2q*(2*s12^2*s13 + 2*s12*s13^2 + (3*s12*s13 + s13^2)*s23 +
                s13*s23^2) + p1q*(s12^2*s13 + s12*s13^2 + s12*s13*s23 +
                (-s12 - s13)*s23^2 - s23^3)))*Log(s12/(s12 + s13 + s23)))/
          (-8*p1q*p2q*s12*s13^2 + p1q^2*(8*s12^2*s13 + 8*s12*s13*s23) +
           p1q*p3q*(8*s12^2*s13 + 8*s12*s13*s23)) +
         ((p2q^3*(9*s12^2*s13^2 + 9*s12*s13^3 + (10*s12*s13^2 + s13^3)*s23 +
              s13^2*s23^2) + p3q^3*(-18*s12^4 - 45*s12^3*s13 -
              27*s12^2*s13^2 + (-71*s12^3 - 116*s12^2*s13 - 36*s12*s13^2)*
               s23 + (-88*s12^2 - 71*s12*s13)*s23^2 - 35*s12*s23^3) +
            p1q^3*((-9*s12^3 - 18*s12^2*s13 - 9*s12*s13^2)*s23 +
              (-18*s12^2 - 18*s12*s13)*s23^2 - 9*s12*s23^3) +
            p1q*p2q^2*(9*s12^2*s13^2 + 9*s12*s13^3 + (-20*s12^2*s13 -
                12*s12*s13^2 - s13^3)*s23 + (-24*s12*s13 - 5*s13^2)*s23^2 -
              4*s13*s23^3) + p1q^2*p2q*(-9*s12^3*s13 + 9*s12*s13^3 +
              (2*s12^3 - 7*s12^2*s13 + 9*s12*s13^2)*s23 + (15*s12^2 +
                14*s12*s13 + s13^2)*s23^2 + (16*s12 + 4*s13)*s23^3 +
              3*s23^4) + p3q*(p2q^2*(9*s12^3*s13 + 45*s12^2*s13^2 +
                36*s12*s13^3 + (25*s12^2*s13 + 53*s12*s13^2 + s13^3)*s23 +
                15*s12*s13*s23^2 - s13*s23^3) + p1q*p2q*(-18*s12^4 -
                54*s12^3*s13 - 36*s12^2*s13^2 + (-61*s12^3 - 134*s12^2*s13 -
                  56*s12*s13^2 - s13^3)*s23 + (-57*s12^2 - 71*s12*s13 -
                  3*s13^2)*s23^2 + (-11*s12 + s13)*s23^3 + 3*s23^4) +
              p1q^2*(9*s12^4 - 9*s12^2*s13^2 + (11*s12^3 - 25*s12^2*s13 -
                  18*s12*s13^2)*s23 + (6*s12^2 - 13*s12*s13 + s13^2)*s23^2 +
                (7*s12 + 4*s13)*s23^3 + 3*s23^4)) +
            p3q^2*(p2q*(-18*s12^4 - 36*s12^3*s13 + 9*s12^2*s13^2 +
                27*s12*s13^3 + (-71*s12^3 - 91*s12^2*s13 + 7*s12*s13^2)*s23 +
                (-88*s12^2 - 56*s12*s13 - s13^2)*s23^2 + (-35*s12 - s13)*
                 s23^3) + p1q*(-9*s12^4 - 27*s12^3*s13 - 18*s12^2*s13^2 +
                (-43*s12^3 - 78*s12^2*s13 - 26*s12*s13^2)*s23 +
                (-48*s12^2 - 38*s12*s13 + 2*s13^2)*s23^2 + (-11*s12 + 5*s13)*
                 s23^3 + 3*s23^4)))*Log(s13/(s12 + s13 + s23)))/
          (-8*p1q*p2q^2*s12*s13^2*s23 + p1q^2*p2q*(8*s12^2*s13*s23 +
             8*s12*s13*s23^2) + p1q*p3q^2*(8*s12^2*s13*s23 +
             8*s12*s13*s23^2) + p3q*(p1q^2*(8*s12^2*s13*s23 + 8*s12*s13*
                s23^2) + p1q*p2q*((8*s12^2*s13 - 8*s12*s13^2)*s23 + 8*s12*s13*
                s23^2))) + ((p2q^3*(-9*s12*s13^2 - 9*s13^3 - 9*s13^2*s23) +
            p1q*p2q^2*(-9*s12*s13^2 - 9*s13^3 + (18*s12*s13 + 9*s13^2)*s23 +
              18*s13*s23^2) + p1q^2*p2q*(9*s12^2*s13 - 9*s13^3 +
              (9*s12*s13 - 9*s13^2)*s23 + (-9*s12 - 9*s13)*s23^2 - 9*s23^3) +
            p1q^3*((9*s12^2 + 18*s12*s13 + 9*s13^2)*s23 + (18*s12 + 18*s13)*
               s23^2 + 9*s23^3) + p3q^3*(9*s12^2*s13 + 9*s12*s13^2 +
              (18*s12^2 + 45*s12*s13 + 18*s13^2)*s23 + (36*s12 + 36*s13)*s23^
                2 + 18*s23^3) + p3q*(p2q^2*(9*s12^2*s13 - 9*s12*s13^2 -
                18*s13^3 + (9*s12*s13 - 18*s13^2)*s23) + p1q^2*(-9*s12^3 +
                9*s12*s13^2 + (-9*s12^2 + 27*s12*s13 + 18*s13^2)*s23 +
                18*s13*s23^2) + p1q*p2q*(18*s12^2*s13 + 18*s12*s13^2 +
                (9*s12^2 + 63*s12*s13 + 36*s13^2)*s23 + (9*s12 + 36*s13)*
                 s23^2)) + p3q^2*(p1q*(-9*s12^3 - 9*s12^2*s13 +
                (-9*s12^2 + 9*s12*s13 + 9*s13^2)*s23 + 9*s13*s23^2) +
              p2q*(18*s12^2*s13 + 9*s12*s13^2 - 9*s13^3 + (18*s12^2 +
                  54*s12*s13 + 9*s13^2)*s23 + (36*s12 + 36*s13)*s23^2 +
                18*s23^3)))*Log(s23/(s12 + s13 + s23)))/
          (-8*p1q*p2q^2*s13^2*s23 + p1q^2*p2q*(8*s12*s13*s23 + 8*s13*s23^2) +
           p1q*p3q^2*(8*s12*s13*s23 + 8*s13*s23^2) +
           p3q*(p1q^2*(8*s12*s13*s23 + 8*s13*s23^2) +
             p1q*p2q*((8*s12*s13 - 8*s13^2)*s23 + 8*s13*s23^2))) +
         ((p3q*(9*s12^3 + 18*s12^2*s13 + 9*s12*s13^2 + (18*s12^2 +
                18*s12*s13)*s23 + 9*s12*s23^2) +
            p1q*((-s12^2 - 2*s12*s13 - s13^2)*s23 + (-2*s12 - 2*s13)*s23^2 -
              s23^3))*Log((s12 + s23)/(s12 + s13 + s23)))/
          (4*p1q*s12*s13*s23)) + Log(s13/(s12 + s13 + s23))*
        ((p3q^2*(-99*s12^3*s13 - 99*s12^2*s13^2 + (-144*s12^2*s13 - 45*s12*
                s13^2)*s23 - 45*s12*s13*s23^2) + p2q^2*(99*s12^2*s13^2 +
             99*s12*s13^3 + (144*s12*s13^2 + 45*s13^3)*s23 +
             45*s13^2*s23^2) + p1q*p2q*(99*s12^2*s13^2 - 99*s12*s13^3 +
             (72*s12^3 + 81*s12^2*s13 - 140*s12*s13^2 - 45*s13^3)*s23 +
             (72*s12^2 - 50*s12*s13 - 89*s13^2)*s23^2 - 35*s13*s23^3) +
           p1q^2*((99*s12^2*s13 + 99*s12*s13^2)*s23 +
             (144*s12*s13 + 45*s13^2)*s23^2 + 45*s13*s23^3) +
           p3q*(p2q*(-99*s12^3*s13 + 99*s12*s13^3 + (-144*s12^2*s13 +
                 99*s12*s13^2 + 45*s13^3)*s23 + (-45*s12*s13 + 45*s13^2)*
                s23^2) + p1q*(-99*s12^3*s13 + 99*s12^2*s13^2 + (72*s12^3 -
                 63*s12^2*s13 - 41*s12*s13^2)*s23 + (72*s12^2 - 95*s12*s13 -
                 44*s13^2)*s23^2 - 35*s13*s23^3)))/
          (p1q*p2q*(36*s12^2*s13*s23 + 36*s12*s13*s23^2) +
           p1q*p3q*(36*s12^2*s13*s23 + 36*s12*s13*s23^2)) +
         ((p2q^4*((-171*s12^4*s13^2 - 585*s12^3*s13^3 - 657*s12^2*s13^4 -
                243*s12*s13^5)*s23 + (-270*s12^3*s13^2 - 783*s12^2*s13^3 -
                603*s12*s13^4 - 90*s13^5)*s23^2 + (-99*s12^2*s13^2 -
                270*s12*s13^3 - 90*s13^4)*s23^3) +
            p3q^4*((72*s12^6 + 144*s12^5*s13 + 72*s12^4*s13^2)*s23 +
              (207*s12^5 + 90*s12^4*s13 - 288*s12^3*s13^2 - 171*s12^2*s13^3)*
               s23^2 + (198*s12^4 - 162*s12^3*s13 - 369*s12^2*s13^2 -
                90*s12*s13^3)*s23^3 + (63*s12^3 - 108*s12^2*s13 -
                90*s12*s13^2)*s23^4) + p1q*p2q^3*(324*s12^3*s13^4 +
              324*s12^2*s13^5 + (252*s12^5*s13 + 675*s12^4*s13^2 +
                1143*s12^3*s13^3 + 639*s12^2*s13^4 + 243*s12*s13^5)*s23 +
              (511*s12^4*s13 + 2095*s12^3*s13^2 + 2232*s12^2*s13^3 +
                1062*s12*s13^4 + 90*s13^5)*s23^2 + (581*s12^3*s13 +
                1929*s12^2*s13^2 + 1679*s12*s13^3 + 340*s13^4)*s23^3 +
              (158*s12^2*s13 + 660*s12*s13^2 + 250*s13^3)*s23^4) +
            p1q^2*p2q^2*(-324*s12^4*s13^3 - 324*s12^3*s13^4 +
              (72*s12^5*s13 - 648*s12^4*s13^2 - 882*s12^3*s13^3 -
                1134*s12^2*s13^4)*s23 + (-70*s12^5 - 889*s12^4*s13 -
                1692*s12^3*s13^2 - 1998*s12^2*s13^3 - 819*s12*s13^4)*s23^2 +
              (-282*s12^4 - 1745*s12^3*s13 - 2444*s12^2*s13^2 -
                1798*s12*s13^3 - 270*s13^4)*s23^3 + (-271*s12^3 -
                1559*s12^2*s13 - 1549*s12*s13^2 - 500*s13^3)*s23^4 +
              (-59*s12^2 - 530*s12*s13 - 230*s13^2)*s23^5) +
            p1q^4*((-324*s12^4*s13 - 324*s12^3*s13^2)*s23^2 +
              (9*s12^4 - 801*s12^3*s13 - 486*s12^2*s13^2)*s23^3 +
              (18*s12^3 - 810*s12^2*s13 - 333*s12*s13^2)*s23^4 +
              (9*s12^2 - 423*s12*s13 - 90*s13^2)*s23^5 - 90*s13*s23^6) +
            p1q^3*p2q*((324*s12^5*s13 + 324*s12^4*s13^2 + 648*s12^3*s13^3)*
               s23 + (72*s12^5 + 477*s12^4*s13 + 1359*s12^3*s13^2 +
                1296*s12^2*s13^3)*s23^2 + (214*s12^4 + 711*s12^3*s13 +
                2169*s12^2*s13^2 + 909*s12*s13^3)*s23^3 + (435*s12^3 +
                880*s12^2*s13 + 1402*s12*s13^2 + 270*s13^3)*s23^4 +
              (433*s12^2 + 473*s12*s13 + 340*s13^2)*s23^5 + (140*s12 +
                70*s13)*s23^6) + p3q^3*(p2q*((144*s12^6 + 387*s12^5*s13 +
                  585*s12^4*s13^2 + 585*s12^3*s13^3 + 243*s12^2*s13^4)*s23 +
                (414*s12^5 + 405*s12^4*s13 + 603*s12^3*s13^2 + 1035*s12^2*
                   s13^3 + 423*s12*s13^4)*s23^2 + (396*s12^4 - 99*s12^3*s13 +
                  342*s12^2*s13^2 + 603*s12*s13^3 + 90*s13^4)*s23^3 +
                (126*s12^3 - 117*s12^2*s13 + 90*s12*s13^2 + 90*s13^3)*
                 s23^4) + p1q*(-324*s12^6*s13 - 324*s12^5*s13^2 +
                (-342*s12^5*s13 - 342*s12^4*s13^2 + 324*s12^3*s13^3)*s23 +
                (2*s12^5 - 547*s12^4*s13 - 873*s12^3*s13^2)*s23^2 +
                (-282*s12^4 - 1063*s12^3*s13 - 1085*s12^2*s13^2 -
                  313*s12*s13^3)*s23^3 + (-487*s12^3 - 735*s12^2*s13 -
                  543*s12*s13^2 - 70*s13^3)*s23^4 + (-203*s12^2 -
                  120*s12*s13 - 70*s13^2)*s23^5)) +
            p3q*(p2q^3*((99*s12^5*s13 + 99*s12^4*s13^2 - 585*s12^3*s13^3 -
                  1071*s12^2*s13^4 - 486*s12*s13^5)*s23 + (225*s12^4*s13 +
                  639*s12^3*s13^2 - 189*s12^2*s13^3 - 783*s12*s13^4 -
                  180*s13^5)*s23^2 + (225*s12^3*s13 + 882*s12^2*s13^2 +
                  243*s12*s13^3 - 90*s13^4)*s23^3 + (99*s12^2*s13 +
                  270*s12*s13^2 + 90*s13^3)*s23^4) + p1q*p2q^2*(-972*s12^4*
                 s13^3 - 972*s12^3*s13^4 + (72*s12^6 + 873*s12^5*s13 +
                  846*s12^4*s13^2 + 198*s12^3*s13^3 - 576*s12^2*s13^4 +
                  243*s12*s13^5)*s23 + (218*s12^5 + 844*s12^4*s13 +
                  2354*s12^3*s13^2 + 2529*s12^2*s13^3 + 1215*s12*s13^4 +
                  90*s13^5)*s23^2 + (78*s12^4 + 18*s12^3*s13 + 1567*s12^2*
                   s13^2 + 1686*s12*s13^3 + 410*s13^4)*s23^3 +
                (-127*s12^3 - 752*s12^2*s13 - 186*s12*s13^2 + 160*s13^3)*
                 s23^4 + (-59*s12^2 - 390*s12*s13 - 160*s13^2)*s23^5) +
              p1q^3*((648*s12^5*s13 + 324*s12^4*s13^2 + 324*s12^3*s13^3)*
                 s23 + (63*s12^5 + 963*s12^4*s13 + 396*s12^3*s13^2 +
                  486*s12^2*s13^3)*s23^2 + (205*s12^4 + 666*s12^3*s13 +
                  567*s12^2*s13^2 + 333*s12*s13^3)*s23^3 +
                (444*s12^3 + 430*s12^2*s13 + 403*s12*s13^2 + 90*s13^3)*
                 s23^4 + (442*s12^2 + 140*s12*s13 + 70*s13^2)*s23^5 +
                (140*s12 - 20*s13)*s23^6) + p1q^2*p2q*(648*s12^5*s13^2 +
                648*s12^4*s13^3 + (-72*s12^6 + 720*s12^5*s13 + 882*s12^4*
                   s13^2 + 1548*s12^3*s13^3 - 486*s12^2*s13^4)*s23 +
                (-284*s12^5 - 635*s12^4*s13 - 594*s12^3*s13^2 + 189*s12^2*
                   s13^3 - 576*s12*s13^4)*s23^2 + (-791*s12^4 - 2241*s12^3*
                   s13 - 1648*s12^2*s13^2 - 1112*s12*s13^3 - 180*s13^4)*
                 s23^3 + (-629*s12^3 - 1540*s12^2*s13 - 1023*s12*s13^2 -
                  300*s13^3)*s23^4 + (90*s12^2 - 177*s12*s13 - 50*s13^2)*
                 s23^5 + (140*s12 + 70*s13)*s23^6)) +
            p3q^2*(p2q^2*((72*s12^6 + 342*s12^5*s13 + 783*s12^4*s13^2 +
                  585*s12^3*s13^3 - 171*s12^2*s13^4 - 243*s12*s13^5)*s23 +
                (207*s12^5 + 540*s12^4*s13 + 1800*s12^3*s13^2 + 1800*s12^2*
                   s13^3 + 243*s12*s13^4 - 90*s13^5)*s23^2 +
                (198*s12^4 + 288*s12^3*s13 + 1692*s12^2*s13^2 + 1206*s12*
                   s13^3 + 90*s13^4)*s23^3 + (63*s12^3 + 90*s12^2*s13 +
                  450*s12*s13^2 + 180*s13^3)*s23^4) + p1q*p2q*(972*s12^5*
                 s13^2 + 972*s12^4*s13^3 + (72*s12^6 + 1251*s12^5*s13 +
                  2745*s12^4*s13^2 + 2295*s12^3*s13^3 - 243*s12^2*s13^4)*
                 s23 + (220*s12^5 + 758*s12^4*s13 + 1330*s12^3*s13^2 +
                  1269*s12^2*s13^3 + 153*s12*s13^4)*s23^2 +
                (-204*s12^4 - 1302*s12^3*s13 - 1123*s12^2*s13^2 -
                  306*s12*s13^3 + 70*s13^4)*s23^3 + (-614*s12^3 - 1645*s12^2*
                   s13 - 1389*s12*s13^2 - 160*s13^3)*s23^4 +
                (-262*s12^2 - 510*s12*s13 - 230*s13^2)*s23^5) +
              p1q^2*(-324*s12^6*s13 - 324*s12^5*s13^2 + (-72*s12^6 -
                  414*s12^4*s13^2 + 486*s12^3*s13^3)*s23 + (-223*s12^5 +
                  2*s12^4*s13 - 594*s12^3*s13^2 + 495*s12^2*s13^3)*s23^2 +
                (-527*s12^4 - 244*s12^3*s13 - 68*s12^2*s13^2 + 110*s12*s13^3)*
                 s23^3 + (-367*s12^3 + 289*s12^2*s13 + 283*s12*s13^2 +
                  20*s13^3)*s23^4 + (149*s12^2 + 443*s12*s13 + 90*s13^2)*
                 s23^5 + (140*s12 + 70*s13)*s23^6)))*
           Log(s23/(s12 + s13 + s23)))/(p1q*p2q^3*(-72*s12^3*s13^2 -
             72*s12^2*s13^3)*s23^2 + p1q*p3q^3*
            ((72*s12^4*s13 + 72*s12^3*s13^2)*s23^2 + (72*s12^3*s13 + 72*s12^2*
                s13^2)*s23^3) + p1q^2*p2q^2*((72*s12^4*s13 + 72*s12^3*s13^2)*
              s23^2 + (72*s12^3*s13 + 144*s12^2*s13^2)*s23^3) +
           p1q^3*p2q*(-72*s12^3*s13*s23^3 - 72*s12^2*s13*s23^4) +
           p3q^2*(p1q*p2q*((144*s12^4*s13 + 72*s12^3*s13^2 - 72*s12^2*s13^3)*
                s23^2 + (144*s12^3*s13 + 144*s12^2*s13^2)*s23^3) +
             p1q^2*((72*s12^4*s13 + 72*s12^3*s13^2)*s23^2 + 72*s12^2*s13^2*
                s23^3 - 72*s12^2*s13*s23^4)) +
           p3q*(p1q*p2q^2*((72*s12^4*s13 - 72*s12^3*s13^2 - 144*s12^2*s13^3)*
                s23^2 + (72*s12^3*s13 + 72*s12^2*s13^2)*s23^3) +
             p1q^3*(-72*s12^3*s13*s23^3 - 72*s12^2*s13*s23^4) +
             p1q^2*p2q*((144*s12^4*s13 + 144*s12^3*s13^2)*s23^2 +
               (72*s12^3*s13 + 216*s12^2*s13^2)*s23^3 - 72*s12^2*s13*
                s23^4))) + ((p3q^2*(-72*s12^4 + 9*s12^3*s13 +
              81*s12^2*s13^2 + (-54*s12^3 + 189*s12^2*s13 + 90*s12*s13^2)*
               s23 + (18*s12^2 + 90*s12*s13)*s23^2) +
            p2q^2*(-90*s12^3*s13 - 333*s12^2*s13^2 - 243*s12*s13^3 +
              (-270*s12^2*s13 - 513*s12*s13^2 - 90*s13^3)*s23 +
              (-180*s12*s13 - 90*s13^2)*s23^2) +
            p1q^2*((90*s12^3 - 153*s12^2*s13 - 243*s12*s13^2)*s23 +
              (90*s12^2 - 333*s12*s13 - 90*s13^2)*s23^2 - 90*s13*s23^3) +
            p1q*p2q*(90*s12^3*s13 - 333*s12^2*s13^2 + 243*s12*s13^3 +
              (88*s12^3 - 207*s12^2*s13 + 414*s12*s13^2 + 90*s13^3)*s23 +
              (86*s12^2 + 349*s12*s13 + 160*s13^2)*s23^2 + (158*s12 + 70*s13)*
               s23^3) + p3q*(p2q*(-72*s12^4 - 81*s12^3*s13 - 252*s12^2*
                 s13^2 - 243*s12*s13^3 + (-54*s12^3 - 81*s12^2*s13 -
                  423*s12*s13^2 - 90*s13^3)*s23 + (18*s12^2 - 90*s12*s13 -
                  90*s13^2)*s23^2) + p1q*(-90*s12^4 + 333*s12^3*s13 -
                243*s12^2*s13^2 + (-2*s12^3 + 216*s12^2*s13 + 171*s12*s13^2)*
                 s23 + (86*s12^2 + 439*s12*s13 + 70*s13^2)*s23^2 +
                (158*s12 + 70*s13)*s23^3)))*Log((s12 + s23)/
             (s12 + s13 + s23)))/(72*p1q*p2q*s12^2*s13*s23 +
           72*p1q*p3q*s12^2*s13*s23)) + Log((p1q + p2q)/(p1q + p2q + p3q))*
        (((p3q^3*(-9*s12^3*s13 - 9*s12^2*s13^2 + (-s12^3 - 10*s12^2*s13)*
               s23 - s12^2*s23^2) + p1q^3*((9*s12^2*s13 + 18*s12*s13^2 +
                9*s13^3)*s23 + (18*s12*s13 + 18*s13^2)*s23^2 + 9*s13*s23^3) +
            p2q^3*(27*s12^2*s13^2 + 45*s12*s13^3 + 18*s13^4 +
              (36*s12^2*s13 + 116*s12*s13^2 + 71*s13^3)*s23 +
              (71*s12*s13 + 88*s13^2)*s23^2 + 35*s13*s23^3) +
            p1q^2*p2q*(9*s12^2*s13^2 - 9*s13^4 + (18*s12^2*s13 +
                25*s12*s13^2 - 11*s13^3)*s23 + (-s12^2 + 13*s12*s13 -
                6*s13^2)*s23^2 + (-4*s12 - 7*s13)*s23^3 - 3*s23^4) +
            p1q*p2q^2*(18*s12^2*s13^2 + 27*s12*s13^3 + 9*s13^4 +
              (26*s12^2*s13 + 78*s12*s13^2 + 43*s13^3)*s23 +
              (-2*s12^2 + 38*s12*s13 + 48*s13^2)*s23^2 + (-5*s12 + 11*s13)*
               s23^3 - 3*s23^4) + p3q^2*(p2q*(-36*s12^3*s13 - 45*s12^2*
                 s13^2 - 9*s12*s13^3 + (-s12^3 - 53*s12^2*s13 - 25*s12*s13^2)*
                 s23 - 15*s12*s13*s23^2 + s12*s23^3) + p1q*(-9*s12^3*s13 -
                9*s12^2*s13^2 + (s12^3 + 12*s12^2*s13 + 20*s12*s13^2)*s23 +
                (5*s12^2 + 24*s12*s13)*s23^2 + 4*s12*s23^3)) +
            p3q*(p2q^2*(-27*s12^3*s13 - 9*s12^2*s13^2 + 36*s12*s13^3 +
                18*s13^4 + (-7*s12^2*s13 + 91*s12*s13^2 + 71*s13^3)*s23 +
                (s12^2 + 56*s12*s13 + 88*s13^2)*s23^2 + (s12 + 35*s13)*
                 s23^3) + p1q^2*(-9*s12^3*s13 + 9*s12*s13^3 +
                (-9*s12^2*s13 + 7*s12*s13^2 - 2*s13^3)*s23 +
                (-s12^2 - 14*s12*s13 - 15*s13^2)*s23^2 + (-4*s12 - 16*s13)*
                 s23^3 - 3*s23^4) + p1q*p2q*(36*s12^2*s13^2 + 54*s12*s13^3 +
                18*s13^4 + (s12^3 + 56*s12^2*s13 + 134*s12*s13^2 + 61*s13^3)*
                 s23 + (3*s12^2 + 71*s12*s13 + 57*s13^2)*s23^2 +
                (-s12 + 11*s13)*s23^3 - 3*s23^4)))*
           Log(p3q/(p1q + p2q + p3q)))/(8*p1q*p3q^2*s12^2*s13*s23 +
           p1q^2*p2q*(-8*s12*s13^2*s23 - 8*s12*s13*s23^2) +
           p1q*p2q^2*(-8*s12*s13^2*s23 - 8*s12*s13*s23^2) +
           p3q*(p1q^2*(-8*s12*s13^2*s23 - 8*s12*s13*s23^2) +
             p1q*p2q*((8*s12^2*s13 - 8*s12*s13^2)*s23 - 8*s12*s13*s23^2))) +
         ((p3q^3*(-9*s12^3*s13 - 9*s12^2*s13^2 + (-s12^3 - 10*s12^2*s13)*
               s23 - s12^2*s23^2) + p1q^3*((9*s12^2*s13 + 18*s12*s13^2 +
                9*s13^3)*s23 + (18*s12*s13 + 18*s13^2)*s23^2 + 9*s13*s23^3) +
            p2q^3*(27*s12^2*s13^2 + 45*s12*s13^3 + 18*s13^4 +
              (36*s12^2*s13 + 116*s12*s13^2 + 71*s13^3)*s23 +
              (71*s12*s13 + 88*s13^2)*s23^2 + 35*s13*s23^3) +
            p1q^2*p2q*(9*s12^2*s13^2 - 9*s13^4 + (18*s12^2*s13 +
                25*s12*s13^2 - 11*s13^3)*s23 + (-s12^2 + 13*s12*s13 -
                6*s13^2)*s23^2 + (-4*s12 - 7*s13)*s23^3 - 3*s23^4) +
            p1q*p2q^2*(18*s12^2*s13^2 + 27*s12*s13^3 + 9*s13^4 +
              (26*s12^2*s13 + 78*s12*s13^2 + 43*s13^3)*s23 +
              (-2*s12^2 + 38*s12*s13 + 48*s13^2)*s23^2 + (-5*s12 + 11*s13)*
               s23^3 - 3*s23^4) + p3q^2*(p2q*(-36*s12^3*s13 - 45*s12^2*
                 s13^2 - 9*s12*s13^3 + (-s12^3 - 53*s12^2*s13 - 25*s12*s13^2)*
                 s23 - 15*s12*s13*s23^2 + s12*s23^3) + p1q*(-9*s12^3*s13 -
                9*s12^2*s13^2 + (s12^3 + 12*s12^2*s13 + 20*s12*s13^2)*s23 +
                (5*s12^2 + 24*s12*s13)*s23^2 + 4*s12*s23^3)) +
            p3q*(p2q^2*(-27*s12^3*s13 - 9*s12^2*s13^2 + 36*s12*s13^3 +
                18*s13^4 + (-7*s12^2*s13 + 91*s12*s13^2 + 71*s13^3)*s23 +
                (s12^2 + 56*s12*s13 + 88*s13^2)*s23^2 + (s12 + 35*s13)*
                 s23^3) + p1q^2*(-9*s12^3*s13 + 9*s12*s13^3 +
                (-9*s12^2*s13 + 7*s12*s13^2 - 2*s13^3)*s23 +
                (-s12^2 - 14*s12*s13 - 15*s13^2)*s23^2 + (-4*s12 - 16*s13)*
                 s23^3 - 3*s23^4) + p1q*p2q*(36*s12^2*s13^2 + 54*s12*s13^3 +
                18*s13^4 + (s12^3 + 56*s12^2*s13 + 134*s12*s13^2 + 61*s13^3)*
                 s23 + (3*s12^2 + 71*s12*s13 + 57*s13^2)*s23^2 +
                (-s12 + 11*s13)*s23^3 - 3*s23^4)))*
           Log(s12/(s12 + s13 + s23)))/(8*p1q*p3q^2*s12^2*s13*s23 +
           p1q^2*p2q*(-8*s12*s13^2*s23 - 8*s12*s13*s23^2) +
           p1q*p2q^2*(-8*s12*s13^2*s23 - 8*s12*s13*s23^2) +
           p3q*(p1q^2*(-8*s12*s13^2*s23 - 8*s12*s13*s23^2) +
             p1q*p2q*((8*s12^2*s13 - 8*s12*s13^2)*s23 - 8*s12*s13*s23^2))) +
         ((p3q^2*(s12^3 + s12^2*s13 + s12^2*s23) + p2q^2*(s12*s13^2 + s13^3 +
              (s12*s13 + 2*s13^2)*s23 + s13*s23^2) +
            p1q^2*(-2*s12^2*s13 - 2*s12*s13^2 + (-s12^2 - 3*s12*s13)*s23 +
              s13*s23^2 + s23^3) + p1q*p2q*(-(s12^2*s13) - s12*s13^2 -
              s12*s13*s23 + (s12 + s13)*s23^2 + s23^3) +
            p3q*(p1q*(s12^3 + s12^2*s13 + (-s12^2 - 2*s12*s13)*s23 -
                2*s12*s23^2) + p2q*(-2*s12^2*s13 - 2*s12*s13^2 +
                (-s12^2 - 3*s12*s13)*s23 - s12*s23^2)))*
           Log(s13/(s12 + s13 + s23)))/(8*p1q*p3q*s12^2*s13 +
           p1q^2*(-8*s12*s13^2 - 8*s12*s13*s23) + p1q*p2q*(-8*s12*s13^2 -
             8*s12*s13*s23)) + ((p3q^3*(9*s12^3 + 9*s12^2*s13 +
              9*s12^2*s23) + p1q^2*p2q*(-9*s12^2*s13 + 9*s13^3 +
              (-18*s12^2 - 27*s12*s13 + 9*s13^2)*s23 - 18*s12*s23^2) +
            p1q*p2q^2*(9*s12*s13^2 + 9*s13^3 + (-9*s12^2 - 9*s12*s13 +
                9*s13^2)*s23 - 9*s12*s23^2) + p2q^3*(-9*s12^2*s13 -
              9*s12*s13^2 + (-18*s12^2 - 45*s12*s13 - 18*s13^2)*s23 +
              (-36*s12 - 36*s13)*s23^2 - 18*s23^3) +
            p1q^3*((-9*s12^2 - 18*s12*s13 - 9*s13^2)*s23 + (-18*s12 - 18*s13)*
               s23^2 - 9*s23^3) + p3q^2*(p2q*(18*s12^3 + 9*s12^2*s13 -
                9*s12*s13^2 + (18*s12^2 - 9*s12*s13)*s23) + p1q*(9*s12^3 +
                9*s12^2*s13 + (-9*s12^2 - 18*s12*s13)*s23 - 18*s12*s23^2)) +
            p3q*(p1q*p2q*(-18*s12^2*s13 - 18*s12*s13^2 + (-36*s12^2 -
                  63*s12*s13 - 9*s13^2)*s23 + (-36*s12 - 9*s13)*s23^2) +
              p2q^2*(9*s12^3 - 9*s12^2*s13 - 18*s12*s13^2 +
                (-9*s12^2 - 54*s12*s13 - 18*s13^2)*s23 + (-36*s12 - 36*s13)*
                 s23^2 - 18*s23^3) + p1q^2*(9*s12^3 - 9*s12*s13^2 +
                (9*s12^2 - 9*s12*s13)*s23 + (9*s12 + 9*s13)*s23^2 +
                9*s23^3)))*Log(s23/(s12 + s13 + s23)))/
          (8*p1q*p3q^2*s12^2*s23 + p1q^2*p2q*(-8*s12*s13*s23 - 8*s12*s23^2) +
           p1q*p2q^2*(-8*s12*s13*s23 - 8*s12*s23^2) +
           p3q*(p1q^2*(-8*s12*s13*s23 - 8*s12*s23^2) +
             p1q*p2q*((8*s12^2 - 8*s12*s13)*s23 - 8*s12*s23^2))) +
         ((p2q*(9*s12^2*s13 + 18*s12*s13^2 + 9*s13^3 + (18*s12*s13 +
                18*s13^2)*s23 + 9*s13*s23^2) + p1q*((-s12^2 - 2*s12*s13 -
                s13^2)*s23 + (-2*s12 - 2*s13)*s23^2 - s23^3))*
           Log((s13 + s23)/(s12 + s13 + s23)))/(4*p1q*s12*s13*s23)) +
       Log(s12/(s12 + s13 + s23))*
        ((p3q^2*(99*s12^3*s13 + 99*s12^2*s13^2 + (45*s12^3 + 144*s12^2*s13)*
              s23 + 45*s12^2*s23^2) + p2q^2*(-99*s12^2*s13^2 - 99*s12*s13^3 +
             (-45*s12^2*s13 - 144*s12*s13^2)*s23 - 45*s12*s13*s23^2) +
           p1q*p2q*(99*s12^2*s13^2 - 99*s12*s13^3 + (-41*s12^2*s13 - 63*s12*
                s13^2 + 72*s13^3)*s23 + (-44*s12^2 - 95*s12*s13 + 72*s13^2)*
              s23^2 - 35*s12*s23^3) + p1q^2*((99*s12^2*s13 + 99*s12*s13^2)*
              s23 + (45*s12^2 + 144*s12*s13)*s23^2 + 45*s12*s23^3) +
           p3q*(p2q*(99*s12^3*s13 - 99*s12*s13^3 + (45*s12^3 + 99*s12^2*s13 -
                 144*s12*s13^2)*s23 + (45*s12^2 - 45*s12*s13)*s23^2) +
             p1q*(-99*s12^3*s13 + 99*s12^2*s13^2 + (-45*s12^3 - 140*s12^2*
                  s13 + 81*s12*s13^2 + 72*s13^3)*s23 + (-89*s12^2 -
                 50*s12*s13 + 72*s13^2)*s23^2 - 35*s12*s23^3)))/
          (p1q*p2q*(36*s12*s13^2*s23 + 36*s12*s13*s23^2) +
           p1q*p3q*(36*s12*s13^2*s23 + 36*s12*s13*s23^2)) +
         ((p3q^2*(-4*s12^4 - 4*s12^2*s13^2 + (-9*s12^3 - 4*s12^2*s13 -
                3*s12*s13^2)*s23 + (-9*s12^2 - 3*s12*s13)*s23^2 -
              4*s12*s23^3) + p2q^2*(-4*s12^2*s13^2 - 4*s13^4 +
              (-3*s12^2*s13 - 4*s12*s13^2 - 9*s13^3)*s23 + (-3*s12*s13 -
                9*s13^2)*s23^2 - 4*s13*s23^3) + p1q*p2q*(3*s12^3*s13 -
              5*s12^2*s13^2 + 5*s12*s13^3 - 3*s13^4 + (2*s12^3 +
                3*s12^2*s13 + 6*s12*s13^2 - 3*s13^3)*s23 + (5*s12^2 +
                10*s12*s13 + s13^2)*s23^2 + (7*s12 + 5*s13)*s23^3 +
              4*s23^4) + p1q^2*(4*s12^3*s13 + 4*s12*s13^3 + (3*s12^3 +
                9*s12^2*s13 + 9*s12*s13^2 + 3*s13^3)*s23 + (7*s12^2 +
                14*s12*s13 + 7*s13^2)*s23^2 + (8*s12 + 8*s13)*s23^3 +
              4*s23^4) + p3q*(p1q*(-3*s12^4 + 5*s12^3*s13 - 5*s12^2*s13^2 +
                3*s12*s13^3 + (-3*s12^3 + 6*s12^2*s13 + 3*s12*s13^2 +
                  2*s13^3)*s23 + (s12^2 + 10*s12*s13 + 5*s13^2)*s23^2 +
                (5*s12 + 7*s13)*s23^3 + 4*s23^4) + p2q*(8*s12^3*s13 +
                8*s12*s13^3 + (3*s12^3 + 13*s12^2*s13 + 13*s12*s13^2 +
                  3*s13^3)*s23 + (7*s12^2 + 18*s12*s13 + 7*s13^2)*s23^2 +
                (8*s12 + 8*s13)*s23^3 + 4*s23^4)))*
           Log(s13/(s12 + s13 + s23)))/(p3q^2*(8*s12^3*s13 +
             8*s12^2*s13*s23) + p2q^2*(8*s12*s13^3 + 8*s12*s13^2*s23) +
           p1q*p2q*(-8*s12^2*s13^2 + 8*s12*s13^3 - 8*s12^2*s13*s23 -
             8*s12*s13*s23^2) + p1q^2*(-8*s12^2*s13^2 +
             (-8*s12^2*s13 - 8*s12*s13^2)*s23 - 8*s12*s13*s23^2) +
           p3q*(p1q*(8*s12^3*s13 - 8*s12^2*s13^2 - 8*s12*s13^2*s23 - 8*s12*
                s13*s23^2) + p2q*(-16*s12^2*s13^2 + (-8*s12^2*s13 -
                 8*s12*s13^2)*s23 - 8*s12*s13*s23^2))) +
         ((p3q^4*((243*s12^5*s13 + 657*s12^4*s13^2 + 585*s12^3*s13^3 +
                171*s12^2*s13^4)*s23 + (90*s12^5 + 603*s12^4*s13 +
                783*s12^3*s13^2 + 270*s12^2*s13^3)*s23^2 + (90*s12^4 +
                270*s12^3*s13 + 99*s12^2*s13^2)*s23^3) +
            p2q^4*((-72*s12^2*s13^4 - 144*s12*s13^5 - 72*s13^6)*s23 +
              (171*s12^3*s13^2 + 288*s12^2*s13^3 - 90*s12*s13^4 - 207*s13^5)*
               s23^2 + (90*s12^3*s13 + 369*s12^2*s13^2 + 162*s12*s13^3 -
                198*s13^4)*s23^3 + (90*s12^2*s13 + 108*s12*s13^2 - 63*s13^3)*
               s23^4) + p1q*p2q^3*(324*s12^2*s13^5 + 324*s12*s13^6 +
              (-324*s12^3*s13^3 + 342*s12^2*s13^4 + 342*s12*s13^5)*s23 +
              (873*s12^2*s13^3 + 547*s12*s13^4 - 2*s13^5)*s23^2 +
              (313*s12^3*s13 + 1085*s12^2*s13^2 + 1063*s12*s13^3 + 282*s13^4)*
               s23^3 + (70*s12^3 + 543*s12^2*s13 + 735*s12*s13^2 + 487*s13^3)*
               s23^4 + (70*s12^2 + 120*s12*s13 + 203*s13^2)*s23^5) +
            p1q^4*((324*s12^2*s13^3 + 324*s12*s13^4)*s23^2 +
              (486*s12^2*s13^2 + 801*s12*s13^3 - 9*s13^4)*s23^3 +
              (333*s12^2*s13 + 810*s12*s13^2 - 18*s13^3)*s23^4 +
              (90*s12^2 + 423*s12*s13 - 9*s13^2)*s23^5 + 90*s12*s23^6) +
            p1q^2*p2q^2*(324*s12^2*s13^5 + 324*s12*s13^6 +
              (-486*s12^3*s13^3 + 414*s12^2*s13^4 + 72*s13^6)*s23 +
              (-495*s12^3*s13^2 + 594*s12^2*s13^3 - 2*s12*s13^4 + 223*s13^5)*
               s23^2 + (-110*s12^3*s13 + 68*s12^2*s13^2 + 244*s12*s13^3 +
                527*s13^4)*s23^3 + (-20*s12^3 - 283*s12^2*s13 -
                289*s12*s13^2 + 367*s13^3)*s23^4 + (-90*s12^2 - 443*s12*s13 -
                149*s13^2)*s23^5 + (-70*s12 - 140*s13)*s23^6) +
            p1q^3*p2q*((-324*s12^3*s13^3 - 324*s12^2*s13^4 - 648*s12*s13^5)*
               s23 + (-486*s12^3*s13^2 - 396*s12^2*s13^3 - 963*s12*s13^4 -
                63*s13^5)*s23^2 + (-333*s12^3*s13 - 567*s12^2*s13^2 -
                666*s12*s13^3 - 205*s13^4)*s23^3 + (-90*s12^3 - 403*s12^2*
                 s13 - 430*s12*s13^2 - 444*s13^3)*s23^4 + (-70*s12^2 -
                140*s12*s13 - 442*s13^2)*s23^5 + (20*s12 - 140*s13)*s23^6) +
            p3q^3*(p1q*(-324*s12^5*s13^2 - 324*s12^4*s13^3 +
                (-243*s12^5*s13 - 639*s12^4*s13^2 - 1143*s12^3*s13^3 -
                  675*s12^2*s13^4 - 252*s12*s13^5)*s23 + (-90*s12^5 -
                  1062*s12^4*s13 - 2232*s12^3*s13^2 - 2095*s12^2*s13^3 -
                  511*s12*s13^4)*s23^2 + (-340*s12^4 - 1679*s12^3*s13 -
                  1929*s12^2*s13^2 - 581*s12*s13^3)*s23^3 +
                (-250*s12^3 - 660*s12^2*s13 - 158*s12*s13^2)*s23^4) +
              p2q*((486*s12^5*s13 + 1071*s12^4*s13^2 + 585*s12^3*s13^3 -
                  99*s12^2*s13^4 - 99*s12*s13^5)*s23 + (180*s12^5 +
                  783*s12^4*s13 + 189*s12^3*s13^2 - 639*s12^2*s13^3 -
                  225*s12*s13^4)*s23^2 + (90*s12^4 - 243*s12^3*s13 -
                  882*s12^2*s13^2 - 225*s12*s13^3)*s23^3 +
                (-90*s12^3 - 270*s12^2*s13 - 99*s12*s13^2)*s23^4)) +
            p3q^2*(p2q^2*((243*s12^5*s13 + 171*s12^4*s13^2 - 585*s12^3*
                   s13^3 - 783*s12^2*s13^4 - 342*s12*s13^5 - 72*s13^6)*s23 +
                (90*s12^5 - 243*s12^4*s13 - 1800*s12^3*s13^2 - 1800*s12^2*
                   s13^3 - 540*s12*s13^4 - 207*s13^5)*s23^2 +
                (-90*s12^4 - 1206*s12^3*s13 - 1692*s12^2*s13^2 - 288*s12*
                   s13^3 - 198*s13^4)*s23^3 + (-180*s12^3 - 450*s12^2*s13 -
                  90*s12*s13^2 - 63*s13^3)*s23^4) + p1q*p2q*(972*s12^4*
                 s13^3 + 972*s12^3*s13^4 + (-243*s12^5*s13 + 576*s12^4*
                   s13^2 - 198*s12^3*s13^3 - 846*s12^2*s13^4 - 873*s12*
                   s13^5 - 72*s13^6)*s23 + (-90*s12^5 - 1215*s12^4*s13 -
                  2529*s12^3*s13^2 - 2354*s12^2*s13^3 - 844*s12*s13^4 -
                  218*s13^5)*s23^2 + (-410*s12^4 - 1686*s12^3*s13 -
                  1567*s12^2*s13^2 - 18*s12*s13^3 - 78*s13^4)*s23^3 +
                (-160*s12^3 + 186*s12^2*s13 + 752*s12*s13^2 + 127*s13^3)*
                 s23^4 + (160*s12^2 + 390*s12*s13 + 59*s13^2)*s23^5) +
              p1q^2*(324*s12^4*s13^3 + 324*s12^3*s13^4 + (1134*s12^4*s13^2 +
                  882*s12^3*s13^3 + 648*s12^2*s13^4 - 72*s12*s13^5)*s23 +
                (819*s12^4*s13 + 1998*s12^3*s13^2 + 1692*s12^2*s13^3 +
                  889*s12*s13^4 + 70*s13^5)*s23^2 + (270*s12^4 + 1798*s12^3*
                   s13 + 2444*s12^2*s13^2 + 1745*s12*s13^3 + 282*s13^4)*
                 s23^3 + (500*s12^3 + 1549*s12^2*s13 + 1559*s12*s13^2 +
                  271*s13^3)*s23^4 + (230*s12^2 + 530*s12*s13 + 59*s13^2)*
                 s23^5)) + p3q*(p2q^3*((-243*s12^4*s13^2 - 585*s12^3*s13^3 -
                  585*s12^2*s13^4 - 387*s12*s13^5 - 144*s13^6)*s23 +
                (-423*s12^4*s13 - 1035*s12^3*s13^2 - 603*s12^2*s13^3 -
                  405*s12*s13^4 - 414*s13^5)*s23^2 + (-90*s12^4 - 603*s12^3*
                   s13 - 342*s12^2*s13^2 + 99*s12*s13^3 - 396*s13^4)*s23^3 +
                (-90*s12^3 - 90*s12^2*s13 + 117*s12*s13^2 - 126*s13^3)*
                 s23^4) + p1q*p2q^2*(-972*s12^3*s13^4 - 972*s12^2*s13^5 +
                (243*s12^4*s13^2 - 2295*s12^3*s13^3 - 2745*s12^2*s13^4 -
                  1251*s12*s13^5 - 72*s13^6)*s23 + (-153*s12^4*s13 -
                  1269*s12^3*s13^2 - 1330*s12^2*s13^3 - 758*s12*s13^4 -
                  220*s13^5)*s23^2 + (-70*s12^4 + 306*s12^3*s13 + 1123*s12^2*
                   s13^2 + 1302*s12*s13^3 + 204*s13^4)*s23^3 +
                (160*s12^3 + 1389*s12^2*s13 + 1645*s12*s13^2 + 614*s13^3)*
                 s23^4 + (230*s12^2 + 510*s12*s13 + 262*s13^2)*s23^5) +
              p1q^3*((-648*s12^3*s13^3 - 324*s12^2*s13^4 - 324*s12*s13^5)*
                 s23 + (-1296*s12^3*s13^2 - 1359*s12^2*s13^3 - 477*s12*
                   s13^4 - 72*s13^5)*s23^2 + (-909*s12^3*s13 - 2169*s12^2*
                   s13^2 - 711*s12*s13^3 - 214*s13^4)*s23^3 +
                (-270*s12^3 - 1402*s12^2*s13 - 880*s12*s13^2 - 435*s13^3)*
                 s23^4 + (-340*s12^2 - 473*s12*s13 - 433*s13^2)*s23^5 +
                (-70*s12 - 140*s13)*s23^6) + p1q^2*p2q*(-648*s12^3*s13^4 -
                648*s12^2*s13^5 + (486*s12^4*s13^2 - 1548*s12^3*s13^3 -
                  882*s12^2*s13^4 - 720*s12*s13^5 + 72*s13^6)*s23 +
                (576*s12^4*s13 - 189*s12^3*s13^2 + 594*s12^2*s13^3 +
                  635*s12*s13^4 + 284*s13^5)*s23^2 + (180*s12^4 + 1112*s12^3*
                   s13 + 1648*s12^2*s13^2 + 2241*s12*s13^3 + 791*s13^4)*
                 s23^3 + (300*s12^3 + 1023*s12^2*s13 + 1540*s12*s13^2 +
                  629*s13^3)*s23^4 + (50*s12^2 + 177*s12*s13 - 90*s13^2)*
                 s23^5 + (-70*s12 - 140*s13)*s23^6)))*
           Log(s23/(s12 + s13 + s23)))/(p1q*p3q^3*(72*s12^3*s13^2 +
             72*s12^2*s13^3)*s23^2 + p1q*p2q^3*((-72*s12^2*s13^3 - 72*s12*
                s13^4)*s23^2 + (-72*s12^2*s13^2 - 72*s12*s13^3)*s23^3) +
           p1q^2*p2q^2*((-72*s12^2*s13^3 - 72*s12*s13^4)*s23^2 -
             72*s12^2*s13^2*s23^3 + 72*s12*s13^2*s23^4) +
           p1q^3*p2q*(72*s12*s13^3*s23^3 + 72*s12*s13^2*s23^4) +
           p3q^2*(p1q^2*((-72*s12^2*s13^3 - 72*s12*s13^4)*s23^2 +
               (-144*s12^2*s13^2 - 72*s12*s13^3)*s23^3) +
             p1q*p2q*((144*s12^3*s13^2 + 72*s12^2*s13^3 - 72*s12*s13^4)*
                s23^2 + (-72*s12^2*s13^2 - 72*s12*s13^3)*s23^3)) +
           p3q*(p1q*p2q^2*((72*s12^3*s13^2 - 72*s12^2*s13^3 - 144*s12*s13^4)*
                s23^2 + (-144*s12^2*s13^2 - 144*s12*s13^3)*s23^3) +
             p1q^3*(72*s12*s13^3*s23^3 + 72*s12*s13^2*s23^4) +
             p1q^2*p2q*((-144*s12^2*s13^3 - 144*s12*s13^4)*s23^2 +
               (-216*s12^2*s13^2 - 72*s12*s13^3)*s23^3 + 72*s12*s13^2*
                s23^4))) + ((p3q^2*(-243*s12^3*s13 - 333*s12^2*s13^2 -
              90*s12*s13^3 + (-90*s12^3 - 513*s12^2*s13 - 270*s12*s13^2)*
               s23 + (-90*s12^2 - 180*s12*s13)*s23^2) +
            p2q^2*(81*s12^2*s13^2 + 9*s12*s13^3 - 72*s13^4 + (90*s12^2*s13 +
                189*s12*s13^2 - 54*s13^3)*s23 + (90*s12*s13 + 18*s13^2)*s23^
                2) + p1q^2*((-243*s12^2*s13 - 153*s12*s13^2 + 90*s13^3)*s23 +
              (-90*s12^2 - 333*s12*s13 + 90*s13^2)*s23^2 - 90*s12*s23^3) +
            p1q*p2q*(-243*s12^2*s13^2 + 333*s12*s13^3 - 90*s13^4 +
              (171*s12^2*s13 + 216*s12*s13^2 - 2*s13^3)*s23 +
              (70*s12^2 + 439*s12*s13 + 86*s13^2)*s23^2 + (70*s12 + 158*s13)*
               s23^3) + p3q*(p2q*(-243*s12^3*s13 - 252*s12^2*s13^2 -
                81*s12*s13^3 - 72*s13^4 + (-90*s12^3 - 423*s12^2*s13 -
                  81*s12*s13^2 - 54*s13^3)*s23 + (-90*s12^2 - 90*s12*s13 +
                  18*s13^2)*s23^2) + p1q*(243*s12^3*s13 - 333*s12^2*s13^2 +
                90*s12*s13^3 + (90*s12^3 + 414*s12^2*s13 - 207*s12*s13^2 +
                  88*s13^3)*s23 + (160*s12^2 + 349*s12*s13 + 86*s13^2)*
                 s23^2 + (70*s12 + 158*s13)*s23^3)))*
           Log((s13 + s23)/(s12 + s13 + s23)))/(72*p1q*p2q*s12*s13^2*s23 +
           72*p1q*p3q*s12*s13^2*s23)) +
       ((p2q*(-9*s12^2*s13 - 18*s12*s13^2 - 9*s13^3 +
            (-18*s12*s13 - 18*s13^2)*s23 - 9*s13*s23^2) +
          p1q*((-s12^2 - 2*s12*s13 - s13^2)*s23 + (-2*s12 - 2*s13)*s23^2 -
            s23^3))*PolyLog(2, p1q/(p1q + p2q)))/(4*p1q*s12*s13*s23) +
       ((p3q*(-9*s12^3 - 18*s12^2*s13 - 9*s12*s13^2 +
            (-18*s12^2 - 18*s12*s13)*s23 - 9*s12*s23^2) +
          p1q*((-s12^2 - 2*s12*s13 - s13^2)*s23 + (-2*s12 - 2*s13)*s23^2 -
            s23^3))*PolyLog(2, p1q/(p1q + p3q)))/(4*p1q*s12*s13*s23) +
       ((p3q*(-9*s12^3 - 18*s12^2*s13 - 9*s12*s13^2 +
            (-18*s12^2 - 18*s12*s13)*s23 - 9*s12*s23^2) +
          p2q*(9*s12^2*s13 + 18*s12*s13^2 + 9*s13^3 + (18*s12*s13 + 18*s13^2)*
             s23 + 9*s13*s23^2))*PolyLog(2, p2q/(p2q + p3q)))/
        (4*p1q*s12*s13*s23) +
       ((p3q^2*(-243*s12^3*s13 - 333*s12^2*s13^2 - 90*s12*s13^3 +
            (-90*s12^3 - 513*s12^2*s13 - 270*s12*s13^2)*s23 +
            (-90*s12^2 - 180*s12*s13)*s23^2) + p2q^2*(81*s12^2*s13^2 +
            9*s12*s13^3 - 72*s13^4 + (90*s12^2*s13 + 189*s12*s13^2 -
              54*s13^3)*s23 + (90*s12*s13 + 18*s13^2)*s23^2) +
          p1q^2*((-243*s12^2*s13 - 153*s12*s13^2 + 90*s13^3)*s23 +
            (-90*s12^2 - 333*s12*s13 + 90*s13^2)*s23^2 - 90*s12*s23^3) +
          p1q*p2q*(-243*s12^2*s13^2 + 333*s12*s13^3 - 90*s13^4 +
            (171*s12^2*s13 + 216*s12*s13^2 - 2*s13^3)*s23 +
            (70*s12^2 + 439*s12*s13 + 86*s13^2)*s23^2 + (70*s12 + 158*s13)*
             s23^3) + p3q*(p2q*(-243*s12^3*s13 - 252*s12^2*s13^2 -
              81*s12*s13^3 - 72*s13^4 + (-90*s12^3 - 423*s12^2*s13 -
                81*s12*s13^2 - 54*s13^3)*s23 + (-90*s12^2 - 90*s12*s13 +
                18*s13^2)*s23^2) + p1q*(243*s12^3*s13 - 333*s12^2*s13^2 +
              90*s12*s13^3 + (90*s12^3 + 414*s12^2*s13 - 207*s12*s13^2 +
                88*s13^3)*s23 + (160*s12^2 + 349*s12*s13 + 86*s13^2)*s23^2 +
              (70*s12 + 158*s13)*s23^3)))*PolyLog(2, s12/(s12 + s13 + s23)))/
        (72*p1q*p2q*s12*s13^2*s23 + 72*p1q*p3q*s12*s13^2*s23) +
       ((p3q^2*(-72*s12^4 + 9*s12^3*s13 + 81*s12^2*s13^2 +
            (-54*s12^3 + 189*s12^2*s13 + 90*s12*s13^2)*s23 +
            (18*s12^2 + 90*s12*s13)*s23^2) + p2q^2*(-90*s12^3*s13 -
            333*s12^2*s13^2 - 243*s12*s13^3 + (-270*s12^2*s13 -
              513*s12*s13^2 - 90*s13^3)*s23 + (-180*s12*s13 - 90*s13^2)*
             s23^2) + p1q^2*((90*s12^3 - 153*s12^2*s13 - 243*s12*s13^2)*s23 +
            (90*s12^2 - 333*s12*s13 - 90*s13^2)*s23^2 - 90*s13*s23^3) +
          p1q*p2q*(90*s12^3*s13 - 333*s12^2*s13^2 + 243*s12*s13^3 +
            (88*s12^3 - 207*s12^2*s13 + 414*s12*s13^2 + 90*s13^3)*s23 +
            (86*s12^2 + 349*s12*s13 + 160*s13^2)*s23^2 + (158*s12 + 70*s13)*
             s23^3) + p3q*(p2q*(-72*s12^4 - 81*s12^3*s13 - 252*s12^2*s13^2 -
              243*s12*s13^3 + (-54*s12^3 - 81*s12^2*s13 - 423*s12*s13^2 -
                90*s13^3)*s23 + (18*s12^2 - 90*s12*s13 - 90*s13^2)*s23^2) +
            p1q*(-90*s12^4 + 333*s12^3*s13 - 243*s12^2*s13^2 +
              (-2*s12^3 + 216*s12^2*s13 + 171*s12*s13^2)*s23 +
              (86*s12^2 + 439*s12*s13 + 70*s13^2)*s23^2 + (158*s12 + 70*s13)*
               s23^3)))*PolyLog(2, s13/(s12 + s13 + s23)))/
        (72*p1q*p2q*s12^2*s13*s23 + 72*p1q*p3q*s12^2*s13*s23) +
       ((p3q^2*(-315*s12^4*s13 - 324*s12^3*s13^2 - 9*s12^2*s13^3 +
            (-90*s12^4 - 567*s12^3*s13 - 81*s12^2*s13^2 + 90*s12*s13^3)*s23 +
            (-90*s12^3 - 162*s12^2*s13 + 90*s12*s13^2)*s23^2) +
          p2q^2*(-9*s12^3*s13^2 - 324*s12^2*s13^3 - 315*s12*s13^4 +
            (90*s12^3*s13 - 81*s12^2*s13^2 - 567*s12*s13^3 - 90*s13^4)*s23 +
            (90*s12^2*s13 - 162*s12*s13^2 - 90*s13^3)*s23^2) +
          p1q^2*((-153*s12^3*s13 - 306*s12^2*s13^2 - 153*s12*s13^3)*s23 +
            (-90*s12^3 - 243*s12^2*s13 - 243*s12*s13^2 - 90*s13^3)*s23^2 +
            (-90*s12^2 - 90*s13^2)*s23^3) + p1q*p2q*(-153*s12^3*s13^2 +
            153*s12*s13^4 + (223*s12^3*s13 - 63*s12^2*s13^2 + 376*s12*s13^3 +
              90*s13^4)*s23 + (70*s12^3 + 453*s12^2*s13 + 363*s12*s13^2 +
              160*s13^3)*s23^2 + (70*s12^2 + 280*s12*s13 + 70*s13^2)*s23^3) +
          p3q*(p2q*(-315*s12^4*s13 - 333*s12^3*s13^2 - 333*s12^2*s13^3 -
              315*s12*s13^4 + (-90*s12^4 - 477*s12^3*s13 - 162*s12^2*s13^2 -
                477*s12*s13^3 - 90*s13^4)*s23 + (-90*s12^3 - 72*s12^2*s13 -
                72*s12*s13^2 - 90*s13^3)*s23^2) + p1q*(153*s12^4*s13 -
              153*s12^2*s13^3 + (90*s12^4 + 376*s12^3*s13 - 63*s12^2*s13^2 +
                223*s12*s13^3)*s23 + (160*s12^3 + 363*s12^2*s13 +
                453*s12*s13^2 + 70*s13^3)*s23^2 + (70*s12^2 + 280*s12*s13 +
                70*s13^2)*s23^3)))*PolyLog(2, s23/(s12 + s13 + s23)))/
        (72*p1q*p2q*s12^2*s13^2*s23 + 72*p1q*p3q*s12^2*s13^2*s23) +
       ((p3q*(9*s12^3 + 18*s12^2*s13 + 9*s12*s13^2 + (18*s12^2 + 18*s12*s13)*
             s23 + 9*s12*s23^2) + p2q*(9*s12^2*s13 + 18*s12*s13^2 + 9*s13^3 +
            (18*s12*s13 + 18*s13^2)*s23 + 9*s13*s23^2))*
         PolyLog(2, -((-(p2q*s12) - p3q*s12 - p2q*s13 - p3q*s13 + p1q*s23)/
            ((p2q + p3q)*(s12 + s13)))))/(4*p1q*s12*s13*s23) +
       ((p3q*(-9*s12^3 - 18*s12^2*s13 - 9*s12*s13^2 +
            (-18*s12^2 - 18*s12*s13)*s23 - 9*s12*s23^2) +
          p2q*(-9*s12^2*s13 - 18*s12*s13^2 - 9*s13^3 +
            (-18*s12*s13 - 18*s13^2)*s23 - 9*s13*s23^2))*
         PolyLog(2, -((-(p2q*s12) - p3q*s12 - p2q*s13 - p3q*s13 + p1q*s23)/
            ((p1q + p2q + p3q)*(s12 + s13)))))/(4*p1q*s12*s13*s23) +
       ((p2q*(9*s12^2*s13 + 18*s12*s13^2 + 9*s13^3 + (18*s12*s13 + 18*s13^2)*
             s23 + 9*s13*s23^2) + p1q*((-s12^2 - 2*s12*s13 - s13^2)*s23 +
            (-2*s12 - 2*s13)*s23^2 - s23^3))*PolyLog(2,
          -((p3q*s12 - p1q*s13 - p2q*s13 - p1q*s23 - p2q*s23)/
            ((p1q + p2q)*(s13 + s23)))))/(4*p1q*s12*s13*s23) +
       ((p2q*(-9*s12^2*s13 - 18*s12*s13^2 - 9*s13^3 +
            (-18*s12*s13 - 18*s13^2)*s23 - 9*s13*s23^2) +
          p1q*((s12^2 + 2*s12*s13 + s13^2)*s23 + (2*s12 + 2*s13)*s23^2 +
            s23^3))*PolyLog(2, -((p3q*s12 - p1q*s13 - p2q*s13 - p1q*s23 -
             p2q*s23)/((p1q + p2q + p3q)*(s13 + s23)))))/
        (4*p1q*s12*s13*s23) +
       ((p3q*(9*s12^3 + 18*s12^2*s13 + 9*s12*s13^2 + (18*s12^2 + 18*s12*s13)*
             s23 + 9*s12*s23^2) + p1q*((-s12^2 - 2*s12*s13 - s13^2)*s23 +
            (-2*s12 - 2*s13)*s23^2 - s23^3))*PolyLog(2,
          -((-(p1q*s12) - p3q*s12 + p2q*s13 - p1q*s23 - p3q*s23)/
            ((p1q + p3q)*(s12 + s23)))))/(4*p1q*s12*s13*s23) +
       ((p3q*(-9*s12^3 - 18*s12^2*s13 - 9*s12*s13^2 +
            (-18*s12^2 - 18*s12*s13)*s23 - 9*s12*s23^2) +
          p1q*((s12^2 + 2*s12*s13 + s13^2)*s23 + (2*s12 + 2*s13)*s23^2 +
            s23^3))*PolyLog(2, -((-(p1q*s12) - p3q*s12 + p2q*s13 - p1q*s23 -
             p3q*s23)/((p1q + p2q + p3q)*(s12 + s23)))))/
        (4*p1q*s12*s13*s23)) + p1.E0conj*p2.E0*
      ((p2q^2*(-6336*s12^4*s13^2 - 12672*s12^3*s13^3 - 6336*s12^2*s13^4 +
           (-6381*s12^4*s13 - 28647*s12^3*s13^2 - 31725*s12^2*s13^3 -
             9369*s12*s13^4 + 90*s13^5)*s23 + (45*s12^4 - 15885*s12^3*s13 -
             38286*s12^2*s13^2 - 25479*s12*s13^3 - 3123*s13^4)*s23^2 +
           (90*s12^3 - 12762*s12^2*s13 - 19368*s12*s13^2 - 6516*s13^3)*
            s23^3 + (45*s12^2 - 3258*s12*s13 - 3303*s13^2)*s23^4) +
         p1q^2*((45*s12^4*s13 + 45*s12^3*s13^2 - 45*s12^2*s13^3 -
             45*s12*s13^4)*s23 + (135*s12^4 + 315*s12^3*s13 +
             90*s12^2*s13^2 - 135*s12*s13^3 - 45*s13^4)*s23^2 +
           (270*s12^3 + 360*s12^2*s13 - 90*s13^3)*s23^3 +
           (135*s12^2 + 90*s12*s13 - 45*s13^2)*s23^4) +
         p3q^2*((45*s12^4*s13 + 45*s12^3*s13^2 - 45*s12^2*s13^3 -
             45*s12*s13^4)*s23 + (135*s12^4 + 315*s12^3*s13 +
             90*s12^2*s13^2 - 135*s12*s13^3 - 45*s13^4)*s23^2 +
           (270*s12^3 + 360*s12^2*s13 - 90*s13^3)*s23^3 +
           (135*s12^2 + 90*s12*s13 - 45*s13^2)*s23^4) +
         p1q*p2q*((504*s12^4*s13 + 2196*s12^3*s13^2 + 2556*s12^2*s13^3 +
             1080*s12*s13^4)*s23 + (334*s12^4 + 3156*s12^3*s13 +
             6592*s12^2*s13^2 + 4742*s12*s13^3 + 1080*s13^4)*s23^2 +
           (710*s12^3 + 4444*s12^2*s13 + 5972*s12*s13^2 + 2346*s13^3)*s23^3 +
           (498*s12^2 + 2182*s12*s13 + 1576*s13^2)*s23^4 +
           (122*s12 + 230*s13)*s23^5) +
         p3q*(p2q*(-6336*s12^4*s13^2 - 12672*s12^3*s13^3 - 6336*s12^2*s13^4 +
             (90*s12^5 - 7650*s12^4*s13 - 30006*s12^3*s13^2 - 30366*s12^2*
                s13^3 - 8100*s12*s13^4)*s23 + (-1224*s12^4 - 19962*s12^3*
                s13 - 38196*s12^2*s13^2 - 21222*s12*s13^3 - 1764*s13^4)*
              s23^2 + (-2718*s12^3 - 15480*s12^2*s13 - 16290*s12*s13^2 - 3528*
                s13^3)*s23^3 + (-1404*s12^2 - 3168*s12*s13 - 1764*s13^2)*
              s23^4) + p1q*((-90*s12^5 + 1908*s12^4*s13 + 3780*s12^3*s13^2 +
               1152*s12^2*s13^3 - 414*s12*s13^4)*s23 +
             (1828*s12^4 + 7908*s12^3*s13 + 6952*s12^2*s13^2 + 350*s12*
                s13^3 - 414*s13^4)*s23^2 + (3968*s12^3 + 7972*s12^2*s13 +
               3254*s12*s13^2 - 642*s13^3)*s23^3 + (2172*s12^2 + 2362*s12*
                s13 + 82*s13^2)*s23^4 + (122*s12 + 230*s13)*s23^5)))/
        (p1q*p2q*((36*s12^3*s13^2 + 36*s12^2*s13^3)*s23^2 +
           (36*s12^3*s13 + 72*s12^2*s13^2 + 36*s12*s13^3)*s23^3 +
           (36*s12^2*s13 + 36*s12*s13^2)*s23^4) +
         p1q*p3q*((36*s12^3*s13^2 + 36*s12^2*s13^3)*s23^2 +
           (36*s12^3*s13 + 72*s12^2*s13^2 + 36*s12*s13^3)*s23^3 +
           (36*s12^2*s13 + 36*s12*s13^2)*s23^4)) +
       (Pi^2*(p3q^5*((-153*s12^6*s13^2 + 153*s12^4*s13^4)*s23 +
            (180*s12^7 - 36*s12^6*s13 - 369*s12^5*s13^2 + 243*s12^4*s13^3 +
              90*s12^3*s13^4)*s23^2 + (180*s12^6 - 216*s12^5*s13 +
              90*s12^3*s13^3)*s23^3) + p2q^5*(2916*s12^4*s13^5 +
            2916*s12^3*s13^6 + (-180*s12^5*s13^3 - 207*s12^4*s13^4 +
              4338*s12^3*s13^5 + 1323*s12^2*s13^6 + 54*s12*s13^7 + 180*s13^8)*
             s23 + (-270*s12^4*s13^3 - 117*s12^3*s13^4 + 1665*s12^2*s13^5 -
              90*s12*s13^6)*s23^2 + (-90*s12^3*s13^3 + 216*s12*s13^5 -
              180*s13^6)*s23^3) + p1q*p2q^4*(2916*s12^4*s13^5 +
            2916*s12^3*s13^6 + (-6489*s12^4*s13^4 - 2142*s12^3*s13^5 +
              1125*s12^2*s13^6 - 126*s12*s13^7 + 180*s13^8)*s23 +
            (200*s12^5*s13^2 + 490*s12^4*s13^3 - 9739*s12^3*s13^4 -
              1495*s12^2*s13^5 - 412*s12*s13^6 - 540*s13^7)*s23^2 +
            (220*s12^4*s13^2 + 636*s12^3*s13^3 - 3972*s12^2*s13^4 +
              376*s12*s13^5 - 200*s13^6)*s23^3 + (20*s12^3*s13^2 +
              326*s12^2*s13^3 - 758*s12*s13^4 + 520*s13^5)*s23^4) +
          p1q^5*((-153*s12^4*s13^2 + 153*s12^2*s13^4)*s23^3 +
            (180*s12^5 - 36*s12^4*s13 - 369*s12^3*s13^2 + 243*s12^2*s13^3 +
              90*s12*s13^4)*s23^4 + (180*s12^4 - 216*s12^3*s13 +
              90*s12*s13^3)*s23^5) + p1q^2*p2q^3*
           ((18*s12^5*s13^3 - 6759*s12^4*s13^4 - 6642*s12^3*s13^5 -
              45*s12^2*s13^6 - 180*s12*s13^7)*s23 +
            (20*s12^5*s13^2 + 4360*s12^4*s13^3 - 5977*s12^3*s13^4 -
              2539*s12^2*s13^5 + 128*s12*s13^6 - 540*s13^7)*s23^2 +
            (140*s12^5*s13 - 499*s12^4*s13^2 + 6758*s12^3*s13^3 -
              1603*s12^2*s13^4 + 732*s12*s13^5 + 520*s13^6)*s23^3 +
            (370*s12^4*s13 - 1081*s12^3*s13^2 + 3311*s12^2*s13^3 -
              808*s12*s13^4 + 560*s13^5)*s23^4 + (230*s12^3*s13 -
              652*s12^2*s13^2 + 868*s12*s13^3 - 500*s13^4)*s23^5) +
          p1q^3*p2q^2*((-153*s12^4*s13^4 + 153*s12^2*s13^6)*s23 +
            (-54*s12^5*s13^2 + 4482*s12^4*s13^3 + 4095*s12^3*s13^4 +
              315*s12^2*s13^5 + 450*s12*s13^6)*s23^2 +
            (-40*s12^5*s13 - 1025*s12^4*s13^2 + 6338*s12^3*s13^3 +
              1667*s12^2*s13^4 + 212*s12*s13^5 + 540*s13^6)*s23^3 +
            (-160*s12^5 + 356*s12^4*s13 - 1705*s12^3*s13^2 + 2417*s12^2*s13^
                3 - 444*s12*s13^4 - 140*s13^5)*s23^4 +
            (-320*s12^4 + 722*s12^3*s13 - 1330*s12^2*s13^2 + 848*s12*s13^3 -
              520*s13^4)*s23^5 + (-160*s12^3 + 326*s12^2*s13 -
              326*s12*s13^2 + 160*s13^3)*s23^6) + p1q^4*p2q*
           ((306*s12^4*s13^3 - 306*s12^2*s13^5)*s23^2 +
            (-180*s12^5*s13 - 675*s12^4*s13^2 - 36*s12^3*s13^3 -
              513*s12^2*s13^4 - 360*s12*s13^5)*s23^3 +
            (20*s12^5 - 50*s12^4*s13 - 1027*s12^3*s13^2 - 253*s12^2*s13^3 -
              304*s12*s13^4 - 180*s13^5)*s23^4 +
            (-140*s12^4 + 276*s12^3*s13 - 642*s12^2*s13^2 + 70*s12*s13^3 -
              20*s13^4)*s23^5 + (-160*s12^3 + 326*s12^2*s13 - 326*s12*s13^2 +
              160*s13^3)*s23^6) + p3q^4*(p2q*(2916*s12^6*s13^3 +
              2916*s12^5*s13^4 + (180*s12^8 + 54*s12^7*s13 + 63*s12^6*s13^2 +
                4644*s12^5*s13^3 + 1053*s12^4*s13^4 - 486*s12^3*s13^5)*s23 +
              (540*s12^7 - 648*s12^6*s13 - 261*s12^5*s13^2 + 2367*s12^4*
                 s13^3 - 450*s12^3*s13^4 - 360*s12^2*s13^5)*s23^2 +
              (360*s12^6 - 882*s12^5*s13 + 432*s12^4*s13^2 + 396*s12^3*
                 s13^3 - 360*s12^2*s13^4)*s23^3) +
            p1q*((-180*s12^8 + 126*s12^7*s13 - 1449*s12^6*s13^2 -
                1422*s12^5*s13^3 + 333*s12^4*s13^4)*s23 + (20*s12^7 +
                490*s12^6*s13 - 2467*s12^5*s13^2 - 559*s12^4*s13^3 -
                196*s12^3*s13^4)*s23^2 + (-320*s12^6 + 222*s12^5*s13 -
                264*s12^4*s13^2 - 542*s12^3*s13^3 - 20*s12^2*s13^4)*s23^3 +
              (-520*s12^5 + 758*s12^4*s13 - 326*s12^3*s13^2 - 20*s12^2*s13^3)*
               s23^4)) + p3q^3*(p2q^2*(5832*s12^6*s13^3 - 5832*s12^4*s13^5 +
              (180*s12^8 - 486*s12^7*s13 - 99*s12^6*s13^2 + 8550*s12^5*
                 s13^3 - 6606*s12^4*s13^4 - 2232*s12^3*s13^5 + 693*s12^2*
                 s13^6)*s23 + (360*s12^7 - 1602*s12^6*s13 + 675*s12^5*s13^2 +
                3681*s12^4*s13^3 - 3771*s12^3*s13^4 - 9*s12^2*s13^5 +
                450*s12*s13^6)*s23^2 + (180*s12^6 - 1116*s12^5*s13 +
                1224*s12^4*s13^2 + 306*s12^3*s13^3 - 1152*s12^2*s13^4 +
                450*s12*s13^5)*s23^3) + p1q*p2q*(2916*s12^6*s13^3 +
              2916*s12^5*s13^4 + (720*s12^7*s13 - 2106*s12^6*s13^2 -
                990*s12^5*s13^3 - 2430*s12^4*s13^4 - 1350*s12^3*s13^5)*s23 +
              (-320*s12^7 + 472*s12^6*s13 - 5104*s12^5*s13^2 - 3474*s12^4*
                 s13^3 - 1920*s12^3*s13^4 - 526*s12^2*s13^5)*s23^2 +
              (-1360*s12^6 + 688*s12^5*s13 - 1566*s12^4*s13^2 - 736*s12^3*
                 s13^3 - 486*s12^2*s13^4 - 140*s12*s13^5)*s23^3 +
              (-1040*s12^5 + 1656*s12^4*s13 - 872*s12^3*s13^2 + 180*s12^2*
                 s13^3 - 140*s12*s13^4)*s23^4) +
            p1q^2*((-180*s12^8 + 126*s12^7*s13 - 1449*s12^6*s13^2 -
                1422*s12^5*s13^3 + 333*s12^4*s13^4)*s23 + (380*s12^7 +
                238*s12^6*s13 - 55*s12^5*s13^2 + 1763*s12^4*s13^3 -
                898*s12^3*s13^4)*s23^2 + (-830*s12^5*s13 + 3851*s12^4*s13^2 +
                360*s12^3*s13^3 + 93*s12^2*s13^4)*s23^3 + (-60*s12^5 -
                10*s12^4*s13 + 949*s12^3*s13^2 + 515*s12^2*s13^3 -
                230*s12*s13^4)*s23^4 + (500*s12^4 - 868*s12^3*s13 +
                652*s12^2*s13^2 - 230*s12*s13^3)*s23^5)) +
          p3q^2*(p2q^3*(2916*s12^6*s13^3 - 8748*s12^5*s13^4 -
              8748*s12^4*s13^5 + 2916*s12^3*s13^6 + (-540*s12^7*s13 +
                225*s12^6*s13^2 + 4374*s12^5*s13^3 - 15966*s12^4*s13^4 -
                54*s12^3*s13^5 + 1485*s12^2*s13^6 - 540*s12*s13^7)*s23 +
              (-990*s12^6*s13 + 1467*s12^5*s13^2 + 1539*s12^4*s13^3 -
                6525*s12^3*s13^4 + 1917*s12^2*s13^5 + 396*s12*s13^6 -
                180*s13^7)*s23^2 + (-450*s12^5*s13 + 1152*s12^4*s13^2 -
                306*s12^3*s13^3 - 1224*s12^2*s13^4 + 1116*s12*s13^5 -
                180*s13^6)*s23^3) + p1q*p2q^2*(2916*s12^6*s13^3 -
              2916*s12^5*s13^4 - 5832*s12^4*s13^5 + (-2205*s12^6*s13^2 -
                5436*s12^5*s13^3 - 22680*s12^4*s13^4 - 9144*s12^3*s13^5 +
                1557*s12^2*s13^6)*s23 + (-520*s12^7 - 112*s12^6*s13 -
                3741*s12^5*s13^2 - 10541*s12^4*s13^3 - 16951*s12^3*s13^4 -
                1413*s12^2*s13^5 + 830*s12*s13^6)*s23^2 + (-1040*s12^6 +
                926*s12^5*s13 - 1652*s12^4*s13^2 - 2450*s12^3*s13^3 -
                4092*s12^2*s13^4 + 312*s12*s13^5 + 520*s13^6)*s23^3 +
              (-520*s12^5 + 1038*s12^4*s13 - 746*s12^3*s13^2 + 746*s12^2*
                 s13^3 - 1038*s12*s13^4 + 520*s13^5)*s23^4) +
            p1q^2*p2q*((540*s12^7*s13 - 1341*s12^6*s13^2 - 4878*s12^5*s13^3 -
                4815*s12^4*s13^4 - 1818*s12^3*s13^5)*s23 + (20*s12^7 -
                90*s12^6*s13 - 891*s12^5*s13^2 + 2629*s12^4*s13^3 +
                1192*s12^3*s13^4 - 976*s12^2*s13^5)*s23^2 + (-40*s12^6 -
                1030*s12^5*s13 + 3167*s12^4*s13^2 + 8290*s12^3*s13^3 +
                1481*s12^2*s13^4)*s23^3 + (940*s12^5 - 826*s12^4*s13 +
                993*s12^3*s13^2 + 3517*s12^2*s13^3 - 92*s12*s13^4 -
                500*s13^5)*s23^4 + (1000*s12^4 - 1506*s12^3*s13 +
                652*s12^2*s13^2 + 408*s12*s13^3 - 500*s13^4)*s23^5) +
            p1q^3*((-153*s12^6*s13^2 + 153*s12^4*s13^4)*s23 +
              (540*s12^7 - 288*s12^6*s13 + 2349*s12^5*s13^2 + 2565*s12^4*
                 s13^3 - 918*s12^3*s13^4)*s23^2 + (-40*s12^6 - 1070*s12^5*
                 s13 + 3737*s12^4*s13^2 - 394*s12^3*s13^3 + 455*s12^2*s13^4)*
               s23^3 + (-60*s12^5 + 190*s12^4*s13 - 589*s12^3*s13^2 +
                255*s12^2*s13^3 - 210*s12*s13^4)*s23^4 + (360*s12^4 -
                502*s12^3*s13 + 10*s12^2*s13^2 - 376*s12*s13^3 + 160*s13^4)*
               s23^5 + (-160*s12^3 + 326*s12^2*s13 - 326*s12*s13^2 +
                160*s13^3)*s23^6)) + p3q*(p2q^4*(-5832*s12^5*s13^4 +
              5832*s12^3*s13^6 + (540*s12^6*s13^2 + 288*s12^5*s13^3 -
                8667*s12^4*s13^4 + 6030*s12^3*s13^5 + 2115*s12^2*s13^6 -
                486*s12*s13^7 + 180*s13^8)*s23 + (900*s12^5*s13^2 -
                288*s12^4*s13^3 - 3411*s12^3*s13^4 + 3231*s12^2*s13^5 -
                144*s12*s13^6 - 180*s13^7)*s23^2 + (360*s12^4*s13^2 -
                396*s12^3*s13^3 - 432*s12^2*s13^4 + 882*s12*s13^5 -
                360*s13^6)*s23^3) + p1q*p2q^3*(-5832*s12^5*s13^4 -
              2916*s12^4*s13^5 + 2916*s12^3*s13^6 + (-3510*s12^5*s13^3 -
                25434*s12^4*s13^4 - 10998*s12^3*s13^5 + 1458*s12^2*s13^6 -
                720*s12*s13^7)*s23 + (320*s12^6*s13 + 554*s12^5*s13^2 -
                5264*s12^4*s13^3 - 24894*s12^3*s13^4 - 3192*s12^2*s13^5 +
                4*s12*s13^6 - 720*s13^7)*s23^2 + (460*s12^5*s13 +
                194*s12^4*s13^2 - 1296*s12^3*s13^3 - 7598*s12^2*s13^4 +
                828*s12*s13^5 + 320*s13^6)*s23^3 + (140*s12^4*s13 -
                180*s12^3*s13^2 + 872*s12^2*s13^3 - 1656*s12*s13^4 +
                1040*s13^5)*s23^4) + p1q^2*p2q^2*((-1026*s12^6*s13^2 -
                4986*s12^5*s13^3 - 11655*s12^4*s13^4 - 6678*s12^3*s13^5 +
                1017*s12^2*s13^6)*s23 + (-40*s12^6*s13 - 870*s12^5*s13^2 +
                3750*s12^4*s13^3 - 3815*s12^3*s13^4 - 1787*s12^2*s13^5 +
                830*s12*s13^6)*s23^2 + (500*s12^6 - 78*s12^5*s13 +
                5*s12^4*s13^2 + 13320*s12^3*s13^3 + 649*s12^2*s13^4 +
                714*s12*s13^5 + 1060*s13^6)*s23^3 + (1000*s12^5 -
                446*s12^4*s13 - 713*s12^3*s13^2 + 6313*s12^2*s13^3 -
                670*s12*s13^4 + 60*s13^5)*s23^4 + (500*s12^4 - 408*s12^3*
                 s13 - 652*s12^2*s13^2 + 1506*s12*s13^3 - 1000*s13^4)*s23^
                5) + p1q^4*((306*s12^5*s13^2 - 306*s12^3*s13^4)*s23^2 +
              (-540*s12^6 + 198*s12^5*s13 - 531*s12^4*s13^2 - 1386*s12^3*
                 s13^3 + 495*s12^2*s13^4)*s23^3 + (-340*s12^5 + 922*s12^4*
                 s13 - 2233*s12^3*s13^2 - 37*s12^2*s13^3 + 110*s12*s13^4)*s23^
                4 + (40*s12^4 + 150*s12^3*s13 - 642*s12^2*s13^2 -
                56*s12*s13^3 + 160*s13^4)*s23^5 + (-160*s12^3 + 326*s12^2*
                 s13 - 326*s12*s13^2 + 160*s13^3)*s23^6) +
            p1q^3*p2q*((306*s12^5*s13^3 - 306*s12^3*s13^5)*s23 +
              (-360*s12^6*s13 + 1296*s12^5*s13^2 + 7722*s12^4*s13^3 +
                4302*s12^3*s13^4 - 1152*s12^2*s13^5)*s23^2 + (-40*s12^6 -
                660*s12^5*s13 + 984*s12^4*s13^2 + 7762*s12^3*s13^3 +
                1042*s12^2*s13^4 - 220*s12*s13^5)*s23^3 + (320*s12^5 -
                12*s12^4*s13 - 1844*s12^3*s13^2 + 1898*s12^2*s13^3 -
                96*s12*s13^4 - 680*s13^5)*s23^4 + (40*s12^4 + 220*s12^3*s13 -
                1320*s12^2*s13^2 + 472*s12*s13^3 - 360*s13^4)*s23^5 +
              (-320*s12^3 + 652*s12^2*s13 - 652*s12*s13^2 + 320*s13^3)*s23^
                6))))/(216*p1q*p3q^4*s12^5*s13^3*s23^2 +
         216*p1q*p2q^4*s12^3*s13^5*s23^2 + 216*p1q^4*p2q*s12^3*s13^3*s23^4 +
         p1q^2*p2q^3*(216*s12^3*s13^5*s23^2 - 432*s12^3*s13^4*s23^3) +
         p1q^3*p2q^2*(-432*s12^3*s13^4*s23^3 + 216*s12^3*s13^3*s23^4) +
         p3q^3*(p1q*p2q*(432*s12^5*s13^3 - 432*s12^4*s13^4)*s23^2 +
           p1q^2*(216*s12^5*s13^3*s23^2 - 432*s12^4*s13^3*s23^3)) +
         p3q^2*(p1q*p2q^2*(216*s12^5*s13^3 - 864*s12^4*s13^4 +
             216*s12^3*s13^5)*s23^2 + p1q^2*p2q*
            ((216*s12^5*s13^3 - 432*s12^4*s13^4)*s23^2 +
             (-864*s12^4*s13^3 - 432*s12^3*s13^4)*s23^3) +
           p1q^3*(-432*s12^4*s13^3*s23^3 + 216*s12^3*s13^3*s23^4)) +
         p3q*(p1q*p2q^3*(-432*s12^4*s13^4 + 432*s12^3*s13^5)*s23^2 +
           216*p1q^4*s12^3*s13^3*s23^4 + p1q^2*p2q^2*
            ((-432*s12^4*s13^4 + 216*s12^3*s13^5)*s23^2 +
             (-432*s12^4*s13^3 - 864*s12^3*s13^4)*s23^3) +
           p1q^3*p2q*((-432*s12^4*s13^3 - 432*s12^3*s13^4)*s23^3 +
             432*s12^3*s13^3*s23^4))) +
       ((p1q*p2q*((-9*s12^2 - 18*s12*s13 - 9*s13^2)*s23 + (-9*s12 - 9*s13)*
             s23^2) + p2q^2*(72*s12^2*s13 + 72*s12*s13^2 +
            (108*s12*s13 + 36*s13^2)*s23 + 36*s13*s23^2) +
          p3q*(p1q*((-27*s12^2 - 18*s12*s13 + 9*s13^2)*s23 +
              (-27*s12 + 9*s13)*s23^2) + p2q*(72*s12^2*s13 + 72*s12*s13^2 +
              (18*s12^2 + 108*s12*s13 + 18*s13^2)*s23 + (18*s12 + 18*s13)*s23^
                2)))*Log(p1q/(p1q + p2q + p3q))^2)/(4*p1q*p2q*s12*s13*s23^2 +
         4*p1q*p3q*s12*s13*s23^2) +
       ((p2q^2*(36*s12^2*s13 + 36*s12*s13^2 + 36*s12*s13*s23) +
          p1q*p2q*((-9*s12^2 - 9*s12*s13)*s23 + (-11*s12 - 2*s13)*s23^2 -
            2*s23^3) + p3q*(p2q*(36*s12^2*s13 + 36*s12*s13^2 +
              (18*s12^2 + 54*s12*s13)*s23 + 18*s12*s23^2) +
            p1q*((-27*s12^2 - 27*s12*s13)*s23 + (-29*s12 - 2*s13)*s23^2 -
              2*s23^3)))*Log(p2q/(p1q + p2q + p3q))^2)/
        (4*p1q*p2q*s12*s13*s23^2 + 4*p1q*p3q*s12*s13*s23^2) +
       ((p3q^6*(-9*s12^4*s13 - 9*s12^3*s13^2 + (-s12^4 - 10*s12^3*s13)*s23 -
            s12^3*s23^2) + p2q^6*(-45*s12^2*s13^3 - 81*s12*s13^4 - 36*s13^5 +
            (-80*s12*s13^3 - 71*s13^4)*s23 + (s12*s13^2 - 34*s13^3)*s23^2 +
            s13^2*s23^3) + p1q^6*((-9*s12^2*s13 - 18*s12*s13^2 - 9*s13^3)*
             s23^2 + (-18*s12*s13 - 18*s13^2)*s23^3 - 9*s13*s23^4) +
          p1q*p2q^5*(-54*s12^2*s13^3 - 117*s12*s13^4 - 63*s13^5 +
            (129*s12^2*s13^2 + 135*s12*s13^3 - 3*s13^4)*s23 +
            (242*s12*s13^2 + 173*s13^3)*s23^2 + (-2*s12*s13 + 111*s13^2)*
             s23^3 - 2*s13*s23^4) + p1q^2*p2q^4*(-36*s12^3*s13^2 -
            90*s12^2*s13^3 - 99*s12*s13^4 - 45*s13^5 +
            (-70*s12^3*s13 - 8*s12^2*s13^2 + 172*s12*s13^3 + 83*s13^4)*s23 +
            (-225*s12^2*s13 - 2*s12*s13^2 + 183*s13^3)*s23^2 +
            (-240*s12*s13 - 30*s13^2)*s23^3 + (s12 - 84*s13)*s23^4 + s23^5) +
          p1q^3*p2q^3*(-36*s12^3*s13^2 - 90*s12^2*s13^3 - 81*s12*s13^4 -
            27*s13^5 + (-106*s12^3*s13 - 155*s12^2*s13^2 - 25*s12*s13^3 +
              15*s13^4)*s23 + (-2*s12^3 - 334*s12^2*s13 - 317*s12*s13^2 -
              36*s13^3)*s23^2 + (-3*s12^2 - 319*s12*s13 - 170*s13^2)*s23^3 +
            (6*s12 - 85*s13)*s23^4 + 7*s23^5) + p1q^5*p2q*
           ((18*s12^2*s13^2 + 36*s12*s13^3 + 18*s13^4)*s23 +
            (-18*s12^2*s13 + 9*s12*s13^2 + 27*s13^3)*s23^2 +
            (3*s12^2 - 9*s12*s13 + 15*s13^2)*s23^3 + (10*s12 + 13*s13)*
             s23^4 + 7*s23^5) + p1q^4*p2q^2*(-9*s12^2*s13^3 - 18*s12*s13^4 -
            9*s13^5 + (-36*s12^3*s13 + 54*s12*s13^3 + 18*s13^4)*s23 +
            (-2*s12^3 - 118*s12^2*s13 - 47*s12*s13^2 + 24*s13^3)*s23^2 +
            (-72*s12*s13 + 3*s13^2)*s23^3 + (15*s12 + 19*s13)*s23^4 +
            13*s23^5) + p3q^5*(p2q*(-36*s12^4*s13 - 18*s12^3*s13^2 +
              18*s12^2*s13^3 + (-3*s12^4 - 36*s12^3*s13 + 21*s12^2*s13^2)*
               s23 + (-2*s12^3 + 4*s12^2*s13)*s23^2 + s12^2*s23^3) +
            p1q*(-27*s12^4*s13 - 27*s12^3*s13^2 + (-3*s12^4 - 3*s12^3*s13 +
                27*s12^2*s13^2)*s23 + 30*s12^2*s13*s23^2 + 3*s12^2*s23^3)) +
          p3q^4*(p2q^2*(-54*s12^4*s13 + 18*s12^3*s13^2 + 63*s12^2*s13^3 -
              9*s12*s13^4 + (-3*s12^4 - 48*s12^3*s13 + 78*s12^2*s13^2 -
                12*s12*s13^3)*s23 + (10*s12^2*s13 - 5*s12*s13^2)*s23^2 +
              (3*s12^2 - 2*s12*s13)*s23^3) + p1q^2*(-36*s12^4*s13 -
              27*s12^3*s13^2 + 9*s12^2*s13^3 + (-s12^4 + 30*s12^3*s13 +
                76*s12^2*s13^2)*s23 + (11*s12^3 + 52*s12^2*s13 -
                27*s12*s13^2)*s23^2 + (9*s12^2 - 30*s12*s13)*s23^3 -
              3*s12*s23^4) + p1q*p2q*(-72*s12^4*s13 - 9*s12^3*s13^2 +
              63*s12^2*s13^3 + (-7*s12^4 + 41*s12^3*s13 + 183*s12^2*s13^2)*
               s23 + (4*s12^3 + 129*s12^2*s13 - 2*s12*s13^2)*s23^2 +
              (9*s12^2 - 4*s12*s13)*s23^3 - 2*s12*s23^4)) +
          p3q^3*(p2q^3*(-72*s12^4*s13 + 36*s12^2*s13^3 - 36*s12*s13^4 +
              (-s12^4 - 100*s12^3*s13 + 36*s12^2*s13^2 - 44*s12*s13^3 +
                s13^4)*s23 + (2*s12^3 - 30*s12^2*s13 - 14*s12*s13^2 +
                2*s13^3)*s23^2 + (3*s12^2 - 6*s12*s13 + s13^2)*s23^3) +
            p1q*p2q^2*(-99*s12^4*s13 - 9*s12^3*s13^2 + 45*s12^2*s13^3 -
              45*s12*s13^4 + (-5*s12^4 + 39*s12^3*s13 + 150*s12^2*s13^2 -
                119*s12*s13^3 + 9*s13^4)*s23 + (8*s12^3 + 138*s12^2*s13 -
                102*s12*s13^2 + 8*s13^3)*s23^2 + (7*s12^2 - 26*s12*s13 -
                3*s13^2)*s23^3 + (-6*s12 - 2*s13)*s23^4) +
            p1q^2*p2q*(-54*s12^4*s13 + 18*s12^3*s13^2 + 54*s12^2*s13^3 -
              18*s12*s13^4 + (5*s12^4 + 154*s12^3*s13 + 233*s12^2*s13^2 -
                60*s12*s13^3)*s23 + (36*s12^3 + 114*s12^2*s13 -
                180*s12*s13^2 - 18*s13^3)*s23^2 + (14*s12^2 - 138*s12*s13 -
                19*s13^2)*s23^3 - 16*s12*s23^4 + s23^5) +
            p1q^3*(-9*s12^4*s13 + 9*s12^3*s13^2 + 18*s12^2*s13^3 +
              (3*s12^4 + 81*s12^3*s13 + 105*s12^2*s13^2)*s23 +
              (12*s12^3 + 43*s12^2*s13 - 53*s12*s13^2)*s23^2 +
              (-6*s12^2 - 59*s12*s13 + 9*s13^2)*s23^3 + (-14*s12 + 10*s13)*
               s23^4 + s23^5)) + p3q^2*(p2q^4*(-45*s12^4*s13 +
              63*s12^3*s13^2 + 126*s12^2*s13^3 + 18*s12*s13^4 +
              (-78*s12^3*s13 + 138*s12^2*s13^2 + 84*s12*s13^3 + 3*s13^4)*
               s23 + (s12^3 - 38*s12^2*s13 + 60*s12*s13^2 + 6*s13^3)*s23^2 +
              (s12^2 - 6*s12*s13 + 3*s13^2)*s23^3) + p1q*p2q^3*
             (-54*s12^4*s13 + 81*s12^3*s13^2 + 171*s12^2*s13^3 +
              45*s12*s13^4 + 9*s13^5 + (-s12^4 + 83*s12^3*s13 + 372*s12^2*
                 s13^2 + 245*s12*s13^3 + 119*s13^4)*s23 + (4*s12^3 +
                181*s12^2*s13 + 208*s12*s13^2 + 181*s13^3)*s23^2 +
              (-s12^2 + 26*s12*s13 + 65*s13^2)*s23^3 + (-6*s12 - 6*s13)*s23^
                4) + p1q^2*p2q^2*(-18*s12^4*s13 + 81*s12^3*s13^2 +
              99*s12^2*s13^3 + 9*s12*s13^4 + 9*s13^5 + (4*s12^4 +
                206*s12^3*s13 + 382*s12^2*s13^2 + 182*s12*s13^3 + 128*s13^4)*
               s23 + (13*s12^3 + 91*s12^2*s13 - 43*s12*s13^2 + 151*s13^3)*s23^
                2 + (-24*s12^2 - 182*s12*s13 + 21*s13^2)*s23^3 +
              (-30*s12 - 8*s13)*s23^4 + 3*s23^5) + p1q^4*(-9*s12^4*s13 -
              18*s12^3*s13^2 - 9*s12^2*s13^3 + (-18*s12^2*s13^2 -
                18*s12*s13^3)*s23 + (-6*s12^3 - 63*s12^2*s13 - 93*s12*s13^2 -
                9*s13^3)*s23^2 + (-21*s12^2 - 68*s12*s13 + 4*s13^2)*s23^3 +
              (-9*s12 + 19*s13)*s23^4 + 6*s23^5) + p1q^3*p2q*
             (-18*s12^4*s13 + 9*s12^3*s13^2 + 27*s12^2*s13^3 +
              (5*s12^4 + 83*s12^3*s13 + 133*s12^2*s13^2 + 46*s12*s13^3 +
                36*s13^4)*s23 + (6*s12^3 - 101*s12^2*s13 - 185*s12*s13^2 +
                39*s13^3)*s23^2 + (-42*s12^2 - 209*s12*s13 + 35*s13^2)*s23^
                3 + (-34*s12 + 41*s13)*s23^4 + 9*s23^5)) +
          p3q*(p2q^5*(90*s12^3*s13^2 + 90*s12^2*s13^3 - 36*s12*s13^4 -
              36*s13^5 + (159*s12^2*s13^2 + 36*s12*s13^3 - 69*s13^4)*s23 +
              (-2*s12^2*s13 + 70*s12*s13^2 - 30*s13^3)*s23^2 +
              (-2*s12*s13 + 3*s13^2)*s23^3) + p1q*p2q^4*(108*s12^3*s13^2 +
              135*s12^2*s13^3 - 27*s12*s13^4 - 54*s13^5 + (52*s12^3*s13 +
                399*s12^2*s13^2 + 391*s12*s13^3 + 71*s13^4)*s23 +
              (70*s12^2*s13 + 406*s12*s13^2 + 274*s13^3)*s23^2 +
              (-2*s12^2 + 10*s12*s13 + 143*s13^2)*s23^3 + (-2*s12 - 6*s13)*
               s23^4) + p1q^2*p2q^3*(36*s12^4*s13 + 108*s12^3*s13^2 +
              72*s12^2*s13^3 - 36*s12*s13^4 - 36*s13^5 + (-2*s12^4 +
                156*s12^3*s13 + 433*s12^2*s13^2 + 414*s12*s13^3 + 139*s13^4)*
               s23 + (-12*s12^3 + 20*s12^2*s13 + 216*s12*s13^2 + 244*s13^3)*
               s23^2 + (-29*s12^2 - 170*s12*s13 + 10*s13^2)*s23^3 +
              (-16*s12 - 56*s13)*s23^4 + 3*s23^5) +
            p1q^5*((18*s12^3*s13 + 36*s12^2*s13^2 + 18*s12*s13^3)*s23 +
              (27*s12^2*s13 + 27*s12*s13^2)*s23^2 + (3*s12^2 + 27*s12*s13 +
                15*s13^2)*s23^3 + (10*s12 + 22*s13)*s23^4 + 7*s23^5) +
            p1q^3*p2q^2*(36*s12^4*s13 + 108*s12^3*s13^2 + 81*s12^2*s13^3 -
              9*s12*s13^4 - 18*s13^5 + (2*s12^4 + 130*s12^3*s13 +
                323*s12^2*s13^2 + 219*s12*s13^3 + 33*s13^4)*s23 +
              (-8*s12^3 - 73*s12^2*s13 - 35*s12*s13^2 + 12*s13^3)*s23^2 +
              (-39*s12^2 - 181*s12*s13 - 36*s13^2)*s23^3 + (-14*s12 + 18*s13)*
               s23^4 + 15*s23^5) + p1q^4*p2q*(18*s12^3*s13^2 +
              36*s12^2*s13^3 + 18*s12*s13^4 + (36*s12^3*s13 + 126*s12^2*
                 s13^2 + 108*s12*s13^3 + 18*s13^4)*s23 + (-8*s12^3 -
                28*s12^2*s13 + 22*s12*s13^2 + 24*s13^3)*s23^2 +
              (-21*s12^2 - 14*s12*s13 + 61*s13^2)*s23^3 + (6*s12 + 74*s13)*
               s23^4 + 19*s23^5)))*Log((p1q + p2q)/(p1q + p2q + p3q))^2)/
        (4*p1q*p3q^5*s12^4*s13*s23 + p1q*p2q^5*(-4*s12*s13^4*s23 -
           4*s12*s13^3*s23^2) + p1q^2*p2q^4*(-8*s12*s13^4*s23 +
           8*s12*s13^2*s23^3) + p1q^4*p2q^2*(8*s12*s13^3*s23^2 -
           8*s12*s13*s23^4) + p1q^5*p2q*(-4*s12*s13^2*s23^3 -
           4*s12*s13*s23^4) + p1q^3*p2q^3*(-4*s12*s13^4*s23 +
           12*s12*s13^3*s23^2 + 12*s12*s13^2*s23^3 - 4*s12*s13*s23^4) +
         p3q^4*(p1q^2*((4*s12^4*s13 - 4*s12^3*s13^2)*s23 - 12*s12^3*s13*
              s23^2) + p1q*p2q*((8*s12^4*s13 - 12*s12^3*s13^2)*s23 -
             4*s12^3*s13*s23^2)) + p3q^3*
          (p1q*p2q^2*((4*s12^4*s13 - 24*s12^3*s13^2 + 12*s12^2*s13^3)*s23 +
             (-8*s12^3*s13 + 8*s12^2*s13^2)*s23^2) + p1q^2*p2q*
            ((4*s12^4*s13 - 20*s12^3*s13^2 + 8*s12^2*s13^3)*s23 +
             (-28*s12^3*s13 + 8*s12^2*s13^2)*s23^2 + 8*s12^2*s13*s23^3) +
           p1q^3*(-4*s12^3*s13^2*s23 + (-12*s12^3*s13 + 8*s12^2*s13^2)*
              s23^2 + 12*s12^2*s13*s23^3)) +
         p3q*(p1q*p2q^4*((12*s12^2*s13^3 - 8*s12*s13^4)*s23 +
             (8*s12^2*s13^2 - 8*s12*s13^3)*s23^2) + p1q^2*p2q^3*
            ((20*s12^2*s13^3 - 12*s12*s13^4)*s23 + (16*s12^2*s13^2 + 4*s12*
                s13^3)*s23^2 + (8*s12^2*s13 + 16*s12*s13^2)*s23^3) +
           p1q^4*p2q*((8*s12^2*s13^2 + 8*s12*s13^3)*s23^2 +
             (12*s12^2*s13 - 4*s12*s13^2)*s23^3 - 12*s12*s13*s23^4) +
           p1q^3*p2q^2*((8*s12^2*s13^3 - 4*s12*s13^4)*s23 +
             (16*s12^2*s13^2 + 20*s12*s13^3)*s23^2 + (20*s12^2*s13 + 16*s12*
                s13^2)*s23^3 - 8*s12*s13*s23^4) + p1q^5*(-4*s12*s13^2*s23^3 -
             4*s12*s13*s23^4)) + p3q^2*
          (p1q*p2q^3*((-12*s12^3*s13^2 + 24*s12^2*s13^3 - 4*s12*s13^4)*s23 +
             (-4*s12^3*s13 + 16*s12^2*s13^2 - 4*s12*s13^3)*s23^2) +
           p1q^2*p2q^2*((-16*s12^3*s13^2 + 28*s12^2*s13^3 - 4*s12*s13^4)*
              s23 + (-16*s12^3*s13 + 24*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
             (16*s12^2*s13 + 8*s12*s13^2)*s23^3) +
           p1q^4*(8*s12^2*s13^2*s23^2 + (12*s12^2*s13 - 4*s12*s13^2)*s23^3 -
             4*s12*s13*s23^4) + p1q^3*p2q*((-4*s12^3*s13^2 + 8*s12^2*s13^3)*
              s23 + (-12*s12^3*s13 + 24*s12^2*s13^2 + 8*s12*s13^3)*s23^2 +
             (32*s12^2*s13 + 4*s12*s13^2)*s23^3 - 4*s12*s13*s23^4))) +
       ((p2q^2*(36*s12^2*s13 + 36*s12*s13^2 + (72*s12*s13 + 36*s13^2)*s23 +
            36*s13*s23^2) + p1q*p2q*((-9*s12*s13 - 9*s13^2)*s23 +
            (-2*s12 - 11*s13)*s23^2 - 2*s23^3) +
          p3q*(p2q*(36*s12^2*s13 + 36*s12*s13^2 + (54*s12*s13 + 18*s13^2)*
               s23 + 18*s13*s23^2) + p1q*((9*s12*s13 + 9*s13^2)*s23 +
              (-2*s12 + 7*s13)*s23^2 - 2*s23^3)))*Log(p3q/(p1q + p2q + p3q))^
          2)/(4*p1q*p2q*s12*s13*s23^2 + 4*p1q*p3q*s12*s13*s23^2) +
       ((p2q^6*(-9*s12^2*s13^3 - 9*s12*s13^4 + (-10*s12*s13^3 - s13^4)*s23 -
            s13^3*s23^2) + p3q^6*(-9*s12^4*s13 - 9*s12^3*s13^2 +
            (s12^4 - 8*s12^3*s13)*s23 + (2*s12^3 + s12^2*s13)*s23^2 +
            s12^2*s23^3) + p1q*p2q^5*(-27*s12^2*s13^3 - 27*s12*s13^4 +
            (27*s12^2*s13^2 + s12*s13^3 + s13^4)*s23 +
            (30*s12*s13^2 + 4*s13^3)*s23^2 + 3*s13^2*s23^3) +
          p1q^6*((-9*s12^3 - 18*s12^2*s13 - 9*s12*s13^2)*s23^2 +
            (-18*s12^2 - 18*s12*s13)*s23^3 - 9*s12*s23^4) +
          p1q^2*p2q^4*(45*s12^3*s13^2 + 45*s12^2*s13^3 +
            (124*s12^2*s13^2 + 80*s12*s13^3 + s13^4)*s23 +
            (-27*s12^2*s13 + 52*s12*s13^2 + s13^3)*s23^2 +
            (-30*s12*s13 - 3*s13^2)*s23^3 - 3*s13*s23^4) +
          p1q^5*p2q*((18*s12^3*s13 + 36*s12^2*s13^2 + 18*s12*s13^3)*s23 +
            (27*s12^2*s13 + 27*s12*s13^2)*s23^2 + (7*s12^2 + 15*s12*s13 -
              s13^2)*s23^3 + (6*s12 - 2*s13)*s23^4 - s23^5) +
          p1q^3*p2q^3*(-36*s12^4*s13 - 54*s12^3*s13^2 - 27*s12^2*s13^3 -
            9*s12*s13^4 + (-92*s12^3*s13 - 69*s12^2*s13^2 - 5*s12*s13^3 -
              s13^4)*s23 + (-137*s12^2*s13 - 79*s12*s13^2 - 4*s13^3)*s23^2 +
            (9*s12^2 - 75*s12*s13 - 6*s13^2)*s23^3 + (10*s12 - 2*s13)*s23^4 +
            s23^5) + p1q^4*p2q^2*(-9*s12^3*s13^2 - 18*s12^2*s13^3 -
            9*s12*s13^4 + (18*s12^3*s13 + 18*s12^2*s13^2)*s23 +
            (11*s12^3 + 17*s12^2*s13 - s12*s13^2 + 2*s13^3)*s23^2 +
            (40*s12^2 + 20*s12*s13 + 5*s13^2)*s23^3 + (31*s12 + 5*s13)*
             s23^4 + 2*s23^5) + p3q^5*(p2q*(36*s12^5 + 36*s12^4*s13 +
              18*s12^3*s13^2 + 18*s12^2*s13^3 + (75*s12^4 + 36*s12^3*s13 +
                15*s12^2*s13^2)*s23 + (42*s12^3 - 2*s12^2*s13 - 2*s12*s13^2)*
               s23^2 + (3*s12^2 - 2*s12*s13)*s23^3) +
            p1q*(-27*s12^5 - 45*s12^4*s13 - 18*s12^3*s13^2 + (-11*s12^4 +
                51*s12^3*s13 + 53*s12^2*s13^2)*s23 + (49*s12^3 +
                86*s12^2*s13)*s23^2 + (31*s12^2 - 2*s12*s13)*s23^3 -
              2*s12*s23^4)) + p3q^4*(p2q^2*(36*s12^5 - 54*s12^4*s13 -
              90*s12^3*s13^2 - 9*s12^2*s13^3 - 9*s12*s13^4 +
              (75*s12^4 - 132*s12^3*s13 - 78*s12^2*s13^2 - 6*s12*s13^3)*s23 +
              (42*s12^3 - 84*s12^2*s13 - 2*s12*s13^2 + s13^3)*s23^2 +
              (3*s12^2 - 6*s12*s13 + s13^2)*s23^3) +
            p1q*p2q*(54*s12^5 + 117*s12^4*s13 + 99*s12^3*s13^2 +
              36*s12^2*s13^3 + (131*s12^4 + 139*s12^3*s13 + 19*s12^2*s13^2 -
                16*s12*s13^3)*s23 + (70*s12^3 - 46*s12^2*s13 - 54*s12*s13^2)*
               s23^2 + (-13*s12^2 - 46*s12*s13 - 2*s13^2)*s23^3 +
              (-6*s12 - 2*s13)*s23^4) + p1q^2*(-45*s12^5 - 63*s12^4*s13 -
              18*s12^3*s13^2 + (67*s12^4 + 236*s12^3*s13 + 142*s12^2*s13^2)*
               s23 + (203*s12^3 + 190*s12^2*s13 - 43*s12*s13^2)*s23^2 +
              (58*s12^2 - 76*s12*s13)*s23^3 + (-32*s12 + s13)*s23^4 +
              s23^5)) + p3q^3*(p2q^3*(-108*s12^4*s13 - 36*s12^3*s13^2 +
              72*s12^2*s13^3 + (s12^4 - 188*s12^3*s13 + 36*s12^2*s13^2 +
                44*s12*s13^3 - s13^4)*s23 + (2*s12^3 - 86*s12^2*s13 +
                42*s12*s13^2 + 2*s13^3)*s23^2 + (s12^2 - 6*s12*s13 + 3*s13^2)*
               s23^3) + p1q*p2q^2*(81*s12^5 - 27*s12^4*s13 - 153*s12^3*s13^
                2 - 63*s12^2*s13^3 - 18*s12*s13^4 + (187*s12^4 -
                239*s12^3*s13 - 300*s12^2*s13^2 - 37*s12*s13^3 - s13^4)*s23 +
              (101*s12^3 - 324*s12^2*s13 - 103*s12*s13^2 - 4*s13^3)*s23^2 +
              (-11*s12^2 - 94*s12*s13 - 9*s13^2)*s23^3 + (-6*s12 - 6*s13)*s23^
                4) + p1q^3*(-27*s12^5 - 45*s12^4*s13 - 18*s12^3*s13^2 +
              (115*s12^4 + 267*s12^3*s13 + 143*s12^2*s13^2)*s23 +
              (160*s12^3 + 39*s12^2*s13 - 122*s12*s13^2)*s23^2 +
              (-86*s12^2 - 227*s12*s13 - s13^2)*s23^3 + (-105*s12 - 2*s13)*
               s23^4 - s23^5) + p1q^2*p2q*(36*s12^5 + 144*s12^4*s13 +
              180*s12^3*s13^2 + 72*s12^2*s13^3 + (187*s12^4 + 418*s12^3*s13 +
                303*s12^2*s13^2 + 72*s12*s13^3)*s23 + (220*s12^3 +
                280*s12^2*s13 + 122*s12*s13^2 - 2*s13^3)*s23^2 +
              (106*s12^2 + 86*s12*s13 - 5*s13^2)*s23^3 + 40*s12*s23^4 +
              3*s23^5)) + p3q^2*(p2q^4*(-9*s12^4*s13 + 99*s12^3*s13^2 +
              90*s12^2*s13^3 - 18*s12*s13^4 + (-12*s12^3*s13 + 150*s12^2*
                 s13^2 + 24*s12*s13^3 - 3*s13^4)*s23 + (-5*s12^2*s13 +
                46*s12*s13^2)*s23^2 + (-2*s12*s13 + 3*s13^2)*s23^3) +
            p1q*p2q^3*(-189*s12^4*s13 - 135*s12^3*s13^2 + 63*s12^2*s13^3 +
              9*s12*s13^4 + (9*s12^4 - 435*s12^3*s13 - 118*s12^2*s13^2 +
                95*s12*s13^3 + 3*s13^4)*s23 + (8*s12^3 - 338*s12^2*s13 +
                2*s12*s13^2 + 4*s13^3)*s23^2 + (-3*s12^2 - 90*s12*s13 -
                5*s13^2)*s23^3 + (-2*s12 - 6*s13)*s23^4) +
            p1q^4*(-9*s12^5 - 18*s12^4*s13 - 9*s12^3*s13^2 +
              (54*s12^4 + 126*s12^3*s13 + 72*s12^2*s13^2)*s23 +
              (4*s12^3 - 111*s12^2*s13 - 124*s12*s13^2)*s23^2 +
              (-161*s12^2 - 228*s12*s13 - 2*s13^2)*s23^3 + (-105*s12 - 5*s13)*
               s23^4 - 3*s23^5) + p1q^2*p2q^2*(81*s12^5 + 45*s12^4*s13 -
              81*s12^3*s13^2 - 99*s12^2*s13^3 - 54*s12*s13^4 +
              (228*s12^4 - 70*s12^3*s13 - 292*s12^2*s13^2 - 118*s12*s13^3 +
                2*s13^4)*s23 + (179*s12^3 - 283*s12^2*s13 - 207*s12*s13^2 -
                5*s13^3)*s23^2 + (65*s12^2 - 110*s12*s13 - 16*s13^2)*s23^3 +
              (36*s12 - 6*s13)*s23^4 + 3*s23^5) + p1q^3*p2q*
             (18*s12^5 + 99*s12^4*s13 + 153*s12^3*s13^2 + 72*s12^2*s13^3 +
              (149*s12^4 + 533*s12^3*s13 + 571*s12^2*s13^2 + 178*s12*s13^3)*
               s23 + (216*s12^3 + 569*s12^2*s13 + 341*s12*s13^2)*s23^2 +
              (156*s12^2 + 237*s12*s13 + 3*s13^2)*s23^3 + (74*s12 + 6*s13)*
               s23^4 + 3*s23^5)) + p3q*(p2q^5*(18*s12^3*s13^2 -
              18*s12^2*s13^3 - 36*s12*s13^4 + (21*s12^2*s13^2 -
                36*s12*s13^3 - 3*s13^4)*s23 + (4*s12*s13^2 - 2*s13^3)*s23^2 +
              s13^2*s23^3) + p1q*p2q^4*(135*s12^3*s13^2 + 135*s12^2*s13^3 +
              (283*s12^2*s13^2 + 153*s12*s13^3 + 5*s13^4)*s23 +
              (-2*s12^2*s13 + 153*s12*s13^2 + 12*s13^3)*s23^2 +
              (-4*s12*s13 + 5*s13^2)*s23^3 - 2*s13*s23^4) +
            p1q^4*p2q*(18*s12^4*s13 + 36*s12^3*s13^2 + 18*s12^2*s13^3 +
              (18*s12^4 + 180*s12^3*s13 + 270*s12^2*s13^2 + 108*s12*s13^3)*
               s23 + (24*s12^3 + 212*s12^2*s13 + 172*s12*s13^2 + 2*s13^3)*s23^
                2 + (41*s12^2 + 98*s12*s13 + 3*s13^2)*s23^3 + 34*s12*s23^4 -
              s23^5) + p1q^5*((18*s12^4 + 36*s12^3*s13 + 18*s12^2*s13^2)*
               s23 + (-9*s12^3 - 63*s12^2*s13 - 54*s12*s13^2)*s23^2 +
              (-65*s12^2 - 93*s12*s13 - s13^2)*s23^3 + (-39*s12 - 2*s13)*s23^
                4 - s23^5) + p1q^2*p2q^3*(-126*s12^4*s13 - 126*s12^3*s13^2 -
              18*s12^2*s13^3 - 18*s12*s13^4 + (-360*s12^3*s13 - 221*s12^2*
                 s13^2 - 2*s12*s13^3 + 3*s13^4)*s23 + (-18*s12^3 -
                436*s12^2*s13 - 176*s12*s13^2 - 2*s13^3)*s23^2 +
              (-19*s12^2 - 194*s12*s13 - 14*s13^2)*s23^3 - 8*s13*s23^4 +
              s23^5) + p1q^3*p2q^2*(36*s12^5 + 36*s12^4*s13 -
              45*s12^3*s13^2 - 99*s12^2*s13^3 - 54*s12*s13^4 +
              (124*s12^4 + 120*s12^3*s13 - 19*s12^2*s13^2 - 61*s12*s13^3 -
                s13^4)*s23 + (155*s12^3 + 51*s12^2*s13 - 57*s12*s13^2 -
                4*s13^3)*s23^2 + (143*s12^2 + 29*s12*s13 - 2*s13^2)*s23^3 +
              (81*s12 + 6*s13)*s23^4 + 5*s23^5)))*
         Log((p1q + p3q)/(p1q + p2q + p3q))^2)/(-4*p1q*p2q^5*s12*s13^4*s23 +
         p1q*p3q^5*(4*s12^4*s13*s23 + 4*s12^3*s13*s23^2) +
         p1q^2*p2q^4*((4*s12^2*s13^3 - 4*s12*s13^4)*s23 +
           12*s12*s13^3*s23^2) + p1q^3*p2q^3*(4*s12^2*s13^3*s23 +
           (-8*s12^2*s13^2 + 12*s12*s13^3)*s23^2 - 12*s12*s13^2*s23^3) +
         p1q^5*p2q*(4*s12^2*s13*s23^3 + 4*s12*s13*s23^4) +
         p1q^4*p2q^2*(-8*s12^2*s13^2*s23^2 + (4*s12^2*s13 - 12*s12*s13^2)*
            s23^3 + 4*s12*s13*s23^4) +
         p3q^4*(p1q*p2q*((8*s12^4*s13 - 12*s12^3*s13^2)*s23 +
             (8*s12^3*s13 - 8*s12^2*s13^2)*s23^2) +
           p1q^2*(8*s12^4*s13*s23 - 8*s12^2*s13*s23^3)) +
         p3q^3*(p1q*p2q^2*((4*s12^4*s13 - 24*s12^3*s13^2 + 12*s12^2*s13^3)*
              s23 + (4*s12^3*s13 - 16*s12^2*s13^2 + 4*s12*s13^3)*s23^2) +
           p1q^2*p2q*((12*s12^4*s13 - 20*s12^3*s13^2)*s23 +
             (-4*s12^3*s13 - 16*s12^2*s13^2)*s23^2 + (-16*s12^2*s13 - 8*s12*
                s13^2)*s23^3) + p1q^3*(4*s12^4*s13*s23 - 12*s12^3*s13*s23^2 -
             12*s12^2*s13*s23^3 + 4*s12*s13*s23^4)) +
         p3q^2*(p1q*p2q^3*((-12*s12^3*s13^2 + 24*s12^2*s13^3 - 4*s12*s13^4)*
              s23 + (-8*s12^2*s13^2 + 8*s12*s13^3)*s23^2) +
           p1q^2*p2q^2*((4*s12^4*s13 - 28*s12^3*s13^2 + 16*s12^2*s13^3)*s23 +
             (-4*s12^3*s13 - 24*s12^2*s13^2 + 16*s12*s13^3)*s23^2 +
             (-8*s12^2*s13 - 16*s12*s13^2)*s23^3) +
           p1q^4*(-8*s12^3*s13*s23^2 + 8*s12*s13*s23^4) +
           p1q^3*p2q*((4*s12^4*s13 - 8*s12^3*s13^2)*s23 +
             (-20*s12^3*s13 - 16*s12^2*s13^2)*s23^2 +
             (-16*s12^2*s13 - 20*s12*s13^2)*s23^3 + 8*s12*s13*s23^4)) +
         p3q*(p1q*p2q^4*((12*s12^2*s13^3 - 8*s12*s13^4)*s23 +
             4*s12*s13^3*s23^2) + p1q^2*p2q^3*((-8*s12^3*s13^2 + 20*s12^2*
                s13^3 - 4*s12*s13^4)*s23 + (-8*s12^2*s13^2 + 28*s12*s13^3)*
              s23^2 - 8*s12*s13^2*s23^3) + p1q^5*(4*s12^2*s13*s23^3 +
             4*s12*s13*s23^4) + p1q^3*p2q^2*((-8*s12^3*s13^2 + 4*s12^2*s13^3)*
              s23 + (-8*s12^3*s13 - 24*s12^2*s13^2 + 12*s12*s13^3)*s23^2 +
             (-4*s12^2*s13 - 32*s12*s13^2)*s23^3 + 4*s12*s13*s23^4) +
           p1q^4*p2q*((-8*s12^3*s13 - 8*s12^2*s13^2)*s23^2 +
             (4*s12^2*s13 - 12*s12*s13^2)*s23^3 + 12*s12*s13*s23^4))) +
       ((p3q^6*((-9*s12^4 + 9*s12^2*s13^2)*s23^2 + (-9*s12^3 + 9*s12^2*s13)*
             s23^3) + p2q^6*(108*s12^3*s13^3 + 216*s12^2*s13^4 +
            108*s12*s13^5 + (216*s12^2*s13^3 + 252*s12*s13^4 + 36*s13^5)*
             s23 + (-9*s12^2*s13^2 + 108*s12*s13^3 + 45*s13^4)*s23^2 +
            (-9*s12*s13^2 + 9*s13^3)*s23^3) + p1q*p2q^5*(108*s12^3*s13^3 +
            216*s12^2*s13^4 + 108*s12*s13^5 + (-279*s12^3*s13^2 -
              315*s12^2*s13^3 - 9*s12*s13^4 + 27*s13^5)*s23 +
            (-549*s12^2*s13^2 - 468*s12*s13^3 - 27*s13^4)*s23^2 +
            (18*s12^2*s13 - 270*s12*s13^2 - 72*s13^3)*s23^3 +
            (18*s12*s13 - 18*s13^2)*s23^4) + p1q^2*p2q^4*
           ((54*s12^4*s13 - 162*s12^3*s13^2 - 414*s12^2*s13^3 -
              234*s12*s13^4 - 36*s13^5)*s23 + (270*s12^3*s13 -
              117*s12^2*s13^2 - 342*s12*s13^3 - 63*s13^4)*s23^2 +
            (432*s12^2*s13 + 99*s12*s13^2 - 27*s13^3)*s23^3 +
            (-9*s12^2 + 216*s12*s13 + 9*s13^2)*s23^4 + (-9*s12 + 9*s13)*
             s23^5) + p1q^3*p2q^3*((9*s12^3*s13^2 + 81*s12^2*s13^3 +
              63*s12*s13^4 - 9*s13^5)*s23 + (-18*s12^4 + 90*s12^3*s13 +
              135*s12^2*s13^2 + 234*s12*s13^3 + 135*s13^4)*s23^2 +
            (-63*s12^3 + 261*s12^2*s13 + 189*s12*s13^2 + 117*s13^3)*s23^3 +
            (-99*s12^2 + 162*s12*s13 - 9*s13^2)*s23^4 + (-54*s12 + 18*s13)*
             s23^5) + p1q^6*((-18*s12^2 + 18*s13^2)*s23^4 +
            (-18*s12 + 18*s13)*s23^5) + p1q^4*p2q^2*
           ((-18*s12^3*s13 - 180*s12^2*s13^2 - 126*s12*s13^3 + 36*s13^4)*
             s23^2 + (90*s12^2*s13 - 234*s12*s13^2 - 144*s13^3)*s23^3 +
            (-45*s12^2 + 90*s12*s13 - 153*s13^2)*s23^4 + (-45*s12 + 27*s13)*
             s23^5) + p1q^5*p2q*((9*s12^3 + 117*s12^2*s13 + 63*s12*s13^2 -
              45*s13^3)*s23^3 + (-27*s12^2 + 144*s12*s13 + 27*s13^2)*s23^4 +
            (-36*s12 + 72*s13)*s23^5) +
          p3q^5*(p2q*(108*s12^5*s13 + 216*s12^4*s13^2 + 108*s12^3*s13^3 +
              (216*s12^4*s13 + 252*s12^3*s13^2 + 36*s12^2*s13^3)*s23 +
              (-36*s12^4 + 126*s12^3*s13 + 72*s12^2*s13^2 - 18*s12*s13^3)*s23^
                2 + (-36*s12^3 + 54*s12^2*s13 - 18*s12*s13^2)*s23^3) +
            p1q*((9*s12^5 + 9*s12^4*s13 + 63*s12^3*s13^2 + 63*s12^2*s13^3)*
               s23 + (-9*s12^4 + 36*s12^3*s13 + 117*s12^2*s13^2)*s23^2 +
              (54*s12^2*s13 - 18*s12*s13^2)*s23^3 + (18*s12^2 - 18*s12*s13)*
               s23^4)) + p3q^4*(p2q^2*(324*s12^5*s13 + 432*s12^4*s13^2 -
              108*s12^3*s13^3 - 216*s12^2*s13^4 + (648*s12^4*s13 +
                324*s12^3*s13^2 - 396*s12^2*s13^3 - 72*s12*s13^4)*s23 +
              (-54*s12^4 + 396*s12^3*s13 - 63*s12^2*s13^2 - 144*s12*s13^3 +
                9*s13^4)*s23^2 + (-54*s12^3 + 126*s12^2*s13 - 81*s12*s13^2 +
                9*s13^3)*s23^3) + p1q*p2q*(108*s12^5*s13 + 216*s12^4*s13^2 +
              108*s12^3*s13^3 + (27*s12^5 + 9*s12^4*s13 - 81*s12^3*s13^2 -
                153*s12^2*s13^3 - 90*s12*s13^4)*s23 + (-27*s12^4 -
                198*s12^3*s13 - 261*s12^2*s13^2 - 270*s12*s13^3)*s23^2 +
              (18*s12^3 - 252*s12*s13^2 - 18*s13^3)*s23^3 + (72*s12^2 -
                54*s12*s13 - 18*s13^2)*s23^4) +
            p1q^2*((-72*s12^4*s13 + 72*s12^2*s13^3)*s23 + (-63*s12^4 -
                72*s12^3*s13 + 63*s12^2*s13^2 - 72*s12*s13^3)*s23^2 +
              (-27*s12^3 + 27*s12^2*s13 - 144*s12*s13^2)*s23^3 +
              (27*s12^2 - 72*s12*s13 + 9*s13^2)*s23^4 + (-9*s12 + 9*s13)*s23^
                5)) + p3q^3*(p2q^3*(324*s12^5*s13 - 864*s12^3*s13^3 -
              432*s12^2*s13^4 + 108*s12*s13^5 + (648*s12^4*s13 -
                540*s12^3*s13^2 - 1188*s12^2*s13^3 + 36*s12*s13^4 + 36*s13^5)*
               s23 + (-36*s12^4 + 432*s12^3*s13 - 540*s12^2*s13^2 -
                216*s12*s13^3 + 72*s13^4)*s23^2 + (-36*s12^3 + 144*s12^2*
                 s13 - 144*s12*s13^2 + 36*s13^3)*s23^3) +
            p1q*p2q^2*(216*s12^5*s13 + 216*s12^4*s13^2 - 216*s12^3*s13^3 -
              216*s12^2*s13^4 + (27*s12^5 - 135*s12^4*s13 - 1224*s12^3*
                 s13^2 - 1476*s12^2*s13^3 - 387*s12*s13^4 + 27*s13^5)*s23 +
              (-27*s12^4 - 666*s12^3*s13 - 1710*s12^2*s13^2 - 1062*s12*
                 s13^3 + 9*s13^4)*s23^2 + (54*s12^3 - 162*s12^2*s13 -
                738*s12*s13^2 - 90*s13^3)*s23^3 + (108*s12^2 - 36*s12*s13 -
                72*s13^2)*s23^4) + p1q^3*((9*s12^5 - 63*s12^4*s13 -
                81*s12^3*s13^2 - 9*s12^2*s13^3)*s23 + (-27*s12^4 +
                54*s12^3*s13 + 63*s12^2*s13^2 - 90*s12*s13^3)*s23^2 +
              (63*s12^3 + 189*s12^2*s13 - 153*s12*s13^2 + 9*s13^3)*s23^3 +
              (81*s12^2 - 72*s12*s13 + 27*s13^2)*s23^4 + (-18*s12 + 18*s13)*
               s23^5) + p1q^2*p2q*((18*s12^5 - 126*s12^4*s13 + 18*s12^3*
                 s13^2 + 162*s12^2*s13^3)*s23 + (-72*s12^4 + 144*s12^3*s13 +
                684*s12^2*s13^2 + 144*s12*s13^3)*s23^2 + (54*s12^3 +
                630*s12^2*s13 + 288*s12*s13^2 + 36*s13^3)*s23^3 +
              (108*s12^2 + 108*s12*s13 + 72*s13^2)*s23^4 + (-36*s12 + 36*s13)*
               s23^5)) + p3q*(p2q^5*(-216*s12^4*s13^2 - 108*s12^3*s13^3 +
              432*s12^2*s13^4 + 324*s12*s13^5 + (-432*s12^3*s13^2 +
                144*s12^2*s13^3 + 684*s12*s13^4 + 108*s13^5)*s23 +
              (18*s12^3*s13 - 252*s12^2*s13^2 + 234*s12*s13^3 + 144*s13^4)*
               s23^2 + (18*s12^2*s13 - 54*s12*s13^2 + 36*s13^3)*s23^3) +
            p1q*p2q^4*(-216*s12^4*s13^2 - 216*s12^3*s13^3 + 216*s12^2*s13^4 +
              216*s12*s13^5 + (-162*s12^4*s13 - 1575*s12^3*s13^2 -
                1827*s12^2*s13^3 - 369*s12*s13^4 + 45*s13^5)*s23 +
              (-234*s12^3*s13 - 2151*s12^2*s13^2 - 1674*s12*s13^3 -
                117*s13^4)*s23^2 + (18*s12^3 - 900*s12*s13^2 - 234*s13^3)*s23^
                3 + (18*s12^2 + 54*s12*s13 - 72*s13^2)*s23^4) +
            p1q^5*((45*s12^3 - 63*s12^2*s13 - 117*s12*s13^2 - 9*s13^3)*s23^
                3 + (9*s12^2 - 144*s12*s13 - 9*s13^2)*s23^4 - 36*s12*s23^5) +
            p1q^3*p2q^2*((-18*s12^4*s13 - 153*s12^3*s13^2 - 189*s12^2*s13^3 -
                63*s12*s13^4 - 9*s13^5)*s23 + (-36*s12^4 + 54*s12^3*s13 +
                171*s12^2*s13^2 + 198*s12*s13^3 + 45*s13^4)*s23^2 +
              (-27*s12^3 + 243*s12^2*s13 + 297*s12*s13^2 + 27*s13^3)*s23^3 +
              (-117*s12^2 - 18*s12*s13 - 45*s13^2)*s23^4 + (-126*s12 -
                18*s13)*s23^5) + p1q^4*p2q*((-18*s12^4 - 144*s12^3*s13 +
                144*s12*s13^3 + 18*s13^4)*s23^2 + (54*s12^3 - 180*s12^2*s13 -
                18*s12*s13^2)*s23^3 + (-18*s12^2 - 180*s12*s13 + 18*s13^2)*
               s23^4 + (-90*s12 + 36*s13)*s23^5) + p1q^2*p2q^3*
             ((18*s12^5 - 18*s12^4*s13 - 702*s12^3*s13^2 - 1134*s12^2*s13^3 -
                504*s12*s13^4 - 36*s13^5)*s23 + (54*s12^4 + 576*s12^3*s13 -
                144*s12^2*s13^2 - 576*s12*s13^3 - 90*s13^4)*s23^2 +
              (108*s12^3 + 1260*s12^2*s13 + 630*s12*s13^2 + 18*s13^3)*s23^3 +
              (36*s12^2 + 612*s12*s13 + 108*s13^2)*s23^4 + (-36*s12 + 36*s13)*
               s23^5)) + p3q^2*(p2q^4*(108*s12^5*s13 - 432*s12^4*s13^2 -
              864*s12^3*s13^3 + 324*s12*s13^5 + (216*s12^4*s13 -
                1044*s12^3*s13^2 - 828*s12^2*s13^3 + 540*s12*s13^4 +
                108*s13^5)*s23 + (-9*s12^4 + 180*s12^3*s13 - 657*s12^2*
                 s13^2 + 36*s12*s13^3 + 162*s13^4)*s23^2 + (-9*s12^3 +
                81*s12^2*s13 - 126*s12*s13^2 + 54*s13^3)*s23^3) +
            p1q*p2q^3*(108*s12^5*s13 - 216*s12^4*s13^2 - 648*s12^3*s13^3 -
              216*s12^2*s13^4 + 108*s12*s13^5 + (9*s12^5 - 297*s12^4*s13 -
                2376*s12^3*s13^2 - 2772*s12^2*s13^3 - 657*s12*s13^4 +
                45*s13^5)*s23 + (-9*s12^4 - 666*s12^3*s13 - 2934*s12^2*
                 s13^2 - 1998*s12*s13^3 - 81*s13^4)*s23^2 + (54*s12^3 -
                126*s12^2*s13 - 1134*s12*s13^2 - 234*s13^3)*s23^3 +
              (72*s12^2 + 36*s12*s13 - 108*s13^2)*s23^4) +
            p1q^4*((-36*s12^4 + 126*s12^3*s13 + 180*s12^2*s13^2 +
                18*s12*s13^3)*s23^2 + (36*s12^3 + 144*s12^2*s13 -
                54*s12*s13^2 + 18*s13^3)*s23^3 + (27*s12^2 - 126*s12*s13 +
                27*s13^2)*s23^4 + (-45*s12 + 9*s13)*s23^5) +
            p1q^3*p2q*((9*s12^5 + 63*s12^4*s13 + 189*s12^3*s13^2 +
                153*s12^2*s13^3 + 18*s12*s13^4)*s23 + (-45*s12^4 +
                306*s12^3*s13 + 747*s12^2*s13^2 + 306*s12*s13^3 - 18*s13^4)*
               s23^2 + (99*s12^3 + 423*s12^2*s13 + 315*s12*s13^2 + 27*s13^3)*
               s23^3 + (63*s12^2 - 108*s12*s13 + 63*s13^2)*s23^4 +
              (-90*s12 + 18*s13)*s23^5) + p1q^2*p2q^2*
             ((36*s12^5 - 126*s12^4*s13 - 522*s12^3*s13^2 - 630*s12^2*s13^3 -
                270*s12*s13^4)*s23 + (45*s12^4 + 486*s12^3*s13 +
                486*s12^2*s13^2 - 126*s12*s13^3 - 63*s13^4)*s23^2 +
              (189*s12^3 + 1359*s12^2*s13 + 819*s12*s13^2 + 9*s13^3)*s23^3 +
              (126*s12^2 + 540*s12*s13 + 126*s13^2)*s23^4 + (-54*s12 +
                54*s13)*s23^5)))*Log((p2q + p3q)/(p1q + p2q + p3q))^2)/
        (p1q*p3q^5*(4*s12^4*s13 + 4*s12^3*s13^2)*s23^2 +
         p1q*p2q^5*(4*s12^2*s13^3 + 4*s12*s13^4)*s23^2 -
         4*p1q^5*p2q*s12*s13*s23^5 + p1q^2*p2q^4*
          ((4*s12^2*s13^3 + 4*s12*s13^4)*s23^2 +
           (-8*s12^2*s13^2 - 12*s12*s13^3)*s23^3) + p1q^3*p2q^3*
          ((-8*s12^2*s13^2 - 12*s12*s13^3)*s23^3 +
           (4*s12^2*s13 + 12*s12*s13^2)*s23^4) + p1q^4*p2q^2*
          ((4*s12^2*s13 + 12*s12*s13^2)*s23^4 - 4*s12*s13*s23^5) +
         p3q^4*(p1q*p2q*(12*s12^4*s13 + 4*s12^3*s13^2 - 8*s12^2*s13^3)*
            s23^2 + p1q^2*((4*s12^4*s13 + 4*s12^3*s13^2)*s23^2 +
             (-12*s12^3*s13 - 8*s12^2*s13^2)*s23^3)) +
         p3q^3*(p1q*p2q^2*(12*s12^4*s13 - 12*s12^3*s13^2 - 20*s12^2*s13^3 +
             4*s12*s13^4)*s23^2 + p1q^2*p2q*((8*s12^4*s13 - 8*s12^2*s13^3)*
              s23^2 + (-32*s12^3*s13 - 24*s12^2*s13^2 - 8*s12*s13^3)*s23^3) +
           p1q^3*((-12*s12^3*s13 - 8*s12^2*s13^2)*s23^3 +
             (12*s12^2*s13 + 4*s12*s13^2)*s23^4)) +
         p3q*(p1q*p2q^4*(-8*s12^3*s13^2 + 4*s12^2*s13^3 + 12*s12*s13^4)*
            s23^2 - 4*p1q^5*s12*s13*s23^5 + p1q^2*p2q^3*
            ((-8*s12^3*s13^2 + 8*s12*s13^4)*s23^2 + (-8*s12^3*s13 - 24*s12^2*
                s13^2 - 32*s12*s13^3)*s23^3) + p1q^3*p2q^2*
            ((-8*s12^3*s13 - 16*s12^2*s13^2 - 20*s12*s13^3)*s23^3 +
             (20*s12^2*s13 + 28*s12*s13^2)*s23^4) + p1q^4*p2q*
            ((16*s12^2*s13 + 16*s12*s13^2)*s23^4 - 8*s12*s13*s23^5)) +
         p3q^2*(p1q*p2q^3*(4*s12^4*s13 - 20*s12^3*s13^2 - 12*s12^2*s13^3 +
             12*s12*s13^4)*s23^2 + p1q^2*p2q^2*
            ((4*s12^4*s13 - 12*s12^3*s13^2 - 12*s12^2*s13^3 + 4*s12*s13^4)*
              s23^2 + (-28*s12^3*s13 - 32*s12^2*s13^2 - 28*s12*s13^3)*
              s23^3) + p1q^3*p2q*((-20*s12^3*s13 - 16*s12^2*s13^2 - 8*s12*
                s13^3)*s23^3 + (28*s12^2*s13 + 20*s12*s13^2)*s23^4) +
           p1q^4*((12*s12^2*s13 + 4*s12*s13^2)*s23^4 - 4*s12*s13*s23^5))) +
       ((p2q^2*(144*s12^2*s13 + 144*s12*s13^2 + (216*s12*s13 + 72*s13^2)*
             s23 + 72*s13*s23^2) + p1q*p2q*((-18*s12^2 - 36*s12*s13 -
              18*s13^2)*s23 + (-22*s12 - 22*s13)*s23^2 - 4*s23^3) +
          p3q*(p2q*(144*s12^2*s13 + 144*s12*s13^2 + (36*s12^2 + 216*s12*s13 +
                36*s13^2)*s23 + (36*s12 + 36*s13)*s23^2) +
            p1q*((-54*s12^2 - 36*s12*s13 + 18*s13^2)*s23 + (-58*s12 + 14*s13)*
               s23^2 - 4*s23^3)))*Log(-s12 - s13 - s23)^2)/
        (9*p1q*p2q*s12*s13*s23^2 + 9*p1q*p3q*s12*s13*s23^2) +
       ((p2q^2*(36*s12^2*s13 + 36*s12*s13^2 + (72*s12*s13 + 36*s13^2)*s23 +
            36*s13*s23^2) + p1q*p2q*((-9*s12*s13 - 9*s13^2)*s23 +
            (-2*s12 - 11*s13)*s23^2 - 2*s23^3) +
          p3q*(p2q*(36*s12^2*s13 + 36*s12*s13^2 + (54*s12*s13 + 18*s13^2)*
               s23 + 18*s13*s23^2) + p1q*((9*s12*s13 + 9*s13^2)*s23 +
              (-2*s12 + 7*s13)*s23^2 - 2*s23^3)))*Log(s12/(s12 + s13 + s23))^
          2)/(4*p1q*p2q*s12*s13*s23^2 + 4*p1q*p3q*s12*s13*s23^2) +
       ((p2q^2*(36*s12^2*s13 + 36*s12*s13^2 + 36*s12*s13*s23) +
          p1q*p2q*((-9*s12^2 - 9*s12*s13)*s23 + (-11*s12 - 2*s13)*s23^2 -
            2*s23^3) + p3q*(p2q*(36*s12^2*s13 + 36*s12*s13^2 +
              (18*s12^2 + 54*s12*s13)*s23 + 18*s12*s23^2) +
            p1q*((-27*s12^2 - 27*s12*s13)*s23 + (-29*s12 - 2*s13)*s23^2 -
              2*s23^3)))*Log(s13/(s12 + s13 + s23))^2)/
        (4*p1q*p2q*s12*s13*s23^2 + 4*p1q*p3q*s12*s13*s23^2) +
       ((p1q^2*((189*s12^5*s13 + 378*s12^4*s13^2 - 378*s12^2*s13^4 -
              189*s12*s13^5)*s23 + (180*s12^5 + 207*s12^4*s13 -
              225*s12^3*s13^2 - 351*s12^2*s13^3 - 99*s12*s13^4)*s23^2 +
            (180*s12^4 - 162*s12^3*s13 - 252*s12^2*s13^2 + 90*s12*s13^3)*
             s23^3) + p3q^2*((189*s12^5*s13 + 378*s12^4*s13^2 -
              378*s12^2*s13^4 - 189*s12*s13^5)*s23 +
            (180*s12^5 + 207*s12^4*s13 - 225*s12^3*s13^2 - 351*s12^2*s13^3 -
              99*s12*s13^4)*s23^2 + (180*s12^4 - 162*s12^3*s13 -
              252*s12^2*s13^2 + 90*s12*s13^3)*s23^3) +
          p2q^2*(3024*s12^5*s13^2 + 9072*s12^4*s13^3 + 9072*s12^3*s13^4 +
            3024*s12^2*s13^5 + (9*s12^5*s13 + 5562*s12^4*s13^2 +
              11412*s12^3*s13^3 + 6354*s12^2*s13^4 + 675*s12*s13^5 +
              180*s13^6)*s23 + (-81*s12^4*s13 + 2691*s12^3*s13^2 +
              3249*s12^2*s13^3 + 477*s12*s13^4)*s23^2 +
            (-90*s12^3*s13 + 252*s12^2*s13^2 + 162*s12*s13^3 - 180*s13^4)*
             s23^3) + p1q*p2q*((-180*s12^5*s13 - 1008*s12^4*s13^2 -
              2268*s12^3*s13^3 - 2016*s12^2*s13^4 - 576*s12*s13^5)*s23 +
            (-160*s12^5 - 1310*s12^4*s13 - 2228*s12^3*s13^2 -
              1778*s12^2*s13^3 - 664*s12*s13^4 - 180*s13^5)*s23^2 +
            (-320*s12^4 - 1344*s12^3*s13 - 430*s12^2*s13^2 + 466*s12*s13^3 -
              20*s13^4)*s23^3 + (-160*s12^3 - 214*s12^2*s13 + 214*s12*s13^2 +
              160*s13^3)*s23^4) + p3q*(p2q*(3024*s12^5*s13^2 +
              9072*s12^4*s13^3 + 9072*s12^3*s13^4 + 3024*s12^2*s13^5 +
              (180*s12^6 + 486*s12^5*s13 + 5976*s12^4*s13^2 + 11412*s12^3*
                 s13^3 + 5940*s12^2*s13^4 + 198*s12*s13^5)*s23 +
              (360*s12^5 + 234*s12^4*s13 + 2394*s12^3*s13^2 + 2970*s12^2*
                 s13^3 + 270*s12*s13^4 - 180*s13^5)*s23^2 + (180*s12^4 -
                252*s12^3*s13 + 252*s12*s13^3 - 180*s13^4)*s23^3) +
            p1q*((-180*s12^6 - 288*s12^5*s13 - 1692*s12^4*s13^2 -
                3096*s12^3*s13^3 - 1152*s12^2*s13^4 + 360*s12*s13^5)*s23 +
              (-160*s12^5 - 1130*s12^4*s13 - 3560*s12^3*s13^2 - 2426*s12^2*
                 s13^3 + 380*s12*s13^4)*s23^2 + (-140*s12^4 - 1416*s12^3*
                 s13 - 934*s12^2*s13^2 + 394*s12*s13^3 + 160*s13^4)*s23^3 +
              (-160*s12^3 - 214*s12^2*s13 + 214*s12*s13^2 + 160*s13^3)*s23^
                4)))*Log(s23/(s12 + s13 + s23)))/
        (p1q*p2q*(36*s12^4*s13^2 + 72*s12^3*s13^3 + 36*s12^2*s13^4)*s23^2 +
         p1q*p3q*(36*s12^4*s13^2 + 72*s12^3*s13^3 + 36*s12^2*s13^4)*s23^2) +
       ((p3q^5*((153*s12^6*s13^2 - 153*s12^4*s13^4)*s23 +
            (-180*s12^7 + 36*s12^6*s13 + 369*s12^5*s13^2 - 243*s12^4*s13^3 -
              90*s12^3*s13^4)*s23^2 + (-180*s12^6 + 216*s12^5*s13 -
              90*s12^3*s13^3)*s23^3) + p2q^5*(-648*s12^4*s13^5 -
            648*s12^3*s13^6 + (180*s12^5*s13^3 + 207*s12^4*s13^4 -
              1098*s12^3*s13^5 - 351*s12^2*s13^6 - 54*s12*s13^7 - 180*s13^8)*
             s23 + (270*s12^4*s13^3 + 117*s12^3*s13^4 - 693*s12^2*s13^5 +
              90*s12*s13^6)*s23^2 + (90*s12^3*s13^3 - 216*s12*s13^5 +
              180*s13^6)*s23^3) + p1q*p2q^4*(-648*s12^4*s13^5 -
            648*s12^3*s13^6 + (1305*s12^4*s13^4 - 126*s12^3*s13^5 -
              477*s12^2*s13^6 + 126*s12*s13^7 - 180*s13^8)*s23 +
            (-200*s12^5*s13^2 - 490*s12^4*s13^3 + 2251*s12^3*s13^4 -
              161*s12^2*s13^5 + 412*s12*s13^6 + 540*s13^7)*s23^2 +
            (-220*s12^4*s13^2 - 636*s12^3*s13^3 + 1668*s12^2*s13^4 -
              376*s12*s13^5 + 200*s13^6)*s23^3 + (-20*s12^3*s13^2 -
              326*s12^2*s13^3 + 758*s12*s13^4 - 520*s13^5)*s23^4) +
          p1q^5*((153*s12^4*s13^2 - 153*s12^2*s13^4)*s23^3 +
            (-180*s12^5 + 36*s12^4*s13 + 369*s12^3*s13^2 - 243*s12^2*s13^3 -
              90*s12*s13^4)*s23^4 + (-180*s12^4 + 216*s12^3*s13 -
              90*s12*s13^3)*s23^5) + p1q^2*p2q^3*
           ((630*s12^5*s13^3 + 3033*s12^4*s13^4 + 2106*s12^3*s13^5 -
              117*s12^2*s13^6 + 180*s12*s13^7)*s23 +
            (-20*s12^5*s13^2 + 158*s12^4*s13^3 + 4285*s12^3*s13^4 +
              1189*s12^2*s13^5 - 128*s12*s13^6 + 540*s13^7)*s23^2 +
            (-140*s12^5*s13 + 499*s12^4*s13^2 - 1484*s12^3*s13^3 +
              1819*s12^2*s13^4 - 732*s12*s13^5 - 520*s13^6)*s23^3 +
            (-370*s12^4*s13 + 1081*s12^3*s13^2 - 1907*s12^2*s13^3 +
              808*s12*s13^4 - 560*s13^5)*s23^4 + (-230*s12^3*s13 +
              652*s12^2*s13^2 - 868*s12*s13^3 + 500*s13^4)*s23^5) +
          p1q^4*p2q*((-306*s12^4*s13^3 + 306*s12^2*s13^5)*s23^2 +
            (180*s12^5*s13 + 369*s12^4*s13^2 - 576*s12^3*s13^3 +
              207*s12^2*s13^4 + 360*s12*s13^5)*s23^3 +
            (-20*s12^5 + 50*s12^4*s13 + 685*s12^3*s13^2 - 89*s12^2*s13^3 +
              304*s12*s13^4 + 180*s13^5)*s23^4 + (140*s12^4 - 276*s12^3*s13 +
              606*s12^2*s13^2 - 70*s12*s13^3 + 20*s13^4)*s23^5 +
            (160*s12^3 - 326*s12^2*s13 + 326*s12*s13^2 - 160*s13^3)*s23^6) +
          p1q^3*p2q^2*((153*s12^4*s13^4 - 153*s12^2*s13^6)*s23 +
            (18*s12^5*s13^2 - 1818*s12^4*s13^3 - 927*s12^3*s13^4 +
              153*s12^2*s13^5 - 450*s12*s13^6)*s23^2 +
            (40*s12^5*s13 + 611*s12^4*s13^2 - 3440*s12^3*s13^3 -
              623*s12^2*s13^4 - 212*s12*s13^5 - 540*s13^6)*s23^3 +
            (160*s12^5 - 356*s12^4*s13 + 1255*s12^3*s13^2 - 1913*s12^2*s13^
                3 + 444*s12*s13^4 + 140*s13^5)*s23^4 +
            (320*s12^4 - 722*s12^3*s13 + 1258*s12^2*s13^2 - 848*s12*s13^3 +
              520*s13^4)*s23^5 + (160*s12^3 - 326*s12^2*s13 + 326*s12*s13^2 -
              160*s13^3)*s23^6) + p3q^4*(p2q*(-648*s12^6*s13^3 -
              648*s12^5*s13^4 + (-180*s12^8 - 54*s12^7*s13 + 585*s12^6*
                 s13^2 - 1404*s12^5*s13^3 - 729*s12^4*s13^4 + 486*s12^3*
                 s13^5)*s23 + (-540*s12^7 + 648*s12^6*s13 + 909*s12^5*s13^2 -
                2043*s12^4*s13^3 + 450*s12^3*s13^4 + 360*s12^2*s13^5)*s23^2 +
              (-360*s12^6 + 882*s12^5*s13 - 432*s12^4*s13^2 - 396*s12^3*
                 s13^3 + 360*s12^2*s13^4)*s23^3) +
            p1q*((180*s12^8 - 126*s12^7*s13 + 477*s12^6*s13^2 + 774*s12^5*
                 s13^3 - 9*s12^4*s13^4)*s23 + (-20*s12^7 - 490*s12^6*s13 +
                1423*s12^5*s13^2 + 811*s12^4*s13^3 + 196*s12^3*s13^4)*s23^2 +
              (320*s12^6 - 222*s12^5*s13 + 192*s12^4*s13^2 + 542*s12^3*
                 s13^3 + 20*s12^2*s13^4)*s23^3 + (520*s12^5 - 758*s12^4*s13 +
                326*s12^3*s13^2 + 20*s12^2*s13^3)*s23^4)) +
          p3q^3*(p2q^2*(-1296*s12^6*s13^3 + 1296*s12^4*s13^5 +
              (-180*s12^8 + 486*s12^7*s13 + 747*s12^6*s13^2 - 3366*s12^5*
                 s13^3 + 1422*s12^4*s13^4 + 1584*s12^3*s13^5 - 693*s12^2*
                 s13^6)*s23 + (-360*s12^7 + 1602*s12^6*s13 - 27*s12^5*s13^2 -
                3681*s12^4*s13^3 + 3123*s12^3*s13^4 + 9*s12^2*s13^5 -
                450*s12*s13^6)*s23^2 + (-180*s12^6 + 1116*s12^5*s13 -
                1224*s12^4*s13^2 - 306*s12^3*s13^3 + 1152*s12^2*s13^4 -
                450*s12*s13^5)*s23^3) + p1q*p2q*(-648*s12^6*s13^3 -
              648*s12^5*s13^4 + (-720*s12^7*s13 + 1458*s12^6*s13^2 +
                342*s12^5*s13^3 - 162*s12^4*s13^4 + 1026*s12^3*s13^5)*s23 +
              (320*s12^7 - 472*s12^6*s13 + 3016*s12^5*s13^2 - 774*s12^4*
                 s13^3 + 1056*s12^3*s13^4 + 526*s12^2*s13^5)*s23^2 +
              (1360*s12^6 - 688*s12^5*s13 + 126*s12^4*s13^2 + 196*s12^3*
                 s13^3 + 486*s12^2*s13^4 + 140*s12*s13^5)*s23^3 +
              (1040*s12^5 - 1656*s12^4*s13 + 872*s12^3*s13^2 - 180*s12^2*
                 s13^3 + 140*s12*s13^4)*s23^4) +
            p1q^2*((180*s12^8 - 126*s12^7*s13 + 477*s12^6*s13^2 +
                774*s12^5*s13^3 - 9*s12^4*s13^4)*s23 + (-380*s12^7 -
                238*s12^6*s13 + 937*s12^5*s13^2 - 251*s12^4*s13^3 +
                232*s12^3*s13^4)*s23^2 + (830*s12^5*s13 - 1889*s12^4*s13^2 -
                918*s12^3*s13^3 - 93*s12^2*s13^4)*s23^3 + (60*s12^5 +
                10*s12^4*s13 - 841*s12^3*s13^2 - 515*s12^2*s13^3 +
                230*s12*s13^4)*s23^4 + (-500*s12^4 + 868*s12^3*s13 -
                652*s12^2*s13^2 + 230*s12*s13^3)*s23^5)) +
          p3q*(p2q^4*(1296*s12^5*s13^4 - 1296*s12^3*s13^6 +
              (-540*s12^6*s13^2 - 288*s12^5*s13^3 + 2835*s12^4*s13^4 -
                1494*s12^3*s13^5 - 819*s12^2*s13^6 + 486*s12*s13^7 -
                180*s13^8)*s23 + (-900*s12^5*s13^2 + 288*s12^4*s13^3 +
                2115*s12^3*s13^4 - 1935*s12^2*s13^5 + 144*s12*s13^6 +
                180*s13^7)*s23^2 + (-360*s12^4*s13^2 + 396*s12^3*s13^3 +
                432*s12^2*s13^4 - 882*s12*s13^5 + 360*s13^6)*s23^3) +
            p1q*p2q^3*(1296*s12^5*s13^4 + 648*s12^4*s13^5 - 648*s12^3*s13^6 +
              (-54*s12^5*s13^3 + 6318*s12^4*s13^4 + 2574*s12^3*s13^5 -
                1134*s12^2*s13^6 + 720*s12*s13^7)*s23 + (-320*s12^6*s13 -
                554*s12^5*s13^2 - 1108*s12^4*s13^3 + 7758*s12^3*s13^4 +
                204*s12^2*s13^5 - 4*s12*s13^6 + 720*s13^7)*s23^2 +
              (-460*s12^5*s13 - 194*s12^4*s13^2 - 1512*s12^3*s13^3 +
                4286*s12^2*s13^4 - 828*s12*s13^5 - 320*s13^6)*s23^3 +
              (-140*s12^4*s13 + 180*s12^3*s13^2 - 872*s12^2*s13^3 +
                1656*s12*s13^4 - 1040*s13^5)*s23^4) + p1q^2*p2q^2*
             ((1026*s12^6*s13^2 + 1260*s12^5*s13^3 + 3393*s12^4*s13^4 +
                2628*s12^3*s13^5 - 531*s12^2*s13^6)*s23 + (40*s12^6*s13 +
                1464*s12^5*s13^2 - 2130*s12^4*s13^3 + 3185*s12^3*s13^4 +
                1427*s12^2*s13^5 - 830*s12*s13^6)*s23^2 + (-500*s12^6 +
                78*s12^5*s13 + 1309*s12^4*s13^2 - 6300*s12^3*s13^3 +
                53*s12^2*s13^4 - 714*s12*s13^5 - 1060*s13^6)*s23^3 +
              (-1000*s12^5 + 446*s12^4*s13 + 1433*s12^3*s13^2 - 4765*s12^2*
                 s13^3 + 670*s12*s13^4 - 60*s13^5)*s23^4 + (-500*s12^4 +
                408*s12^3*s13 + 652*s12^2*s13^2 - 1506*s12*s13^3 +
                1000*s13^4)*s23^5) + p1q^3*p2q*((-306*s12^5*s13^3 +
                306*s12^3*s13^5)*s23 + (360*s12^6*s13 - 702*s12^5*s13^2 -
                2502*s12^4*s13^3 - 504*s12^3*s13^4 + 324*s12^2*s13^5)*s23^2 +
              (40*s12^6 + 660*s12^5*s13 - 966*s12^4*s13^2 - 3442*s12^3*
                 s13^3 - 1600*s12^2*s13^4 + 220*s12*s13^5)*s23^3 +
              (-320*s12^5 + 12*s12^4*s13 + 1160*s12^3*s13^2 - 1736*s12^2*
                 s13^3 + 96*s12*s13^4 + 680*s13^5)*s23^4 + (-40*s12^4 -
                220*s12^3*s13 + 1212*s12^2*s13^2 - 472*s12*s13^3 + 360*s13^4)*
               s23^5 + (320*s12^3 - 652*s12^2*s13 + 652*s12*s13^2 -
                320*s13^3)*s23^6) + p1q^4*((-306*s12^5*s13^2 + 306*s12^3*
                 s13^4)*s23^2 + (540*s12^6 - 198*s12^5*s13 - 423*s12^4*
                 s13^2 + 774*s12^3*s13^3 - 153*s12^2*s13^4)*s23^3 +
              (340*s12^5 - 922*s12^4*s13 + 1243*s12^3*s13^2 + 343*s12^2*
                 s13^3 - 110*s12*s13^4)*s23^4 + (-40*s12^4 - 150*s12^3*s13 +
                606*s12^2*s13^2 + 56*s12*s13^3 - 160*s13^4)*s23^5 +
              (160*s12^3 - 326*s12^2*s13 + 326*s12*s13^2 - 160*s13^3)*s23^
                6)) + p3q^2*(p2q^3*(-648*s12^6*s13^3 + 1944*s12^5*s13^4 +
              1944*s12^4*s13^5 - 648*s12^3*s13^6 + (540*s12^7*s13 -
                225*s12^6*s13^2 - 2430*s12^5*s13^3 + 4626*s12^4*s13^4 +
                702*s12^3*s13^5 - 1161*s12^2*s13^6 + 540*s12*s13^7)*s23 +
              (990*s12^6*s13 - 1467*s12^5*s13^2 - 1863*s12^4*s13^3 +
                4581*s12^3*s13^4 - 1593*s12^2*s13^5 - 396*s12*s13^6 +
                180*s13^7)*s23^2 + (450*s12^5*s13 - 1152*s12^4*s13^2 +
                306*s12^3*s13^3 + 1224*s12^2*s13^4 - 1116*s12*s13^5 +
                180*s13^6)*s23^3) + p1q*p2q^2*(-648*s12^6*s13^3 +
              648*s12^5*s13^4 + 1296*s12^4*s13^5 + (1881*s12^6*s13^2 +
                252*s12^5*s13^3 + 4860*s12^4*s13^4 + 2988*s12^3*s13^5 -
                1557*s12^2*s13^6)*s23 + (520*s12^7 + 112*s12^6*s13 +
                2049*s12^5*s13^2 - 1627*s12^4*s13^3 + 5791*s12^3*s13^4 +
                81*s12^2*s13^5 - 830*s12*s13^6)*s23^2 + (1040*s12^6 -
                926*s12^5*s13 + 284*s12^4*s13^2 - 1222*s12^3*s13^3 +
                2760*s12^2*s13^4 - 312*s12*s13^5 - 520*s13^6)*s23^3 +
              (520*s12^5 - 1038*s12^4*s13 + 746*s12^3*s13^2 - 746*s12^2*
                 s13^3 + 1038*s12*s13^4 - 520*s13^5)*s23^4) +
            p1q^2*p2q*((-540*s12^7*s13 + 1017*s12^6*s13^2 + 1800*s12^5*
                 s13^3 + 1899*s12^4*s13^4 + 1656*s12^3*s13^5)*s23 +
              (-20*s12^7 + 90*s12^6*s13 + 1719*s12^5*s13^2 - 451*s12^4*
                 s13^3 + 1796*s12^3*s13^4 + 346*s12^2*s13^5)*s23^2 +
              (40*s12^6 + 1030*s12^5*s13 - 1187*s12^4*s13^2 - 3214*s12^3*
                 s13^3 - 1643*s12^2*s13^4)*s23^3 + (-940*s12^5 +
                826*s12^4*s13 - 165*s12^3*s13^2 - 3049*s12^2*s13^3 +
                92*s12*s13^4 + 500*s13^5)*s23^4 + (-1000*s12^4 +
                1506*s12^3*s13 - 652*s12^2*s13^2 - 408*s12*s13^3 + 500*s13^4)*
               s23^5) + p1q^3*((153*s12^6*s13^2 - 153*s12^4*s13^4)*s23 +
              (-540*s12^7 + 288*s12^6*s13 - 423*s12^5*s13^2 - 1305*s12^4*
                 s13^3 + 252*s12^3*s13^4)*s23^2 + (40*s12^6 + 1070*s12^5*
                 s13 - 2657*s12^4*s13^2 - 776*s12^3*s13^3 - 113*s12^2*s13^4)*
               s23^3 + (60*s12^5 - 190*s12^4*s13 - 293*s12^3*s13^2 +
                51*s12^2*s13^3 + 210*s12*s13^4)*s23^4 + (-360*s12^4 +
                502*s12^3*s13 - 46*s12^2*s13^2 + 376*s12*s13^3 - 160*s13^4)*
               s23^5 + (160*s12^3 - 326*s12^2*s13 + 326*s12*s13^2 -
                160*s13^3)*s23^6)))*Log((s12 + s13)/(s12 + s13 + s23))*
         Log(s23/(s12 + s13 + s23)))/(36*p1q*p3q^4*s12^5*s13^3*s23^2 +
         36*p1q*p2q^4*s12^3*s13^5*s23^2 + 36*p1q^4*p2q*s12^3*s13^3*s23^4 +
         p1q^2*p2q^3*(36*s12^3*s13^5*s23^2 - 72*s12^3*s13^4*s23^3) +
         p1q^3*p2q^2*(-72*s12^3*s13^4*s23^3 + 36*s12^3*s13^3*s23^4) +
         p3q^3*(p1q*p2q*(72*s12^5*s13^3 - 72*s12^4*s13^4)*s23^2 +
           p1q^2*(36*s12^5*s13^3*s23^2 - 72*s12^4*s13^3*s23^3)) +
         p3q^2*(p1q*p2q^2*(36*s12^5*s13^3 - 144*s12^4*s13^4 + 36*s12^3*s13^5)*
            s23^2 + p1q^2*p2q*((36*s12^5*s13^3 - 72*s12^4*s13^4)*s23^2 +
             (-144*s12^4*s13^3 - 72*s12^3*s13^4)*s23^3) +
           p1q^3*(-72*s12^4*s13^3*s23^3 + 36*s12^3*s13^3*s23^4)) +
         p3q*(p1q*p2q^3*(-72*s12^4*s13^4 + 72*s12^3*s13^5)*s23^2 +
           36*p1q^4*s12^3*s13^3*s23^4 + p1q^2*p2q^2*
            ((-72*s12^4*s13^4 + 36*s12^3*s13^5)*s23^2 +
             (-72*s12^4*s13^3 - 144*s12^3*s13^4)*s23^3) +
           p1q^3*p2q*((-72*s12^4*s13^3 - 72*s12^3*s13^4)*s23^3 +
             72*s12^3*s13^3*s23^4))) +
       ((p2q^2*(-72*s12^2*s13 - 72*s12*s13^2 + (-108*s12*s13 - 36*s13^2)*
             s23 - 36*s13*s23^2) + p1q*p2q*((9*s12^2 + 18*s12*s13 + 9*s13^2)*
             s23 + (29*s12 + 29*s13)*s23^2 + 20*s23^3) +
          p3q*(p2q*(-72*s12^2*s13 - 72*s12*s13^2 + (-18*s12^2 - 108*s12*s13 -
                18*s13^2)*s23 + (-18*s12 - 18*s13)*s23^2) +
            p1q*((27*s12^2 + 18*s12*s13 - 9*s13^2)*s23 + (47*s12 + 11*s13)*
               s23^2 + 20*s23^3)))*Log(s23/(s12 + s13 + s23))^2)/
        (36*p1q*p2q*s12*s13*s23^2 + 36*p1q*p3q*s12*s13*s23^2) +
       Log(-s12 - s13 - s23)*((p2q^2*(504*s12^2*s13 + 504*s12*s13^2 +
             (756*s12*s13 + 252*s13^2)*s23 + 252*s13*s23^2) +
           p1q*p2q*((-87*s12^2 - 126*s12*s13 - 39*s13^2)*s23 +
             (-101*s12 - 53*s13)*s23^2 - 14*s23^3) +
           p3q*(p2q*(504*s12^2*s13 + 504*s12*s13^2 + (126*s12^2 +
                 756*s12*s13 + 126*s13^2)*s23 + (126*s12 + 126*s13)*s23^2) +
             p1q*((-213*s12^2 - 126*s12*s13 + 87*s13^2)*s23 + (-227*s12 +
                 73*s13)*s23^2 - 14*s23^3)))/(6*p1q*p2q*s12*s13*s23^2 +
           6*p1q*p3q*s12*s13*s23^2) +
         ((p2q^2*(36*s12^2*s13 + 36*s12*s13^2 + (72*s12*s13 + 36*s13^2)*s23 +
              36*s13*s23^2) + p1q*p2q*((-9*s12*s13 - 9*s13^2)*s23 +
              (-2*s12 - 11*s13)*s23^2 - 2*s23^3) +
            p3q*(p2q*(36*s12^2*s13 + 36*s12*s13^2 + (54*s12*s13 + 18*s13^2)*
                 s23 + 18*s13*s23^2) + p1q*((9*s12*s13 + 9*s13^2)*s23 +
                (-2*s12 + 7*s13)*s23^2 - 2*s23^3)))*
           Log(s12/(s12 + s13 + s23)))/(2*p1q*p2q*s12*s13*s23^2 +
           2*p1q*p3q*s12*s13*s23^2) +
         ((p2q^2*(36*s12^2*s13 + 36*s12*s13^2 + 36*s12*s13*s23) +
            p1q*p2q*((-9*s12^2 - 9*s12*s13)*s23 + (-11*s12 - 2*s13)*s23^2 -
              2*s23^3) + p3q*(p2q*(36*s12^2*s13 + 36*s12*s13^2 +
                (18*s12^2 + 54*s12*s13)*s23 + 18*s12*s23^2) +
              p1q*((-27*s12^2 - 27*s12*s13)*s23 + (-29*s12 - 2*s13)*s23^2 -
                2*s23^3)))*Log(s13/(s12 + s13 + s23)))/
          (2*p1q*p2q*s12*s13*s23^2 + 2*p1q*p3q*s12*s13*s23^2) +
         ((p2q^2*(-72*s12^2*s13 - 72*s12*s13^2 + (-108*s12*s13 - 36*s13^2)*
               s23 - 36*s13*s23^2) + p1q*p2q*((9*s12^2 + 18*s12*s13 +
                9*s13^2)*s23 + (29*s12 + 29*s13)*s23^2 + 20*s23^3) +
            p3q*(p2q*(-72*s12^2*s13 - 72*s12*s13^2 + (-18*s12^2 -
                  108*s12*s13 - 18*s13^2)*s23 + (-18*s12 - 18*s13)*s23^2) +
              p1q*((27*s12^2 + 18*s12*s13 - 9*s13^2)*s23 + (47*s12 + 11*s13)*
                 s23^2 + 20*s23^3)))*Log(s23/(s12 + s13 + s23)))/
          (18*p1q*p2q*s12*s13*s23^2 + 18*p1q*p3q*s12*s13*s23^2)) +
       nl*((p2q^2*(720*s12^3*s13 + 1440*s12^2*s13^2 + 720*s12*s13^3 +
             (1080*s12^2*s13 + 1440*s12*s13^2 + 360*s13^3)*s23 +
             (360*s12*s13 + 360*s13^2)*s23^2) + p1q*p2q*
            ((-36*s12^3 - 270*s12^2*s13 - 270*s12*s13^2 - 144*s13^3)*s23 +
             (-29*s12^2 - 247*s12*s13 - 164*s13^2)*s23^2 + (7*s12 - 47*s13)*
              s23^3) + p3q*(p2q*(720*s12^3*s13 + 1440*s12^2*s13^2 + 720*s12*
                s13^3 + (180*s12^3 + 1260*s12^2*s13 + 1260*s12*s13^2 +
                 180*s13^3)*s23 + (180*s12^2 + 360*s12*s13 + 180*s13^2)*
                s23^2) + p1q*((-216*s12^3 - 450*s12^2*s13 - 90*s12*s13^2 +
                 36*s13^3)*s23 + (-209*s12^2 - 247*s12*s13 + 16*s13^2)*
                s23^2 + (7*s12 - 47*s13)*s23^3)))/
          (p1q*p2q*(54*s12^2*s13 + 54*s12*s13^2)*s23^2 +
           p1q*p3q*(54*s12^2*s13 + 54*s12*s13^2)*s23^2) +
         ((p2q^2*(-72*s12^2*s13 - 72*s12*s13^2 + (-108*s12*s13 - 36*s13^2)*
               s23 - 36*s13*s23^2) + p1q*p2q*((9*s12^2 + 18*s12*s13 +
                9*s13^2)*s23 + (11*s12 + 11*s13)*s23^2 + 2*s23^3) +
            p3q*(p2q*(-72*s12^2*s13 - 72*s12*s13^2 + (-18*s12^2 -
                  108*s12*s13 - 18*s13^2)*s23 + (-18*s12 - 18*s13)*s23^2) +
              p1q*((27*s12^2 + 18*s12*s13 - 9*s13^2)*s23 + (29*s12 - 7*s13)*
                 s23^2 + 2*s23^3)))*Log(-s12 - s13 - s23))/
          (9*p1q*p2q*s12*s13*s23^2 + 9*p1q*p3q*s12*s13*s23^2) +
         ((p2q^2*(-16*s12^4*s13 - 48*s12^3*s13^2 - 48*s12^2*s13^3 -
              16*s12*s13^4 + (-s12^4 - 30*s12^3*s13 - 60*s12^2*s13^2 -
                34*s12*s13^3 - 3*s13^4)*s23 + (-s12^3 - 13*s12^2*s13 -
                15*s12*s13^2 - 3*s13^3)*s23^2) +
            p1q^2*((-s12^4 - 2*s12^3*s13 + 2*s12*s13^3 + s13^4)*s23 +
              (-s12^3 - s12^2*s13 + s12*s13^2 + s13^3)*s23^2) +
            p3q^2*((-s12^4 - 2*s12^3*s13 + 2*s12*s13^3 + s13^4)*s23 +
              (-s12^3 - s12^2*s13 + s12*s13^2 + s13^3)*s23^2) +
            p1q*p2q*((2*s12^4 + 6*s12^3*s13 + 12*s12^2*s13^2 + 10*s12*s13^3 +
                2*s13^4)*s23 + (7*s12^3 + 12*s12^2*s13 + 11*s12*s13^2 +
                2*s13^3)*s23^2 + (6*s12^2 + 3*s12*s13 - s13^2)*s23^3 +
              (s12 - s13)*s23^4) + p3q*(p2q*(-16*s12^4*s13 - 48*s12^3*s13^2 -
                48*s12^2*s13^3 - 16*s12*s13^4 + (-2*s12^4 - 32*s12^3*s13 -
                  60*s12^2*s13^2 - 32*s12*s13^3 - 2*s13^4)*s23 +
                (-2*s12^3 - 14*s12^2*s13 - 14*s12*s13^2 - 2*s13^3)*s23^2) +
              p1q*((2*s12^4 + 10*s12^3*s13 + 16*s12^2*s13^2 + 6*s12*s13^3 -
                  2*s13^4)*s23 + (7*s12^3 + 16*s12^2*s13 + 11*s12*s13^2 -
                  2*s13^3)*s23^2 + (6*s12^2 + 3*s12*s13 - s13^2)*s23^3 +
                (s12 - s13)*s23^4)))*Log(s23/(s12 + s13 + s23)))/
          (p1q*p2q*(2*s12^3*s13 + 4*s12^2*s13^2 + 2*s12*s13^3)*s23^2 +
           p1q*p3q*(2*s12^3*s13 + 4*s12^2*s13^2 + 2*s12*s13^3)*s23^2)) +
       Log(p1q/(p1q + p2q + p3q))*((-9*s12^2 + 9*s13^2 + (-9*s12 + 9*s13)*
            s23)/(2*s12*s13*s23) +
         ((p2q*p3q^4*(-18*s12^4 - 18*s12^3*s13 + (-36*s12^3 - 18*s12^2*s13)*
               s23 - 18*s12^2*s23^2) + p2q^5*(-18*s12^2*s13^2 -
              18*s12*s13^3 + (-36*s12*s13^2 - 18*s13^3)*s23 -
              18*s13^2*s23^2) + p1q*p2q^4*(-18*s12^2*s13^2 - 18*s12*s13^3 +
              (18*s12^2*s13 - 18*s12*s13^2 - 18*s13^3)*s23 + 36*s12*s13*s23^
                2 + 18*s13*s23^3) + p1q^2*p2q^3*((36*s12^3 + 99*s12^2*s13 +
                72*s12*s13^2 + 9*s13^3)*s23 + (72*s12^2 + 144*s12*s13 +
                54*s13^2)*s23^2 + (36*s12 + 45*s13)*s23^3) +
            p1q^3*p2q^2*((-27*s12^2 - 36*s12*s13 - 9*s13^2)*s23^2 +
              (-54*s12 - 36*s13)*s23^3 - 27*s23^4) +
            p3q^3*(p2q^2*(-36*s12^4 + 36*s12^2*s13^2 + (-72*s12^3 +
                  36*s12^2*s13 + 36*s12*s13^2)*s23 + (-36*s12^2 + 36*s12*s13)*
                 s23^2) + p1q*p2q*(-18*s12^4 - 18*s12^3*s13 +
                (36*s12^2*s13 + 18*s12*s13^2)*s23 + (54*s12^2 + 54*s12*s13)*
                 s23^2 + 36*s12*s23^3)) + p3q*(p2q^4*(36*s12^3*s13 -
                36*s12*s13^3 + (72*s12^2*s13 - 36*s12*s13^2 - 36*s13^3)*s23 +
                (36*s12*s13 - 36*s13^2)*s23^2) + p1q*p2q^3*(36*s12^3*s13 +
                18*s12^2*s13^2 - 18*s12*s13^3 + (54*s12^3 + 198*s12^2*s13 +
                  72*s12*s13^2 - 18*s13^3)*s23 + (108*s12^2 + 198*s12*s13 +
                  18*s13^2)*s23^2 + (54*s12 + 36*s13)*s23^3) +
              p1q^2*p2q^2*((45*s12^3 + 99*s12^2*s13 + 63*s12*s13^2 + 9*s13^3)*
                 s23 + (54*s12^2 + 90*s12*s13 + 36*s13^2)*s23^2 +
                (-27*s12 - 9*s13)*s23^3 - 36*s23^4) + p1q^3*p2q*(
                (-27*s12^2 - 36*s12*s13 - 9*s13^2)*s23^2 + (-54*s12 - 36*s13)*
                 s23^3 - 27*s23^4)) + p3q^2*(p2q^3*(-18*s12^4 +
                54*s12^3*s13 + 54*s12^2*s13^2 - 18*s12*s13^3 +
                (-36*s12^3 + 126*s12^2*s13 + 36*s12*s13^2 - 18*s13^3)*s23 +
                (-18*s12^2 + 72*s12*s13 - 18*s13^2)*s23^2) +
              p1q*p2q^2*(-18*s12^4 + 18*s12^3*s13 + 36*s12^2*s13^2 +
                (36*s12^3 + 162*s12^2*s13 + 54*s12*s13^2 - 18*s13^3)*s23 +
                (126*s12^2 + 144*s12*s13 - 18*s13^2)*s23^2 + 72*s12*s23^3) +
              p1q^2*p2q*((45*s12^3 + 72*s12^2*s13 + 27*s12*s13^2)*s23 +
                (72*s12^2 + 54*s12*s13)*s23^2 + (9*s12 - 18*s13)*s23^3 -
                18*s23^4)))*Log(p2q/(p1q + p2q + p3q)))/
          (2*p1q*p3q^4*s12^3*s23^2 + 2*p1q*p2q^4*s12*s13^2*s23^2 +
           2*p1q^4*p2q*s12*s23^4 + p1q^2*p2q^3*(2*s12*s13^2*s23^2 -
             4*s12*s13*s23^3) + p1q^3*p2q^2*(-4*s12*s13*s23^3 +
             2*s12*s23^4) + p3q^3*(p1q*p2q*(4*s12^3 - 4*s12^2*s13)*s23^2 +
             p1q^2*(2*s12^3*s23^2 - 4*s12^2*s23^3)) +
           p3q^2*(p1q*p2q^2*(2*s12^3 - 8*s12^2*s13 + 2*s12*s13^2)*s23^2 +
             p1q^2*p2q*((2*s12^3 - 4*s12^2*s13)*s23^2 + (-8*s12^2 -
                 4*s12*s13)*s23^3) + p1q^3*(-4*s12^2*s23^3 + 2*s12*s23^4)) +
           p3q*(p1q*p2q^3*(-4*s12^2*s13 + 4*s12*s13^2)*s23^2 +
             2*p1q^4*s12*s23^4 + p1q^2*p2q^2*((-4*s12^2*s13 + 2*s12*s13^2)*
                s23^2 + (-4*s12^2 - 8*s12*s13)*s23^3) + p1q^3*p2q*
              ((-4*s12^2 - 4*s12*s13)*s23^3 + 4*s12*s23^4))) +
         ((p3q^6*(9*s12^4 + 9*s12^3*s13 + 9*s12^3*s23) +
            p2q^6*(45*s12^2*s13^2 + 81*s12*s13^3 + 36*s13^4 +
              (81*s12*s13^2 + 72*s13^3)*s23 + 36*s13^2*s23^2) +
            p1q^5*p2q*((-18*s12^2*s13 - 36*s12*s13^2 - 18*s13^3)*s23 +
              (18*s12^2 - 9*s12*s13 - 27*s13^2)*s23^2 + (18*s12 - 9*s13)*s23^
                3) + p1q*p2q^5*(54*s12^2*s13^2 + 117*s12*s13^3 + 63*s13^4 +
              (-126*s12^2*s13 - 126*s12*s13^2 + 9*s13^3)*s23 +
              (-234*s12*s13 - 162*s13^2)*s23^2 - 108*s13*s23^3) +
            p1q^4*p2q^2*(9*s12^2*s13^2 + 18*s12*s13^3 + 9*s13^4 +
              (36*s12^3 - 54*s12*s13^2 - 18*s13^3)*s23 + (108*s12^2 +
                27*s12*s13 - 36*s13^2)*s23^2 + (63*s12 - 18*s13)*s23^3 -
              9*s23^4) + p1q^6*((9*s12^2 + 18*s12*s13 + 9*s13^2)*s23^2 +
              (18*s12 + 18*s13)*s23^3 + 9*s23^4) + p1q^2*p2q^4*
             (36*s12^3*s13 + 90*s12^2*s13^2 + 99*s12*s13^3 + 45*s13^4 +
              (72*s12^3 + 18*s12^2*s13 - 153*s12*s13^2 - 72*s13^3)*s23 +
              (225*s12^2 + 9*s12*s13 - 171*s13^2)*s23^2 + (225*s12 + 18*s13)*
               s23^3 + 72*s23^4) + p1q^3*p2q^3*(36*s12^3*s13 +
              90*s12^2*s13^2 + 81*s12*s13^3 + 27*s13^4 + (108*s12^3 +
                162*s12^2*s13 + 36*s12*s13^2 - 9*s13^3)*s23 +
              (324*s12^2 + 297*s12*s13 + 27*s13^2)*s23^2 + (288*s12 +
                135*s13)*s23^3 + 72*s23^4) + p3q^5*(p2q*(36*s12^4 +
                18*s12^3*s13 - 18*s12^2*s13^2 + (36*s12^3 - 18*s12^2*s13)*
                 s23) + p1q*(27*s12^4 + 27*s12^3*s13 - 27*s12^2*s13*s23 -
                27*s12^2*s23^2)) + p3q^4*(p2q^2*(54*s12^4 - 18*s12^3*s13 -
                63*s12^2*s13^2 + 9*s12*s13^3 + (54*s12^3 - 72*s12^2*s13 +
                  9*s12*s13^2)*s23) + p1q*p2q*(72*s12^4 + 9*s12^3*s13 -
                63*s12^2*s13^2 + (-36*s12^3 - 171*s12^2*s13)*s23 -
                108*s12^2*s23^2) + p1q^2*(36*s12^4 + 27*s12^3*s13 -
                9*s12^2*s13^2 + (-27*s12^3 - 72*s12^2*s13)*s23 +
                (-36*s12^2 + 27*s12*s13)*s23^2 + 27*s12*s23^3)) +
            p3q^2*(p2q^4*(45*s12^4 - 63*s12^3*s13 - 126*s12^2*s13^2 -
                18*s12*s13^3 + (81*s12^3 - 144*s12^2*s13 - 90*s12*s13^2)*
                 s23 + (36*s12^2 - 72*s12*s13)*s23^2) + p1q*p2q^3*(54*s12^4 -
                81*s12^3*s13 - 171*s12^2*s13^2 - 45*s12*s13^3 - 9*s13^4 +
                (-72*s12^3 - 387*s12^2*s13 - 270*s12*s13^2 - 117*s13^3)*s23 +
                (-198*s12^2 - 270*s12*s13 - 180*s13^2)*s23^2 +
                (-72*s12 - 72*s13)*s23^3) + p1q^2*p2q^2*(18*s12^4 -
                81*s12^3*s13 - 99*s12^2*s13^2 - 9*s12*s13^3 - 9*s13^4 +
                (-189*s12^3 - 396*s12^2*s13 - 207*s12*s13^2 - 126*s13^3)*
                 s23 + (-117*s12^2 - 36*s12*s13 - 153*s13^2)*s23^2 +
                (90*s12 - 36*s13)*s23^3) + p1q^3*p2q*(18*s12^4 -
                9*s12^3*s13 - 27*s12^2*s13^2 + (-72*s12^3 - 135*s12^2*s13 -
                  54*s12*s13^2 - 36*s13^3)*s23 + (72*s12^2 + 135*s12*s13 -
                  45*s13^2)*s23^2 + (126*s12 - 45*s13)*s23^3 - 36*s23^4) +
              p1q^4*(9*s12^4 + 18*s12^3*s13 + 9*s12^2*s13^2 +
                (18*s12^2*s13 + 18*s12*s13^2)*s23 + (45*s12^2 + 81*s12*s13 +
                  9*s13^2)*s23^2 + 45*s12*s23^3 - 9*s23^4)) +
            p3q^3*(p2q^3*(72*s12^4 - 36*s12^2*s13^2 + 36*s12*s13^3 +
                (108*s12^3 - 36*s12^2*s13 + 36*s12*s13^2)*s23 +
                36*s12^2*s23^2) + p1q*p2q^2*(99*s12^4 + 9*s12^3*s13 -
                45*s12^2*s13^2 + 45*s12*s13^3 + (-18*s12^3 - 135*s12^2*s13 +
                  108*s12*s13^2 - 9*s13^3)*s23 + (-117*s12^2 + 72*s12*s13 -
                  9*s13^2)*s23^2) + p1q^2*p2q*(54*s12^4 - 18*s12^3*s13 -
                54*s12^2*s13^2 + 18*s12*s13^3 + (-126*s12^3 - 216*s12^2*s13 +
                  54*s12*s13^2)*s23 + (-72*s12^2 + 162*s12*s13 + 18*s13^2)*
                 s23^2 + (108*s12 + 18*s13)*s23^3) + p1q^3*(9*s12^4 -
                9*s12^3*s13 - 18*s12^2*s13^2 + (-72*s12^3 - 99*s12^2*s13)*
                 s23 + (-36*s12^2 + 45*s12*s13)*s23^2 + (36*s12 - 9*s13)*
                 s23^3 - 9*s23^4)) + p3q*(p2q^5*(-90*s12^3*s13 -
                90*s12^2*s13^2 + 36*s12*s13^3 + 36*s13^4 + (-162*s12^2*s13 -
                  36*s12*s13^2 + 72*s13^3)*s23 + (-72*s12*s13 + 36*s13^2)*
                 s23^2) + p1q*p2q^4*(-108*s12^3*s13 - 135*s12^2*s13^2 +
                27*s12*s13^3 + 54*s13^4 + (-54*s12^3 - 414*s12^2*s13 -
                  396*s12*s13^2 - 63*s13^3)*s23 + (-90*s12^2 - 432*s12*s13 -
                  261*s13^2)*s23^2 + (-36*s12 - 144*s13)*s23^3) +
              p1q^4*p2q*(-18*s12^3*s13 - 36*s12^2*s13^2 - 18*s12*s13^3 +
                (-36*s12^3 - 126*s12^2*s13 - 108*s12*s13^2 - 18*s13^3)*s23 +
                (-54*s12*s13 - 36*s13^2)*s23^2 + (-18*s12 - 72*s13)*s23^3 -
                54*s23^4) + p1q^3*p2q^2*(-36*s12^4 - 108*s12^3*s13 -
                81*s12^2*s13^2 + 9*s12*s13^3 + 18*s13^4 + (-126*s12^3 -
                  324*s12^2*s13 - 216*s12*s13^2 - 27*s13^3)*s23 +
                (27*s12^2 - 27*s12*s13 - 27*s13^2)*s23^2 + (90*s12 - 9*s13)*
                 s23^3 - 27*s23^4) + p1q^5*((-18*s12^3 - 36*s12^2*s13 -
                  18*s12*s13^2)*s23 + (-27*s12^2 - 27*s12*s13)*s23^2 +
                (-18*s12 - 9*s13)*s23^3 - 9*s23^4) + p1q^2*p2q^3*(-36*s12^4 -
                108*s12^3*s13 - 72*s12^2*s13^2 + 36*s12*s13^3 + 36*s13^4 +
                (-162*s12^3 - 450*s12^2*s13 - 414*s12*s13^2 - 126*s13^3)*
                 s23 + (-72*s12^2 - 270*s12*s13 - 234*s13^2)*s23^2 +
                (90*s12 - 36*s13)*s23^3 + 36*s23^4)))*
           Log((p1q + p2q)/(p1q + p2q + p3q)))/(4*p1q*p3q^5*s12^4*s23 +
           p1q*p2q^5*(-4*s12*s13^3*s23 - 4*s12*s13^2*s23^2) +
           p1q^2*p2q^4*(-8*s12*s13^3*s23 + 8*s12*s13*s23^3) +
           p1q^4*p2q^2*(8*s12*s13^2*s23^2 - 8*s12*s23^4) +
           p1q^5*p2q*(-4*s12*s13*s23^3 - 4*s12*s23^4) +
           p1q^3*p2q^3*(-4*s12*s13^3*s23 + 12*s12*s13^2*s23^2 +
             12*s12*s13*s23^3 - 4*s12*s23^4) +
           p3q^4*(p1q^2*((4*s12^4 - 4*s12^3*s13)*s23 - 12*s12^3*s23^2) +
             p1q*p2q*((8*s12^4 - 12*s12^3*s13)*s23 - 4*s12^3*s23^2)) +
           p3q^3*(p1q*p2q^2*((4*s12^4 - 24*s12^3*s13 + 12*s12^2*s13^2)*s23 +
               (-8*s12^3 + 8*s12^2*s13)*s23^2) + p1q^2*p2q*
              ((4*s12^4 - 20*s12^3*s13 + 8*s12^2*s13^2)*s23 + (-28*s12^3 +
                 8*s12^2*s13)*s23^2 + 8*s12^2*s23^3) +
             p1q^3*(-4*s12^3*s13*s23 + (-12*s12^3 + 8*s12^2*s13)*s23^2 + 12*
                s12^2*s23^3)) + p3q*(p1q*p2q^4*((12*s12^2*s13^2 -
                 8*s12*s13^3)*s23 + (8*s12^2*s13 - 8*s12*s13^2)*s23^2) +
             p1q^2*p2q^3*((20*s12^2*s13^2 - 12*s12*s13^3)*s23 +
               (16*s12^2*s13 + 4*s12*s13^2)*s23^2 + (8*s12^2 + 16*s12*s13)*
                s23^3) + p1q^4*p2q*((8*s12^2*s13 + 8*s12*s13^2)*s23^2 +
               (12*s12^2 - 4*s12*s13)*s23^3 - 12*s12*s23^4) +
             p1q^3*p2q^2*((8*s12^2*s13^2 - 4*s12*s13^3)*s23 + (16*s12^2*s13 +
                 20*s12*s13^2)*s23^2 + (20*s12^2 + 16*s12*s13)*s23^3 - 8*s12*
                s23^4) + p1q^5*(-4*s12*s13*s23^3 - 4*s12*s23^4)) +
           p3q^2*(p1q*p2q^3*((-12*s12^3*s13 + 24*s12^2*s13^2 - 4*s12*s13^3)*
                s23 + (-4*s12^3 + 16*s12^2*s13 - 4*s12*s13^2)*s23^2) +
             p1q^2*p2q^2*((-16*s12^3*s13 + 28*s12^2*s13^2 - 4*s12*s13^3)*
                s23 + (-16*s12^3 + 24*s12^2*s13 + 4*s12*s13^2)*s23^2 +
               (16*s12^2 + 8*s12*s13)*s23^3) + p1q^4*(8*s12^2*s13*s23^2 +
               (12*s12^2 - 4*s12*s13)*s23^3 - 4*s12*s23^4) +
             p1q^3*p2q*((-4*s12^3*s13 + 8*s12^2*s13^2)*s23 + (-12*s12^3 +
                 24*s12^2*s13 + 8*s12*s13^2)*s23^2 + (32*s12^2 + 4*s12*s13)*
                s23^3 - 4*s12*s23^4))) +
         ((p2q^5*(-18*s12*s13^3 - 18*s13^4 - 18*s13^3*s23) +
            p1q*p2q^4*(-18*s12*s13^3 - 18*s13^4 + (36*s12*s13^2 + 18*s13^3)*
               s23 + 36*s13^2*s23^2) + p1q^3*p2q^2*((-9*s12^2 - 45*s12*s13 -
                36*s13^2)*s23^2 + (-9*s12 - 36*s13)*s23^3) +
            p1q^2*p2q^3*((9*s12^2*s13 + 54*s12*s13^2 + 45*s13^3)*s23 +
              (-9*s12*s13 + 27*s13^2)*s23^2 - 18*s13*s23^3) +
            p1q^4*p2q*((9*s12 + 9*s13)*s23^3 + 9*s23^4) +
            p3q^4*(p2q*(-18*s12^3*s13 - 18*s12^2*s13^2 - 18*s12^2*s13*s23) +
              p1q*((18*s12^3 + 36*s12^2*s13 + 18*s12*s13^2)*s23 +
                (36*s12^2 + 36*s12*s13)*s23^2 + 18*s12*s23^3)) +
            p3q^3*(p2q^2*(-36*s12^3*s13 + 36*s12*s13^3 + (-36*s12^2*s13 +
                  36*s12*s13^2)*s23) + p1q*p2q*(-18*s12^3*s13 -
                18*s12^2*s13^2 + (36*s12^3 + 36*s12^2*s13 - 18*s13^3)*s23 +
                (72*s12^2 + 36*s12*s13 - 36*s13^2)*s23^2 + (36*s12 - 18*s13)*
                 s23^3) + p1q^2*((18*s12^3 + 36*s12^2*s13 + 18*s12*s13^2)*
                 s23 + (9*s12^2 - 9*s12*s13 - 18*s13^2)*s23^2 +
                (-27*s12 - 36*s13)*s23^3 - 18*s23^4)) +
            p3q^2*(p2q^3*(-18*s12^3*s13 + 54*s12^2*s13^2 + 54*s12*s13^3 -
                18*s13^4 + (-18*s12^2*s13 + 72*s12*s13^2 - 18*s13^3)*s23) +
              p1q*p2q^2*(-18*s12^3*s13 + 18*s12^2*s13^2 + 36*s12*s13^3 +
                (36*s12^3 + 54*s12^2*s13 + 108*s12*s13^2 + 36*s13^3)*s23 +
                (72*s12^2 + 72*s12*s13 + 36*s13^2)*s23^2 + 36*s12*s23^3) +
              p1q^2*p2q*((27*s12^3 + 72*s12^2*s13 + 63*s12*s13^2 + 18*s13^3)*
                 s23 + (36*s12^2 + 45*s12*s13 + 9*s13^2)*s23^2 +
                (9*s12 - 9*s13)*s23^3) + p1q^3*((-27*s12^2 - 45*s12*s13 -
                  18*s13^2)*s23^2 + (-36*s12 - 27*s13)*s23^3 - 9*s23^4)) +
            p3q*(p2q^4*(36*s12^2*s13^2 - 36*s13^4 + (36*s12*s13^2 - 36*s13^3)*
                 s23) + p1q*p2q^3*(36*s12^2*s13^2 + 18*s12*s13^3 - 18*s13^4 +
                (108*s12*s13^2 + 54*s13^3)*s23 + 72*s13^2*s23^2) +
              p1q^2*p2q^2*((27*s12^3 + 63*s12^2*s13 + 81*s12*s13^2 +
                  45*s13^3)*s23 + (45*s12^2 + 9*s12*s13)*s23^2 +
                (18*s12 - 45*s13)*s23^3) + p1q^3*p2q*((-18*s12^2 -
                  54*s12*s13 - 36*s13^2)*s23^2 + (-9*s12 - 27*s13)*s23^3 +
                9*s23^4) + p1q^4*((9*s12 + 9*s13)*s23^3 + 9*s23^4)))*
           Log(p3q/(p1q + p2q + p3q)))/(2*p1q*p3q^4*s12^2*s13*s23^2 +
           2*p1q*p2q^4*s13^3*s23^2 + 2*p1q^4*p2q*s13*s23^4 +
           p1q^2*p2q^3*(2*s13^3*s23^2 - 4*s13^2*s23^3) +
           p1q^3*p2q^2*(-4*s13^2*s23^3 + 2*s13*s23^4) +
           p3q^3*(p1q*p2q*(4*s12^2*s13 - 4*s12*s13^2)*s23^2 +
             p1q^2*(2*s12^2*s13*s23^2 - 4*s12*s13*s23^3)) +
           p3q^2*(p1q*p2q^2*(2*s12^2*s13 - 8*s12*s13^2 + 2*s13^3)*s23^2 +
             p1q^2*p2q*((2*s12^2*s13 - 4*s12*s13^2)*s23^2 + (-8*s12*s13 -
                 4*s13^2)*s23^3) + p1q^3*(-4*s12*s13*s23^3 + 2*s13*s23^4)) +
           p3q*(p1q*p2q^3*(-4*s12*s13^2 + 4*s13^3)*s23^2 +
             2*p1q^4*s13*s23^4 + p1q^2*p2q^2*((-4*s12*s13^2 + 2*s13^3)*
                s23^2 + (-4*s12*s13 - 8*s13^2)*s23^3) + p1q^3*p2q*
              ((-4*s12*s13 - 4*s13^2)*s23^3 + 4*s13*s23^4))) +
         ((p3q^6*(9*s12^3*s13 + 9*s12^2*s13^2 + 9*s12^2*s13*s23) +
            p2q^6*(9*s12*s13^3 + 9*s13^4 + 9*s13^3*s23) +
            p1q*p2q^5*(27*s12*s13^3 + 27*s13^4 - 27*s12*s13^2*s23 -
              27*s13^2*s23^2) + p1q^2*p2q^4*(-45*s12^2*s13^2 - 45*s12*s13^3 +
              (-126*s12*s13^2 - 81*s13^3)*s23 + (27*s12*s13 - 54*s13^2)*s23^
                2 + 27*s13*s23^3) + p1q^4*p2q^2*(9*s12^2*s13^2 +
              18*s12*s13^3 + 9*s13^4 + (-18*s12^2*s13 - 18*s12*s13^2)*s23 +
              (-9*s12^2 - 9*s12*s13 + 9*s13^2)*s23^2 + (-36*s12 - 9*s13)*s23^
                3 - 27*s23^4) + p1q^5*p2q*((-18*s12^2*s13 - 36*s12*s13^2 -
                18*s13^3)*s23 + (-27*s12*s13 - 27*s13^2)*s23^2 +
              (-9*s12 - 18*s13)*s23^3 - 9*s23^4) + p1q^3*p2q^3*
             (36*s12^3*s13 + 54*s12^2*s13^2 + 27*s12*s13^3 + 9*s13^4 +
              (90*s12^2*s13 + 63*s12*s13^2)*s23 + (135*s12*s13 + 72*s13^2)*
               s23^2 + (-9*s12 + 72*s13)*s23^3 - 9*s23^4) +
            p1q^6*((9*s12^2 + 18*s12*s13 + 9*s13^2)*s23^2 + (18*s12 + 18*s13)*
               s23^3 + 9*s23^4) + p3q^5*(p2q*(-36*s12^4 - 36*s12^3*s13 -
                18*s12^2*s13^2 - 18*s12*s13^3 + (-72*s12^3 - 36*s12^2*s13 -
                  18*s12*s13^2)*s23 - 36*s12^2*s23^2) + p1q*(27*s12^4 +
                45*s12^3*s13 + 18*s12^2*s13^2 + (9*s12^3 - 54*s12^2*s13 -
                  54*s12*s13^2)*s23 + (-54*s12^2 - 90*s12*s13)*s23^2 -
                36*s12*s23^3)) + p3q^4*(p2q^2*(-36*s12^4 + 54*s12^3*s13 +
                90*s12^2*s13^2 + 9*s12*s13^3 + 9*s13^4 + (-72*s12^3 +
                  126*s12^2*s13 + 72*s12*s13^2 + 9*s13^3)*s23 +
                (-36*s12^2 + 72*s12*s13)*s23^2) + p1q*p2q*(-54*s12^4 -
                117*s12^3*s13 - 99*s12^2*s13^2 - 36*s12*s13^3 +
                (-135*s12^3 - 144*s12^2*s13 - 18*s12*s13^2 + 18*s13^3)*s23 +
                (-81*s12^2 + 36*s12*s13 + 54*s13^2)*s23^2 + 36*s13*s23^3) +
              p1q^2*(45*s12^4 + 63*s12^3*s13 + 18*s12^2*s13^2 +
                (-72*s12^3 - 243*s12^2*s13 - 144*s12*s13^2)*s23 +
                (-207*s12^2 - 189*s12*s13 + 45*s13^2)*s23^2 +
                (-54*s12 + 81*s13)*s23^3 + 36*s23^4)) +
            p3q*(p2q^5*(-18*s12^2*s13^2 + 18*s12*s13^3 + 36*s13^4 +
                (-18*s12*s13^2 + 36*s13^3)*s23) + p1q*p2q^4*(-135*s12^2*
                 s13^2 - 135*s12*s13^3 + (-279*s12*s13^2 - 144*s13^3)*s23 -
                144*s13^2*s23^2) + p1q^2*p2q^3*(126*s12^3*s13 + 126*s12^2*
                 s13^2 + 18*s12*s13^3 + 18*s13^4 + (360*s12^2*s13 +
                  216*s12*s13^2)*s23 + (18*s12^2 + 432*s12*s13 + 162*s13^2)*
                 s23^2 + (18*s12 + 180*s13)*s23^3) + p1q^3*p2q^2*(-36*s12^4 -
                36*s12^3*s13 + 45*s12^2*s13^2 + 99*s12*s13^3 + 54*s13^4 +
                (-126*s12^3 - 126*s12^2*s13 + 9*s12*s13^2 + 54*s13^3)*s23 +
                (-153*s12^2 - 45*s12*s13 + 54*s13^2)*s23^2 +
                (-135*s12 - 18*s13)*s23^3 - 72*s23^4) + p1q^4*p2q*(
                -18*s12^3*s13 - 36*s12^2*s13^2 - 18*s12*s13^3 +
                (-18*s12^3 - 180*s12^2*s13 - 270*s12*s13^2 - 108*s13^3)*s23 +
                (-18*s12^2 - 198*s12*s13 - 162*s13^2)*s23^2 +
                (-36*s12 - 90*s13)*s23^3 - 36*s23^4) + p1q^5*(
                (-18*s12^3 - 36*s12^2*s13 - 18*s12*s13^2)*s23 +
                (9*s12^2 + 63*s12*s13 + 54*s13^2)*s23^2 + (63*s12 + 90*s13)*
                 s23^3 + 36*s23^4)) + p3q^2*(p2q^4*(9*s12^3*s13 -
                99*s12^2*s13^2 - 90*s12*s13^3 + 18*s13^4 + (9*s12^2*s13 -
                  144*s12*s13^2 - 18*s13^3)*s23 - 36*s13^2*s23^2) +
              p1q*p2q^3*(189*s12^3*s13 + 135*s12^2*s13^2 - 63*s12*s13^3 -
                9*s13^4 + (-9*s12^3 + 432*s12^2*s13 + 117*s12*s13^2 -
                  90*s13^3)*s23 + (-9*s12^2 + 324*s12*s13 - 9*s13^2)*s23^2 +
                72*s13*s23^3) + p1q^3*p2q*(-18*s12^4 - 99*s12^3*s13 -
                153*s12^2*s13^2 - 72*s12*s13^3 + (-153*s12^3 - 540*s12^2*
                   s13 - 576*s12*s13^2 - 180*s13^3)*s23 + (-207*s12^2 -
                  549*s12*s13 - 333*s13^2)*s23^2 + (-135*s12 - 216*s13)*
                 s23^3 - 63*s23^4) + p1q^2*p2q^2*(-81*s12^4 - 45*s12^3*s13 +
                81*s12^2*s13^2 + 99*s12*s13^3 + 54*s13^4 + (-234*s12^3 +
                  63*s12^2*s13 + 288*s12*s13^2 + 117*s13^3)*s23 +
                (-189*s12^2 + 270*s12*s13 + 189*s13^2)*s23^2 +
                (-72*s12 + 90*s13)*s23^3 - 36*s23^4) + p1q^4*(9*s12^4 +
                18*s12^3*s13 + 9*s12^2*s13^2 + (-54*s12^3 - 126*s12^2*s13 -
                  72*s12*s13^2)*s23 + (117*s12*s13 + 126*s13^2)*s23^2 +
                (162*s12 + 225*s13)*s23^3 + 99*s23^4)) +
            p3q^3*(p2q^3*(108*s12^3*s13 + 36*s12^2*s13^2 - 72*s12*s13^3 +
                (180*s12^2*s13 - 36*s12*s13^2 - 36*s13^3)*s23 +
                (72*s12*s13 - 36*s13^2)*s23^2) + p1q*p2q^2*(-81*s12^4 +
                27*s12^3*s13 + 153*s12^2*s13^2 + 63*s12*s13^3 + 18*s13^4 +
                (-189*s12^3 + 234*s12^2*s13 + 297*s12*s13^2 + 36*s13^3)*s23 +
                (-108*s12^2 + 306*s12*s13 + 90*s13^2)*s23^2 + 72*s13*s23^3) +
              p1q^2*p2q*(-36*s12^4 - 144*s12^3*s13 - 180*s12^2*s13^2 -
                72*s12*s13^3 + (-198*s12^3 - 432*s12^2*s13 - 306*s12*s13^2 -
                  72*s13^3)*s23 + (-234*s12^2 - 288*s12*s13 - 126*s13^2)*
                 s23^2 + (-108*s12 - 90*s13)*s23^3 - 36*s23^4) +
              p1q^3*(27*s12^4 + 45*s12^3*s13 + 18*s12^2*s13^2 +
                (-117*s12^3 - 270*s12^2*s13 - 144*s12*s13^2)*s23 +
                (-153*s12^2 - 27*s12*s13 + 126*s13^2)*s23^2 +
                (99*s12 + 234*s13)*s23^3 + 108*s23^4)))*
           Log((p1q + p3q)/(p1q + p2q + p3q)))/(-4*p1q*p2q^5*s13^4*s23 +
           p1q*p3q^5*(4*s12^3*s13*s23 + 4*s12^2*s13*s23^2) +
           p1q^2*p2q^4*((4*s12*s13^3 - 4*s13^4)*s23 + 12*s13^3*s23^2) +
           p1q^3*p2q^3*(4*s12*s13^3*s23 + (-8*s12*s13^2 + 12*s13^3)*s23^2 -
             12*s13^2*s23^3) + p1q^5*p2q*(4*s12*s13*s23^3 + 4*s13*s23^4) +
           p1q^4*p2q^2*(-8*s12*s13^2*s23^2 + (4*s12*s13 - 12*s13^2)*s23^3 +
             4*s13*s23^4) + p3q^4*(p1q*p2q*((8*s12^3*s13 - 12*s12^2*s13^2)*
                s23 + (8*s12^2*s13 - 8*s12*s13^2)*s23^2) +
             p1q^2*(8*s12^3*s13*s23 - 8*s12*s13*s23^3)) +
           p3q^3*(p1q*p2q^2*((4*s12^3*s13 - 24*s12^2*s13^2 + 12*s12*s13^3)*
                s23 + (4*s12^2*s13 - 16*s12*s13^2 + 4*s13^3)*s23^2) +
             p1q^2*p2q*((12*s12^3*s13 - 20*s12^2*s13^2)*s23 + (-4*s12^2*s13 -
                 16*s12*s13^2)*s23^2 + (-16*s12*s13 - 8*s13^2)*s23^3) +
             p1q^3*(4*s12^3*s13*s23 - 12*s12^2*s13*s23^2 - 12*s12*s13*s23^3 +
               4*s13*s23^4)) + p3q^2*(p1q*p2q^3*((-12*s12^2*s13^2 +
                 24*s12*s13^3 - 4*s13^4)*s23 + (-8*s12*s13^2 + 8*s13^3)*
                s23^2) + p1q^2*p2q^2*((4*s12^3*s13 - 28*s12^2*s13^2 +
                 16*s12*s13^3)*s23 + (-4*s12^2*s13 - 24*s12*s13^2 + 16*s13^3)*
                s23^2 + (-8*s12*s13 - 16*s13^2)*s23^3) +
             p1q^4*(-8*s12^2*s13*s23^2 + 8*s13*s23^4) + p1q^3*p2q*
              ((4*s12^3*s13 - 8*s12^2*s13^2)*s23 + (-20*s12^2*s13 -
                 16*s12*s13^2)*s23^2 + (-16*s12*s13 - 20*s13^2)*s23^3 + 8*s13*
                s23^4)) + p3q*(p1q*p2q^4*((12*s12*s13^3 - 8*s13^4)*s23 + 4*
                s13^3*s23^2) + p1q^2*p2q^3*((-8*s12^2*s13^2 + 20*s12*s13^3 -
                 4*s13^4)*s23 + (-8*s12*s13^2 + 28*s13^3)*s23^2 - 8*s13^2*
                s23^3) + p1q^5*(4*s12*s13*s23^3 + 4*s13*s23^4) +
             p1q^3*p2q^2*((-8*s12^2*s13^2 + 4*s12*s13^3)*s23 +
               (-8*s12^2*s13 - 24*s12*s13^2 + 12*s13^3)*s23^2 + (-4*s12*s13 -
                 32*s13^2)*s23^3 + 4*s13*s23^4) + p1q^4*p2q*
              ((-8*s12^2*s13 - 8*s12*s13^2)*s23^2 + (4*s12*s13 - 12*s13^2)*
                s23^3 + 12*s13*s23^4))) +
         ((p3q^6*((9*s12^4 - 9*s12^2*s13^2)*s23^2 + (9*s12^3 - 9*s12^2*s13)*
               s23^3) + p2q^6*(-144*s12^3*s13^3 - 288*s12^2*s13^4 -
              144*s12*s13^5 + (-252*s12^2*s13^3 - 288*s12*s13^4 - 36*s13^5)*
               s23 + (9*s12^2*s13^2 - 108*s12*s13^3 - 45*s13^4)*s23^2 +
              (9*s12*s13^2 - 9*s13^3)*s23^3) + p1q*p2q^5*(-144*s12^3*s13^3 -
              288*s12^2*s13^4 - 144*s12*s13^5 + (351*s12^3*s13^2 +
                459*s12^2*s13^3 + 81*s12*s13^4 - 27*s13^5)*s23 +
              (621*s12^2*s13^2 + 576*s12*s13^3 + 27*s13^4)*s23^2 +
              (-18*s12^2*s13 + 270*s12*s13^2 + 72*s13^3)*s23^3 +
              (-18*s12*s13 + 18*s13^2)*s23^4) + p1q^5*p2q*
             ((-9*s12^3 - 117*s12^2*s13 - 63*s12*s13^2 + 45*s13^3)*s23^3 +
              (9*s12^2 - 162*s12*s13 - 27*s13^2)*s23^4 + (18*s12 - 72*s13)*
               s23^5) + p1q^4*p2q^2*((18*s12^3*s13 + 180*s12^2*s13^2 +
                126*s12*s13^3 - 36*s13^4)*s23^2 + (36*s12^3 + 36*s12^2*s13 +
                324*s12*s13^2 + 144*s13^3)*s23^3 + (81*s12^2 + 153*s13^2)*s23^
                4 + (45*s12 - 27*s13)*s23^5) +
            p1q^6*((18*s12^2 - 18*s13^2)*s23^4 + (18*s12 - 18*s13)*s23^5) +
            p1q^3*p2q^3*((-9*s12^3*s13^2 - 81*s12^2*s13^3 - 63*s12*s13^4 +
                9*s13^5)*s23 + (-216*s12^3*s13 - 405*s12^2*s13^2 -
                396*s12*s13^3 - 135*s13^4)*s23^2 + (45*s12^3 - 333*s12^2*
                 s13 - 315*s12*s13^2 - 117*s13^3)*s23^3 + (99*s12^2 -
                126*s12*s13 + 9*s13^2)*s23^4 + (54*s12 - 18*s13)*s23^5) +
            p1q^2*p2q^4*((-36*s12^4*s13 + 288*s12^3*s13^2 + 648*s12^2*s13^3 +
                360*s12*s13^4 + 36*s13^5)*s23 + (-288*s12^3*s13 +
                81*s12^2*s13^2 + 360*s12*s13^3 + 63*s13^4)*s23^2 +
              (-468*s12^2*s13 - 207*s12*s13^2 + 27*s13^3)*s23^3 +
              (9*s12^2 - 216*s12*s13 - 9*s13^2)*s23^4 + (9*s12 - 9*s13)*s23^
                5) + p3q^5*(p2q*(-144*s12^5*s13 - 288*s12^4*s13^2 -
                144*s12^3*s13^3 + (-252*s12^4*s13 - 288*s12^3*s13^2 -
                  36*s12^2*s13^3)*s23 + (36*s12^4 - 126*s12^3*s13 -
                  72*s12^2*s13^2 + 18*s12*s13^3)*s23^2 + (36*s12^3 -
                  54*s12^2*s13 + 18*s12*s13^2)*s23^3) +
              p1q*((27*s12^5 + 99*s12^4*s13 + 45*s12^3*s13^2 - 27*s12^2*
                   s13^3)*s23 + (81*s12^4 + 108*s12^3*s13 - 45*s12^2*s13^2)*
                 s23^2 + (36*s12^3 - 18*s12^2*s13 + 18*s12*s13^2)*s23^3 +
                (-18*s12^2 + 18*s12*s13)*s23^4)) +
            p3q^3*(p2q^3*(-432*s12^5*s13 + 1152*s12^3*s13^3 + 576*s12^2*
                 s13^4 - 144*s12*s13^5 + (-756*s12^4*s13 + 648*s12^3*s13^2 +
                  1368*s12^2*s13^3 - 72*s12*s13^4 - 36*s13^5)*s23 +
                (36*s12^4 - 432*s12^3*s13 + 540*s12^2*s13^2 + 216*s12*s13^3 -
                  72*s13^4)*s23^2 + (36*s12^3 - 144*s12^2*s13 + 144*s12*
                   s13^2 - 36*s13^3)*s23^3) + p1q*p2q^2*(-288*s12^5*s13 -
                288*s12^4*s13^2 + 288*s12^3*s13^3 + 288*s12^2*s13^4 +
                (117*s12^5 + 531*s12^4*s13 + 1620*s12^3*s13^2 + 1656*s12^2*
                   s13^3 + 423*s12*s13^4 - 27*s13^5)*s23 +
                (315*s12^4 + 1242*s12^3*s13 + 1854*s12^2*s13^2 + 1062*s12*
                   s13^3 - 9*s13^4)*s23^2 + (90*s12^3 + 270*s12^2*s13 +
                  702*s12*s13^2 + 90*s13^3)*s23^3 + (-108*s12^2 +
                  36*s12*s13 + 72*s13^2)*s23^4) + p1q^2*p2q*(
                (72*s12^5 + 468*s12^4*s13 + 396*s12^3*s13^2 + 36*s12^2*
                   s13^3 + 36*s12*s13^4)*s23 + (90*s12^4 - 54*s12^3*s13 -
                  630*s12^2*s13^2 - 126*s12*s13^3)*s23^2 + (-234*s12^3 -
                  828*s12^2*s13 - 306*s12*s13^2 - 36*s13^3)*s23^3 +
                (-216*s12^2 - 108*s12*s13 - 72*s13^2)*s23^4 +
                (36*s12 - 36*s13)*s23^5) + p1q^3*((-9*s12^5 + 63*s12^4*s13 +
                  81*s12^3*s13^2 + 9*s12^2*s13^3)*s23 + (-63*s12^4 -
                  270*s12^3*s13 - 225*s12^2*s13^2 + 54*s12*s13^3)*s23^2 +
                (-153*s12^3 - 297*s12^2*s13 + 135*s12*s13^2 - 9*s13^3)*
                 s23^3 + (-45*s12^2 + 126*s12*s13 - 27*s13^2)*s23^4 +
                (54*s12 - 18*s13)*s23^5)) + p3q^4*(p2q^2*(-432*s12^5*s13 -
                576*s12^4*s13^2 + 144*s12^3*s13^3 + 288*s12^2*s13^4 +
                (-756*s12^4*s13 - 360*s12^3*s13^2 + 468*s12^2*s13^3 +
                  72*s12*s13^4)*s23 + (54*s12^4 - 396*s12^3*s13 +
                  63*s12^2*s13^2 + 144*s12*s13^3 - 9*s13^4)*s23^2 +
                (54*s12^3 - 126*s12^2*s13 + 81*s12*s13^2 - 9*s13^3)*s23^3) +
              p1q*p2q*(-144*s12^5*s13 - 288*s12^4*s13^2 - 144*s12^3*s13^3 +
                (81*s12^5 + 279*s12^4*s13 + 297*s12^3*s13^2 + 153*s12^2*
                   s13^3 + 54*s12*s13^4)*s23 + (243*s12^4 + 594*s12^3*s13 +
                  333*s12^2*s13^2 + 198*s12*s13^3)*s23^2 +
                (90*s12^3 + 72*s12^2*s13 + 216*s12*s13^2 + 18*s13^3)*s23^3 +
                (-72*s12^2 + 54*s12*s13 + 18*s13^2)*s23^4) +
              p1q^2*((36*s12^5 + 180*s12^4*s13 + 108*s12^3*s13^2 -
                  36*s12^2*s13^3)*s23 + (45*s12^4 - 153*s12^2*s13^2 +
                  36*s12*s13^3)*s23^2 + (-99*s12^3 - 225*s12^2*s13 +
                  72*s12*s13^2)*s23^3 + (-99*s12^2 + 36*s12*s13 - 9*s13^2)*
                 s23^4 + (9*s12 - 9*s13)*s23^5)) +
            p3q^2*(p2q^4*(-144*s12^5*s13 + 576*s12^4*s13^2 + 1152*s12^3*
                 s13^3 - 432*s12*s13^5 + (-252*s12^4*s13 + 1224*s12^3*s13^2 +
                  936*s12^2*s13^3 - 648*s12*s13^4 - 108*s13^5)*s23 +
                (9*s12^4 - 180*s12^3*s13 + 657*s12^2*s13^2 - 36*s12*s13^3 -
                  162*s13^4)*s23^2 + (9*s12^3 - 81*s12^2*s13 + 126*s12*
                   s13^2 - 54*s13^3)*s23^3) + p1q*p2q^3*(-144*s12^5*s13 +
                288*s12^4*s13^2 + 864*s12^3*s13^3 + 288*s12^2*s13^4 -
                144*s12*s13^5 + (63*s12^5 + 513*s12^4*s13 + 2808*s12^3*
                   s13^2 + 3276*s12^2*s13^3 + 873*s12*s13^4 - 45*s13^5)*s23 +
                (153*s12^4 + 990*s12^3*s13 + 3150*s12^2*s13^2 + 2250*s12*
                   s13^3 + 81*s13^4)*s23^2 + (18*s12^3 + 198*s12^2*s13 +
                  1134*s12*s13^2 + 234*s13^3)*s23^3 + (-72*s12^2 -
                  36*s12*s13 + 108*s13^2)*s23^4) + p1q^2*p2q^2*(
                (72*s12^5 + 540*s12^4*s13 + 1044*s12^3*s13^2 + 972*s12^2*
                   s13^3 + 396*s12*s13^4)*s23 + (45*s12^4 - 324*s12^3*s13 -
                  576*s12^2*s13^2 + 72*s12*s13^3 + 63*s13^4)*s23^2 +
                (-279*s12^3 - 1557*s12^2*s13 - 999*s12*s13^2 - 9*s13^3)*
                 s23^3 + (-198*s12^2 - 540*s12*s13 - 126*s13^2)*s23^4 +
                (54*s12 - 54*s13)*s23^5) + p1q^3*p2q*((-9*s12^5 -
                  63*s12^4*s13 - 189*s12^3*s13^2 - 153*s12^2*s13^3 -
                  18*s12*s13^4)*s23 + (-99*s12^4 - 738*s12^3*s13 -
                  1179*s12^2*s13^2 - 450*s12*s13^3 + 18*s13^4)*s23^2 +
                (-261*s12^3 - 711*s12^2*s13 - 441*s12*s13^2 - 27*s13^3)*
                 s23^3 + (-81*s12^2 + 126*s12*s13 - 63*s13^2)*s23^4 +
                (90*s12 - 18*s13)*s23^5) + p1q^4*((36*s12^4 - 126*s12^3*s13 -
                  180*s12^2*s13^2 - 18*s12*s13^3)*s23^2 + (36*s12^3 -
                  18*s12^2*s13 + 108*s12*s13^2 - 18*s13^3)*s23^3 +
                (63*s12^2 + 198*s12*s13 - 27*s13^2)*s23^4 + (63*s12 - 9*s13)*
                 s23^5)) + p3q*(p2q^5*(288*s12^4*s13^2 + 144*s12^3*s13^3 -
                576*s12^2*s13^4 - 432*s12*s13^5 + (504*s12^3*s13^2 -
                  180*s12^2*s13^3 - 792*s12*s13^4 - 108*s13^5)*s23 +
                (-18*s12^3*s13 + 252*s12^2*s13^2 - 234*s12*s13^3 - 144*s13^4)*
                 s23^2 + (-18*s12^2*s13 + 54*s12*s13^2 - 36*s13^3)*s23^3) +
              p1q*p2q^4*(288*s12^4*s13^2 + 288*s12^3*s13^3 - 288*s12^2*
                 s13^4 - 288*s12*s13^5 + (162*s12^4*s13 + 1791*s12^3*s13^2 +
                  2259*s12^2*s13^3 + 585*s12*s13^4 - 45*s13^5)*s23 +
                (234*s12^3*s13 + 2295*s12^2*s13^2 + 1962*s12*s13^3 +
                  117*s13^4)*s23^2 + (-18*s12^3 + 900*s12*s13^2 + 234*s13^3)*
                 s23^3 + (-18*s12^2 - 54*s12*s13 + 72*s13^2)*s23^4) +
              p1q^5*((-45*s12^3 + 63*s12^2*s13 + 117*s12*s13^2 + 9*s13^3)*
                 s23^3 + (-27*s12^2 + 126*s12*s13 + 9*s13^2)*s23^4 +
                18*s12*s23^5) + p1q^2*p2q^3*((36*s12^5 + 216*s12^4*s13 +
                  1044*s12^3*s13^2 + 1548*s12^2*s13^3 + 720*s12*s13^4 +
                  36*s13^5)*s23 + (36*s12^4 - 486*s12^3*s13 - 18*s12^2*
                   s13^2 + 522*s12*s13^3 + 90*s13^4)*s23^2 +
                (-72*s12^3 - 1350*s12^2*s13 - 900*s12*s13^2 - 18*s13^3)*
                 s23^3 + (-36*s12^2 - 612*s12*s13 - 108*s13^2)*s23^4 +
                (36*s12 - 36*s13)*s23^5) + p1q^4*p2q*((18*s12^4 + 144*s12^3*
                   s13 - 144*s12*s13^3 - 18*s13^4)*s23^2 +
                (18*s12^3 + 360*s12^2*s13 + 126*s12*s13^2)*s23^3 +
                (72*s12^2 + 270*s12*s13 - 18*s13^2)*s23^4 + (72*s12 - 36*s13)*
                 s23^5) + p1q^3*p2q^2*((18*s12^4*s13 + 153*s12^3*s13^2 +
                  189*s12^2*s13^3 + 63*s12*s13^4 + 9*s13^5)*s23 +
                (-72*s12^4 - 432*s12^3*s13 - 675*s12^2*s13^2 - 432*s12*
                   s13^3 - 45*s13^4)*s23^2 + (-99*s12^3 - 423*s12^2*s13 -
                  423*s12*s13^2 - 27*s13^3)*s23^3 + (99*s12^2 + 126*s12*s13 +
                  45*s13^2)*s23^4 + (126*s12 + 18*s13)*s23^5)))*
           Log((p2q + p3q)/(p1q + p2q + p3q)))/
          (p1q*p3q^5*(4*s12^4*s13 + 4*s12^3*s13^2)*s23^2 +
           p1q*p2q^5*(4*s12^2*s13^3 + 4*s12*s13^4)*s23^2 -
           4*p1q^5*p2q*s12*s13*s23^5 + p1q^2*p2q^4*
            ((4*s12^2*s13^3 + 4*s12*s13^4)*s23^2 + (-8*s12^2*s13^2 - 12*s12*
                s13^3)*s23^3) + p1q^3*p2q^3*((-8*s12^2*s13^2 - 12*s12*s13^3)*
              s23^3 + (4*s12^2*s13 + 12*s12*s13^2)*s23^4) +
           p1q^4*p2q^2*((4*s12^2*s13 + 12*s12*s13^2)*s23^4 -
             4*s12*s13*s23^5) + p3q^4*(p1q*p2q*(12*s12^4*s13 + 4*s12^3*
                s13^2 - 8*s12^2*s13^3)*s23^2 + p1q^2*((4*s12^4*s13 +
                 4*s12^3*s13^2)*s23^2 + (-12*s12^3*s13 - 8*s12^2*s13^2)*
                s23^3)) + p3q^3*(p1q*p2q^2*(12*s12^4*s13 - 12*s12^3*s13^2 -
               20*s12^2*s13^3 + 4*s12*s13^4)*s23^2 + p1q^2*p2q*
              ((8*s12^4*s13 - 8*s12^2*s13^3)*s23^2 + (-32*s12^3*s13 -
                 24*s12^2*s13^2 - 8*s12*s13^3)*s23^3) +
             p1q^3*((-12*s12^3*s13 - 8*s12^2*s13^2)*s23^3 + (12*s12^2*s13 +
                 4*s12*s13^2)*s23^4)) + p3q*(p1q*p2q^4*(-8*s12^3*s13^2 + 4*
                s12^2*s13^3 + 12*s12*s13^4)*s23^2 - 4*p1q^5*s12*s13*s23^5 +
             p1q^2*p2q^3*((-8*s12^3*s13^2 + 8*s12*s13^4)*s23^2 +
               (-8*s12^3*s13 - 24*s12^2*s13^2 - 32*s12*s13^3)*s23^3) +
             p1q^3*p2q^2*((-8*s12^3*s13 - 16*s12^2*s13^2 - 20*s12*s13^3)*
                s23^3 + (20*s12^2*s13 + 28*s12*s13^2)*s23^4) +
             p1q^4*p2q*((16*s12^2*s13 + 16*s12*s13^2)*s23^4 - 8*s12*s13*
                s23^5)) + p3q^2*(p1q*p2q^3*(4*s12^4*s13 - 20*s12^3*s13^2 - 12*
                s12^2*s13^3 + 12*s12*s13^4)*s23^2 + p1q^2*p2q^2*
              ((4*s12^4*s13 - 12*s12^3*s13^2 - 12*s12^2*s13^3 + 4*s12*s13^4)*
                s23^2 + (-28*s12^3*s13 - 32*s12^2*s13^2 - 28*s12*s13^3)*
                s23^3) + p1q^3*p2q*((-20*s12^3*s13 - 16*s12^2*s13^2 -
                 8*s12*s13^3)*s23^3 + (28*s12^2*s13 + 20*s12*s13^2)*s23^4) +
             p1q^4*((12*s12^2*s13 + 4*s12*s13^2)*s23^4 - 4*s12*s13*s23^5))) +
         ((p1q*p2q*((-9*s12^2 - 18*s12*s13 - 9*s13^2)*s23 + (-9*s12 - 9*s13)*
               s23^2) + p2q^2*(72*s12^2*s13 + 72*s12*s13^2 + (108*s12*s13 +
                36*s13^2)*s23 + 36*s13*s23^2) +
            p3q*(p1q*((-27*s12^2 - 18*s12*s13 + 9*s13^2)*s23 +
                (-27*s12 + 9*s13)*s23^2) + p2q*(72*s12^2*s13 + 72*s12*s13^2 +
                (18*s12^2 + 108*s12*s13 + 18*s13^2)*s23 + (18*s12 + 18*s13)*
                 s23^2)))*Log(-s12 - s13 - s23))/(2*p1q*p2q*s12*s13*s23^2 +
           2*p1q*p3q*s12*s13*s23^2) +
         ((p3q^6*((-9*s12^4 - 9*s12^3*s13)*s23 - 9*s12^3*s23^2) +
            p2q^6*(-36*s12^2*s13^3 - 36*s12*s13^4 + (-81*s12^2*s13^2 -
                189*s12*s13^3 - 72*s13^4)*s23 + (-153*s12*s13^2 - 144*s13^3)*
               s23^2 - 72*s13^2*s23^3) + p1q*p2q^5*(-72*s12^2*s13^3 -
              72*s12*s13^4 + (-90*s12^2*s13^2 - 297*s12*s13^3 - 135*s13^4)*
               s23 + (162*s12^2*s13 + 90*s12*s13^2 - 117*s13^3)*s23^2 +
              (306*s12*s13 + 162*s13^2)*s23^3 + 144*s13*s23^4) +
            p1q^5*p2q*((18*s12^2*s13 + 36*s12*s13^2 + 18*s13^3)*s23^2 +
              (-18*s12^2 + 9*s12*s13 + 27*s13^2)*s23^3 + (-18*s12 + 9*s13)*
               s23^4) + p1q^3*p2q^3*((36*s12^3*s13 + 108*s12^2*s13^2 +
                63*s12*s13^3 - 9*s13^4)*s23 + (-36*s12^3 + 126*s12^2*s13 +
                324*s12*s13^2 + 117*s13^3)*s23^2 + (-234*s12^2 -
                117*s12*s13 + 81*s13^2)*s23^3 + (-324*s12 - 171*s13)*s23^4 -
              126*s23^5) + p1q^2*p2q^4*(-36*s12^2*s13^3 - 36*s12*s13^4 +
              (36*s12^3*s13 + 108*s12^2*s13^2 - 27*s12*s13^3 - 63*s13^4)*
               s23 + (360*s12^2*s13 + 621*s12*s13^2 + 162*s13^3)*s23^2 +
              (-81*s12^2 + 423*s12*s13 + 405*s13^2)*s23^3 + (-153*s12 +
                108*s13)*s23^4 - 72*s23^5) + p1q^4*p2q^2*
             ((-9*s12^2*s13^2 - 18*s12*s13^3 - 9*s13^4)*s23 +
              (-36*s12^3 - 54*s12^2*s13 - 18*s12*s13^2)*s23^2 +
              (-162*s12^2 - 207*s12*s13 - 54*s13^2)*s23^3 + (-171*s12 -
                108*s13)*s23^4 - 45*s23^5) + p1q^6*((-9*s12^2 - 18*s12*s13 -
                9*s13^2)*s23^3 + (-18*s12 - 18*s13)*s23^4 - 9*s23^5) +
            p3q^5*(p2q*(36*s12^5 + 36*s12^4*s13 + (36*s12^4 + 18*s12^3*s13 +
                  18*s12^2*s13^2)*s23 + 18*s12^2*s13*s23^2) +
              p1q*((-27*s12^4 - 27*s12^3*s13)*s23 + 27*s12^2*s13*s23^2 +
                27*s12^2*s23^3)) + p3q^4*(p1q*p2q*(36*s12^5 - 36*s12^3*
                 s13^2 + (-108*s12^4 - 189*s12^3*s13 - 9*s12^2*s13^2)*s23 +
                (-144*s12^3 - 9*s12^2*s13)*s23^2) + p2q^2*(72*s12^5 -
                36*s12^4*s13 - 108*s12^3*s13^2 + (54*s12^4 - 162*s12^3*s13 -
                  45*s12^2*s13^2 - 9*s12*s13^3)*s23 + (-54*s12^3 -
                  72*s12^2*s13 - 9*s12*s13^2)*s23^2 - 36*s12^2*s23^3) +
              p1q^2*((-36*s12^4 - 27*s12^3*s13 + 9*s12^2*s13^2)*s23 +
                (27*s12^3 + 72*s12^2*s13)*s23^2 + (36*s12^2 - 27*s12*s13)*
                 s23^3 - 27*s12*s23^4)) + p3q^2*(p2q^4*(-108*s12^4*s13 +
                108*s12^3*s13^2 + 180*s12^2*s13^3 - 36*s12*s13^4 +
                (-81*s12^4 - 45*s12^3*s13 + 558*s12^2*s13^2 + 126*s12*s13^3 -
                  36*s13^4)*s23 + (-153*s12^3 + 288*s12^2*s13 + 378*s12*
                   s13^2 - 72*s13^3)*s23^2 + (-72*s12^2 + 216*s12*s13 -
                  36*s13^2)*s23^3) + p1q^3*p2q*((-18*s12^4 + 99*s12^3*s13 +
                  171*s12^2*s13^2 + 54*s12*s13^3)*s23 + (216*s12^3 +
                  495*s12^2*s13 + 234*s12*s13^2 + 36*s13^3)*s23^2 +
                (180*s12^2 + 63*s12*s13 + 9*s13^2)*s23^3 + (-54*s12 - 27*s13)*
                 s23^4) + p1q*p2q^3*(-144*s12^4*s13 + 108*s12^3*s13^2 +
                216*s12^2*s13^3 - 36*s12*s13^4 + (-234*s12^4 - 171*s12^3*
                   s13 + 783*s12^2*s13^2 + 225*s12*s13^3 - 63*s13^4)*s23 +
                (-144*s12^3 + 783*s12^2*s13 + 846*s12*s13^2 - 27*s13^3)*
                 s23^2 + (306*s12^2 + 774*s12*s13 + 108*s13^2)*s23^3 +
                (216*s12 + 72*s13)*s23^4) + p1q^2*p2q^2*(-36*s12^4*s13 +
                36*s12^3*s13^2 + 72*s12^2*s13^3 + (-144*s12^4 + 81*s12^3*
                   s13 + 513*s12^2*s13^2 + 153*s12*s13^3 - 27*s13^4)*s23 +
                (243*s12^3 + 1080*s12^2*s13 + 693*s12*s13^2 + 54*s13^3)*
                 s23^2 + (567*s12^2 + 612*s12*s13 + 81*s13^2)*s23^3 +
                (144*s12 - 36*s13)*s23^4 - 36*s23^5) + p1q^4*(
                (-9*s12^4 - 18*s12^3*s13 - 9*s12^2*s13^2)*s23 +
                (-18*s12^2*s13 - 18*s12*s13^2)*s23^2 + (-45*s12^2 -
                  81*s12*s13 - 9*s13^2)*s23^3 - 45*s12*s23^4 + 9*s23^5)) +
            p3q^3*(p2q^3*(36*s12^5 - 180*s12^4*s13 - 108*s12^3*s13^2 +
                108*s12^2*s13^3 + (-72*s12^4 - 396*s12^3*s13 + 108*s12^2*
                   s13^2 + 72*s12*s13^3)*s23 + (-216*s12^3 - 108*s12^2*s13 +
                  144*s12*s13^2)*s23^2 + (-108*s12^2 + 72*s12*s13)*s23^3) +
              p1q*p2q^2*(36*s12^5 - 144*s12^4*s13 - 108*s12^3*s13^2 +
                72*s12^2*s13^3 + (-279*s12^4 - 513*s12^3*s13 + 153*s12^2*
                   s13^2 + 99*s12*s13^3)*s23 + (-378*s12^3 + 27*s12^2*s13 +
                  216*s12*s13^2 + 9*s13^3)*s23^2 + (9*s12^2 + 180*s12*s13 +
                  9*s13^2)*s23^3 + 72*s12*s23^4) + p1q^2*p2q*(-36*s12^4*s13 -
                36*s12^3*s13^2 + (-180*s12^4 - 162*s12^3*s13 + 72*s12^2*
                   s13^2 + 18*s12*s13^3)*s23 + (-18*s12^3 + 288*s12^2*s13 +
                  90*s12*s13^2)*s23^2 + (162*s12^2 + 54*s12*s13 - 18*s13^2)*
                 s23^3 - 18*s13*s23^4) + p1q^3*((-9*s12^4 + 9*s12^3*s13 +
                  18*s12^2*s13^2)*s23 + (72*s12^3 + 99*s12^2*s13)*s23^2 +
                (36*s12^2 - 45*s12*s13)*s23^3 + (-36*s12 + 9*s13)*s23^4 +
                9*s23^5)) + p3q*(p2q^5*(108*s12^3*s13^2 + 36*s12^2*s13^3 -
                72*s12*s13^4 + (162*s12^3*s13 + 306*s12^2*s13^2 -
                  144*s12*s13^3 - 108*s13^4)*s23 + (306*s12^2*s13 +
                  72*s12*s13^2 - 216*s13^3)*s23^2 + (144*s12*s13 - 108*s13^2)*
                 s23^3) + p1q^4*p2q*((18*s12^3*s13 + 36*s12^2*s13^2 +
                  18*s12*s13^3)*s23 + (36*s12^3 + 72*s12^2*s13 +
                  36*s12*s13^2)*s23^2 + (-54*s12^2 - 126*s12*s13 - 54*s13^2)*
                 s23^3 + (-90*s12 - 54*s13)*s23^4) + p1q*p2q^4*(180*s12^3*
                 s13^2 + 72*s12^2*s13^3 - 108*s12*s13^4 + (324*s12^3*s13 +
                  747*s12^2*s13^2 - 27*s12*s13^3 - 162*s13^4)*s23 +
                (162*s12^3 + 1098*s12^2*s13 + 936*s12*s13^2 - 81*s13^3)*
                 s23^2 + (306*s12^2 + 972*s12*s13 + 297*s13^2)*s23^3 +
                (144*s12 + 216*s13)*s23^4) + p1q^2*p2q^3*(72*s12^3*s13^2 +
                36*s12^2*s13^3 - 36*s12*s13^4 + (-36*s12^4 + 180*s12^3*s13 +
                  558*s12^2*s13^2 + 180*s12*s13^3 - 54*s13^4)*s23 +
                (216*s12^3 + 1080*s12^2*s13 + 1152*s12*s13^2 + 216*s13^3)*
                 s23^2 + (324*s12^2 + 810*s12*s13 + 396*s13^2)*s23^3 +
                (-36*s12 + 18*s13)*s23^4 - 108*s23^5) + p1q^3*p2q^2*(
                (36*s12^4 + 198*s12^3*s13 + 279*s12^2*s13^2 + 117*s12*s13^3)*
                 s23 + (270*s12^3 + 648*s12^2*s13 + 468*s12*s13^2 + 99*s13^3)*
                 s23^2 + (135*s12^2 + 45*s12*s13 - 9*s13^2)*s23^3 +
                (-198*s12 - 207*s13)*s23^4 - 99*s23^5) +
              p1q^5*((18*s12^3 + 36*s12^2*s13 + 18*s12*s13^2)*s23^2 +
                (27*s12^2 + 27*s12*s13)*s23^3 + (18*s12 + 9*s13)*s23^4 +
                9*s23^5)))*Log(s12/(s12 + s13 + s23)))/
          (4*p1q*p3q^5*s12^4*s23^2 + p1q*p2q^5*(-4*s12*s13^3*s23^2 -
             4*s12*s13^2*s23^3) + p1q^2*p2q^4*(-8*s12*s13^3*s23^2 +
             8*s12*s13*s23^4) + p1q^4*p2q^2*(8*s12*s13^2*s23^3 -
             8*s12*s23^5) + p1q^5*p2q*(-4*s12*s13*s23^4 - 4*s12*s23^5) +
           p1q^3*p2q^3*(-4*s12*s13^3*s23^2 + 12*s12*s13^2*s23^3 +
             12*s12*s13*s23^4 - 4*s12*s23^5) +
           p3q^4*(p1q^2*((4*s12^4 - 4*s12^3*s13)*s23^2 - 12*s12^3*s23^3) +
             p1q*p2q*((8*s12^4 - 12*s12^3*s13)*s23^2 - 4*s12^3*s23^3)) +
           p3q^3*(p1q*p2q^2*((4*s12^4 - 24*s12^3*s13 + 12*s12^2*s13^2)*
                s23^2 + (-8*s12^3 + 8*s12^2*s13)*s23^3) +
             p1q^2*p2q*((4*s12^4 - 20*s12^3*s13 + 8*s12^2*s13^2)*s23^2 +
               (-28*s12^3 + 8*s12^2*s13)*s23^3 + 8*s12^2*s23^4) +
             p1q^3*(-4*s12^3*s13*s23^2 + (-12*s12^3 + 8*s12^2*s13)*s23^3 + 12*
                s12^2*s23^4)) + p3q*(p1q*p2q^4*((12*s12^2*s13^2 -
                 8*s12*s13^3)*s23^2 + (8*s12^2*s13 - 8*s12*s13^2)*s23^3) +
             p1q^2*p2q^3*((20*s12^2*s13^2 - 12*s12*s13^3)*s23^2 +
               (16*s12^2*s13 + 4*s12*s13^2)*s23^3 + (8*s12^2 + 16*s12*s13)*
                s23^4) + p1q^4*p2q*((8*s12^2*s13 + 8*s12*s13^2)*s23^3 +
               (12*s12^2 - 4*s12*s13)*s23^4 - 12*s12*s23^5) +
             p1q^3*p2q^2*((8*s12^2*s13^2 - 4*s12*s13^3)*s23^2 +
               (16*s12^2*s13 + 20*s12*s13^2)*s23^3 + (20*s12^2 + 16*s12*s13)*
                s23^4 - 8*s12*s23^5) + p1q^5*(-4*s12*s13*s23^4 - 4*s12*
                s23^5)) + p3q^2*(p1q*p2q^3*((-12*s12^3*s13 + 24*s12^2*s13^2 -
                 4*s12*s13^3)*s23^2 + (-4*s12^3 + 16*s12^2*s13 - 4*s12*s13^2)*
                s23^3) + p1q^2*p2q^2*((-16*s12^3*s13 + 28*s12^2*s13^2 -
                 4*s12*s13^3)*s23^2 + (-16*s12^3 + 24*s12^2*s13 +
                 4*s12*s13^2)*s23^3 + (16*s12^2 + 8*s12*s13)*s23^4) +
             p1q^4*(8*s12^2*s13*s23^3 + (12*s12^2 - 4*s12*s13)*s23^4 - 4*s12*
                s23^5) + p1q^3*p2q*((-4*s12^3*s13 + 8*s12^2*s13^2)*s23^2 +
               (-12*s12^3 + 24*s12^2*s13 + 8*s12*s13^2)*s23^3 + (32*s12^2 +
                 4*s12*s13)*s23^4 - 4*s12*s23^5))) +
         ((p3q^6*((-9*s12^3*s13 - 9*s12^2*s13^2)*s23 - 9*s12^2*s13*s23^2) +
            p2q^6*(-36*s12*s13^4 - 36*s13^5 + (-9*s12*s13^3 - 45*s13^4)*s23 -
              9*s13^3*s23^2) + p1q*p2q^5*(36*s12^2*s13^3 - 36*s13^5 +
              (117*s12*s13^3 + 45*s13^4)*s23 + (27*s12*s13^2 + 108*s13^3)*s23^
                2 + 27*s13^2*s23^3) + p1q^2*p2q^4*(36*s12^2*s13^3 +
              36*s12*s13^4 + (-9*s12^2*s13^2 + 153*s12*s13^3 + 126*s13^4)*
               s23 + (-36*s12*s13^2 + 99*s13^3)*s23^2 + (-27*s12*s13 -
                54*s13^2)*s23^3 - 27*s13*s23^4) + p1q^5*p2q*
             ((18*s12^2*s13 + 36*s12*s13^2 + 18*s13^3)*s23^2 +
              (-18*s12^2 + 9*s12*s13 + 27*s13^2)*s23^3 - 27*s12*s23^4 -
              9*s23^5) + p1q^6*((-9*s12^2 - 18*s12*s13 - 9*s13^2)*s23^3 +
              (-18*s12 - 18*s13)*s23^4 - 9*s23^5) + p1q^3*p2q^3*
             ((-54*s12^3*s13 - 162*s12^2*s13^2 - 117*s12*s13^3 - 9*s13^4)*
               s23 + (-108*s12^2*s13 - 315*s12*s13^2 - 162*s13^3)*s23^2 +
              (-99*s12*s13 - 198*s13^2)*s23^3 + (9*s12 - 36*s13)*s23^4 +
              9*s23^5) + p1q^4*p2q^2*((-9*s12^2*s13^2 - 18*s12*s13^3 -
                9*s13^4)*s23 + (18*s12^3 + 108*s12^2*s13 + 90*s12*s13^2)*s23^
                2 + (45*s12^2 + 189*s12*s13 + 81*s13^2)*s23^3 +
              (54*s12 + 99*s13)*s23^4 + 27*s23^5) +
            p3q^5*(p2q*(36*s12^4*s13 + 36*s12^3*s13^2 + (36*s12^4 +
                  108*s12^3*s13 + 54*s12^2*s13^2 + 18*s12*s13^3)*s23 +
                (72*s12^3 + 72*s12^2*s13 + 18*s12*s13^2)*s23^2 +
                36*s12^2*s23^3) + p1q*((-63*s12^4 - 117*s12^3*s13 -
                  54*s12^2*s13^2)*s23 + (-117*s12^3 - 90*s12^2*s13 +
                  18*s12*s13^2)*s23^2 + (-54*s12^2 + 18*s12*s13)*s23^3)) +
            p3q^4*(p2q^2*(72*s12^4*s13 - 36*s12^3*s13^2 - 108*s12^2*s13^3 +
                (36*s12^4 + 90*s12^3*s13 - 198*s12^2*s13^2 - 81*s12*s13^3 -
                  9*s13^4)*s23 + (72*s12^3 - 54*s12^2*s13 - 144*s12*s13^2 -
                  9*s13^3)*s23^2 + (36*s12^2 - 72*s12*s13)*s23^3) +
              p1q*p2q*(72*s12^4*s13 + 72*s12^3*s13^2 + (-18*s12^4 +
                  189*s12^3*s13 + 243*s12^2*s13^2 + 108*s12*s13^3)*s23 +
                (-81*s12^3 + 108*s12^2*s13 + 162*s12*s13^2 + 18*s13^3)*
                 s23^2 + (-135*s12^2 - 36*s12*s13 + 18*s13^2)*s23^3 -
                72*s12*s23^4) + p1q^2*((-117*s12^4 - 207*s12^3*s13 -
                  90*s12^2*s13^2)*s23 + (-90*s12^3 + 45*s12^2*s13 +
                  108*s12*s13^2)*s23^2 + (135*s12^2 + 207*s12*s13 - 9*s13^2)*
                 s23^3 + (108*s12 - 9*s13)*s23^4)) +
            p3q^3*(p2q^3*(36*s12^4*s13 - 180*s12^3*s13^2 - 108*s12^2*s13^3 +
                108*s12*s13^4 + (-36*s12^3*s13 - 360*s12^2*s13^2 +
                  72*s12*s13^3 + 36*s13^4)*s23 + (-144*s12^2*s13 -
                  108*s12*s13^2 + 72*s13^3)*s23^2 + (-72*s12*s13 + 36*s13^2)*
                 s23^3) + p1q*p2q^2*(108*s12^4*s13 - 72*s12^3*s13^2 -
                180*s12^2*s13^3 + (9*s12^4 + 117*s12^3*s13 - 405*s12^2*
                   s13^2 - 279*s12*s13^3 - 54*s13^4)*s23 +
                (-27*s12^3 - 270*s12^2*s13 - 585*s12*s13^2 - 180*s13^3)*
                 s23^2 + (-108*s12^2 - 378*s12*s13 - 198*s13^2)*s23^3 +
                (-72*s12 - 72*s13)*s23^4) + p1q^3*((-63*s12^4 - 117*s12^3*
                   s13 - 54*s12^2*s13^2)*s23 + (117*s12^3 + 306*s12^2*s13 +
                  180*s12*s13^2)*s23^2 + (315*s12^2 + 261*s12*s13 - 54*s13^2)*
                 s23^3 + (81*s12 - 108*s13)*s23^4 - 54*s23^5) +
              p1q^2*p2q*(36*s12^4*s13 + 36*s12^3*s13^2 + (-90*s12^4 +
                  162*s12^2*s13^2 + 108*s12*s13^3)*s23 + (-144*s12^3 +
                  72*s12^2*s13 + 216*s12*s13^2 + 36*s13^3)*s23^2 +
                (-72*s12^2 + 126*s12*s13 + 108*s13^2)*s23^3 +
                (18*s12 + 108*s13)*s23^4 + 36*s23^5)) +
            p3q^2*(p2q^4*(-108*s12^3*s13^2 + 108*s12^2*s13^3 + 180*s12*
                 s13^4 - 36*s13^5 + (-9*s12^3*s13 - 81*s12^2*s13^2 +
                  306*s12*s13^3 + 18*s13^4)*s23 + (-9*s12^2*s13 +
                  72*s12*s13^2 + 90*s13^3)*s23^2 + 36*s13^2*s23^3) +
              p1q*p2q^3*(36*s12^4*s13 - 216*s12^3*s13^2 - 108*s12^2*s13^3 +
                144*s12*s13^4 + (-45*s12^3*s13 - 567*s12^2*s13^2 +
                  63*s12*s13^3 + 153*s13^4)*s23 + (9*s12^3 - 252*s12^2*s13 -
                  477*s12*s13^2 + 90*s13^3)*s23^2 + (9*s12^2 - 252*s12*s13 -
                  135*s13^2)*s23^3 - 72*s13*s23^4) + p1q^4*(
                (-9*s12^4 - 18*s12^3*s13 - 9*s12^2*s13^2)*s23 +
                (108*s12^3 + 216*s12^2*s13 + 108*s12*s13^2)*s23^2 +
                (108*s12^2 + 9*s12*s13 - 90*s13^2)*s23^3 +
                (-108*s12 - 189*s13)*s23^4 - 99*s23^5) + p1q^2*p2q^2*(
                36*s12^4*s13 - 36*s12^3*s13^2 - 72*s12^2*s13^3 +
                (-45*s12^4 - 99*s12^3*s13 - 351*s12^2*s13^2 - 207*s12*s13^3 -
                  18*s13^4)*s23 + (-126*s12^3 - 387*s12^2*s13 - 648*s12*
                   s13^2 - 261*s13^3)*s23^2 + (-153*s12^2 - 324*s12*s13 -
                  279*s13^2)*s23^3 - 36*s12*s23^4 + 36*s23^5) +
              p1q^3*p2q*((-36*s12^4 - 45*s12^3*s13 + 27*s12^2*s13^2 +
                  36*s12*s13^3)*s23 + (63*s12^3 + 360*s12^2*s13 +
                  414*s12*s13^2 + 108*s13^3)*s23^2 + (171*s12^2 +
                  567*s12*s13 + 333*s13^2)*s23^3 + (117*s12 + 270*s13)*
                 s23^4 + 45*s23^5)) + p3q*(p2q^5*(108*s12^2*s13^3 +
                36*s12*s13^4 - 72*s13^5 + (18*s12^2*s13^2 + 126*s12*s13^3 -
                  72*s13^4)*s23 + 18*s12*s13^2*s23^2) + p1q*p2q^4*(
                -72*s12^3*s13^2 + 108*s12^2*s13^3 + 144*s12*s13^4 -
                36*s13^5 + (-81*s12^2*s13^2 + 423*s12*s13^3 + 216*s13^4)*
                 s23 + (63*s12*s13^2 + 324*s13^3)*s23^2 + 72*s13^2*s23^3) +
              p1q^2*p2q^3*(-72*s12^3*s13^2 - 36*s12^2*s13^3 + 36*s12*s13^4 +
                (-90*s12^3*s13 - 396*s12^2*s13^2 - 90*s12*s13^3 + 108*s13^4)*
                 s23 + (-270*s12^2*s13 - 720*s12*s13^2 - 198*s13^3)*s23^2 +
                (-18*s12^2 - 342*s12*s13 - 450*s13^2)*s23^3 +
                (-18*s12 - 144*s13)*s23^4) + p1q^4*p2q*((18*s12^3*s13 +
                  36*s12^2*s13^2 + 18*s12*s13^3)*s23 + (54*s12^3 +
                  288*s12^2*s13 + 342*s12*s13^2 + 108*s13^3)*s23^2 +
                (54*s12^2 + 360*s12*s13 + 252*s13^2)*s23^3 + 144*s13*s23^4) +
              p1q^5*((18*s12^3 + 36*s12^2*s13 + 18*s12*s13^2)*s23^2 +
                (-27*s12^2 - 81*s12*s13 - 54*s13^2)*s23^3 +
                (-99*s12 - 108*s13)*s23^4 - 54*s23^5) + p1q^3*p2q^2*(
                (-18*s12^4 - 90*s12^3*s13 - 207*s12^2*s13^2 - 189*s12*s13^3 -
                  54*s13^4)*s23 + (36*s12^2*s13 - 207*s12*s13^2 - 216*s13^3)*
                 s23^2 + (63*s12^2 + 261*s12*s13 - 36*s13^2)*s23^3 +
                (117*s12 + 198*s13)*s23^4 + 72*s23^5)))*
           Log(s13/(s12 + s13 + s23)))/(-4*p1q*p2q^5*s13^4*s23^2 +
           p1q*p3q^5*(4*s12^3*s13*s23^2 + 4*s12^2*s13*s23^3) +
           p1q^2*p2q^4*((4*s12*s13^3 - 4*s13^4)*s23^2 + 12*s13^3*s23^3) +
           p1q^3*p2q^3*(4*s12*s13^3*s23^2 + (-8*s12*s13^2 + 12*s13^3)*s23^3 -
             12*s13^2*s23^4) + p1q^5*p2q*(4*s12*s13*s23^4 + 4*s13*s23^5) +
           p1q^4*p2q^2*(-8*s12*s13^2*s23^3 + (4*s12*s13 - 12*s13^2)*s23^4 +
             4*s13*s23^5) + p3q^4*(p1q*p2q*((8*s12^3*s13 - 12*s12^2*s13^2)*
                s23^2 + (8*s12^2*s13 - 8*s12*s13^2)*s23^3) +
             p1q^2*(8*s12^3*s13*s23^2 - 8*s12*s13*s23^4)) +
           p3q^3*(p1q*p2q^2*((4*s12^3*s13 - 24*s12^2*s13^2 + 12*s12*s13^3)*
                s23^2 + (4*s12^2*s13 - 16*s12*s13^2 + 4*s13^3)*s23^3) +
             p1q^2*p2q*((12*s12^3*s13 - 20*s12^2*s13^2)*s23^2 +
               (-4*s12^2*s13 - 16*s12*s13^2)*s23^3 + (-16*s12*s13 - 8*s13^2)*
                s23^4) + p1q^3*(4*s12^3*s13*s23^2 - 12*s12^2*s13*s23^3 - 12*
                s12*s13*s23^4 + 4*s13*s23^5)) +
           p3q^2*(p1q*p2q^3*((-12*s12^2*s13^2 + 24*s12*s13^3 - 4*s13^4)*
                s23^2 + (-8*s12*s13^2 + 8*s13^3)*s23^3) + p1q^2*p2q^2*
              ((4*s12^3*s13 - 28*s12^2*s13^2 + 16*s12*s13^3)*s23^2 +
               (-4*s12^2*s13 - 24*s12*s13^2 + 16*s13^3)*s23^3 + (-8*s12*s13 -
                 16*s13^2)*s23^4) + p1q^4*(-8*s12^2*s13*s23^3 + 8*s13*
                s23^5) + p1q^3*p2q*((4*s12^3*s13 - 8*s12^2*s13^2)*s23^2 +
               (-20*s12^2*s13 - 16*s12*s13^2)*s23^3 + (-16*s12*s13 -
                 20*s13^2)*s23^4 + 8*s13*s23^5)) +
           p3q*(p1q*p2q^4*((12*s12*s13^3 - 8*s13^4)*s23^2 + 4*s13^3*s23^3) +
             p1q^2*p2q^3*((-8*s12^2*s13^2 + 20*s12*s13^3 - 4*s13^4)*s23^2 +
               (-8*s12*s13^2 + 28*s13^3)*s23^3 - 8*s13^2*s23^4) +
             p1q^5*(4*s12*s13*s23^4 + 4*s13*s23^5) + p1q^3*p2q^2*
              ((-8*s12^2*s13^2 + 4*s12*s13^3)*s23^2 + (-8*s12^2*s13 -
                 24*s12*s13^2 + 12*s13^3)*s23^3 + (-4*s12*s13 - 32*s13^2)*
                s23^4 + 4*s13*s23^5) + p1q^4*p2q*((-8*s12^2*s13 -
                 8*s12*s13^2)*s23^3 + (4*s12*s13 - 12*s13^2)*s23^4 + 12*s13*
                s23^5))) + ((p3q^6*((-9*s12^4 + 9*s12^2*s13^2)*s23 +
              (-9*s12^3 + 9*s12^2*s13)*s23^2) + p2q^6*(36*s12^2*s13^3 -
              36*s13^5 + (-9*s12^2*s13^2 + 36*s12*s13^3 - 27*s13^4)*s23 +
              (-9*s12*s13^2 + 9*s13^3)*s23^2) + p1q*p2q^5*(-45*s12^3*s13^2 +
              99*s12^2*s13^3 + 117*s12*s13^4 - 27*s13^5 + (-171*s12^2*s13^2 +
                180*s12*s13^3 + 135*s13^4)*s23 + (18*s12^2*s13 -
                126*s12*s13^2 + 144*s13^3)*s23^2 + (18*s12*s13 - 18*s13^2)*
               s23^3) + p1q^2*p2q^4*(36*s12^4*s13 + 18*s12^3*s13^2 +
              126*s12^2*s13^3 + 126*s12*s13^4 - 18*s13^5 + (108*s12^3*s13 -
                333*s12^2*s13^2 - 108*s12*s13^3 + 117*s13^4)*s23 +
              (216*s12^2*s13 - 459*s12*s13^2 - 81*s13^3)*s23^2 +
              (-9*s12^2 + 144*s12*s13 - 207*s13^2)*s23^3 + (-9*s12 + 9*s13)*
               s23^4) + p1q^6*((-18*s12^2 + 18*s13^2)*s23^3 +
              (-18*s12 + 18*s13)*s23^4) + p1q^5*p2q*
             ((9*s12^3 + 117*s12^2*s13 + 63*s12*s13^2 - 45*s13^3)*s23^2 +
              (-27*s12^2 + 126*s12*s13 + 9*s13^2)*s23^3 + (-36*s12 + 54*s13)*
               s23^4) + p1q^4*p2q^2*((-18*s12^3*s13 - 180*s12^2*s13^2 -
                126*s12*s13^3 + 36*s13^4)*s23 + (-18*s12^3 + 198*s12^2*s13 -
                54*s12*s13^2 - 90*s13^3)*s23^2 + (-81*s12^2 + 252*s12*s13 -
                45*s13^2)*s23^3 + (-63*s12 + 81*s13)*s23^4) +
            p1q^3*p2q^3*(9*s12^3*s13^2 + 81*s12^2*s13^3 + 63*s12*s13^4 -
              9*s13^5 + (36*s12^3*s13 - 297*s12^2*s13^2 - 180*s12*s13^3 +
                81*s13^4)*s23 + (-27*s12^3 + 315*s12^2*s13 - 225*s12*s13^2 -
                99*s13^3)*s23^2 + (-81*s12^2 + 342*s12*s13 - 99*s13^2)*s23^
                3 + (-54*s12 + 90*s13)*s23^4) +
            p3q^5*(p2q*(-36*s12^5 + 36*s12^3*s13^2 + (-72*s12^4 +
                  54*s12^3*s13 + 36*s12^2*s13^2 - 18*s12*s13^3)*s23 +
                (-36*s12^3 + 54*s12^2*s13 - 18*s12*s13^2)*s23^2) +
              p1q*(27*s12^5 - 9*s12^4*s13 - 27*s12^3*s13^2 + 9*s12^2*s13^3 +
                (-27*s12^4 - 72*s12^3*s13 + 27*s12^2*s13^2)*s23 +
                (-36*s12^3 + 18*s12^2*s13 - 18*s12*s13^2)*s23^2 +
                (18*s12^2 - 18*s12*s13)*s23^3)) +
            p3q^4*(p2q^2*(-72*s12^5 + 108*s12^4*s13 + 72*s12^3*s13^2 -
                108*s12^2*s13^3 + (-126*s12^4 + 252*s12^3*s13 - 63*s12^2*
                   s13^2 - 72*s12*s13^3 + 9*s13^4)*s23 + (-54*s12^3 +
                  126*s12^2*s13 - 81*s12*s13^2 + 9*s13^3)*s23^2) +
              p1q*p2q*(9*s12^5 + 27*s12^4*s13 + 81*s12^3*s13^2 +
                45*s12^2*s13^3 - 18*s12*s13^4 + (-45*s12^4 + 54*s12^3*s13 +
                  81*s12^2*s13^2 - 90*s12*s13^3)*s23 + (18*s12^3 +
                  108*s12^2*s13 - 144*s12*s13^2 - 18*s13^3)*s23^2 +
                (72*s12^2 - 54*s12*s13 - 18*s13^2)*s23^3) + p1q^2*(18*s12^5 -
                90*s12^4*s13 - 90*s12^3*s13^2 + 18*s12^2*s13^3 +
                (-153*s12^4 - 180*s12^3*s13 + 117*s12^2*s13^2)*s23 +
                (-63*s12^3 + 171*s12^2*s13 - 36*s12*s13^2)*s23^2 +
                (99*s12^2 - 36*s12*s13 + 9*s13^2)*s23^3 + (-9*s12 + 9*s13)*
                 s23^4)) + p3q^3*(p2q^3*(-36*s12^5 + 216*s12^4*s13 -
                72*s12^3*s13^2 - 216*s12^2*s13^3 + 108*s12*s13^4 +
                (-72*s12^4 + 360*s12^3*s13 - 324*s12^2*s13^2 + 36*s13^4)*
                 s23 + (-36*s12^3 + 144*s12^2*s13 - 144*s12*s13^2 + 36*s13^3)*
                 s23^2) + p1q*p2q^2*(-63*s12^5 + 171*s12^4*s13 +
                72*s12^3*s13^2 - 180*s12^2*s13^3 - 9*s12*s13^4 + 9*s13^5 +
                (-81*s12^4 + 414*s12^3*s13 - 198*s12^2*s13^2 - 198*s12*
                   s13^3 + 63*s13^4)*s23 + (90*s12^3 + 270*s12^2*s13 -
                  342*s12*s13^2 - 18*s13^3)*s23^2 + (108*s12^2 - 36*s12*s13 -
                  72*s13^2)*s23^3) + p1q^3*(9*s12^5 - 63*s12^4*s13 -
                81*s12^3*s13^2 - 9*s12^2*s13^3 + (-99*s12^4 + 54*s12^3*s13 +
                  207*s12^2*s13^2 - 18*s12*s13^3)*s23 + (153*s12^3 +
                  405*s12^2*s13 - 117*s12*s13^2 - 9*s13^3)*s23^2 +
                (207*s12^2 - 126*s12*s13 + 9*s13^2)*s23^3 +
                (-54*s12 + 18*s13)*s23^4) + p1q^2*p2q*(216*s12^3*s13^2 +
                216*s12^2*s13^3 + (-234*s12^4 - 234*s12^3*s13 + 234*s12^2*
                   s13^2 + 54*s12*s13^3 + 36*s13^4)*s23 + (-90*s12^3 +
                  108*s12^2*s13 - 18*s12*s13^2 + 36*s13^3)*s23^2 +
                (108*s12^2 - 36*s12*s13 + 36*s13^2)*s23^3 +
                (-36*s12 + 36*s13)*s23^4)) + p3q^2*(p2q^4*(108*s12^4*s13 -
                216*s12^3*s13^2 - 72*s12^2*s13^3 + 216*s12*s13^4 - 36*s13^5 +
                (-9*s12^4 + 180*s12^3*s13 - 369*s12^2*s13^2 + 180*s12*s13^3 +
                  18*s13^4)*s23 + (-9*s12^3 + 81*s12^2*s13 - 126*s12*s13^2 +
                  54*s13^3)*s23^2) + p1q*p2q^3*(-45*s12^5 + 225*s12^4*s13 -
                252*s12^3*s13^2 - 360*s12^2*s13^3 + 153*s12*s13^4 - 9*s13^5 +
                (-63*s12^4 + 522*s12^3*s13 - 702*s12^2*s13^2 - 90*s12*s13^3 +
                  189*s13^4)*s23 + (54*s12^3 + 378*s12^2*s13 - 522*s12*
                   s13^2 + 90*s13^3)*s23^2 + (72*s12^2 + 36*s12*s13 -
                  108*s13^2)*s23^3) + p1q^4*((-36*s12^4 + 126*s12^3*s13 +
                  180*s12^2*s13^2 + 18*s12*s13^3)*s23 + (126*s12^3 +
                  180*s12^2*s13 - 126*s12*s13^2)*s23^2 + (45*s12^2 -
                  234*s12*s13 + 27*s13^2)*s23^3 + (-117*s12 + 27*s13)*
                 s23^4) + p1q^2*p2q^2*(-54*s12^5 + 90*s12^4*s13 +
                72*s12^3*s13^2 - 144*s12^2*s13^3 - 90*s12*s13^4 - 18*s13^5 +
                (-153*s12^4 - 180*s12^3*s13 - 648*s12^2*s13^2 - 360*s12*
                   s13^3 + 45*s13^4)*s23 + (9*s12^3 - 81*s12^2*s13 -
                  459*s12*s13^2 - 81*s13^3)*s23^2 + (54*s12^2 + 36*s12*s13 -
                  90*s13^2)*s23^3 + (-54*s12 + 54*s13)*s23^4) +
              p1q^3*p2q*(9*s12^5 + 63*s12^4*s13 + 189*s12^3*s13^2 +
                153*s12^2*s13^3 + 18*s12*s13^4 + (-63*s12^4 - 18*s12^3*s13 +
                  333*s12^2*s13^2 + 234*s12*s13^3 + 18*s13^4)*s23 +
                (261*s12^3 + 495*s12^2*s13 + 315*s12*s13^2 - 27*s13^3)*
                 s23^2 + (279*s12^2 + 162*s12*s13 + 9*s13^2)*s23^3 +
                (-54*s12 + 54*s13)*s23^4)) + p3q*(p2q^5*(-108*s12^3*s13^2 +
                72*s12^2*s13^3 + 108*s12*s13^4 - 72*s13^5 +
                (18*s12^3*s13 - 144*s12^2*s13^2 + 162*s12*s13^3 - 36*s13^4)*
                 s23 + (18*s12^2*s13 - 54*s12*s13^2 + 36*s13^3)*s23^2) +
              p1q*p2q^4*(90*s12^4*s13 - 261*s12^3*s13^2 - 45*s12^2*s13^3 +
                261*s12*s13^4 - 45*s13^5 + (234*s12^3*s13 - 621*s12^2*s13^2 +
                  198*s12*s13^3 + 261*s13^4)*s23 + (18*s12^3 + 216*s12^2*
                   s13 - 432*s12*s13^2 + 234*s13^3)*s23^2 +
                (18*s12^2 + 54*s12*s13 - 72*s13^2)*s23^3) +
              p1q^5*((45*s12^3 - 63*s12^2*s13 - 117*s12*s13^2 - 9*s13^3)*
                 s23^2 + (-27*s12^2 - 162*s12*s13 + 9*s13^2)*s23^3 +
                (-72*s12 + 18*s13)*s23^4) + p1q^2*p2q^3*(-36*s12^5 +
                36*s12^4*s13 - 216*s12^3*s13^2 - 216*s12^2*s13^3 +
                36*s12*s13^4 - 36*s13^5 + (-72*s12^4 - 18*s12^3*s13 -
                  1098*s12^2*s13^2 - 522*s12*s13^3 + 126*s13^4)*s23 +
                (162*s12^2*s13 - 900*s12*s13^2 - 162*s13^3)*s23^2 +
                (180*s12*s13 - 288*s13^2)*s23^3 + (-36*s12 + 36*s13)*s23^4) +
              p1q^4*p2q*((-18*s12^4 - 144*s12^3*s13 + 144*s12*s13^3 +
                  18*s13^4)*s23 + (90*s12^3 + 108*s12^2*s13 + 198*s12*s13^2 -
                  36*s13^3)*s23^2 + (90*s12*s13 + 18*s13^2)*s23^3 +
                (-108*s12 + 72*s13)*s23^4) + p1q^3*p2q^2*(-18*s12^4*s13 -
                153*s12^3*s13^2 - 189*s12^2*s13^3 - 63*s12*s13^4 - 9*s13^5 +
                (36*s12^4 - 360*s12^3*s13 - 855*s12^2*s13^2 - 324*s12*s13^3 +
                  63*s13^4)*s23 + (153*s12^3 - 27*s12^2*s13 - 297*s12*s13^2 -
                  117*s13^3)*s23^2 + (27*s12^2 + 234*s12*s13 - 99*s13^2)*
                 s23^3 + (-90*s12 + 90*s13)*s23^4)))*
           Log(s23/(s12 + s13 + s23)))/(p1q*p3q^5*(4*s12^4*s13 +
             4*s12^3*s13^2)*s23 + p1q*p2q^5*(4*s12^2*s13^3 + 4*s12*s13^4)*
            s23 - 4*p1q^5*p2q*s12*s13*s23^4 + p1q^2*p2q^4*
            ((4*s12^2*s13^3 + 4*s12*s13^4)*s23 + (-8*s12^2*s13^2 - 12*s12*
                s13^3)*s23^2) + p1q^3*p2q^3*((-8*s12^2*s13^2 - 12*s12*s13^3)*
              s23^2 + (4*s12^2*s13 + 12*s12*s13^2)*s23^3) +
           p1q^4*p2q^2*((4*s12^2*s13 + 12*s12*s13^2)*s23^3 -
             4*s12*s13*s23^4) + p3q^4*(p1q*p2q*(12*s12^4*s13 + 4*s12^3*
                s13^2 - 8*s12^2*s13^3)*s23 + p1q^2*((4*s12^4*s13 +
                 4*s12^3*s13^2)*s23 + (-12*s12^3*s13 - 8*s12^2*s13^2)*
                s23^2)) + p3q^3*(p1q*p2q^2*(12*s12^4*s13 - 12*s12^3*s13^2 -
               20*s12^2*s13^3 + 4*s12*s13^4)*s23 + p1q^2*p2q*
              ((8*s12^4*s13 - 8*s12^2*s13^3)*s23 + (-32*s12^3*s13 -
                 24*s12^2*s13^2 - 8*s12*s13^3)*s23^2) +
             p1q^3*((-12*s12^3*s13 - 8*s12^2*s13^2)*s23^2 + (12*s12^2*s13 +
                 4*s12*s13^2)*s23^3)) + p3q*(p1q*p2q^4*(-8*s12^3*s13^2 + 4*
                s12^2*s13^3 + 12*s12*s13^4)*s23 - 4*p1q^5*s12*s13*s23^4 +
             p1q^2*p2q^3*((-8*s12^3*s13^2 + 8*s12*s13^4)*s23 +
               (-8*s12^3*s13 - 24*s12^2*s13^2 - 32*s12*s13^3)*s23^2) +
             p1q^3*p2q^2*((-8*s12^3*s13 - 16*s12^2*s13^2 - 20*s12*s13^3)*
                s23^2 + (20*s12^2*s13 + 28*s12*s13^2)*s23^3) +
             p1q^4*p2q*((16*s12^2*s13 + 16*s12*s13^2)*s23^3 - 8*s12*s13*
                s23^4)) + p3q^2*(p1q*p2q^3*(4*s12^4*s13 - 20*s12^3*s13^2 - 12*
                s12^2*s13^3 + 12*s12*s13^4)*s23 + p1q^2*p2q^2*
              ((4*s12^4*s13 - 12*s12^3*s13^2 - 12*s12^2*s13^3 + 4*s12*s13^4)*
                s23 + (-28*s12^3*s13 - 32*s12^2*s13^2 - 28*s12*s13^3)*
                s23^2) + p1q^3*p2q*((-20*s12^3*s13 - 16*s12^2*s13^2 -
                 8*s12*s13^3)*s23^2 + (28*s12^2*s13 + 20*s12*s13^2)*s23^3) +
             p1q^4*((12*s12^2*s13 + 4*s12*s13^2)*s23^3 - 4*s12*s13*
                s23^4)))) + Log(p3q/(p1q + p2q + p3q))*
        ((9*s12 + 9*s13 + 9*s23)/(2*s12*s23) +
         ((p2q^6*(-36*s12^2*s13^4 - 36*s12*s13^5 - 36*s12*s13^4*s23 +
              (s12*s13^3 + s13^4)*s23^2 + s13^3*s23^3) +
            p3q^6*((-s12^4 - s12^3*s13)*s23^2 + (-2*s12^3 - s12^2*s13)*s23^
                3 - s12^2*s23^4) + p1q*p2q^5*(36*s12^3*s13^3 - 36*s12*s13^5 +
              (144*s12^2*s13^3 + 72*s12*s13^4)*s23 + (107*s12*s13^3 - s13^4)*
               s23^2 + (-3*s12*s13^2 - 4*s13^3)*s23^3 - 3*s13^2*s23^4) +
            p1q^2*p2q^4*(36*s12^3*s13^3 + 36*s12^2*s13^4 + (-54*s12^3*s13^2 +
                108*s12^2*s13^3 + 126*s12*s13^4)*s23 + (-160*s12^2*s13^2 +
                19*s12*s13^3 - s13^4)*s23^2 + (-106*s12*s13^2 - s13^3)*s23^
                3 + (3*s12*s13 + 3*s13^2)*s23^4 + 3*s13*s23^5) +
            p1q^4*p2q^2*((18*s12^4 + 90*s12^3*s13 + 72*s12^2*s13^2)*s23^2 +
              (34*s12^3 + 172*s12^2*s13 + 82*s12*s13^2 - 2*s13^3)*s23^3 +
              (14*s12^2 + 79*s12*s13 - 5*s13^2)*s23^4 + (-4*s12 - 5*s13)*s23^
                5 - 2*s23^6) + p1q^3*p2q^3*((-18*s12^4*s13 - 108*s12^3*
                 s13^2 - 90*s12^2*s13^3)*s23 + (-16*s12^3*s13 - 246*s12^2*
                 s13^2 - 157*s12*s13^3 + s13^4)*s23^2 + (38*s12^2*s13 -
                119*s12*s13^2 + 4*s13^3)*s23^3 + (39*s12*s13 + 6*s13^2)*s23^
                4 + (-s12 + 2*s13)*s23^5 - s23^6) + p1q^5*p2q*
             ((-18*s12^3 - 18*s12^2*s13)*s23^3 + (-34*s12^2 - 15*s12*s13 +
                s13^2)*s23^4 + (-15*s12 + 2*s13)*s23^5 + s23^6) +
            p3q^5*(p2q*(36*s12^5*s13 + 36*s12^4*s13^2 + (72*s12^4*s13 +
                  36*s12^3*s13^2)*s23 + (-3*s12^4 + 36*s12^3*s13 +
                  3*s12^2*s13^2)*s23^2 + (-6*s12^3 + 2*s12^2*s13 +
                  2*s12*s13^2)*s23^3 + (-3*s12^2 + 2*s12*s13)*s23^4) +
              p1q*((-36*s12^5 - 72*s12^4*s13 - 36*s12^3*s13^2)*s23 +
                (-106*s12^4 - 141*s12^3*s13 - 35*s12^2*s13^2)*s23^2 +
                (-103*s12^3 - 68*s12^2*s13)*s23^3 + (-31*s12^2 + 2*s12*s13)*
                 s23^4 + 2*s12*s23^5)) + p3q^4*(p2q^2*(72*s12^5*s13 -
                36*s12^4*s13^2 - 108*s12^3*s13^3 + (144*s12^4*s13 -
                  108*s12^3*s13^2 - 72*s12^2*s13^3)*s23 + (-3*s12^4 +
                  78*s12^3*s13 - 66*s12^2*s13^2 - 3*s12*s13^3)*s23^2 +
                (-6*s12^3 + 12*s12^2*s13 + 2*s12*s13^2 - s13^3)*s23^3 +
                (-3*s12^2 + 6*s12*s13 - s13^2)*s23^4) + p1q*p2q*(
                72*s12^5*s13 + 72*s12^4*s13^2 + (-72*s12^5 + 72*s12^4*s13 +
                  144*s12^3*s13^2 + 72*s12^2*s13^3)*s23 + (-212*s12^4 -
                  31*s12^3*s13 + 143*s12^2*s13^2 + 34*s12*s13^3)*s23^2 +
                (-205*s12^3 + 10*s12^2*s13 + 72*s12*s13^2)*s23^3 +
                (-59*s12^2 + 46*s12*s13 + 2*s13^2)*s23^4 + (6*s12 + 2*s13)*
                 s23^5) + p1q^2*((-72*s12^5 - 144*s12^4*s13 - 72*s12^3*s13^2)*
                 s23 + (-157*s12^4 - 191*s12^3*s13 - 34*s12^2*s13^2)*s23^2 +
                (-68*s12^3 + 17*s12^2*s13 + 34*s12*s13^2)*s23^3 +
                (50*s12^2 + 67*s12*s13)*s23^4 + (32*s12 - s13)*s23^5 -
                s23^6)) + p3q*(p2q^5*(108*s12^3*s13^3 + 36*s12^2*s13^4 -
                72*s12*s13^5 + (144*s12^2*s13^3 - 36*s12*s13^4)*s23 +
                (-3*s12^2*s13^2 + 36*s12*s13^3 + 3*s13^4)*s23^2 +
                (-4*s12*s13^2 + 2*s13^3)*s23^3 - s13^2*s23^4) +
              p1q*p2q^4*(-72*s12^4*s13^2 + 108*s12^3*s13^3 + 144*s12^2*
                 s13^4 - 36*s12*s13^5 + (-216*s12^3*s13^2 + 288*s12^2*s13^3 +
                  216*s12*s13^4)*s23 + (-220*s12^2*s13^2 + 171*s12*s13^3 -
                  5*s13^4)*s23^2 + (2*s12^2*s13 - 81*s12*s13^2 - 12*s13^3)*
                 s23^3 + (4*s12*s13 - 5*s13^2)*s23^4 + 2*s13*s23^5) +
              p1q^3*p2q^2*((-54*s12^5 - 126*s12^4*s13 - 162*s12^3*s13^2 -
                  90*s12^2*s13^3)*s23 + (-124*s12^4 - 84*s12^3*s13 -
                  188*s12^2*s13^2 - 155*s12*s13^3 + s13^4)*s23^2 +
                (-92*s12^3 + 210*s12^2*s13 + 21*s12*s13^2 + 4*s13^3)*s23^3 +
                (-26*s12^2 + 169*s12*s13 + 2*s13^2)*s23^4 + (-9*s12 - 6*s13)*
                 s23^5 - 5*s23^6) + p1q^2*p2q^3*(-72*s12^4*s13^2 -
                36*s12^3*s13^3 + 36*s12^2*s13^4 + (36*s12^4*s13 - 270*s12^3*
                   s13^2 - 72*s12^2*s13^3 + 126*s12*s13^4)*s23 +
                (90*s12^3*s13 - 499*s12^2*s13^2 - 196*s12*s13^3 - 3*s13^4)*
                 s23^2 + (94*s12^2*s13 - 274*s12*s13^2 + 2*s13^3)*s23^3 +
                (s12^2 + 50*s12*s13 + 14*s13^2)*s23^4 + 8*s13*s23^5 -
                s23^6) + p1q^4*p2q*((36*s12^4 + 108*s12^3*s13 + 72*s12^2*
                   s13^2)*s23^2 + (30*s12^3 + 148*s12^2*s13 + 80*s12*s13^2 -
                  2*s13^3)*s23^3 + (-41*s12^2 + 46*s12*s13 - 3*s13^2)*s23^4 -
                34*s12*s23^5 + s23^6) + p1q^5*((-18*s12^3 - 18*s12^2*s13)*
                 s23^3 + (-34*s12^2 - 15*s12*s13 + s13^2)*s23^4 +
                (-15*s12 + 2*s13)*s23^5 + s23^6)) +
            p3q^3*(p2q^3*(36*s12^5*s13 - 180*s12^4*s13^2 - 108*s12^3*s13^3 +
                108*s12^2*s13^4 + (72*s12^4*s13 - 324*s12^3*s13^2 +
                  36*s12*s13^4)*s23 + (-s12^4 + 44*s12^3*s13 - 144*s12^2*
                   s13^2 + 28*s12*s13^3 + s13^4)*s23^2 + (-2*s12^3 +
                  14*s12^2*s13 - 6*s12*s13^2 - 2*s13^3)*s23^3 +
                (-s12^2 + 6*s12*s13 - 3*s13^2)*s23^4) + p1q*p2q^2*(
                108*s12^5*s13 - 72*s12^4*s13^2 - 180*s12^3*s13^3 +
                (-72*s12^5 + 144*s12^4*s13 - 252*s12^3*s13^2 - 216*s12^2*
                   s13^3 - 36*s12*s13^4)*s23 + (-214*s12^4 - 31*s12^3*s13 -
                  285*s12^2*s13^2 - 143*s12*s13^3 + s13^4)*s23^2 +
                (-209*s12^3 - 54*s12^2*s13 - 95*s12*s13^2 + 4*s13^3)*s23^3 +
                (-61*s12^2 + 22*s12*s13 + 9*s13^2)*s23^4 + (6*s12 + 6*s13)*
                 s23^5) + p1q^2*p2q*(36*s12^5*s13 + 36*s12^4*s13^2 +
                (-126*s12^5 - 144*s12^4*s13 - 18*s12^3*s13^2 + 36*s12^2*
                   s13^3)*s23 + (-331*s12^4 - 346*s12^3*s13 - 87*s12^2*
                   s13^2 - 36*s12*s13^3)*s23^2 + (-292*s12^3 - 154*s12^2*
                   s13 - 14*s12*s13^2 + 2*s13^3)*s23^3 + (-88*s12^2 +
                  22*s12*s13 + 5*s13^2)*s23^4 - 4*s12*s23^5 - 3*s23^6) +
              p1q^3*((-36*s12^5 - 72*s12^4*s13 - 36*s12^3*s13^2)*s23 +
                (2*s12^4 + 39*s12^3*s13 + 37*s12^2*s13^2)*s23^2 +
                (155*s12^3 + 222*s12^2*s13 + 68*s12*s13^2)*s23^3 +
                (167*s12^2 + 119*s12*s13 + s13^2)*s23^4 + (51*s12 + 2*s13)*
                 s23^5 + s23^6)) + p3q^2*(p2q^4*(-108*s12^4*s13^2 +
                108*s12^3*s13^3 + 180*s12^2*s13^4 - 36*s12*s13^5 +
                (-180*s12^3*s13^2 + 216*s12^2*s13^3 + 36*s12*s13^4)*s23 +
                (3*s12^3*s13 - 78*s12^2*s13^2 + 66*s12*s13^3 + 3*s13^4)*
                 s23^2 + (5*s12^2*s13 - 10*s12*s13^2)*s23^3 +
                (2*s12*s13 - 3*s13^2)*s23^4) + p1q*p2q^3*(36*s12^5*s13 -
                216*s12^4*s13^2 - 108*s12^3*s13^3 + 144*s12^2*s13^4 +
                (144*s12^4*s13 - 432*s12^3*s13^2 + 144*s12*s13^4)*s23 +
                (183*s12^3*s13 - 359*s12^2*s13^2 - 5*s12*s13^3 - 3*s13^4)*
                 s23^2 + (s12^3 + 86*s12^2*s13 - 137*s12*s13^2 - 4*s13^3)*
                 s23^3 + (3*s12^2 + 18*s12*s13 + 5*s13^2)*s23^4 +
                (2*s12 + 6*s13)*s23^5) + p1q^3*p2q*((-54*s12^5 - 144*s12^4*
                   s13 - 126*s12^3*s13^2 - 36*s12^2*s13^3)*s23 +
                (-86*s12^4 - 173*s12^3*s13 - 157*s12^2*s13^2 - 70*s12*s13^3)*
                 s23^2 + (-45*s12^3 - 2*s12^2*s13 - 8*s12*s13^2)*s23^3 +
                (-39*s12^2 + 33*s12*s13 - 3*s13^2)*s23^4 + (-29*s12 - 6*s13)*
                 s23^5 - 3*s23^6) + p1q^2*p2q^2*(36*s12^5*s13 -
                36*s12^4*s13^2 - 72*s12^3*s13^3 + (-126*s12^5 - 144*s12^4*
                   s13 - 270*s12^3*s13^2 - 108*s12^2*s13^3 + 36*s12*s13^4)*
                 s23 + (-354*s12^4 - 317*s12^3*s13 - 356*s12^2*s13^2 -
                  143*s12*s13^3 - 2*s13^4)*s23^2 + (-332*s12^3 - 41*s12^2*
                   s13 - 72*s12*s13^2 + 5*s13^3)*s23^3 + (-101*s12^2 +
                  110*s12*s13 + 16*s13^2)*s23^4 + 6*s13*s23^5 - 3*s23^6) +
              p1q^4*((54*s12^4 + 90*s12^3*s13 + 36*s12^2*s13^2)*s23^2 +
                (104*s12^3 + 120*s12^2*s13 + 34*s12*s13^2)*s23^3 +
                (53*s12^2 + 39*s12*s13 + 2*s13^2)*s23^4 + (6*s12 + 5*s13)*
                 s23^5 + 3*s23^6)))*Log((p1q + p3q)/(p1q + p2q + p3q)))/
          (-4*p1q*p2q^5*s12*s13^4*s23^2 + p1q*p3q^5*(4*s12^4*s13*s23^2 +
             4*s12^3*s13*s23^3) + p1q^2*p2q^4*((4*s12^2*s13^3 - 4*s12*s13^4)*
              s23^2 + 12*s12*s13^3*s23^3) + p1q^3*p2q^3*
            (4*s12^2*s13^3*s23^2 + (-8*s12^2*s13^2 + 12*s12*s13^3)*s23^3 -
             12*s12*s13^2*s23^4) + p1q^5*p2q*(4*s12^2*s13*s23^4 +
             4*s12*s13*s23^5) + p1q^4*p2q^2*(-8*s12^2*s13^2*s23^3 +
             (4*s12^2*s13 - 12*s12*s13^2)*s23^4 + 4*s12*s13*s23^5) +
           p3q^4*(p1q*p2q*((8*s12^4*s13 - 12*s12^3*s13^2)*s23^2 +
               (8*s12^3*s13 - 8*s12^2*s13^2)*s23^3) +
             p1q^2*(8*s12^4*s13*s23^2 - 8*s12^2*s13*s23^4)) +
           p3q^3*(p1q*p2q^2*((4*s12^4*s13 - 24*s12^3*s13^2 + 12*s12^2*s13^3)*
                s23^2 + (4*s12^3*s13 - 16*s12^2*s13^2 + 4*s12*s13^3)*s23^3) +
             p1q^2*p2q*((12*s12^4*s13 - 20*s12^3*s13^2)*s23^2 +
               (-4*s12^3*s13 - 16*s12^2*s13^2)*s23^3 + (-16*s12^2*s13 -
                 8*s12*s13^2)*s23^4) + p1q^3*(4*s12^4*s13*s23^2 - 12*s12^3*
                s13*s23^3 - 12*s12^2*s13*s23^4 + 4*s12*s13*s23^5)) +
           p3q^2*(p1q*p2q^3*((-12*s12^3*s13^2 + 24*s12^2*s13^3 - 4*s12*s13^4)*
                s23^2 + (-8*s12^2*s13^2 + 8*s12*s13^3)*s23^3) +
             p1q^2*p2q^2*((4*s12^4*s13 - 28*s12^3*s13^2 + 16*s12^2*s13^3)*
                s23^2 + (-4*s12^3*s13 - 24*s12^2*s13^2 + 16*s12*s13^3)*
                s23^3 + (-8*s12^2*s13 - 16*s12*s13^2)*s23^4) +
             p1q^4*(-8*s12^3*s13*s23^3 + 8*s12*s13*s23^5) +
             p1q^3*p2q*((4*s12^4*s13 - 8*s12^3*s13^2)*s23^2 +
               (-20*s12^3*s13 - 16*s12^2*s13^2)*s23^3 + (-16*s12^2*s13 -
                 20*s12*s13^2)*s23^4 + 8*s12*s13*s23^5)) +
           p3q*(p1q*p2q^4*((12*s12^2*s13^3 - 8*s12*s13^4)*s23^2 + 4*s12*s13^3*
                s23^3) + p1q^2*p2q^3*((-8*s12^3*s13^2 + 20*s12^2*s13^3 -
                 4*s12*s13^4)*s23^2 + (-8*s12^2*s13^2 + 28*s12*s13^3)*s23^3 -
               8*s12*s13^2*s23^4) + p1q^5*(4*s12^2*s13*s23^4 + 4*s12*s13*
                s23^5) + p1q^3*p2q^2*((-8*s12^3*s13^2 + 4*s12^2*s13^3)*
                s23^2 + (-8*s12^3*s13 - 24*s12^2*s13^2 + 12*s12*s13^3)*
                s23^3 + (-4*s12^2*s13 - 32*s12*s13^2)*s23^4 + 4*s12*s13*
                s23^5) + p1q^4*p2q*((-8*s12^3*s13 - 8*s12^2*s13^2)*s23^3 +
               (4*s12^2*s13 - 12*s12*s13^2)*s23^4 + 12*s12*s13*s23^5))) +
         ((p3q^6*((-9*s12^3*s13 - 9*s12^2*s13^2)*s23^2 - 9*s12^2*s13*s23^3) +
            p2q^6*(-36*s12^3*s13^3 - 72*s12^2*s13^4 - 36*s12*s13^5 +
              (-108*s12^2*s13^3 - 144*s12*s13^4 - 36*s13^5)*s23 +
              (-81*s12*s13^3 - 45*s13^4)*s23^2 - 9*s13^3*s23^3) +
            p1q*p2q^5*(-36*s12^3*s13^3 - 72*s12^2*s13^4 - 36*s12*s13^5 +
              (72*s12^3*s13^2 + 9*s12^2*s13^3 - 90*s12*s13^4 - 27*s13^5)*
               s23 + (216*s12^2*s13^2 + 171*s12*s13^3 + 27*s13^4)*s23^2 +
              (162*s12*s13^2 + 72*s13^3)*s23^3 + 18*s13^2*s23^4) +
            p1q^5*p2q*((-27*s12^2*s13 + 18*s12*s13^2 + 45*s13^3)*s23^3 +
              (18*s12^2 - 81*s12*s13 - 27*s13^2)*s23^4 + (18*s12 - 72*s13)*
               s23^5) + p1q^4*p2q^2*((54*s12^2*s13^2 + 18*s12*s13^3 -
                36*s13^4)*s23^2 + (-36*s12^3 - 108*s12^2*s13 + 162*s12*
                 s13^2 + 144*s13^3)*s23^3 + (-36*s12^2 - 99*s12*s13 +
                153*s13^2)*s23^4 - 27*s13*s23^5) +
            p1q^6*((-18*s12*s13 - 18*s13^2)*s23^4 - 18*s13*s23^5) +
            p1q^3*p2q^3*((-27*s12^2*s13^3 - 18*s12*s13^4 + 9*s13^5)*s23 +
              (18*s12^4 + 18*s12^3*s13 + 36*s12^2*s13^2 - 135*s12*s13^3 -
                135*s13^4)*s23^2 + (18*s12^3 - 135*s12^2*s13 - 72*s12*s13^2 -
                117*s13^3)*s23^3 + (-153*s12*s13 + 9*s13^2)*s23^4 -
              18*s13*s23^5) + p1q^2*p2q^4*((-18*s12^4*s13 + 54*s12^3*s13^2 +
                126*s12^2*s13^3 + 90*s12*s13^4 + 36*s13^5)*s23 +
              (-54*s12^3*s13 + 234*s12^2*s13^2 + 279*s12*s13^3 + 63*s13^4)*
               s23^2 + (-108*s12^2*s13 + 126*s12*s13^2 + 27*s13^3)*s23^3 +
              (-81*s12*s13 - 9*s13^2)*s23^4 - 9*s13*s23^5) +
            p3q^5*(p2q*(-36*s12^5*s13 - 72*s12^4*s13^2 - 36*s12^3*s13^3 +
                (-108*s12^4*s13 - 144*s12^3*s13^2 - 36*s12^2*s13^3)*s23 +
                (-108*s12^3*s13 - 54*s12^2*s13^2 + 18*s12*s13^3)*s23^2 +
                (-36*s12^2*s13 + 18*s12*s13^2)*s23^3) +
              p1q*((-36*s12^5 - 99*s12^4*s13 - 126*s12^3*s13^2 - 63*s12^2*
                   s13^3)*s23 + (-72*s12^4 - 153*s12^3*s13 - 117*s12^2*s13^2)*
                 s23^2 + (-36*s12^3 - 36*s12^2*s13 + 18*s12*s13^2)*s23^3 +
                18*s12*s13*s23^4)) + p3q^3*(p2q^3*(-108*s12^5*s13 +
                288*s12^3*s13^3 + 144*s12^2*s13^4 - 36*s12*s13^5 +
                (-324*s12^4*s13 + 216*s12^3*s13^2 + 648*s12^2*s13^3 +
                  72*s12*s13^4 - 36*s13^5)*s23 + (-252*s12^3*s13 +
                  396*s12^2*s13^2 + 216*s12*s13^3 - 72*s13^4)*s23^2 +
                (-36*s12^2*s13 + 108*s12*s13^2 - 36*s13^3)*s23^3) +
              p1q*p2q^2*(-72*s12^5*s13 - 72*s12^4*s13^2 + 72*s12^3*s13^3 +
                72*s12^2*s13^4 + (-144*s12^5 - 189*s12^4*s13 + 504*s12^3*
                   s13^2 + 756*s12^2*s13^3 + 180*s12*s13^4 - 27*s13^5)*s23 +
                (-288*s12^4 + 189*s12^3*s13 + 1287*s12^2*s13^2 + 729*s12*
                   s13^3 - 9*s13^4)*s23^2 + (-144*s12^3 + 414*s12^2*s13 +
                  684*s12*s13^2 + 90*s13^3)*s23^3 + (108*s12*s13 + 72*s13^2)*
                 s23^4) + p1q^3*((45*s12^4*s13 + 54*s12^3*s13^2 +
                  9*s12^2*s13^3)*s23 + (90*s12^4 + 189*s12^3*s13 +
                  153*s12^2*s13^2 + 90*s12*s13^3)*s23^2 + (90*s12^3 +
                  63*s12^2*s13 + 90*s12*s13^2 - 9*s13^3)*s23^3 +
                (-36*s12^2 - 45*s12*s13 - 27*s13^2)*s23^4 +
                (-36*s12 - 18*s13)*s23^5) + p1q^2*p2q*((-90*s12^5 -
                  162*s12^4*s13 - 198*s12^3*s13^2 - 126*s12^2*s13^3)*s23 +
                (-18*s12^4 - 18*s12^3*s13 - 162*s12^2*s13^2 - 18*s12*s13^3)*
                 s23^2 + (180*s12^3 + 54*s12^2*s13 - 90*s12*s13^2 - 36*s13^3)*
                 s23^3 + (108*s12^2 - 72*s12*s13 - 72*s13^2)*s23^4 -
                36*s13*s23^5)) + p3q^2*(p2q^4*(-36*s12^5*s13 + 144*s12^4*
                 s13^2 + 288*s12^3*s13^3 - 108*s12*s13^5 + (-108*s12^4*s13 +
                  504*s12^3*s13^2 + 504*s12^2*s13^3 - 216*s12*s13^4 -
                  108*s13^5)*s23 + (-81*s12^3*s13 + 459*s12^2*s13^2 +
                  18*s12*s13^3 - 162*s13^4)*s23^2 + (-9*s12^2*s13 +
                  72*s12*s13^2 - 54*s13^3)*s23^3) + p1q*p2q^3*(-36*s12^5*
                 s13 + 72*s12^4*s13^2 + 216*s12^3*s13^3 + 72*s12^2*s13^4 -
                36*s12*s13^5 + (-72*s12^5 + 81*s12^4*s13 + 1152*s12^3*s13^2 +
                  1224*s12^2*s13^3 + 180*s12*s13^4 - 45*s13^5)*s23 +
                (-144*s12^4 + 459*s12^3*s13 + 1917*s12^2*s13^2 + 1107*s12*
                   s13^3 + 81*s13^4)*s23^2 + (-72*s12^3 + 414*s12^2*s13 +
                  900*s12*s13^2 + 234*s13^3)*s23^3 + (72*s12*s13 + 108*s13^2)*
                 s23^4) + p1q^4*((-108*s12^3*s13 - 126*s12^2*s13^2 -
                  18*s12*s13^3)*s23^2 + (-72*s12^3 - 198*s12^2*s13 -
                  54*s12*s13^2 - 18*s13^3)*s23^3 + (-90*s12^2 - 45*s12*s13 -
                  27*s13^2)*s23^4 + (-18*s12 - 9*s13)*s23^5) +
              p1q^2*p2q^2*((-108*s12^5 - 162*s12^4*s13 + 54*s12^3*s13^2 +
                  162*s12^2*s13^3 + 54*s12*s13^4)*s23 + (-90*s12^4 -
                  81*s12^3*s13 + 225*s12^2*s13^2 + 279*s12*s13^3 + 63*s13^4)*
                 s23^2 + (90*s12^3 - 189*s12^2*s13 - 126*s12*s13^2 - 9*s13^3)*
                 s23^3 + (72*s12^2 - 270*s12*s13 - 126*s13^2)*s23^4 -
                54*s13*s23^5) + p1q^3*p2q*((-27*s12^4*s13 - 108*s12^3*s13^2 -
                  99*s12^2*s13^3 - 18*s12*s13^4)*s23 + (144*s12^4 +
                  171*s12^3*s13 - 81*s12^2*s13^2 - 54*s12*s13^3 + 18*s13^4)*
                 s23^2 + (162*s12^3 + 135*s12^2*s13 - 36*s12*s13^2 -
                  27*s13^3)*s23^3 + (18*s12^2 + 45*s12*s13 - 63*s13^2)*
                 s23^4 - 18*s13*s23^5)) + p3q^4*(p2q^2*(-108*s12^5*s13 -
                144*s12^4*s13^2 + 36*s12^3*s13^3 + 72*s12^2*s13^4 +
                (-324*s12^4*s13 - 216*s12^3*s13^2 + 180*s12^2*s13^3 +
                  72*s12*s13^4)*s23 + (-270*s12^3*s13 + 54*s12^2*s13^2 +
                  135*s12*s13^3 - 9*s13^4)*s23^2 + (-54*s12^2*s13 +
                  72*s12*s13^2 - 9*s13^3)*s23^3) + p1q*p2q*(-36*s12^5*s13 -
                72*s12^4*s13^2 - 36*s12^3*s13^3 + (-108*s12^5 - 225*s12^4*
                   s13 - 72*s12^3*s13^2 + 135*s12^2*s13^3 + 90*s12*s13^4)*
                 s23 + (-216*s12^4 - 135*s12^3*s13 + 279*s12^2*s13^2 +
                  270*s12*s13^3)*s23^2 + (-108*s12^3 + 126*s12^2*s13 +
                  270*s12*s13^2 + 18*s13^3)*s23^3 + (72*s12*s13 + 18*s13^2)*
                 s23^4) + p1q^2*((-36*s12^5 - 72*s12^4*s13 - 108*s12^3*
                   s13^2 - 72*s12^2*s13^3)*s23 + (18*s12^4 + 81*s12^3*s13 +
                  63*s12^2*s13^2 + 72*s12*s13^3)*s23^2 + (126*s12^3 +
                  207*s12^2*s13 + 144*s12*s13^2)*s23^3 + (72*s12^2 +
                  63*s12*s13 - 9*s13^2)*s23^4 - 9*s13*s23^5)) +
            p3q*(p2q^5*(72*s12^4*s13^2 + 36*s12^3*s13^3 - 144*s12^2*s13^4 -
                108*s12*s13^5 + (216*s12^3*s13^2 - 36*s12^2*s13^3 -
                  360*s12*s13^4 - 108*s13^5)*s23 + (162*s12^2*s13^2 -
                  162*s12*s13^3 - 144*s13^4)*s23^2 + (18*s12*s13^2 -
                  36*s13^3)*s23^3) + p1q*p2q^4*(72*s12^4*s13^2 +
                72*s12^3*s13^3 - 72*s12^2*s13^4 - 72*s12*s13^5 +
                (144*s12^4*s13 + 774*s12^3*s13^2 + 675*s12^2*s13^3 -
                  45*s13^5)*s23 + (288*s12^3*s13 + 1242*s12^2*s13^2 +
                  819*s12*s13^3 + 117*s13^4)*s23^2 + (162*s12^2*s13 +
                  630*s12*s13^2 + 234*s13^3)*s23^3 + (18*s12*s13 + 72*s13^2)*
                 s23^4) + p1q^5*((81*s12^2*s13 + 90*s12*s13^2 + 9*s13^3)*
                 s23^3 + (18*s12^2 + 99*s12*s13 + 9*s13^2)*s23^4 +
                18*s12*s23^5) + p1q^4*p2q*((54*s12^3*s13 - 18*s12^2*s13^2 -
                  90*s12*s13^3 - 18*s13^4)*s23^2 + (-72*s12^3 + 72*s12^2*
                   s13 + 36*s12*s13^2)*s23^3 + (-54*s12^2 + 72*s12*s13 -
                  18*s13^2)*s23^4 + (18*s12 - 36*s13)*s23^5) +
              p1q^2*p2q^3*((-54*s12^5 - 90*s12^4*s13 + 198*s12^3*s13^2 +
                  342*s12^2*s13^3 + 144*s12*s13^4 + 36*s13^5)*s23 +
                (-90*s12^4 - 180*s12^3*s13 + 468*s12^2*s13^2 + 504*s12*
                   s13^3 + 90*s13^4)*s23^2 + (-36*s12^3 - 360*s12^2*s13 +
                  18*s12*s13^2 - 18*s13^3)*s23^3 + (-288*s12*s13 - 108*s13^2)*
                 s23^4 - 36*s13*s23^5) + p1q^3*p2q^2*((54*s12^3*s13^2 +
                  81*s12^2*s13^3 + 36*s12*s13^4 + 9*s13^5)*s23 +
                (108*s12^4 + 252*s12^3*s13 + 270*s12^2*s13^2 + 45*s12*s13^3 -
                  45*s13^4)*s23^2 + (126*s12^3 + 117*s12^2*s13 +
                  54*s12*s13^2 - 27*s13^3)*s23^3 + (18*s12^2 - 27*s12*s13 +
                  45*s13^2)*s23^4 + 18*s13*s23^5)))*
           Log((p2q + p3q)/(p1q + p2q + p3q)))/
          (p1q*p3q^5*(4*s12^4*s13 + 4*s12^3*s13^2)*s23^2 +
           p1q*p2q^5*(4*s12^2*s13^3 + 4*s12*s13^4)*s23^2 -
           4*p1q^5*p2q*s12*s13*s23^5 + p1q^2*p2q^4*
            ((4*s12^2*s13^3 + 4*s12*s13^4)*s23^2 + (-8*s12^2*s13^2 - 12*s12*
                s13^3)*s23^3) + p1q^3*p2q^3*((-8*s12^2*s13^2 - 12*s12*s13^3)*
              s23^3 + (4*s12^2*s13 + 12*s12*s13^2)*s23^4) +
           p1q^4*p2q^2*((4*s12^2*s13 + 12*s12*s13^2)*s23^4 -
             4*s12*s13*s23^5) + p3q^4*(p1q*p2q*(12*s12^4*s13 + 4*s12^3*
                s13^2 - 8*s12^2*s13^3)*s23^2 + p1q^2*((4*s12^4*s13 +
                 4*s12^3*s13^2)*s23^2 + (-12*s12^3*s13 - 8*s12^2*s13^2)*
                s23^3)) + p3q^3*(p1q*p2q^2*(12*s12^4*s13 - 12*s12^3*s13^2 -
               20*s12^2*s13^3 + 4*s12*s13^4)*s23^2 + p1q^2*p2q*
              ((8*s12^4*s13 - 8*s12^2*s13^3)*s23^2 + (-32*s12^3*s13 -
                 24*s12^2*s13^2 - 8*s12*s13^3)*s23^3) +
             p1q^3*((-12*s12^3*s13 - 8*s12^2*s13^2)*s23^3 + (12*s12^2*s13 +
                 4*s12*s13^2)*s23^4)) + p3q*(p1q*p2q^4*(-8*s12^3*s13^2 + 4*
                s12^2*s13^3 + 12*s12*s13^4)*s23^2 - 4*p1q^5*s12*s13*s23^5 +
             p1q^2*p2q^3*((-8*s12^3*s13^2 + 8*s12*s13^4)*s23^2 +
               (-8*s12^3*s13 - 24*s12^2*s13^2 - 32*s12*s13^3)*s23^3) +
             p1q^3*p2q^2*((-8*s12^3*s13 - 16*s12^2*s13^2 - 20*s12*s13^3)*
                s23^3 + (20*s12^2*s13 + 28*s12*s13^2)*s23^4) +
             p1q^4*p2q*((16*s12^2*s13 + 16*s12*s13^2)*s23^4 - 8*s12*s13*
                s23^5)) + p3q^2*(p1q*p2q^3*(4*s12^4*s13 - 20*s12^3*s13^2 - 12*
                s12^2*s13^3 + 12*s12*s13^4)*s23^2 + p1q^2*p2q^2*
              ((4*s12^4*s13 - 12*s12^3*s13^2 - 12*s12^2*s13^3 + 4*s12*s13^4)*
                s23^2 + (-28*s12^3*s13 - 32*s12^2*s13^2 - 28*s12*s13^3)*
                s23^3) + p1q^3*p2q*((-20*s12^3*s13 - 16*s12^2*s13^2 -
                 8*s12*s13^3)*s23^3 + (28*s12^2*s13 + 20*s12*s13^2)*s23^4) +
             p1q^4*((12*s12^2*s13 + 4*s12*s13^2)*s23^4 - 4*s12*s13*s23^5))) +
         ((p2q^2*(36*s12^2*s13 + 36*s12*s13^2 + (72*s12*s13 + 36*s13^2)*s23 +
              36*s13*s23^2) + p1q*p2q*((-9*s12*s13 - 9*s13^2)*s23 +
              (-2*s12 - 11*s13)*s23^2 - 2*s23^3) +
            p3q*(p2q*(36*s12^2*s13 + 36*s12*s13^2 + (54*s12*s13 + 18*s13^2)*
                 s23 + 18*s13*s23^2) + p1q*((9*s12*s13 + 9*s13^2)*s23 +
                (-2*s12 + 7*s13)*s23^2 - 2*s23^3)))*Log(-s12 - s13 - s23))/
          (2*p1q*p2q*s12*s13*s23^2 + 2*p1q*p3q*s12*s13*s23^2) +
         ((p3q^6*((-9*s12^4*s13 - 9*s12^3*s13^2)*s23 + (-s12^4 -
                10*s12^3*s13)*s23^2 - s12^3*s23^3) +
            p2q^6*(36*s12^2*s13^4 + 36*s12*s13^5 + (-9*s12^2*s13^3 +
                27*s12*s13^4)*s23 + (-8*s12*s13^3 + s13^4)*s23^2 +
              (s12*s13^2 + 2*s13^3)*s23^3 + s13^2*s23^4) +
            p1q^6*((-9*s12^2*s13 - 18*s12*s13^2 - 9*s13^3)*s23^3 +
              (-18*s12*s13 - 18*s13^2)*s23^4 - 9*s13*s23^5) +
            p1q*p2q^5*(72*s12^2*s13^4 + 72*s12*s13^5 + (-90*s12^2*s13^3 -
                27*s12*s13^4 - 9*s13^5)*s23 + (21*s12^2*s13^2 -
                67*s12*s13^3 - 7*s13^4)*s23^2 + (22*s12*s13^2 + 3*s13^3)*s23^
                3 + (-2*s12*s13 - s13^2)*s23^4 - 2*s13*s23^5) +
            p1q^2*p2q^4*(36*s12^2*s13^4 + 36*s12*s13^5 + (36*s12^3*s13^2 -
                108*s12^2*s13^3 - 135*s12*s13^4 - 27*s13^5)*s23 +
              (2*s12^3*s13 + 154*s12^2*s13^2 - 16*s12*s13^3 - 15*s13^4)*s23^
                2 + (-9*s12^2*s13 + 106*s12*s13^2 + 13*s13^3)*s23^3 +
              (-16*s12*s13 - 4*s13^2)*s23^4 + (s12 - 4*s13)*s23^5 + s23^6) +
            p1q^5*p2q*((18*s12^2*s13^2 + 36*s12*s13^3 + 18*s13^4)*s23^2 +
              (-18*s12^2*s13 - 9*s12*s13^2 + 9*s13^3)*s23^3 +
              (3*s12^2 - 31*s12*s13 - 25*s13^2)*s23^4 + (6*s12 - 13*s13)*s23^
                5 + 3*s23^6) + p1q^3*p2q^3*((36*s12^3*s13^2 - 36*s12^2*
                 s13^3 - 99*s12*s13^4 - 27*s13^5)*s23 + (-34*s12^3*s13 +
                133*s12^2*s13^2 + 97*s12*s13^3 + 11*s13^4)*s23^2 +
              (-2*s12^3 - 100*s12^2*s13 + 73*s12*s13^2 + 44*s13^3)*s23^3 +
              (-3*s12^2 - 73*s12*s13 - 2*s13^2)*s23^4 + (2*s12 - 5*s13)*s23^
                5 + 3*s23^6) + p1q^4*p2q^2*((-9*s12^2*s13^3 - 18*s12*s13^4 -
                9*s13^5)*s23 + (-36*s12^3*s13 + 18*s12^2*s13^2 +
                90*s12*s13^3 + 36*s13^4)*s23^2 + (-2*s12^3 - 100*s12^2*s13 -
                3*s12*s13^2 + 50*s13^3)*s23^3 + (-72*s12*s13 - 7*s13^2)*s23^
                4 + (7*s12 - 7*s13)*s23^5 + 5*s23^6) +
            p3q^5*(p2q*(-36*s12^5*s13 - 36*s12^4*s13^2 + (-72*s12^4*s13 -
                  18*s12^3*s13^2 + 18*s12^2*s13^3)*s23 + (-3*s12^4 -
                  36*s12^3*s13 + 21*s12^2*s13^2)*s23^2 + (-2*s12^3 +
                  4*s12^2*s13)*s23^3 + s12^2*s23^4) +
              p1q*((-45*s12^4*s13 - 45*s12^3*s13^2)*s23 +
                (s12^4 - 17*s12^3*s13 + 27*s12^2*s13^2)*s23^2 +
                (4*s12^3 + 30*s12^2*s13)*s23^3 + 3*s12^2*s23^4)) +
            p3q^4*(p2q^2*(-72*s12^5*s13 + 36*s12^4*s13^2 + 108*s12^3*s13^3 +
                (-126*s12^4*s13 + 126*s12^3*s13^2 + 63*s12^2*s13^3 -
                  9*s12*s13^4)*s23 + (-3*s12^4 - 48*s12^3*s13 + 78*s12^2*
                   s13^2 - 12*s12*s13^3)*s23^2 + (10*s12^2*s13 - 5*s12*s13^2)*
                 s23^3 + (3*s12^2 - 2*s12*s13)*s23^4) +
              p1q^2*((-54*s12^4*s13 - 27*s12^3*s13^2 + 27*s12^2*s13^3)*s23 +
                (3*s12^4 + 66*s12^3*s13 + 144*s12^2*s13^2)*s23^2 +
                (3*s12^3 + 90*s12^2*s13 - 27*s12*s13^2)*s23^3 +
                (-3*s12^2 - 30*s12*s13)*s23^4 - 3*s12*s23^5) +
              p1q*p2q*(-36*s12^5*s13 + 36*s12^3*s13^3 + (153*s12^3*s13^2 +
                  81*s12^2*s13^3)*s23 + (s12^4 + 163*s12^3*s13 + 207*s12^2*
                   s13^2)*s23^2 + (8*s12^3 + 131*s12^2*s13 - 2*s12*s13^2)*
                 s23^3 + (5*s12^2 - 4*s12*s13)*s23^4 - 2*s12*s23^5)) +
            p3q^3*(p2q^3*(-36*s12^5*s13 + 180*s12^4*s13^2 + 108*s12^3*s13^3 -
                108*s12^2*s13^4 + (-72*s12^4*s13 + 288*s12^3*s13^2 -
                  36*s12^2*s13^3 - 36*s12*s13^4)*s23 + (-s12^4 - 28*s12^3*
                   s13 + 108*s12^2*s13^2 - 44*s12*s13^3 + s13^4)*s23^2 +
                (2*s12^3 + 6*s12^2*s13 - 14*s12*s13^2 + 2*s13^3)*s23^3 +
                (3*s12^2 - 6*s12*s13 + s13^2)*s23^4) + p1q*p2q^2*(
                -36*s12^5*s13 + 144*s12^4*s13^2 + 108*s12^3*s13^3 -
                72*s12^2*s13^4 + (99*s12^4*s13 + 369*s12^3*s13^2 -
                  45*s12^2*s13^3 - 27*s12*s13^4)*s23 + (-s12^4 + 289*s12^3*
                   s13 + 210*s12^2*s13^2 - 17*s12*s13^3 + 9*s13^4)*s23^2 +
                (4*s12^3 + 150*s12^2*s13 - 10*s12*s13^2 + 8*s13^3)*s23^3 +
                (-s12^2 - 18*s12*s13 - 3*s13^2)*s23^4 + (-6*s12 - 2*s13)*
                 s23^5) + p1q^2*p2q*(36*s12^4*s13^2 + 36*s12^3*s13^3 +
                (54*s12^4*s13 + 90*s12^3*s13^2 - 18*s12^2*s13^3 -
                  18*s12*s13^4)*s23 + (9*s12^4 + 138*s12^3*s13 + 41*s12^2*
                   s13^2 - 52*s12*s13^3)*s23^2 + (12*s12^3 - 70*s12^2*s13 -
                  200*s12*s13^2 - 18*s13^3)*s23^3 + (-6*s12^2 - 158*s12*s13 -
                  19*s13^2)*s23^4 - 8*s12*s23^5 + s23^6) +
              p1q^3*((-9*s12^4*s13 + 27*s12^3*s13^2 + 36*s12^2*s13^3)*s23 +
                (3*s12^4 + 131*s12^3*s13 + 137*s12^2*s13^2 - 36*s12*s13^3)*
                 s23^2 + (35*s12^2*s13 - 135*s12*s13^2)*s23^3 +
                (-6*s12^2 - 93*s12*s13 + 9*s13^2)*s23^4 + (-2*s12 + 10*s13)*
                 s23^5 + s23^6)) + p3q^2*(p2q^4*(108*s12^4*s13^2 -
                108*s12^3*s13^3 - 180*s12^2*s13^4 + 36*s12*s13^5 +
                (-9*s12^4*s13 + 171*s12^3*s13^2 - 198*s12^2*s13^3 -
                  18*s12*s13^4)*s23 + (-6*s12^3*s13 + 66*s12^2*s13^2 -
                  60*s12*s13^3 + 3*s13^4)*s23^2 + (s12^3 - 2*s12^2*s13 -
                  12*s12*s13^2 + 6*s13^3)*s23^3 + (s12^2 - 6*s12*s13 +
                  3*s13^2)*s23^4) + p1q*p2q^3*(144*s12^4*s13^2 -
                108*s12^3*s13^3 - 216*s12^2*s13^4 + 36*s12*s13^5 +
                (54*s12^4*s13 + 207*s12^3*s13^2 - 315*s12^2*s13^3 -
                  45*s12*s13^4 - 9*s13^5)*s23 + (-s12^4 + 125*s12^3*s13 +
                  132*s12^2*s13^2 - 5*s12*s13^3 + 7*s13^4)*s23^2 +
                (55*s12^2*s13 + 28*s12*s13^2 + 11*s13^3)*s23^3 +
                (-5*s12^2 - 30*s12*s13 - 11*s13^2)*s23^4 + (-6*s12 - 6*s13)*
                 s23^5) + p1q^4*((-9*s12^4*s13 - 18*s12^3*s13^2 -
                  9*s12^2*s13^3)*s23 + (-54*s12^2*s13^2 - 54*s12*s13^3)*
                 s23^2 + (-6*s12^3 - 109*s12^2*s13 - 157*s12*s13^2 + 9*s13^3)*
                 s23^3 + (-9*s12^2 - 88*s12*s13 + 36*s13^2)*s23^4 +
                (-s12 + 29*s13)*s23^5 + 2*s23^6) + p1q^2*p2q^2*(
                36*s12^4*s13^2 - 36*s12^3*s13^3 - 72*s12^2*s13^4 +
                (72*s12^4*s13 - 63*s12^3*s13^2 - 333*s12^2*s13^3 -
                  99*s12*s13^4 - 9*s13^5)*s23 + (4*s12^4 + 28*s12^3*s13 -
                  182*s12^2*s13^2 - 64*s12*s13^3 - 20*s13^4)*s23^2 +
                (-3*s12^3 - 223*s12^2*s13 - 203*s12*s13^2 - 83*s13^3)*s23^3 +
                (-24*s12^2 - 188*s12*s13 - 75*s13^2)*s23^4 - 14*s12*s23^5 +
                3*s23^6) + p1q^3*p2q*((-18*s12^4*s13 - 63*s12^3*s13^2 -
                  27*s12^2*s13^3 + 18*s12*s13^4)*s23 + (5*s12^4 -
                  47*s12^3*s13 + 29*s12^2*s13^2 + 126*s12*s13^3)*s23^2 +
                (-6*s12^3 - 183*s12^2*s13 - 37*s12*s13^2 - 7*s13^3)*s23^3 +
                (-22*s12^2 - 95*s12*s13 + 47*s13^2)*s23^4 + (-6*s12 + 59*s13)*
                 s23^5 + 5*s23^6)) + p3q*(p2q^5*(-108*s12^3*s13^3 -
                36*s12^2*s13^4 + 72*s12*s13^5 + (18*s12^3*s13^2 - 126*s12^2*
                   s13^3 + 36*s12*s13^4)*s23 + (15*s12^2*s13^2 -
                  36*s12*s13^3 + 3*s13^4)*s23^2 + (-2*s12^2*s13 -
                  2*s12*s13^2 + 6*s13^3)*s23^3 + (-2*s12*s13 + 3*s13^2)*
                 s23^4) + p1q*p2q^4*(-180*s12^3*s13^3 - 72*s12^2*s13^4 +
                108*s12*s13^5 + (36*s12^3*s13^2 - 279*s12^2*s13^3 -
                  45*s12*s13^4 - 18*s13^5)*s23 + (16*s12^3*s13 + 123*s12^2*
                   s13^2 - 55*s12*s13^3 - 9*s13^4)*s23^2 + (6*s12^2*s13 +
                  58*s12*s13^2 + 6*s13^3)*s23^3 + (-2*s12^2 - 18*s12*s13 -
                  9*s13^2)*s23^4 + (-2*s12 - 6*s13)*s23^5) + p1q^2*p2q^3*(
                -72*s12^3*s13^3 - 36*s12^2*s13^4 + 36*s12*s13^5 +
                (-36*s12^4*s13 - 108*s12^3*s13^2 - 288*s12^2*s13^3 -
                  108*s12*s13^4)*s23 + (-2*s12^4 - 150*s12^3*s13 -
                  69*s12^2*s13^2 + 8*s12*s13^3 + 37*s13^4)*s23^2 +
                (-12*s12^3 - 252*s12^2*s13 - 68*s12*s13^2 - 16*s13^3)*s23^3 +
                (-21*s12^2 - 148*s12*s13 - 60*s13^2)*s23^4 + (-8*s12 - 4*s13)*
                 s23^5 + 3*s23^6) + p1q^5*((18*s12^3*s13 + 36*s12^2*s13^2 +
                  18*s12*s13^3)*s23^2 + (27*s12^2*s13 + 45*s12*s13^2 +
                  18*s13^3)*s23^3 + (3*s12^2 + 41*s12*s13 + 47*s13^2)*s23^4 +
                (6*s12 + 32*s13)*s23^5 + 3*s23^6) + p1q^3*p2q^2*(
                (36*s12^4*s13 + 54*s12^3*s13^2 + 27*s12^2*s13^3 +
                  27*s12*s13^4 + 18*s13^5)*s23 + (2*s12^4 + 58*s12^3*s13 +
                  295*s12^2*s13^2 + 277*s12*s13^3 + 29*s13^4)*s23^2 +
                (-8*s12^3 - 21*s12^2*s13 + 153*s12*s13^2 - 62*s13^3)*s23^3 +
                (-19*s12^2 - 3*s12*s13 - 36*s13^2)*s23^4 + (-2*s12 + 44*s13)*
                 s23^5 + 7*s23^6) + p1q^4*p2q*((18*s12^3*s13^2 + 36*s12^2*
                   s13^3 + 18*s12*s13^4)*s23 + (36*s12^3*s13 + 180*s12^2*
                   s13^2 + 108*s12*s13^3 - 36*s13^4)*s23^2 +
                (-8*s12^3 + 52*s12^2*s13 + 110*s12*s13^2 - 76*s13^3)*s23^3 +
                (-9*s12^2 + 74*s12*s13 + 11*s13^2)*s23^4 + (6*s12 + 58*s13)*
                 s23^5 + 7*s23^6)))*Log(s12/(s12 + s13 + s23)))/
          (4*p1q*p3q^5*s12^4*s13*s23^2 + p1q*p2q^5*(-4*s12*s13^4*s23^2 -
             4*s12*s13^3*s23^3) + p1q^2*p2q^4*(-8*s12*s13^4*s23^2 +
             8*s12*s13^2*s23^4) + p1q^4*p2q^2*(8*s12*s13^3*s23^3 -
             8*s12*s13*s23^5) + p1q^5*p2q*(-4*s12*s13^2*s23^4 -
             4*s12*s13*s23^5) + p1q^3*p2q^3*(-4*s12*s13^4*s23^2 +
             12*s12*s13^3*s23^3 + 12*s12*s13^2*s23^4 - 4*s12*s13*s23^5) +
           p3q^4*(p1q^2*((4*s12^4*s13 - 4*s12^3*s13^2)*s23^2 - 12*s12^3*s13*
                s23^3) + p1q*p2q*((8*s12^4*s13 - 12*s12^3*s13^2)*s23^2 - 4*
                s12^3*s13*s23^3)) + p3q^3*(p1q*p2q^2*((4*s12^4*s13 -
                 24*s12^3*s13^2 + 12*s12^2*s13^3)*s23^2 + (-8*s12^3*s13 +
                 8*s12^2*s13^2)*s23^3) + p1q^2*p2q*((4*s12^4*s13 -
                 20*s12^3*s13^2 + 8*s12^2*s13^3)*s23^2 + (-28*s12^3*s13 +
                 8*s12^2*s13^2)*s23^3 + 8*s12^2*s13*s23^4) +
             p1q^3*(-4*s12^3*s13^2*s23^2 + (-12*s12^3*s13 + 8*s12^2*s13^2)*
                s23^3 + 12*s12^2*s13*s23^4)) +
           p3q*(p1q*p2q^4*((12*s12^2*s13^3 - 8*s12*s13^4)*s23^2 +
               (8*s12^2*s13^2 - 8*s12*s13^3)*s23^3) + p1q^2*p2q^3*
              ((20*s12^2*s13^3 - 12*s12*s13^4)*s23^2 + (16*s12^2*s13^2 +
                 4*s12*s13^3)*s23^3 + (8*s12^2*s13 + 16*s12*s13^2)*s23^4) +
             p1q^4*p2q*((8*s12^2*s13^2 + 8*s12*s13^3)*s23^3 + (12*s12^2*s13 -
                 4*s12*s13^2)*s23^4 - 12*s12*s13*s23^5) + p1q^3*p2q^2*
              ((8*s12^2*s13^3 - 4*s12*s13^4)*s23^2 + (16*s12^2*s13^2 +
                 20*s12*s13^3)*s23^3 + (20*s12^2*s13 + 16*s12*s13^2)*s23^4 -
               8*s12*s13*s23^5) + p1q^5*(-4*s12*s13^2*s23^4 - 4*s12*s13*
                s23^5)) + p3q^2*(p1q*p2q^3*((-12*s12^3*s13^2 + 24*s12^2*
                  s13^3 - 4*s12*s13^4)*s23^2 + (-4*s12^3*s13 + 16*s12^2*
                  s13^2 - 4*s12*s13^3)*s23^3) + p1q^2*p2q^2*
              ((-16*s12^3*s13^2 + 28*s12^2*s13^3 - 4*s12*s13^4)*s23^2 +
               (-16*s12^3*s13 + 24*s12^2*s13^2 + 4*s12*s13^3)*s23^3 +
               (16*s12^2*s13 + 8*s12*s13^2)*s23^4) + p1q^4*(8*s12^2*s13^2*
                s23^3 + (12*s12^2*s13 - 4*s12*s13^2)*s23^4 - 4*s12*s13*
                s23^5) + p1q^3*p2q*((-4*s12^3*s13^2 + 8*s12^2*s13^3)*s23^2 +
               (-12*s12^3*s13 + 24*s12^2*s13^2 + 8*s12*s13^3)*s23^3 +
               (32*s12^2*s13 + 4*s12*s13^2)*s23^4 - 4*s12*s13*s23^5))) +
         ((p2q^5*(-(s12*s13^3) - s13^4 - s13^3*s23) +
            p3q^5*(s12^4 + s12^3*s13 + (2*s12^3 + s12^2*s13)*s23 +
              s12^2*s23^2) + p1q*p2q^4*(s12*s13^3 + s13^4 + (3*s12*s13^2 +
                4*s13^3)*s23 + 3*s13^2*s23^2) + p1q^2*p2q^3*(-2*s12^2*s13^2 -
              s12*s13^3 + s13^4 + (-2*s12*s13^2 + s13^3)*s23 +
              (-3*s12*s13 - 3*s13^2)*s23^2 - 3*s13*s23^3) +
            p1q^5*((-2*s12^2 - 3*s12*s13 - s13^2)*s23^2 + (-3*s12 - 2*s13)*
               s23^3 - s23^4) + p1q^3*p2q^2*(-2*s12^3*s13 - 6*s12^2*s13^2 -
              5*s12*s13^3 - s13^4 + (-2*s12^2*s13 - 7*s12*s13^2 - 4*s13^3)*
               s23 + (-3*s12*s13 - 6*s13^2)*s23^2 + (s12 - 2*s13)*s23^3 +
              s23^4) + p1q^4*p2q*((2*s12^3 + 8*s12^2*s13 + 8*s12*s13^2 +
                2*s13^3)*s23 + (4*s12^2 + 11*s12*s13 + 5*s13^2)*s23^2 +
              (4*s12 + 5*s13)*s23^3 + 2*s23^4) +
            p3q^4*(p2q*(2*s12^4 - s12^3*s13 - 3*s12^2*s13^2 +
                (4*s12^3 - 3*s12^2*s13 - 2*s12*s13^2)*s23 +
                (2*s12^2 - 2*s12*s13)*s23^2) + p1q*(-2*s12^4 - 3*s12^3*s13 -
                s12^2*s13^2 + (-5*s12^3 - 4*s12^2*s13)*s23 +
                (-5*s12^2 - 2*s12*s13)*s23^2 - 2*s12*s23^3)) +
            p3q^3*(p2q^2*(s12^4 - 5*s12^3*s13 - 3*s12^2*s13^2 + 3*s12*s13^3 +
                (2*s12^3 - 9*s12^2*s13 + s13^3)*s23 + (s12^2 - 4*s12*s13 +
                  s13^2)*s23^2) + p1q*p2q*(-2*s12^4 - 2*s12^3*s13 +
                2*s12^2*s13^2 + 2*s12*s13^3 + (-6*s12^3 - 6*s12^2*s13)*s23 +
                (-8*s12^2 - 8*s12*s13 - 2*s13^2)*s23^2 + (-4*s12 - 2*s13)*
                 s23^3) + p1q^2*(-5*s12^4 - 7*s12^3*s13 - 2*s12^2*s13^2 +
                (-4*s12^3 + s12^2*s13 + 2*s12*s13^2)*s23 +
                (4*s12^2 + 5*s12*s13)*s23^2 + (4*s12 + s13)*s23^3 + s23^4)) +
            p3q^2*(p2q^3*(-3*s12^3*s13 + 3*s12^2*s13^2 + 5*s12*s13^3 -
                s13^4 + (-5*s12^2*s13 + 6*s12*s13^2 + s13^3)*s23 +
                (-2*s12*s13 + 2*s13^2)*s23^2) + p1q*p2q^2*(-3*s12^3*s13 -
                5*s12^2*s13^2 - 3*s12*s13^3 - s13^4 + (-s12^3 - 12*s12^2*
                   s13 - 13*s12*s13^2 - 4*s13^3)*s23 + (-3*s12^2 -
                  14*s12*s13 - 7*s13^2)*s23^2 + (-2*s12 - 4*s13)*s23^3) +
              p1q^3*(-2*s12^4 - 3*s12^3*s13 - s12^2*s13^2 +
                (7*s12^3 + 12*s12^2*s13 + 4*s12*s13^2)*s23 +
                (13*s12^2 + 7*s12*s13 - s13^2)*s23^2 + (3*s12 - 2*s13)*
                 s23^3 - s23^4) + p1q^2*p2q*(-6*s12^4 - 7*s12^3*s13 -
                s12^2*s13^2 + (-10*s12^3 - 9*s12^2*s13 - 6*s12*s13^2 -
                  2*s13^3)*s23 + (-6*s12^2 - 9*s12*s13 - 5*s13^2)*s23^2 -
                s13*s23^3 + 2*s23^4)) + p3q*(p2q^4*(3*s12^2*s13^2 +
                s12*s13^3 - 2*s13^4 + (4*s12*s13^2 - s13^3)*s23 +
                s13^2*s23^2) + p1q*p2q^3*(4*s12^2*s13^2 + 8*s12*s13^3 +
                4*s13^4 + (-2*s12^2*s13 + 6*s12*s13^2 + 8*s13^3)*s23 +
                (-4*s12*s13 + 2*s13^2)*s23^2 - 2*s13*s23^3) +
              p1q^4*((4*s12^3 + 6*s12^2*s13 + 2*s12*s13^2)*s23 +
                (s12^2 - 3*s12*s13 - 2*s13^2)*s23^2 + (-6*s12 - 5*s13)*
                 s23^3 - 3*s23^4) + p1q^2*p2q^2*(-3*s12^2*s13^2 - s12*s13^3 +
                2*s13^4 + (-4*s12^2*s13 - 12*s12*s13^2 - 3*s13^3)*s23 +
                (-s12^2 - 11*s12*s13 - 11*s13^2)*s23^2 - 5*s13*s23^3 +
                s23^4) + p1q^3*p2q*(-2*s12^4 - 4*s12^3*s13 - 4*s12^2*s13^2 -
                2*s12*s13^3 + (2*s12^3 + 8*s12^2*s13 + 4*s12*s13^2)*s23 +
                (8*s12^2 + 14*s12*s13 + 4*s13^2)*s23^2 + (8*s12 + 8*s13)*
                 s23^3 + 4*s23^4)))*Log(s13/(s12 + s13 + s23)))/
          (-4*p1q*p2q^4*s12*s13^4 + p1q*p3q^4*(4*s12^4*s13 +
             4*s12^3*s13*s23) + p1q^2*p2q^3*(4*s12^2*s13^3 - 4*s12*s13^4 +
             12*s12*s13^3*s23) + p1q^3*p2q^2*(4*s12^2*s13^3 +
             (-8*s12^2*s13^2 + 12*s12*s13^3)*s23 - 12*s12*s13^2*s23^2) +
           p1q^5*(4*s12^2*s13*s23^2 + 4*s12*s13*s23^3) +
           p1q^4*p2q*(-8*s12^2*s13^2*s23 + (4*s12^2*s13 - 12*s12*s13^2)*
              s23^2 + 4*s12*s13*s23^3) + p3q^3*(p1q*p2q*(4*s12^4*s13 - 12*
                s12^3*s13^2 + (4*s12^3*s13 - 8*s12^2*s13^2)*s23) +
             p1q^2*(8*s12^4*s13 - 8*s12^2*s13*s23^2)) +
           p3q^2*(p1q*p2q^2*(-12*s12^3*s13^2 + 12*s12^2*s13^3 +
               (-8*s12^2*s13^2 + 4*s12*s13^3)*s23) + p1q^2*p2q*
              (4*s12^4*s13 - 20*s12^3*s13^2 + (-4*s12^3*s13 - 16*s12^2*s13^2)*
                s23 + (-8*s12^2*s13 - 8*s12*s13^2)*s23^2) +
             p1q^3*(4*s12^4*s13 - 12*s12^3*s13*s23 - 12*s12^2*s13*s23^2 + 4*
                s12*s13*s23^3)) + p3q*(p1q*p2q^3*(12*s12^2*s13^3 - 4*s12*
                s13^4 + 4*s12*s13^3*s23) + p1q^2*p2q^2*(-8*s12^3*s13^2 + 16*
                s12^2*s13^3 + (-8*s12^2*s13^2 + 16*s12*s13^3)*s23 - 8*s12*
                s13^2*s23^2) + p1q^3*p2q*(-8*s12^3*s13^2 + (-8*s12^3*s13 -
                 16*s12^2*s13^2)*s23 + (-4*s12^2*s13 - 20*s12*s13^2)*s23^2 +
               4*s12*s13*s23^3) + p1q^4*(-8*s12^3*s13*s23 + 8*s12*s13*
                s23^3))) + ((p3q^6*((9*s12^3 + 9*s12^2*s13)*s23^2 +
              9*s12^2*s23^3) + p2q^6*(72*s12^3*s13^2 + 144*s12^2*s13^3 +
              72*s12*s13^4 + (144*s12^2*s13^2 + 180*s12*s13^3 + 36*s13^4)*
               s23 + (81*s12*s13^2 + 45*s13^3)*s23^2 + 9*s13^2*s23^3) +
            p1q*p2q^5*(72*s12^3*s13^2 + 144*s12^2*s13^3 + 72*s12*s13^4 +
              (-144*s12^3*s13 - 153*s12^2*s13^2 + 18*s12*s13^3 + 27*s13^4)*
               s23 + (-288*s12^2*s13 - 279*s12*s13^2 - 27*s13^3)*s23^2 +
              (-162*s12*s13 - 72*s13^2)*s23^3 - 18*s13*s23^4) +
            p1q^2*p2q^4*((-180*s12^3*s13 - 360*s12^2*s13^2 - 216*s12*s13^3 -
                36*s13^4)*s23 + (72*s12^3 - 198*s12^2*s13 - 297*s12*s13^2 -
                63*s13^3)*s23^2 + (144*s12^2 - 18*s12*s13 - 27*s13^2)*s23^3 +
              (81*s12 + 9*s13)*s23^4 + 9*s23^5) + p1q^3*p2q^3*
             ((27*s12^2*s13^2 + 18*s12*s13^3 - 9*s13^4)*s23 +
              (108*s12^3 + 234*s12^2*s13 + 297*s12*s13^2 + 135*s13^3)*s23^2 +
              (207*s12^2 + 198*s12*s13 + 117*s13^2)*s23^3 + (117*s12 - 9*s13)*
               s23^4 + 18*s23^5) + p1q^6*((18*s12 + 18*s13)*s23^4 +
              18*s23^5) + p1q^4*p2q^2*((-54*s12^2*s13 - 18*s12*s13^2 +
                36*s13^3)*s23^2 + (-18*s12^2 - 252*s12*s13 - 144*s13^2)*s23^
                3 + (9*s12 - 153*s13)*s23^4 + 27*s23^5) +
            p1q^5*p2q*((27*s12^2 - 18*s12*s13 - 45*s13^2)*s23^3 +
              (99*s12 + 27*s13)*s23^4 + 72*s23^5) +
            p3q^5*(p2q*(72*s12^5 + 144*s12^4*s13 + 72*s12^3*s13^2 +
                (144*s12^4 + 180*s12^3*s13 + 36*s12^2*s13^2)*s23 +
                (108*s12^3 + 54*s12^2*s13 - 18*s12*s13^2)*s23^2 +
                (36*s12^2 - 18*s12*s13)*s23^3) + p1q*((-9*s12^4 +
                  18*s12^3*s13 + 27*s12^2*s13^2)*s23 + (9*s12^3 +
                  45*s12^2*s13)*s23^2 - 18*s12*s13*s23^3 - 18*s12*s23^4)) +
            p3q^4*(p2q^2*(216*s12^5 + 288*s12^4*s13 - 72*s12^3*s13^2 -
                144*s12^2*s13^3 + (432*s12^4 + 252*s12^3*s13 - 252*s12^2*
                   s13^2 - 72*s12*s13^3)*s23 + (270*s12^3 - 54*s12^2*s13 -
                  135*s12*s13^2 + 9*s13^3)*s23^2 + (54*s12^2 - 72*s12*s13 +
                  9*s13^2)*s23^3) + p1q*p2q*(72*s12^5 + 144*s12^4*s13 +
                72*s12^3*s13^2 + (-63*s12^4 - 144*s12^3*s13 - 135*s12^2*
                   s13^2 - 54*s12*s13^3)*s23 + (-261*s12^3 - 351*s12^2*s13 -
                  198*s12*s13^2)*s23^2 + (-198*s12^2 - 234*s12*s13 -
                  18*s13^2)*s23^3 + (-72*s12 - 18*s13)*s23^4) +
              p1q^2*((-36*s12^4 + 36*s12^2*s13^2)*s23 + (-9*s12^3 +
                  27*s12^2*s13 - 36*s12*s13^2)*s23^2 + (-9*s12^2 -
                  72*s12*s13)*s23^3 + (-27*s12 + 9*s13)*s23^4 + 9*s23^5)) +
            p3q^3*(p2q^3*(216*s12^5 - 576*s12^3*s13^2 - 288*s12^2*s13^3 +
                72*s12*s13^4 + (432*s12^4 - 324*s12^3*s13 - 828*s12^2*s13^2 -
                  36*s12*s13^3 + 36*s13^4)*s23 + (252*s12^3 - 396*s12^2*s13 -
                  216*s12*s13^2 + 72*s13^3)*s23^2 + (36*s12^2 - 108*s12*s13 +
                  36*s13^2)*s23^3) + p1q*p2q^2*(144*s12^5 + 144*s12^4*s13 -
                144*s12^3*s13^2 - 144*s12^2*s13^3 + (-207*s12^4 - 900*s12^3*
                   s13 - 936*s12^2*s13^2 - 216*s12*s13^3 + 27*s13^4)*s23 +
                (-765*s12^3 - 1431*s12^2*s13 - 729*s12*s13^2 + 9*s13^3)*
                 s23^2 + (-522*s12^2 - 648*s12*s13 - 90*s13^2)*s23^3 +
                (-108*s12 - 72*s13)*s23^4) + p1q^3*((-45*s12^4 - 54*s12^3*
                   s13 - 9*s12^2*s13^2)*s23 + (27*s12^3 + 9*s12^2*s13 -
                  54*s12*s13^2)*s23^2 + (45*s12^2 - 72*s12*s13 + 9*s13^2)*
                 s23^3 + (-9*s12 + 27*s13)*s23^4 + 18*s23^5) +
              p1q^2*p2q*((-180*s12^4 - 216*s12^3*s13 - 72*s12^2*s13^2 -
                  36*s12*s13^3)*s23 + (-72*s12^3 + 108*s12^2*s13)*s23^2 +
                (144*s12^2 + 108*s12*s13 + 36*s13^2)*s23^3 +
                (72*s12 + 72*s13)*s23^4 + 36*s23^5)) +
            p3q*(p2q^5*(-144*s12^4*s13 - 72*s12^3*s13^2 + 288*s12^2*s13^3 +
                216*s12*s13^4 + (-288*s12^3*s13 + 72*s12^2*s13^2 +
                  468*s12*s13^3 + 108*s13^4)*s23 + (-162*s12^2*s13 +
                  162*s12*s13^2 + 144*s13^3)*s23^2 + (-18*s12*s13 + 36*s13^2)*
                 s23^3) + p1q*p2q^4*(-144*s12^4*s13 - 144*s12^3*s13^2 +
                144*s12^2*s13^3 + 144*s12*s13^4 + (-144*s12^4 - 990*s12^3*
                   s13 - 1107*s12^2*s13^2 - 216*s12*s13^3 + 45*s13^4)*s23 +
                (-288*s12^3 - 1386*s12^2*s13 - 1107*s12*s13^2 - 117*s13^3)*
                 s23^2 + (-162*s12^2 - 630*s12*s13 - 234*s13^2)*s23^3 +
                (-18*s12 - 72*s13)*s23^4) + p1q^5*((-81*s12^2 - 90*s12*s13 -
                  9*s13^2)*s23^3 + (-81*s12 - 9*s13)*s23^4) +
              p1q^3*p2q^2*((-54*s12^3*s13 - 81*s12^2*s13^2 - 36*s12*s13^3 -
                  9*s13^4)*s23 + (126*s12^3 + 234*s12^2*s13 + 189*s12*s13^2 +
                  45*s13^3)*s23^2 + (63*s12^2 + 72*s12*s13 + 27*s13^2)*
                 s23^3 + (-81*s12 - 45*s13)*s23^4 - 18*s23^5) +
              p1q^4*p2q*((-54*s12^3 + 18*s12^2*s13 + 90*s12*s13^2 + 18*s13^3)*
                 s23^2 + (-252*s12^2 - 144*s12*s13)*s23^3 +
                (-162*s12 + 18*s13)*s23^4 + 36*s23^5) + p1q^2*p2q^3*(
                (-108*s12^4 - 540*s12^3*s13 - 756*s12^2*s13^2 - 360*s12*
                   s13^3 - 36*s13^4)*s23 + (90*s12^3 - 306*s12^2*s13 -
                  450*s12*s13^2 - 90*s13^3)*s23^2 + (450*s12^2 + 252*s12*
                   s13 + 18*s13^2)*s23^3 + (288*s12 + 108*s13)*s23^4 +
                36*s23^5)) + p3q^2*(p2q^4*(72*s12^5 - 288*s12^4*s13 -
                576*s12^3*s13^2 + 216*s12*s13^4 + (144*s12^4 - 684*s12^3*
                   s13 - 612*s12^2*s13^2 + 324*s12*s13^3 + 108*s13^4)*s23 +
                (81*s12^3 - 459*s12^2*s13 - 18*s12*s13^2 + 162*s13^3)*s23^2 +
                (9*s12^2 - 72*s12*s13 + 54*s13^2)*s23^3) + p1q*p2q^3*(
                72*s12^5 - 144*s12^4*s13 - 432*s12^3*s13^2 - 144*s12^2*
                 s13^3 + 72*s12*s13^4 + (-297*s12^4 - 1584*s12^3*s13 -
                  1728*s12^2*s13^2 - 396*s12*s13^3 + 45*s13^4)*s23 +
                (-783*s12^3 - 2133*s12^2*s13 - 1359*s12*s13^2 - 81*s13^3)*
                 s23^2 + (-486*s12^2 - 900*s12*s13 - 234*s13^2)*s23^3 +
                (-72*s12 - 108*s13)*s23^4) + p1q^4*((108*s12^3 + 126*s12^2*
                   s13 + 18*s12*s13^2)*s23^2 + (72*s12^2 + 18*s13^2)*s23^3 +
                (-27*s12 + 27*s13)*s23^4 + 9*s23^5) + p1q^3*p2q*(
                (27*s12^4 + 108*s12^3*s13 + 99*s12^2*s13^2 + 18*s12*s13^3)*
                 s23 + (261*s12^3 + 513*s12^2*s13 + 198*s12*s13^2 - 18*s13^3)*
                 s23^2 + (153*s12^2 + 162*s12*s13 + 27*s13^2)*s23^3 +
                (-63*s12 + 63*s13)*s23^4 + 18*s23^5) + p1q^2*p2q^2*(
                (-252*s12^4 - 576*s12^3*s13 - 504*s12^2*s13^2 - 180*s12*
                   s13^3)*s23 + (-81*s12^3 - 135*s12^2*s13 - 225*s12*s13^2 -
                  63*s13^3)*s23^2 + (387*s12^2 + 306*s12*s13 + 9*s13^2)*
                 s23^3 + (270*s12 + 126*s13)*s23^4 + 54*s23^5)))*
           Log(s23/(s12 + s13 + s23)))/(p1q*p3q^5*(4*s12^4 + 4*s12^3*s13)*
            s23^2 + p1q*p2q^5*(4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 -
           4*p1q^5*p2q*s12*s23^5 + p1q^2*p2q^4*((4*s12^2*s13^2 + 4*s12*s13^3)*
              s23^2 + (-8*s12^2*s13 - 12*s12*s13^2)*s23^3) +
           p1q^3*p2q^3*((-8*s12^2*s13 - 12*s12*s13^2)*s23^3 +
             (4*s12^2 + 12*s12*s13)*s23^4) + p1q^4*p2q^2*
            ((4*s12^2 + 12*s12*s13)*s23^4 - 4*s12*s23^5) +
           p3q^4*(p1q*p2q*(12*s12^4 + 4*s12^3*s13 - 8*s12^2*s13^2)*s23^2 +
             p1q^2*((4*s12^4 + 4*s12^3*s13)*s23^2 + (-12*s12^3 - 8*s12^2*s13)*
                s23^3)) + p3q^3*(p1q*p2q^2*(12*s12^4 - 12*s12^3*s13 - 20*
                s12^2*s13^2 + 4*s12*s13^3)*s23^2 + p1q^2*p2q*
              ((8*s12^4 - 8*s12^2*s13^2)*s23^2 + (-32*s12^3 - 24*s12^2*s13 -
                 8*s12*s13^2)*s23^3) + p1q^3*((-12*s12^3 - 8*s12^2*s13)*
                s23^3 + (12*s12^2 + 4*s12*s13)*s23^4)) +
           p3q*(p1q*p2q^4*(-8*s12^3*s13 + 4*s12^2*s13^2 + 12*s12*s13^3)*
              s23^2 - 4*p1q^5*s12*s23^5 + p1q^2*p2q^3*((-8*s12^3*s13 +
                 8*s12*s13^3)*s23^2 + (-8*s12^3 - 24*s12^2*s13 -
                 32*s12*s13^2)*s23^3) + p1q^3*p2q^2*((-8*s12^3 -
                 16*s12^2*s13 - 20*s12*s13^2)*s23^3 + (20*s12^2 + 28*s12*s13)*
                s23^4) + p1q^4*p2q*((16*s12^2 + 16*s12*s13)*s23^4 - 8*s12*
                s23^5)) + p3q^2*(p1q*p2q^3*(4*s12^4 - 20*s12^3*s13 - 12*s12^2*
                s13^2 + 12*s12*s13^3)*s23^2 + p1q^2*p2q^2*
              ((4*s12^4 - 12*s12^3*s13 - 12*s12^2*s13^2 + 4*s12*s13^3)*
                s23^2 + (-28*s12^3 - 32*s12^2*s13 - 28*s12*s13^2)*s23^3) +
             p1q^3*p2q*((-20*s12^3 - 16*s12^2*s13 - 8*s12*s13^2)*s23^3 +
               (28*s12^2 + 20*s12*s13)*s23^4) + p1q^4*((12*s12^2 + 4*s12*s13)*
                s23^4 - 4*s12*s23^5)))) + Log(p2q/(p1q + p2q + p3q))*
        ((-9*s12 - 9*s13 - 9*s23)/(2*s13*s23) +
         ((p3q^6*((s12^4 + s12^3*s13)*s23^2 + s12^3*s23^3) +
            p2q^6*(-36*s12^2*s13^4 - 36*s12*s13^5 + (-36*s12^2*s13^3 -
                108*s12*s13^4 - 36*s13^5)*s23 + (-73*s12*s13^3 - 73*s13^4)*
               s23^2 + (-(s12*s13^2) - 38*s13^3)*s23^3 - s13^2*s23^4) +
            p1q*p2q^5*(-72*s12^2*s13^4 - 72*s12*s13^5 + (-36*s12^2*s13^3 -
                180*s12*s13^4 - 72*s13^5)*s23 + (33*s12^2*s13^2 -
                45*s12*s13^3 - 114*s13^4)*s23^2 + (64*s12*s13^2 - 11*s13^3)*
               s23^3 + (2*s12*s13 + 33*s13^2)*s23^4 + 2*s13*s23^5) +
            p1q^4*p2q^2*((-54*s12^2*s13^2 - 72*s12*s13^3 - 18*s13^4)*s23^2 +
              (2*s12^3 - 44*s12^2*s13 - 160*s12*s13^2 - 78*s13^3)*s23^3 +
              (-99*s12*s13 - 111*s13^2)*s23^4 + (-15*s12 - 64*s13)*s23^5 -
              13*s23^6) + p1q^3*p2q^3*((72*s12^3*s13^2 + 198*s12^2*s13^3 +
                144*s12*s13^4 + 18*s13^5)*s23 + (70*s12^3*s13 + 281*s12^2*
                 s13^2 + 349*s12*s13^3 + 102*s13^4)*s23^2 + (2*s12^3 +
                100*s12^2*s13 + 200*s12*s13^2 + 117*s13^3)*s23^3 +
              (3*s12^2 - 5*s12*s13 - s13^2)*s23^4 + (-6*s12 - 41*s13)*s23^5 -
              7*s23^6) + p1q^5*p2q*((-3*s12^2 - 9*s12*s13 - 6*s13^2)*s23^4 +
              (-10*s12 - 13*s13)*s23^5 - 7*s23^6) + p1q^2*p2q^4*
             (-36*s12^2*s13^4 - 36*s12*s13^5 + (72*s12^3*s13^2 +
                198*s12^2*s13^3 + 72*s12*s13^4 - 18*s13^5)*s23 +
              (70*s12^3*s13 + 368*s12^2*s13^2 + 449*s12*s13^3 + 79*s13^4)*s23^
                2 + (144*s12^2*s13 + 425*s12*s13^2 + 222*s13^3)*s23^3 +
              (87*s12*s13 + 138*s13^2)*s23^4 + (-s12 + 12*s13)*s23^5 -
              s23^6) + p3q^5*(p1q*((3*s12^4 + 3*s12^3*s13)*s23^2 -
                3*s12^2*s13*s23^3 - 3*s12^2*s23^4) + p2q*(36*s12^5*s13 +
                36*s12^4*s13^2 + (72*s12^4*s13 + 36*s12^3*s13^2)*s23 +
                (3*s12^4 + 36*s12^3*s13 - 3*s12^2*s13^2)*s23^2 +
                (2*s12^3 - 4*s12^2*s13)*s23^3 - s12^2*s23^4)) +
            p3q^4*(p2q^2*(72*s12^5*s13 - 36*s12^4*s13^2 - 108*s12^3*s13^3 +
                (108*s12^4*s13 - 180*s12^3*s13^2 - 108*s12^2*s13^3)*s23 +
                (3*s12^4 - 6*s12^3*s13 - 150*s12^2*s13^2 + 3*s12*s13^3)*
                 s23^2 + (-46*s12^2*s13 + 5*s12*s13^2)*s23^3 +
                (-3*s12^2 + 2*s12*s13)*s23^4) + p1q*p2q*(36*s12^5*s13 -
                36*s12^3*s13^3 + (-36*s12^4*s13 - 180*s12^3*s13^2 -
                  72*s12^2*s13^3)*s23 + (7*s12^4 - 185*s12^3*s13 -
                  192*s12^2*s13^2)*s23^2 + (-4*s12^3 - 129*s12^2*s13 +
                  2*s12*s13^2)*s23^3 + (-9*s12^2 + 4*s12*s13)*s23^4 +
                2*s12*s23^5) + p1q^2*((s12^4 - 3*s12^3*s13 - 4*s12^2*s13^2)*
                 s23^2 + (-11*s12^3 - 16*s12^2*s13)*s23^3 +
                (-9*s12^2 + 3*s12*s13)*s23^4 + 3*s12*s23^5)) +
            p3q*(p2q^5*(108*s12^3*s13^3 + 36*s12^2*s13^4 - 72*s12*s13^5 +
                (72*s12^3*s13^2 + 216*s12^2*s13^3 - 108*s12*s13^4 - 72*s13^5)*
                 s23 + (147*s12^2*s13^2 + 36*s12*s13^3 - 147*s13^4)*s23^2 +
                (2*s12^2*s13 + 74*s12*s13^2 - 78*s13^3)*s23^3 +
                (2*s12*s13 - 3*s13^2)*s23^4) + p1q*p2q^4*(180*s12^3*s13^3 +
                72*s12^2*s13^4 - 108*s12*s13^5 + (216*s12^3*s13^2 +
                  612*s12^2*s13^3 - 108*s13^5)*s23 + (110*s12^3*s13 +
                  699*s12^2*s13^2 + 545*s12*s13^3 - 152*s13^4)*s23^2 +
                (236*s12^2*s13 + 566*s12*s13^2 + 23*s13^3)*s23^3 +
                (2*s12^2 + 134*s12*s13 + 73*s13^2)*s23^4 + (2*s12 + 6*s13)*
                 s23^5) + p1q^4*p2q*((-54*s12^2*s13^2 - 72*s12*s13^3 -
                  18*s13^4)*s23^2 + (8*s12^3 - 26*s12^2*s13 - 148*s12*s13^2 -
                  78*s13^3)*s23^3 + (21*s12^2 - 76*s12*s13 - 115*s13^2)*
                 s23^4 + (-6*s12 - 74*s13)*s23^5 - 19*s23^6) +
              p1q^3*p2q^2*((90*s12^3*s13^2 + 198*s12^2*s13^3 + 126*s12*
                   s13^4 + 18*s13^5)*s23 + (-2*s12^4 + 140*s12^3*s13 +
                  325*s12^2*s13^2 + 249*s12*s13^3 + 66*s13^4)*s23^2 +
                (8*s12^3 + 208*s12^2*s13 + 80*s12*s13^2 - 21*s13^3)*s23^3 +
                (39*s12^2 - 17*s12*s13 - 171*s13^2)*s23^4 +
                (14*s12 - 117*s13)*s23^5 - 15*s23^6) + p1q^5*(
                (-3*s12^2 - 9*s12*s13 - 6*s13^2)*s23^4 + (-10*s12 - 13*s13)*
                 s23^5 - 7*s23^6) + p1q^2*p2q^3*(72*s12^3*s13^3 +
                36*s12^2*s13^4 - 36*s12*s13^5 + (-72*s12^4*s13 + 72*s12^3*
                   s13^2 + 486*s12^2*s13^3 + 216*s12*s13^4 - 18*s13^5)*s23 +
                (2*s12^4 + 60*s12^3*s13 + 647*s12^2*s13^2 + 738*s12*s13^3 +
                  77*s13^4)*s23^2 + (12*s12^3 + 304*s12^2*s13 + 594*s12*
                   s13^2 + 152*s13^3)*s23^3 + (29*s12^2 + 134*s12*s13 +
                  8*s13^2)*s23^4 + (16*s12 - 52*s13)*s23^5 - 3*s23^6)) +
            p3q^2*(p2q^4*(-108*s12^4*s13^2 + 108*s12^3*s13^3 + 180*s12^2*
                 s13^4 - 36*s12*s13^5 + (-36*s12^4*s13 - 108*s12^3*s13^2 +
                  432*s12^2*s13^3 + 108*s12*s13^4 - 36*s13^5)*s23 +
                (-75*s12^3*s13 + 150*s12^2*s13^2 + 294*s12*s13^3 - 75*s13^4)*
                 s23^2 + (-s12^3 - 34*s12^2*s13 + 156*s12*s13^2 - 42*s13^3)*
                 s23^3 + (-s12^2 + 6*s12*s13 - 3*s13^2)*s23^4) +
              p1q*p2q^3*(-144*s12^4*s13^2 + 108*s12^3*s13^3 + 216*s12^2*
                 s13^4 - 36*s12*s13^5 + (-180*s12^4*s13 - 252*s12^3*s13^2 +
                  612*s12^2*s13^3 + 180*s12*s13^4 - 72*s13^5)*s23 +
                (s12^4 - 227*s12^3*s13 + 411*s12^2*s13^2 + 601*s12*s13^3 -
                  146*s13^4)*s23^2 + (-4*s12^3 + 125*s12^2*s13 + 566*s12*
                   s13^2 - 73*s13^3)*s23^3 + (s12^2 + 190*s12*s13 + 7*s13^2)*
                 s23^4 + (6*s12 + 6*s13)*s23^5) + p1q^3*p2q*(
                (90*s12^3*s13^2 + 144*s12^2*s13^3 + 54*s12*s13^4)*s23 +
                (-5*s12^4 + 133*s12^3*s13 + 362*s12^2*s13^2 + 188*s12*s13^3)*
                 s23^2 + (-6*s12^3 + 281*s12^2*s13 + 248*s12*s13^2 -
                  30*s13^3)*s23^3 + (42*s12^2 + 155*s12*s13 - 62*s13^2)*
                 s23^4 + (34*s12 - 41*s13)*s23^5 - 9*s23^6) +
              p1q^4*((6*s12^3 + 18*s12^2*s13 + 12*s12*s13^2)*s23^3 +
                (21*s12^2 + 23*s12*s13 - 4*s13^2)*s23^4 + (9*s12 - 10*s13)*
                 s23^5 - 6*s23^6) + p1q^2*p2q^2*(-36*s12^4*s13^2 +
                36*s12^3*s13^3 + 72*s12^2*s13^4 + (-126*s12^4*s13 +
                  414*s12^2*s13^3 + 144*s12*s13^4 - 36*s13^5)*s23 +
                (-4*s12^4 + 37*s12^3*s13 + 698*s12^2*s13^2 + 511*s12*s13^3 -
                  74*s13^4)*s23^2 + (-13*s12^3 + 476*s12^2*s13 + 655*s12*
                   s13^2 - 70*s13^3)*s23^3 + (24*s12^2 + 326*s12*s13 -
                  57*s13^2)*s23^4 + (30*s12 - 28*s13)*s23^5 - 3*s23^6)) +
            p3q^3*(p2q^3*(36*s12^5*s13 - 180*s12^4*s13^2 - 108*s12^3*s13^3 +
                108*s12^2*s13^4 + (-396*s12^3*s13^2 + 72*s12^2*s13^3 +
                  108*s12*s13^4)*s23 + (s12^4 - 116*s12^3*s13 - 144*s12^2*
                   s13^2 + 188*s12*s13^3 - s13^4)*s23^2 + (-2*s12^3 -
                  78*s12^2*s13 + 86*s12*s13^2 - 2*s13^3)*s23^3 +
                (-3*s12^2 + 6*s12*s13 - s13^2)*s23^4) + p1q*p2q^2*(
                36*s12^5*s13 - 144*s12^4*s13^2 - 108*s12^3*s13^3 +
                72*s12^2*s13^4 + (-180*s12^4*s13 - 504*s12^3*s13^2 +
                  108*s12^2*s13^3 + 144*s12*s13^4)*s23 + (5*s12^4 -
                  417*s12^3*s13 - 123*s12^2*s13^2 + 335*s12*s13^3)*s23^2 +
                (-8*s12^3 - 129*s12^2*s13 + 282*s12*s13^2 + s13^3)*s23^3 +
                (-7*s12^2 + 98*s12*s13 + 3*s13^2)*s23^4 + (6*s12 + 2*s13)*
                 s23^5) + p1q^2*p2q*(-36*s12^4*s13^2 - 36*s12^3*s13^3 +
                (-126*s12^4*s13 - 180*s12^3*s13^2 + 18*s12^2*s13^3 +
                  36*s12*s13^4)*s23 + (-5*s12^4 - 172*s12^3*s13 +
                  55*s12^2*s13^2 + 150*s12*s13^3)*s23^2 + (-36*s12^3 +
                  48*s12^2*s13 + 234*s12*s13^2)*s23^3 + (-14*s12^2 +
                  138*s12*s13 + s13^2)*s23^4 + 16*s12*s23^5 - s23^6) +
              p1q^3*((-3*s12^4 - 9*s12^3*s13 - 6*s12^2*s13^2)*s23^2 +
                (-12*s12^3 - 7*s12^2*s13 + 8*s12*s13^2)*s23^3 +
                (6*s12^2 + 23*s12*s13)*s23^4 + (14*s12 - s13)*s23^5 -
                s23^6)))*Log((p1q + p2q)/(p1q + p2q + p3q)))/
          (4*p1q*p3q^5*s12^4*s13*s23^2 + p1q*p2q^5*(-4*s12*s13^4*s23^2 -
             4*s12*s13^3*s23^3) + p1q^2*p2q^4*(-8*s12*s13^4*s23^2 +
             8*s12*s13^2*s23^4) + p1q^4*p2q^2*(8*s12*s13^3*s23^3 -
             8*s12*s13*s23^5) + p1q^5*p2q*(-4*s12*s13^2*s23^4 -
             4*s12*s13*s23^5) + p1q^3*p2q^3*(-4*s12*s13^4*s23^2 +
             12*s12*s13^3*s23^3 + 12*s12*s13^2*s23^4 - 4*s12*s13*s23^5) +
           p3q^4*(p1q^2*((4*s12^4*s13 - 4*s12^3*s13^2)*s23^2 - 12*s12^3*s13*
                s23^3) + p1q*p2q*((8*s12^4*s13 - 12*s12^3*s13^2)*s23^2 - 4*
                s12^3*s13*s23^3)) + p3q^3*(p1q*p2q^2*((4*s12^4*s13 -
                 24*s12^3*s13^2 + 12*s12^2*s13^3)*s23^2 + (-8*s12^3*s13 +
                 8*s12^2*s13^2)*s23^3) + p1q^2*p2q*((4*s12^4*s13 -
                 20*s12^3*s13^2 + 8*s12^2*s13^3)*s23^2 + (-28*s12^3*s13 +
                 8*s12^2*s13^2)*s23^3 + 8*s12^2*s13*s23^4) +
             p1q^3*(-4*s12^3*s13^2*s23^2 + (-12*s12^3*s13 + 8*s12^2*s13^2)*
                s23^3 + 12*s12^2*s13*s23^4)) +
           p3q*(p1q*p2q^4*((12*s12^2*s13^3 - 8*s12*s13^4)*s23^2 +
               (8*s12^2*s13^2 - 8*s12*s13^3)*s23^3) + p1q^2*p2q^3*
              ((20*s12^2*s13^3 - 12*s12*s13^4)*s23^2 + (16*s12^2*s13^2 +
                 4*s12*s13^3)*s23^3 + (8*s12^2*s13 + 16*s12*s13^2)*s23^4) +
             p1q^4*p2q*((8*s12^2*s13^2 + 8*s12*s13^3)*s23^3 + (12*s12^2*s13 -
                 4*s12*s13^2)*s23^4 - 12*s12*s13*s23^5) + p1q^3*p2q^2*
              ((8*s12^2*s13^3 - 4*s12*s13^4)*s23^2 + (16*s12^2*s13^2 +
                 20*s12*s13^3)*s23^3 + (20*s12^2*s13 + 16*s12*s13^2)*s23^4 -
               8*s12*s13*s23^5) + p1q^5*(-4*s12*s13^2*s23^4 - 4*s12*s13*
                s23^5)) + p3q^2*(p1q*p2q^3*((-12*s12^3*s13^2 + 24*s12^2*
                  s13^3 - 4*s12*s13^4)*s23^2 + (-4*s12^3*s13 + 16*s12^2*
                  s13^2 - 4*s12*s13^3)*s23^3) + p1q^2*p2q^2*
              ((-16*s12^3*s13^2 + 28*s12^2*s13^3 - 4*s12*s13^4)*s23^2 +
               (-16*s12^3*s13 + 24*s12^2*s13^2 + 4*s12*s13^3)*s23^3 +
               (16*s12^2*s13 + 8*s12*s13^2)*s23^4) + p1q^4*(8*s12^2*s13^2*
                s23^3 + (12*s12^2*s13 - 4*s12*s13^2)*s23^4 - 4*s12*s13*
                s23^5) + p1q^3*p2q*((-4*s12^3*s13^2 + 8*s12^2*s13^3)*s23^2 +
               (-12*s12^3*s13 + 24*s12^2*s13^2 + 8*s12*s13^3)*s23^3 +
               (32*s12^2*s13 + 4*s12*s13^2)*s23^4 - 4*s12*s13*s23^5))) +
         ((p2q^5*(-18*s12*s13^3 - 18*s13^4 - 18*s13^3*s23) +
            p1q*p2q^4*(-18*s12*s13^3 - 18*s13^4 + (36*s12*s13^2 + 18*s13^3)*
               s23 + 36*s13^2*s23^2) + p1q^3*p2q^2*((-9*s12^2 - 45*s12*s13 -
                36*s13^2)*s23^2 + (-9*s12 - 36*s13)*s23^3) +
            p1q^2*p2q^3*((9*s12^2*s13 + 54*s12*s13^2 + 45*s13^3)*s23 +
              (-9*s12*s13 + 27*s13^2)*s23^2 - 18*s13*s23^3) +
            p1q^4*p2q*((9*s12 + 9*s13)*s23^3 + 9*s23^4) +
            p3q^4*(p2q*(-18*s12^3*s13 - 18*s12^2*s13^2 - 18*s12^2*s13*s23) +
              p1q*((18*s12^3 + 36*s12^2*s13 + 18*s12*s13^2)*s23 +
                (36*s12^2 + 36*s12*s13)*s23^2 + 18*s12*s23^3)) +
            p3q^3*(p2q^2*(-36*s12^3*s13 + 36*s12*s13^3 + (-36*s12^2*s13 +
                  36*s12*s13^2)*s23) + p1q*p2q*(-18*s12^3*s13 -
                18*s12^2*s13^2 + (36*s12^3 + 36*s12^2*s13 - 18*s13^3)*s23 +
                (72*s12^2 + 36*s12*s13 - 36*s13^2)*s23^2 + (36*s12 - 18*s13)*
                 s23^3) + p1q^2*((18*s12^3 + 36*s12^2*s13 + 18*s12*s13^2)*
                 s23 + (9*s12^2 - 9*s12*s13 - 18*s13^2)*s23^2 +
                (-27*s12 - 36*s13)*s23^3 - 18*s23^4)) +
            p3q^2*(p2q^3*(-18*s12^3*s13 + 54*s12^2*s13^2 + 54*s12*s13^3 -
                18*s13^4 + (-18*s12^2*s13 + 72*s12*s13^2 - 18*s13^3)*s23) +
              p1q*p2q^2*(-18*s12^3*s13 + 18*s12^2*s13^2 + 36*s12*s13^3 +
                (36*s12^3 + 54*s12^2*s13 + 108*s12*s13^2 + 36*s13^3)*s23 +
                (72*s12^2 + 72*s12*s13 + 36*s13^2)*s23^2 + 36*s12*s23^3) +
              p1q^2*p2q*((27*s12^3 + 72*s12^2*s13 + 63*s12*s13^2 + 18*s13^3)*
                 s23 + (36*s12^2 + 45*s12*s13 + 9*s13^2)*s23^2 +
                (9*s12 - 9*s13)*s23^3) + p1q^3*((-27*s12^2 - 45*s12*s13 -
                  18*s13^2)*s23^2 + (-36*s12 - 27*s13)*s23^3 - 9*s23^4)) +
            p3q*(p2q^4*(36*s12^2*s13^2 - 36*s13^4 + (36*s12*s13^2 - 36*s13^3)*
                 s23) + p1q*p2q^3*(36*s12^2*s13^2 + 18*s12*s13^3 - 18*s13^4 +
                (108*s12*s13^2 + 54*s13^3)*s23 + 72*s13^2*s23^2) +
              p1q^2*p2q^2*((27*s12^3 + 63*s12^2*s13 + 81*s12*s13^2 +
                  45*s13^3)*s23 + (45*s12^2 + 9*s12*s13)*s23^2 +
                (18*s12 - 45*s13)*s23^3) + p1q^3*p2q*((-18*s12^2 -
                  54*s12*s13 - 36*s13^2)*s23^2 + (-9*s12 - 27*s13)*s23^3 +
                9*s23^4) + p1q^4*((9*s12 + 9*s13)*s23^3 + 9*s23^4)))*
           Log(p3q/(p1q + p2q + p3q)))/(2*p1q*p3q^4*s12^2*s13*s23^2 +
           2*p1q*p2q^4*s13^3*s23^2 + 2*p1q^4*p2q*s13*s23^4 +
           p1q^2*p2q^3*(2*s13^3*s23^2 - 4*s13^2*s23^3) +
           p1q^3*p2q^2*(-4*s13^2*s23^3 + 2*s13*s23^4) +
           p3q^3*(p1q*p2q*(4*s12^2*s13 - 4*s12*s13^2)*s23^2 +
             p1q^2*(2*s12^2*s13*s23^2 - 4*s12*s13*s23^3)) +
           p3q^2*(p1q*p2q^2*(2*s12^2*s13 - 8*s12*s13^2 + 2*s13^3)*s23^2 +
             p1q^2*p2q*((2*s12^2*s13 - 4*s12*s13^2)*s23^2 + (-8*s12*s13 -
                 4*s13^2)*s23^3) + p1q^3*(-4*s12*s13*s23^3 + 2*s13*s23^4)) +
           p3q*(p1q*p2q^3*(-4*s12*s13^2 + 4*s13^3)*s23^2 +
             2*p1q^4*s13*s23^4 + p1q^2*p2q^2*((-4*s12*s13^2 + 2*s13^3)*
                s23^2 + (-4*s12*s13 - 8*s13^2)*s23^3) + p1q^3*p2q*
              ((-4*s12*s13 - 4*s13^2)*s23^3 + 4*s13*s23^4))) +
         ((p2q^6*(36*s12^2*s13^4 + 36*s12*s13^5 + (9*s12^2*s13^3 +
                45*s12*s13^4)*s23 + (10*s12*s13^3 + s13^4)*s23^2 +
              s13^3*s23^3) + p3q^6*((9*s12^4*s13 + 9*s12^3*s13^2)*s23 +
              (-s12^4 + 8*s12^3*s13)*s23^2 + (-2*s12^3 - s12^2*s13)*s23^3 -
              s12^2*s23^4) + p1q*p2q^5*(-36*s12^3*s13^3 + 36*s12*s13^5 +
              (-117*s12^2*s13^3 - 45*s12*s13^4)*s23 + (-27*s12^2*s13^2 -
                109*s12*s13^3 - s13^4)*s23^2 + (-30*s12*s13^2 - 4*s13^3)*s23^
                3 - 3*s13^2*s23^4) + p1q^6*((9*s12^3 + 18*s12^2*s13 +
                9*s12*s13^2)*s23^3 + (18*s12^2 + 18*s12*s13)*s23^4 +
              9*s12*s23^5) + p1q^2*p2q^4*(-36*s12^3*s13^3 - 36*s12^2*s13^4 +
              (9*s12^3*s13^2 - 153*s12^2*s13^3 - 126*s12*s13^4)*s23 +
              (38*s12^2*s13^2 - 98*s12*s13^3 - s13^4)*s23^2 +
              (27*s12^2*s13 + 56*s12*s13^2 - s13^3)*s23^3 + (30*s12*s13 +
                3*s13^2)*s23^4 + 3*s13*s23^5) + p1q^4*p2q^2*
             ((9*s12^3*s13^2 + 18*s12^2*s13^3 + 9*s12*s13^4)*s23 +
              (-18*s12^4 - 108*s12^3*s13 - 90*s12^2*s13^2)*s23^2 +
              (-47*s12^3 - 197*s12^2*s13 - 89*s12*s13^2 - 2*s13^3)*s23^3 +
              (-58*s12^2 - 110*s12*s13 - 5*s13^2)*s23^4 + (-31*s12 - 5*s13)*
               s23^5 - 2*s23^6) + p1q^3*p2q^3*((54*s12^4*s13 + 162*s12^3*
                 s13^2 + 117*s12^2*s13^3 + 9*s12*s13^4)*s23 +
              (110*s12^3*s13 + 321*s12^2*s13^2 + 167*s12*s13^3 + s13^4)*s23^
                2 + (101*s12^2*s13 + 205*s12*s13^2 + 4*s13^3)*s23^3 +
              (-9*s12^2 + 39*s12*s13 + 6*s13^2)*s23^4 + (-10*s12 + 2*s13)*s23^
                5 - s23^6) + p1q^5*p2q*((-18*s12^3*s13 - 36*s12^2*s13^2 -
                18*s12*s13^3)*s23^2 + (18*s12^3 - 9*s12^2*s13 - 27*s12*s13^2)*
               s23^3 + (29*s12^2 + 3*s12*s13 + s13^2)*s23^4 +
              (12*s12 + 2*s13)*s23^5 + s23^6) +
            p3q^5*(p2q*(-36*s12^5*s13 - 36*s12^4*s13^2 + (-36*s12^5 -
                  108*s12^4*s13 - 54*s12^3*s13^2 - 18*s12^2*s13^3)*s23 +
                (-75*s12^4 - 72*s12^3*s13 - 15*s12^2*s13^2)*s23^2 +
                (-42*s12^3 + 2*s12^2*s13 + 2*s12*s13^2)*s23^3 +
                (-3*s12^2 + 2*s12*s13)*s23^4) + p1q*((63*s12^5 + 117*s12^4*
                   s13 + 54*s12^3*s13^2)*s23 + (119*s12^4 + 93*s12^3*s13 -
                  17*s12^2*s13^2)*s23^2 + (59*s12^3 - 14*s12^2*s13)*s23^3 +
                (5*s12^2 + 2*s12*s13)*s23^4 + 2*s12*s23^5)) +
            p3q^4*(p2q^2*(-72*s12^5*s13 + 36*s12^4*s13^2 + 108*s12^3*s13^3 +
                (-36*s12^5 - 90*s12^4*s13 + 198*s12^3*s13^2 + 81*s12^2*
                   s13^3 + 9*s12*s13^4)*s23 + (-75*s12^4 + 60*s12^3*s13 +
                  150*s12^2*s13^2 + 6*s12*s13^3)*s23^2 + (-42*s12^3 +
                  84*s12^2*s13 + 2*s12*s13^2 - s13^3)*s23^3 +
                (-3*s12^2 + 6*s12*s13 - s13^2)*s23^4) + p1q*p2q*(
                -72*s12^5*s13 - 72*s12^4*s13^2 + (18*s12^5 - 189*s12^4*s13 -
                  243*s12^3*s13^2 - 108*s12^2*s13^3)*s23 +
                (85*s12^4 - 103*s12^3*s13 - 163*s12^2*s13^2 - 20*s12*s13^3)*
                 s23^2 + (146*s12^3 + 46*s12^2*s13 - 18*s12*s13^2)*s23^3 +
                (85*s12^2 + 10*s12*s13 + 2*s13^2)*s23^4 + (6*s12 + 2*s13)*
                 s23^5) + p1q^2*((117*s12^5 + 207*s12^4*s13 + 90*s12^3*s13^2)*
                 s23 + (95*s12^4 - 38*s12^3*s13 - 106*s12^2*s13^2)*s23^2 +
                (-131*s12^3 - 208*s12^2*s13 + 7*s12*s13^2)*s23^3 +
                (-112*s12^2 + 4*s12*s13)*s23^4 + (-4*s12 - s13)*s23^5 -
                s23^6)) + p3q^3*(p2q^3*(-36*s12^5*s13 + 180*s12^4*s13^2 +
                108*s12^3*s13^3 - 108*s12^2*s13^4 + (36*s12^4*s13 +
                  360*s12^3*s13^2 - 72*s12^2*s13^3 - 36*s12*s13^4)*s23 +
                (-s12^4 + 152*s12^3*s13 + 108*s12^2*s13^2 - 80*s12*s13^3 +
                  s13^4)*s23^2 + (-2*s12^3 + 86*s12^2*s13 - 42*s12*s13^2 -
                  2*s13^3)*s23^3 + (-s12^2 + 6*s12*s13 - 3*s13^2)*s23^4) +
              p1q*p2q^2*(-108*s12^5*s13 + 72*s12^4*s13^2 + 180*s12^3*s13^3 +
                (-9*s12^5 - 117*s12^4*s13 + 405*s12^3*s13^2 + 279*s12^2*
                   s13^3 + 54*s12*s13^4)*s23 + (29*s12^4 + 275*s12^3*s13 +
                  588*s12^2*s13^2 + 181*s12*s13^3 + s13^4)*s23^2 +
                (115*s12^3 + 396*s12^2*s13 + 211*s12*s13^2 + 4*s13^3)*s23^3 +
                (83*s12^2 + 94*s12*s13 + 9*s13^2)*s23^4 + (6*s12 + 6*s13)*
                 s23^5) + p1q^2*p2q*(-36*s12^5*s13 - 36*s12^4*s13^2 +
                (90*s12^5 - 162*s12^3*s13^2 - 108*s12^2*s13^3)*s23 +
                (155*s12^4 - 58*s12^3*s13 - 213*s12^2*s13^2 - 36*s12*s13^3)*
                 s23^2 + (86*s12^3 - 118*s12^2*s13 - 104*s12*s13^2 + 2*s13^3)*
                 s23^3 + (-16*s12^2 - 104*s12*s13 + 5*s13^2)*s23^4 -
                40*s12*s23^5 - 3*s23^6) + p1q^3*((63*s12^5 + 117*s12^4*s13 +
                  54*s12^3*s13^2)*s23 + (-115*s12^4 - 303*s12^3*s13 -
                  179*s12^2*s13^2)*s23^2 + (-322*s12^3 - 273*s12^2*s13 +
                  50*s12*s13^2)*s23^3 + (-94*s12^2 + 101*s12*s13 + s13^2)*
                 s23^4 + (51*s12 + 2*s13)*s23^5 + s23^6)) +
            p3q*(p2q^5*(-108*s12^3*s13^3 - 36*s12^2*s13^4 + 72*s12*s13^5 +
                (-18*s12^3*s13^2 - 126*s12^2*s13^3 + 72*s12*s13^4)*s23 +
                (-21*s12^2*s13^2 + 3*s13^4)*s23^2 + (-4*s12*s13^2 + 2*s13^3)*
                 s23^3 - s13^2*s23^4) + p1q*p2q^4*(72*s12^4*s13^2 -
                108*s12^3*s13^3 - 144*s12^2*s13^4 + 36*s12*s13^5 +
                (81*s12^3*s13^2 - 423*s12^2*s13^3 - 216*s12*s13^4)*s23 +
                (-67*s12^2*s13^2 - 333*s12*s13^3 - 5*s13^4)*s23^2 +
                (2*s12^2*s13 - 81*s12*s13^2 - 12*s13^3)*s23^3 +
                (4*s12*s13 - 5*s13^2)*s23^4 + 2*s13*s23^5) + p1q^3*p2q^2*(
                (18*s12^5 + 90*s12^4*s13 + 207*s12^3*s13^2 + 189*s12^2*
                   s13^3 + 54*s12*s13^4)*s23 + (2*s12^4 - 30*s12^3*s13 +
                  217*s12^2*s13^2 + 223*s12*s13^3 + s13^4)*s23^2 +
                (-65*s12^3 - 267*s12^2*s13 + 39*s12*s13^2 + 4*s13^3)*s23^3 +
                (-125*s12^2 - 209*s12*s13 + 2*s13^2)*s23^4 +
                (-81*s12 - 6*s13)*s23^5 - 5*s23^6) + p1q^2*p2q^3*(
                72*s12^4*s13^2 + 36*s12^3*s13^3 - 36*s12^2*s13^4 +
                (90*s12^4*s13 + 396*s12^3*s13^2 + 90*s12^2*s13^3 -
                  108*s12*s13^4)*s23 + (270*s12^3*s13 + 725*s12^2*s13^2 +
                  200*s12*s13^3 - 3*s13^4)*s23^2 + (18*s12^3 + 346*s12^2*
                   s13 + 464*s12*s13^2 + 2*s13^3)*s23^3 + (19*s12^2 +
                  158*s12*s13 + 14*s13^2)*s23^4 + 8*s13*s23^5 - s23^6) +
              p1q^4*p2q*((-18*s12^4*s13 - 36*s12^3*s13^2 - 18*s12^2*s13^3)*
                 s23 + (-54*s12^4 - 288*s12^3*s13 - 342*s12^2*s13^2 -
                  108*s12*s13^3)*s23^2 + (-60*s12^3 - 374*s12^2*s13 -
                  262*s12*s13^2 - 2*s13^3)*s23^3 + (-5*s12^2 - 152*s12*s13 -
                  3*s13^2)*s23^4 + 2*s12*s23^5 + s23^6) +
              p1q^5*((-18*s12^4 - 36*s12^3*s13 - 18*s12^2*s13^2)*s23^2 +
                (27*s12^3 + 81*s12^2*s13 + 54*s12*s13^2)*s23^3 +
                (101*s12^2 + 111*s12*s13 + s13^2)*s23^4 + (57*s12 + 2*s13)*
                 s23^5 + s23^6)) + p3q^2*(p2q^4*(108*s12^4*s13^2 -
                108*s12^3*s13^3 - 180*s12^2*s13^4 + 36*s12*s13^5 +
                (9*s12^4*s13 + 81*s12^3*s13^2 - 306*s12^2*s13^3 -
                  18*s12*s13^4)*s23 + (12*s12^3*s13 - 78*s12^2*s13^2 -
                  96*s12*s13^3 + 3*s13^4)*s23^2 + (5*s12^2*s13 -
                  46*s12*s13^2)*s23^3 + (2*s12*s13 - 3*s13^2)*s23^4) +
              p1q*p2q^3*(-36*s12^5*s13 + 216*s12^4*s13^2 + 108*s12^3*s13^3 -
                144*s12^2*s13^4 + (45*s12^4*s13 + 567*s12^3*s13^2 -
                  63*s12^2*s13^3 - 153*s12*s13^4)*s23 + (-9*s12^4 +
                  255*s12^3*s13 + 478*s12^2*s13^2 - 95*s12*s13^3 - 3*s13^4)*
                 s23^2 + (-8*s12^3 + 266*s12^2*s13 + 142*s12*s13^2 - 4*s13^3)*
                 s23^3 + (3*s12^2 + 90*s12*s13 + 5*s13^2)*s23^4 +
                (2*s12 + 6*s13)*s23^5) + p1q^3*p2q*((36*s12^5 + 45*s12^4*
                   s13 - 27*s12^3*s13^2 - 36*s12^2*s13^3)*s23 +
                (-59*s12^4 - 353*s12^3*s13 - 409*s12^2*s13^2 - 106*s12*s13^3)*
                 s23^2 + (-180*s12^3 - 587*s12^2*s13 - 341*s12*s13^2)*s23^3 +
                (-138*s12^2 - 291*s12*s13 - 3*s13^2)*s23^4 +
                (-56*s12 - 6*s13)*s23^5 - 3*s23^6) + p1q^2*p2q^2*(
                -36*s12^5*s13 + 36*s12^4*s13^2 + 72*s12^3*s13^3 +
                (45*s12^5 + 99*s12^4*s13 + 351*s12^3*s13^2 + 207*s12^2*
                   s13^3 + 18*s12*s13^4)*s23 + (132*s12^4 + 394*s12^3*s13 +
                  652*s12^2*s13^2 + 262*s12*s13^3 - 2*s13^4)*s23^2 +
                (163*s12^3 + 337*s12^2*s13 + 297*s12*s13^2 + 5*s13^3)*s23^3 +
                (43*s12^2 + 20*s12*s13 + 16*s13^2)*s23^4 + (-36*s12 + 6*s13)*
                 s23^5 - 3*s23^6) + p1q^4*((9*s12^5 + 18*s12^4*s13 +
                  9*s12^3*s13^2)*s23 + (-108*s12^4 - 216*s12^3*s13 -
                  108*s12^2*s13^2)*s23^2 + (-112*s12^3 - 15*s12^2*s13 +
                  88*s12*s13^2)*s23^3 + (107*s12^2 + 192*s12*s13 + 2*s13^2)*
                 s23^4 + (105*s12 + 5*s13)*s23^5 + 3*s23^6)))*
           Log((p1q + p3q)/(p1q + p2q + p3q)))/(-4*p1q*p2q^5*s12*s13^4*
            s23^2 + p1q*p3q^5*(4*s12^4*s13*s23^2 + 4*s12^3*s13*s23^3) +
           p1q^2*p2q^4*((4*s12^2*s13^3 - 4*s12*s13^4)*s23^2 +
             12*s12*s13^3*s23^3) + p1q^3*p2q^3*(4*s12^2*s13^3*s23^2 +
             (-8*s12^2*s13^2 + 12*s12*s13^3)*s23^3 - 12*s12*s13^2*s23^4) +
           p1q^5*p2q*(4*s12^2*s13*s23^4 + 4*s12*s13*s23^5) +
           p1q^4*p2q^2*(-8*s12^2*s13^2*s23^3 + (4*s12^2*s13 - 12*s12*s13^2)*
              s23^4 + 4*s12*s13*s23^5) + p3q^4*
            (p1q*p2q*((8*s12^4*s13 - 12*s12^3*s13^2)*s23^2 + (8*s12^3*s13 -
                 8*s12^2*s13^2)*s23^3) + p1q^2*(8*s12^4*s13*s23^2 - 8*s12^2*
                s13*s23^4)) + p3q^3*(p1q*p2q^2*((4*s12^4*s13 - 24*s12^3*
                  s13^2 + 12*s12^2*s13^3)*s23^2 + (4*s12^3*s13 -
                 16*s12^2*s13^2 + 4*s12*s13^3)*s23^3) + p1q^2*p2q*
              ((12*s12^4*s13 - 20*s12^3*s13^2)*s23^2 + (-4*s12^3*s13 -
                 16*s12^2*s13^2)*s23^3 + (-16*s12^2*s13 - 8*s12*s13^2)*
                s23^4) + p1q^3*(4*s12^4*s13*s23^2 - 12*s12^3*s13*s23^3 - 12*
                s12^2*s13*s23^4 + 4*s12*s13*s23^5)) +
           p3q^2*(p1q*p2q^3*((-12*s12^3*s13^2 + 24*s12^2*s13^3 - 4*s12*s13^4)*
                s23^2 + (-8*s12^2*s13^2 + 8*s12*s13^3)*s23^3) +
             p1q^2*p2q^2*((4*s12^4*s13 - 28*s12^3*s13^2 + 16*s12^2*s13^3)*
                s23^2 + (-4*s12^3*s13 - 24*s12^2*s13^2 + 16*s12*s13^3)*
                s23^3 + (-8*s12^2*s13 - 16*s12*s13^2)*s23^4) +
             p1q^4*(-8*s12^3*s13*s23^3 + 8*s12*s13*s23^5) +
             p1q^3*p2q*((4*s12^4*s13 - 8*s12^3*s13^2)*s23^2 +
               (-20*s12^3*s13 - 16*s12^2*s13^2)*s23^3 + (-16*s12^2*s13 -
                 20*s12*s13^2)*s23^4 + 8*s12*s13*s23^5)) +
           p3q*(p1q*p2q^4*((12*s12^2*s13^3 - 8*s12*s13^4)*s23^2 + 4*s12*s13^3*
                s23^3) + p1q^2*p2q^3*((-8*s12^3*s13^2 + 20*s12^2*s13^3 -
                 4*s12*s13^4)*s23^2 + (-8*s12^2*s13^2 + 28*s12*s13^3)*s23^3 -
               8*s12*s13^2*s23^4) + p1q^5*(4*s12^2*s13*s23^4 + 4*s12*s13*
                s23^5) + p1q^3*p2q^2*((-8*s12^3*s13^2 + 4*s12^2*s13^3)*
                s23^2 + (-8*s12^3*s13 - 24*s12^2*s13^2 + 12*s12*s13^3)*
                s23^3 + (-4*s12^2*s13 - 32*s12*s13^2)*s23^4 + 4*s12*s13*
                s23^5) + p1q^4*p2q*((-8*s12^3*s13 - 8*s12^2*s13^2)*s23^3 +
               (4*s12^2*s13 - 12*s12*s13^2)*s23^4 + 12*s12*s13*s23^5))) +
         ((p3q^6*((9*s12^3 + 9*s12^2*s13)*s23^2 + 9*s12^2*s23^3) +
            p2q^6*(-36*s12^2*s13^3 - 72*s12*s13^4 - 36*s13^5 +
              (-72*s12*s13^3 - 72*s13^4)*s23 + (9*s12*s13^2 - 27*s13^3)*s23^
                2 + 9*s13^2*s23^3) + p1q*p2q^5*(-36*s12^2*s13^3 -
              72*s12*s13^4 - 36*s13^5 + (135*s12^2*s13^2 + 162*s12*s13^3 +
                27*s13^4)*s23 + (261*s12*s13^2 + 189*s13^3)*s23^2 +
              (-18*s12*s13 + 108*s13^2)*s23^3 - 18*s13*s23^4) +
            p1q^2*p2q^4*((-54*s12^3*s13 - 18*s12^2*s13^2 + 54*s12*s13^3 +
                18*s13^4)*s23 + (-198*s12^2*s13 - 81*s12*s13^2 + 45*s13^3)*
               s23^2 + (-288*s12*s13 - 117*s13^2)*s23^3 + (9*s12 - 135*s13)*
               s23^4 + 9*s23^5) + p1q^6*((18*s12 + 18*s13)*s23^4 +
              18*s23^5) + p1q^5*p2q*((-9*s12^2 - 90*s12*s13 - 81*s13^2)*s23^
                3 + (27*s12 - 45*s13)*s23^4 + 36*s23^5) +
            p1q^4*p2q^2*((18*s12^2*s13 + 126*s12*s13^2 + 108*s13^3)*s23^2 +
              (-108*s12*s13 - 18*s13^2)*s23^3 + (45*s12 - 81*s13)*s23^4 +
              45*s23^5) + p1q^3*p2q^3*((-9*s12^2*s13^2 - 54*s12*s13^3 -
                45*s13^4)*s23 + (18*s12^3 + 18*s12^2*s13 + 99*s12*s13^2 +
                63*s13^3)*s23^2 + (63*s12^2 - 54*s12*s13 + 9*s13^2)*s23^3 +
              (99*s12 - 45*s13)*s23^4 + 54*s23^5) +
            p3q^5*(p2q*(-36*s12^4*s13 - 72*s12^3*s13^2 - 36*s12^2*s13^3 +
                (-72*s12^3*s13 - 72*s12^2*s13^2)*s23 + (36*s12^3 -
                  18*s12^2*s13 - 18*s12*s13^2)*s23^2 + (36*s12^2 -
                  18*s12*s13)*s23^3) + p1q*((-9*s12^4 - 18*s12^3*s13 -
                  45*s12^2*s13^2 - 36*s12*s13^3)*s23 + (9*s12^3 -
                  27*s12^2*s13 - 72*s12*s13^2)*s23^2 - 54*s12*s13*s23^3 -
                18*s12*s23^4)) + p3q^4*(p2q^2*(-108*s12^4*s13 - 144*s12^3*
                 s13^2 + 36*s12^2*s13^3 + 72*s12*s13^4 + (-216*s12^3*s13 -
                  72*s12^2*s13^2 + 144*s12*s13^3)*s23 + (54*s12^3 -
                  126*s12^2*s13 + 9*s12*s13^2 + 9*s13^3)*s23^2 +
                (54*s12^2 - 72*s12*s13 + 9*s13^2)*s23^3) +
              p1q*p2q*(-36*s12^4*s13 - 72*s12^3*s13^2 - 36*s12^2*s13^3 +
                (-27*s12^4 - 72*s12^3*s13 - 63*s12^2*s13^2 + 18*s12*s13^3 +
                  36*s13^4)*s23 + (27*s12^3 - 63*s12^2*s13 - 90*s12*s13^2 +
                  72*s13^3)*s23^2 + (-18*s12^2 - 198*s12*s13 + 18*s13^2)*
                 s23^3 + (-72*s12 - 18*s13)*s23^4) + p1q^2*(
                (36*s12^3*s13 - 36*s12*s13^3)*s23 + (63*s12^3 + 63*s12^2*
                   s13 - 36*s12*s13^2 + 36*s13^3)*s23^2 + (27*s12^2 -
                  36*s12*s13 + 72*s13^2)*s23^3 + (-27*s12 + 45*s13)*s23^4 +
                9*s23^5)) + p3q^3*(p2q^3*(-108*s12^4*s13 + 288*s12^2*s13^3 +
                144*s12*s13^4 - 36*s13^5 + (-216*s12^3*s13 + 216*s12^2*
                   s13^2 + 360*s12*s13^3 - 72*s13^4)*s23 +
                (36*s12^3 - 180*s12^2*s13 + 144*s12*s13^2)*s23^2 +
                (36*s12^2 - 108*s12*s13 + 36*s13^2)*s23^3) +
              p1q*p2q^2*(-72*s12^4*s13 - 72*s12^3*s13^2 + 72*s12^2*s13^3 +
                72*s12*s13^4 + (-27*s12^4 - 72*s12^3*s13 + 324*s12^2*s13^2 +
                  540*s12*s13^3 + 171*s13^4)*s23 + (27*s12^3 - 99*s12^2*s13 +
                  279*s12*s13^2 + 333*s13^3)*s23^2 + (-54*s12^2 -
                  360*s12*s13 + 90*s13^2)*s23^3 + (-108*s12 - 72*s13)*
                 s23^4) + p1q^3*((-9*s12^4 + 18*s12^3*s13 + 27*s12^2*s13^2)*
                 s23 + (27*s12^3 - 27*s12^2*s13 - 54*s12*s13^2 + 36*s13^3)*
                 s23^2 + (-63*s12^2 - 144*s12*s13 + 81*s13^2)*s23^3 +
                (-81*s12 + 63*s13)*s23^4 + 18*s23^5) + p1q^2*p2q*(
                (-18*s12^4 - 54*s12^3*s13 - 234*s12^2*s13^2 - 234*s12*s13^3 -
                  36*s13^4)*s23 + (72*s12^3 - 216*s12^2*s13 - 576*s12*s13^2 -
                  144*s13^3)*s23^2 + (-54*s12^2 - 486*s12*s13 - 180*s13^2)*
                 s23^3 + (-108*s12 - 36*s13)*s23^4 + 36*s23^5)) +
            p3q^2*(p2q^4*(-36*s12^4*s13 + 144*s12^3*s13^2 + 288*s12^2*s13^3 -
                108*s13^5 + (-72*s12^3*s13 + 360*s12^2*s13^2 + 216*s12*
                   s13^3 - 216*s13^4)*s23 + (9*s12^3 - 99*s12^2*s13 +
                  198*s12*s13^2 - 54*s13^3)*s23^2 + (9*s12^2 - 72*s12*s13 +
                  54*s13^2)*s23^3) + p1q*p2q^3*(-36*s12^4*s13 +
                72*s12^3*s13^2 + 216*s12^2*s13^3 + 72*s12*s13^4 - 36*s13^5 +
                (-9*s12^4 + 792*s12^2*s13^2 + 1044*s12*s13^3 + 261*s13^4)*
                 s23 + (9*s12^3 - 117*s12^2*s13 + 801*s12*s13^2 + 639*s13^3)*
                 s23^2 + (-54*s12^2 - 360*s12*s13 + 234*s13^2)*s23^3 +
                (-72*s12 - 108*s13)*s23^4) + p1q^4*((36*s12^3 - 18*s12^2*
                   s13 - 54*s12*s13^2)*s23^2 + (-36*s12^2 - 72*s12*s13 +
                  54*s13^2)*s23^3 + (-27*s12 + 99*s13)*s23^4 + 45*s23^5) +
              p1q^2*p2q^2*((-36*s12^4 - 126*s12^3*s13 - 54*s12^2*s13^2 +
                  126*s12*s13^3 + 90*s13^4)*s23 + (-45*s12^3 - 567*s12^2*
                   s13 - 621*s12*s13^2 - 99*s13^3)*s23^2 + (-189*s12^2 -
                  972*s12*s13 - 513*s13^2)*s23^3 + (-126*s12 - 270*s13)*
                 s23^4 + 54*s23^5) + p1q^3*p2q*((-9*s12^4 - 36*s12^3*s13 -
                  81*s12^2*s13^2 - 54*s12*s13^3)*s23 + (45*s12^3 -
                  45*s12^2*s13 - 234*s12*s13^2 - 108*s13^3)*s23^2 +
                (-99*s12^2 - 270*s12*s13 - 153*s13^2)*s23^3 +
                (-63*s12 + 45*s13)*s23^4 + 90*s23^5)) +
            p3q*(p2q^5*(72*s12^3*s13^2 + 36*s12^2*s13^3 - 144*s12*s13^4 -
                108*s13^5 + (144*s12^2*s13^2 - 72*s12*s13^3 - 216*s13^4)*
                 s23 + (-18*s12^2*s13 + 90*s12*s13^2 - 72*s13^3)*s23^2 +
                (-18*s12*s13 + 36*s13^2)*s23^3) + p1q*p2q^4*(72*s12^3*s13^2 +
                72*s12^2*s13^3 - 72*s12*s13^4 - 72*s13^5 + (18*s12^3*s13 +
                  585*s12^2*s13^2 + 720*s12*s13^3 + 153*s13^4)*s23 +
                (-54*s12^2*s13 + 765*s12*s13^2 + 567*s13^3)*s23^2 +
                (-18*s12^2 - 162*s12*s13 + 270*s13^2)*s23^3 +
                (-18*s12 - 72*s13)*s23^4) + p1q^2*p2q^3*((-18*s12^4 -
                  90*s12^3*s13 + 162*s12^2*s13^2 + 378*s12*s13^3 + 144*s13^4)*
                 s23 + (-54*s12^3 - 486*s12^2*s13 - 162*s12*s13^2 +
                  126*s13^3)*s23^2 + (-108*s12^2 - 810*s12*s13 - 378*s13^2)*
                 s23^3 + (-36*s12 - 324*s13)*s23^4 + 36*s23^5) +
              p1q^5*((-45*s12^2 - 18*s12*s13 + 27*s13^2)*s23^3 +
                (-9*s12 + 63*s13)*s23^4 + 36*s23^5) + p1q^4*p2q*(
                (18*s12^3 + 90*s12^2*s13 + 18*s12*s13^2 - 54*s13^3)*s23^2 +
                (-54*s12^2 - 72*s12*s13 - 126*s13^2)*s23^3 +
                (18*s12 + 18*s13)*s23^4 + 90*s23^5) + p1q^3*p2q^2*(
                (18*s12^3*s13 + 99*s12^2*s13^2 + 108*s12*s13^3 + 27*s13^4)*
                 s23 + (36*s12^3 + 72*s12^2*s13 + 63*s12*s13^2 - 9*s13^3)*
                 s23^2 + (27*s12^2 - 180*s12*s13 - 225*s13^2)*s23^3 +
                (117*s12 - 63*s13)*s23^4 + 126*s23^5)))*
           Log((p2q + p3q)/(p1q + p2q + p3q)))/
          (p1q*p3q^5*(4*s12^3*s13 + 4*s12^2*s13^2)*s23^2 +
           p1q*p2q^5*(4*s12*s13^3 + 4*s13^4)*s23^2 - 4*p1q^5*p2q*s13*s23^5 +
           p1q^2*p2q^4*((4*s12*s13^3 + 4*s13^4)*s23^2 +
             (-8*s12*s13^2 - 12*s13^3)*s23^3) + p1q^3*p2q^3*
            ((-8*s12*s13^2 - 12*s13^3)*s23^3 + (4*s12*s13 + 12*s13^2)*
              s23^4) + p1q^4*p2q^2*((4*s12*s13 + 12*s13^2)*s23^4 -
             4*s13*s23^5) + p3q^4*(p1q*p2q*(12*s12^3*s13 + 4*s12^2*s13^2 - 8*
                s12*s13^3)*s23^2 + p1q^2*((4*s12^3*s13 + 4*s12^2*s13^2)*
                s23^2 + (-12*s12^2*s13 - 8*s12*s13^2)*s23^3)) +
           p3q^3*(p1q*p2q^2*(12*s12^3*s13 - 12*s12^2*s13^2 - 20*s12*s13^3 + 4*
                s13^4)*s23^2 + p1q^2*p2q*((8*s12^3*s13 - 8*s12*s13^3)*s23^2 +
               (-32*s12^2*s13 - 24*s12*s13^2 - 8*s13^3)*s23^3) +
             p1q^3*((-12*s12^2*s13 - 8*s12*s13^2)*s23^3 + (12*s12*s13 +
                 4*s13^2)*s23^4)) + p3q*(p1q*p2q^4*(-8*s12^2*s13^2 + 4*s12*
                s13^3 + 12*s13^4)*s23^2 - 4*p1q^5*s13*s23^5 +
             p1q^2*p2q^3*((-8*s12^2*s13^2 + 8*s13^4)*s23^2 + (-8*s12^2*s13 -
                 24*s12*s13^2 - 32*s13^3)*s23^3) + p1q^3*p2q^2*
              ((-8*s12^2*s13 - 16*s12*s13^2 - 20*s13^3)*s23^3 + (20*s12*s13 +
                 28*s13^2)*s23^4) + p1q^4*p2q*((16*s12*s13 + 16*s13^2)*
                s23^4 - 8*s13*s23^5)) + p3q^2*(p1q*p2q^3*(4*s12^3*s13 - 20*
                s12^2*s13^2 - 12*s12*s13^3 + 12*s13^4)*s23^2 +
             p1q^2*p2q^2*((4*s12^3*s13 - 12*s12^2*s13^2 - 12*s12*s13^3 +
                 4*s13^4)*s23^2 + (-28*s12^2*s13 - 32*s12*s13^2 - 28*s13^3)*
                s23^3) + p1q^3*p2q*((-20*s12^2*s13 - 16*s12*s13^2 - 8*s13^3)*
                s23^3 + (28*s12*s13 + 20*s13^2)*s23^4) +
             p1q^4*((12*s12*s13 + 4*s13^2)*s23^4 - 4*s13*s23^5))) +
         ((p2q^2*(36*s12^2*s13 + 36*s12*s13^2 + 36*s12*s13*s23) +
            p1q*p2q*((-9*s12^2 - 9*s12*s13)*s23 + (-11*s12 - 2*s13)*s23^2 -
              2*s23^3) + p3q*(p2q*(36*s12^2*s13 + 36*s12*s13^2 +
                (18*s12^2 + 54*s12*s13)*s23 + 18*s12*s23^2) +
              p1q*((-27*s12^2 - 27*s12*s13)*s23 + (-29*s12 - 2*s13)*s23^2 -
                2*s23^3)))*Log(-s12 - s13 - s23))/(2*p1q*p2q*s12*s13*s23^2 +
           2*p1q*p3q*s12*s13*s23^2) +
         ((p3q^5*(-s12^4 - s12^3*s13 - s12^3*s23) +
            p2q^5*(s12*s13^3 + s13^4 + (s12*s13^2 + 2*s13^3)*s23 +
              s13^2*s23^2) + p1q*p2q^4*(3*s12^2*s13^2 + 9*s12*s13^3 +
              6*s13^4 + (8*s12*s13^2 + 11*s13^3)*s23 + (-2*s12*s13 + 3*s13^2)*
               s23^2 - 2*s13*s23^3) + p1q^2*p2q^3*(2*s12^3*s13 +
              10*s12^2*s13^2 + 19*s12*s13^3 + 11*s13^4 + (7*s12*s13^2 +
                12*s13^3)*s23 + (-15*s12*s13 - 12*s13^2)*s23^2 +
              (s12 - 12*s13)*s23^3 + s23^4) + p1q^3*p2q^2*(2*s12^3*s13 +
              7*s12^2*s13^2 + 11*s12*s13^3 + 6*s13^4 + (-2*s12^3 -
                10*s12^2*s13 - 20*s12*s13^2 - 9*s13^3)*s23 +
              (-3*s12^2 - 31*s12*s13 - 35*s13^2)*s23^2 + (6*s12 - 13*s13)*s23^
                3 + 7*s23^4) + p1q^5*((3*s12^2 + 9*s12*s13 + 6*s13^2)*s23^2 +
              (10*s12 + 13*s13)*s23^3 + 7*s23^4) + p1q^4*p2q*
             ((-2*s12^3 - 10*s12^2*s13 - 20*s12*s13^2 - 12*s13^3)*s23 +
              (-9*s12*s13 - 15*s13^2)*s23^2 + (15*s12 + 10*s13)*s23^3 +
              13*s23^4) + p3q^4*(p2q*(-2*s12^4 + s12^3*s13 + 3*s12^2*s13^2 +
                (-s12^3 + 4*s12^2*s13)*s23 + s12^2*s23^2) + p1q*(-3*s12^4 -
                3*s12^3*s13 + 3*s12^2*s13*s23 + 3*s12^2*s23^2)) +
            p3q^3*(p2q^2*(-s12^4 + 5*s12^3*s13 + 3*s12^2*s13^2 -
                3*s12*s13^3 + (s12^3 + 6*s12^2*s13 - 5*s12*s13^2)*s23 +
                (2*s12^2 - 2*s12*s13)*s23^2) + p1q^2*(-s12^4 + 3*s12^3*s13 +
                4*s12^2*s13^2 + (11*s12^3 + 16*s12^2*s13)*s23 +
                (9*s12^2 - 3*s12*s13)*s23^2 - 3*s12*s23^3) +
              p1q*p2q*(-4*s12^4 + 8*s12^3*s13 + 12*s12^2*s13^2 +
                (4*s12^3 + 18*s12^2*s13 - 2*s12*s13^2)*s23 +
                (6*s12^2 - 4*s12*s13)*s23^2 - 2*s12*s23^3)) +
            p3q^2*(p2q^3*(3*s12^3*s13 - 3*s12^2*s13^2 - 5*s12*s13^3 + s13^4 +
                (s12^3 - 9*s12*s13^2 + 2*s13^3)*s23 + (s12^2 - 4*s12*s13 +
                  s13^2)*s23^2) + p1q*p2q^2*(-s12^4 + 13*s12^3*s13 +
                3*s12^2*s13^2 - 11*s12*s13^3 + (4*s12^3 + 3*s12^2*s13 -
                  28*s12*s13^2 - s13^3)*s23 + (s12^2 - 22*s12*s13 - 3*s13^2)*
                 s23^2 + (-4*s12 - 2*s13)*s23^3) + p1q^2*p2q*(6*s12^4 +
                25*s12^3*s13 + 13*s12^2*s13^2 - 6*s12*s13^3 +
                (25*s12^3 + 26*s12^2*s13 - 18*s12*s13^2)*s23 +
                (5*s12^2 - 27*s12*s13 - s13^2)*s23^2 - 13*s12*s23^3 +
                s23^4) + p1q^3*(3*s12^4 + 9*s12^3*s13 + 6*s12^2*s13^2 +
                (12*s12^3 + 7*s12^2*s13 - 8*s12*s13^2)*s23 +
                (-6*s12^2 - 23*s12*s13)*s23^2 + (-14*s12 + s13)*s23^3 +
                s23^4)) + p3q*(p2q^4*(-3*s12^2*s13^2 - s12*s13^3 + 2*s13^4 +
                (-2*s12^2*s13 - 3*s12*s13^2 + 4*s13^3)*s23 +
                (-2*s12*s13 + 2*s13^2)*s23^2) + p1q*p2q^3*(-2*s12^3*s13 -
                18*s12^2*s13^2 - 14*s12*s13^3 + 2*s13^4 + (-20*s12^2*s13 -
                  34*s12*s13^2 + 2*s13^3)*s23 + (-2*s12^2 - 24*s12*s13 -
                  4*s13^2)*s23^2 + (-2*s12 - 4*s13)*s23^3) + p1q^2*p2q^2*(
                -2*s12^4 - 8*s12^3*s13 - 27*s12^2*s13^2 - 19*s12*s13^3 +
                2*s13^4 + (-12*s12^3 - 52*s12^2*s13 - 61*s12*s13^2 - 2*s13^3)*
                 s23 + (-29*s12^2 - 65*s12*s13 - 14*s13^2)*s23^2 +
                (-17*s12 - 8*s13)*s23^3 + 2*s23^4) + p1q^4*(
                (-6*s12^3 - 18*s12^2*s13 - 12*s12*s13^2)*s23 +
                (-21*s12^2 - 23*s12*s13 + 4*s13^2)*s23^2 + (-9*s12 + 10*s13)*
                 s23^3 + 6*s23^4) + p1q^3*p2q*(2*s12^4 + 2*s12^3*s13 -
                8*s12^2*s13^2 - 8*s12*s13^3 + (-6*s12^3 - 36*s12^2*s13 -
                  42*s12*s13^2 - 6*s13^3)*s23 + (-36*s12^2 - 60*s12*s13 -
                  10*s13^2)*s23^2 + (-20*s12 + 4*s13)*s23^3 + 8*s23^4)))*
           Log(s12/(s12 + s13 + s23)))/(4*p1q*p3q^4*s12^4*s13 +
           p1q*p2q^4*(-4*s12*s13^4 - 4*s12*s13^3*s23) +
           p1q^2*p2q^3*(-8*s12*s13^4 + 8*s12*s13^2*s23^2) +
           p1q^4*p2q*(8*s12*s13^3*s23 - 8*s12*s13*s23^3) +
           p1q^5*(-4*s12*s13^2*s23^2 - 4*s12*s13*s23^3) +
           p1q^3*p2q^2*(-4*s12*s13^4 + 12*s12*s13^3*s23 + 12*s12*s13^2*
              s23^2 - 4*s12*s13*s23^3) + p3q^3*(p1q^2*(4*s12^4*s13 - 4*s12^3*
                s13^2 - 12*s12^3*s13*s23) + p1q*p2q*(4*s12^4*s13 - 12*s12^3*
                s13^2 - 4*s12^3*s13*s23)) +
           p3q^2*(p1q*p2q^2*(-12*s12^3*s13^2 + 12*s12^2*s13^3 +
               (-4*s12^3*s13 + 8*s12^2*s13^2)*s23) + p1q^2*p2q*
              (-16*s12^3*s13^2 + 8*s12^2*s13^3 + (-16*s12^3*s13 +
                 8*s12^2*s13^2)*s23 + 8*s12^2*s13*s23^2) +
             p1q^3*(-4*s12^3*s13^2 + (-12*s12^3*s13 + 8*s12^2*s13^2)*s23 + 12*
                s12^2*s13*s23^2)) + p3q*(p1q*p2q^3*(12*s12^2*s13^3 - 4*s12*
                s13^4 + (8*s12^2*s13^2 - 4*s12*s13^3)*s23) +
             p1q^2*p2q^2*(20*s12^2*s13^3 - 4*s12*s13^4 + (16*s12^2*s13^2 +
                 4*s12*s13^3)*s23 + (8*s12^2*s13 + 8*s12*s13^2)*s23^2) +
             p1q^4*(8*s12^2*s13^2*s23 + (12*s12^2*s13 - 4*s12*s13^2)*s23^2 -
               4*s12*s13*s23^3) + p1q^3*p2q*(8*s12^2*s13^3 +
               (16*s12^2*s13^2 + 8*s12*s13^3)*s23 + (20*s12^2*s13 +
                 4*s12*s13^2)*s23^2 - 4*s12*s13*s23^3))) +
         ((p2q^6*(36*s12^2*s13^4 + 36*s12*s13^5 + (-9*s12^2*s13^3 +
                27*s12*s13^4)*s23 + (-10*s12*s13^3 - s13^4)*s23^2 -
              s13^3*s23^3) + p3q^6*((-9*s12^4*s13 - 9*s12^3*s13^2)*s23 +
              (s12^4 - 8*s12^3*s13)*s23^2 + (2*s12^3 + s12^2*s13)*s23^3 +
              s12^2*s23^4) + p1q*p2q^5*(-36*s12^3*s13^3 + 36*s12*s13^5 +
              (-189*s12^2*s13^3 - 117*s12*s13^4)*s23 + (27*s12^2*s13^2 -
                129*s12*s13^3 - 3*s13^4)*s23^2 + 30*s12*s13^2*s23^3 +
              3*s13^2*s23^4) + p1q^6*((-9*s12^3 - 18*s12^2*s13 - 9*s12*s13^2)*
               s23^3 + (-18*s12^2 - 18*s12*s13)*s23^4 - 9*s12*s23^5) +
            p1q^2*p2q^4*(-36*s12^3*s13^3 - 36*s12^2*s13^4 +
              (153*s12^3*s13^2 + 9*s12^2*s13^3 - 108*s12*s13^4)*s23 +
              (398*s12^2*s13^2 + 134*s12*s13^3 - 3*s13^4)*s23^2 +
              (-27*s12^2*s13 + 230*s12*s13^2 + 9*s13^3)*s23^3 +
              (-30*s12*s13 + 9*s13^2)*s23^4 - 3*s13*s23^5) +
            p1q^3*p2q^3*((-54*s12^4*s13 + 45*s12^2*s13^3 - 9*s12*s13^4)*s23 +
              (-218*s12^3*s13 + 7*s12^2*s13^2 + 107*s12*s13^3 - s13^4)*s23^
                2 + (-343*s12^2*s13 - 53*s12*s13^2 + 8*s13^3)*s23^3 +
              (9*s12^2 - 185*s12*s13 - 6*s13^2)*s23^4 + (10*s12 - 14*s13)*s23^
                5 + s23^6) + p1q^5*p2q*((18*s12^3*s13 + 36*s12^2*s13^2 +
                18*s12*s13^3)*s23^2 + (27*s12^2*s13 + 27*s12*s13^2)*s23^3 +
              (11*s12^2 + 19*s12*s13 - s13^2)*s23^4 + (14*s12 + 2*s13)*s23^
                5 + 3*s23^6) + p1q^4*p2q^2*((-9*s12^3*s13^2 - 18*s12^2*
                 s13^3 - 9*s12*s13^4)*s23 + (18*s12^4 - 18*s12^2*s13^2)*s23^
                2 + (65*s12^3 - 27*s12^2*s13 - 45*s12*s13^2 + 2*s13^3)*s23^
                3 + (98*s12^2 - 14*s12*s13 - 7*s13^2)*s23^4 +
              (57*s12 - 3*s13)*s23^5 + 6*s23^6) +
            p3q^5*(p2q*(-36*s12^5*s13 - 36*s12^4*s13^2 + (-72*s12^4*s13 -
                  18*s12^3*s13^2 + 18*s12^2*s13^3)*s23 + (3*s12^4 -
                  36*s12^3*s13 + 15*s12^2*s13^2)*s23^2 + (6*s12^3 -
                  2*s12^2*s13 - 2*s12*s13^2)*s23^3 + (3*s12^2 - 2*s12*s13)*
                 s23^4) + p1q*((-9*s12^5 - 63*s12^4*s13 - 54*s12^3*s13^2)*
                 s23 + (-7*s12^4 - 35*s12^3*s13 + 17*s12^2*s13^2)*s23^2 +
                (3*s12^3 + 18*s12^2*s13)*s23^3 + (-s12^2 - 2*s12*s13)*s23^4 -
                2*s12*s23^5)) + p3q^4*(p2q^2*(-72*s12^5*s13 + 36*s12^4*
                 s13^2 + 108*s12^3*s13^3 + (-126*s12^4*s13 + 126*s12^3*
                   s13^2 + 63*s12^2*s13^3 - 9*s12*s13^4)*s23 +
                (3*s12^4 - 60*s12^3*s13 + 66*s12^2*s13^2 - 6*s12*s13^3)*
                 s23^2 + (6*s12^3 - 12*s12^2*s13 - 2*s12*s13^2 + s13^3)*
                 s23^3 + (3*s12^2 - 6*s12*s13 + s13^2)*s23^4) +
              p1q*p2q*(-72*s12^5*s13 - 72*s12^4*s13^2 + (-18*s12^5 -
                  117*s12^4*s13 + 81*s12^3*s13^2 + 108*s12^2*s13^3)*s23 +
                (-5*s12^4 + 45*s12^3*s13 + 187*s12^2*s13^2 + 20*s12*s13^3)*
                 s23^2 + (14*s12^3 + 50*s12^2*s13 + 10*s12*s13^2)*s23^3 +
                (-5*s12^2 - 18*s12*s13 - 2*s13^2)*s23^4 + (-6*s12 - 2*s13)*
                 s23^5) + p1q^2*((-9*s12^5 - 99*s12^4*s13 - 90*s12^3*s13^2)*
                 s23 + (21*s12^4 + 46*s12^3*s13 + 106*s12^2*s13^2)*s23^2 +
                (31*s12^3 + 100*s12^2*s13 - 7*s12*s13^2)*s23^3 +
                (-4*s12^2 - 12*s12*s13)*s23^4 + (-4*s12 + s13)*s23^5 +
                s23^6)) + p3q^3*(p2q^3*(-36*s12^5*s13 + 180*s12^4*s13^2 +
                108*s12^3*s13^3 - 108*s12^2*s13^4 + (-72*s12^4*s13 +
                  288*s12^3*s13^2 - 36*s12^2*s13^3 - 36*s12*s13^4)*s23 +
                (s12^4 - 44*s12^3*s13 + 108*s12^2*s13^2 - 28*s12*s13^3 -
                  s13^4)*s23^2 + (2*s12^3 - 14*s12^2*s13 + 6*s12*s13^2 +
                  2*s13^3)*s23^3 + (s12^2 - 6*s12*s13 + 3*s13^2)*s23^4) +
              p1q*p2q^2*(-108*s12^5*s13 + 72*s12^4*s13^2 + 180*s12^3*s13^3 +
                (-9*s12^5 - 81*s12^4*s13 + 441*s12^3*s13^2 + 171*s12^2*
                   s13^3 - 54*s12*s13^4)*s23 + (11*s12^4 + 83*s12^3*s13 +
                  336*s12^2*s13^2 + 29*s12*s13^3 - s13^4)*s23^2 +
                (19*s12^3 + 59*s12*s13^2)*s23^3 + (-7*s12^2 - 38*s12*s13 -
                  5*s13^2)*s23^4 + (-6*s12 - 6*s13)*s23^5) +
              p1q^2*p2q*(-36*s12^5*s13 - 36*s12^4*s13^2 + (-36*s12^5 -
                  72*s12^4*s13 + 108*s12^3*s13^2 + 108*s12^2*s13^3)*s23 +
                (-35*s12^4 + 50*s12^3*s13 + 193*s12^2*s13^2 + 36*s12*s13^3)*
                 s23^2 + (-60*s12^3 - 138*s12^2*s13 - 92*s12*s13^2 - 2*s13^3)*
                 s23^3 + (-76*s12^2 - 152*s12*s13 - 13*s13^2)*s23^4 +
                (-12*s12 - 8*s13)*s23^5 + 3*s23^6) + p1q^3*(
                (-9*s12^5 - 63*s12^4*s13 - 54*s12^3*s13^2)*s23 +
                (11*s12^4 + 145*s12^3*s13 + 179*s12^2*s13^2)*s23^2 +
                (-10*s12^3 + 99*s12^2*s13 - 50*s12*s13^2)*s23^3 +
                (-38*s12^2 - 59*s12*s13 - s13^2)*s23^4 + (-5*s12 + 2*s13)*
                 s23^5 + 3*s23^6)) + p3q*(p2q^5*(-108*s12^3*s13^3 -
                36*s12^2*s13^4 + 72*s12*s13^5 + (18*s12^3*s13^2 - 126*s12^2*
                   s13^3 + 36*s12*s13^4)*s23 + (21*s12^2*s13^2 -
                  36*s12*s13^3 - 3*s13^4)*s23^2 + (4*s12*s13^2 - 2*s13^3)*
                 s23^3 + s13^2*s23^4) + p1q*p2q^4*(72*s12^4*s13^2 -
                108*s12^3*s13^3 - 144*s12^2*s13^4 + 36*s12*s13^5 +
                (225*s12^3*s13^2 - 315*s12^2*s13^3 - 252*s12*s13^4)*s23 +
                (295*s12^2*s13^2 - 149*s12*s13^3 - 3*s13^4)*s23^2 +
                (-2*s12^2*s13 + 151*s12*s13^2 + 8*s13^3)*s23^3 +
                (-4*s12*s13 + 9*s13^2)*s23^4 - 2*s13*s23^5) +
              p1q^2*p2q^3*(72*s12^4*s13^2 + 36*s12^3*s13^3 - 36*s12^2*s13^4 +
                (18*s12^4*s13 + 378*s12^3*s13^2 + 90*s12^2*s13^3 -
                  162*s12*s13^4)*s23 + (-62*s12^3*s13 + 619*s12^2*s13^2 +
                  248*s12*s13^3 - s13^4)*s23^2 + (-18*s12^3 - 254*s12^2*s13 +
                  278*s12*s13^2 + 22*s13^3)*s23^3 + (-19*s12^2 - 174*s12*
                   s13 + 6*s13^2)*s23^4 - 16*s13*s23^5 + s23^6) +
              p1q^5*((18*s12^4 + 36*s12^3*s13 + 18*s12^2*s13^2)*s23^2 +
                (27*s12^3 - 27*s12^2*s13 - 54*s12*s13^2)*s23^3 +
                (11*s12^2 - 53*s12*s13 - s13^2)*s23^4 + (5*s12 + 2*s13)*
                 s23^5 + 3*s23^6) + p1q^3*p2q^2*((-18*s12^5 + 18*s12^4*s13 +
                  99*s12^3*s13^2 + 9*s12^2*s13^3 - 54*s12*s13^4)*s23 +
                (-38*s12^4 - 86*s12^3*s13 + 175*s12^2*s13^2 + 159*s12*s13^3 -
                  s13^4)*s23^2 + (-33*s12^3 - 367*s12^2*s13 - 29*s12*s13^2 +
                  8*s13^3)*s23^3 + (41*s12^2 - 229*s12*s13 - 22*s13^2)*
                 s23^4 + (63*s12 - 22*s13)*s23^5 + 9*s23^6) +
              p1q^4*p2q*((18*s12^4*s13 + 36*s12^3*s13^2 + 18*s12^2*s13^3)*
                 s23 + (18*s12^4 + 72*s12^3*s13 + 162*s12^2*s13^2 +
                  108*s12*s13^3)*s23^2 + (34*s12^3 - 38*s12^2*s13 +
                  20*s12*s13^2 + 2*s13^3)*s23^3 + (73*s12^2 - 44*s12*s13 -
                  9*s13^2)*s23^4 + 68*s12*s23^5 + 11*s23^6)) +
            p3q^2*(p2q^4*(108*s12^4*s13^2 - 108*s12^3*s13^3 - 180*s12^2*
                 s13^4 + 36*s12*s13^5 + (-9*s12^4*s13 + 171*s12^3*s13^2 -
                  198*s12^2*s13^3 - 18*s12*s13^4)*s23 + (-12*s12^3*s13 +
                  78*s12^2*s13^2 - 48*s12*s13^3 - 3*s13^4)*s23^2 +
                (-5*s12^2*s13 + 10*s12*s13^2)*s23^3 + (-2*s12*s13 + 3*s13^2)*
                 s23^4) + p1q*p2q^3*(-36*s12^5*s13 + 216*s12^4*s13^2 +
                108*s12^3*s13^3 - 144*s12^2*s13^4 + (-27*s12^4*s13 +
                  531*s12^3*s13^2 - 63*s12^2*s13^3 - 189*s12*s13^4)*s23 +
                (9*s12^4 + 3*s12^3*s13 + 434*s12^2*s13^2 - 11*s12*s13^3 -
                  s13^4)*s23^2 + (8*s12^3 - 34*s12^2*s13 + 170*s12*s13^2 +
                  8*s13^3)*s23^3 + (-3*s12^2 - 26*s12*s13 + 3*s13^2)*s23^4 +
                (-2*s12 - 6*s13)*s23^5) + p1q^2*p2q^2*(-36*s12^5*s13 +
                36*s12^4*s13^2 + 72*s12^3*s13^3 + (-27*s12^5 + 81*s12^4*s13 +
                  531*s12^3*s13^2 + 297*s12^2*s13^3 - 18*s12*s13^4)*s23 +
                (-56*s12^4 + 122*s12^3*s13 + 668*s12^2*s13^2 + 330*s12*
                   s13^3 + 2*s13^4)*s23^2 + (-109*s12^3 - 249*s12^2*s13 +
                  179*s12*s13^2 + 11*s13^3)*s23^3 + (-91*s12^2 - 212*s12*
                   s13 - 16*s13^2)*s23^4 + (-8*s12 - 22*s13)*s23^5 +
                3*s23^6) + p1q^4*((-9*s12^5 - 18*s12^4*s13 - 9*s12^3*s13^2)*
                 s23 + (108*s12^3*s13 + 108*s12^2*s13^2)*s23^2 +
                (-4*s12^3 + 7*s12^2*s13 - 88*s12*s13^2)*s23^3 +
                (-7*s12^2 - 84*s12*s13 - 2*s13^2)*s23^4 + (11*s12 + 3*s13)*
                 s23^5 + 5*s23^6) + p1q^3*p2q*((-18*s12^5 + 9*s12^4*s13 +
                  63*s12^3*s13^2 + 36*s12^2*s13^3)*s23 + (-9*s12^4 +
                  79*s12^3*s13 + 185*s12^2*s13^2 + 106*s12*s13^3)*s23^2 +
                (-34*s12^3 - 195*s12^2*s13 - 89*s12*s13^2)*s23^3 +
                (-6*s12^2 - 175*s12*s13 - 17*s13^2)*s23^4 + (48*s12 - 6*s13)*
                 s23^5 + 11*s23^6)))*Log(s13/(s12 + s13 + s23)))/
          (-4*p1q*p2q^5*s12*s13^4*s23^2 + p1q*p3q^5*(4*s12^4*s13*s23^2 +
             4*s12^3*s13*s23^3) + p1q^2*p2q^4*((4*s12^2*s13^3 - 4*s12*s13^4)*
              s23^2 + 12*s12*s13^3*s23^3) + p1q^3*p2q^3*
            (4*s12^2*s13^3*s23^2 + (-8*s12^2*s13^2 + 12*s12*s13^3)*s23^3 -
             12*s12*s13^2*s23^4) + p1q^5*p2q*(4*s12^2*s13*s23^4 +
             4*s12*s13*s23^5) + p1q^4*p2q^2*(-8*s12^2*s13^2*s23^3 +
             (4*s12^2*s13 - 12*s12*s13^2)*s23^4 + 4*s12*s13*s23^5) +
           p3q^4*(p1q*p2q*((8*s12^4*s13 - 12*s12^3*s13^2)*s23^2 +
               (8*s12^3*s13 - 8*s12^2*s13^2)*s23^3) +
             p1q^2*(8*s12^4*s13*s23^2 - 8*s12^2*s13*s23^4)) +
           p3q^3*(p1q*p2q^2*((4*s12^4*s13 - 24*s12^3*s13^2 + 12*s12^2*s13^3)*
                s23^2 + (4*s12^3*s13 - 16*s12^2*s13^2 + 4*s12*s13^3)*s23^3) +
             p1q^2*p2q*((12*s12^4*s13 - 20*s12^3*s13^2)*s23^2 +
               (-4*s12^3*s13 - 16*s12^2*s13^2)*s23^3 + (-16*s12^2*s13 -
                 8*s12*s13^2)*s23^4) + p1q^3*(4*s12^4*s13*s23^2 - 12*s12^3*
                s13*s23^3 - 12*s12^2*s13*s23^4 + 4*s12*s13*s23^5)) +
           p3q^2*(p1q*p2q^3*((-12*s12^3*s13^2 + 24*s12^2*s13^3 - 4*s12*s13^4)*
                s23^2 + (-8*s12^2*s13^2 + 8*s12*s13^3)*s23^3) +
             p1q^2*p2q^2*((4*s12^4*s13 - 28*s12^3*s13^2 + 16*s12^2*s13^3)*
                s23^2 + (-4*s12^3*s13 - 24*s12^2*s13^2 + 16*s12*s13^3)*
                s23^3 + (-8*s12^2*s13 - 16*s12*s13^2)*s23^4) +
             p1q^4*(-8*s12^3*s13*s23^3 + 8*s12*s13*s23^5) +
             p1q^3*p2q*((4*s12^4*s13 - 8*s12^3*s13^2)*s23^2 +
               (-20*s12^3*s13 - 16*s12^2*s13^2)*s23^3 + (-16*s12^2*s13 -
                 20*s12*s13^2)*s23^4 + 8*s12*s13*s23^5)) +
           p3q*(p1q*p2q^4*((12*s12^2*s13^3 - 8*s12*s13^4)*s23^2 + 4*s12*s13^3*
                s23^3) + p1q^2*p2q^3*((-8*s12^3*s13^2 + 20*s12^2*s13^3 -
                 4*s12*s13^4)*s23^2 + (-8*s12^2*s13^2 + 28*s12*s13^3)*s23^3 -
               8*s12*s13^2*s23^4) + p1q^5*(4*s12^2*s13*s23^4 + 4*s12*s13*
                s23^5) + p1q^3*p2q^2*((-8*s12^3*s13^2 + 4*s12^2*s13^3)*
                s23^2 + (-8*s12^3*s13 - 24*s12^2*s13^2 + 12*s12*s13^3)*
                s23^3 + (-4*s12^2*s13 - 32*s12*s13^2)*s23^4 + 4*s12*s13*
                s23^5) + p1q^4*p2q*((-8*s12^3*s13 - 8*s12^2*s13^2)*s23^3 +
               (4*s12^2*s13 - 12*s12*s13^2)*s23^4 + 12*s12*s13*s23^5))) +
         ((p3q^6*((-9*s12^3 - 9*s12^2*s13)*s23^2 - 9*s12^2*s23^3) +
            p2q^6*(72*s12^2*s13^3 + 144*s12*s13^4 + 72*s13^5 +
              (108*s12*s13^3 + 108*s13^4)*s23 + (-9*s12*s13^2 + 27*s13^3)*s23^
                2 - 9*s13^2*s23^3) + p1q*p2q^5*(72*s12^2*s13^3 +
              144*s12*s13^4 + 72*s13^5 + (-207*s12^2*s13^2 - 306*s12*s13^3 -
                99*s13^4)*s23 + (-333*s12*s13^2 - 297*s13^3)*s23^2 +
              (18*s12*s13 - 108*s13^2)*s23^3 + 18*s13*s23^4) +
            p1q^3*p2q^3*((9*s12^2*s13^2 + 54*s12*s13^3 + 45*s13^4)*s23 +
              (108*s12^2*s13 + 171*s12*s13^2 + 99*s13^3)*s23^2 +
              (-45*s12^2 + 126*s12*s13 + 117*s13^2)*s23^3 + (-99*s12 + 9*s13)*
               s23^4 - 54*s23^5) + p1q^4*p2q^2*((-18*s12^2*s13 -
                126*s12*s13^2 - 108*s13^3)*s23^2 + (-36*s12^2 - 18*s12*s13 -
                72*s13^2)*s23^3 + (-81*s12 - 9*s13)*s23^4 - 45*s23^5) +
            p1q^6*((-18*s12 - 18*s13)*s23^4 - 18*s23^5) +
            p1q^5*p2q*((9*s12^2 + 90*s12*s13 + 81*s13^2)*s23^3 +
              (-9*s12 + 63*s13)*s23^4 - 18*s23^5) + p1q^2*p2q^4*
             ((36*s12^3*s13 - 108*s12^2*s13^2 - 288*s12*s13^3 - 144*s13^4)*
               s23 + (216*s12^2*s13 + 117*s12*s13^2 - 63*s13^3)*s23^2 +
              (324*s12*s13 + 225*s13^2)*s23^3 + (-9*s12 + 135*s13)*s23^4 -
              9*s23^5) + p3q^5*(p2q*(72*s12^4*s13 + 144*s12^3*s13^2 +
                72*s12^2*s13^3 + (108*s12^3*s13 + 108*s12^2*s13^2)*s23 +
                (-36*s12^3 + 18*s12^2*s13 + 18*s12*s13^2)*s23^2 +
                (-36*s12^2 + 18*s12*s13)*s23^3) + p1q*((-27*s12^4 -
                  90*s12^3*s13 - 63*s12^2*s13^2)*s23 + (-81*s12^3 -
                  117*s12^2*s13)*s23^2 + (-36*s12^2 + 18*s12*s13)*s23^3 +
                18*s12*s23^4)) + p3q^2*(p2q^4*(72*s12^4*s13 - 288*s12^3*
                 s13^2 - 576*s12^2*s13^3 + 216*s13^5 + (108*s12^3*s13 -
                  540*s12^2*s13^2 - 324*s12*s13^3 + 324*s13^4)*s23 +
                (-9*s12^3 + 99*s12^2*s13 - 198*s12*s13^2 + 54*s13^3)*s23^2 +
                (-9*s12^2 + 72*s12*s13 - 54*s13^2)*s23^3) + p1q*p2q^3*(
                72*s12^4*s13 - 144*s12^3*s13^2 - 432*s12^2*s13^3 -
                144*s12*s13^4 + 72*s13^5 + (-63*s12^4 - 216*s12^3*s13 -
                  1224*s12^2*s13^2 - 1548*s12*s13^3 - 477*s13^4)*s23 +
                (-153*s12^3 - 207*s12^2*s13 - 1017*s12*s13^2 - 891*s13^3)*
                 s23^2 + (-18*s12^2 + 288*s12*s13 - 234*s13^2)*s23^3 +
                (72*s12 + 108*s13)*s23^4) + p1q^3*p2q*((9*s12^4 +
                  36*s12^3*s13 + 81*s12^2*s13^2 + 54*s12*s13^3)*s23 +
                (99*s12^3 + 477*s12^2*s13 + 666*s12*s13^2 + 252*s13^3)*
                 s23^2 + (261*s12^2 + 558*s12*s13 + 279*s13^2)*s23^3 +
                (81*s12 - 63*s13)*s23^4 - 90*s23^5) + p1q^4*(
                (-36*s12^3 + 18*s12^2*s13 + 54*s12*s13^2)*s23^2 +
                (-36*s12^2 - 54*s12*s13 - 108*s13^2)*s23^3 +
                (-63*s12 - 171*s13)*s23^4 - 63*s23^5) + p1q^2*p2q^2*(
                (-72*s12^4 - 288*s12^3*s13 - 468*s12^2*s13^2 - 468*s12*
                   s13^3 - 216*s13^4)*s23 + (-45*s12^3 + 405*s12^2*s13 +
                  711*s12*s13^2 + 153*s13^3)*s23^2 + (279*s12^2 +
                  1170*s12*s13 + 693*s13^2)*s23^3 + (198*s12 + 270*s13)*
                 s23^4 - 54*s23^5)) + p3q^3*(p2q^3*(216*s12^4*s13 -
                576*s12^2*s13^3 - 288*s12*s13^4 + 72*s13^5 +
                (324*s12^3*s13 - 324*s12^2*s13^2 - 540*s12*s13^3 + 108*s13^4)*
                 s23 + (-36*s12^3 + 180*s12^2*s13 - 144*s12*s13^2)*s23^2 +
                (-36*s12^2 + 108*s12*s13 - 36*s13^2)*s23^3) +
              p1q*p2q^2*(144*s12^4*s13 + 144*s12^3*s13^2 - 144*s12^2*s13^3 -
                144*s12*s13^4 + (-117*s12^4 - 324*s12^3*s13 - 720*s12^2*
                   s13^2 - 720*s12*s13^3 - 207*s13^4)*s23 +
                (-315*s12^3 - 477*s12^2*s13 - 423*s12*s13^2 - 333*s13^3)*
                 s23^2 + (-90*s12^2 + 252*s12*s13 - 54*s13^2)*s23^3 +
                (108*s12 + 72*s13)*s23^4) + p1q^3*((9*s12^4 - 18*s12^3*s13 -
                  27*s12^2*s13^2)*s23 + (63*s12^3 + 243*s12^2*s13 +
                  216*s12*s13^2)*s23^2 + (153*s12^2 + 252*s12*s13 - 63*s13^2)*
                 s23^3 + (45*s12 - 117*s13)*s23^4 - 54*s23^5) +
              p1q^2*p2q*((-72*s12^4 - 288*s12^3*s13 - 180*s12^2*s13^2 +
                  36*s12*s13^3)*s23 + (-90*s12^3 + 126*s12^2*s13 +
                  522*s12*s13^2 + 126*s13^3)*s23^2 + (234*s12^2 +
                  684*s12*s13 + 198*s13^2)*s23^3 + (216*s12 + 36*s13)*s23^4 -
                36*s23^5)) + p3q*(p2q^5*(-144*s12^3*s13^2 - 72*s12^2*s13^3 +
                288*s12*s13^4 + 216*s13^5 + (-216*s12^2*s13^2 + 108*s12*
                   s13^3 + 324*s13^4)*s23 + (18*s12^2*s13 - 90*s12*s13^2 +
                  72*s13^3)*s23^2 + (18*s12*s13 - 36*s13^2)*s23^3) +
              p1q*p2q^4*(-144*s12^3*s13^2 - 144*s12^2*s13^3 + 144*s12*s13^4 +
                144*s13^5 + (-18*s12^3*s13 - 801*s12^2*s13^2 - 1152*s12*
                   s13^3 - 369*s13^4)*s23 + (54*s12^2*s13 - 909*s12*s13^2 -
                  855*s13^3)*s23^2 + (18*s12^2 + 162*s12*s13 - 270*s13^2)*
                 s23^3 + (18*s12 + 72*s13)*s23^4) + p1q^3*p2q^2*(
                (-18*s12^3*s13 - 99*s12^2*s13^2 - 108*s12*s13^3 - 27*s13^4)*
                 s23 + (72*s12^3 + 306*s12^2*s13 + 441*s12*s13^2 + 243*s13^3)*
                 s23^2 + (99*s12^2 + 360*s12*s13 + 351*s13^2)*s23^3 +
                (-99*s12 - 45*s13)*s23^4 - 126*s23^5) + p1q^4*p2q*(
                (-18*s12^3 - 90*s12^2*s13 - 18*s12*s13^2 + 54*s13^3)*s23^2 +
                (-18*s12^2 - 108*s12*s13 + 18*s13^2)*s23^3 +
                (-72*s12 - 108*s13)*s23^4 - 72*s23^5) + p1q^2*p2q^3*(
                (-36*s12^4 - 108*s12^3*s13 - 504*s12^2*s13^2 - 792*s12*
                   s13^3 - 360*s13^4)*s23 + (-36*s12^3 + 396*s12^2*s13 +
                  324*s12*s13^2 - 72*s13^3)*s23^2 + (72*s12^2 + 900*s12*s13 +
                  648*s13^2)*s23^3 + (36*s12 + 324*s13)*s23^4 - 36*s23^5) +
              p1q^5*((45*s12^2 + 18*s12*s13 - 27*s13^2)*s23^3 +
                (27*s12 - 45*s13)*s23^4 - 18*s23^5)) +
            p3q^4*(p2q^2*(216*s12^4*s13 + 288*s12^3*s13^2 - 72*s12^2*s13^3 -
                144*s12*s13^4 + (324*s12^3*s13 + 108*s12^2*s13^2 -
                  216*s12*s13^3)*s23 + (-54*s12^3 + 126*s12^2*s13 -
                  9*s12*s13^2 - 9*s13^3)*s23^2 + (-54*s12^2 + 72*s12*s13 -
                  9*s13^2)*s23^3) + p1q*p2q*(72*s12^4*s13 + 144*s12^3*s13^2 +
                72*s12^2*s13^3 + (-81*s12^4 - 216*s12^3*s13 - 153*s12^2*
                   s13^2 - 18*s12*s13^3)*s23 + (-243*s12^3 - 333*s12^2*s13 +
                  18*s12*s13^2)*s23^2 + (-90*s12^2 + 126*s12*s13 + 18*s13^2)*
                 s23^3 + (72*s12 + 18*s13)*s23^4) + p1q^2*(
                (-36*s12^4 - 144*s12^3*s13 - 108*s12^2*s13^2)*s23 +
                (-45*s12^3 + 9*s12^2*s13 + 126*s12*s13^2)*s23^2 +
                (99*s12^2 + 234*s12*s13)*s23^3 + (99*s12 - 9*s13)*s23^4 -
                9*s23^5)))*Log(s23/(s12 + s13 + s23)))/
          (p1q*p3q^5*(4*s12^3*s13 + 4*s12^2*s13^2)*s23^2 +
           p1q*p2q^5*(4*s12*s13^3 + 4*s13^4)*s23^2 - 4*p1q^5*p2q*s13*s23^5 +
           p1q^2*p2q^4*((4*s12*s13^3 + 4*s13^4)*s23^2 +
             (-8*s12*s13^2 - 12*s13^3)*s23^3) + p1q^3*p2q^3*
            ((-8*s12*s13^2 - 12*s13^3)*s23^3 + (4*s12*s13 + 12*s13^2)*
              s23^4) + p1q^4*p2q^2*((4*s12*s13 + 12*s13^2)*s23^4 -
             4*s13*s23^5) + p3q^4*(p1q*p2q*(12*s12^3*s13 + 4*s12^2*s13^2 - 8*
                s12*s13^3)*s23^2 + p1q^2*((4*s12^3*s13 + 4*s12^2*s13^2)*
                s23^2 + (-12*s12^2*s13 - 8*s12*s13^2)*s23^3)) +
           p3q^3*(p1q*p2q^2*(12*s12^3*s13 - 12*s12^2*s13^2 - 20*s12*s13^3 + 4*
                s13^4)*s23^2 + p1q^2*p2q*((8*s12^3*s13 - 8*s12*s13^3)*s23^2 +
               (-32*s12^2*s13 - 24*s12*s13^2 - 8*s13^3)*s23^3) +
             p1q^3*((-12*s12^2*s13 - 8*s12*s13^2)*s23^3 + (12*s12*s13 +
                 4*s13^2)*s23^4)) + p3q*(p1q*p2q^4*(-8*s12^2*s13^2 + 4*s12*
                s13^3 + 12*s13^4)*s23^2 - 4*p1q^5*s13*s23^5 +
             p1q^2*p2q^3*((-8*s12^2*s13^2 + 8*s13^4)*s23^2 + (-8*s12^2*s13 -
                 24*s12*s13^2 - 32*s13^3)*s23^3) + p1q^3*p2q^2*
              ((-8*s12^2*s13 - 16*s12*s13^2 - 20*s13^3)*s23^3 + (20*s12*s13 +
                 28*s13^2)*s23^4) + p1q^4*p2q*((16*s12*s13 + 16*s13^2)*
                s23^4 - 8*s13*s23^5)) + p3q^2*(p1q*p2q^3*(4*s12^3*s13 - 20*
                s12^2*s13^2 - 12*s12*s13^3 + 12*s13^4)*s23^2 +
             p1q^2*p2q^2*((4*s12^3*s13 - 12*s12^2*s13^2 - 12*s12*s13^3 +
                 4*s13^4)*s23^2 + (-28*s12^2*s13 - 32*s12*s13^2 - 28*s13^3)*
                s23^3) + p1q^3*p2q*((-20*s12^2*s13 - 16*s12*s13^2 - 8*s13^3)*
                s23^3 + (28*s12*s13 + 20*s13^2)*s23^4) +
             p1q^4*((12*s12*s13 + 4*s13^2)*s23^4 - 4*s13*s23^5)))) +
       Log((p2q + p3q)/(p1q + p2q + p3q))*
        (((p3q^6*((9*s12^3 + 9*s12^2*s13)*s23^2 + 9*s12^2*s23^3) +
            p2q^6*(36*s12^3*s13^2 + 72*s12^2*s13^3 + 36*s12*s13^4 +
              (72*s12^2*s13^2 + 72*s12*s13^3)*s23 + (45*s12*s13^2 + 9*s13^3)*
               s23^2 + 9*s13^2*s23^3) + p1q*p2q^5*(36*s12^3*s13^2 +
              72*s12^2*s13^3 + 36*s12*s13^4 + (-108*s12^3*s13 - 117*s12^2*
                 s13^2 - 18*s12*s13^3 - 9*s13^4)*s23 + (-216*s12^2*s13 -
                135*s12*s13^2 + 9*s13^3)*s23^2 - 126*s12*s13*s23^3 -
              18*s13*s23^4) + p1q^2*p2q^4*((72*s12^4 + 90*s12^3*s13 +
                18*s12^2*s13^2 - 18*s12*s13^3 - 18*s13^4)*s23 +
              (216*s12^3 + 198*s12^2*s13 + 135*s12*s13^2 + 81*s13^3)*s23^2 +
              (216*s12^2 + 72*s12*s13 + 63*s13^2)*s23^3 + (81*s12 - 27*s13)*
               s23^4 + 9*s23^5) + p1q^3*p2q^3*((27*s12^2*s13^2 +
                18*s12*s13^3 - 9*s13^4)*s23 + (-18*s12^3 - 90*s12^2*s13 +
                63*s12*s13^2 + 99*s13^3)*s23^2 + (-45*s12^2 - 270*s12*s13 -
                63*s13^2)*s23^3 + (-9*s12 - 153*s13)*s23^4 + 18*s23^5) +
            p1q^6*((18*s12 + 18*s13)*s23^4 + 18*s23^5) +
            p1q^5*p2q*((27*s12^2 - 18*s12*s13 - 45*s13^2)*s23^3 +
              (99*s12 + 27*s13)*s23^4 + 72*s23^5) + p1q^4*p2q^2*
             ((-54*s12^2*s13 - 18*s12*s13^2 + 36*s13^3)*s23^2 +
              (36*s12^2 - 180*s12*s13 - 126*s13^2)*s23^3 + (117*s12 - 81*s13)*
               s23^4 + 81*s23^5) + p3q^5*(p2q*(36*s12^5 + 72*s12^4*s13 +
                36*s12^3*s13^2 + (72*s12^4 + 72*s12^3*s13)*s23 +
                (72*s12^3 + 18*s12^2*s13 - 18*s12*s13^2)*s23^2 +
                (36*s12^2 - 18*s12*s13)*s23^3) + p1q*((-9*s12^4 +
                  18*s12^3*s13 + 27*s12^2*s13^2)*s23 + (9*s12^3 +
                  45*s12^2*s13)*s23^2 - 18*s12*s13*s23^3 - 18*s12*s23^4)) +
            p3q^4*(p2q^2*(108*s12^5 + 144*s12^4*s13 - 36*s12^3*s13^2 -
                72*s12^2*s13^3 + (216*s12^4 + 72*s12^3*s13 - 144*s12^2*s13^2)*
                 s23 + (162*s12^3 - 90*s12^2*s13 - 63*s12*s13^2 + 9*s13^3)*
                 s23^2 + (54*s12^2 - 72*s12*s13 + 9*s13^2)*s23^3) +
              p1q*p2q*(36*s12^5 + 72*s12^4*s13 + 36*s12^3*s13^2 +
                (-27*s12^4 - 36*s12^3*s13 - 27*s12^2*s13^2 - 18*s12*s13^3)*
                 s23 + (-81*s12^3 - 99*s12^2*s13 - 90*s12*s13^2)*s23^2 +
                (-90*s12^2 - 162*s12*s13 - 18*s13^2)*s23^3 +
                (-72*s12 - 18*s13)*s23^4) + p1q^2*((-36*s12^4 + 36*s12^2*
                   s13^2)*s23 + (-9*s12^3 + 27*s12^2*s13 - 36*s12*s13^2)*
                 s23^2 + (-9*s12^2 - 72*s12*s13)*s23^3 + (-27*s12 + 9*s13)*
                 s23^4 + 9*s23^5)) + p3q^3*(p2q^3*(108*s12^5 - 288*s12^3*
                 s13^2 - 144*s12^2*s13^3 + 36*s12*s13^4 + (216*s12^4 -
                  216*s12^3*s13 - 360*s12^2*s13^2 + 72*s12*s13^3)*s23 +
                (144*s12^3 - 288*s12^2*s13 - 36*s12*s13^2 + 36*s13^3)*s23^2 +
                (36*s12^2 - 108*s12*s13 + 36*s13^2)*s23^3) +
              p1q*p2q^2*(72*s12^5 + 72*s12^4*s13 - 72*s12^3*s13^2 -
                72*s12^2*s13^3 + (-63*s12^4 - 432*s12^3*s13 - 468*s12^2*
                   s13^2 - 108*s12*s13^3 - 9*s13^4)*s23 + (-261*s12^3 -
                  747*s12^2*s13 - 441*s12*s13^2 - 27*s13^3)*s23^2 +
                (-234*s12^2 - 504*s12*s13 - 90*s13^2)*s23^3 +
                (-108*s12 - 72*s13)*s23^4) + p1q^3*((-45*s12^4 - 54*s12^3*
                   s13 - 9*s12^2*s13^2)*s23 + (27*s12^3 + 9*s12^2*s13 -
                  54*s12*s13^2)*s23^2 + (45*s12^2 - 72*s12*s13 + 9*s13^2)*
                 s23^3 + (-9*s12 + 27*s13)*s23^4 + 18*s23^5) +
              p1q^2*p2q*((-54*s12^4 + 54*s12^3*s13 + 126*s12^2*s13^2 +
                  18*s12*s13^3)*s23 + (72*s12^3 + 288*s12^2*s13 +
                  72*s12*s13^2)*s23^2 + (54*s12^2 - 18*s12*s13)*s23^3 +
                (-36*s12 + 36*s13)*s23^4 + 36*s23^5)) +
            p3q^2*(p2q^4*(36*s12^5 - 144*s12^4*s13 - 288*s12^3*s13^2 +
                108*s12*s13^4 + (72*s12^4 - 360*s12^3*s13 - 216*s12^2*s13^2 +
                  216*s12*s13^3)*s23 + (45*s12^3 - 279*s12^2*s13 +
                  90*s12*s13^2 + 54*s13^3)*s23^2 + (9*s12^2 - 72*s12*s13 +
                  54*s13^2)*s23^3) + p1q*p2q^3*(36*s12^5 - 72*s12^4*s13 -
                216*s12^3*s13^2 - 72*s12^2*s13^3 + 36*s12*s13^4 +
                (-81*s12^4 - 792*s12^3*s13 - 864*s12^2*s13^2 - 180*s12*
                   s13^3 - 27*s13^4)*s23 + (-243*s12^3 - 1233*s12^2*s13 -
                  747*s12*s13^2 - 45*s13^3)*s23^2 + (-198*s12^2 -
                  720*s12*s13 - 126*s13^2)*s23^3 + (-72*s12 - 108*s13)*
                 s23^4) + p1q^4*((108*s12^3 + 126*s12^2*s13 + 18*s12*s13^2)*
                 s23^2 + (72*s12^2 + 18*s13^2)*s23^3 + (-27*s12 + 27*s13)*
                 s23^4 + 9*s23^5) + p1q^2*p2q^2*((-36*s12^4 - 90*s12^3*s13 -
                  54*s12^2*s13^2 + 18*s12*s13^3 + 18*s13^4)*s23 +
                (99*s12^3 + 81*s12^2*s13 + 27*s12*s13^2 + 45*s13^3)*s23^2 +
                (99*s12^2 - 72*s12*s13 - 9*s13^2)*s23^3 + (18*s12 + 18*s13)*
                 s23^4 + 54*s23^5) + p1q^3*p2q*((27*s12^4 + 108*s12^3*s13 +
                  99*s12^2*s13^2 + 18*s12*s13^3)*s23 + (117*s12^3 +
                  243*s12^2*s13 + 54*s12*s13^2 - 36*s13^3)*s23^2 +
                (-99*s12^2 - 126*s12*s13 - 45*s13^2)*s23^3 +
                (-135*s12 + 45*s13)*s23^4 + 54*s23^5)) +
            p3q*(p2q^5*(-72*s12^4*s13 - 36*s12^3*s13^2 + 144*s12^2*s13^3 +
                108*s12*s13^4 + (-144*s12^3*s13 + 72*s12^2*s13^2 +
                  216*s12*s13^3)*s23 + (-90*s12^2*s13 + 126*s12*s13^2 +
                  36*s13^3)*s23^2 + (-18*s12*s13 + 36*s13^2)*s23^3) +
              p1q*p2q^4*(-72*s12^4*s13 - 72*s12^3*s13^2 + 72*s12^2*s13^3 +
                72*s12*s13^4 + (-36*s12^4 - 522*s12^3*s13 - 567*s12^2*s13^2 -
                  108*s12*s13^3 - 27*s13^4)*s23 + (-72*s12^3 - 846*s12^2*
                   s13 - 531*s12*s13^2 - 9*s13^3)*s23^2 + (-54*s12^2 -
                  486*s12*s13 - 54*s13^2)*s23^3 + (-18*s12 - 72*s13)*s23^4) +
              p1q^5*((-81*s12^2 - 90*s12*s13 - 9*s13^2)*s23^3 +
                (-81*s12 - 9*s13)*s23^4) + p1q^2*p2q^3*((54*s12^4 -
                  54*s12^3*s13 - 126*s12^2*s13^2 - 18*s12*s13^3)*s23 +
                (234*s12^3 + 18*s12^2*s13 + 54*s12*s13^2 + 126*s13^3)*s23^2 +
                (252*s12^2 - 54*s12*s13 + 54*s13^2)*s23^3 +
                (108*s12 - 36*s13)*s23^4 + 36*s23^5) + p1q^3*p2q^2*(
                (-54*s12^3*s13 - 81*s12^2*s13^2 - 36*s12*s13^3 - 9*s13^4)*
                 s23 + (-72*s12^3 - 216*s12^2*s13 - 117*s12*s13^2 - 9*s13^3)*
                 s23^2 + (-261*s12^2 - 468*s12*s13 - 189*s13^2)*s23^3 +
                (-135*s12 - 135*s13)*s23^4 + 54*s23^5) + p1q^4*p2q*(
                (-54*s12^3 + 18*s12^2*s13 + 90*s12*s13^2 + 18*s13^3)*s23^2 +
                (-198*s12^2 - 72*s12*s13 + 18*s13^2)*s23^3 +
                (-54*s12 + 90*s13)*s23^4 + 90*s23^5)))*
           Log(s12/(s12 + s13 + s23)))/(p1q*p3q^5*(4*s12^4 + 4*s12^3*s13)*
            s23^2 + p1q*p2q^5*(4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 -
           4*p1q^5*p2q*s12*s23^5 + p1q^2*p2q^4*((4*s12^2*s13^2 + 4*s12*s13^3)*
              s23^2 + (-8*s12^2*s13 - 12*s12*s13^2)*s23^3) +
           p1q^3*p2q^3*((-8*s12^2*s13 - 12*s12*s13^2)*s23^3 +
             (4*s12^2 + 12*s12*s13)*s23^4) + p1q^4*p2q^2*
            ((4*s12^2 + 12*s12*s13)*s23^4 - 4*s12*s23^5) +
           p3q^4*(p1q*p2q*(12*s12^4 + 4*s12^3*s13 - 8*s12^2*s13^2)*s23^2 +
             p1q^2*((4*s12^4 + 4*s12^3*s13)*s23^2 + (-12*s12^3 - 8*s12^2*s13)*
                s23^3)) + p3q^3*(p1q*p2q^2*(12*s12^4 - 12*s12^3*s13 - 20*
                s12^2*s13^2 + 4*s12*s13^3)*s23^2 + p1q^2*p2q*
              ((8*s12^4 - 8*s12^2*s13^2)*s23^2 + (-32*s12^3 - 24*s12^2*s13 -
                 8*s12*s13^2)*s23^3) + p1q^3*((-12*s12^3 - 8*s12^2*s13)*
                s23^3 + (12*s12^2 + 4*s12*s13)*s23^4)) +
           p3q*(p1q*p2q^4*(-8*s12^3*s13 + 4*s12^2*s13^2 + 12*s12*s13^3)*
              s23^2 - 4*p1q^5*s12*s23^5 + p1q^2*p2q^3*((-8*s12^3*s13 +
                 8*s12*s13^3)*s23^2 + (-8*s12^3 - 24*s12^2*s13 -
                 32*s12*s13^2)*s23^3) + p1q^3*p2q^2*((-8*s12^3 -
                 16*s12^2*s13 - 20*s12*s13^2)*s23^3 + (20*s12^2 + 28*s12*s13)*
                s23^4) + p1q^4*p2q*((16*s12^2 + 16*s12*s13)*s23^4 - 8*s12*
                s23^5)) + p3q^2*(p1q*p2q^3*(4*s12^4 - 20*s12^3*s13 - 12*s12^2*
                s13^2 + 12*s12*s13^3)*s23^2 + p1q^2*p2q^2*
              ((4*s12^4 - 12*s12^3*s13 - 12*s12^2*s13^2 + 4*s12*s13^3)*
                s23^2 + (-28*s12^3 - 32*s12^2*s13 - 28*s12*s13^2)*s23^3) +
             p1q^3*p2q*((-20*s12^3 - 16*s12^2*s13 - 8*s12*s13^2)*s23^3 +
               (28*s12^2 + 20*s12*s13)*s23^4) + p1q^4*((12*s12^2 + 4*s12*s13)*
                s23^4 - 4*s12*s23^5))) +
         ((p3q^6*((-9*s12^3 - 9*s12^2*s13)*s23^2 - 9*s12^2*s23^3) +
            p2q^6*(36*s12^2*s13^3 + 72*s12*s13^4 + 36*s13^5 +
              (72*s12*s13^3 + 72*s13^4)*s23 + (-9*s12*s13^2 + 27*s13^3)*s23^
                2 - 9*s13^2*s23^3) + p1q*p2q^5*(36*s12^2*s13^3 +
              72*s12*s13^4 + 36*s13^5 + (-135*s12^2*s13^2 - 162*s12*s13^3 -
                27*s13^4)*s23 + (-261*s12*s13^2 - 189*s13^3)*s23^2 +
              (18*s12*s13 - 108*s13^2)*s23^3 + 18*s13*s23^4) +
            p1q^3*p2q^3*((9*s12^2*s13^2 + 54*s12*s13^3 + 45*s13^4)*s23 +
              (-18*s12^3 - 18*s12^2*s13 - 99*s12*s13^2 - 63*s13^3)*s23^2 +
              (-63*s12^2 + 54*s12*s13 - 9*s13^2)*s23^3 + (-99*s12 + 45*s13)*
               s23^4 - 54*s23^5) + p1q^4*p2q^2*((-18*s12^2*s13 -
                126*s12*s13^2 - 108*s13^3)*s23^2 + (108*s12*s13 + 18*s13^2)*
               s23^3 + (-45*s12 + 81*s13)*s23^4 - 45*s23^5) +
            p1q^5*p2q*((9*s12^2 + 90*s12*s13 + 81*s13^2)*s23^3 +
              (-27*s12 + 45*s13)*s23^4 - 36*s23^5) +
            p1q^6*((-18*s12 - 18*s13)*s23^4 - 18*s23^5) +
            p1q^2*p2q^4*((54*s12^3*s13 + 18*s12^2*s13^2 - 54*s12*s13^3 -
                18*s13^4)*s23 + (198*s12^2*s13 + 81*s12*s13^2 - 45*s13^3)*s23^
                2 + (288*s12*s13 + 117*s13^2)*s23^3 + (-9*s12 + 135*s13)*s23^
                4 - 9*s23^5) + p3q^5*(p2q*(36*s12^4*s13 + 72*s12^3*s13^2 +
                36*s12^2*s13^3 + (72*s12^3*s13 + 72*s12^2*s13^2)*s23 +
                (-36*s12^3 + 18*s12^2*s13 + 18*s12*s13^2)*s23^2 +
                (-36*s12^2 + 18*s12*s13)*s23^3) + p1q*((9*s12^4 +
                  18*s12^3*s13 + 45*s12^2*s13^2 + 36*s12*s13^3)*s23 +
                (-9*s12^3 + 27*s12^2*s13 + 72*s12*s13^2)*s23^2 +
                54*s12*s13*s23^3 + 18*s12*s23^4)) +
            p3q^2*(p2q^4*(36*s12^4*s13 - 144*s12^3*s13^2 - 288*s12^2*s13^3 +
                108*s13^5 + (72*s12^3*s13 - 360*s12^2*s13^2 - 216*s12*s13^3 +
                  216*s13^4)*s23 + (-9*s12^3 + 99*s12^2*s13 - 198*s12*s13^2 +
                  54*s13^3)*s23^2 + (-9*s12^2 + 72*s12*s13 - 54*s13^2)*
                 s23^3) + p1q*p2q^3*(36*s12^4*s13 - 72*s12^3*s13^2 -
                216*s12^2*s13^3 - 72*s12*s13^4 + 36*s13^5 +
                (9*s12^4 - 792*s12^2*s13^2 - 1044*s12*s13^3 - 261*s13^4)*
                 s23 + (-9*s12^3 + 117*s12^2*s13 - 801*s12*s13^2 - 639*s13^3)*
                 s23^2 + (54*s12^2 + 360*s12*s13 - 234*s13^2)*s23^3 +
                (72*s12 + 108*s13)*s23^4) + p1q^3*p2q*((9*s12^4 +
                  36*s12^3*s13 + 81*s12^2*s13^2 + 54*s12*s13^3)*s23 +
                (-45*s12^3 + 45*s12^2*s13 + 234*s12*s13^2 + 108*s13^3)*
                 s23^2 + (99*s12^2 + 270*s12*s13 + 153*s13^2)*s23^3 +
                (63*s12 - 45*s13)*s23^4 - 90*s23^5) + p1q^2*p2q^2*(
                (36*s12^4 + 126*s12^3*s13 + 54*s12^2*s13^2 - 126*s12*s13^3 -
                  90*s13^4)*s23 + (45*s12^3 + 567*s12^2*s13 + 621*s12*s13^2 +
                  99*s13^3)*s23^2 + (189*s12^2 + 972*s12*s13 + 513*s13^2)*
                 s23^3 + (126*s12 + 270*s13)*s23^4 - 54*s23^5) +
              p1q^4*((-36*s12^3 + 18*s12^2*s13 + 54*s12*s13^2)*s23^2 +
                (36*s12^2 + 72*s12*s13 - 54*s13^2)*s23^3 + (27*s12 - 99*s13)*
                 s23^4 - 45*s23^5)) + p3q*(p2q^5*(-72*s12^3*s13^2 -
                36*s12^2*s13^3 + 144*s12*s13^4 + 108*s13^5 +
                (-144*s12^2*s13^2 + 72*s12*s13^3 + 216*s13^4)*s23 +
                (18*s12^2*s13 - 90*s12*s13^2 + 72*s13^3)*s23^2 +
                (18*s12*s13 - 36*s13^2)*s23^3) + p1q*p2q^4*(-72*s12^3*s13^2 -
                72*s12^2*s13^3 + 72*s12*s13^4 + 72*s13^5 + (-18*s12^3*s13 -
                  585*s12^2*s13^2 - 720*s12*s13^3 - 153*s13^4)*s23 +
                (54*s12^2*s13 - 765*s12*s13^2 - 567*s13^3)*s23^2 +
                (18*s12^2 + 162*s12*s13 - 270*s13^2)*s23^3 +
                (18*s12 + 72*s13)*s23^4) + p1q^3*p2q^2*((-18*s12^3*s13 -
                  99*s12^2*s13^2 - 108*s12*s13^3 - 27*s13^4)*s23 +
                (-36*s12^3 - 72*s12^2*s13 - 63*s12*s13^2 + 9*s13^3)*s23^2 +
                (-27*s12^2 + 180*s12*s13 + 225*s13^2)*s23^3 +
                (-117*s12 + 63*s13)*s23^4 - 126*s23^5) + p1q^4*p2q*(
                (-18*s12^3 - 90*s12^2*s13 - 18*s12*s13^2 + 54*s13^3)*s23^2 +
                (54*s12^2 + 72*s12*s13 + 126*s13^2)*s23^3 +
                (-18*s12 - 18*s13)*s23^4 - 90*s23^5) + p1q^5*(
                (45*s12^2 + 18*s12*s13 - 27*s13^2)*s23^3 + (9*s12 - 63*s13)*
                 s23^4 - 36*s23^5) + p1q^2*p2q^3*((18*s12^4 + 90*s12^3*s13 -
                  162*s12^2*s13^2 - 378*s12*s13^3 - 144*s13^4)*s23 +
                (54*s12^3 + 486*s12^2*s13 + 162*s12*s13^2 - 126*s13^3)*
                 s23^2 + (108*s12^2 + 810*s12*s13 + 378*s13^2)*s23^3 +
                (36*s12 + 324*s13)*s23^4 - 36*s23^5)) +
            p3q^3*(p2q^3*(108*s12^4*s13 - 288*s12^2*s13^3 - 144*s12*s13^4 +
                36*s13^5 + (216*s12^3*s13 - 216*s12^2*s13^2 - 360*s12*s13^3 +
                  72*s13^4)*s23 + (-36*s12^3 + 180*s12^2*s13 - 144*s12*s13^2)*
                 s23^2 + (-36*s12^2 + 108*s12*s13 - 36*s13^2)*s23^3) +
              p1q*p2q^2*(72*s12^4*s13 + 72*s12^3*s13^2 - 72*s12^2*s13^3 -
                72*s12*s13^4 + (27*s12^4 + 72*s12^3*s13 - 324*s12^2*s13^2 -
                  540*s12*s13^3 - 171*s13^4)*s23 + (-27*s12^3 + 99*s12^2*
                   s13 - 279*s12*s13^2 - 333*s13^3)*s23^2 +
                (54*s12^2 + 360*s12*s13 - 90*s13^2)*s23^3 +
                (108*s12 + 72*s13)*s23^4) + p1q^2*p2q*((18*s12^4 +
                  54*s12^3*s13 + 234*s12^2*s13^2 + 234*s12*s13^3 + 36*s13^4)*
                 s23 + (-72*s12^3 + 216*s12^2*s13 + 576*s12*s13^2 +
                  144*s13^3)*s23^2 + (54*s12^2 + 486*s12*s13 + 180*s13^2)*
                 s23^3 + (108*s12 + 36*s13)*s23^4 - 36*s23^5) +
              p1q^3*((9*s12^4 - 18*s12^3*s13 - 27*s12^2*s13^2)*s23 +
                (-27*s12^3 + 27*s12^2*s13 + 54*s12*s13^2 - 36*s13^3)*s23^2 +
                (63*s12^2 + 144*s12*s13 - 81*s13^2)*s23^3 + (81*s12 - 63*s13)*
                 s23^4 - 18*s23^5)) + p3q^4*(p2q^2*(108*s12^4*s13 +
                144*s12^3*s13^2 - 36*s12^2*s13^3 - 72*s12*s13^4 +
                (216*s12^3*s13 + 72*s12^2*s13^2 - 144*s12*s13^3)*s23 +
                (-54*s12^3 + 126*s12^2*s13 - 9*s12*s13^2 - 9*s13^3)*s23^2 +
                (-54*s12^2 + 72*s12*s13 - 9*s13^2)*s23^3) +
              p1q*p2q*(36*s12^4*s13 + 72*s12^3*s13^2 + 36*s12^2*s13^3 +
                (27*s12^4 + 72*s12^3*s13 + 63*s12^2*s13^2 - 18*s12*s13^3 -
                  36*s13^4)*s23 + (-27*s12^3 + 63*s12^2*s13 + 90*s12*s13^2 -
                  72*s13^3)*s23^2 + (18*s12^2 + 198*s12*s13 - 18*s13^2)*
                 s23^3 + (72*s12 + 18*s13)*s23^4) + p1q^2*((-36*s12^3*s13 +
                  36*s12*s13^3)*s23 + (-63*s12^3 - 63*s12^2*s13 +
                  36*s12*s13^2 - 36*s13^3)*s23^2 + (-27*s12^2 + 36*s12*s13 -
                  72*s13^2)*s23^3 + (27*s12 - 45*s13)*s23^4 - 9*s23^5)))*
           Log(s13/(s12 + s13 + s23)))/(p1q*p3q^5*(4*s12^3*s13 +
             4*s12^2*s13^2)*s23^2 + p1q*p2q^5*(4*s12*s13^3 + 4*s13^4)*s23^2 -
           4*p1q^5*p2q*s13*s23^5 + p1q^2*p2q^4*((4*s12*s13^3 + 4*s13^4)*
              s23^2 + (-8*s12*s13^2 - 12*s13^3)*s23^3) +
           p1q^3*p2q^3*((-8*s12*s13^2 - 12*s13^3)*s23^3 +
             (4*s12*s13 + 12*s13^2)*s23^4) + p1q^4*p2q^2*
            ((4*s12*s13 + 12*s13^2)*s23^4 - 4*s13*s23^5) +
           p3q^4*(p1q*p2q*(12*s12^3*s13 + 4*s12^2*s13^2 - 8*s12*s13^3)*
              s23^2 + p1q^2*((4*s12^3*s13 + 4*s12^2*s13^2)*s23^2 +
               (-12*s12^2*s13 - 8*s12*s13^2)*s23^3)) +
           p3q^3*(p1q*p2q^2*(12*s12^3*s13 - 12*s12^2*s13^2 - 20*s12*s13^3 + 4*
                s13^4)*s23^2 + p1q^2*p2q*((8*s12^3*s13 - 8*s12*s13^3)*s23^2 +
               (-32*s12^2*s13 - 24*s12*s13^2 - 8*s13^3)*s23^3) +
             p1q^3*((-12*s12^2*s13 - 8*s12*s13^2)*s23^3 + (12*s12*s13 +
                 4*s13^2)*s23^4)) + p3q*(p1q*p2q^4*(-8*s12^2*s13^2 + 4*s12*
                s13^3 + 12*s13^4)*s23^2 - 4*p1q^5*s13*s23^5 +
             p1q^2*p2q^3*((-8*s12^2*s13^2 + 8*s13^4)*s23^2 + (-8*s12^2*s13 -
                 24*s12*s13^2 - 32*s13^3)*s23^3) + p1q^3*p2q^2*
              ((-8*s12^2*s13 - 16*s12*s13^2 - 20*s13^3)*s23^3 + (20*s12*s13 +
                 28*s13^2)*s23^4) + p1q^4*p2q*((16*s12*s13 + 16*s13^2)*
                s23^4 - 8*s13*s23^5)) + p3q^2*(p1q*p2q^3*(4*s12^3*s13 - 20*
                s12^2*s13^2 - 12*s12*s13^3 + 12*s13^4)*s23^2 +
             p1q^2*p2q^2*((4*s12^3*s13 - 12*s12^2*s13^2 - 12*s12*s13^3 +
                 4*s13^4)*s23^2 + (-28*s12^2*s13 - 32*s12*s13^2 - 28*s13^3)*
                s23^3) + p1q^3*p2q*((-20*s12^2*s13 - 16*s12*s13^2 - 8*s13^3)*
                s23^3 + (28*s12*s13 + 20*s13^2)*s23^4) +
             p1q^4*((12*s12*s13 + 4*s13^2)*s23^4 - 4*s13*s23^5))) +
         ((p2q^5*(36*s12^2*s13^3 + 36*s12*s13^4 + (54*s12*s13^3 + 18*s13^4)*
               s23 + 18*s13^3*s23^2) + p1q*p2q^4*(36*s12^2*s13^3 +
              36*s12*s13^4 + (-54*s12^2*s13^2 + 18*s13^4)*s23 -
              72*s12*s13^2*s23^2 - 18*s13^2*s23^3) + p1q^2*p2q^3*
             ((-45*s12^3*s13 - 153*s12^2*s13^2 - 117*s12*s13^3 - 9*s13^4)*
               s23 + (-63*s12^2*s13 - 171*s12*s13^2 - 54*s13^3)*s23^2 +
              (-18*s12*s13 - 45*s13^2)*s23^3) + p1q^4*p2q*
             ((-9*s12^2 - 9*s12*s13)*s23^3 - 9*s12*s23^4) +
            p1q^3*p2q^2*((9*s12^3 + 72*s12^2*s13 + 72*s12*s13^2 + 9*s13^3)*
               s23^2 + (9*s12^2 + 90*s12*s13 + 36*s13^2)*s23^3 +
              27*s13*s23^4) + p3q^4*(p2q*(36*s12^4*s13 + 36*s12^3*s13^2 +
                (54*s12^3*s13 + 18*s12^2*s13^2)*s23 + 18*s12^2*s13*s23^2) +
              p1q*((-18*s12^4 - 36*s12^3*s13 - 18*s12^2*s13^2)*s23 +
                (-36*s12^3 - 36*s12^2*s13)*s23^2 - 18*s12^2*s23^3)) +
            p3q^3*(p2q^2*(72*s12^4*s13 - 72*s12^2*s13^3 + (108*s12^3*s13 -
                  72*s12^2*s13^2 - 36*s12*s13^3)*s23 + (36*s12^2*s13 -
                  36*s12*s13^2)*s23^2) + p1q*p2q*(36*s12^4*s13 +
                36*s12^3*s13^2 + (-36*s12^4 - 36*s12^3*s13 - 36*s12^2*s13^2)*
                 s23 + (-72*s12^3 - 90*s12^2*s13 - 18*s12*s13^2)*s23^2 +
                (-36*s12^2 - 18*s12*s13)*s23^3) + p1q^2*((-18*s12^4 -
                  36*s12^3*s13 - 18*s12^2*s13^2)*s23 + (-9*s12^3 +
                  9*s12^2*s13 + 18*s12*s13^2)*s23^2 + (27*s12^2 + 36*s12*s13)*
                 s23^3 + 18*s12*s23^4)) + p3q^2*(p2q^3*(36*s12^4*s13 -
                108*s12^3*s13^2 - 108*s12^2*s13^3 + 36*s12*s13^4 +
                (54*s12^3*s13 - 198*s12^2*s13^2 - 18*s12*s13^3 + 18*s13^4)*
                 s23 + (18*s12^2*s13 - 72*s12*s13^2 + 18*s13^3)*s23^2) +
              p1q*p2q^2*(36*s12^4*s13 - 36*s12^3*s13^2 - 72*s12^2*s13^3 +
                (-36*s12^4 - 90*s12^3*s13 - 270*s12^2*s13^2 - 90*s12*s13^3 +
                  18*s13^4)*s23 + (-72*s12^3 - 198*s12^2*s13 - 180*s12*
                   s13^2 + 18*s13^3)*s23^2 + (-36*s12^2 - 72*s12*s13)*
                 s23^3) + p1q^3*((27*s12^3 + 45*s12^2*s13 + 18*s12*s13^2)*
                 s23^2 + (36*s12^2 + 27*s12*s13)*s23^3 + 9*s12*s23^4) +
              p1q^2*p2q*((-27*s12^4 - 117*s12^3*s13 - 135*s12^2*s13^2 -
                  45*s12*s13^3)*s23 + (-36*s12^3 - 117*s12^2*s13 -
                  63*s12*s13^2)*s23^2 + (-9*s12^2 + 18*s13^2)*s23^3 +
                18*s13*s23^4)) + p3q*(p2q^4*(-72*s12^3*s13^2 + 72*s12*s13^4 +
                (-108*s12^2*s13^2 + 72*s12*s13^3 + 36*s13^4)*s23 +
                (-36*s12*s13^2 + 36*s13^3)*s23^2) + p1q*p2q^3*(-72*s12^3*
                 s13^2 - 36*s12^2*s13^3 + 36*s12*s13^4 + (-54*s12^3*s13 -
                  306*s12^2*s13^2 - 126*s12*s13^3 + 18*s13^4)*s23 +
                (-108*s12^2*s13 - 270*s12*s13^2 - 18*s13^3)*s23^2 +
                (-54*s12*s13 - 36*s13^2)*s23^3) + p1q^4*((-9*s12^2 -
                  9*s12*s13)*s23^3 - 9*s12*s23^4) + p1q^2*p2q^2*(
                (-27*s12^4 - 108*s12^3*s13 - 180*s12^2*s13^2 - 108*s12*
                   s13^3 - 9*s13^4)*s23 + (-45*s12^3 - 63*s12^2*s13 -
                  90*s12*s13^2 - 36*s13^3)*s23^2 + (-18*s12^2 + 72*s12*s13 +
                  9*s13^2)*s23^3 + 36*s13*s23^4) + p1q^3*p2q*(
                (18*s12^3 + 81*s12^2*s13 + 72*s12*s13^2 + 9*s13^3)*s23^2 +
                (9*s12^2 + 81*s12*s13 + 36*s13^2)*s23^3 + (-9*s12 + 27*s13)*
                 s23^4)))*Log((s12 + s13)/(s12 + s13 + s23)))/
          (2*p1q*p3q^4*s12^3*s13*s23^2 + 2*p1q*p2q^4*s12*s13^3*s23^2 +
           2*p1q^4*p2q*s12*s13*s23^4 + p1q^2*p2q^3*(2*s12*s13^3*s23^2 -
             4*s12*s13^2*s23^3) + p1q^3*p2q^2*(-4*s12*s13^2*s23^3 +
             2*s12*s13*s23^4) + p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*
              s23^2 + p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
           p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*
              s23^2 + p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
               (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) + p1q^3*(-4*s12^2*s13*
                s23^3 + 2*s12*s13*s23^4)) +
           p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
             2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*((-4*s12^2*s13^2 +
                 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*s13^2)*s23^3) +
             p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*s23^3 + 4*s12*s13*
                s23^4))) + ((p3q^6*((9*s12^4 - 9*s12^2*s13^2)*s23^2 +
              (9*s12^3 - 9*s12^2*s13)*s23^3) + p2q^6*(-144*s12^3*s13^3 -
              288*s12^2*s13^4 - 144*s12*s13^5 + (-252*s12^2*s13^3 -
                288*s12*s13^4 - 36*s13^5)*s23 + (9*s12^2*s13^2 -
                108*s12*s13^3 - 45*s13^4)*s23^2 + (9*s12*s13^2 - 9*s13^3)*s23^
                3) + p1q*p2q^5*(-144*s12^3*s13^3 - 288*s12^2*s13^4 -
              144*s12*s13^5 + (351*s12^3*s13^2 + 459*s12^2*s13^3 +
                81*s12*s13^4 - 27*s13^5)*s23 + (621*s12^2*s13^2 +
                576*s12*s13^3 + 27*s13^4)*s23^2 + (-18*s12^2*s13 +
                270*s12*s13^2 + 72*s13^3)*s23^3 + (-18*s12*s13 + 18*s13^2)*
               s23^4) + p1q^5*p2q*((-9*s12^3 - 117*s12^2*s13 - 63*s12*s13^2 +
                45*s13^3)*s23^3 + (9*s12^2 - 162*s12*s13 - 27*s13^2)*s23^4 +
              (18*s12 - 72*s13)*s23^5) + p1q^4*p2q^2*
             ((18*s12^3*s13 + 180*s12^2*s13^2 + 126*s12*s13^3 - 36*s13^4)*s23^
                2 + (36*s12^3 + 36*s12^2*s13 + 324*s12*s13^2 + 144*s13^3)*s23^
                3 + (81*s12^2 + 153*s13^2)*s23^4 + (45*s12 - 27*s13)*s23^5) +
            p1q^6*((18*s12^2 - 18*s13^2)*s23^4 + (18*s12 - 18*s13)*s23^5) +
            p1q^3*p2q^3*((-9*s12^3*s13^2 - 81*s12^2*s13^3 - 63*s12*s13^4 +
                9*s13^5)*s23 + (-216*s12^3*s13 - 405*s12^2*s13^2 -
                396*s12*s13^3 - 135*s13^4)*s23^2 + (45*s12^3 - 333*s12^2*
                 s13 - 315*s12*s13^2 - 117*s13^3)*s23^3 + (99*s12^2 -
                126*s12*s13 + 9*s13^2)*s23^4 + (54*s12 - 18*s13)*s23^5) +
            p1q^2*p2q^4*((-36*s12^4*s13 + 288*s12^3*s13^2 + 648*s12^2*s13^3 +
                360*s12*s13^4 + 36*s13^5)*s23 + (-288*s12^3*s13 +
                81*s12^2*s13^2 + 360*s12*s13^3 + 63*s13^4)*s23^2 +
              (-468*s12^2*s13 - 207*s12*s13^2 + 27*s13^3)*s23^3 +
              (9*s12^2 - 216*s12*s13 - 9*s13^2)*s23^4 + (9*s12 - 9*s13)*s23^
                5) + p3q^5*(p2q*(-144*s12^5*s13 - 288*s12^4*s13^2 -
                144*s12^3*s13^3 + (-252*s12^4*s13 - 288*s12^3*s13^2 -
                  36*s12^2*s13^3)*s23 + (36*s12^4 - 126*s12^3*s13 -
                  72*s12^2*s13^2 + 18*s12*s13^3)*s23^2 + (36*s12^3 -
                  54*s12^2*s13 + 18*s12*s13^2)*s23^3) +
              p1q*((27*s12^5 + 99*s12^4*s13 + 45*s12^3*s13^2 - 27*s12^2*
                   s13^3)*s23 + (81*s12^4 + 108*s12^3*s13 - 45*s12^2*s13^2)*
                 s23^2 + (36*s12^3 - 18*s12^2*s13 + 18*s12*s13^2)*s23^3 +
                (-18*s12^2 + 18*s12*s13)*s23^4)) +
            p3q^3*(p2q^3*(-432*s12^5*s13 + 1152*s12^3*s13^3 + 576*s12^2*
                 s13^4 - 144*s12*s13^5 + (-756*s12^4*s13 + 648*s12^3*s13^2 +
                  1368*s12^2*s13^3 - 72*s12*s13^4 - 36*s13^5)*s23 +
                (36*s12^4 - 432*s12^3*s13 + 540*s12^2*s13^2 + 216*s12*s13^3 -
                  72*s13^4)*s23^2 + (36*s12^3 - 144*s12^2*s13 + 144*s12*
                   s13^2 - 36*s13^3)*s23^3) + p1q*p2q^2*(-288*s12^5*s13 -
                288*s12^4*s13^2 + 288*s12^3*s13^3 + 288*s12^2*s13^4 +
                (117*s12^5 + 531*s12^4*s13 + 1620*s12^3*s13^2 + 1656*s12^2*
                   s13^3 + 423*s12*s13^4 - 27*s13^5)*s23 +
                (315*s12^4 + 1242*s12^3*s13 + 1854*s12^2*s13^2 + 1062*s12*
                   s13^3 - 9*s13^4)*s23^2 + (90*s12^3 + 270*s12^2*s13 +
                  702*s12*s13^2 + 90*s13^3)*s23^3 + (-108*s12^2 +
                  36*s12*s13 + 72*s13^2)*s23^4) + p1q^2*p2q*(
                (72*s12^5 + 468*s12^4*s13 + 396*s12^3*s13^2 + 36*s12^2*
                   s13^3 + 36*s12*s13^4)*s23 + (90*s12^4 - 54*s12^3*s13 -
                  630*s12^2*s13^2 - 126*s12*s13^3)*s23^2 + (-234*s12^3 -
                  828*s12^2*s13 - 306*s12*s13^2 - 36*s13^3)*s23^3 +
                (-216*s12^2 - 108*s12*s13 - 72*s13^2)*s23^4 +
                (36*s12 - 36*s13)*s23^5) + p1q^3*((-9*s12^5 + 63*s12^4*s13 +
                  81*s12^3*s13^2 + 9*s12^2*s13^3)*s23 + (-63*s12^4 -
                  270*s12^3*s13 - 225*s12^2*s13^2 + 54*s12*s13^3)*s23^2 +
                (-153*s12^3 - 297*s12^2*s13 + 135*s12*s13^2 - 9*s13^3)*
                 s23^3 + (-45*s12^2 + 126*s12*s13 - 27*s13^2)*s23^4 +
                (54*s12 - 18*s13)*s23^5)) + p3q^4*(p2q^2*(-432*s12^5*s13 -
                576*s12^4*s13^2 + 144*s12^3*s13^3 + 288*s12^2*s13^4 +
                (-756*s12^4*s13 - 360*s12^3*s13^2 + 468*s12^2*s13^3 +
                  72*s12*s13^4)*s23 + (54*s12^4 - 396*s12^3*s13 +
                  63*s12^2*s13^2 + 144*s12*s13^3 - 9*s13^4)*s23^2 +
                (54*s12^3 - 126*s12^2*s13 + 81*s12*s13^2 - 9*s13^3)*s23^3) +
              p1q*p2q*(-144*s12^5*s13 - 288*s12^4*s13^2 - 144*s12^3*s13^3 +
                (81*s12^5 + 279*s12^4*s13 + 297*s12^3*s13^2 + 153*s12^2*
                   s13^3 + 54*s12*s13^4)*s23 + (243*s12^4 + 594*s12^3*s13 +
                  333*s12^2*s13^2 + 198*s12*s13^3)*s23^2 +
                (90*s12^3 + 72*s12^2*s13 + 216*s12*s13^2 + 18*s13^3)*s23^3 +
                (-72*s12^2 + 54*s12*s13 + 18*s13^2)*s23^4) +
              p1q^2*((36*s12^5 + 180*s12^4*s13 + 108*s12^3*s13^2 -
                  36*s12^2*s13^3)*s23 + (45*s12^4 - 153*s12^2*s13^2 +
                  36*s12*s13^3)*s23^2 + (-99*s12^3 - 225*s12^2*s13 +
                  72*s12*s13^2)*s23^3 + (-99*s12^2 + 36*s12*s13 - 9*s13^2)*
                 s23^4 + (9*s12 - 9*s13)*s23^5)) +
            p3q^2*(p2q^4*(-144*s12^5*s13 + 576*s12^4*s13^2 + 1152*s12^3*
                 s13^3 - 432*s12*s13^5 + (-252*s12^4*s13 + 1224*s12^3*s13^2 +
                  936*s12^2*s13^3 - 648*s12*s13^4 - 108*s13^5)*s23 +
                (9*s12^4 - 180*s12^3*s13 + 657*s12^2*s13^2 - 36*s12*s13^3 -
                  162*s13^4)*s23^2 + (9*s12^3 - 81*s12^2*s13 + 126*s12*
                   s13^2 - 54*s13^3)*s23^3) + p1q*p2q^3*(-144*s12^5*s13 +
                288*s12^4*s13^2 + 864*s12^3*s13^3 + 288*s12^2*s13^4 -
                144*s12*s13^5 + (63*s12^5 + 513*s12^4*s13 + 2808*s12^3*
                   s13^2 + 3276*s12^2*s13^3 + 873*s12*s13^4 - 45*s13^5)*s23 +
                (153*s12^4 + 990*s12^3*s13 + 3150*s12^2*s13^2 + 2250*s12*
                   s13^3 + 81*s13^4)*s23^2 + (18*s12^3 + 198*s12^2*s13 +
                  1134*s12*s13^2 + 234*s13^3)*s23^3 + (-72*s12^2 -
                  36*s12*s13 + 108*s13^2)*s23^4) + p1q^2*p2q^2*(
                (72*s12^5 + 540*s12^4*s13 + 1044*s12^3*s13^2 + 972*s12^2*
                   s13^3 + 396*s12*s13^4)*s23 + (45*s12^4 - 324*s12^3*s13 -
                  576*s12^2*s13^2 + 72*s12*s13^3 + 63*s13^4)*s23^2 +
                (-279*s12^3 - 1557*s12^2*s13 - 999*s12*s13^2 - 9*s13^3)*
                 s23^3 + (-198*s12^2 - 540*s12*s13 - 126*s13^2)*s23^4 +
                (54*s12 - 54*s13)*s23^5) + p1q^3*p2q*((-9*s12^5 -
                  63*s12^4*s13 - 189*s12^3*s13^2 - 153*s12^2*s13^3 -
                  18*s12*s13^4)*s23 + (-99*s12^4 - 738*s12^3*s13 -
                  1179*s12^2*s13^2 - 450*s12*s13^3 + 18*s13^4)*s23^2 +
                (-261*s12^3 - 711*s12^2*s13 - 441*s12*s13^2 - 27*s13^3)*
                 s23^3 + (-81*s12^2 + 126*s12*s13 - 63*s13^2)*s23^4 +
                (90*s12 - 18*s13)*s23^5) + p1q^4*((36*s12^4 - 126*s12^3*s13 -
                  180*s12^2*s13^2 - 18*s12*s13^3)*s23^2 + (36*s12^3 -
                  18*s12^2*s13 + 108*s12*s13^2 - 18*s13^3)*s23^3 +
                (63*s12^2 + 198*s12*s13 - 27*s13^2)*s23^4 + (63*s12 - 9*s13)*
                 s23^5)) + p3q*(p2q^5*(288*s12^4*s13^2 + 144*s12^3*s13^3 -
                576*s12^2*s13^4 - 432*s12*s13^5 + (504*s12^3*s13^2 -
                  180*s12^2*s13^3 - 792*s12*s13^4 - 108*s13^5)*s23 +
                (-18*s12^3*s13 + 252*s12^2*s13^2 - 234*s12*s13^3 - 144*s13^4)*
                 s23^2 + (-18*s12^2*s13 + 54*s12*s13^2 - 36*s13^3)*s23^3) +
              p1q*p2q^4*(288*s12^4*s13^2 + 288*s12^3*s13^3 - 288*s12^2*
                 s13^4 - 288*s12*s13^5 + (162*s12^4*s13 + 1791*s12^3*s13^2 +
                  2259*s12^2*s13^3 + 585*s12*s13^4 - 45*s13^5)*s23 +
                (234*s12^3*s13 + 2295*s12^2*s13^2 + 1962*s12*s13^3 +
                  117*s13^4)*s23^2 + (-18*s12^3 + 900*s12*s13^2 + 234*s13^3)*
                 s23^3 + (-18*s12^2 - 54*s12*s13 + 72*s13^2)*s23^4) +
              p1q^5*((-45*s12^3 + 63*s12^2*s13 + 117*s12*s13^2 + 9*s13^3)*
                 s23^3 + (-27*s12^2 + 126*s12*s13 + 9*s13^2)*s23^4 +
                18*s12*s23^5) + p1q^2*p2q^3*((36*s12^5 + 216*s12^4*s13 +
                  1044*s12^3*s13^2 + 1548*s12^2*s13^3 + 720*s12*s13^4 +
                  36*s13^5)*s23 + (36*s12^4 - 486*s12^3*s13 - 18*s12^2*
                   s13^2 + 522*s12*s13^3 + 90*s13^4)*s23^2 +
                (-72*s12^3 - 1350*s12^2*s13 - 900*s12*s13^2 - 18*s13^3)*
                 s23^3 + (-36*s12^2 - 612*s12*s13 - 108*s13^2)*s23^4 +
                (36*s12 - 36*s13)*s23^5) + p1q^4*p2q*((18*s12^4 + 144*s12^3*
                   s13 - 144*s12*s13^3 - 18*s13^4)*s23^2 +
                (18*s12^3 + 360*s12^2*s13 + 126*s12*s13^2)*s23^3 +
                (72*s12^2 + 270*s12*s13 - 18*s13^2)*s23^4 + (72*s12 - 36*s13)*
                 s23^5) + p1q^3*p2q^2*((18*s12^4*s13 + 153*s12^3*s13^2 +
                  189*s12^2*s13^3 + 63*s12*s13^4 + 9*s13^5)*s23 +
                (-72*s12^4 - 432*s12^3*s13 - 675*s12^2*s13^2 - 432*s12*
                   s13^3 - 45*s13^4)*s23^2 + (-99*s12^3 - 423*s12^2*s13 -
                  423*s12*s13^2 - 27*s13^3)*s23^3 + (99*s12^2 + 126*s12*s13 +
                  45*s13^2)*s23^4 + (126*s12 + 18*s13)*s23^5)))*
           Log(s23/(s12 + s13 + s23)))/(p1q*p3q^5*(4*s12^4*s13 +
             4*s12^3*s13^2)*s23^2 + p1q*p2q^5*(4*s12^2*s13^3 + 4*s12*s13^4)*
            s23^2 - 4*p1q^5*p2q*s12*s13*s23^5 + p1q^2*p2q^4*
            ((4*s12^2*s13^3 + 4*s12*s13^4)*s23^2 + (-8*s12^2*s13^2 - 12*s12*
                s13^3)*s23^3) + p1q^3*p2q^3*((-8*s12^2*s13^2 - 12*s12*s13^3)*
              s23^3 + (4*s12^2*s13 + 12*s12*s13^2)*s23^4) +
           p1q^4*p2q^2*((4*s12^2*s13 + 12*s12*s13^2)*s23^4 -
             4*s12*s13*s23^5) + p3q^4*(p1q*p2q*(12*s12^4*s13 + 4*s12^3*
                s13^2 - 8*s12^2*s13^3)*s23^2 + p1q^2*((4*s12^4*s13 +
                 4*s12^3*s13^2)*s23^2 + (-12*s12^3*s13 - 8*s12^2*s13^2)*
                s23^3)) + p3q^3*(p1q*p2q^2*(12*s12^4*s13 - 12*s12^3*s13^2 -
               20*s12^2*s13^3 + 4*s12*s13^4)*s23^2 + p1q^2*p2q*
              ((8*s12^4*s13 - 8*s12^2*s13^3)*s23^2 + (-32*s12^3*s13 -
                 24*s12^2*s13^2 - 8*s12*s13^3)*s23^3) +
             p1q^3*((-12*s12^3*s13 - 8*s12^2*s13^2)*s23^3 + (12*s12^2*s13 +
                 4*s12*s13^2)*s23^4)) + p3q*(p1q*p2q^4*(-8*s12^3*s13^2 + 4*
                s12^2*s13^3 + 12*s12*s13^4)*s23^2 - 4*p1q^5*s12*s13*s23^5 +
             p1q^2*p2q^3*((-8*s12^3*s13^2 + 8*s12*s13^4)*s23^2 +
               (-8*s12^3*s13 - 24*s12^2*s13^2 - 32*s12*s13^3)*s23^3) +
             p1q^3*p2q^2*((-8*s12^3*s13 - 16*s12^2*s13^2 - 20*s12*s13^3)*
                s23^3 + (20*s12^2*s13 + 28*s12*s13^2)*s23^4) +
             p1q^4*p2q*((16*s12^2*s13 + 16*s12*s13^2)*s23^4 - 8*s12*s13*
                s23^5)) + p3q^2*(p1q*p2q^3*(4*s12^4*s13 - 20*s12^3*s13^2 - 12*
                s12^2*s13^3 + 12*s12*s13^4)*s23^2 + p1q^2*p2q^2*
              ((4*s12^4*s13 - 12*s12^3*s13^2 - 12*s12^2*s13^3 + 4*s12*s13^4)*
                s23^2 + (-28*s12^3*s13 - 32*s12^2*s13^2 - 28*s12*s13^3)*
                s23^3) + p1q^3*p2q*((-20*s12^3*s13 - 16*s12^2*s13^2 -
                 8*s12*s13^3)*s23^3 + (28*s12^2*s13 + 20*s12*s13^2)*s23^4) +
             p1q^4*((12*s12^2*s13 + 4*s12*s13^2)*s23^4 - 4*s12*s13*
                s23^5)))) + Log((p1q + p3q)/(p1q + p2q + p3q))*
        (((p2q^5*(-(s12*s13^3) - s13^4 - s13^3*s23) +
            p3q^5*(s12^4 + s12^3*s13 + (2*s12^3 + s12^2*s13)*s23 +
              s12^2*s23^2) + p1q*p2q^4*(-3*s12*s13^3 - 3*s13^4 +
              3*s12*s13^2*s23 + 3*s13^2*s23^2) + p1q^2*p2q^3*
             (4*s12^2*s13^2 + 3*s12*s13^3 - s13^4 + (12*s12*s13^2 + 7*s13^3)*
               s23 + (-3*s12*s13 + 5*s13^2)*s23^2 - 3*s13*s23^3) +
            p1q^3*p2q^2*(4*s12^2*s13^2 + 5*s12*s13^3 + s13^4 +
              (9*s12*s13^2 + 6*s13^3)*s23 + (-7*s12*s13 - 2*s13^2)*s23^2 +
              (s12 - 6*s13)*s23^3 + s23^4) + p1q^4*p2q*(-4*s12^4 -
              10*s12^3*s13 - 8*s12^2*s13^2 - 2*s12*s13^3 + (-12*s12^3 -
                22*s12^2*s13 - 12*s12*s13^2 - 2*s13^3)*s23 + (-12*s12^2 -
                19*s12*s13 - 9*s13^2)*s23^2 + (-2*s12 - 5*s13)*s23^3 +
              2*s23^4) + p1q^5*((2*s12^3 + 4*s12^2*s13 + 2*s12*s13^2)*s23 +
              (6*s12^2 + 7*s12*s13 + s13^2)*s23^2 + (7*s12 + 4*s13)*s23^3 +
              3*s23^4) + p3q^4*(p2q*(2*s12^4 - s12^3*s13 - 3*s12^2*s13^2 +
                (4*s12^3 - 3*s12^2*s13 - 2*s12*s13^2)*s23 +
                (2*s12^2 - 2*s12*s13)*s23^2) + p1q*(-2*s12^4 - 3*s12^3*s13 -
                s12^2*s13^2 + (-5*s12^3 - 4*s12^2*s13)*s23 +
                (-5*s12^2 - 2*s12*s13)*s23^2 - 2*s12*s23^3)) +
            p3q^3*(p2q^2*(s12^4 - 5*s12^3*s13 - 3*s12^2*s13^2 + 3*s12*s13^3 +
                (2*s12^3 - 9*s12^2*s13 + s13^3)*s23 + (s12^2 - 4*s12*s13 +
                  s13^2)*s23^2) + p1q*p2q*(-2*s12^4 - 6*s12^3*s13 -
                2*s12^2*s13^2 + 2*s12*s13^3 + (-6*s12^3 - 14*s12^2*s13 -
                  4*s12*s13^2)*s23 + (-8*s12^2 - 12*s12*s13 - 2*s13^2)*
                 s23^2 + (-4*s12 - 2*s13)*s23^3) + p1q^2*(-7*s12^4 -
                11*s12^3*s13 - 4*s12^2*s13^2 + (-12*s12^3 - 9*s12^2*s13)*
                 s23 + (-6*s12^2 - s12*s13)*s23^2 + s13*s23^3 + s23^4)) +
            p3q^2*(p2q^3*(-3*s12^3*s13 + 3*s12^2*s13^2 + 5*s12*s13^3 -
                s13^4 + (-5*s12^2*s13 + 6*s12*s13^2 + s13^3)*s23 +
                (-2*s12*s13 + 2*s13^2)*s23^2) + p1q*p2q^2*(-7*s12^3*s13 -
                s12^2*s13^2 + 5*s12*s13^3 - s13^4 + (-s12^3 - 20*s12^2*s13 -
                  5*s12*s13^2)*s23 + (-3*s12^2 - 18*s12*s13 - 3*s13^2)*
                 s23^2 + (-2*s12 - 4*s13)*s23^3) + p1q^2*p2q*(-12*s12^4 -
                23*s12^3*s13 - 7*s12^2*s13^2 + 4*s12*s13^3 +
                (-30*s12^3 - 41*s12^2*s13 - 8*s12*s13^2)*s23 +
                (-28*s12^2 - 25*s12*s13 - 3*s13^2)*s23^2 + (-8*s12 - s13)*
                 s23^3 + 2*s23^4) + p1q^3*(-6*s12^4 - 11*s12^3*s13 -
                5*s12^2*s13^2 + (-7*s12^3 - 4*s12^2*s13 + 2*s12*s13^2)*s23 +
                (s12^2 + 5*s12*s13 + s13^2)*s23^2 + (5*s12 + 4*s13)*s23^3 +
                3*s23^4)) + p3q*(p2q^4*(3*s12^2*s13^2 + s12*s13^3 - 2*s13^4 +
                (4*s12*s13^2 - s13^3)*s23 + s13^2*s23^2) + p1q*p2q^3*(
                12*s12^2*s13^2 + 12*s12*s13^3 + (-2*s12^2*s13 + 18*s12*
                   s13^2 + 8*s13^3)*s23 + (-4*s12*s13 + 6*s13^2)*s23^2 -
                2*s13*s23^3) + p1q^2*p2q^2*(11*s12^2*s13^2 + 11*s12*s13^3 +
                (-6*s12^2*s13 + 6*s12*s13^2 + s13^3)*s23 +
                (-s12^2 - 17*s12*s13 - 9*s13^2)*s23^2 - 9*s13*s23^3 +
                s23^4) + p1q^3*p2q*(-12*s12^4 - 26*s12^3*s13 - 14*s12^2*
                 s13^2 + (-32*s12^3 - 46*s12^2*s13 - 14*s12*s13^2 - 2*s13^3)*
                 s23 + (-30*s12^2 - 28*s12*s13 - 8*s13^2)*s23^2 +
                (-6*s12 - 2*s13)*s23^3 + 4*s23^4) + p1q^4*(-2*s12^4 -
                4*s12^3*s13 - 2*s12^2*s13^2 + (4*s12^2*s13 + 4*s12*s13^2)*
                 s23 + (7*s12^2 + 11*s12*s13 + 2*s13^2)*s23^2 +
                (10*s12 + 7*s13)*s23^3 + 5*s23^4)))*
           Log(s12/(s12 + s13 + s23)))/(-4*p1q*p2q^4*s12*s13^4 +
           p1q*p3q^4*(4*s12^4*s13 + 4*s12^3*s13*s23) + p1q^2*p2q^3*
            (4*s12^2*s13^3 - 4*s12*s13^4 + 12*s12*s13^3*s23) +
           p1q^3*p2q^2*(4*s12^2*s13^3 + (-8*s12^2*s13^2 + 12*s12*s13^3)*s23 -
             12*s12*s13^2*s23^2) + p1q^5*(4*s12^2*s13*s23^2 +
             4*s12*s13*s23^3) + p1q^4*p2q*(-8*s12^2*s13^2*s23 +
             (4*s12^2*s13 - 12*s12*s13^2)*s23^2 + 4*s12*s13*s23^3) +
           p3q^3*(p1q*p2q*(4*s12^4*s13 - 12*s12^3*s13^2 + (4*s12^3*s13 -
                 8*s12^2*s13^2)*s23) + p1q^2*(8*s12^4*s13 - 8*s12^2*s13*
                s23^2)) + p3q^2*(p1q*p2q^2*(-12*s12^3*s13^2 + 12*s12^2*
                s13^3 + (-8*s12^2*s13^2 + 4*s12*s13^3)*s23) +
             p1q^2*p2q*(4*s12^4*s13 - 20*s12^3*s13^2 + (-4*s12^3*s13 -
                 16*s12^2*s13^2)*s23 + (-8*s12^2*s13 - 8*s12*s13^2)*s23^2) +
             p1q^3*(4*s12^4*s13 - 12*s12^3*s13*s23 - 12*s12^2*s13*s23^2 + 4*
                s12*s13*s23^3)) + p3q*(p1q*p2q^3*(12*s12^2*s13^3 - 4*s12*
                s13^4 + 4*s12*s13^3*s23) + p1q^2*p2q^2*(-8*s12^3*s13^2 + 16*
                s12^2*s13^3 + (-8*s12^2*s13^2 + 16*s12*s13^3)*s23 - 8*s12*
                s13^2*s23^2) + p1q^3*p2q*(-8*s12^3*s13^2 + (-8*s12^3*s13 -
                 16*s12^2*s13^2)*s23 + (-4*s12^2*s13 - 20*s12*s13^2)*s23^2 +
               4*s12*s13*s23^3) + p1q^4*(-8*s12^3*s13*s23 + 8*s12*s13*
                s23^3))) + ((p2q^6*(36*s12^2*s13^4 + 36*s12*s13^5 +
              (9*s12^2*s13^3 + 45*s12*s13^4)*s23 + (10*s12*s13^3 + s13^4)*s23^
                2 + s13^3*s23^3) + p3q^6*((9*s12^4*s13 + 9*s12^3*s13^2)*s23 +
              (-s12^4 + 8*s12^3*s13)*s23^2 + (-2*s12^3 - s12^2*s13)*s23^3 -
              s12^2*s23^4) + p1q*p2q^5*(-36*s12^3*s13^3 + 36*s12*s13^5 +
              (-117*s12^2*s13^3 - 45*s12*s13^4)*s23 + (-27*s12^2*s13^2 -
                109*s12*s13^3 - s13^4)*s23^2 + (-30*s12*s13^2 - 4*s13^3)*s23^
                3 - 3*s13^2*s23^4) + p1q^6*((9*s12^3 + 18*s12^2*s13 +
                9*s12*s13^2)*s23^3 + (18*s12^2 + 18*s12*s13)*s23^4 +
              9*s12*s23^5) + p1q^2*p2q^4*(-36*s12^3*s13^3 - 36*s12^2*s13^4 +
              (9*s12^3*s13^2 - 153*s12^2*s13^3 - 126*s12*s13^4)*s23 +
              (38*s12^2*s13^2 - 98*s12*s13^3 - s13^4)*s23^2 +
              (27*s12^2*s13 + 56*s12*s13^2 - s13^3)*s23^3 + (30*s12*s13 +
                3*s13^2)*s23^4 + 3*s13*s23^5) + p1q^4*p2q^2*
             ((9*s12^3*s13^2 + 18*s12^2*s13^3 + 9*s12*s13^4)*s23 +
              (-18*s12^4 - 108*s12^3*s13 - 90*s12^2*s13^2)*s23^2 +
              (-47*s12^3 - 197*s12^2*s13 - 89*s12*s13^2 - 2*s13^3)*s23^3 +
              (-58*s12^2 - 110*s12*s13 - 5*s13^2)*s23^4 + (-31*s12 - 5*s13)*
               s23^5 - 2*s23^6) + p1q^3*p2q^3*((54*s12^4*s13 + 162*s12^3*
                 s13^2 + 117*s12^2*s13^3 + 9*s12*s13^4)*s23 +
              (110*s12^3*s13 + 321*s12^2*s13^2 + 167*s12*s13^3 + s13^4)*s23^
                2 + (101*s12^2*s13 + 205*s12*s13^2 + 4*s13^3)*s23^3 +
              (-9*s12^2 + 39*s12*s13 + 6*s13^2)*s23^4 + (-10*s12 + 2*s13)*s23^
                5 - s23^6) + p1q^5*p2q*((-18*s12^3*s13 - 36*s12^2*s13^2 -
                18*s12*s13^3)*s23^2 + (18*s12^3 - 9*s12^2*s13 - 27*s12*s13^2)*
               s23^3 + (29*s12^2 + 3*s12*s13 + s13^2)*s23^4 +
              (12*s12 + 2*s13)*s23^5 + s23^6) +
            p3q^5*(p2q*(-36*s12^5*s13 - 36*s12^4*s13^2 + (-36*s12^5 -
                  108*s12^4*s13 - 54*s12^3*s13^2 - 18*s12^2*s13^3)*s23 +
                (-75*s12^4 - 72*s12^3*s13 - 15*s12^2*s13^2)*s23^2 +
                (-42*s12^3 + 2*s12^2*s13 + 2*s12*s13^2)*s23^3 +
                (-3*s12^2 + 2*s12*s13)*s23^4) + p1q*((63*s12^5 + 117*s12^4*
                   s13 + 54*s12^3*s13^2)*s23 + (119*s12^4 + 93*s12^3*s13 -
                  17*s12^2*s13^2)*s23^2 + (59*s12^3 - 14*s12^2*s13)*s23^3 +
                (5*s12^2 + 2*s12*s13)*s23^4 + 2*s12*s23^5)) +
            p3q^4*(p2q^2*(-72*s12^5*s13 + 36*s12^4*s13^2 + 108*s12^3*s13^3 +
                (-36*s12^5 - 90*s12^4*s13 + 198*s12^3*s13^2 + 81*s12^2*
                   s13^3 + 9*s12*s13^4)*s23 + (-75*s12^4 + 60*s12^3*s13 +
                  150*s12^2*s13^2 + 6*s12*s13^3)*s23^2 + (-42*s12^3 +
                  84*s12^2*s13 + 2*s12*s13^2 - s13^3)*s23^3 +
                (-3*s12^2 + 6*s12*s13 - s13^2)*s23^4) + p1q*p2q*(
                -72*s12^5*s13 - 72*s12^4*s13^2 + (18*s12^5 - 189*s12^4*s13 -
                  243*s12^3*s13^2 - 108*s12^2*s13^3)*s23 +
                (85*s12^4 - 103*s12^3*s13 - 163*s12^2*s13^2 - 20*s12*s13^3)*
                 s23^2 + (146*s12^3 + 46*s12^2*s13 - 18*s12*s13^2)*s23^3 +
                (85*s12^2 + 10*s12*s13 + 2*s13^2)*s23^4 + (6*s12 + 2*s13)*
                 s23^5) + p1q^2*((117*s12^5 + 207*s12^4*s13 + 90*s12^3*s13^2)*
                 s23 + (95*s12^4 - 38*s12^3*s13 - 106*s12^2*s13^2)*s23^2 +
                (-131*s12^3 - 208*s12^2*s13 + 7*s12*s13^2)*s23^3 +
                (-112*s12^2 + 4*s12*s13)*s23^4 + (-4*s12 - s13)*s23^5 -
                s23^6)) + p3q^3*(p2q^3*(-36*s12^5*s13 + 180*s12^4*s13^2 +
                108*s12^3*s13^3 - 108*s12^2*s13^4 + (36*s12^4*s13 +
                  360*s12^3*s13^2 - 72*s12^2*s13^3 - 36*s12*s13^4)*s23 +
                (-s12^4 + 152*s12^3*s13 + 108*s12^2*s13^2 - 80*s12*s13^3 +
                  s13^4)*s23^2 + (-2*s12^3 + 86*s12^2*s13 - 42*s12*s13^2 -
                  2*s13^3)*s23^3 + (-s12^2 + 6*s12*s13 - 3*s13^2)*s23^4) +
              p1q*p2q^2*(-108*s12^5*s13 + 72*s12^4*s13^2 + 180*s12^3*s13^3 +
                (-9*s12^5 - 117*s12^4*s13 + 405*s12^3*s13^2 + 279*s12^2*
                   s13^3 + 54*s12*s13^4)*s23 + (29*s12^4 + 275*s12^3*s13 +
                  588*s12^2*s13^2 + 181*s12*s13^3 + s13^4)*s23^2 +
                (115*s12^3 + 396*s12^2*s13 + 211*s12*s13^2 + 4*s13^3)*s23^3 +
                (83*s12^2 + 94*s12*s13 + 9*s13^2)*s23^4 + (6*s12 + 6*s13)*
                 s23^5) + p1q^2*p2q*(-36*s12^5*s13 - 36*s12^4*s13^2 +
                (90*s12^5 - 162*s12^3*s13^2 - 108*s12^2*s13^3)*s23 +
                (155*s12^4 - 58*s12^3*s13 - 213*s12^2*s13^2 - 36*s12*s13^3)*
                 s23^2 + (86*s12^3 - 118*s12^2*s13 - 104*s12*s13^2 + 2*s13^3)*
                 s23^3 + (-16*s12^2 - 104*s12*s13 + 5*s13^2)*s23^4 -
                40*s12*s23^5 - 3*s23^6) + p1q^3*((63*s12^5 + 117*s12^4*s13 +
                  54*s12^3*s13^2)*s23 + (-115*s12^4 - 303*s12^3*s13 -
                  179*s12^2*s13^2)*s23^2 + (-322*s12^3 - 273*s12^2*s13 +
                  50*s12*s13^2)*s23^3 + (-94*s12^2 + 101*s12*s13 + s13^2)*
                 s23^4 + (51*s12 + 2*s13)*s23^5 + s23^6)) +
            p3q*(p2q^5*(-108*s12^3*s13^3 - 36*s12^2*s13^4 + 72*s12*s13^5 +
                (-18*s12^3*s13^2 - 126*s12^2*s13^3 + 72*s12*s13^4)*s23 +
                (-21*s12^2*s13^2 + 3*s13^4)*s23^2 + (-4*s12*s13^2 + 2*s13^3)*
                 s23^3 - s13^2*s23^4) + p1q*p2q^4*(72*s12^4*s13^2 -
                108*s12^3*s13^3 - 144*s12^2*s13^4 + 36*s12*s13^5 +
                (81*s12^3*s13^2 - 423*s12^2*s13^3 - 216*s12*s13^4)*s23 +
                (-67*s12^2*s13^2 - 333*s12*s13^3 - 5*s13^4)*s23^2 +
                (2*s12^2*s13 - 81*s12*s13^2 - 12*s13^3)*s23^3 +
                (4*s12*s13 - 5*s13^2)*s23^4 + 2*s13*s23^5) + p1q^3*p2q^2*(
                (18*s12^5 + 90*s12^4*s13 + 207*s12^3*s13^2 + 189*s12^2*
                   s13^3 + 54*s12*s13^4)*s23 + (2*s12^4 - 30*s12^3*s13 +
                  217*s12^2*s13^2 + 223*s12*s13^3 + s13^4)*s23^2 +
                (-65*s12^3 - 267*s12^2*s13 + 39*s12*s13^2 + 4*s13^3)*s23^3 +
                (-125*s12^2 - 209*s12*s13 + 2*s13^2)*s23^4 +
                (-81*s12 - 6*s13)*s23^5 - 5*s23^6) + p1q^2*p2q^3*(
                72*s12^4*s13^2 + 36*s12^3*s13^3 - 36*s12^2*s13^4 +
                (90*s12^4*s13 + 396*s12^3*s13^2 + 90*s12^2*s13^3 -
                  108*s12*s13^4)*s23 + (270*s12^3*s13 + 725*s12^2*s13^2 +
                  200*s12*s13^3 - 3*s13^4)*s23^2 + (18*s12^3 + 346*s12^2*
                   s13 + 464*s12*s13^2 + 2*s13^3)*s23^3 + (19*s12^2 +
                  158*s12*s13 + 14*s13^2)*s23^4 + 8*s13*s23^5 - s23^6) +
              p1q^4*p2q*((-18*s12^4*s13 - 36*s12^3*s13^2 - 18*s12^2*s13^3)*
                 s23 + (-54*s12^4 - 288*s12^3*s13 - 342*s12^2*s13^2 -
                  108*s12*s13^3)*s23^2 + (-60*s12^3 - 374*s12^2*s13 -
                  262*s12*s13^2 - 2*s13^3)*s23^3 + (-5*s12^2 - 152*s12*s13 -
                  3*s13^2)*s23^4 + 2*s12*s23^5 + s23^6) +
              p1q^5*((-18*s12^4 - 36*s12^3*s13 - 18*s12^2*s13^2)*s23^2 +
                (27*s12^3 + 81*s12^2*s13 + 54*s12*s13^2)*s23^3 +
                (101*s12^2 + 111*s12*s13 + s13^2)*s23^4 + (57*s12 + 2*s13)*
                 s23^5 + s23^6)) + p3q^2*(p2q^4*(108*s12^4*s13^2 -
                108*s12^3*s13^3 - 180*s12^2*s13^4 + 36*s12*s13^5 +
                (9*s12^4*s13 + 81*s12^3*s13^2 - 306*s12^2*s13^3 -
                  18*s12*s13^4)*s23 + (12*s12^3*s13 - 78*s12^2*s13^2 -
                  96*s12*s13^3 + 3*s13^4)*s23^2 + (5*s12^2*s13 -
                  46*s12*s13^2)*s23^3 + (2*s12*s13 - 3*s13^2)*s23^4) +
              p1q*p2q^3*(-36*s12^5*s13 + 216*s12^4*s13^2 + 108*s12^3*s13^3 -
                144*s12^2*s13^4 + (45*s12^4*s13 + 567*s12^3*s13^2 -
                  63*s12^2*s13^3 - 153*s12*s13^4)*s23 + (-9*s12^4 +
                  255*s12^3*s13 + 478*s12^2*s13^2 - 95*s12*s13^3 - 3*s13^4)*
                 s23^2 + (-8*s12^3 + 266*s12^2*s13 + 142*s12*s13^2 - 4*s13^3)*
                 s23^3 + (3*s12^2 + 90*s12*s13 + 5*s13^2)*s23^4 +
                (2*s12 + 6*s13)*s23^5) + p1q^3*p2q*((36*s12^5 + 45*s12^4*
                   s13 - 27*s12^3*s13^2 - 36*s12^2*s13^3)*s23 +
                (-59*s12^4 - 353*s12^3*s13 - 409*s12^2*s13^2 - 106*s12*s13^3)*
                 s23^2 + (-180*s12^3 - 587*s12^2*s13 - 341*s12*s13^2)*s23^3 +
                (-138*s12^2 - 291*s12*s13 - 3*s13^2)*s23^4 +
                (-56*s12 - 6*s13)*s23^5 - 3*s23^6) + p1q^2*p2q^2*(
                -36*s12^5*s13 + 36*s12^4*s13^2 + 72*s12^3*s13^3 +
                (45*s12^5 + 99*s12^4*s13 + 351*s12^3*s13^2 + 207*s12^2*
                   s13^3 + 18*s12*s13^4)*s23 + (132*s12^4 + 394*s12^3*s13 +
                  652*s12^2*s13^2 + 262*s12*s13^3 - 2*s13^4)*s23^2 +
                (163*s12^3 + 337*s12^2*s13 + 297*s12*s13^2 + 5*s13^3)*s23^3 +
                (43*s12^2 + 20*s12*s13 + 16*s13^2)*s23^4 + (-36*s12 + 6*s13)*
                 s23^5 - 3*s23^6) + p1q^4*((9*s12^5 + 18*s12^4*s13 +
                  9*s12^3*s13^2)*s23 + (-108*s12^4 - 216*s12^3*s13 -
                  108*s12^2*s13^2)*s23^2 + (-112*s12^3 - 15*s12^2*s13 +
                  88*s12*s13^2)*s23^3 + (107*s12^2 + 192*s12*s13 + 2*s13^2)*
                 s23^4 + (105*s12 + 5*s13)*s23^5 + 3*s23^6)))*
           Log(s13/(s12 + s13 + s23)))/(-4*p1q*p2q^5*s12*s13^4*s23^2 +
           p1q*p3q^5*(4*s12^4*s13*s23^2 + 4*s12^3*s13*s23^3) +
           p1q^2*p2q^4*((4*s12^2*s13^3 - 4*s12*s13^4)*s23^2 +
             12*s12*s13^3*s23^3) + p1q^3*p2q^3*(4*s12^2*s13^3*s23^2 +
             (-8*s12^2*s13^2 + 12*s12*s13^3)*s23^3 - 12*s12*s13^2*s23^4) +
           p1q^5*p2q*(4*s12^2*s13*s23^4 + 4*s12*s13*s23^5) +
           p1q^4*p2q^2*(-8*s12^2*s13^2*s23^3 + (4*s12^2*s13 - 12*s12*s13^2)*
              s23^4 + 4*s12*s13*s23^5) + p3q^4*
            (p1q*p2q*((8*s12^4*s13 - 12*s12^3*s13^2)*s23^2 + (8*s12^3*s13 -
                 8*s12^2*s13^2)*s23^3) + p1q^2*(8*s12^4*s13*s23^2 - 8*s12^2*
                s13*s23^4)) + p3q^3*(p1q*p2q^2*((4*s12^4*s13 - 24*s12^3*
                  s13^2 + 12*s12^2*s13^3)*s23^2 + (4*s12^3*s13 -
                 16*s12^2*s13^2 + 4*s12*s13^3)*s23^3) + p1q^2*p2q*
              ((12*s12^4*s13 - 20*s12^3*s13^2)*s23^2 + (-4*s12^3*s13 -
                 16*s12^2*s13^2)*s23^3 + (-16*s12^2*s13 - 8*s12*s13^2)*
                s23^4) + p1q^3*(4*s12^4*s13*s23^2 - 12*s12^3*s13*s23^3 - 12*
                s12^2*s13*s23^4 + 4*s12*s13*s23^5)) +
           p3q^2*(p1q*p2q^3*((-12*s12^3*s13^2 + 24*s12^2*s13^3 - 4*s12*s13^4)*
                s23^2 + (-8*s12^2*s13^2 + 8*s12*s13^3)*s23^3) +
             p1q^2*p2q^2*((4*s12^4*s13 - 28*s12^3*s13^2 + 16*s12^2*s13^3)*
                s23^2 + (-4*s12^3*s13 - 24*s12^2*s13^2 + 16*s12*s13^3)*
                s23^3 + (-8*s12^2*s13 - 16*s12*s13^2)*s23^4) +
             p1q^4*(-8*s12^3*s13*s23^3 + 8*s12*s13*s23^5) +
             p1q^3*p2q*((4*s12^4*s13 - 8*s12^3*s13^2)*s23^2 +
               (-20*s12^3*s13 - 16*s12^2*s13^2)*s23^3 + (-16*s12^2*s13 -
                 20*s12*s13^2)*s23^4 + 8*s12*s13*s23^5)) +
           p3q*(p1q*p2q^4*((12*s12^2*s13^3 - 8*s12*s13^4)*s23^2 + 4*s12*s13^3*
                s23^3) + p1q^2*p2q^3*((-8*s12^3*s13^2 + 20*s12^2*s13^3 -
                 4*s12*s13^4)*s23^2 + (-8*s12^2*s13^2 + 28*s12*s13^3)*s23^3 -
               8*s12*s13^2*s23^4) + p1q^5*(4*s12^2*s13*s23^4 + 4*s12*s13*
                s23^5) + p1q^3*p2q^2*((-8*s12^3*s13^2 + 4*s12^2*s13^3)*
                s23^2 + (-8*s12^3*s13 - 24*s12^2*s13^2 + 12*s12*s13^3)*
                s23^3 + (-4*s12^2*s13 - 32*s12*s13^2)*s23^4 + 4*s12*s13*
                s23^5) + p1q^4*p2q*((-8*s12^3*s13 - 8*s12^2*s13^2)*s23^3 +
               (4*s12^2*s13 - 12*s12*s13^2)*s23^4 + 12*s12*s13*s23^5))) +
         ((p3q^6*(-9*s12^3*s13 - 9*s12^2*s13^2 - 9*s12^2*s13*s23) +
            p2q^6*(-9*s12*s13^3 - 9*s13^4 - 9*s13^3*s23) +
            p1q*p2q^5*(-27*s12*s13^3 - 27*s13^4 + 27*s12*s13^2*s23 +
              27*s13^2*s23^2) + p1q^2*p2q^4*(45*s12^2*s13^2 + 45*s12*s13^3 +
              (126*s12*s13^2 + 81*s13^3)*s23 + (-27*s12*s13 + 54*s13^2)*s23^
                2 - 27*s13*s23^3) + p1q^6*((-9*s12^2 - 18*s12*s13 - 9*s13^2)*
               s23^2 + (-18*s12 - 18*s13)*s23^3 - 9*s23^4) +
            p1q^3*p2q^3*(-36*s12^3*s13 - 54*s12^2*s13^2 - 27*s12*s13^3 -
              9*s13^4 + (-90*s12^2*s13 - 63*s12*s13^2)*s23 + (-135*s12*s13 -
                72*s13^2)*s23^2 + (9*s12 - 72*s13)*s23^3 + 9*s23^4) +
            p1q^5*p2q*((18*s12^2*s13 + 36*s12*s13^2 + 18*s13^3)*s23 +
              (27*s12*s13 + 27*s13^2)*s23^2 + (9*s12 + 18*s13)*s23^3 +
              9*s23^4) + p1q^4*p2q^2*(-9*s12^2*s13^2 - 18*s12*s13^3 -
              9*s13^4 + (18*s12^2*s13 + 18*s12*s13^2)*s23 + (9*s12^2 +
                9*s12*s13 - 9*s13^2)*s23^2 + (36*s12 + 9*s13)*s23^3 +
              27*s23^4) + p3q^5*(p2q*(36*s12^4 + 36*s12^3*s13 +
                18*s12^2*s13^2 + 18*s12*s13^3 + (72*s12^3 + 36*s12^2*s13 +
                  18*s12*s13^2)*s23 + 36*s12^2*s23^2) + p1q*(-27*s12^4 -
                45*s12^3*s13 - 18*s12^2*s13^2 + (-9*s12^3 + 54*s12^2*s13 +
                  54*s12*s13^2)*s23 + (54*s12^2 + 90*s12*s13)*s23^2 +
                36*s12*s23^3)) + p3q^4*(p2q^2*(36*s12^4 - 54*s12^3*s13 -
                90*s12^2*s13^2 - 9*s12*s13^3 - 9*s13^4 + (72*s12^3 -
                  126*s12^2*s13 - 72*s12*s13^2 - 9*s13^3)*s23 +
                (36*s12^2 - 72*s12*s13)*s23^2) + p1q*p2q*(54*s12^4 +
                117*s12^3*s13 + 99*s12^2*s13^2 + 36*s12*s13^3 +
                (135*s12^3 + 144*s12^2*s13 + 18*s12*s13^2 - 18*s13^3)*s23 +
                (81*s12^2 - 36*s12*s13 - 54*s13^2)*s23^2 - 36*s13*s23^3) +
              p1q^2*(-45*s12^4 - 63*s12^3*s13 - 18*s12^2*s13^2 +
                (72*s12^3 + 243*s12^2*s13 + 144*s12*s13^2)*s23 +
                (207*s12^2 + 189*s12*s13 - 45*s13^2)*s23^2 +
                (54*s12 - 81*s13)*s23^3 - 36*s23^4)) +
            p3q^3*(p2q^3*(-108*s12^3*s13 - 36*s12^2*s13^2 + 72*s12*s13^3 +
                (-180*s12^2*s13 + 36*s12*s13^2 + 36*s13^3)*s23 +
                (-72*s12*s13 + 36*s13^2)*s23^2) + p1q*p2q^2*(81*s12^4 -
                27*s12^3*s13 - 153*s12^2*s13^2 - 63*s12*s13^3 - 18*s13^4 +
                (189*s12^3 - 234*s12^2*s13 - 297*s12*s13^2 - 36*s13^3)*s23 +
                (108*s12^2 - 306*s12*s13 - 90*s13^2)*s23^2 - 72*s13*s23^3) +
              p1q^3*(-27*s12^4 - 45*s12^3*s13 - 18*s12^2*s13^2 +
                (117*s12^3 + 270*s12^2*s13 + 144*s12*s13^2)*s23 +
                (153*s12^2 + 27*s12*s13 - 126*s13^2)*s23^2 +
                (-99*s12 - 234*s13)*s23^3 - 108*s23^4) + p1q^2*p2q*(
                36*s12^4 + 144*s12^3*s13 + 180*s12^2*s13^2 + 72*s12*s13^3 +
                (198*s12^3 + 432*s12^2*s13 + 306*s12*s13^2 + 72*s13^3)*s23 +
                (234*s12^2 + 288*s12*s13 + 126*s13^2)*s23^2 +
                (108*s12 + 90*s13)*s23^3 + 36*s23^4)) +
            p3q^2*(p2q^4*(-9*s12^3*s13 + 99*s12^2*s13^2 + 90*s12*s13^3 -
                18*s13^4 + (-9*s12^2*s13 + 144*s12*s13^2 + 18*s13^3)*s23 +
                36*s13^2*s23^2) + p1q*p2q^3*(-189*s12^3*s13 - 135*s12^2*
                 s13^2 + 63*s12*s13^3 + 9*s13^4 + (9*s12^3 - 432*s12^2*s13 -
                  117*s12*s13^2 + 90*s13^3)*s23 + (9*s12^2 - 324*s12*s13 +
                  9*s13^2)*s23^2 - 72*s13*s23^3) + p1q^4*(-9*s12^4 -
                18*s12^3*s13 - 9*s12^2*s13^2 + (54*s12^3 + 126*s12^2*s13 +
                  72*s12*s13^2)*s23 + (-117*s12*s13 - 126*s13^2)*s23^2 +
                (-162*s12 - 225*s13)*s23^3 - 99*s23^4) + p1q^2*p2q^2*(
                81*s12^4 + 45*s12^3*s13 - 81*s12^2*s13^2 - 99*s12*s13^3 -
                54*s13^4 + (234*s12^3 - 63*s12^2*s13 - 288*s12*s13^2 -
                  117*s13^3)*s23 + (189*s12^2 - 270*s12*s13 - 189*s13^2)*
                 s23^2 + (72*s12 - 90*s13)*s23^3 + 36*s23^4) +
              p1q^3*p2q*(18*s12^4 + 99*s12^3*s13 + 153*s12^2*s13^2 +
                72*s12*s13^3 + (153*s12^3 + 540*s12^2*s13 + 576*s12*s13^2 +
                  180*s13^3)*s23 + (207*s12^2 + 549*s12*s13 + 333*s13^2)*
                 s23^2 + (135*s12 + 216*s13)*s23^3 + 63*s23^4)) +
            p3q*(p2q^5*(18*s12^2*s13^2 - 18*s12*s13^3 - 36*s13^4 +
                (18*s12*s13^2 - 36*s13^3)*s23) + p1q*p2q^4*(135*s12^2*s13^2 +
                135*s12*s13^3 + (279*s12*s13^2 + 144*s13^3)*s23 +
                144*s13^2*s23^2) + p1q^2*p2q^3*(-126*s12^3*s13 -
                126*s12^2*s13^2 - 18*s12*s13^3 - 18*s13^4 +
                (-360*s12^2*s13 - 216*s12*s13^2)*s23 + (-18*s12^2 -
                  432*s12*s13 - 162*s13^2)*s23^2 + (-18*s12 - 180*s13)*
                 s23^3) + p1q^5*((18*s12^3 + 36*s12^2*s13 + 18*s12*s13^2)*
                 s23 + (-9*s12^2 - 63*s12*s13 - 54*s13^2)*s23^2 +
                (-63*s12 - 90*s13)*s23^3 - 36*s23^4) + p1q^4*p2q*(
                18*s12^3*s13 + 36*s12^2*s13^2 + 18*s12*s13^3 +
                (18*s12^3 + 180*s12^2*s13 + 270*s12*s13^2 + 108*s13^3)*s23 +
                (18*s12^2 + 198*s12*s13 + 162*s13^2)*s23^2 +
                (36*s12 + 90*s13)*s23^3 + 36*s23^4) + p1q^3*p2q^2*(36*s12^4 +
                36*s12^3*s13 - 45*s12^2*s13^2 - 99*s12*s13^3 - 54*s13^4 +
                (126*s12^3 + 126*s12^2*s13 - 9*s12*s13^2 - 54*s13^3)*s23 +
                (153*s12^2 + 45*s12*s13 - 54*s13^2)*s23^2 +
                (135*s12 + 18*s13)*s23^3 + 72*s23^4)))*
           Log(s23/(s12 + s13 + s23)))/(-4*p1q*p2q^5*s13^4*s23 +
           p1q*p3q^5*(4*s12^3*s13*s23 + 4*s12^2*s13*s23^2) +
           p1q^2*p2q^4*((4*s12*s13^3 - 4*s13^4)*s23 + 12*s13^3*s23^2) +
           p1q^3*p2q^3*(4*s12*s13^3*s23 + (-8*s12*s13^2 + 12*s13^3)*s23^2 -
             12*s13^2*s23^3) + p1q^5*p2q*(4*s12*s13*s23^3 + 4*s13*s23^4) +
           p1q^4*p2q^2*(-8*s12*s13^2*s23^2 + (4*s12*s13 - 12*s13^2)*s23^3 +
             4*s13*s23^4) + p3q^4*(p1q*p2q*((8*s12^3*s13 - 12*s12^2*s13^2)*
                s23 + (8*s12^2*s13 - 8*s12*s13^2)*s23^2) +
             p1q^2*(8*s12^3*s13*s23 - 8*s12*s13*s23^3)) +
           p3q^3*(p1q*p2q^2*((4*s12^3*s13 - 24*s12^2*s13^2 + 12*s12*s13^3)*
                s23 + (4*s12^2*s13 - 16*s12*s13^2 + 4*s13^3)*s23^2) +
             p1q^2*p2q*((12*s12^3*s13 - 20*s12^2*s13^2)*s23 + (-4*s12^2*s13 -
                 16*s12*s13^2)*s23^2 + (-16*s12*s13 - 8*s13^2)*s23^3) +
             p1q^3*(4*s12^3*s13*s23 - 12*s12^2*s13*s23^2 - 12*s12*s13*s23^3 +
               4*s13*s23^4)) + p3q^2*(p1q*p2q^3*((-12*s12^2*s13^2 +
                 24*s12*s13^3 - 4*s13^4)*s23 + (-8*s12*s13^2 + 8*s13^3)*
                s23^2) + p1q^2*p2q^2*((4*s12^3*s13 - 28*s12^2*s13^2 +
                 16*s12*s13^3)*s23 + (-4*s12^2*s13 - 24*s12*s13^2 + 16*s13^3)*
                s23^2 + (-8*s12*s13 - 16*s13^2)*s23^3) +
             p1q^4*(-8*s12^2*s13*s23^2 + 8*s13*s23^4) + p1q^3*p2q*
              ((4*s12^3*s13 - 8*s12^2*s13^2)*s23 + (-20*s12^2*s13 -
                 16*s12*s13^2)*s23^2 + (-16*s12*s13 - 20*s13^2)*s23^3 + 8*s13*
                s23^4)) + p3q*(p1q*p2q^4*((12*s12*s13^3 - 8*s13^4)*s23 + 4*
                s13^3*s23^2) + p1q^2*p2q^3*((-8*s12^2*s13^2 + 20*s12*s13^3 -
                 4*s13^4)*s23 + (-8*s12*s13^2 + 28*s13^3)*s23^2 - 8*s13^2*
                s23^3) + p1q^5*(4*s12*s13*s23^3 + 4*s13*s23^4) +
             p1q^3*p2q^2*((-8*s12^2*s13^2 + 4*s12*s13^3)*s23 +
               (-8*s12^2*s13 - 24*s12*s13^2 + 12*s13^3)*s23^2 + (-4*s12*s13 -
                 32*s13^2)*s23^3 + 4*s13*s23^4) + p1q^4*p2q*
              ((-8*s12^2*s13 - 8*s12*s13^2)*s23^2 + (4*s12*s13 - 12*s13^2)*
                s23^3 + 12*s13*s23^4))) +
         ((p2q^5*(18*s12^2*s13^3 + 18*s12*s13^4 + 18*s12*s13^3*s23) +
            p1q*p2q^4*(18*s12^2*s13^3 + 18*s12*s13^4 + (-36*s12^2*s13^2 -
                18*s12*s13^3)*s23 + (-38*s12*s13^2 - 2*s13^3)*s23^2 -
              2*s13^2*s23^3) + p1q^2*p2q^3*((-9*s12^3*s13 - 54*s12^2*s13^2 -
                45*s12*s13^3)*s23 + (10*s12^2*s13 - 27*s12*s13^2 - s13^3)*s23^
                2 + (21*s12*s13 + s13^2)*s23^3 + 2*s13*s23^4) +
            p1q^3*p2q^2*((11*s12^3 + 50*s12^2*s13 + 40*s12*s13^2 + s13^3)*s23^
                2 + (14*s12^2 + 45*s12*s13 + 4*s13^2)*s23^3 +
              (3*s12 + 3*s13)*s23^4) + p1q^4*p2q*((-10*s12^2 - 11*s12*s13 -
                s13^2)*s23^3 + (-12*s12 - 3*s13)*s23^4 - 2*s23^5) +
            p3q^4*(p2q*(18*s12^4*s13 + 18*s12^3*s13^2 + 18*s12^3*s13*s23) +
              p1q*((-18*s12^4 - 36*s12^3*s13 - 18*s12^2*s13^2)*s23 +
                (-36*s12^3 - 36*s12^2*s13)*s23^2 - 18*s12^2*s23^3)) +
            p3q^3*(p2q^2*(36*s12^4*s13 - 36*s12^2*s13^3 + (36*s12^3*s13 -
                  36*s12^2*s13^2)*s23) + p1q*p2q*(18*s12^4*s13 +
                18*s12^3*s13^2 + (-36*s12^4 - 36*s12^3*s13 + 18*s12*s13^3)*
                 s23 + (-72*s12^3 - 34*s12^2*s13 + 38*s12*s13^2)*s23^2 +
                (-36*s12^2 + 20*s12*s13)*s23^3) + p1q^2*((-18*s12^4 -
                  36*s12^3*s13 - 18*s12^2*s13^2)*s23 + (-8*s12^3 +
                  11*s12^2*s13 + 19*s12*s13^2)*s23^2 + (30*s12^2 +
                  39*s12*s13)*s23^3 + 20*s12*s23^4)) +
            p3q*(p2q^4*(-36*s12^3*s13^2 + 36*s12*s13^4 + (-36*s12^2*s13^2 +
                  36*s12*s13^3)*s23) + p1q*p2q^3*(-36*s12^3*s13^2 -
                18*s12^2*s13^3 + 18*s12*s13^4 + (-108*s12^2*s13^2 -
                  54*s12*s13^3)*s23 + (2*s12^2*s13 - 74*s12*s13^2 - 4*s13^3)*
                 s23^2 + (2*s12*s13 - 4*s13^2)*s23^3) + p1q^2*p2q^2*(
                (-27*s12^4 - 63*s12^3*s13 - 81*s12^2*s13^2 - 45*s12*s13^3)*
                 s23 + (-42*s12^3 - s12^2*s13 + 3*s12*s13^2 - 2*s13^3)*
                 s23^2 + (-11*s12^2 + 56*s12*s13)*s23^3 + (4*s12 + 2*s13)*
                 s23^4) + p1q^3*p2q*((21*s12^3 + 61*s12^2*s13 + 41*s12*
                   s13^2 + s13^3)*s23^2 + (16*s12^2 + 37*s12*s13 + 3*s13^2)*
                 s23^3 - 7*s12*s23^4 - 2*s23^5) + p1q^4*((-10*s12^2 -
                  11*s12*s13 - s13^2)*s23^3 + (-12*s12 - 3*s13)*s23^4 -
                2*s23^5)) + p3q^2*(p2q^3*(18*s12^4*s13 - 54*s12^3*s13^2 -
                54*s12^2*s13^3 + 18*s12*s13^4 + (18*s12^3*s13 - 72*s12^2*
                   s13^2 + 18*s12*s13^3)*s23) + p1q*p2q^2*(18*s12^4*s13 -
                18*s12^3*s13^2 - 36*s12^2*s13^3 + (-36*s12^4 - 54*s12^3*s13 -
                  108*s12^2*s13^2 - 36*s12*s13^3)*s23 + (-72*s12^3 -
                  68*s12^2*s13 - 34*s12*s13^2 - 2*s13^3)*s23^2 +
                (-36*s12^2 + 4*s12*s13 - 2*s13^2)*s23^3) + p1q^2*p2q*(
                (-27*s12^4 - 72*s12^3*s13 - 63*s12^2*s13^2 - 18*s12*s13^3)*
                 s23 + (-32*s12^3 - 36*s12^2*s13 - 5*s12*s13^2 - s13^3)*
                 s23^2 + (s12^2 + 20*s12*s13 - s13^2)*s23^3 + 6*s12*s23^4) +
              p1q^3*((28*s12^3 + 47*s12^2*s13 + 19*s12*s13^2)*s23^2 +
                (38*s12^2 + 28*s12*s13 - s13^2)*s23^3 + (8*s12 - 3*s13)*
                 s23^4 - 2*s23^5)))*Log((s12 + s23)/(s12 + s13 + s23)))/
          (2*p1q*p3q^4*s12^3*s13*s23^2 + 2*p1q*p2q^4*s12*s13^3*s23^2 +
           2*p1q^4*p2q*s12*s13*s23^4 + p1q^2*p2q^3*(2*s12*s13^3*s23^2 -
             4*s12*s13^2*s23^3) + p1q^3*p2q^2*(-4*s12*s13^2*s23^3 +
             2*s12*s13*s23^4) + p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*
              s23^2 + p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
           p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*
              s23^2 + p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
               (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) + p1q^3*(-4*s12^2*s13*
                s23^3 + 2*s12*s13*s23^4)) +
           p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
             2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*((-4*s12^2*s13^2 +
                 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*s13^2)*s23^3) +
             p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*s23^3 + 4*s12*s13*
                s23^4)))) + Log(s13/(s12 + s13 + s23))*
        ((p1q^2*(99*s12^4*s13 + 99*s12^3*s13^2 + (243*s12^3*s13 + 144*s12^2*
                s13^2)*s23 + (189*s12^2*s13 + 45*s12*s13^2)*s23^2 +
             45*s12*s13*s23^3) + p3q^2*(99*s12^4*s13 + 99*s12^3*s13^2 +
             (243*s12^3*s13 + 144*s12^2*s13^2)*s23 + (189*s12^2*s13 + 45*s12*
                s13^2)*s23^2 + 45*s12*s13*s23^3) +
           p2q^2*(99*s12^4*s13 + 36*s12^3*s13^2 + 72*s12^2*s13^3 +
             135*s12*s13^4 + (306*s12^3*s13 - 54*s12^2*s13^2 + 27*s12*s13^3 +
               90*s13^4)*s23 + (315*s12^2*s13 - 180*s12*s13^2)*s23^2 +
             (108*s12*s13 - 90*s13^2)*s23^3) + p1q*p2q*(-81*s12^5 +
             117*s12^4*s13 + 63*s12^3*s13^2 - 135*s12^2*s13^3 +
             (-419*s12^4 + 91*s12^3*s13 - 129*s12^2*s13^2 - 225*s12*s13^3)*
              s23 + (-731*s12^3 + 31*s12^2*s13 - 122*s12*s13^2 - 90*s13^3)*
              s23^2 + (-529*s12^2 + 137*s12*s13 - 10*s13^2)*s23^3 +
             (-136*s12 + 80*s13)*s23^4) +
           p3q*(p2q*(261*s12^4*s13 + 126*s12^3*s13^2 - 135*s12^2*s13^3 +
               (675*s12^3*s13 + 54*s12^2*s13^2 - 225*s12*s13^3)*s23 +
               (567*s12^2*s13 - 162*s12*s13^2 - 90*s13^3)*s23^2 +
               (153*s12*s13 - 90*s13^2)*s23^3) + p1q*(-81*s12^5 + 54*s12^4*
                s13 + 135*s12^3*s13^2 + (-419*s12^4 - 98*s12^3*s13 +
                 105*s12^2*s13^2)*s23 + (-731*s12^3 - 158*s12^2*s13 +
                 130*s12*s13^2)*s23^2 + (-529*s12^2 + 74*s12*s13 + 80*s13^2)*
                s23^3 + (-136*s12 + 80*s13)*s23^4)))/
          (p1q*p2q*(18*s12^4*s13*s23 + 36*s12^3*s13*s23^2 +
             18*s12^2*s13*s23^3) + p1q*p3q*(18*s12^4*s13*s23 +
             36*s12^3*s13*s23^2 + 18*s12^2*s13*s23^3)) +
         ((p2q^6*(-648*s12^5*s13^4 - 1296*s12^4*s13^5 - 648*s12^3*s13^6 +
              (-9*s12^5*s13^3 - 945*s12^4*s13^4 - 1413*s12^3*s13^5 -
                531*s12^2*s13^6 - 234*s12*s13^7 - 180*s13^8)*s23 +
              (-90*s12^4*s13^3 - 585*s12^3*s13^4 - 729*s12^2*s13^5 +
                90*s12*s13^6)*s23^2 + (-81*s12^3*s13^3 - 216*s12^2*s13^4 -
                36*s12*s13^5 + 180*s13^6)*s23^3) +
            p3q^6*((90*s12^8 + 504*s12^7*s13 + 738*s12^6*s13^2 +
                324*s12^5*s13^3)*s23 + (261*s12^7 + 1008*s12^6*s13 +
                1080*s12^5*s13^2 + 333*s12^4*s13^3)*s23^2 + (252*s12^6 +
                594*s12^5*s13 + 513*s12^4*s13^2 + 90*s12^3*s13^3)*s23^3 +
              (81*s12^5 + 90*s12^4*s13 + 90*s12^3*s13^2)*s23^4) +
            p1q*p2q^5*(648*s12^6*s13^3 + 1296*s12^5*s13^4 + 648*s12^4*s13^5 +
              (90*s12^6*s13^2 + 2970*s12^5*s13^3 + 6210*s12^4*s13^4 +
                3258*s12^3*s13^5 + 288*s12^2*s13^6 + 360*s12*s13^7)*s23 +
              (198*s12^5*s13^2 + 3670*s12^4*s13^3 + 7230*s12^3*s13^4 +
                2388*s12^2*s13^5 + 1150*s12*s13^6 + 900*s13^7)*s23^2 +
              (351*s12^4*s13^2 + 2547*s12^3*s13^3 + 4034*s12^2*s13^4 -
                500*s12*s13^5 + 20*s13^6)*s23^3 + (243*s12^3*s13^2 +
                974*s12^2*s13^3 + 490*s12*s13^4 - 880*s13^5)*s23^4) +
            p1q^2*p2q^4*((-1134*s12^6*s13^2 - 3267*s12^5*s13^3 -
                1935*s12^4*s13^4 - 225*s12^3*s13^5 - 423*s12^2*s13^6)*s23 +
              (-180*s12^6*s13 - 4246*s12^5*s13^2 - 12279*s12^4*s13^3 -
                6438*s12^3*s13^4 - 1375*s12^2*s13^5 - 1530*s12*s13^6)*s23^2 +
              (-369*s12^5*s13 - 5493*s12^4*s13^2 - 15426*s12^3*s13^3 -
                4302*s12^2*s13^4 - 2370*s12*s13^5 - 1800*s13^6)*s23^3 +
              (-432*s12^4*s13 - 4241*s12^3*s13^2 - 9046*s12^2*s13^3 +
                1100*s12*s13^4 - 80*s13^5)*s23^4 + (-243*s12^3*s13 -
                1626*s12^2*s13^2 - 1580*s12*s13^3 + 1720*s13^4)*s23^5) +
            p1q^3*p2q^3*((90*s12^6*s13^2 + 180*s12^5*s13^3 + 414*s12^4*
                 s13^4 + 324*s12^3*s13^5)*s23 + (486*s12^6*s13 +
                3393*s12^5*s13^2 + 2232*s12^4*s13^3 + 1251*s12^3*s13^4 +
                1602*s12^2*s13^5)*s23^2 + (90*s12^6 + 2336*s12^5*s13 +
                12739*s12^4*s13^2 + 6185*s12^3*s13^3 + 2820*s12^2*s13^4 +
                2520*s12*s13^5)*s23^3 + (180*s12^5 + 3756*s12^4*s13 +
                16918*s12^3*s13^2 + 3868*s12^2*s13^3 + 2640*s12*s13^4 +
                1800*s13^5)*s23^4 + (171*s12^4 + 3181*s12^3*s13 +
                10204*s12^2*s13^2 - 1200*s12*s13^3 + 120*s13^4)*s23^5 +
              (81*s12^3 + 1194*s12^2*s13 + 2160*s12*s13^2 - 1680*s13^3)*s23^
                6) + p1q^6*((-9*s12^5 - 333*s12^4*s13 - 324*s12^3*s13^2)*s23^
                4 + (-18*s12^4 - 666*s12^3*s13 - 333*s12^2*s13^2)*s23^5 +
              (-9*s12^3 - 423*s12^2*s13 - 90*s12*s13^2)*s23^6 -
              90*s12*s13*s23^7) + p1q^4*p2q^2*((-180*s12^6*s13 -
                369*s12^5*s13^2 - 1161*s12^4*s13^3 - 972*s12^3*s13^4)*s23^2 +
              (-2007*s12^5*s13 - 1269*s12^4*s13^2 - 2493*s12^3*s13^3 -
                2268*s12^2*s13^4)*s23^3 + (-412*s12^5 - 7001*s12^4*s13 -
                2857*s12^3*s13^2 - 3090*s12^2*s13^3 - 1980*s12*s13^4)*s23^4 +
              (-988*s12^4 - 9413*s12^3*s13 - 1727*s12^2*s13^2 -
                1690*s12*s13^3 - 900*s13^4)*s23^5 + (-902*s12^3 -
                5761*s12^2*s13 + 650*s12*s13^2 - 80*s13^3)*s23^6 +
              (-326*s12^2 - 1360*s12*s13 + 820*s13^2)*s23^7) +
            p1q^5*p2q*((90*s12^6 + 198*s12^5*s13 + 1080*s12^4*s13^2 +
                972*s12^3*s13^3)*s23^3 + (585*s12^5 + 342*s12^4*s13 +
                2133*s12^3*s13^2 + 1422*s12^2*s13^3)*s23^4 + (1627*s12^4 +
                509*s12^3*s13 + 1780*s12^2*s13^2 + 720*s12*s13^3)*s23^5 +
              (2104*s12^3 + 304*s12^2*s13 + 594*s12*s13^2 + 180*s13^3)*s23^
                6 + (1298*s12^2 - 140*s12*s13 + 20*s13^2)*s23^7 +
              (326*s12 - 160*s13)*s23^8) + p3q^5*(p2q*(648*s12^8*s13 +
                1296*s12^7*s13^2 + 648*s12^6*s13^3 + (234*s12^8 + 2025*s12^7*
                   s13 + 1953*s12^6*s13^2 - 909*s12^5*s13^3 - 1071*s12^4*
                   s13^4)*s23 + (711*s12^7 + 2358*s12^6*s13 + 855*s12^5*
                   s13^2 - 2232*s12^4*s13^3 - 1116*s12^3*s13^4)*s23^2 +
                (720*s12^6 + 1215*s12^5*s13 + 225*s12^4*s13^2 - 1440*s12^3*
                   s13^3 - 360*s12^2*s13^4)*s23^3 + (243*s12^5 + 234*s12^4*
                   s13 + 36*s12^3*s13^2 - 360*s12^2*s13^3)*s23^4) +
              p1q*((-36*s12^8 + 756*s12^7*s13 + 1296*s12^6*s13^2 +
                  504*s12^5*s13^3)*s23 + (-907*s12^7 - 1785*s12^6*s13 -
                  1641*s12^5*s13^2 - 439*s12^4*s13^3)*s23^2 +
                (-2113*s12^6 - 5153*s12^5*s13 - 3040*s12^4*s13^2 -
                  396*s12^3*s13^3)*s23^3 + (-1730*s12^5 - 3129*s12^4*s13 -
                  852*s12^3*s13^2 - 20*s12^2*s13^3)*s23^4 +
                (-488*s12^4 - 436*s12^3*s13 - 20*s12^2*s13^2)*s23^5)) +
            p3q^4*(p2q^2*(1296*s12^8*s13 + 648*s12^7*s13^2 - 2592*s12^6*
                 s13^3 - 1944*s12^5*s13^4 + (234*s12^8 + 2763*s12^7*s13 -
                  693*s12^6*s13^2 - 5589*s12^5*s13^3 - 837*s12^4*s13^4 +
                  1530*s12^3*s13^5)*s23 + (711*s12^7 + 1836*s12^6*s13 -
                  2466*s12^5*s13^2 - 5562*s12^4*s13^3 + 1242*s12^3*s13^4 +
                  1593*s12^2*s13^5)*s23^2 + (720*s12^6 + 405*s12^5*s13 -
                  1827*s12^4*s13^2 - 3132*s12^3*s13^3 + 1341*s12^2*s13^4 +
                  450*s12*s13^5)*s23^3 + (243*s12^5 + 36*s12^4*s13 -
                  549*s12^3*s13^2 - 702*s12^2*s13^3 + 450*s12*s13^4)*s23^4) +
              p1q*p2q*(648*s12^8*s13 + 1296*s12^7*s13^2 + 648*s12^6*s13^3 +
                (-54*s12^8 + 378*s12^7*s13 - 954*s12^6*s13^2 - 2934*s12^5*
                   s13^3 - 1548*s12^4*s13^4)*s23 + (-1850*s12^7 - 5610*s12^6*
                   s13 - 4452*s12^5*s13^2 - 2300*s12^4*s13^3 - 1284*s12^3*
                   s13^4)*s23^2 + (-4433*s12^6 - 9563*s12^5*s13 - 1712*s12^4*
                   s13^2 - 1026*s12^3*s13^3 - 826*s12^2*s13^4)*s23^3 +
                (-3775*s12^5 - 5406*s12^4*s13 + 544*s12^3*s13^2 - 566*s12^2*
                   s13^3 - 140*s12*s13^4)*s23^4 + (-1138*s12^4 - 940*s12^3*
                   s13 + 400*s12^2*s13^2 - 140*s12*s13^3)*s23^5) +
              p1q^2*((-36*s12^8 + 1080*s12^7*s13 + 1620*s12^6*s13^2 +
                  504*s12^5*s13^3)*s23 + (-367*s12^7 - 2019*s12^6*s13 -
                  3423*s12^5*s13^2 - 1123*s12^4*s13^3)*s23^2 +
                (1256*s12^6 - 1092*s12^5*s13 - 1146*s12^4*s13^2 - 148*s12^3*
                   s13^3)*s23^3 + (4204*s12^5 + 5123*s12^4*s13 + 2186*s12^3*
                   s13^2 - 47*s12^2*s13^3)*s23^4 + (3676*s12^4 + 3882*s12^3*
                   s13 + 165*s12^2*s13^2 - 230*s12*s13^3)*s23^5 +
                (1059*s12^3 + 442*s12^2*s13 - 230*s12*s13^2)*s23^6)) +
            p3q^3*(p2q^3*(648*s12^8*s13 - 2592*s12^7*s13^2 - 5184*s12^6*
                 s13^3 + 1944*s12^4*s13^5 + (90*s12^8 + 1053*s12^7*s13 -
                  5769*s12^6*s13^2 - 6876*s12^5*s13^3 + 2754*s12^4*s13^4 +
                  1575*s12^3*s13^5 - 1323*s12^2*s13^6)*s23 +
                (261*s12^7 - 126*s12^6*s13 - 5148*s12^5*s13^2 - 4338*s12^4*
                   s13^3 + 5085*s12^3*s13^4 + 252*s12^2*s13^5 - 1170*s12*
                   s13^6)*s23^2 + (252*s12^6 - 801*s12^5*s13 - 2727*s12^4*
                   s13^2 - 1431*s12^3*s13^3 + 3573*s12^2*s13^4 - 414*s12*
                   s13^5 - 180*s13^6)*s23^3 + (81*s12^5 - 270*s12^4*s13 -
                  765*s12^3*s13^2 - 108*s12^2*s13^3 + 936*s12*s13^4 -
                  180*s13^5)*s23^4) + p1q*p2q^2*(1296*s12^8*s13 +
                1296*s12^7*s13^2 - 1296*s12^6*s13^3 - 1296*s12^5*s13^4 +
                (72*s12^8 + 36*s12^7*s13 - 2952*s12^6*s13^2 - 5724*s12^5*
                   s13^3 - 864*s12^4*s13^4 + 1944*s12^3*s13^5)*s23 +
                (-979*s12^7 - 5361*s12^6*s13 - 4452*s12^5*s13^2 - 8926*s12^4*
                   s13^3 - 1821*s12^3*s13^4 + 2499*s12^2*s13^5)*s23^2 +
                (-2743*s12^6 - 6349*s12^5*s13 - 1079*s12^4*s13^2 -
                  10539*s12^3*s13^3 - 740*s12^2*s13^4 + 1490*s12*s13^5)*
                 s23^3 + (-2504*s12^5 - 3099*s12^4*s13 + 20*s12^3*s13^2 -
                  5523*s12^2*s13^3 + 1042*s12*s13^4 + 520*s13^5)*s23^4 +
                (-812*s12^4 - 608*s12^3*s13 + 174*s12^2*s13^2 - 968*s12*
                   s13^3 + 520*s13^4)*s23^5) + p1q^2*p2q*((-198*s12^8 -
                  2115*s12^7*s13 - 5715*s12^6*s13^2 - 5553*s12^5*s13^3 -
                  1755*s12^4*s13^4)*s23 + (-1481*s12^7 - 9532*s12^6*s13 -
                  13779*s12^5*s13^2 - 7496*s12^4*s13^3 - 2092*s12^3*s13^4)*
                 s23^2 + (408*s12^6 - 5616*s12^5*s13 - 4194*s12^4*s13^2 -
                  2391*s12^3*s13^3 - 729*s12^2*s13^4)*s23^3 +
                (5530*s12^5 + 6166*s12^4*s13 + 6039*s12^3*s13^2 + 1308*s12^2*
                   s13^3 - 270*s12*s13^4)*s23^4 + (5712*s12^4 + 6687*s12^3*
                   s13 + 3867*s12^2*s13^2 - 722*s12*s13^3 - 500*s13^4)*
                 s23^5 + (1873*s12^3 + 1512*s12^2*s13 + 48*s12*s13^2 -
                  500*s13^3)*s23^6) + p1q^3*((90*s12^8 + 828*s12^7*s13 +
                  1062*s12^6*s13^2 + 324*s12^5*s13^3)*s23 +
                (612*s12^7 - 1215*s12^6*s13 - 3150*s12^5*s13^2 - 999*s12^4*
                   s13^3)*s23^2 + (2379*s12^6 + 1523*s12^5*s13 + 1318*s12^4*
                   s13^2 + 176*s12^3*s13^3)*s23^3 + (1908*s12^5 + 4324*s12^4*
                   s13 + 2301*s12^3*s13^2 - 7*s12^2*s13^3)*s23^4 +
                (-1815*s12^4 - 57*s12^3*s13 - 380*s12^2*s13^2 - 50*s12*s13^3)*
                 s23^5 + (-2844*s12^3 - 1237*s12^2*s13 + 174*s12*s13^2 +
                  160*s13^3)*s23^6 + (-978*s12^2 + 64*s12*s13 + 160*s13^2)*
                 s23^7)) + p3q^2*(p2q^4*(-1944*s12^7*s13^2 + 5184*s12^5*
                 s13^4 + 2592*s12^4*s13^5 - 648*s12^3*s13^6 +
                (-189*s12^7*s13 - 3753*s12^6*s13^2 + 900*s12^5*s13^3 +
                  6750*s12^4*s13^4 + 693*s12^3*s13^5 - 873*s12^2*s13^6 +
                  720*s12*s13^7)*s23 + (-612*s12^6*s13 - 2466*s12^5*s13^2 +
                  1215*s12^4*s13^3 + 5427*s12^3*s13^4 - 1944*s12^2*s13^5 -
                  702*s12*s13^6 + 360*s13^7)*s23^2 + (-585*s12^5*s13 -
                  774*s12^4*s13^2 + 1323*s12^3*s13^3 + 2403*s12^2*s13^4 -
                  1620*s12*s13^5)*s23^3 + (-162*s12^4*s13 - 189*s12^3*s13^2 +
                  450*s12^2*s13^3 + 522*s12*s13^4 - 360*s13^5)*s23^4) +
              p1q*p2q^3*(648*s12^8*s13 - 1296*s12^7*s13^2 - 3888*s12^6*
                 s13^3 - 1296*s12^5*s13^4 + 648*s12^4*s13^5 +
                (90*s12^8 + 234*s12^7*s13 - 4068*s12^6*s13^2 - 7380*s12^5*
                   s13^3 + 1206*s12^4*s13^4 + 3114*s12^3*s13^5 - 1260*s12^2*
                   s13^6)*s23 + (-1680*s12^6*s13 - 4884*s12^5*s13^2 -
                  13970*s12^4*s13^3 + 2544*s12^3*s13^4 + 3066*s12^2*s13^5 -
                  1820*s12*s13^6)*s23^2 + (-351*s12^6 - 1939*s12^5*s13 -
                  5231*s12^4*s13^2 - 15849*s12^3*s13^3 + 4636*s12^2*s13^4 +
                  842*s12*s13^5 - 1240*s13^6)*s23^3 + (-423*s12^5 -
                  1020*s12^4*s13 - 3731*s12^3*s13^2 - 7698*s12^2*s13^3 +
                  3840*s12*s13^4 - 20*s13^5)*s23^4 + (-162*s12^4 -
                  266*s12^3*s13 - 1004*s12^2*s13^2 - 1282*s12*s13^3 +
                  1220*s13^4)*s23^5) + p1q^2*p2q^2*((-162*s12^8 - 3843*s12^7*
                   s13 - 6669*s12^6*s13^2 - 3699*s12^5*s13^3 + 963*s12^4*
                   s13^4 + 1674*s12^3*s13^5)*s23 + (-1366*s12^7 - 9389*s12^6*
                   s13 - 9025*s12^5*s13^2 - 8188*s12^4*s13^3 - 2477*s12^3*
                   s13^4 + 1793*s12^2*s13^5)*s23^2 + (-1190*s12^6 -
                  3952*s12^5*s13 + 3568*s12^4*s13^2 - 8309*s12^3*s13^3 -
                  3385*s12^2*s13^4 + 1750*s12*s13^5)*s23^3 +
                (1317*s12^5 + 4913*s12^4*s13 + 12840*s12^3*s13^2 -
                  4377*s12^2*s13^3 + 656*s12*s13^4 + 1560*s13^5)*s23^4 +
                (2198*s12^4 + 5905*s12^3*s13 + 8547*s12^2*s13^2 -
                  2770*s12*s13^3 + 40*s13^4)*s23^5 + (895*s12^3 + 1938*s12^2*
                   s13 + 1404*s12*s13^2 - 1520*s13^3)*s23^6) +
              p1q^3*p2q*((90*s12^8 - 1242*s12^6*s13^2 - 1800*s12^5*s13^3 -
                  648*s12^4*s13^4)*s23 + (819*s12^7 + 432*s12^6*s13 -
                  3591*s12^5*s13^2 - 4356*s12^4*s13^3 - 1476*s12^3*s13^4)*
                 s23^2 + (3941*s12^6 + 8783*s12^5*s13 + 5460*s12^4*s13^2 -
                  448*s12^3*s13^3 - 886*s12^2*s13^4)*s23^3 +
                (4444*s12^5 + 10278*s12^4*s13 + 8332*s12^3*s13^2 +
                  1344*s12^2*s13^3 - 920*s12*s13^4)*s23^4 +
                (-441*s12^4 + 377*s12^3*s13 + 2582*s12^2*s13^2 - 1110*s12*
                   s13^3 - 840*s13^4)*s23^5 + (-2977*s12^3 - 3492*s12^2*s13 +
                  500*s12*s13^2 - 20*s13^3)*s23^6 + (-1304*s12^2 -
                  970*s12*s13 + 820*s13^2)*s23^7) + p1q^4*((-189*s12^7 -
                  1989*s12^6*s13 - 2448*s12^5*s13^2 - 648*s12^4*s13^3)*
                 s23^2 + (-1134*s12^6 - 1638*s12^5*s13 + 621*s12^4*s13^2 +
                  162*s12^3*s13^3)*s23^3 + (-3522*s12^5 - 1246*s12^4*s13 +
                  739*s12^3*s13^2 + 353*s12^2*s13^3)*s23^4 +
                (-4406*s12^4 - 2300*s12^3*s13 - 72*s12^2*s13^2 + 270*s12*
                   s13^3)*s23^5 + (-1835*s12^3 - 817*s12^2*s13 + 314*s12*
                   s13^2 + 160*s13^3)*s23^6 + (320*s12^2 + 50*s12*s13)*
                 s23^7 + (326*s12 - 160*s13)*s23^8)) +
            p3q*(p2q^5*(1944*s12^6*s13^3 + 2592*s12^5*s13^4 - 648*s12^4*
                 s13^5 - 1296*s12^3*s13^6 + (108*s12^6*s13^2 + 3411*s12^5*
                   s13^3 + 3285*s12^4*s13^4 - 765*s12^3*s13^5 - 81*s12^2*
                   s13^6 + 486*s12*s13^7 - 180*s13^8)*s23 +
                (441*s12^5*s13^2 + 2466*s12^4*s13^3 + 2115*s12^3*s13^4 -
                  1332*s12^2*s13^5 + 558*s12*s13^6 + 360*s13^7)*s23^2 +
                (414*s12^4*s13^2 + 1071*s12^3*s13^3 + 315*s12^2*s13^4 -
                  792*s12*s13^5 + 360*s13^6)*s23^3 + (81*s12^3*s13^2 +
                  216*s12^2*s13^3 + 36*s12*s13^4 - 180*s13^5)*s23^4) +
              p1q*p2q^4*(-1296*s12^7*s13^2 - 1296*s12^6*s13^3 + 1296*s12^5*
                 s13^4 + 1296*s12^4*s13^5 + (-180*s12^7*s13 - 3276*s12^6*
                   s13^2 - 2124*s12^5*s13^3 + 6732*s12^4*s13^4 + 4428*s12^3*
                   s13^5 - 972*s12^2*s13^6 + 360*s12*s13^7)*s23 +
                (-522*s12^6*s13 - 4251*s12^5*s13^2 - 5179*s12^4*s13^3 +
                  8295*s12^3*s13^4 + 1425*s12^2*s13^5 - 1444*s12*s13^6 +
                  720*s13^7)*s23^2 + (-684*s12^5*s13 - 4201*s12^4*s13^2 -
                  5553*s12^3*s13^3 + 6712*s12^2*s13^4 - 2336*s12*s13^5 -
                  1580*s13^6)*s23^3 + (-504*s12^4*s13 - 2670*s12^3*s13^2 -
                  2269*s12^2*s13^3 + 2734*s12*s13^4 - 1600*s13^5)*s23^4 +
                (-162*s12^3*s13 - 758*s12^2*s13^2 - 454*s12*s13^3 +
                  700*s13^4)*s23^5) + p1q^2*p2q^3*((-1296*s12^7*s13 -
                  3060*s12^6*s13^2 - 4797*s12^5*s13^3 - 1809*s12^4*s13^4 +
                  801*s12^3*s13^5 - 423*s12^2*s13^6)*s23 + (-180*s12^7 -
                  3316*s12^6*s13 - 7019*s12^5*s13^2 - 17766*s12^4*s13^3 -
                  6895*s12^3*s13^4 + 1606*s12^2*s13^5 - 1170*s12*s13^6)*
                 s23^2 + (-270*s12^6 - 2119*s12^5*s13 - 2999*s12^4*s13^2 -
                  21726*s12^3*s13^3 - 3988*s12^2*s13^4 + 1576*s12*s13^5 -
                  1080*s13^6)*s23^3 + (-81*s12^5 + 558*s12^4*s13 +
                  2856*s12^3*s13^2 - 13482*s12^2*s13^3 + 3664*s12*s13^4 +
                  2740*s13^5)*s23^4 + (90*s12^4 + 1687*s12^3*s13 +
                  3507*s12^2*s13^2 - 3876*s12*s13^3 + 2800*s13^4)*s23^5 +
                (81*s12^3 + 868*s12^2*s13 + 1126*s12*s13^2 - 1020*s13^3)*
                 s23^6) + p1q^3*p2q^2*((-180*s12^7*s13 - 270*s12^6*s13^2 +
                  414*s12^4*s13^4 + 324*s12^3*s13^5)*s23 +
                (162*s12^7 + 2196*s12^6*s13 + 4284*s12^5*s13^2 + 747*s12^4*
                   s13^3 + 1179*s12^2*s13^5)*s23^2 + (1706*s12^6 +
                  9776*s12^5*s13 + 18645*s12^4*s13^2 + 6299*s12^3*s13^3 -
                  136*s12^2*s13^4 + 1350*s12*s13^5)*s23^3 +
                (2923*s12^5 + 10673*s12^4*s13 + 23966*s12^3*s13^2 +
                  4544*s12^2*s13^3 - 944*s12*s13^4 + 720*s13^5)*s23^4 +
                (1617*s12^4 + 3327*s12^3*s13 + 13454*s12^2*s13^2 -
                  2656*s12*s13^3 - 2340*s13^4)*s23^5 + (-88*s12^3 -
                  1547*s12^2*s13 + 3044*s12*s13^2 - 2400*s13^3)*s23^6 +
                (-326*s12^2 - 1034*s12*s13 + 660*s13^2)*s23^7) +
              p1q^5*((108*s12^6 + 1494*s12^5*s13 + 1710*s12^4*s13^2 +
                  324*s12^3*s13^3)*s23^3 + (576*s12^5 + 2439*s12^4*s13 +
                  1242*s12^3*s13^2 + 333*s12^2*s13^3)*s23^4 +
                (1555*s12^4 + 1409*s12^3*s13 + 160*s12^2*s13^2 +
                  90*s12*s13^3)*s23^5 + (2059*s12^3 + 439*s12^2*s13 -
                  180*s12*s13^2)*s23^6 + (1298*s12^2 - 104*s12*s13 -
                  160*s13^2)*s23^7 + (326*s12 - 160*s13)*s23^8) +
              p1q^4*p2q*((-180*s12^7 - 522*s12^6*s13 - 1818*s12^5*s13^2 -
                  2124*s12^4*s13^3 - 648*s12^3*s13^4)*s23^2 +
                (-1206*s12^6 - 1899*s12^5*s13 - 2313*s12^4*s13^2 -
                  2043*s12^3*s13^3 - 1089*s12^2*s13^4)*s23^3 +
                (-4033*s12^5 - 8238*s12^4*s13 - 3945*s12^3*s13^2 -
                  658*s12^2*s13^3 - 630*s12*s13^4)*s23^4 + (-5340*s12^4 -
                  11749*s12^3*s13 - 2339*s12^2*s13^2 + 506*s12*s13^3 -
                  180*s13^4)*s23^5 + (-2665*s12^3 - 6650*s12^2*s13 +
                  874*s12*s13^2 + 980*s13^3)*s23^6 + (-6*s12^2 - 1436*s12*
                   s13 + 1000*s13^2)*s23^7 + (326*s12 - 160*s13)*s23^8)))*
           Log(s23/(s12 + s13 + s23)))/(p1q*p2q^5*(-36*s12^4*s13^4 -
             36*s12^3*s13^5)*s23^2 + p1q*p3q^5*
            ((36*s12^7*s13 + 36*s12^6*s13^2)*s23^2 + (36*s12^6*s13 + 36*s12^5*
                s13^2)*s23^3) + p1q^2*p2q^4*((36*s12^5*s13^3 + 36*s12^4*
                s13^4)*s23^2 + (108*s12^4*s13^3 + 144*s12^3*s13^4)*s23^3) +
           p1q^3*p2q^3*((-72*s12^5*s13^2 - 108*s12^4*s13^3)*s23^3 +
             (-108*s12^4*s13^2 - 216*s12^3*s13^3)*s23^4) +
           p1q^4*p2q^2*((36*s12^5*s13 + 108*s12^4*s13^2)*s23^4 +
             (36*s12^4*s13 + 144*s12^3*s13^2)*s23^5) +
           p1q^5*p2q*(-36*s12^4*s13*s23^5 - 36*s12^3*s13*s23^6) +
           p3q^4*(p1q*p2q*((72*s12^7*s13 - 36*s12^6*s13^2 - 108*s12^5*s13^3)*
                s23^2 + (72*s12^6*s13 - 72*s12^4*s13^3)*s23^3) +
             p1q^2*((36*s12^7*s13 + 36*s12^6*s13^2)*s23^2 + (-72*s12^6*s13 -
                 36*s12^5*s13^2)*s23^3 + (-108*s12^5*s13 - 72*s12^4*s13^2)*
                s23^4)) + p3q^3*(p1q*p2q^2*((36*s12^7*s13 - 180*s12^6*s13^2 -
                 108*s12^5*s13^3 + 108*s12^4*s13^4)*s23^2 + (36*s12^6*s13 -
                 108*s12^5*s13^2 - 108*s12^4*s13^3 + 36*s12^3*s13^4)*s23^3) +
             p1q^2*p2q*((72*s12^7*s13 - 72*s12^5*s13^3)*s23^2 +
               (-108*s12^6*s13 - 36*s12^5*s13^2 - 72*s12^4*s13^3)*s23^3 +
               (-180*s12^5*s13 - 144*s12^4*s13^2 - 72*s12^3*s13^3)*s23^4) +
             p1q^3*((-108*s12^6*s13 - 72*s12^5*s13^2)*s23^3 - 36*s12^4*s13^2*
                s23^4 + (108*s12^4*s13 + 36*s12^3*s13^2)*s23^5)) +
           p3q^2*(p1q*p2q^3*((-108*s12^6*s13^2 + 108*s12^5*s13^3 +
                 180*s12^4*s13^4 - 36*s12^3*s13^5)*s23^2 + (-72*s12^5*s13^2 +
                 72*s12^3*s13^4)*s23^3) + p1q^2*p2q^2*((36*s12^7*s13 -
                 108*s12^6*s13^2 - 108*s12^5*s13^3 + 36*s12^4*s13^4)*s23^2 +
               (-36*s12^6*s13 - 72*s12^5*s13^2 - 144*s12^4*s13^3 +
                 108*s12^3*s13^4)*s23^3 + (-72*s12^5*s13 - 144*s12^4*s13^2 -
                 180*s12^3*s13^3)*s23^4) + p1q^3*p2q*((-180*s12^6*s13 -
                 144*s12^5*s13^2 - 72*s12^4*s13^3)*s23^3 + (-36*s12^5*s13 -
                 108*s12^4*s13^2 - 108*s12^3*s13^3)*s23^4 + (144*s12^4*s13 +
                 144*s12^3*s13^2)*s23^5) + p1q^4*((108*s12^5*s13 +
                 36*s12^4*s13^2)*s23^4 + (72*s12^4*s13 + 36*s12^3*s13^2)*
                s23^5 - 36*s12^3*s13*s23^6)) +
           p3q*(p1q*p2q^4*((108*s12^5*s13^3 + 36*s12^4*s13^4 - 72*s12^3*
                  s13^5)*s23^2 + (36*s12^4*s13^3 + 36*s12^3*s13^4)*s23^3) +
             p1q^2*p2q^3*((-72*s12^6*s13^2 + 72*s12^4*s13^4)*s23^2 +
               (-72*s12^5*s13^2 + 36*s12^4*s13^3 + 252*s12^3*s13^4)*s23^3 +
               (-72*s12^4*s13^2 - 108*s12^3*s13^3)*s23^4) +
             p1q^3*p2q^2*((-72*s12^6*s13 - 144*s12^5*s13^2 - 180*s12^4*s13^3)*
                s23^3 + (-36*s12^5*s13 - 180*s12^4*s13^2 - 324*s12^3*s13^3)*
                s23^4 + (36*s12^4*s13 + 108*s12^3*s13^2)*s23^5) +
             p1q^5*(-36*s12^4*s13*s23^5 - 36*s12^3*s13*s23^6) +
             p1q^4*p2q*((144*s12^5*s13 + 144*s12^4*s13^2)*s23^4 +
               (108*s12^4*s13 + 180*s12^3*s13^2)*s23^5 - 36*s12^3*s13*
                s23^6))) + ((p3q^5*((-90*s12^6 - 333*s12^5*s13 -
                243*s12^4*s13^2)*s23 + (-90*s12^5 - 333*s12^4*s13 -
                90*s12^3*s13^2)*s23^2 - 90*s12^3*s13*s23^3) +
            p2q^5*(-324*s12^4*s13^3 - 324*s12^3*s13^4 + (-90*s12^4*s13^2 -
                1017*s12^3*s13^3 - 477*s12^2*s13^4 - 54*s12*s13^5 -
                180*s13^6)*s23 + (-90*s12^3*s13^2 - 819*s12^2*s13^3 +
                90*s12*s13^4)*s23^2 + (-216*s12*s13^3 + 180*s13^4)*s23^3) +
            p1q*p2q^4*(-324*s12^4*s13^3 - 324*s12^3*s13^4 +
              (558*s12^4*s13^2 - 675*s12^3*s13^3 - 603*s12^2*s13^4 +
                126*s12*s13^5 - 180*s13^6)*s23 + (180*s12^4*s13 +
                2626*s12^3*s13^2 + 365*s12^2*s13^3 + 412*s12*s13^4 +
                540*s13^5)*s23^2 + (180*s12^3*s13 + 2646*s12^2*s13^2 -
                376*s12*s13^3 + 200*s13^4)*s23^3 + (758*s12*s13^2 -
                520*s13^3)*s23^4) + p1q^5*((-90*s12^4 - 333*s12^3*s13 -
                243*s12^2*s13^2)*s23^3 + (-90*s12^3 - 333*s12^2*s13 -
                90*s12*s13^2)*s23^4 - 90*s12*s13*s23^5) +
            p1q^2*p2q^3*((162*s12^5*s13 + 882*s12^4*s13^2 + 171*s12^3*s13^3 -
                369*s12^2*s13^4 + 180*s12*s13^5)*s23 + (3040*s12^3*s13^2 +
                1085*s12^2*s13^3 - 128*s12*s13^4 + 540*s13^5)*s23^2 +
              (-90*s12^4 - 2183*s12^3*s13 + 1727*s12^2*s13^2 - 732*s12*
                 s13^3 - 520*s13^4)*s23^3 + (-90*s12^3 - 2799*s12^2*s13 +
                808*s12*s13^2 - 560*s13^3)*s23^4 + (-868*s12*s13 + 500*s13^2)*
               s23^5) + p1q^4*p2q*((180*s12^4*s13 + 666*s12^3*s13^2 +
                486*s12^2*s13^3)*s23^2 + (90*s12^4 - 261*s12^3*s13 +
                315*s12^2*s13^2 + 360*s12*s13^3)*s23^3 + (772*s12^3 -
                85*s12^2*s13 + 304*s12*s13^2 + 180*s13^3)*s23^4 +
              (1008*s12^2 - 70*s12*s13 + 20*s13^2)*s23^5 + (326*s12 -
                160*s13)*s23^6) + p1q^3*p2q^2*((-90*s12^4*s13^2 -
                333*s12^3*s13^3 - 243*s12^2*s13^4)*s23 + (-198*s12^5 -
                720*s12^4*s13 + 468*s12^3*s13^2 + 387*s12^2*s13^3 -
                450*s12*s13^4)*s23^2 + (-342*s12^4 - 2921*s12^3*s13 -
                397*s12^2*s13^2 - 212*s12*s13^3 - 540*s13^4)*s23^3 +
              (502*s12^3 - 2623*s12^2*s13 + 444*s12*s13^2 + 140*s13^3)*s23^
                4 + (972*s12^2 - 848*s12*s13 + 520*s13^2)*s23^5 +
              (326*s12 - 160*s13)*s23^6) + p3q^4*(p2q*(-324*s12^6*s13 -
                324*s12^5*s13^2 + (90*s12^6 - 909*s12^5*s13 - 9*s12^4*s13^2 +
                  666*s12^3*s13^3)*s23 + (90*s12^5 - 1071*s12^4*s13 +
                  630*s12^3*s13^2 + 360*s12^2*s13^3)*s23^2 +
                (-396*s12^3*s13 + 360*s12^2*s13^2)*s23^3) +
              p1q*((-126*s12^6 - 225*s12^5*s13 - 99*s12^4*s13^2)*s23 +
                (1024*s12^5 + 1427*s12^4*s13 + 376*s12^3*s13^2)*s23^2 +
                (1476*s12^4 + 722*s12^3*s13 + 20*s12^2*s13^2)*s23^3 +
                (326*s12^3 + 20*s12^2*s13)*s23^4)) +
            p3q^3*(p2q^2*(-648*s12^6*s13 + 648*s12^4*s13^3 +
                (90*s12^6 - 1953*s12^5*s13 + 1179*s12^4*s13^2 + 1143*s12^3*
                   s13^3 - 783*s12^2*s13^4)*s23 + (90*s12^5 - 1917*s12^4*
                   s13 + 2556*s12^3*s13^2 - 81*s12^2*s13^3 - 450*s12*s13^4)*
                 s23^2 + (-522*s12^3*s13 + 1152*s12^2*s13^2 - 450*s12*s13^3)*
                 s23^3) + p1q*p2q*(-324*s12^6*s13 - 324*s12^5*s13^2 +
                (468*s12^6 + 270*s12^5*s13 + 1008*s12^4*s13^2 + 882*s12^3*
                   s13^3)*s23 + (2228*s12^5 + 1652*s12^4*s13 + 1354*s12^3*
                   s13^2 + 706*s12^2*s13^3)*s23^2 + (2412*s12^4 + 238*s12^3*
                   s13 + 666*s12^2*s13^2 + 140*s12*s13^3)*s23^3 +
                (652*s12^3 - 180*s12^2*s13 + 140*s12*s13^2)*s23^4) +
              p1q^2*((-126*s12^6 - 225*s12^5*s13 - 99*s12^4*s13^2)*s23 +
                (1240*s12^5 + 1661*s12^4*s13 + 394*s12^3*s13^2)*s23^2 +
                (-50*s12^4 - 1205*s12^3*s13 - 183*s12^2*s13^2)*s23^3 +
                (-2068*s12^3 - 605*s12^2*s13 + 230*s12*s13^2)*s23^4 +
                (-652*s12^2 + 230*s12*s13)*s23^5)) +
            p3q*(p2q^4*(648*s12^5*s13^2 - 648*s12^3*s13^4 +
                (180*s12^5*s13 + 2124*s12^4*s13^2 - 819*s12^3*s13^3 -
                  801*s12^2*s13^4 + 486*s12*s13^5 - 180*s13^6)*s23 +
                (180*s12^4*s13 + 1728*s12^3*s13^2 - 1917*s12^2*s13^3 +
                  144*s12*s13^4 + 180*s13^5)*s23^2 + (432*s12^2*s13^2 -
                  882*s12*s13^3 + 360*s13^4)*s23^3) + p1q*p2q^3*(
                648*s12^5*s13^2 + 324*s12^4*s13^3 - 324*s12^3*s13^4 +
                (180*s12^5*s13 + 3762*s12^4*s13^2 + 900*s12^3*s13^3 -
                  990*s12^2*s13^4 + 720*s12*s13^5)*s23 + (180*s12^5 +
                  58*s12^4*s13 + 6898*s12^3*s13^2 + 1112*s12^2*s13^3 -
                  4*s12*s13^4 + 720*s13^5)*s23^2 + (180*s12^4 - 522*s12^3*
                   s13 + 5702*s12^2*s13^2 - 828*s12*s13^3 - 320*s13^4)*
                 s23^3 + (-220*s12^2*s13 + 1656*s12*s13^2 - 1040*s13^3)*
                 s23^4) + p1q^2*p2q^2*((486*s12^6 + 1314*s12^5*s13 +
                  2286*s12^4*s13^2 + 675*s12^3*s13^3 - 783*s12^2*s13^4)*s23 +
                (936*s12^5 + 1264*s12^4*s13 + 4182*s12^3*s13^2 + 1125*s12^2*
                   s13^3 - 830*s12*s13^4)*s23^2 + (-824*s12^4 - 5051*s12^3*
                   s13 + 151*s12^2*s13^2 - 714*s12*s13^3 - 1060*s13^4)*
                 s23^3 + (-1926*s12^3 - 5921*s12^2*s13 + 670*s12*s13^2 -
                  60*s13^3)*s23^4 + (-652*s12^2 - 1506*s12*s13 + 1000*s13^2)*
                 s23^5) + p1q^3*p2q*((180*s12^5*s13 + 666*s12^4*s13^2 +
                  486*s12^3*s13^3)*s23 + (-198*s12^5 + 1260*s12^4*s13 +
                  2412*s12^3*s13^2 + 648*s12^2*s13^3)*s23^2 +
                (-1580*s12^4 - 2058*s12^3*s13 - 1086*s12^2*s13^2 +
                  220*s12*s13^3)*s23^3 + (-706*s12^3 - 2082*s12^2*s13 +
                  96*s12*s13^2 + 680*s13^3)*s23^4 + (1328*s12^2 -
                  472*s12*s13 + 360*s13^2)*s23^5 + (652*s12 - 320*s13)*
                 s23^6) + p1q^4*((180*s12^5 + 666*s12^4*s13 + 486*s12^3*
                   s13^2)*s23^2 + (-90*s12^4 - 9*s12^3*s13 - 225*s12^2*s13^2)*
                 s23^3 + (412*s12^3 + 347*s12^2*s13 - 110*s12*s13^2)*s23^4 +
                (1008*s12^2 + 56*s12*s13 - 160*s13^2)*s23^5 +
                (326*s12 - 160*s13)*s23^6)) + p3q^2*(p2q^3*(-324*s12^6*s13 +
                972*s12^5*s13^2 + 972*s12^4*s13^3 - 324*s12^3*s13^4 +
                (-90*s12^6 - 1197*s12^5*s13 + 3159*s12^4*s13^2 + 675*s12^3*
                   s13^3 - 1107*s12^2*s13^4 + 540*s12*s13^5)*s23 +
                (-90*s12^5 - 999*s12^4*s13 + 3654*s12^3*s13^2 - 1539*s12^2*
                   s13^3 - 396*s12*s13^4 + 180*s13^5)*s23^2 +
                (-216*s12^3*s13 + 1224*s12^2*s13^2 - 1116*s12*s13^3 +
                  180*s13^4)*s23^3) + p1q*p2q^2*(-324*s12^6*s13 +
                324*s12^5*s13^2 + 648*s12^4*s13^3 + (558*s12^6 + 333*s12^5*
                   s13 + 3447*s12^4*s13^2 + 1377*s12^3*s13^3 - 1323*s12^2*
                   s13^4)*s23 + (1672*s12^5 + 445*s12^4*s13 + 5016*s12^3*
                   s13^2 + 931*s12^2*s13^3 - 830*s12*s13^4)*s23^2 +
                (1440*s12^4 - 862*s12^3*s13 + 3702*s12^2*s13^2 - 312*s12*
                   s13^3 - 520*s13^4)*s23^3 + (326*s12^3 - 420*s12^2*s13 +
                  1038*s12*s13^2 - 520*s13^3)*s23^4) + p1q^2*p2q*(
                (396*s12^6 + 1557*s12^5*s13 + 2511*s12^4*s13^2 + 1350*s12^3*
                   s13^3)*s23 + (1492*s12^5 + 3573*s12^4*s13 + 3210*s12^3*
                   s13^2 + 544*s12^2*s13^3)*s23^2 + (-1180*s12^4 -
                  2975*s12^3*s13 - 1471*s12^2*s13^2)*s23^3 +
                (-3580*s12^3 - 3727*s12^2*s13 + 92*s12*s13^2 + 500*s13^3)*
                 s23^4 + (-1304*s12^2 - 408*s12*s13 + 500*s13^2)*s23^5) +
              p1q^3*((-90*s12^6 - 333*s12^5*s13 - 243*s12^4*s13^2)*s23 +
                (306*s12^5 + 567*s12^4*s13 + 414*s12^3*s13^2)*s23^2 +
                (-1526*s12^4 - 1693*s12^3*s13 - 185*s12^2*s13^2)*s23^3 +
                (-1892*s12^3 + 55*s12^2*s13 + 210*s12*s13^2)*s23^4 +
                (356*s12^2 + 376*s12*s13 - 160*s13^2)*s23^5 +
                (326*s12 - 160*s13)*s23^6)))*Log((s12 + s23)/
             (s12 + s13 + s23)))/(36*p1q*p3q^4*s12^5*s13*s23^2 +
           36*p1q*p2q^4*s12^3*s13^3*s23^2 + 36*p1q^4*p2q*s12^3*s13*s23^4 +
           p1q^2*p2q^3*(36*s12^3*s13^3*s23^2 - 72*s12^3*s13^2*s23^3) +
           p1q^3*p2q^2*(-72*s12^3*s13^2*s23^3 + 36*s12^3*s13*s23^4) +
           p3q^3*(p1q*p2q*(72*s12^5*s13 - 72*s12^4*s13^2)*s23^2 +
             p1q^2*(36*s12^5*s13*s23^2 - 72*s12^4*s13*s23^3)) +
           p3q^2*(p1q*p2q^2*(36*s12^5*s13 - 144*s12^4*s13^2 + 36*s12^3*s13^3)*
              s23^2 + p1q^2*p2q*((36*s12^5*s13 - 72*s12^4*s13^2)*s23^2 +
               (-144*s12^4*s13 - 72*s12^3*s13^2)*s23^3) +
             p1q^3*(-72*s12^4*s13*s23^3 + 36*s12^3*s13*s23^4)) +
           p3q*(p1q*p2q^3*(-72*s12^4*s13^2 + 72*s12^3*s13^3)*s23^2 +
             36*p1q^4*s12^3*s13*s23^4 + p1q^2*p2q^2*((-72*s12^4*s13^2 +
                 36*s12^3*s13^3)*s23^2 + (-72*s12^4*s13 - 144*s12^3*s13^2)*
                s23^3) + p1q^3*p2q*((-72*s12^4*s13 - 72*s12^3*s13^2)*s23^3 +
               72*s12^3*s13*s23^4)))) + Log((p1q + p2q)/(p1q + p2q + p3q))*
        (((p3q^6*((9*s12^4*s13 + 9*s12^3*s13^2)*s23 + (s12^4 + 10*s12^3*s13)*
               s23^2 + s12^3*s23^3) + p2q^6*(36*s12^2*s13^4 + 36*s12*s13^5 +
              (81*s12^2*s13^3 + 189*s12*s13^4 + 72*s13^5)*s23 +
              (152*s12*s13^3 + 143*s13^4)*s23^2 + (-(s12*s13^2) + 70*s13^3)*
               s23^3 - s13^2*s23^4) + p1q*p2q^5*(72*s12^2*s13^4 +
              72*s12*s13^5 + (90*s12^2*s13^3 + 297*s12*s13^4 + 135*s13^5)*
               s23 + (-165*s12^2*s13^2 - 99*s12*s13^3 + 111*s13^4)*s23^2 +
              (-314*s12*s13^2 - 173*s13^3)*s23^3 + (2*s12*s13 - 147*s13^2)*
               s23^4 + 2*s13*s23^5) + p1q^6*((9*s12^2*s13 + 18*s12*s13^2 +
                9*s13^3)*s23^3 + (18*s12*s13 + 18*s13^2)*s23^4 +
              9*s13*s23^5) + p1q^4*p2q^2*((9*s12^2*s13^3 + 18*s12*s13^4 +
                9*s13^5)*s23 + (36*s12^3*s13 + 54*s12^2*s13^2 + 18*s12*s13^3)*
               s23^2 + (2*s12^3 + 172*s12^2*s13 + 227*s12*s13^2 + 66*s13^3)*
               s23^3 + (180*s12*s13 + 123*s13^2)*s23^4 + (-15*s12 + 35*s13)*
               s23^5 - 13*s23^6) + p1q^5*p2q*((-18*s12^2*s13^2 -
                36*s12*s13^3 - 18*s13^4)*s23^2 + (18*s12^2*s13 -
                9*s12*s13^2 - 27*s13^3)*s23^3 + (-3*s12^2 + 9*s12*s13 -
                15*s13^2)*s23^4 + (-10*s12 - 13*s13)*s23^5 - 7*s23^6) +
            p1q^3*p2q^3*((-36*s12^3*s13^2 - 108*s12^2*s13^3 - 63*s12*s13^4 +
                9*s13^5)*s23 + (34*s12^3*s13 - 133*s12^2*s13^2 -
                335*s12*s13^3 - 123*s13^4)*s23^2 + (2*s12^3 + 244*s12^2*s13 +
                137*s12*s13^2 - 72*s13^3)*s23^3 + (3*s12^2 + 355*s12*s13 +
                206*s13^2)*s23^4 + (-6*s12 + 139*s13)*s23^5 - 7*s23^6) +
            p1q^2*p2q^4*(36*s12^2*s13^4 + 36*s12*s13^5 + (-36*s12^3*s13^2 -
                108*s12^2*s13^3 + 27*s12*s13^4 + 63*s13^5)*s23 +
              (-2*s12^3*s13 - 370*s12^2*s13^2 - 640*s12*s13^3 - 173*s13^4)*
               s23^2 + (81*s12^2*s13 - 430*s12*s13^2 - 417*s13^3)*s23^3 +
              (168*s12*s13 - 96*s13^2)*s23^4 + (-s12 + 84*s13)*s23^5 -
              s23^6) + p3q^5*(p1q*((27*s12^4*s13 + 27*s12^3*s13^2)*s23 +
                (3*s12^4 + 3*s12^3*s13 - 27*s12^2*s13^2)*s23^2 -
                30*s12^2*s13*s23^3 - 3*s12^2*s23^4) + p2q*(-36*s12^5*s13 -
                36*s12^4*s13^2 + (-36*s12^4*s13 - 18*s12^3*s13^2 -
                  18*s12^2*s13^3)*s23 + (3*s12^4 - 21*s12^2*s13^2)*s23^2 +
                (2*s12^3 - 4*s12^2*s13)*s23^3 - s12^2*s23^4)) +
            p3q^4*(p2q^2*(-72*s12^5*s13 + 36*s12^4*s13^2 + 108*s12^3*s13^3 +
                (-54*s12^4*s13 + 162*s12^3*s13^2 + 45*s12^2*s13^3 +
                  9*s12*s13^4)*s23 + (3*s12^4 + 48*s12^3*s13 + 66*s12^2*
                   s13^2 + 12*s12*s13^3)*s23^2 + (26*s12^2*s13 + 5*s12*s13^2)*
                 s23^3 + (-3*s12^2 + 2*s12*s13)*s23^4) + p1q*p2q*(
                -36*s12^5*s13 + 36*s12^3*s13^3 + (108*s12^4*s13 + 189*s12^3*
                   s13^2 + 9*s12^2*s13^3)*s23 + (7*s12^4 + 139*s12^3*s13 -
                  3*s12^2*s13^2)*s23^2 + (-4*s12^3 - 21*s12^2*s13 +
                  2*s12*s13^2)*s23^3 + (-9*s12^2 + 4*s12*s13)*s23^4 +
                2*s12*s23^5) + p1q^2*((36*s12^4*s13 + 27*s12^3*s13^2 -
                  9*s12^2*s13^3)*s23 + (s12^4 - 30*s12^3*s13 - 76*s12^2*
                   s13^2)*s23^2 + (-11*s12^3 - 52*s12^2*s13 + 27*s12*s13^2)*
                 s23^3 + (-9*s12^2 + 30*s12*s13)*s23^4 + 3*s12*s23^5)) +
            p3q^2*(p2q^4*(108*s12^4*s13^2 - 108*s12^3*s13^3 - 180*s12^2*
                 s13^4 + 36*s12*s13^5 + (81*s12^4*s13 + 45*s12^3*s13^2 -
                  558*s12^2*s13^3 - 126*s12*s13^4 + 36*s13^5)*s23 +
                (150*s12^3*s13 - 282*s12^2*s13^2 - 372*s12*s13^3 + 69*s13^4)*
                 s23^2 + (-s12^3 + 74*s12^2*s13 - 204*s12*s13^2 + 30*s13^3)*
                 s23^3 + (-s12^2 + 6*s12*s13 - 3*s13^2)*s23^4) +
              p1q*p2q^3*(144*s12^4*s13^2 - 108*s12^3*s13^3 - 216*s12^2*
                 s13^4 + 36*s12*s13^5 + (234*s12^4*s13 + 171*s12^3*s13^2 -
                  783*s12^2*s13^3 - 225*s12*s13^4 + 63*s13^5)*s23 +
                (s12^4 + 133*s12^3*s13 - 768*s12^2*s13^2 - 821*s12*s13^3 +
                  25*s13^4)*s23^2 + (-4*s12^3 - 289*s12^2*s13 - 712*s12*
                   s13^2 - 109*s13^3)*s23^3 + (s12^2 - 170*s12*s13 -
                  65*s13^2)*s23^4 + (6*s12 + 6*s13)*s23^5) +
              p1q^3*p2q*((18*s12^4*s13 - 99*s12^3*s13^2 - 171*s12^2*s13^3 -
                  54*s12*s13^4)*s23 + (-5*s12^4 - 227*s12^3*s13 - 493*s12^2*
                   s13^2 - 226*s12*s13^3 - 36*s13^4)*s23^2 +
                (-6*s12^3 - 151*s12^2*s13 - 13*s12*s13^2 - 3*s13^3)*s23^3 +
                (42*s12^2 + 137*s12*s13 + 37*s13^2)*s23^4 + (34*s12 - 5*s13)*
                 s23^5 - 9*s23^6) + p1q^4*((9*s12^4*s13 + 18*s12^3*s13^2 +
                  9*s12^2*s13^3)*s23 + (18*s12^2*s13^2 + 18*s12*s13^3)*
                 s23^2 + (6*s12^3 + 63*s12^2*s13 + 93*s12*s13^2 + 9*s13^3)*
                 s23^3 + (21*s12^2 + 68*s12*s13 - 4*s13^2)*s23^4 +
                (9*s12 - 19*s13)*s23^5 - 6*s23^6) + p1q^2*p2q^2*(
                36*s12^4*s13^2 - 36*s12^3*s13^3 - 72*s12^2*s13^4 +
                (144*s12^4*s13 - 81*s12^3*s13^2 - 513*s12^2*s13^3 -
                  153*s12*s13^4 + 27*s13^5)*s23 + (-4*s12^4 - 260*s12^3*s13 -
                  1066*s12^2*s13^2 - 668*s12*s13^3 - 56*s13^4)*s23^2 +
                (-13*s12^3 - 541*s12^2*s13 - 533*s12*s13^2 - 79*s13^3)*
                 s23^3 + (24*s12^2 - 52*s12*s13 + 51*s13^2)*s23^4 +
                (30*s12 + 44*s13)*s23^5 - 3*s23^6)) +
            p3q*(p2q^5*(-108*s12^3*s13^3 - 36*s12^2*s13^4 + 72*s12*s13^5 +
                (-162*s12^3*s13^2 - 306*s12^2*s13^3 + 144*s12*s13^4 +
                  108*s13^5)*s23 + (-303*s12^2*s13^2 - 72*s12*s13^3 +
                  213*s13^4)*s23^2 + (2*s12^2*s13 - 142*s12*s13^2 +
                  102*s13^3)*s23^3 + (2*s12*s13 - 3*s13^2)*s23^4) +
              p1q*p2q^4*(-180*s12^3*s13^3 - 72*s12^2*s13^4 + 108*s12*s13^5 +
                (-324*s12^3*s13^2 - 747*s12^2*s13^3 + 27*s12*s13^4 +
                  162*s13^5)*s23 + (-160*s12^3*s13 - 1083*s12^2*s13^2 -
                  931*s12*s13^3 + 73*s13^4)*s23^2 + (-286*s12^2*s13 -
                  946*s12*s13^2 - 310*s13^3)*s23^3 + (2*s12^2 - 118*s12*s13 -
                  215*s13^2)*s23^4 + (2*s12 + 6*s13)*s23^5) +
              p1q^4*p2q*((-18*s12^3*s13^2 - 36*s12^2*s13^3 - 18*s12*s13^4)*
                 s23 + (-36*s12^3*s13 - 72*s12^2*s13^2 - 36*s12*s13^3)*
                 s23^2 + (8*s12^3 + 82*s12^2*s13 + 158*s12*s13^2 + 66*s13^3)*
                 s23^3 + (21*s12^2 + 122*s12*s13 + 65*s13^2)*s23^4 +
                (-6*s12 - 20*s13)*s23^5 - 19*s23^6) + p1q^3*p2q^2*(
                (-36*s12^4*s13 - 198*s12^3*s13^2 - 279*s12^2*s13^3 -
                  117*s12*s13^4)*s23 + (-2*s12^4 - 274*s12^3*s13 -
                  647*s12^2*s13^2 - 471*s12*s13^3 - 105*s13^4)*s23^2 +
                (8*s12^3 - 89*s12^2*s13 + 17*s12*s13^2 + 24*s13^3)*s23^3 +
                (39*s12^2 + 289*s12*s13 + 252*s13^2)*s23^4 +
                (14*s12 + 108*s13)*s23^5 - 15*s23^6) + p1q^5*(
                (-18*s12^3*s13 - 36*s12^2*s13^2 - 18*s12*s13^3)*s23^2 +
                (-27*s12^2*s13 - 27*s12*s13^2)*s23^3 + (-3*s12^2 -
                  27*s12*s13 - 15*s13^2)*s23^4 + (-10*s12 - 22*s13)*s23^5 -
                7*s23^6) + p1q^2*p2q^3*(-72*s12^3*s13^3 - 36*s12^2*s13^4 +
                36*s12*s13^5 + (36*s12^4*s13 - 180*s12^3*s13^2 - 558*s12^2*
                   s13^3 - 180*s12*s13^4 + 54*s13^5)*s23 +
                (2*s12^4 - 210*s12^3*s13 - 1063*s12^2*s13^2 - 1152*s12*
                   s13^3 - 229*s13^4)*s23^2 + (12*s12^3 - 272*s12^2*s13 -
                  756*s12*s13^2 - 406*s13^3)*s23^3 + (29*s12^2 + 116*s12*
                   s13 + 8*s13^2)*s23^4 + (16*s12 + 128*s13)*s23^5 -
                3*s23^6)) + p3q^3*(p2q^3*(-36*s12^5*s13 + 180*s12^4*s13^2 +
                108*s12^3*s13^3 - 108*s12^2*s13^4 + (72*s12^4*s13 +
                  396*s12^3*s13^2 - 108*s12^2*s13^3 - 72*s12*s13^4)*s23 +
                (s12^4 + 208*s12^3*s13 + 108*s12^2*s13^2 - 136*s12*s13^3 -
                  s13^4)*s23^2 + (-2*s12^3 + 102*s12^2*s13 - 58*s12*s13^2 -
                  2*s13^3)*s23^3 + (-3*s12^2 + 6*s12*s13 - s13^2)*s23^4) +
              p1q*p2q^2*(-36*s12^5*s13 + 144*s12^4*s13^2 + 108*s12^3*s13^3 -
                72*s12^2*s13^4 + (279*s12^4*s13 + 513*s12^3*s13^2 -
                  153*s12^2*s13^3 - 99*s12*s13^4)*s23 + (5*s12^4 +
                  357*s12^3*s13 - 42*s12^2*s13^2 - 205*s12*s13^3 - 9*s13^4)*
                 s23^2 + (-8*s12^3 - 30*s12^2*s13 - 150*s12*s13^2 - 8*s13^3)*
                 s23^3 + (-7*s12^2 - 46*s12*s13 + 3*s13^2)*s23^4 +
                (6*s12 + 2*s13)*s23^5) + p1q^2*p2q*(36*s12^4*s13^2 +
                36*s12^3*s13^3 + (180*s12^4*s13 + 162*s12^3*s13^2 -
                  72*s12^2*s13^3 - 18*s12*s13^4)*s23 + (-5*s12^4 -
                  10*s12^3*s13 - 305*s12^2*s13^2 - 84*s12*s13^3)*s23^2 +
                (-36*s12^3 - 204*s12^2*s13 - 36*s12*s13^2 + 18*s13^3)*s23^3 +
                (-14*s12^2 + 30*s12*s13 + 19*s13^2)*s23^4 + 16*s12*s23^5 -
                s23^6) + p1q^3*((9*s12^4*s13 - 9*s12^3*s13^2 - 18*s12^2*
                   s13^3)*s23 + (-3*s12^4 - 81*s12^3*s13 - 105*s12^2*s13^2)*
                 s23^2 + (-12*s12^3 - 43*s12^2*s13 + 53*s12*s13^2)*s23^3 +
                (6*s12^2 + 59*s12*s13 - 9*s13^2)*s23^4 + (14*s12 - 10*s13)*
                 s23^5 - s23^6)))*Log(p3q/(p1q + p2q + p3q)))/
          (4*p1q*p3q^5*s12^4*s13*s23^2 + p1q*p2q^5*(-4*s12*s13^4*s23^2 -
             4*s12*s13^3*s23^3) + p1q^2*p2q^4*(-8*s12*s13^4*s23^2 +
             8*s12*s13^2*s23^4) + p1q^4*p2q^2*(8*s12*s13^3*s23^3 -
             8*s12*s13*s23^5) + p1q^5*p2q*(-4*s12*s13^2*s23^4 -
             4*s12*s13*s23^5) + p1q^3*p2q^3*(-4*s12*s13^4*s23^2 +
             12*s12*s13^3*s23^3 + 12*s12*s13^2*s23^4 - 4*s12*s13*s23^5) +
           p3q^4*(p1q^2*((4*s12^4*s13 - 4*s12^3*s13^2)*s23^2 - 12*s12^3*s13*
                s23^3) + p1q*p2q*((8*s12^4*s13 - 12*s12^3*s13^2)*s23^2 - 4*
                s12^3*s13*s23^3)) + p3q^3*(p1q*p2q^2*((4*s12^4*s13 -
                 24*s12^3*s13^2 + 12*s12^2*s13^3)*s23^2 + (-8*s12^3*s13 +
                 8*s12^2*s13^2)*s23^3) + p1q^2*p2q*((4*s12^4*s13 -
                 20*s12^3*s13^2 + 8*s12^2*s13^3)*s23^2 + (-28*s12^3*s13 +
                 8*s12^2*s13^2)*s23^3 + 8*s12^2*s13*s23^4) +
             p1q^3*(-4*s12^3*s13^2*s23^2 + (-12*s12^3*s13 + 8*s12^2*s13^2)*
                s23^3 + 12*s12^2*s13*s23^4)) +
           p3q*(p1q*p2q^4*((12*s12^2*s13^3 - 8*s12*s13^4)*s23^2 +
               (8*s12^2*s13^2 - 8*s12*s13^3)*s23^3) + p1q^2*p2q^3*
              ((20*s12^2*s13^3 - 12*s12*s13^4)*s23^2 + (16*s12^2*s13^2 +
                 4*s12*s13^3)*s23^3 + (8*s12^2*s13 + 16*s12*s13^2)*s23^4) +
             p1q^4*p2q*((8*s12^2*s13^2 + 8*s12*s13^3)*s23^3 + (12*s12^2*s13 -
                 4*s12*s13^2)*s23^4 - 12*s12*s13*s23^5) + p1q^3*p2q^2*
              ((8*s12^2*s13^3 - 4*s12*s13^4)*s23^2 + (16*s12^2*s13^2 +
                 20*s12*s13^3)*s23^3 + (20*s12^2*s13 + 16*s12*s13^2)*s23^4 -
               8*s12*s13*s23^5) + p1q^5*(-4*s12*s13^2*s23^4 - 4*s12*s13*
                s23^5)) + p3q^2*(p1q*p2q^3*((-12*s12^3*s13^2 + 24*s12^2*
                  s13^3 - 4*s12*s13^4)*s23^2 + (-4*s12^3*s13 + 16*s12^2*
                  s13^2 - 4*s12*s13^3)*s23^3) + p1q^2*p2q^2*
              ((-16*s12^3*s13^2 + 28*s12^2*s13^3 - 4*s12*s13^4)*s23^2 +
               (-16*s12^3*s13 + 24*s12^2*s13^2 + 4*s12*s13^3)*s23^3 +
               (16*s12^2*s13 + 8*s12*s13^2)*s23^4) + p1q^4*(8*s12^2*s13^2*
                s23^3 + (12*s12^2*s13 - 4*s12*s13^2)*s23^4 - 4*s12*s13*
                s23^5) + p1q^3*p2q*((-4*s12^3*s13^2 + 8*s12^2*s13^3)*s23^2 +
               (-12*s12^3*s13 + 24*s12^2*s13^2 + 8*s12*s13^3)*s23^3 +
               (32*s12^2*s13 + 4*s12*s13^2)*s23^4 - 4*s12*s13*s23^5))) +
         ((p3q^6*((9*s12^4*s13 + 9*s12^3*s13^2)*s23 + (s12^4 + 10*s12^3*s13)*
               s23^2 + s12^3*s23^3) + p2q^6*(36*s12^2*s13^4 + 36*s12*s13^5 +
              (81*s12^2*s13^3 + 189*s12*s13^4 + 72*s13^5)*s23 +
              (152*s12*s13^3 + 143*s13^4)*s23^2 + (-(s12*s13^2) + 70*s13^3)*
               s23^3 - s13^2*s23^4) + p1q*p2q^5*(72*s12^2*s13^4 +
              72*s12*s13^5 + (90*s12^2*s13^3 + 297*s12*s13^4 + 135*s13^5)*
               s23 + (-165*s12^2*s13^2 - 99*s12*s13^3 + 111*s13^4)*s23^2 +
              (-314*s12*s13^2 - 173*s13^3)*s23^3 + (2*s12*s13 - 147*s13^2)*
               s23^4 + 2*s13*s23^5) + p1q^6*((9*s12^2*s13 + 18*s12*s13^2 +
                9*s13^3)*s23^3 + (18*s12*s13 + 18*s13^2)*s23^4 +
              9*s13*s23^5) + p1q^4*p2q^2*((9*s12^2*s13^3 + 18*s12*s13^4 +
                9*s13^5)*s23 + (36*s12^3*s13 + 54*s12^2*s13^2 + 18*s12*s13^3)*
               s23^2 + (2*s12^3 + 172*s12^2*s13 + 227*s12*s13^2 + 66*s13^3)*
               s23^3 + (180*s12*s13 + 123*s13^2)*s23^4 + (-15*s12 + 35*s13)*
               s23^5 - 13*s23^6) + p1q^5*p2q*((-18*s12^2*s13^2 -
                36*s12*s13^3 - 18*s13^4)*s23^2 + (18*s12^2*s13 -
                9*s12*s13^2 - 27*s13^3)*s23^3 + (-3*s12^2 + 9*s12*s13 -
                15*s13^2)*s23^4 + (-10*s12 - 13*s13)*s23^5 - 7*s23^6) +
            p1q^3*p2q^3*((-36*s12^3*s13^2 - 108*s12^2*s13^3 - 63*s12*s13^4 +
                9*s13^5)*s23 + (34*s12^3*s13 - 133*s12^2*s13^2 -
                335*s12*s13^3 - 123*s13^4)*s23^2 + (2*s12^3 + 244*s12^2*s13 +
                137*s12*s13^2 - 72*s13^3)*s23^3 + (3*s12^2 + 355*s12*s13 +
                206*s13^2)*s23^4 + (-6*s12 + 139*s13)*s23^5 - 7*s23^6) +
            p1q^2*p2q^4*(36*s12^2*s13^4 + 36*s12*s13^5 + (-36*s12^3*s13^2 -
                108*s12^2*s13^3 + 27*s12*s13^4 + 63*s13^5)*s23 +
              (-2*s12^3*s13 - 370*s12^2*s13^2 - 640*s12*s13^3 - 173*s13^4)*
               s23^2 + (81*s12^2*s13 - 430*s12*s13^2 - 417*s13^3)*s23^3 +
              (168*s12*s13 - 96*s13^2)*s23^4 + (-s12 + 84*s13)*s23^5 -
              s23^6) + p3q^5*(p1q*((27*s12^4*s13 + 27*s12^3*s13^2)*s23 +
                (3*s12^4 + 3*s12^3*s13 - 27*s12^2*s13^2)*s23^2 -
                30*s12^2*s13*s23^3 - 3*s12^2*s23^4) + p2q*(-36*s12^5*s13 -
                36*s12^4*s13^2 + (-36*s12^4*s13 - 18*s12^3*s13^2 -
                  18*s12^2*s13^3)*s23 + (3*s12^4 - 21*s12^2*s13^2)*s23^2 +
                (2*s12^3 - 4*s12^2*s13)*s23^3 - s12^2*s23^4)) +
            p3q^4*(p2q^2*(-72*s12^5*s13 + 36*s12^4*s13^2 + 108*s12^3*s13^3 +
                (-54*s12^4*s13 + 162*s12^3*s13^2 + 45*s12^2*s13^3 +
                  9*s12*s13^4)*s23 + (3*s12^4 + 48*s12^3*s13 + 66*s12^2*
                   s13^2 + 12*s12*s13^3)*s23^2 + (26*s12^2*s13 + 5*s12*s13^2)*
                 s23^3 + (-3*s12^2 + 2*s12*s13)*s23^4) + p1q*p2q*(
                -36*s12^5*s13 + 36*s12^3*s13^3 + (108*s12^4*s13 + 189*s12^3*
                   s13^2 + 9*s12^2*s13^3)*s23 + (7*s12^4 + 139*s12^3*s13 -
                  3*s12^2*s13^2)*s23^2 + (-4*s12^3 - 21*s12^2*s13 +
                  2*s12*s13^2)*s23^3 + (-9*s12^2 + 4*s12*s13)*s23^4 +
                2*s12*s23^5) + p1q^2*((36*s12^4*s13 + 27*s12^3*s13^2 -
                  9*s12^2*s13^3)*s23 + (s12^4 - 30*s12^3*s13 - 76*s12^2*
                   s13^2)*s23^2 + (-11*s12^3 - 52*s12^2*s13 + 27*s12*s13^2)*
                 s23^3 + (-9*s12^2 + 30*s12*s13)*s23^4 + 3*s12*s23^5)) +
            p3q^2*(p2q^4*(108*s12^4*s13^2 - 108*s12^3*s13^3 - 180*s12^2*
                 s13^4 + 36*s12*s13^5 + (81*s12^4*s13 + 45*s12^3*s13^2 -
                  558*s12^2*s13^3 - 126*s12*s13^4 + 36*s13^5)*s23 +
                (150*s12^3*s13 - 282*s12^2*s13^2 - 372*s12*s13^3 + 69*s13^4)*
                 s23^2 + (-s12^3 + 74*s12^2*s13 - 204*s12*s13^2 + 30*s13^3)*
                 s23^3 + (-s12^2 + 6*s12*s13 - 3*s13^2)*s23^4) +
              p1q*p2q^3*(144*s12^4*s13^2 - 108*s12^3*s13^3 - 216*s12^2*
                 s13^4 + 36*s12*s13^5 + (234*s12^4*s13 + 171*s12^3*s13^2 -
                  783*s12^2*s13^3 - 225*s12*s13^4 + 63*s13^5)*s23 +
                (s12^4 + 133*s12^3*s13 - 768*s12^2*s13^2 - 821*s12*s13^3 +
                  25*s13^4)*s23^2 + (-4*s12^3 - 289*s12^2*s13 - 712*s12*
                   s13^2 - 109*s13^3)*s23^3 + (s12^2 - 170*s12*s13 -
                  65*s13^2)*s23^4 + (6*s12 + 6*s13)*s23^5) +
              p1q^3*p2q*((18*s12^4*s13 - 99*s12^3*s13^2 - 171*s12^2*s13^3 -
                  54*s12*s13^4)*s23 + (-5*s12^4 - 227*s12^3*s13 - 493*s12^2*
                   s13^2 - 226*s12*s13^3 - 36*s13^4)*s23^2 +
                (-6*s12^3 - 151*s12^2*s13 - 13*s12*s13^2 - 3*s13^3)*s23^3 +
                (42*s12^2 + 137*s12*s13 + 37*s13^2)*s23^4 + (34*s12 - 5*s13)*
                 s23^5 - 9*s23^6) + p1q^4*((9*s12^4*s13 + 18*s12^3*s13^2 +
                  9*s12^2*s13^3)*s23 + (18*s12^2*s13^2 + 18*s12*s13^3)*
                 s23^2 + (6*s12^3 + 63*s12^2*s13 + 93*s12*s13^2 + 9*s13^3)*
                 s23^3 + (21*s12^2 + 68*s12*s13 - 4*s13^2)*s23^4 +
                (9*s12 - 19*s13)*s23^5 - 6*s23^6) + p1q^2*p2q^2*(
                36*s12^4*s13^2 - 36*s12^3*s13^3 - 72*s12^2*s13^4 +
                (144*s12^4*s13 - 81*s12^3*s13^2 - 513*s12^2*s13^3 -
                  153*s12*s13^4 + 27*s13^5)*s23 + (-4*s12^4 - 260*s12^3*s13 -
                  1066*s12^2*s13^2 - 668*s12*s13^3 - 56*s13^4)*s23^2 +
                (-13*s12^3 - 541*s12^2*s13 - 533*s12*s13^2 - 79*s13^3)*
                 s23^3 + (24*s12^2 - 52*s12*s13 + 51*s13^2)*s23^4 +
                (30*s12 + 44*s13)*s23^5 - 3*s23^6)) +
            p3q*(p2q^5*(-108*s12^3*s13^3 - 36*s12^2*s13^4 + 72*s12*s13^5 +
                (-162*s12^3*s13^2 - 306*s12^2*s13^3 + 144*s12*s13^4 +
                  108*s13^5)*s23 + (-303*s12^2*s13^2 - 72*s12*s13^3 +
                  213*s13^4)*s23^2 + (2*s12^2*s13 - 142*s12*s13^2 +
                  102*s13^3)*s23^3 + (2*s12*s13 - 3*s13^2)*s23^4) +
              p1q*p2q^4*(-180*s12^3*s13^3 - 72*s12^2*s13^4 + 108*s12*s13^5 +
                (-324*s12^3*s13^2 - 747*s12^2*s13^3 + 27*s12*s13^4 +
                  162*s13^5)*s23 + (-160*s12^3*s13 - 1083*s12^2*s13^2 -
                  931*s12*s13^3 + 73*s13^4)*s23^2 + (-286*s12^2*s13 -
                  946*s12*s13^2 - 310*s13^3)*s23^3 + (2*s12^2 - 118*s12*s13 -
                  215*s13^2)*s23^4 + (2*s12 + 6*s13)*s23^5) +
              p1q^4*p2q*((-18*s12^3*s13^2 - 36*s12^2*s13^3 - 18*s12*s13^4)*
                 s23 + (-36*s12^3*s13 - 72*s12^2*s13^2 - 36*s12*s13^3)*
                 s23^2 + (8*s12^3 + 82*s12^2*s13 + 158*s12*s13^2 + 66*s13^3)*
                 s23^3 + (21*s12^2 + 122*s12*s13 + 65*s13^2)*s23^4 +
                (-6*s12 - 20*s13)*s23^5 - 19*s23^6) + p1q^3*p2q^2*(
                (-36*s12^4*s13 - 198*s12^3*s13^2 - 279*s12^2*s13^3 -
                  117*s12*s13^4)*s23 + (-2*s12^4 - 274*s12^3*s13 -
                  647*s12^2*s13^2 - 471*s12*s13^3 - 105*s13^4)*s23^2 +
                (8*s12^3 - 89*s12^2*s13 + 17*s12*s13^2 + 24*s13^3)*s23^3 +
                (39*s12^2 + 289*s12*s13 + 252*s13^2)*s23^4 +
                (14*s12 + 108*s13)*s23^5 - 15*s23^6) + p1q^5*(
                (-18*s12^3*s13 - 36*s12^2*s13^2 - 18*s12*s13^3)*s23^2 +
                (-27*s12^2*s13 - 27*s12*s13^2)*s23^3 + (-3*s12^2 -
                  27*s12*s13 - 15*s13^2)*s23^4 + (-10*s12 - 22*s13)*s23^5 -
                7*s23^6) + p1q^2*p2q^3*(-72*s12^3*s13^3 - 36*s12^2*s13^4 +
                36*s12*s13^5 + (36*s12^4*s13 - 180*s12^3*s13^2 - 558*s12^2*
                   s13^3 - 180*s12*s13^4 + 54*s13^5)*s23 +
                (2*s12^4 - 210*s12^3*s13 - 1063*s12^2*s13^2 - 1152*s12*
                   s13^3 - 229*s13^4)*s23^2 + (12*s12^3 - 272*s12^2*s13 -
                  756*s12*s13^2 - 406*s13^3)*s23^3 + (29*s12^2 + 116*s12*
                   s13 + 8*s13^2)*s23^4 + (16*s12 + 128*s13)*s23^5 -
                3*s23^6)) + p3q^3*(p2q^3*(-36*s12^5*s13 + 180*s12^4*s13^2 +
                108*s12^3*s13^3 - 108*s12^2*s13^4 + (72*s12^4*s13 +
                  396*s12^3*s13^2 - 108*s12^2*s13^3 - 72*s12*s13^4)*s23 +
                (s12^4 + 208*s12^3*s13 + 108*s12^2*s13^2 - 136*s12*s13^3 -
                  s13^4)*s23^2 + (-2*s12^3 + 102*s12^2*s13 - 58*s12*s13^2 -
                  2*s13^3)*s23^3 + (-3*s12^2 + 6*s12*s13 - s13^2)*s23^4) +
              p1q*p2q^2*(-36*s12^5*s13 + 144*s12^4*s13^2 + 108*s12^3*s13^3 -
                72*s12^2*s13^4 + (279*s12^4*s13 + 513*s12^3*s13^2 -
                  153*s12^2*s13^3 - 99*s12*s13^4)*s23 + (5*s12^4 +
                  357*s12^3*s13 - 42*s12^2*s13^2 - 205*s12*s13^3 - 9*s13^4)*
                 s23^2 + (-8*s12^3 - 30*s12^2*s13 - 150*s12*s13^2 - 8*s13^3)*
                 s23^3 + (-7*s12^2 - 46*s12*s13 + 3*s13^2)*s23^4 +
                (6*s12 + 2*s13)*s23^5) + p1q^2*p2q*(36*s12^4*s13^2 +
                36*s12^3*s13^3 + (180*s12^4*s13 + 162*s12^3*s13^2 -
                  72*s12^2*s13^3 - 18*s12*s13^4)*s23 + (-5*s12^4 -
                  10*s12^3*s13 - 305*s12^2*s13^2 - 84*s12*s13^3)*s23^2 +
                (-36*s12^3 - 204*s12^2*s13 - 36*s12*s13^2 + 18*s13^3)*s23^3 +
                (-14*s12^2 + 30*s12*s13 + 19*s13^2)*s23^4 + 16*s12*s23^5 -
                s23^6) + p1q^3*((9*s12^4*s13 - 9*s12^3*s13^2 - 18*s12^2*
                   s13^3)*s23 + (-3*s12^4 - 81*s12^3*s13 - 105*s12^2*s13^2)*
                 s23^2 + (-12*s12^3 - 43*s12^2*s13 + 53*s12*s13^2)*s23^3 +
                (6*s12^2 + 59*s12*s13 - 9*s13^2)*s23^4 + (14*s12 - 10*s13)*
                 s23^5 - s23^6)))*Log(s12/(s12 + s13 + s23)))/
          (4*p1q*p3q^5*s12^4*s13*s23^2 + p1q*p2q^5*(-4*s12*s13^4*s23^2 -
             4*s12*s13^3*s23^3) + p1q^2*p2q^4*(-8*s12*s13^4*s23^2 +
             8*s12*s13^2*s23^4) + p1q^4*p2q^2*(8*s12*s13^3*s23^3 -
             8*s12*s13*s23^5) + p1q^5*p2q*(-4*s12*s13^2*s23^4 -
             4*s12*s13*s23^5) + p1q^3*p2q^3*(-4*s12*s13^4*s23^2 +
             12*s12*s13^3*s23^3 + 12*s12*s13^2*s23^4 - 4*s12*s13*s23^5) +
           p3q^4*(p1q^2*((4*s12^4*s13 - 4*s12^3*s13^2)*s23^2 - 12*s12^3*s13*
                s23^3) + p1q*p2q*((8*s12^4*s13 - 12*s12^3*s13^2)*s23^2 - 4*
                s12^3*s13*s23^3)) + p3q^3*(p1q*p2q^2*((4*s12^4*s13 -
                 24*s12^3*s13^2 + 12*s12^2*s13^3)*s23^2 + (-8*s12^3*s13 +
                 8*s12^2*s13^2)*s23^3) + p1q^2*p2q*((4*s12^4*s13 -
                 20*s12^3*s13^2 + 8*s12^2*s13^3)*s23^2 + (-28*s12^3*s13 +
                 8*s12^2*s13^2)*s23^3 + 8*s12^2*s13*s23^4) +
             p1q^3*(-4*s12^3*s13^2*s23^2 + (-12*s12^3*s13 + 8*s12^2*s13^2)*
                s23^3 + 12*s12^2*s13*s23^4)) +
           p3q*(p1q*p2q^4*((12*s12^2*s13^3 - 8*s12*s13^4)*s23^2 +
               (8*s12^2*s13^2 - 8*s12*s13^3)*s23^3) + p1q^2*p2q^3*
              ((20*s12^2*s13^3 - 12*s12*s13^4)*s23^2 + (16*s12^2*s13^2 +
                 4*s12*s13^3)*s23^3 + (8*s12^2*s13 + 16*s12*s13^2)*s23^4) +
             p1q^4*p2q*((8*s12^2*s13^2 + 8*s12*s13^3)*s23^3 + (12*s12^2*s13 -
                 4*s12*s13^2)*s23^4 - 12*s12*s13*s23^5) + p1q^3*p2q^2*
              ((8*s12^2*s13^3 - 4*s12*s13^4)*s23^2 + (16*s12^2*s13^2 +
                 20*s12*s13^3)*s23^3 + (20*s12^2*s13 + 16*s12*s13^2)*s23^4 -
               8*s12*s13*s23^5) + p1q^5*(-4*s12*s13^2*s23^4 - 4*s12*s13*
                s23^5)) + p3q^2*(p1q*p2q^3*((-12*s12^3*s13^2 + 24*s12^2*
                  s13^3 - 4*s12*s13^4)*s23^2 + (-4*s12^3*s13 + 16*s12^2*
                  s13^2 - 4*s12*s13^3)*s23^3) + p1q^2*p2q^2*
              ((-16*s12^3*s13^2 + 28*s12^2*s13^3 - 4*s12*s13^4)*s23^2 +
               (-16*s12^3*s13 + 24*s12^2*s13^2 + 4*s12*s13^3)*s23^3 +
               (16*s12^2*s13 + 8*s12*s13^2)*s23^4) + p1q^4*(8*s12^2*s13^2*
                s23^3 + (12*s12^2*s13 - 4*s12*s13^2)*s23^4 - 4*s12*s13*
                s23^5) + p1q^3*p2q*((-4*s12^3*s13^2 + 8*s12^2*s13^3)*s23^2 +
               (-12*s12^3*s13 + 24*s12^2*s13^2 + 8*s12*s13^3)*s23^3 +
               (32*s12^2*s13 + 4*s12*s13^2)*s23^4 - 4*s12*s13*s23^5))) +
         ((p3q^5*(-s12^4 - s12^3*s13 - s12^3*s23) +
            p2q^5*(s12*s13^3 + s13^4 + (s12*s13^2 + 2*s13^3)*s23 +
              s13^2*s23^2) + p1q*p2q^4*(3*s12^2*s13^2 + 5*s12*s13^3 +
              2*s13^4 + (4*s12*s13^2 + 3*s13^3)*s23 + (-2*s12*s13 - s13^2)*
               s23^2 - 2*s13*s23^3) + p1q^2*p2q^3*(2*s12^3*s13 +
              12*s12^2*s13^2 + 15*s12*s13^3 + 5*s13^4 + (2*s12^2*s13 +
                9*s12*s13^2 + 4*s13^3)*s23 + (-9*s12*s13 - 10*s13^2)*s23^2 +
              (s12 - 8*s13)*s23^3 + s23^4) + p1q^5*((-2*s12^2*s13 -
                4*s12*s13^2 - 2*s13^3)*s23 + (s12^2 - s12*s13 - 2*s13^2)*s23^
                2 + (4*s12 + 3*s13)*s23^3 + 3*s23^4) + p1q^3*p2q^2*
             (6*s12^3*s13 + 19*s12^2*s13^2 + 19*s12*s13^3 + 6*s13^4 +
              (2*s12^3 + 12*s12^2*s13 + 12*s12*s13^2 + s13^3)*s23 +
              (7*s12^2 - s12*s13 - 15*s13^2)*s23^2 + (12*s12 - 3*s13)*s23^3 +
              7*s23^4) + p1q^4*p2q*(4*s12^3*s13 + 10*s12^2*s13^2 +
              8*s12*s13^3 + 2*s13^4 + (2*s12^3 + 8*s12^2*s13 + 2*s12*s13^2 -
                4*s13^3)*s23 + (8*s12^2 + 5*s12*s13 - 9*s13^2)*s23^2 +
              (15*s12 + 6*s13)*s23^3 + 9*s23^4) +
            p3q^4*(p2q*(-2*s12^4 + s12^3*s13 + 3*s12^2*s13^2 +
                (-s12^3 + 4*s12^2*s13)*s23 + s12^2*s23^2) + p1q*(-3*s12^4 -
                3*s12^3*s13 + 3*s12^2*s13*s23 + 3*s12^2*s23^2)) +
            p3q^3*(p2q^2*(-s12^4 + 5*s12^3*s13 + 3*s12^2*s13^2 -
                3*s12*s13^3 + (s12^3 + 6*s12^2*s13 - 5*s12*s13^2)*s23 +
                (2*s12^2 - 2*s12*s13)*s23^2) + p1q^2*(-3*s12^4 - s12^3*s13 +
                2*s12^2*s13^2 + (5*s12^3 + 10*s12^2*s13)*s23 +
                (5*s12^2 - 3*s12*s13)*s23^2 - 3*s12*s23^3) +
              p1q*p2q*(-4*s12^4 + 4*s12^3*s13 + 8*s12^2*s13^2 +
                (4*s12^3 + 14*s12^2*s13 - 2*s12*s13^2)*s23 +
                (6*s12^2 - 4*s12*s13)*s23^2 - 2*s12*s23^3)) +
            p3q^2*(p2q^3*(3*s12^3*s13 - 3*s12^2*s13^2 - 5*s12*s13^3 + s13^4 +
                (s12^3 - 9*s12*s13^2 + 2*s13^3)*s23 + (s12^2 - 4*s12*s13 +
                  s13^2)*s23^2) + p1q*p2q^2*(-s12^4 + 9*s12^3*s13 +
                7*s12^2*s13^2 - 3*s12*s13^3 + (4*s12^3 + 3*s12^2*s13 -
                  16*s12*s13^2 - s13^3)*s23 + (s12^2 - 18*s12*s13 - 3*s13^2)*
                 s23^2 + (-4*s12 - 2*s13)*s23^3) + p1q^2*p2q*(13*s12^3*s13 +
                15*s12^2*s13^2 + 2*s12*s13^3 + (13*s12^3 + 24*s12^2*s13)*
                 s23 + (3*s12^2 - 13*s12*s13 - s13^2)*s23^2 - 9*s12*s23^3 +
                s23^4) + p1q^3*(s12^4 + 7*s12^3*s13 + 8*s12^2*s13^2 +
                2*s12*s13^3 + (10*s12^3 + 15*s12^2*s13 + 2*s12*s13^2)*s23 +
                (2*s12^2 - 7*s12*s13)*s23^2 + (-6*s12 + s13)*s23^3 +
                s23^4)) + p3q*(p2q^4*(-3*s12^2*s13^2 - s12*s13^3 + 2*s13^4 +
                (-2*s12^2*s13 - 3*s12*s13^2 + 4*s13^3)*s23 +
                (-2*s12*s13 + 2*s13^2)*s23^2) + p1q*p2q^3*(-2*s12^3*s13 -
                10*s12^2*s13^2 - 10*s12*s13^3 - 2*s13^4 + (-16*s12^2*s13 -
                  26*s12*s13^2 - 6*s13^3)*s23 + (-2*s12^2 - 20*s12*s13 -
                  8*s13^2)*s23^2 + (-2*s12 - 4*s13)*s23^3) +
              p1q^4*(2*s12^3*s13 + 4*s12^2*s13^2 + 2*s12*s13^3 +
                (-2*s12^3 - 6*s12^2*s13 - 6*s12*s13^2 - 2*s13^3)*s23 +
                (-11*s12^2 - 17*s12*s13 - 4*s13^2)*s23^2 - 7*s12*s23^3 +
                2*s23^4) + p1q^2*p2q^2*(-2*s12^4 - 4*s12^3*s13 -
                9*s12^2*s13^2 - 11*s12*s13^3 - 4*s13^4 + (-6*s12^3 -
                  26*s12^2*s13 - 37*s12*s13^2 - 14*s13^3)*s23 +
                (-15*s12^2 - 41*s12*s13 - 20*s13^2)*s23^2 + (-9*s12 - 8*s13)*
                 s23^3 + 2*s23^4) + p1q^3*p2q*(-2*s12^4 + 2*s12^2*s13^2 -
                2*s12*s13^3 - 2*s13^4 + (-8*s12^3 - 18*s12^2*s13 -
                  24*s12*s13^2 - 12*s13^3)*s23 + (-24*s12^2 - 42*s12*s13 -
                  20*s13^2)*s23^2 + (-14*s12 - 6*s13)*s23^3 + 4*s23^4)))*
           Log(s13/(s12 + s13 + s23)))/(4*p1q*p3q^4*s12^4*s13 +
           p1q*p2q^4*(-4*s12*s13^4 - 4*s12*s13^3*s23) +
           p1q^2*p2q^3*(-8*s12*s13^4 + 8*s12*s13^2*s23^2) +
           p1q^4*p2q*(8*s12*s13^3*s23 - 8*s12*s13*s23^3) +
           p1q^5*(-4*s12*s13^2*s23^2 - 4*s12*s13*s23^3) +
           p1q^3*p2q^2*(-4*s12*s13^4 + 12*s12*s13^3*s23 + 12*s12*s13^2*
              s23^2 - 4*s12*s13*s23^3) + p3q^3*(p1q^2*(4*s12^4*s13 - 4*s12^3*
                s13^2 - 12*s12^3*s13*s23) + p1q*p2q*(4*s12^4*s13 - 12*s12^3*
                s13^2 - 4*s12^3*s13*s23)) +
           p3q^2*(p1q*p2q^2*(-12*s12^3*s13^2 + 12*s12^2*s13^3 +
               (-4*s12^3*s13 + 8*s12^2*s13^2)*s23) + p1q^2*p2q*
              (-16*s12^3*s13^2 + 8*s12^2*s13^3 + (-16*s12^3*s13 +
                 8*s12^2*s13^2)*s23 + 8*s12^2*s13*s23^2) +
             p1q^3*(-4*s12^3*s13^2 + (-12*s12^3*s13 + 8*s12^2*s13^2)*s23 + 12*
                s12^2*s13*s23^2)) + p3q*(p1q*p2q^3*(12*s12^2*s13^3 - 4*s12*
                s13^4 + (8*s12^2*s13^2 - 4*s12*s13^3)*s23) +
             p1q^2*p2q^2*(20*s12^2*s13^3 - 4*s12*s13^4 + (16*s12^2*s13^2 +
                 4*s12*s13^3)*s23 + (8*s12^2*s13 + 8*s12*s13^2)*s23^2) +
             p1q^4*(8*s12^2*s13^2*s23 + (12*s12^2*s13 - 4*s12*s13^2)*s23^2 -
               4*s12*s13*s23^3) + p1q^3*p2q*(8*s12^2*s13^3 +
               (16*s12^2*s13^2 + 8*s12*s13^3)*s23 + (20*s12^2*s13 +
                 4*s12*s13^2)*s23^2 - 4*s12*s13*s23^3))) +
         ((p3q^6*(-9*s12^4 - 9*s12^3*s13 - 9*s12^3*s23) +
            p2q^6*(-45*s12^2*s13^2 - 81*s12*s13^3 - 36*s13^4 +
              (-81*s12*s13^2 - 72*s13^3)*s23 - 36*s13^2*s23^2) +
            p1q*p2q^5*(-54*s12^2*s13^2 - 117*s12*s13^3 - 63*s13^4 +
              (126*s12^2*s13 + 126*s12*s13^2 - 9*s13^3)*s23 +
              (234*s12*s13 + 162*s13^2)*s23^2 + 108*s13*s23^3) +
            p1q^5*p2q*((18*s12^2*s13 + 36*s12*s13^2 + 18*s13^3)*s23 +
              (-18*s12^2 + 9*s12*s13 + 27*s13^2)*s23^2 + (-18*s12 + 9*s13)*
               s23^3) + p1q^3*p2q^3*(-36*s12^3*s13 - 90*s12^2*s13^2 -
              81*s12*s13^3 - 27*s13^4 + (-108*s12^3 - 162*s12^2*s13 -
                36*s12*s13^2 + 9*s13^3)*s23 + (-324*s12^2 - 297*s12*s13 -
                27*s13^2)*s23^2 + (-288*s12 - 135*s13)*s23^3 - 72*s23^4) +
            p1q^2*p2q^4*(-36*s12^3*s13 - 90*s12^2*s13^2 - 99*s12*s13^3 -
              45*s13^4 + (-72*s12^3 - 18*s12^2*s13 + 153*s12*s13^2 +
                72*s13^3)*s23 + (-225*s12^2 - 9*s12*s13 + 171*s13^2)*s23^2 +
              (-225*s12 - 18*s13)*s23^3 - 72*s23^4) +
            p1q^6*((-9*s12^2 - 18*s12*s13 - 9*s13^2)*s23^2 +
              (-18*s12 - 18*s13)*s23^3 - 9*s23^4) + p1q^4*p2q^2*
             (-9*s12^2*s13^2 - 18*s12*s13^3 - 9*s13^4 + (-36*s12^3 +
                54*s12*s13^2 + 18*s13^3)*s23 + (-108*s12^2 - 27*s12*s13 +
                36*s13^2)*s23^2 + (-63*s12 + 18*s13)*s23^3 + 9*s23^4) +
            p3q^5*(p2q*(-36*s12^4 - 18*s12^3*s13 + 18*s12^2*s13^2 +
                (-36*s12^3 + 18*s12^2*s13)*s23) + p1q*(-27*s12^4 -
                27*s12^3*s13 + 27*s12^2*s13*s23 + 27*s12^2*s23^2)) +
            p3q^4*(p2q^2*(-54*s12^4 + 18*s12^3*s13 + 63*s12^2*s13^2 -
                9*s12*s13^3 + (-54*s12^3 + 72*s12^2*s13 - 9*s12*s13^2)*s23) +
              p1q*p2q*(-72*s12^4 - 9*s12^3*s13 + 63*s12^2*s13^2 +
                (36*s12^3 + 171*s12^2*s13)*s23 + 108*s12^2*s23^2) +
              p1q^2*(-36*s12^4 - 27*s12^3*s13 + 9*s12^2*s13^2 +
                (27*s12^3 + 72*s12^2*s13)*s23 + (36*s12^2 - 27*s12*s13)*
                 s23^2 - 27*s12*s23^3)) + p3q^3*(p2q^3*(-72*s12^4 +
                36*s12^2*s13^2 - 36*s12*s13^3 + (-108*s12^3 + 36*s12^2*s13 -
                  36*s12*s13^2)*s23 - 36*s12^2*s23^2) + p1q*p2q^2*(
                -99*s12^4 - 9*s12^3*s13 + 45*s12^2*s13^2 - 45*s12*s13^3 +
                (18*s12^3 + 135*s12^2*s13 - 108*s12*s13^2 + 9*s13^3)*s23 +
                (117*s12^2 - 72*s12*s13 + 9*s13^2)*s23^2) + p1q^2*p2q*(
                -54*s12^4 + 18*s12^3*s13 + 54*s12^2*s13^2 - 18*s12*s13^3 +
                (126*s12^3 + 216*s12^2*s13 - 54*s12*s13^2)*s23 +
                (72*s12^2 - 162*s12*s13 - 18*s13^2)*s23^2 +
                (-108*s12 - 18*s13)*s23^3) + p1q^3*(-9*s12^4 + 9*s12^3*s13 +
                18*s12^2*s13^2 + (72*s12^3 + 99*s12^2*s13)*s23 +
                (36*s12^2 - 45*s12*s13)*s23^2 + (-36*s12 + 9*s13)*s23^3 +
                9*s23^4)) + p3q^2*(p2q^4*(-45*s12^4 + 63*s12^3*s13 +
                126*s12^2*s13^2 + 18*s12*s13^3 + (-81*s12^3 + 144*s12^2*s13 +
                  90*s12*s13^2)*s23 + (-36*s12^2 + 72*s12*s13)*s23^2) +
              p1q^2*p2q^2*(-18*s12^4 + 81*s12^3*s13 + 99*s12^2*s13^2 +
                9*s12*s13^3 + 9*s13^4 + (189*s12^3 + 396*s12^2*s13 +
                  207*s12*s13^2 + 126*s13^3)*s23 + (117*s12^2 + 36*s12*s13 +
                  153*s13^2)*s23^2 + (-90*s12 + 36*s13)*s23^3) +
              p1q*p2q^3*(-54*s12^4 + 81*s12^3*s13 + 171*s12^2*s13^2 +
                45*s12*s13^3 + 9*s13^4 + (72*s12^3 + 387*s12^2*s13 +
                  270*s12*s13^2 + 117*s13^3)*s23 + (198*s12^2 + 270*s12*s13 +
                  180*s13^2)*s23^2 + (72*s12 + 72*s13)*s23^3) +
              p1q^4*(-9*s12^4 - 18*s12^3*s13 - 9*s12^2*s13^2 +
                (-18*s12^2*s13 - 18*s12*s13^2)*s23 + (-45*s12^2 -
                  81*s12*s13 - 9*s13^2)*s23^2 - 45*s12*s23^3 + 9*s23^4) +
              p1q^3*p2q*(-18*s12^4 + 9*s12^3*s13 + 27*s12^2*s13^2 +
                (72*s12^3 + 135*s12^2*s13 + 54*s12*s13^2 + 36*s13^3)*s23 +
                (-72*s12^2 - 135*s12*s13 + 45*s13^2)*s23^2 +
                (-126*s12 + 45*s13)*s23^3 + 36*s23^4)) +
            p3q*(p2q^5*(90*s12^3*s13 + 90*s12^2*s13^2 - 36*s12*s13^3 -
                36*s13^4 + (162*s12^2*s13 + 36*s12*s13^2 - 72*s13^3)*s23 +
                (72*s12*s13 - 36*s13^2)*s23^2) + p1q*p2q^4*(108*s12^3*s13 +
                135*s12^2*s13^2 - 27*s12*s13^3 - 54*s13^4 +
                (54*s12^3 + 414*s12^2*s13 + 396*s12*s13^2 + 63*s13^3)*s23 +
                (90*s12^2 + 432*s12*s13 + 261*s13^2)*s23^2 +
                (36*s12 + 144*s13)*s23^3) + p1q^2*p2q^3*(36*s12^4 +
                108*s12^3*s13 + 72*s12^2*s13^2 - 36*s12*s13^3 - 36*s13^4 +
                (162*s12^3 + 450*s12^2*s13 + 414*s12*s13^2 + 126*s13^3)*s23 +
                (72*s12^2 + 270*s12*s13 + 234*s13^2)*s23^2 +
                (-90*s12 + 36*s13)*s23^3 - 36*s23^4) + p1q^5*(
                (18*s12^3 + 36*s12^2*s13 + 18*s12*s13^2)*s23 +
                (27*s12^2 + 27*s12*s13)*s23^2 + (18*s12 + 9*s13)*s23^3 +
                9*s23^4) + p1q^3*p2q^2*(36*s12^4 + 108*s12^3*s13 +
                81*s12^2*s13^2 - 9*s12*s13^3 - 18*s13^4 + (126*s12^3 +
                  324*s12^2*s13 + 216*s12*s13^2 + 27*s13^3)*s23 +
                (-27*s12^2 + 27*s12*s13 + 27*s13^2)*s23^2 + (-90*s12 + 9*s13)*
                 s23^3 + 27*s23^4) + p1q^4*p2q*(18*s12^3*s13 + 36*s12^2*
                 s13^2 + 18*s12*s13^3 + (36*s12^3 + 126*s12^2*s13 +
                  108*s12*s13^2 + 18*s13^3)*s23 + (54*s12*s13 + 36*s13^2)*
                 s23^2 + (18*s12 + 72*s13)*s23^3 + 54*s23^4)))*
           Log(s23/(s12 + s13 + s23)))/(4*p1q*p3q^5*s12^4*s23 +
           p1q*p2q^5*(-4*s12*s13^3*s23 - 4*s12*s13^2*s23^2) +
           p1q^2*p2q^4*(-8*s12*s13^3*s23 + 8*s12*s13*s23^3) +
           p1q^4*p2q^2*(8*s12*s13^2*s23^2 - 8*s12*s23^4) +
           p1q^5*p2q*(-4*s12*s13*s23^3 - 4*s12*s23^4) +
           p1q^3*p2q^3*(-4*s12*s13^3*s23 + 12*s12*s13^2*s23^2 +
             12*s12*s13*s23^3 - 4*s12*s23^4) +
           p3q^4*(p1q^2*((4*s12^4 - 4*s12^3*s13)*s23 - 12*s12^3*s23^2) +
             p1q*p2q*((8*s12^4 - 12*s12^3*s13)*s23 - 4*s12^3*s23^2)) +
           p3q^3*(p1q*p2q^2*((4*s12^4 - 24*s12^3*s13 + 12*s12^2*s13^2)*s23 +
               (-8*s12^3 + 8*s12^2*s13)*s23^2) + p1q^2*p2q*
              ((4*s12^4 - 20*s12^3*s13 + 8*s12^2*s13^2)*s23 + (-28*s12^3 +
                 8*s12^2*s13)*s23^2 + 8*s12^2*s23^3) +
             p1q^3*(-4*s12^3*s13*s23 + (-12*s12^3 + 8*s12^2*s13)*s23^2 + 12*
                s12^2*s23^3)) + p3q*(p1q*p2q^4*((12*s12^2*s13^2 -
                 8*s12*s13^3)*s23 + (8*s12^2*s13 - 8*s12*s13^2)*s23^2) +
             p1q^2*p2q^3*((20*s12^2*s13^2 - 12*s12*s13^3)*s23 +
               (16*s12^2*s13 + 4*s12*s13^2)*s23^2 + (8*s12^2 + 16*s12*s13)*
                s23^3) + p1q^4*p2q*((8*s12^2*s13 + 8*s12*s13^2)*s23^2 +
               (12*s12^2 - 4*s12*s13)*s23^3 - 12*s12*s23^4) +
             p1q^3*p2q^2*((8*s12^2*s13^2 - 4*s12*s13^3)*s23 + (16*s12^2*s13 +
                 20*s12*s13^2)*s23^2 + (20*s12^2 + 16*s12*s13)*s23^3 - 8*s12*
                s23^4) + p1q^5*(-4*s12*s13*s23^3 - 4*s12*s23^4)) +
           p3q^2*(p1q*p2q^3*((-12*s12^3*s13 + 24*s12^2*s13^2 - 4*s12*s13^3)*
                s23 + (-4*s12^3 + 16*s12^2*s13 - 4*s12*s13^2)*s23^2) +
             p1q^2*p2q^2*((-16*s12^3*s13 + 28*s12^2*s13^2 - 4*s12*s13^3)*
                s23 + (-16*s12^3 + 24*s12^2*s13 + 4*s12*s13^2)*s23^2 +
               (16*s12^2 + 8*s12*s13)*s23^3) + p1q^4*(8*s12^2*s13*s23^2 +
               (12*s12^2 - 4*s12*s13)*s23^3 - 4*s12*s23^4) +
             p1q^3*p2q*((-4*s12^3*s13 + 8*s12^2*s13^2)*s23 + (-12*s12^3 +
                 24*s12^2*s13 + 8*s12*s13^2)*s23^2 + (32*s12^2 + 4*s12*s13)*
                s23^3 - 4*s12*s23^4))) +
         ((p2q*p3q^4*(18*s12^4*s13 + 18*s12^3*s13^2 + (36*s12^3*s13 +
                18*s12^2*s13^2)*s23 + 18*s12^2*s13*s23^2) +
            p2q^5*(18*s12^2*s13^3 + 18*s12*s13^4 + (36*s12*s13^3 + 18*s13^4)*
               s23 + 18*s13^3*s23^2) + p1q*p2q^4*(18*s12^2*s13^3 +
              18*s12*s13^4 + (-18*s12^2*s13^2 + 18*s12*s13^3 + 18*s13^4)*
               s23 + (-38*s12*s13^2 - 2*s13^3)*s23^2 - 20*s13^2*s23^3) +
            p1q^2*p2q^3*((-36*s12^3*s13 - 99*s12^2*s13^2 - 72*s12*s13^3 -
                9*s13^4)*s23 + (-71*s12^2*s13 - 144*s12*s13^2 - 55*s13^3)*s23^
                2 + (-33*s12*s13 - 44*s13^2)*s23^3 + 2*s13*s23^4) +
            p1q^3*p2q^2*((2*s12^3 + 32*s12^2*s13 + 40*s12*s13^2 + 10*s13^3)*
               s23^2 + (5*s12^2 + 63*s12*s13 + 40*s13^2)*s23^3 +
              (3*s12 + 30*s13)*s23^4) + p1q^4*p2q*((-s12^2 - 2*s12*s13 -
                s13^2)*s23^3 + (-3*s12 - 3*s13)*s23^4 - 2*s23^5) +
            p3q^3*(p2q^2*(36*s12^4*s13 - 36*s12^2*s13^3 + (72*s12^3*s13 -
                  36*s12^2*s13^2 - 36*s12*s13^3)*s23 + (36*s12^2*s13 -
                  36*s12*s13^2)*s23^2) + p1q*p2q*(18*s12^4*s13 +
                18*s12^3*s13^2 + (-36*s12^2*s13^2 - 18*s12*s13^3)*s23 +
                (-52*s12^2*s13 - 52*s12*s13^2)*s23^2 - 34*s12*s13*s23^3) +
              p1q^2*((s12^3 + 2*s12^2*s13 + s12*s13^2)*s23^2 +
                (3*s12^2 + 3*s12*s13)*s23^3 + 2*s12*s23^4)) +
            p3q^2*(p2q^3*(18*s12^4*s13 - 54*s12^3*s13^2 - 54*s12^2*s13^3 +
                18*s12*s13^4 + (36*s12^3*s13 - 126*s12^2*s13^2 -
                  36*s12*s13^3 + 18*s13^4)*s23 + (18*s12^2*s13 -
                  72*s12*s13^2 + 18*s13^3)*s23^2) + p1q*p2q^2*(18*s12^4*s13 -
                18*s12^3*s13^2 - 36*s12^2*s13^3 + (-36*s12^3*s13 -
                  162*s12^2*s13^2 - 54*s12*s13^3 + 18*s13^4)*s23 +
                (-122*s12^2*s13 - 142*s12*s13^2 + 16*s13^3)*s23^2 +
                (-68*s12*s13 - 2*s13^2)*s23^3) + p1q^2*p2q*(
                (-45*s12^3*s13 - 72*s12^2*s13^2 - 27*s12*s13^3)*s23 +
                (4*s12^3 - 63*s12^2*s13 - 50*s12*s13^2 - s13^3)*s23^2 +
                (10*s12^2 + 2*s12*s13 + 17*s13^2)*s23^3 + (6*s12 + 18*s13)*
                 s23^4) + p1q^3*((s12^3 + 2*s12^2*s13 + s12*s13^2)*s23^2 +
                (2*s12^2 + s12*s13 - s13^2)*s23^3 + (-s12 - 3*s13)*s23^4 -
                2*s23^5)) + p3q*(p2q^4*(-36*s12^3*s13^2 + 36*s12*s13^4 +
                (-72*s12^2*s13^2 + 36*s12*s13^3 + 36*s13^4)*s23 +
                (-36*s12*s13^2 + 36*s13^3)*s23^2) + p1q*p2q^3*(-36*s12^3*
                 s13^2 - 18*s12^2*s13^3 + 18*s12*s13^4 + (-54*s12^3*s13 -
                  198*s12^2*s13^2 - 72*s12*s13^3 + 18*s13^4)*s23 +
                (-106*s12^2*s13 - 200*s12*s13^2 - 22*s13^3)*s23^2 +
                (-52*s12*s13 - 40*s13^2)*s23^3) + p1q^2*p2q^2*(
                (-45*s12^3*s13 - 99*s12^2*s13^2 - 63*s12*s13^3 - 9*s13^4)*
                 s23 + (3*s12^3 - 46*s12^2*s13 - 87*s12*s13^2 - 38*s13^3)*
                 s23^2 + (7*s12^2 + 38*s12*s13 + 9*s13^2)*s23^3 +
                (4*s12 + 38*s13)*s23^4) + p1q^4*((-s12^2 - 2*s12*s13 - s13^2)*
                 s23^3 + (-3*s12 - 3*s13)*s23^4 - 2*s23^5) +
              p1q^3*p2q*((3*s12^3 + 34*s12^2*s13 + 41*s12*s13^2 + 10*s13^3)*
                 s23^2 + (7*s12^2 + 64*s12*s13 + 39*s13^2)*s23^3 +
                (2*s12 + 27*s13)*s23^4 - 2*s23^5)))*
           Log((s13 + s23)/(s12 + s13 + s23)))/(2*p1q*p3q^4*s12^3*s13*s23^2 +
           2*p1q*p2q^4*s12*s13^3*s23^2 + 2*p1q^4*p2q*s12*s13*s23^4 +
           p1q^2*p2q^3*(2*s12*s13^3*s23^2 - 4*s12*s13^2*s23^3) +
           p1q^3*p2q^2*(-4*s12*s13^2*s23^3 + 2*s12*s13*s23^4) +
           p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
             p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
           p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*
              s23^2 + p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
               (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) + p1q^3*(-4*s12^2*s13*
                s23^3 + 2*s12*s13*s23^4)) +
           p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
             2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*((-4*s12^2*s13^2 +
                 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*s13^2)*s23^3) +
             p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*s23^3 + 4*s12*s13*
                s23^4)))) + Log(s12/(s12 + s13 + s23))*
        ((p2q^2*(-135*s12^3*s13^2 - 171*s12^2*s13^3 - 36*s12*s13^4 +
             (-90*s12^3*s13 - 306*s12^2*s13^2 - 117*s12*s13^3)*s23 +
             (-135*s12^2*s13 - 126*s12*s13^2)*s23^2 - 45*s12*s13*s23^3) +
           p1q^2*(-99*s12^2*s13^3 - 99*s12*s13^4 + (135*s12^3*s13 - 72*s12^2*
                s13^2 - 306*s12*s13^3)*s23 + (90*s12^3 + 117*s12^2*s13 - 315*
                s12*s13^2)*s23^2 + (90*s12^2 - 108*s12*s13)*s23^3) +
           p3q^2*(-99*s12^2*s13^3 - 99*s12*s13^4 + (135*s12^3*s13 - 72*s12^2*
                s13^2 - 306*s12*s13^3)*s23 + (90*s12^3 + 117*s12^2*s13 - 315*
                s12*s13^2)*s23^2 + (90*s12^2 - 108*s12*s13)*s23^3) +
           p1q*p2q*(135*s12^3*s13^2 - 63*s12^2*s13^3 - 117*s12*s13^4 +
             81*s13^5 + (-30*s12^3*s13 + 128*s12^2*s13^2 - 13*s12*s13^3 + 243*
                s13^4)*s23 + (-80*s12^3 - 94*s12^2*s13 + 296*s12*s13^2 + 419*
                s13^3)*s23^2 + (-160*s12^2 + 72*s12*s13 + 393*s13^2)*s23^3 +
             (-80*s12 + 136*s13)*s23^4) +
           p3q*(p2q*(135*s12^4*s13 + 72*s12^3*s13^2 - 261*s12^2*s13^3 - 198*
                s12*s13^4 + (90*s12^4 + 297*s12^3*s13 - 342*s12^2*s13^2 -
                 549*s12*s13^3)*s23 + (180*s12^3 + 9*s12^2*s13 -
                 504*s12*s13^2)*s23^2 + (90*s12^2 - 153*s12*s13)*s23^3) +
             p1q*(-135*s12^4*s13 + 63*s12^3*s13^2 - 117*s12*s13^4 + 81*
                s13^5 + (-90*s12^4 - 57*s12^3*s13 + 326*s12^2*s13^2 -
                 76*s12*s13^3 + 243*s13^4)*s23 + (-80*s12^3 + 131*s12^2*s13 +
                 170*s12*s13^2 + 419*s13^3)*s23^2 + (-70*s12^2 + 9*s12*s13 +
                 393*s13^2)*s23^3 + (-80*s12 + 136*s13)*s23^4)))/
          (p1q*p2q*(18*s12*s13^4*s23 + 36*s12*s13^3*s23^2 +
             18*s12*s13^2*s23^3) + p1q*p3q*(18*s12*s13^4*s23 +
             36*s12*s13^3*s23^2 + 18*s12*s13^2*s23^3)) +
         ((p3q^4*(-2*s12^5 + 2*s12^3*s13^2 + (-5*s12^4 + s12^2*s13^2)*s23 +
              (-3*s12^3 + s12^2*s13)*s23^2) + p2q^4*(2*s12^2*s13^3 -
              4*s12*s13^4 - 6*s13^5 + (-(s12^2*s13^2) - 4*s12*s13^3 -
                11*s13^4)*s23 + (-(s12*s13^2) - 5*s13^3)*s23^2) +
            p1q*p2q^3*(-(s12^3*s13^2) + 11*s12^2*s13^3 + 9*s12*s13^4 -
              3*s13^5 + (2*s12^2*s13^2 + 30*s12*s13^3 + 12*s13^4)*s23 +
              (2*s12^2*s13 + 19*s12*s13^2 + 29*s13^3)*s23^2 +
              (2*s12*s13 + 14*s13^2)*s23^3) + p1q^2*p2q^2*(-2*s12^4*s13 -
              7*s12^3*s13^2 + s12^2*s13^3 + 7*s12*s13^4 + s13^5 +
              (-4*s12^3*s13 - 21*s12^2*s13^2 + 4*s12*s13^3 + 13*s13^4)*s23 +
              (-6*s12^2*s13 - 26*s12*s13^2 + 4*s13^3)*s23^2 +
              (-s12^2 - 18*s12*s13 - 21*s13^2)*s23^3 + (-s12 - 13*s13)*s23^
                4) + p1q^3*p2q*(-4*s12^4*s13 - 10*s12^3*s13^2 -
              8*s12^2*s13^3 - 2*s12*s13^4 + (-2*s12^4 - 12*s12^3*s13 -
                26*s12^2*s13^2 - 18*s12*s13^3 - 2*s13^4)*s23 +
              (-7*s12^3 - 11*s12^2*s13 - 29*s12*s13^2 - 17*s13^3)*s23^2 +
              (-6*s12^2 - 6*s12*s13 - 20*s13^2)*s23^3 + (3*s12 - s13)*s23^4 +
              4*s23^5) + p1q^4*((2*s12^3*s13 + 4*s12^2*s13^2 + 2*s12*s13^3)*
               s23 + (-s12^3 + 9*s12^2*s13 + 11*s12*s13^2 + s13^3)*s23^2 +
              (s12^2 + 16*s12*s13 + 7*s13^2)*s23^3 + (6*s12 + 10*s13)*s23^4 +
              4*s23^5) + p3q^3*(p2q*(2*s12^5 + 18*s12^4*s13 + 10*s12^3*
                 s13^2 - 6*s12^2*s13^3 + (6*s12^4 + 34*s12^3*s13 +
                  6*s12^2*s13^2 - 2*s12*s13^3)*s23 + (8*s12^3 + 18*s12^2*
                   s13 - 2*s12*s13^2)*s23^2 + 4*s12^2*s23^3) +
              p1q*(-3*s12^5 + s12^4*s13 + 3*s12^3*s13^2 - s12^2*s13^3 +
                (6*s12^3*s13 - 2*s12^2*s13^2)*s23 + (13*s12^3 + 7*s12^2*s13 -
                  2*s12*s13^2)*s23^2 + (10*s12^2 - 2*s12*s13)*s23^3)) +
            p3q^2*(p2q^2*(-2*s12^4*s13 - 34*s12^3*s13^2 - 26*s12^2*s13^3 +
                6*s12*s13^4 + (-s12^4 - 12*s12^3*s13 - 56*s12^2*s13^2 -
                  8*s12*s13^3 + s13^4)*s23 + (-s12^3 - 17*s12^2*s13 -
                  23*s12*s13^2 + s13^3)*s23^2 - 8*s12*s13*s23^3) +
              p1q*p2q*(3*s12^5 + 17*s12^4*s13 - 5*s12^3*s13^2 -
                17*s12^2*s13^3 + 2*s12*s13^4 + (8*s12^4 + 12*s12^3*s13 -
                  38*s12^2*s13^2 - 10*s12*s13^3)*s23 + (5*s12^3 -
                  17*s12^2*s13 - 24*s12*s13^2 - 2*s13^3)*s23^2 +
                (-8*s12^2 - 18*s12*s13 - 2*s13^2)*s23^3 - 8*s12*s23^4) +
              p1q^2*(-s12^5 - s12^4*s13 - 3*s12^3*s13^2 - 3*s12^2*s13^3 +
                (7*s12^4 - 4*s12^3*s13 - 15*s12^2*s13^2)*s23 +
                (12*s12^3 - 16*s12^2*s13 - 8*s12*s13^2)*s23^2 +
                (-7*s12^2 - 18*s12*s13 + s13^2)*s23^3 + (-11*s12 + s13)*
                 s23^4)) + p3q*(p2q^3*(-2*s12^3*s13^2 + 22*s12^2*s13^3 +
                22*s12*s13^4 - 2*s13^5 + (2*s12^3*s13 + 10*s12^2*s13^2 +
                  38*s12*s13^3 + 2*s13^4)*s23 + (2*s12^2*s13 + 14*s12*s13^2 +
                  8*s13^3)*s23^2 + 4*s13^2*s23^3) + p1q*p2q^2*(-2*s12^4*s13 -
                25*s12^3*s13^2 - 5*s12^2*s13^3 + 17*s12*s13^4 - s13^5 +
                (-10*s12^3*s13 - 50*s12^2*s13^2 + 4*s12*s13^3 + 4*s13^4)*
                 s23 + (2*s12^3 - 12*s12^2*s13 - 33*s12*s13^2 - 3*s13^3)*
                 s23^2 + (2*s12^2 - 14*s12*s13 - 16*s13^2)*s23^3 -
                8*s13*s23^4) + p1q^2*p2q*(2*s12^5 - 16*s12^3*s13^2 -
                12*s12^2*s13^3 + 2*s12*s13^4 + (4*s12^4 - 14*s12^3*s13 -
                  40*s12^2*s13^2 - 10*s12*s13^3)*s23 + (-4*s12^3 -
                  16*s12^2*s13 - 18*s12*s13^2 - 10*s13^3)*s23^2 +
                (-14*s12^2 - 4*s12*s13 - 10*s13^2)*s23^3 + (-4*s12 + 4*s13)*
                 s23^4 + 4*s23^5) + p1q^3*(-2*s12^4*s13 - 4*s12^3*s13^2 -
                2*s12^2*s13^3 + (2*s12^4 - 8*s12^3*s13 - 8*s12^2*s13^2 +
                  2*s12*s13^3)*s23 + (-5*s12^3 - 13*s12^2*s13 + 5*s12*s13^2 +
                  s13^3)*s23^2 + (-16*s12^2 + 8*s13^2)*s23^3 +
                (-5*s12 + 11*s13)*s23^4 + 4*s23^5)))*
           Log(s13/(s12 + s13 + s23)))/(p3q^4*(4*s12^5*s13 +
             4*s12^4*s13*s23) + p2q^4*(4*s12*s13^5 + 4*s12*s13^4*s23) +
           p1q*p2q^3*(-4*s12^2*s13^4 + 4*s12*s13^5 + (-4*s12^2*s13^3 - 8*s12*
                s13^4)*s23 - 12*s12*s13^3*s23^2) + p1q^2*p2q^2*
            (-4*s12^2*s13^4 + (4*s12^2*s13^3 - 12*s12*s13^4)*s23 +
             8*s12^2*s13^2*s23^2 + 12*s12*s13^2*s23^3) +
           p1q^4*(-4*s12^2*s13^2*s23^2 + (-4*s12^2*s13 - 4*s12*s13^2)*s23^3 -
             4*s12*s13*s23^4) + p1q^3*p2q*(8*s12^2*s13^3*s23 +
             (4*s12^2*s13^2 + 12*s12*s13^3)*s23^2 + (-4*s12^2*s13 + 8*s12*
                s13^2)*s23^3 - 4*s12*s13*s23^4) +
           p3q^3*(p1q*(4*s12^5*s13 - 4*s12^4*s13^2 + (-8*s12^4*s13 -
                 4*s12^3*s13^2)*s23 - 12*s12^3*s13*s23^2) +
             p2q*(-16*s12^4*s13^2 + (-4*s12^4*s13 - 12*s12^3*s13^2)*s23 - 4*
                s12^3*s13*s23^2)) + p3q^2*(p2q^2*(24*s12^3*s13^3 +
               (12*s12^3*s13^2 + 12*s12^2*s13^3)*s23 + 8*s12^2*s13^2*s23^2) +
             p1q*p2q*(-12*s12^4*s13^2 + 12*s12^3*s13^3 + (-4*s12^4*s13 +
                 8*s12^3*s13^2 + 8*s12^2*s13^3)*s23 + (4*s12^3*s13 +
                 8*s12^2*s13^2)*s23^2 + 8*s12^2*s13*s23^3) +
             p1q^2*(-4*s12^4*s13^2 + (-12*s12^4*s13 + 4*s12^3*s13^2)*s23 + 8*
                s12^2*s13^2*s23^2 + 12*s12^2*s13*s23^3)) +
           p3q*(p2q^3*(-16*s12^2*s13^4 + (-12*s12^2*s13^3 - 4*s12*s13^4)*
                s23 - 4*s12*s13^3*s23^2) + p1q*p2q^2*(12*s12^3*s13^3 - 12*
                s12^2*s13^4 + (8*s12^3*s13^2 + 8*s12^2*s13^3 - 4*s12*s13^4)*
                s23 + (8*s12^2*s13^2 + 4*s12*s13^3)*s23^2 + 8*s12*s13^2*
                s23^3) + p1q^3*(8*s12^3*s13^2*s23 + (12*s12^3*s13 +
                 4*s12^2*s13^2)*s23^2 + (8*s12^2*s13 - 4*s12*s13^2)*s23^3 - 4*
                s12*s13*s23^4) + p1q^2*p2q*(8*s12^3*s13^3 + (8*s12^3*s13^2 +
                 8*s12^2*s13^3)*s23 + (8*s12^3*s13 + 8*s12*s13^3)*s23^2 +
               (4*s12^2*s13 + 4*s12*s13^2)*s23^3 - 4*s12*s13*s23^4))) +
         ((p3q^6*((-243*s12^6*s13^2 - 495*s12^5*s13^3 - 261*s12^4*s13^4 -
                9*s12^3*s13^5)*s23 + (180*s12^7 + 144*s12^6*s13 -
                495*s12^5*s13^2 - 549*s12^4*s13^3 - 90*s12^3*s13^4)*s23^2 +
              (180*s12^6 - 36*s12^5*s13 - 216*s12^4*s13^2 - 81*s12^3*s13^3)*
               s23^3) + p2q^6*(-648*s12^3*s13^6 - 1296*s12^2*s13^7 -
              648*s12*s13^8 + (180*s12^4*s13^4 + 234*s12^3*s13^5 -
                594*s12^2*s13^6 - 846*s12*s13^7 - 198*s13^8)*s23 +
              (180*s12^4*s13^3 + 747*s12^3*s13^4 + 774*s12^2*s13^5 +
                216*s12*s13^6 - 315*s13^7)*s23^2 + (270*s12^3*s13^3 +
                567*s12^2*s13^4 + 504*s12*s13^5 - 36*s13^6)*s23^3 +
              (90*s12^2*s13^3 + 90*s12*s13^4 + 81*s13^5)*s23^4) +
            p1q*p2q^5*(-648*s12^3*s13^6 - 1296*s12^2*s13^7 - 648*s12*s13^8 +
              (1152*s12^3*s13^5 + 3240*s12^2*s13^6 + 2052*s12*s13^7 -
                36*s13^8)*s23 + (-200*s12^4*s13^3 - 465*s12^3*s13^4 +
                1367*s12^2*s13^5 + 3815*s12*s13^6 + 563*s13^7)*s23^2 +
              (-200*s12^4*s13^2 - 1270*s12^3*s13^3 - 2774*s12^2*s13^4 -
                931*s12*s13^5 + 827*s13^6)*s23^3 + (-220*s12^3*s13^2 -
                1326*s12^2*s13^3 - 2563*s12*s13^4 - 260*s13^5)*s23^4 +
              (-20*s12^2*s13^2 - 436*s12*s13^3 - 488*s13^4)*s23^5) +
            p1q^2*p2q^4*((144*s12^4*s13^4 + 2214*s12^3*s13^5 + 5868*s12^2*
                 s13^6 + 4050*s12*s13^7 + 252*s13^8)*s23 + (448*s12^4*s13^3 +
                1281*s12^3*s13^4 + 917*s12^2*s13^5 + 2843*s12*s13^6 +
                1139*s13^7)*s23^2 + (-160*s12^4*s13^2 + 850*s12^3*s13^3 -
                50*s12^2*s13^4 - 3308*s12*s13^5 + 722*s13^6)*s23^3 +
              (-140*s12^4*s13 + 279*s12^3*s13^2 + 3006*s12^2*s13^3 +
                499*s12*s13^4 - 230*s13^5)*s23^4 + (-370*s12^3*s13 +
                791*s12^2*s13^2 + 3366*s12*s13^3 + 994*s13^4)*s23^5 +
              (-230*s12^2*s13 + 442*s12*s13^2 + 1059*s13^3)*s23^6) +
            p1q^6*((-324*s12^2*s13^3 - 333*s12*s13^4 - 9*s13^5)*s23^4 +
              (180*s12^3*s13 - 279*s12^2*s13^2 - 792*s12*s13^3 - 18*s13^4)*
               s23^5 + (180*s12^3 + 144*s12^2*s13 - 675*s12*s13^2 - 9*s13^3)*
               s23^6 + (180*s12^2 - 216*s12*s13)*s23^7) +
            p1q^3*p2q^3*((324*s12^3*s13^5 + 1062*s12^2*s13^6 + 828*s12*
                 s13^7 + 90*s13^8)*s23 + (504*s12^4*s13^3 - 261*s12^3*s13^4 -
                5526*s12^2*s13^5 - 4527*s12*s13^6 - 90*s13^7)*s23^2 +
              (220*s12^4*s13^2 + 500*s12^3*s13^3 - 2334*s12^2*s13^4 -
                7741*s12*s13^5 - 1491*s13^6)*s23^3 + (200*s12^4*s13 +
                867*s12^3*s13^2 + 1497*s12^2*s13^3 - 380*s12*s13^4 -
                1620*s13^5)*s23^4 + (160*s12^4 + 264*s12^3*s13 -
                278*s12^2*s13^2 + 885*s12*s13^3 - 69*s13^4)*s23^5 +
              (320*s12^3 + 128*s12^2*s13 - 1543*s12*s13^2 - 738*s13^3)*s23^
                6 + (160*s12^2 + 64*s12*s13 - 978*s13^2)*s23^7) +
            p1q^4*p2q^2*((-648*s12^3*s13^4 - 2448*s12^2*s13^5 -
                1989*s12*s13^6 - 189*s13^7)*s23^2 + (180*s12^4*s13^2 -
                432*s12^3*s13^3 - 27*s12^2*s13^4 - 972*s12*s13^5 - 594*s13^6)*
               s23^3 + (160*s12^4*s13 + 287*s12^3*s13^2 + 441*s12^2*s13^3 +
                2444*s12*s13^4 - 300*s13^5)*s23^4 + (-20*s12^4 -
                30*s12^3*s13 - 626*s12^2*s13^2 + 410*s12*s13^3 - 188*s13^4)*
               s23^5 + (-20*s12^3 + 60*s12^2*s13 - 785*s12*s13^2 - 905*s13^3)*
               s23^6 + (-160*s12^2 + 396*s12*s13 - 286*s13^2)*s23^7 +
              (-160*s12 + 326*s13)*s23^8) + p1q^5*p2q*
             ((324*s12^3*s13^3 + 1710*s12^2*s13^4 + 1494*s12*s13^5 +
                108*s13^6)*s23^3 + (-180*s12^4*s13 - 81*s12^3*s13^2 +
                1584*s12^2*s13^3 + 2889*s12*s13^4 + 450*s13^5)*s23^4 +
              (-180*s12^4 - 484*s12^3*s13 + 184*s12^2*s13^2 + 1725*s12*
                 s13^3 + 697*s13^4)*s23^5 + (-160*s12^3 - 154*s12^2*s13 +
                525*s12*s13^2 + 721*s13^3)*s23^6 + (-140*s12^2 +
                116*s12*s13 + 692*s13^2)*s23^7 + (-160*s12 + 326*s13)*s23^
                8) + p3q^5*(p2q*(648*s12^6*s13^3 + 1296*s12^5*s13^4 +
                648*s12^4*s13^5 + (180*s12^8 + 234*s12^7*s13 - 441*s12^6*
                   s13^2 + 567*s12^5*s13^3 + 2277*s12^4*s13^4 + 1323*s12^3*
                   s13^5 + 108*s12^2*s13^6)*s23 + (540*s12^7 - 288*s12^6*
                   s13 - 1368*s12^5*s13^2 + 981*s12^4*s13^3 + 2286*s12^3*
                   s13^4 + 441*s12^2*s13^5)*s23^2 + (180*s12^6 - 846*s12^5*
                   s13 + 81*s12^4*s13^2 + 1035*s12^3*s13^3 + 414*s12^2*s13^4)*
                 s23^3 + (-180*s12^5 + 36*s12^4*s13 + 216*s12^3*s13^2 +
                  81*s12^2*s13^3)*s23^4) + p1q*((-180*s12^8 - 54*s12^7*s13 -
                  234*s12^6*s13^2 - 216*s12^5*s13^3 + 720*s12^4*s13^4 +
                  666*s12^3*s13^5 + 90*s12^2*s13^6)*s23 + (-160*s12^7 +
                  186*s12^6*s13 + 928*s12^5*s13^2 + 2332*s12^4*s13^3 +
                  1624*s12^3*s13^4 + 198*s12^2*s13^5)*s23^2 +
                (-860*s12^6 - 350*s12^5*s13 + 2712*s12^4*s13^2 + 2157*s12^3*
                   s13^3 + 351*s12^2*s13^4)*s23^3 + (-880*s12^5 + 490*s12^4*
                   s13 + 974*s12^3*s13^2 + 243*s12^2*s13^3)*s23^4)) +
            p3q^4*(p2q^2*(1296*s12^6*s13^3 + 648*s12^5*s13^4 - 2592*s12^4*
                 s13^5 - 1944*s12^3*s13^6 + (180*s12^8 - 486*s12^7*s13 -
                  1377*s12^6*s13^2 + 1683*s12^5*s13^3 + 1494*s12^4*s13^4 -
                  2628*s12^3*s13^5 - 1917*s12^2*s13^6 - 189*s12*s13^7)*s23 +
                (180*s12^7 - 2016*s12^6*s13 - 936*s12^5*s13^2 + 3591*s12^4*
                   s13^3 + 1773*s12^3*s13^4 - 2790*s12^2*s13^5 - 612*s12*
                   s13^6)*s23^2 + (-360*s12^6 - 1188*s12^5*s13 + 2097*s12^4*
                   s13^2 + 1629*s12^3*s13^3 - 990*s12^2*s13^4 - 585*s12*
                   s13^5)*s23^3 + (-360*s12^5 + 522*s12^4*s13 + 450*s12^3*
                   s13^2 - 189*s12^2*s13^3 - 162*s12*s13^4)*s23^4) +
              p1q^2*((180*s12^7*s13 - 189*s12^6*s13^2 + 63*s12^5*s13^3 +
                  603*s12^4*s13^4 + 9*s12^3*s13^5 - 162*s12^2*s13^6)*s23 +
                (900*s12^7 + 340*s12^6*s13 + 201*s12^5*s13^2 + 746*s12^4*
                   s13^3 - 2269*s12^3*s13^4 - 1786*s12^2*s13^5 - 180*s12*
                   s13^6)*s23^2 + (820*s12^6 - 980*s12^5*s13 - 1522*s12^4*
                   s13^2 - 5086*s12^3*s13^3 - 3051*s12^2*s13^4 - 369*s12*
                   s13^5)*s23^3 + (1640*s12^5 - 20*s12^4*s13 - 5878*s12^3*
                   s13^2 - 3287*s12^2*s13^3 - 432*s12*s13^4)*s23^4 +
                (1720*s12^4 - 1580*s12^3*s13 - 1626*s12^2*s13^2 -
                  243*s12*s13^3)*s23^5) + p1q*p2q*(-648*s12^5*s13^4 -
                1296*s12^4*s13^5 - 648*s12^3*s13^6 + (-180*s12^8 +
                  486*s12^7*s13 - 252*s12^6*s13^2 - 2664*s12^5*s13^3 -
                  3240*s12^4*s13^4 - 2862*s12^3*s13^5 - 1548*s12^2*s13^6 -
                  180*s12*s13^7)*s23 + (-860*s12^7 - 210*s12^6*s13 +
                  1325*s12^5*s13^2 - 55*s12^4*s13^3 - 3325*s12^3*s13^4 -
                  3441*s12^2*s13^5 - 522*s12*s13^6)*s23^2 +
                (-2280*s12^6 + 488*s12^5*s13 + 4754*s12^4*s13^2 - 2113*s12^3*
                   s13^3 - 3469*s12^2*s13^4 - 684*s12*s13^5)*s23^3 +
                (-900*s12^5 + 2530*s12^4*s13 - 1181*s12^3*s13^2 - 2316*s12^2*
                   s13^3 - 504*s12*s13^4)*s23^4 + (700*s12^4 - 454*s12^3*
                   s13 - 758*s12^2*s13^2 - 162*s12*s13^3)*s23^5)) +
            p3q^3*(p2q^3*(648*s12^6*s13^3 - 2592*s12^5*s13^4 - 5184*s12^4*
                 s13^5 + 1944*s12^2*s13^7 + (-720*s12^7*s13 - 99*s12^6*
                   s13^2 + 2511*s12^5*s13^3 - 2286*s12^4*s13^4 - 4932*s12^3*
                   s13^5 + 63*s12^2*s13^6 + 909*s12*s13^7 + 90*s13^8)*s23 +
                (-180*s12^7 - 1044*s12^6*s13 + 2772*s12^5*s13^2 + 3537*s12^4*
                   s13^3 - 2466*s12^3*s13^4 - 4950*s12^2*s13^5 + 918*s12*
                   s13^6 + 261*s13^7)*s23^2 + (-360*s12^6 + 612*s12^5*s13 +
                  3123*s12^4*s13^2 - 873*s12^3*s13^3 - 3213*s12^2*s13^4 -
                  261*s12*s13^5 + 252*s13^6)*s23^3 + (-180*s12^5 +
                  936*s12^4*s13 - 108*s12^3*s13^2 - 765*s12^2*s13^3 -
                  270*s12*s13^4 + 81*s13^5)*s23^4) + p1q*p2q^2*(-1296*s12^5*
                 s13^4 - 1296*s12^4*s13^5 + 1296*s12^3*s13^6 + 1296*s12^2*
                 s13^7 + (540*s12^7*s13 - 558*s12^6*s13^2 - 3690*s12^5*
                   s13^3 - 2898*s12^4*s13^4 - 684*s12^3*s13^5 + 630*s12^2*
                   s13^6 + 1098*s12*s13^7 + 90*s13^8)*s23 +
                (-520*s12^7 + 1218*s12^6*s13 + 2536*s12^5*s13^2 - 1940*s12^4*
                   s13^3 - 1934*s12^3*s13^4 - 3162*s12^2*s13^5 + 570*s12*
                   s13^6)*s23^2 + (-540*s12^6 + 3938*s12^5*s13 + 2350*s12^4*
                   s13^2 - 6363*s12^3*s13^3 - 3381*s12^2*s13^4 - 1117*s12*
                   s13^5 - 351*s13^6)*s23^3 + (1200*s12^5 + 2698*s12^4*s13 -
                  5132*s12^3*s13^2 - 3003*s12^2*s13^3 - 936*s12*s13^4 -
                  423*s13^5)*s23^4 + (1220*s12^4 - 1282*s12^3*s13 -
                  1004*s12^2*s13^2 - 266*s12*s13^3 - 162*s13^4)*s23^5) +
              p1q^2*p2q*((180*s12^7*s13 - 729*s12^6*s13^2 + 63*s12^5*s13^3 +
                  3105*s12^4*s13^4 + 2853*s12^3*s13^5 + 1044*s12^2*s13^6 +
                  324*s12*s13^7)*s23 + (720*s12^7 - 994*s12^6*s13 -
                  98*s12^5*s13^2 + 6247*s12^4*s13^3 + 5400*s12^3*s13^4 +
                  795*s12^2*s13^5 - 478*s12*s13^6 - 180*s13^7)*s23^2 +
                (1660*s12^6 - 740*s12^5*s13 - 2214*s12^4*s13^2 - 2460*s12^3*
                   s13^3 + 1271*s12^2*s13^4 - 241*s12*s13^5 - 270*s13^6)*
                 s23^3 + (3740*s12^5 - 52*s12^4*s13 - 8766*s12^3*s13^2 -
                  326*s12^2*s13^3 + 618*s12*s13^4 - 81*s13^5)*s23^4 +
                (1780*s12^4 - 2960*s12^3*s13 + 1427*s12^2*s13^2 +
                  1087*s12*s13^3 + 90*s13^4)*s23^5 + (-1020*s12^3 +
                  1126*s12^2*s13 + 868*s12*s13^2 + 81*s13^3)*s23^6) +
              p1q^3*((324*s12^5*s13^3 + 414*s12^4*s13^4 + 180*s12^3*s13^5 +
                  90*s12^2*s13^6)*s23 + (-720*s12^6*s13 + 846*s12^5*s13^2 +
                  513*s12^4*s13^3 - 1296*s12^3*s13^4 + 405*s12^2*s13^5 +
                  324*s12*s13^6)*s23^2 + (-1800*s12^6 - 840*s12^5*s13 +
                  1456*s12^4*s13^2 - 1243*s12^3*s13^3 + 3075*s12^2*s13^4 +
                  1574*s12*s13^5 + 90*s13^6)*s23^3 + (-1680*s12^5 +
                  2040*s12^4*s13 + 1388*s12^3*s13^2 + 5886*s12^2*s13^3 +
                  2274*s12*s13^4 + 180*s13^5)*s23^4 + (-1560*s12^4 +
                  720*s12^3*s13 + 6292*s12^2*s13^2 + 2299*s12*s13^3 +
                  171*s13^4)*s23^5 + (-1680*s12^3 + 2160*s12^2*s13 +
                  1194*s12*s13^2 + 81*s13^3)*s23^6)) +
            p3q^2*(p2q^4*(-1944*s12^5*s13^4 + 5184*s12^3*s13^6 +
                2592*s12^2*s13^7 - 648*s12*s13^8 + (1080*s12^6*s13^2 +
                  1170*s12^5*s13^3 - 2421*s12^4*s13^4 + 441*s12^3*s13^5 +
                  4131*s12^2*s13^6 + 1125*s12*s13^7 - 54*s13^8)*s23 +
                (540*s12^6*s13 + 2295*s12^5*s13^2 - 882*s12^4*s13^3 -
                  3798*s12^3*s13^4 - 1404*s12^2*s13^5 + 3132*s12*s13^6 +
                  135*s13^7)*s23^2 + (990*s12^5*s13 + 423*s12^4*s13^2 -
                  2898*s12^3*s13^3 - 2097*s12^2*s13^4 + 1395*s12*s13^5 +
                  432*s13^6)*s23^3 + (450*s12^4*s13 - 702*s12^3*s13^2 -
                  549*s12^2*s13^3 + 36*s12*s13^4 + 243*s13^5)*s23^4) +
              p1q*p2q^3*(-648*s12^5*s13^4 + 1296*s12^4*s13^5 + 3888*s12^3*
                 s13^6 + 1296*s12^2*s13^7 - 648*s12*s13^8 +
                (-540*s12^6*s13^2 - 1062*s12^5*s13^3 + 1224*s12^4*s13^4 +
                  1224*s12^3*s13^5 + 1548*s12^2*s13^6 + 1854*s12*s13^7 -
                  216*s13^8)*s23 + (840*s12^6*s13 + 489*s12^5*s13^2 -
                  779*s12^4*s13^3 + 2022*s12^3*s13^4 - 4588*s12^2*s13^5 +
                  689*s12*s13^6 - 697*s13^7)*s23^2 + (520*s12^6 + 1592*s12^5*
                   s13 - 2118*s12^4*s13^2 - 2701*s12^3*s13^3 - 1577*s12^2*
                   s13^4 - 4317*s12*s13^5 - 1315*s13^6)*s23^3 +
                (1040*s12^5 - 216*s12^4*s13 - 3333*s12^3*s13^2 - 150*s12^2*
                   s13^3 - 3355*s12*s13^4 - 1646*s13^5)*s23^4 +
                (520*s12^4 - 968*s12^3*s13 + 174*s12^2*s13^2 - 608*s12*
                   s13^3 - 812*s13^4)*s23^5) + p1q^2*p2q^2*(
                (-540*s12^6*s13^2 + 864*s12^5*s13^3 + 5013*s12^4*s13^4 +
                  4131*s12^3*s13^5 + 2133*s12^2*s13^6 + 1449*s12*s13^7 -
                  162*s13^8)*s23 + (-920*s12^6*s13 + 443*s12^5*s13^2 +
                  8103*s12^4*s13^3 + 10158*s12^3*s13^4 - 667*s12^2*s13^5 -
                  1353*s12*s13^6 - 184*s13^7)*s23^2 + (480*s12^6 -
                  1088*s12^5*s13 - 2287*s12^4*s13^2 + 1225*s12^3*s13^3 +
                  1378*s12^2*s13^4 - 2944*s12*s13^5 + 322*s13^6)*s23^3 +
                (520*s12^5 - 1848*s12^4*s13 - 2677*s12^3*s13^2 + 2606*s12^2*
                   s13^3 + 635*s12*s13^4 + 795*s13^5)*s23^4 +
                (-1480*s12^4 - 1356*s12^3*s13 + 5447*s12^2*s13^2 +
                  3363*s12*s13^3 + 1346*s13^4)*s23^5 + (-1520*s12^3 +
                  1404*s12^2*s13 + 1938*s12*s13^2 + 895*s13^3)*s23^6) +
              p1q^4*((-972*s12^4*s13^3 - 1161*s12^3*s13^4 - 369*s12^2*s13^5 -
                  180*s12*s13^6)*s23^2 + (1080*s12^5*s13 - 1404*s12^4*s13^2 -
                  2007*s12^3*s13^3 + 765*s12^2*s13^4 - 837*s12*s13^5 -
                  162*s13^6)*s23^3 + (1800*s12^5 + 1020*s12^4*s13 -
                  3254*s12^3*s13^2 + 1103*s12^2*s13^3 - 2223*s12*s13^4 -
                  454*s13^5)*s23^4 + (1720*s12^4 - 2100*s12^3*s13 -
                  707*s12^2*s13^2 - 3367*s12*s13^3 - 586*s13^4)*s23^5 +
                (740*s12^3 - 700*s12^2*s13 - 3323*s12*s13^2 - 620*s13^3)*
                 s23^6 + (820*s12^2 - 1360*s12*s13 - 326*s13^2)*s23^7) +
              p1q^3*p2q*((324*s12^5*s13^3 + 414*s12^4*s13^4 - 270*s12^2*
                   s13^6 - 180*s12*s13^7)*s23 + (-540*s12^6*s13 + 1377*s12^5*
                   s13^2 + 1098*s12^4*s13^3 - 4941*s12^3*s13^4 - 5814*s12^2*
                   s13^5 - 1692*s12*s13^6 + 324*s13^7)*s23^2 +
                (-1080*s12^6 + 46*s12^5*s13 + 1216*s12^4*s13^2 - 5089*s12^3*
                   s13^3 - 4997*s12^2*s13^4 - 836*s12*s13^5 + 854*s13^6)*
                 s23^3 + (-1620*s12^5 + 1020*s12^4*s13 + 2822*s12^3*s13^2 +
                  4578*s12^2*s13^3 + 1817*s12*s13^4 + 1015*s13^5)*s23^4 +
                (-2940*s12^4 - 92*s12^3*s13 + 9354*s12^2*s13^2 + 3027*s12*
                   s13^3 + 1005*s13^4)*s23^5 + (-1740*s12^3 + 2040*s12^2*
                   s13 + 285*s12*s13^2 + 194*s13^3)*s23^6 +
                (660*s12^2 - 1034*s12*s13 - 326*s13^2)*s23^7)) +
            p3q*(p2q^5*(1944*s12^4*s13^5 + 2592*s12^3*s13^6 - 648*s12^2*
                 s13^7 - 1296*s12*s13^8 + (-720*s12^5*s13^3 - 999*s12^4*
                   s13^4 + 1647*s12^3*s13^5 + 1449*s12^2*s13^6 - 819*s12*
                   s13^7 - 342*s13^8)*s23 + (-540*s12^5*s13^2 - 2178*s12^4*
                   s13^3 - 1188*s12^3*s13^4 + 1089*s12^2*s13^5 + 1818*s12*
                   s13^6 - 441*s13^7)*s23^2 + (-900*s12^4*s13^2 - 1242*s12^3*
                   s13^3 + 279*s12^2*s13^4 + 1575*s12*s13^5 + 144*s13^6)*
                 s23^3 + (-360*s12^3*s13^2 + 36*s12^2*s13^3 + 234*s12*s13^4 +
                  243*s13^5)*s23^4) + p1q*p2q^4*(1296*s12^4*s13^5 +
                1296*s12^3*s13^6 - 1296*s12^2*s13^7 - 1296*s12*s13^8 +
                (180*s12^5*s13^3 + 162*s12^4*s13^4 - 468*s12^3*s13^5 +
                  2520*s12^2*s13^6 + 2628*s12*s13^7 - 342*s13^8)*s23 +
                (-120*s12^5*s13^2 + 590*s12^4*s13^3 + 486*s12^3*s13^4 -
                  2492*s12^2*s13^5 + 3790*s12*s13^6 - 98*s13^7)*s23^2 +
                (-320*s12^5*s13 - 754*s12^4*s13^2 + 282*s12^3*s13^3 -
                  3062*s12^2*s13^4 - 4131*s12*s13^5 - 65*s13^6)*s23^3 +
                (-460*s12^4*s13 - 54*s12^3*s13^2 - 474*s12^2*s13^3 -
                  5180*s12*s13^4 - 1447*s13^5)*s23^4 + (-140*s12^3*s13 +
                  400*s12^2*s13^2 - 940*s12*s13^3 - 1138*s13^4)*s23^5) +
              p1q^2*p2q^3*((216*s12^5*s13^3 + 63*s12^4*s13^4 - 387*s12^3*
                   s13^5 + 4203*s12^2*s13^6 + 4527*s12*s13^7 + 90*s13^8)*
                 s23 + (400*s12^5*s13^2 + 962*s12^4*s13^3 - 1846*s12^3*
                   s13^4 - 7641*s12^2*s13^5 + 150*s12*s13^6 + 1171*s13^7)*
                 s23^2 + (-320*s12^5*s13 - 657*s12^4*s13^2 - 2945*s12^3*
                   s13^3 - 8844*s12^2*s13^4 - 9386*s12*s13^5 + 1314*s13^6)*
                 s23^3 + (-500*s12^5 - 732*s12^4*s13 + 1264*s12^3*s13^2 +
                  203*s12^2*s13^3 - 3102*s12*s13^4 + 538*s13^5)*s23^4 +
                (-1000*s12^4 - 364*s12^3*s13 + 3473*s12^2*s13^2 +
                  4229*s12*s13^3 + 2178*s13^4)*s23^5 + (-500*s12^3 +
                  48*s12^2*s13 + 1512*s12*s13^2 + 1873*s13^3)*s23^6) +
              p1q^3*p2q^2*((-648*s12^4*s13^4 - 1800*s12^3*s13^5 - 1242*s12^2*
                   s13^6 + 90*s13^8)*s23 + (360*s12^5*s13^2 - 72*s12^4*
                   s13^3 - 6858*s12^3*s13^4 - 13941*s12^2*s13^5 -
                  6948*s12*s13^6 + 243*s13^7)*s23^2 + (220*s12^5*s13 -
                  92*s12^4*s13^2 - 4750*s12^3*s13^3 - 10820*s12^2*s13^4 -
                  9341*s12*s13^5 - 781*s13^6)*s23^3 + (-120*s12^5 +
                  386*s12^4*s13 + 1914*s12^3*s13^2 + 702*s12^2*s13^3 +
                  702*s12*s13^4 - 884*s13^5)*s23^4 + (-140*s12^4 -
                  134*s12^3*s13 + 2208*s12^2*s13^2 + 3071*s12*s13^3 +
                  765*s13^4)*s23^5 + (800*s12^3 - 550*s12^2*s13 -
                  1966*s12*s13^2 - 589*s13^3)*s23^6 + (820*s12^2 -
                  970*s12*s13 - 1304*s13^2)*s23^7) + p1q^4*p2q*(
                (-648*s12^4*s13^3 - 2124*s12^3*s13^4 - 1818*s12^2*s13^5 -
                  522*s12*s13^6 - 180*s13^7)*s23^2 + (540*s12^5*s13 -
                  567*s12^4*s13^2 - 2745*s12^3*s13^3 - 45*s12^2*s13^4 +
                  1503*s12*s13^5 - 756*s13^6)*s23^3 + (720*s12^5 +
                  946*s12^4*s13 - 1050*s12^3*s13^2 - 787*s12^2*s13^3 +
                  2084*s12*s13^4 - 745*s13^5)*s23^4 + (800*s12^4 -
                  150*s12^3*s13 - 2017*s12^2*s13^2 - 3191*s12*s13^3 -
                  720*s13^4)*s23^5 + (1080*s12^3 - 172*s12^2*s13 -
                  4666*s12*s13^2 - 1489*s13^3)*s23^6 + (840*s12^2 -
                  1090*s12*s13 - 612*s13^2)*s23^7 + (-160*s12 + 326*s13)*
                 s23^8) + p1q^5*((972*s12^3*s13^3 + 1080*s12^2*s13^4 +
                  198*s12*s13^5 + 90*s13^6)*s23^3 + (-720*s12^4*s13 +
                  1026*s12^3*s13^2 + 2223*s12^2*s13^3 - 54*s12*s13^4 +
                  423*s13^5)*s23^4 + (-900*s12^4 - 610*s12^3*s13 +
                  2506*s12^2*s13^2 - 381*s12*s13^3 + 697*s13^4)*s23^5 +
                (-880*s12^3 + 1070*s12^2*s13 + 156*s12*s13^2 + 730*s13^3)*
                 s23^6 + (-140*s12^2 + 206*s12*s13 + 692*s13^2)*s23^7 +
                (-160*s12 + 326*s13)*s23^8)))*Log(s23/(s12 + s13 + s23)))/
          (p1q*p3q^5*(36*s12^5*s13^3 + 36*s12^4*s13^4)*s23^2 +
           p1q*p2q^5*((-36*s12^2*s13^6 - 36*s12*s13^7)*s23^2 +
             (-36*s12^2*s13^5 - 36*s12*s13^6)*s23^3) + p1q^2*p2q^4*
            ((-36*s12^2*s13^6 - 36*s12*s13^7)*s23^2 +
             (36*s12^2*s13^5 + 72*s12*s13^6)*s23^3 + (72*s12^2*s13^4 + 108*
                s12*s13^5)*s23^4) + p1q^3*p2q^3*
            ((72*s12^2*s13^5 + 108*s12*s13^6)*s23^3 + 36*s12^2*s13^4*s23^4 +
             (-36*s12^2*s13^3 - 108*s12*s13^4)*s23^5) +
           p1q^5*p2q*(36*s12*s13^4*s23^5 + 36*s12*s13^3*s23^6) +
           p1q^4*p2q^2*((-36*s12^2*s13^4 - 108*s12*s13^5)*s23^4 +
             (-36*s12^2*s13^3 - 72*s12*s13^4)*s23^5 + 36*s12*s13^3*s23^6) +
           p3q^4*(p1q^2*((-36*s12^4*s13^4 - 36*s12^3*s13^5)*s23^2 +
               (-144*s12^4*s13^3 - 108*s12^3*s13^4)*s23^3) +
             p1q*p2q*((72*s12^5*s13^3 - 36*s12^4*s13^4 - 108*s12^3*s13^5)*
                s23^2 + (-36*s12^4*s13^3 - 36*s12^3*s13^4)*s23^3)) +
           p3q^3*(p1q*p2q^2*((36*s12^5*s13^3 - 180*s12^4*s13^4 - 108*s12^3*
                  s13^5 + 108*s12^2*s13^6)*s23^2 + (-72*s12^4*s13^3 +
                 72*s12^2*s13^5)*s23^3) + p1q^2*p2q*((-72*s12^4*s13^4 +
                 72*s12^2*s13^6)*s23^2 + (-252*s12^4*s13^3 - 36*s12^3*s13^4 +
                 72*s12^2*s13^5)*s23^3 + (108*s12^3*s13^3 + 72*s12^2*s13^4)*
                s23^4) + p1q^3*((108*s12^3*s13^4 + 72*s12^2*s13^5)*s23^3 +
               (216*s12^3*s13^3 + 108*s12^2*s13^4)*s23^4)) +
           p3q^2*(p1q*p2q^3*((-108*s12^4*s13^4 + 108*s12^3*s13^5 +
                 180*s12^2*s13^6 - 36*s12*s13^7)*s23^2 + (-36*s12^4*s13^3 +
                 108*s12^3*s13^4 + 108*s12^2*s13^5 - 36*s12*s13^6)*s23^3) +
             p1q^2*p2q^2*((-36*s12^4*s13^4 + 108*s12^3*s13^5 + 108*s12^2*
                  s13^6 - 36*s12*s13^7)*s23^2 + (-108*s12^4*s13^3 +
                 144*s12^3*s13^4 + 72*s12^2*s13^5 + 36*s12*s13^6)*s23^3 +
               (180*s12^3*s13^3 + 144*s12^2*s13^4 + 72*s12*s13^5)*s23^4) +
             p1q^4*((-108*s12^2*s13^4 - 36*s12*s13^5)*s23^4 +
               (-144*s12^2*s13^3 - 36*s12*s13^4)*s23^5) +
             p1q^3*p2q*((180*s12^3*s13^4 + 144*s12^2*s13^5 + 72*s12*s13^6)*
                s23^3 + (324*s12^3*s13^3 + 180*s12^2*s13^4 + 36*s12*s13^5)*
                s23^4 + (-108*s12^2*s13^3 - 36*s12*s13^4)*s23^5)) +
           p3q*(p1q*p2q^4*((108*s12^3*s13^5 + 36*s12^2*s13^6 - 72*s12*s13^7)*
                s23^2 + (72*s12^3*s13^4 - 72*s12*s13^6)*s23^3) +
             p1q^2*p2q^3*((72*s12^3*s13^5 - 72*s12*s13^7)*s23^2 +
               (72*s12^3*s13^4 + 36*s12^2*s13^5 + 108*s12*s13^6)*s23^3 +
               (72*s12^3*s13^3 + 144*s12^2*s13^4 + 180*s12*s13^5)*s23^4) +
             p1q^3*p2q^2*((72*s12^3*s13^4 + 144*s12^2*s13^5 + 180*s12*s13^6)*
                s23^3 + (108*s12^3*s13^3 + 108*s12^2*s13^4 + 36*s12*s13^5)*
                s23^4 + (-144*s12^2*s13^3 - 144*s12*s13^4)*s23^5) +
             p1q^5*(36*s12*s13^4*s23^5 + 36*s12*s13^3*s23^6) +
             p1q^4*p2q*((-144*s12^2*s13^4 - 144*s12*s13^5)*s23^4 +
               (-180*s12^2*s13^3 - 108*s12*s13^4)*s23^5 + 36*s12*s13^3*
                s23^6))) + ((p2q^5*(-324*s12^2*s13^5 - 324*s12*s13^6 +
              (180*s12^3*s13^3 + 297*s12^2*s13^4 - 81*s12*s13^5 + 126*s13^6)*
               s23 + (270*s12^2*s13^3 + 207*s12*s13^4 + 126*s13^5)*s23^2 +
              90*s12*s13^3*s23^3) + p3q^5*((243*s12^4*s13^2 + 333*s12^3*
                 s13^3 + 90*s12^2*s13^4)*s23 + (-180*s12^5 + 36*s12^4*s13 +
                459*s12^3*s13^2 + 90*s12^2*s13^3)*s23^2 + (-180*s12^4 +
                216*s12^3*s13)*s23^3) + p1q*p2q^4*(-324*s12^2*s13^5 -
              324*s12*s13^6 + (747*s12^2*s13^4 + 549*s12*s13^5 + 126*s13^6)*
               s23 + (-200*s12^3*s13^2 - 670*s12^2*s13^3 - 303*s12*s13^4 -
                454*s13^5)*s23^2 + (-220*s12^2*s13^2 - 816*s12*s13^3 -
                906*s13^4)*s23^3 + (-20*s12*s13^2 - 326*s13^3)*s23^4) +
            p1q^5*((243*s12^2*s13^2 + 333*s12*s13^3 + 90*s13^4)*s23^3 +
              (-180*s12^3 + 36*s12^2*s13 + 459*s12*s13^2 + 90*s13^3)*s23^4 +
              (-180*s12^2 + 216*s12*s13)*s23^5) + p1q^2*p2q^3*
             ((468*s12^3*s13^3 + 2151*s12^2*s13^4 + 1935*s12*s13^5 +
                252*s13^6)*s23 + (-20*s12^3*s13^2 + 122*s12^2*s13^3 +
                1245*s12*s13^4 + 140*s13^5)*s23^2 + (-140*s12^3*s13 +
                589*s12^2*s13^2 + 591*s12*s13^3 + 56*s13^4)*s23^3 +
              (-370*s12^2*s13 + 1171*s12*s13^2 + 820*s13^3)*s23^4 +
              (-230*s12*s13 + 652*s13^2)*s23^5) + p1q^4*p2q*
             ((-486*s12^2*s13^3 - 666*s12*s13^4 - 180*s13^5)*s23^2 +
              (180*s12^3*s13 + 315*s12^2*s13^2 - 243*s12*s13^3 - 72*s13^4)*
               s23^3 + (-20*s12^3 + 50*s12^2*s13 + 21*s12*s13^2 + 104*s13^3)*
               s23^4 + (140*s12^2 - 276*s12*s13 - 330*s13^2)*s23^5 +
              (160*s12 - 326*s13)*s23^6) + p1q^3*p2q^2*
             ((243*s12^2*s13^4 + 333*s12*s13^5 + 90*s13^6)*s23 +
              (144*s12^3*s13^2 - 1278*s12^2*s13^3 - 1539*s12*s13^4 -
                270*s13^5)*s23^2 + (40*s12^3*s13 + 773*s12^2*s13^2 -
                843*s12*s13^3 - 370*s13^4)*s23^3 + (160*s12^3 - 356*s12^2*
                 s13 + 645*s12*s13^2 + 602*s13^3)*s23^4 + (320*s12^2 -
                722*s12*s13 + 286*s13^2)*s23^5 + (160*s12 - 326*s13)*s23^6) +
            p3q^4*(p2q*(-324*s12^4*s13^3 - 324*s12^3*s13^4 +
                (-180*s12^6 - 54*s12^5*s13 + 495*s12^4*s13^2 - 495*s12^3*
                   s13^3 - 720*s12^2*s13^4 - 180*s12*s13^5)*s23 +
                (-540*s12^5 + 648*s12^4*s13 + 819*s12^3*s13^2 - 972*s12^2*
                   s13^3 - 180*s12*s13^4)*s23^2 + (-360*s12^4 + 882*s12^3*
                   s13 - 432*s12^2*s13^2)*s23^3) + p1q*((180*s12^6 -
                  126*s12^5*s13 + 603*s12^4*s13^2 + 999*s12^3*s13^3 +
                  90*s12^2*s13^4)*s23 + (-20*s12^5 - 490*s12^4*s13 +
                  399*s12^3*s13^2 - 616*s12^2*s13^3 - 180*s12*s13^4)*s23^2 +
                (320*s12^4 - 222*s12^3*s13 - 1284*s12^2*s13^2 - 180*s12*
                   s13^3)*s23^3 + (520*s12^3 - 758*s12^2*s13)*s23^4)) +
            p3q^3*(p2q^2*(-648*s12^4*s13^3 + 648*s12^2*s13^5 +
                (-180*s12^6 + 486*s12^5*s13 + 657*s12^4*s13^2 - 1413*s12^3*
                   s13^3 + 243*s12^2*s13^4 + 441*s12*s13^5 + 90*s13^6)*s23 +
                (-360*s12^5 + 1602*s12^4*s13 - 117*s12^3*s13^2 - 1764*s12^2*
                   s13^3 + 567*s12*s13^4 + 90*s13^5)*s23^2 +
                (-180*s12^4 + 1116*s12^3*s13 - 1224*s12^2*s13^2 +
                  216*s12*s13^3)*s23^3) + p1q*p2q*(-324*s12^4*s13^3 -
                324*s12^3*s13^4 + (-720*s12^5*s13 + 990*s12^4*s13^2 +
                  72*s12^3*s13^3 - 1170*s12^2*s13^4 + 144*s12*s13^5)*s23 +
                (320*s12^5 - 472*s12^4*s13 + 788*s12^3*s13^2 - 2498*s12^2*
                   s13^3 - 370*s12*s13^4 - 180*s13^5)*s23^2 +
                (1360*s12^4 - 688*s12^3*s13 - 2286*s12^2*s13^2 - 114*s12*
                   s13^3 - 180*s13^4)*s23^3 + (1040*s12^3 - 1656*s12^2*s13 +
                  220*s12*s13^2)*s23^4) + p1q^2*((180*s12^6 - 126*s12^5*s13 +
                  603*s12^4*s13^2 + 999*s12^3*s13^3 + 90*s12^2*s13^4)*s23 +
                (-380*s12^5 - 238*s12^4*s13 - 339*s12^3*s13^2 - 1984*s12^2*
                   s13^3 - 198*s12*s13^4)*s23^2 + (830*s12^3*s13 -
                  1947*s12^2*s13^2 + 179*s12*s13^3 + 90*s13^4)*s23^3 +
                (60*s12^3 + 10*s12^2*s13 + 1155*s12*s13^2 + 90*s13^3)*s23^4 +
                (-500*s12^2 + 868*s12*s13)*s23^5)) +
            p3q*(p2q^4*(648*s12^3*s13^4 - 648*s12*s13^6 + (-540*s12^4*s13^2 -
                  468*s12^3*s13^3 + 711*s12^2*s13^4 - 675*s12*s13^5 -
                  18*s13^6)*s23 + (-900*s12^3*s13^2 + 108*s12^2*s13^3 +
                  387*s12*s13^4 - 18*s13^5)*s23^2 + (-360*s12^2*s13^2 +
                  396*s12*s13^3)*s23^3) + p1q*p2q^3*(648*s12^3*s13^4 +
                324*s12^2*s13^5 - 324*s12*s13^6 + (-234*s12^3*s13^3 +
                  2556*s12^2*s13^4 + 1674*s12*s13^5 - 144*s13^6)*s23 +
                (-320*s12^4*s13 - 734*s12^3*s13^2 - 1238*s12^2*s13^3 +
                  932*s12*s13^4 - 764*s13^5)*s23^2 + (-460*s12^3*s13 -
                  374*s12^2*s13^2 - 1062*s12*s13^3 - 1272*s13^4)*s23^3 +
                (-140*s12^2*s13 + 180*s12*s13^2 - 652*s13^3)*s23^4) +
              p1q^2*p2q^2*((540*s12^4*s13^2 - 54*s12^3*s13^3 + 1107*s12^2*
                   s13^4 + 1953*s12*s13^5 + 252*s13^6)*s23 +
                (40*s12^4*s13 + 420*s12^3*s13^2 - 3682*s12^2*s13^3 -
                  1105*s12*s13^4 + 374*s13^5)*s23^2 + (-500*s12^4 +
                  78*s12^3*s13 + 1881*s12^2*s13^2 - 1645*s12*s13^3 -
                  98*s13^4)*s23^3 + (-1000*s12^3 + 446*s12^2*s13 +
                  3215*s12*s13^2 + 1084*s13^3)*s23^4 + (-500*s12^2 +
                  408*s12*s13 + 1304*s13^2)*s23^5) + p1q^3*p2q*(
                (-486*s12^3*s13^3 - 666*s12^2*s13^4 - 180*s12*s13^5)*s23 +
                (360*s12^4*s13 - 612*s12^3*s13^2 - 4014*s12^2*s13^3 -
                  3096*s12*s13^4 - 360*s13^5)*s23^2 + (40*s12^4 + 660*s12^3*
                   s13 + 362*s12^2*s13^2 - 1744*s12*s13^3 - 622*s13^4)*
                 s23^3 + (-320*s12^3 + 12*s12^2*s13 + 1794*s12*s13^2 +
                  346*s13^3)*s23^4 + (-40*s12^2 - 220*s12*s13 - 44*s13^2)*
                 s23^5 + (320*s12 - 652*s13)*s23^6) + p1q^4*(
                (-486*s12^3*s13^2 - 666*s12^2*s13^3 - 180*s12*s13^4)*s23^2 +
                (540*s12^4 - 198*s12^3*s13 - 297*s12^2*s13^2 + 855*s12*
                   s13^3 + 108*s13^4)*s23^3 + (340*s12^3 - 922*s12^2*s13 +
                  939*s12*s13^2 + 104*s13^3)*s23^4 + (-40*s12^2 -
                  150*s12*s13 - 330*s13^2)*s23^5 + (160*s12 - 326*s13)*
                 s23^6)) + p3q^2*(p2q^3*(-324*s12^4*s13^3 + 972*s12^3*s13^4 +
                972*s12^2*s13^5 - 324*s12*s13^6 + (540*s12^5*s13 -
                  135*s12^4*s13^2 - 1233*s12^3*s13^3 + 1467*s12^2*s13^4 +
                  27*s12*s13^5 - 54*s13^6)*s23 + (990*s12^4*s13 - 1377*s12^3*
                   s13^2 - 864*s12^2*s13^3 + 927*s12*s13^4 - 54*s13^5)*
                 s23^2 + (450*s12^3*s13 - 1152*s12^2*s13^2 + 522*s12*s13^3)*
                 s23^3) + p1q*p2q^2*(-324*s12^4*s13^3 + 324*s12^3*s13^4 +
                648*s12^2*s13^5 + (1323*s12^4*s13^2 - 81*s12^3*s13^3 +
                  1413*s12^2*s13^4 + 1611*s12*s13^5 - 234*s13^6)*s23 +
                (520*s12^5 + 112*s12^4*s13 + 377*s12^3*s13^2 - 2216*s12^2*
                   s13^3 + 703*s12*s13^4 - 778*s13^5)*s23^2 +
                (1040*s12^4 - 926*s12^3*s13 - 1156*s12^2*s13^2 - 504*s12*
                   s13^3 - 870*s13^4)*s23^3 + (520*s12^3 - 1038*s12^2*s13 +
                  420*s12*s13^2 - 326*s13^3)*s23^4) + p1q^2*p2q*(
                (-540*s12^5*s13 + 621*s12^4*s13^2 + 243*s12^3*s13^3 -
                  612*s12^2*s13^4 + 306*s12*s13^5)*s23 + (-20*s12^5 +
                  90*s12^4*s13 + 83*s12^3*s13^2 - 4348*s12^2*s13^3 -
                  1558*s12*s13^4 - 162*s13^5)*s23^2 + (40*s12^4 + 1030*s12^3*
                   s13 - 367*s12^2*s13^2 - 635*s12*s13^3 - 136*s13^4)*s23^3 +
                (-940*s12^3 + 826*s12^2*s13 + 3199*s12*s13^2 + 678*s13^3)*
                 s23^4 + (-1000*s12^2 + 1506*s12*s13 + 652*s13^2)*s23^5) +
              p1q^3*((243*s12^4*s13^2 + 333*s12^3*s13^3 + 90*s12^2*s13^4)*
                 s23 + (-540*s12^5 + 288*s12^4*s13 - 765*s12^3*s13^2 -
                  1944*s12^2*s13^3 - 198*s12*s13^4)*s23^2 +
                (40*s12^4 + 1070*s12^3*s13 - 1203*s12^2*s13^2 + 881*s12*
                   s13^3 + 108*s13^4)*s23^3 + (60*s12^3 - 190*s12^2*s13 +
                  1635*s12*s13^2 + 104*s13^3)*s23^4 + (-360*s12^2 +
                  502*s12*s13 - 330*s13^2)*s23^5 + (160*s12 - 326*s13)*
                 s23^6)))*Log((s13 + s23)/(s12 + s13 + s23)))/
          (36*p1q*p3q^4*s12^3*s13^3*s23^2 + 36*p1q*p2q^4*s12*s13^5*s23^2 +
           36*p1q^4*p2q*s12*s13^3*s23^4 + p1q^2*p2q^3*(36*s12*s13^5*s23^2 -
             72*s12*s13^4*s23^3) + p1q^3*p2q^2*(-72*s12*s13^4*s23^3 +
             36*s12*s13^3*s23^4) + p3q^3*(p1q*p2q*(72*s12^3*s13^3 - 72*s12^2*
                s13^4)*s23^2 + p1q^2*(36*s12^3*s13^3*s23^2 - 72*s12^2*s13^3*
                s23^3)) + p3q^2*(p1q*p2q^2*(36*s12^3*s13^3 - 144*s12^2*
                s13^4 + 36*s12*s13^5)*s23^2 + p1q^2*p2q*((36*s12^3*s13^3 -
                 72*s12^2*s13^4)*s23^2 + (-144*s12^2*s13^3 - 72*s12*s13^4)*
                s23^3) + p1q^3*(-72*s12^2*s13^3*s23^3 + 36*s12*s13^3*
                s23^4)) + p3q*(p1q*p2q^3*(-72*s12^2*s13^4 + 72*s12*s13^5)*
              s23^2 + 36*p1q^4*s12*s13^3*s23^4 + p1q^2*p2q^2*
              ((-72*s12^2*s13^4 + 36*s12*s13^5)*s23^2 + (-72*s12^2*s13^3 -
                 144*s12*s13^4)*s23^3) + p1q^3*p2q*((-72*s12^2*s13^3 -
                 72*s12*s13^4)*s23^3 + 72*s12*s13^3*s23^4)))) +
       ((p2q*p3q^4*(-18*s12^4*s13 - 18*s12^3*s13^2 +
            (-36*s12^3*s13 - 18*s12^2*s13^2)*s23 - 18*s12^2*s13*s23^2) +
          p2q^5*(-18*s12^2*s13^3 - 18*s12*s13^4 + (-36*s12*s13^3 - 18*s13^4)*
             s23 - 18*s13^3*s23^2) + p1q*p2q^4*(-18*s12^2*s13^3 -
            18*s12*s13^4 + (18*s12^2*s13^2 - 18*s12*s13^3 - 18*s13^4)*s23 +
            (34*s12*s13^2 - 2*s13^3)*s23^2 + 16*s13^2*s23^3) +
          p1q^3*p2q^2*((2*s12^3 - 22*s12^2*s13 - 32*s12*s13^2 - 8*s13^3)*
             s23^2 + (5*s12^2 - 45*s12*s13 - 32*s13^2)*s23^3 +
            (3*s12 - 24*s13)*s23^4) + p1q^2*p2q^3*
           ((36*s12^3*s13 + 99*s12^2*s13^2 + 72*s12*s13^3 + 9*s13^4)*s23 +
            (73*s12^2*s13 + 144*s12*s13^2 + 53*s13^3)*s23^2 +
            (39*s12*s13 + 46*s13^2)*s23^3 + 2*s13*s23^4) +
          p1q^4*p2q*((-s12^2 - 2*s12*s13 - s13^2)*s23^3 + (-3*s12 - 3*s13)*
             s23^4 - 2*s23^5) + p3q^3*(p2q^2*(-36*s12^4*s13 +
              36*s12^2*s13^3 + (-72*s12^3*s13 + 36*s12^2*s13^2 +
                36*s12*s13^3)*s23 + (-36*s12^2*s13 + 36*s12*s13^2)*s23^2) +
            p1q*p2q*(-18*s12^4*s13 - 18*s12^3*s13^2 + (36*s12^2*s13^2 +
                18*s12*s13^3)*s23 + (56*s12^2*s13 + 56*s12*s13^2)*s23^2 +
              38*s12*s13*s23^3) + p1q^2*((s12^3 + 2*s12^2*s13 + s12*s13^2)*
               s23^2 + (3*s12^2 + 3*s12*s13)*s23^3 + 2*s12*s23^4)) +
          p3q*(p2q^4*(36*s12^3*s13^2 - 36*s12*s13^4 + (72*s12^2*s13^2 -
                36*s12*s13^3 - 36*s13^4)*s23 + (36*s12*s13^2 - 36*s13^3)*s23^
                2) + p1q*p2q^3*(36*s12^3*s13^2 + 18*s12^2*s13^3 -
              18*s12*s13^4 + (54*s12^3*s13 + 198*s12^2*s13^2 + 72*s12*s13^3 -
                18*s13^4)*s23 + (110*s12^2*s13 + 196*s12*s13^2 + 14*s13^3)*
               s23^2 + (56*s12*s13 + 32*s13^2)*s23^3) + p1q^2*p2q^2*
             ((45*s12^3*s13 + 99*s12^2*s13^2 + 63*s12*s13^3 + 9*s13^4)*s23 +
              (3*s12^3 + 62*s12^2*s13 + 93*s12*s13^2 + 34*s13^3)*s23^2 +
              (7*s12^2 - 16*s12*s13 - 9*s13^2)*s23^3 + (4*s12 - 34*s13)*s23^
                4) + p1q^3*p2q*((3*s12^3 - 20*s12^2*s13 - 31*s12*s13^2 -
                8*s13^3)*s23^2 + (7*s12^2 - 44*s12*s13 - 33*s13^2)*s23^3 +
              (2*s12 - 27*s13)*s23^4 - 2*s23^5) +
            p1q^4*((-s12^2 - 2*s12*s13 - s13^2)*s23^3 + (-3*s12 - 3*s13)*s23^
                4 - 2*s23^5)) + p3q^2*(p2q^3*(-18*s12^4*s13 +
              54*s12^3*s13^2 + 54*s12^2*s13^3 - 18*s12*s13^4 +
              (-36*s12^3*s13 + 126*s12^2*s13^2 + 36*s12*s13^3 - 18*s13^4)*
               s23 + (-18*s12^2*s13 + 72*s12*s13^2 - 18*s13^3)*s23^2) +
            p1q*p2q^2*(-18*s12^4*s13 + 18*s12^3*s13^2 + 36*s12^2*s13^3 +
              (36*s12^3*s13 + 162*s12^2*s13^2 + 54*s12*s13^3 - 18*s13^4)*
               s23 + (130*s12^2*s13 + 146*s12*s13^2 - 20*s13^3)*s23^2 +
              (76*s12*s13 - 2*s13^2)*s23^3) + p1q^2*p2q*
             ((45*s12^3*s13 + 72*s12^2*s13^2 + 27*s12*s13^3)*s23 +
              (4*s12^3 + 81*s12^2*s13 + 58*s12*s13^2 - s13^3)*s23^2 +
              (10*s12^2 + 20*s12*s13 - 19*s13^2)*s23^3 + (6*s12 - 18*s13)*s23^
                4) + p1q^3*((s12^3 + 2*s12^2*s13 + s12*s13^2)*s23^2 +
              (2*s12^2 + s12*s13 - s13^2)*s23^3 + (-s12 - 3*s13)*s23^4 -
              2*s23^5)))*PolyLog(2, p1q/(p1q + p2q)))/
        (2*p1q*p3q^4*s12^3*s13*s23^2 + 2*p1q*p2q^4*s12*s13^3*s23^2 +
         2*p1q^4*p2q*s12*s13*s23^4 + p1q^2*p2q^3*(2*s12*s13^3*s23^2 -
           4*s12*s13^2*s23^3) + p1q^3*p2q^2*(-4*s12*s13^2*s23^3 +
           2*s12*s13*s23^4) + p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*
            s23^2 + p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
         p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*s23^2 +
           p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
             (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) +
           p1q^3*(-4*s12^2*s13*s23^3 + 2*s12*s13*s23^4)) +
         p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
           2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*
            ((-4*s12^2*s13^2 + 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*
                s13^2)*s23^3) + p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*
              s23^3 + 4*s12*s13*s23^4))) +
       ((p2q^5*(-18*s12^2*s13^3 - 18*s12*s13^4 - 18*s12*s13^3*s23) +
          p1q*p2q^4*(-18*s12^2*s13^3 - 18*s12*s13^4 +
            (36*s12^2*s13^2 + 18*s12*s13^3)*s23 + (34*s12*s13^2 - 2*s13^3)*
             s23^2 - 2*s13^2*s23^3) + p1q^2*p2q^3*
           ((9*s12^3*s13 + 54*s12^2*s13^2 + 45*s12*s13^3)*s23 +
            (-8*s12^2*s13 + 27*s12*s13^2 - s13^3)*s23^2 +
            (-15*s12*s13 + s13^2)*s23^3 + 2*s13*s23^4) +
          p1q^3*p2q^2*((-7*s12^3 - 40*s12^2*s13 - 32*s12*s13^2 + s13^3)*
             s23^2 + (-4*s12^2 - 27*s12*s13 + 4*s13^2)*s23^3 +
            (3*s12 + 3*s13)*s23^4) + p1q^4*p2q*((8*s12^2 + 7*s12*s13 - s13^2)*
             s23^3 + (6*s12 - 3*s13)*s23^4 - 2*s23^5) +
          p3q^4*(p2q*(-18*s12^4*s13 - 18*s12^3*s13^2 - 18*s12^3*s13*s23) +
            p1q*((18*s12^4 + 36*s12^3*s13 + 18*s12^2*s13^2)*s23 +
              (36*s12^3 + 36*s12^2*s13)*s23^2 + 18*s12^2*s23^3)) +
          p3q^3*(p2q^2*(-36*s12^4*s13 + 36*s12^2*s13^3 + (-36*s12^3*s13 +
                36*s12^2*s13^2)*s23) + p1q*p2q*(-18*s12^4*s13 -
              18*s12^3*s13^2 + (36*s12^4 + 36*s12^3*s13 - 18*s12*s13^3)*s23 +
              (72*s12^3 + 38*s12^2*s13 - 34*s12*s13^2)*s23^2 +
              (36*s12^2 - 16*s12*s13)*s23^3) +
            p1q^2*((18*s12^4 + 36*s12^3*s13 + 18*s12^2*s13^2)*s23 +
              (10*s12^3 - 7*s12^2*s13 - 17*s12*s13^2)*s23^2 +
              (-24*s12^2 - 33*s12*s13)*s23^3 - 16*s12*s23^4)) +
          p3q^2*(p2q^3*(-18*s12^4*s13 + 54*s12^3*s13^2 + 54*s12^2*s13^3 -
              18*s12*s13^4 + (-18*s12^3*s13 + 72*s12^2*s13^2 - 18*s12*s13^3)*
               s23) + p1q*p2q^2*(-18*s12^4*s13 + 18*s12^3*s13^2 +
              36*s12^2*s13^3 + (36*s12^4 + 54*s12^3*s13 + 108*s12^2*s13^2 +
                36*s12*s13^3)*s23 + (72*s12^3 + 76*s12^2*s13 + 38*s12*s13^2 -
                2*s13^3)*s23^2 + (36*s12^2 + 4*s12*s13 - 2*s13^2)*s23^3) +
            p1q^2*p2q*((27*s12^4 + 72*s12^3*s13 + 63*s12^2*s13^2 +
                18*s12*s13^3)*s23 + (40*s12^3 + 54*s12^2*s13 + 13*s12*s13^2 -
                s13^3)*s23^2 + (19*s12^2 + 2*s12*s13 - s13^2)*s23^3 +
              6*s12*s23^4) + p1q^3*((-26*s12^3 - 43*s12^2*s13 - 17*s12*s13^2)*
               s23^2 + (-34*s12^2 - 26*s12*s13 - s13^2)*s23^3 +
              (-10*s12 - 3*s13)*s23^4 - 2*s23^5)) +
          p3q*(p2q^4*(36*s12^3*s13^2 - 36*s12*s13^4 + (36*s12^2*s13^2 -
                36*s12*s13^3)*s23) + p1q*p2q^3*(36*s12^3*s13^2 +
              18*s12^2*s13^3 - 18*s12*s13^4 + (108*s12^2*s13^2 +
                54*s12*s13^3)*s23 + (2*s12^2*s13 + 70*s12*s13^2 - 4*s13^3)*
               s23^2 + (2*s12*s13 - 4*s13^2)*s23^3) + p1q^2*p2q^2*
             ((27*s12^4 + 63*s12^3*s13 + 81*s12^2*s13^2 + 45*s12*s13^3)*s23 +
              (48*s12^3 + 17*s12^2*s13 + 3*s12*s13^2 - 2*s13^3)*s23^2 +
              (25*s12^2 - 34*s12*s13)*s23^3 + (4*s12 + 2*s13)*s23^4) +
            p1q^3*p2q*((-15*s12^3 - 47*s12^2*s13 - 31*s12*s13^2 + s13^3)*s23^
                2 + (-2*s12^2 - 17*s12*s13 + 3*s13^2)*s23^3 + 11*s12*s23^4 -
              2*s23^5) + p1q^4*((8*s12^2 + 7*s12*s13 - s13^2)*s23^3 +
              (6*s12 - 3*s13)*s23^4 - 2*s23^5)))*PolyLog(2, p1q/(p1q + p3q)))/
        (2*p1q*p3q^4*s12^3*s13*s23^2 + 2*p1q*p2q^4*s12*s13^3*s23^2 +
         2*p1q^4*p2q*s12*s13*s23^4 + p1q^2*p2q^3*(2*s12*s13^3*s23^2 -
           4*s12*s13^2*s23^3) + p1q^3*p2q^2*(-4*s12*s13^2*s23^3 +
           2*s12*s13*s23^4) + p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*
            s23^2 + p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
         p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*s23^2 +
           p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
             (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) +
           p1q^3*(-4*s12^2*s13*s23^3 + 2*s12*s13*s23^4)) +
         p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
           2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*
            ((-4*s12^2*s13^2 + 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*
                s13^2)*s23^3) + p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*
              s23^3 + 4*s12*s13*s23^4))) +
       ((p2q^5*(18*s12*s13^3 + 18*s13^4 + 18*s13^3*s23) +
          p1q*p2q^4*(18*s12^2*s13^2 + 36*s12*s13^3 + 18*s13^4 -
            18*s13^2*s23^2) + p1q^2*p2q^3*(-27*s12^3*s13 - 45*s12^2*s13^2 -
            27*s12*s13^3 - 9*s13^4 + (-81*s12^2*s13 - 117*s12*s13^2 -
              54*s13^3)*s23 + (-54*s12*s13 - 45*s13^2)*s23^2) +
          p1q^4*p2q*((9*s12^2 + 9*s12*s13)*s23^2 + 9*s12*s23^3) +
          p1q^3*p2q^2*((-9*s12^3 - 18*s12^2*s13 + 9*s13^3)*s23 +
            (-9*s12^2 + 18*s12*s13 + 36*s13^2)*s23^2 + 27*s13*s23^3) +
          p3q^4*(p2q*(18*s12^3*s13 + 18*s12^2*s13^2 + 18*s12^2*s13*s23) +
            p1q*(18*s12^4 + 36*s12^3*s13 + 18*s12^2*s13^2 + (36*s12^3 +
                36*s12^2*s13)*s23 + 18*s12^2*s23^2)) +
          p3q^3*(p2q^2*(36*s12^3*s13 - 36*s12*s13^3 + (36*s12^2*s13 -
                36*s12*s13^2)*s23) + p1q*p2q*(36*s12^4 + 36*s12^3*s13 -
              36*s12^2*s13^2 - 36*s12*s13^3 + (72*s12^3 - 18*s12^2*s13 -
                90*s12*s13^2)*s23 + (36*s12^2 - 54*s12*s13)*s23^2) +
            p1q^2*(18*s12^4 + 36*s12^3*s13 + 18*s12^2*s13^2 +
              (9*s12^3 - 9*s12^2*s13 - 18*s12*s13^2)*s23 + (-27*s12^2 -
                36*s12*s13)*s23^2 - 18*s12*s23^3)) +
          p3q^2*(p2q^3*(18*s12^3*s13 - 54*s12^2*s13^2 - 54*s12*s13^3 +
              18*s13^4 + (18*s12^2*s13 - 72*s12*s13^2 + 18*s13^3)*s23) +
            p1q*p2q^2*(36*s12^4 + 18*s12^3*s13 - 54*s12^2*s13^2 -
              18*s12*s13^3 + 18*s13^4 + (72*s12^3 - 54*s12^2*s13 -
                108*s12*s13^2 + 18*s13^3)*s23 + (36*s12^2 - 72*s12*s13)*s23^
                2) + p1q^3*((-27*s12^3 - 45*s12^2*s13 - 18*s12*s13^2)*s23 +
              (-36*s12^2 - 27*s12*s13)*s23^2 - 9*s12*s23^3) +
            p1q^2*p2q*(27*s12^4 + 27*s12^3*s13 - 9*s12^2*s13^2 -
              9*s12*s13^3 + (36*s12^3 - 27*s12^2*s13 - 45*s12*s13^2)*s23 +
              (9*s12^2 - 18*s12*s13 + 18*s13^2)*s23^2 + 18*s13*s23^3)) +
          p3q*(p2q^4*(-36*s12^2*s13^2 + 36*s13^4 + (-36*s12*s13^2 + 36*s13^3)*
               s23) + p1q*p2q^3*(-54*s12^3*s13 - 90*s12^2*s13^2 -
              18*s12*s13^3 + 18*s13^4 + (-108*s12^2*s13 - 126*s12*s13^2 -
                18*s13^3)*s23 + (-54*s12*s13 - 36*s13^2)*s23^2) +
            p1q^4*((9*s12^2 + 9*s12*s13)*s23^2 + 9*s12*s23^3) +
            p1q^2*p2q^2*(27*s12^4 + 18*s12^3*s13 - 18*s12^2*s13^2 -
              18*s12*s13^3 - 9*s13^4 + (45*s12^3 - 45*s12^2*s13 -
                90*s12*s13^2 - 36*s13^3)*s23 + (18*s12^2 - 18*s12*s13 +
                9*s13^2)*s23^2 + 36*s13*s23^3) + p1q^3*p2q*
             ((-18*s12^3 - 27*s12^2*s13 + 9*s13^3)*s23 + (-9*s12^2 +
                27*s12*s13 + 36*s13^2)*s23^2 + (9*s12 + 27*s13)*s23^3)))*
         PolyLog(2, p2q/(p2q + p3q)))/(2*p1q*p3q^4*s12^3*s13*s23 +
         2*p1q*p2q^4*s12*s13^3*s23 + 2*p1q^4*p2q*s12*s13*s23^3 +
         p1q^2*p2q^3*(2*s12*s13^3*s23 - 4*s12*s13^2*s23^2) +
         p1q^3*p2q^2*(-4*s12*s13^2*s23^2 + 2*s12*s13*s23^3) +
         p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*s23 +
           p1q^2*(2*s12^3*s13*s23 - 4*s12^2*s13*s23^2)) +
         p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*s23 +
           p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23 +
             (-8*s12^2*s13 - 4*s12*s13^2)*s23^2) +
           p1q^3*(-4*s12^2*s13*s23^2 + 2*s12*s13*s23^3)) +
         p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23 +
           2*p1q^4*s12*s13*s23^3 + p1q^2*p2q^2*
            ((-4*s12^2*s13^2 + 2*s12*s13^3)*s23 + (-4*s12^2*s13 - 8*s12*
                s13^2)*s23^2) + p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*
              s23^2 + 4*s12*s13*s23^3))) +
       ((p2q^5*(-324*s12^2*s13^5 - 324*s12*s13^6 +
            (180*s12^3*s13^3 + 297*s12^2*s13^4 - 81*s12*s13^5 + 126*s13^6)*
             s23 + (270*s12^2*s13^3 + 207*s12*s13^4 + 126*s13^5)*s23^2 +
            90*s12*s13^3*s23^3) + p3q^5*((243*s12^4*s13^2 + 333*s12^3*s13^3 +
              90*s12^2*s13^4)*s23 + (-180*s12^5 + 36*s12^4*s13 +
              459*s12^3*s13^2 + 90*s12^2*s13^3)*s23^2 +
            (-180*s12^4 + 216*s12^3*s13)*s23^3) + p1q*p2q^4*
           (-324*s12^2*s13^5 - 324*s12*s13^6 + (747*s12^2*s13^4 +
              549*s12*s13^5 + 126*s13^6)*s23 + (-200*s12^3*s13^2 -
              670*s12^2*s13^3 - 303*s12*s13^4 - 454*s13^5)*s23^2 +
            (-220*s12^2*s13^2 - 816*s12*s13^3 - 906*s13^4)*s23^3 +
            (-20*s12*s13^2 - 326*s13^3)*s23^4) +
          p1q^5*((243*s12^2*s13^2 + 333*s12*s13^3 + 90*s13^4)*s23^3 +
            (-180*s12^3 + 36*s12^2*s13 + 459*s12*s13^2 + 90*s13^3)*s23^4 +
            (-180*s12^2 + 216*s12*s13)*s23^5) + p1q^2*p2q^3*
           ((468*s12^3*s13^3 + 2151*s12^2*s13^4 + 1935*s12*s13^5 + 252*s13^6)*
             s23 + (-20*s12^3*s13^2 + 122*s12^2*s13^3 + 1245*s12*s13^4 +
              140*s13^5)*s23^2 + (-140*s12^3*s13 + 589*s12^2*s13^2 +
              591*s12*s13^3 + 56*s13^4)*s23^3 + (-370*s12^2*s13 +
              1171*s12*s13^2 + 820*s13^3)*s23^4 + (-230*s12*s13 + 652*s13^2)*
             s23^5) + p1q^4*p2q*((-486*s12^2*s13^3 - 666*s12*s13^4 -
              180*s13^5)*s23^2 + (180*s12^3*s13 + 315*s12^2*s13^2 -
              243*s12*s13^3 - 72*s13^4)*s23^3 + (-20*s12^3 + 50*s12^2*s13 +
              21*s12*s13^2 + 104*s13^3)*s23^4 + (140*s12^2 - 276*s12*s13 -
              330*s13^2)*s23^5 + (160*s12 - 326*s13)*s23^6) +
          p1q^3*p2q^2*((243*s12^2*s13^4 + 333*s12*s13^5 + 90*s13^6)*s23 +
            (144*s12^3*s13^2 - 1278*s12^2*s13^3 - 1539*s12*s13^4 - 270*s13^5)*
             s23^2 + (40*s12^3*s13 + 773*s12^2*s13^2 - 843*s12*s13^3 -
              370*s13^4)*s23^3 + (160*s12^3 - 356*s12^2*s13 + 645*s12*s13^2 +
              602*s13^3)*s23^4 + (320*s12^2 - 722*s12*s13 + 286*s13^2)*
             s23^5 + (160*s12 - 326*s13)*s23^6) +
          p3q^4*(p2q*(-324*s12^4*s13^3 - 324*s12^3*s13^4 + (-180*s12^6 -
                54*s12^5*s13 + 495*s12^4*s13^2 - 495*s12^3*s13^3 -
                720*s12^2*s13^4 - 180*s12*s13^5)*s23 + (-540*s12^5 +
                648*s12^4*s13 + 819*s12^3*s13^2 - 972*s12^2*s13^3 -
                180*s12*s13^4)*s23^2 + (-360*s12^4 + 882*s12^3*s13 -
                432*s12^2*s13^2)*s23^3) + p1q*((180*s12^6 - 126*s12^5*s13 +
                603*s12^4*s13^2 + 999*s12^3*s13^3 + 90*s12^2*s13^4)*s23 +
              (-20*s12^5 - 490*s12^4*s13 + 399*s12^3*s13^2 - 616*s12^2*
                 s13^3 - 180*s12*s13^4)*s23^2 + (320*s12^4 - 222*s12^3*s13 -
                1284*s12^2*s13^2 - 180*s12*s13^3)*s23^3 + (520*s12^3 -
                758*s12^2*s13)*s23^4)) +
          p3q^3*(p2q^2*(-648*s12^4*s13^3 + 648*s12^2*s13^5 + (-180*s12^6 +
                486*s12^5*s13 + 657*s12^4*s13^2 - 1413*s12^3*s13^3 +
                243*s12^2*s13^4 + 441*s12*s13^5 + 90*s13^6)*s23 +
              (-360*s12^5 + 1602*s12^4*s13 - 117*s12^3*s13^2 - 1764*s12^2*
                 s13^3 + 567*s12*s13^4 + 90*s13^5)*s23^2 + (-180*s12^4 +
                1116*s12^3*s13 - 1224*s12^2*s13^2 + 216*s12*s13^3)*s23^3) +
            p1q*p2q*(-324*s12^4*s13^3 - 324*s12^3*s13^4 + (-720*s12^5*s13 +
                990*s12^4*s13^2 + 72*s12^3*s13^3 - 1170*s12^2*s13^4 +
                144*s12*s13^5)*s23 + (320*s12^5 - 472*s12^4*s13 +
                788*s12^3*s13^2 - 2498*s12^2*s13^3 - 370*s12*s13^4 -
                180*s13^5)*s23^2 + (1360*s12^4 - 688*s12^3*s13 -
                2286*s12^2*s13^2 - 114*s12*s13^3 - 180*s13^4)*s23^3 +
              (1040*s12^3 - 1656*s12^2*s13 + 220*s12*s13^2)*s23^4) +
            p1q^2*((180*s12^6 - 126*s12^5*s13 + 603*s12^4*s13^2 +
                999*s12^3*s13^3 + 90*s12^2*s13^4)*s23 + (-380*s12^5 -
                238*s12^4*s13 - 339*s12^3*s13^2 - 1984*s12^2*s13^3 -
                198*s12*s13^4)*s23^2 + (830*s12^3*s13 - 1947*s12^2*s13^2 +
                179*s12*s13^3 + 90*s13^4)*s23^3 + (60*s12^3 + 10*s12^2*s13 +
                1155*s12*s13^2 + 90*s13^3)*s23^4 + (-500*s12^2 + 868*s12*s13)*
               s23^5)) + p3q*(p2q^4*(648*s12^3*s13^4 - 648*s12*s13^6 +
              (-540*s12^4*s13^2 - 468*s12^3*s13^3 + 711*s12^2*s13^4 -
                675*s12*s13^5 - 18*s13^6)*s23 + (-900*s12^3*s13^2 +
                108*s12^2*s13^3 + 387*s12*s13^4 - 18*s13^5)*s23^2 +
              (-360*s12^2*s13^2 + 396*s12*s13^3)*s23^3) +
            p1q*p2q^3*(648*s12^3*s13^4 + 324*s12^2*s13^5 - 324*s12*s13^6 +
              (-234*s12^3*s13^3 + 2556*s12^2*s13^4 + 1674*s12*s13^5 -
                144*s13^6)*s23 + (-320*s12^4*s13 - 734*s12^3*s13^2 -
                1238*s12^2*s13^3 + 932*s12*s13^4 - 764*s13^5)*s23^2 +
              (-460*s12^3*s13 - 374*s12^2*s13^2 - 1062*s12*s13^3 -
                1272*s13^4)*s23^3 + (-140*s12^2*s13 + 180*s12*s13^2 -
                652*s13^3)*s23^4) + p1q^2*p2q^2*((540*s12^4*s13^2 -
                54*s12^3*s13^3 + 1107*s12^2*s13^4 + 1953*s12*s13^5 +
                252*s13^6)*s23 + (40*s12^4*s13 + 420*s12^3*s13^2 -
                3682*s12^2*s13^3 - 1105*s12*s13^4 + 374*s13^5)*s23^2 +
              (-500*s12^4 + 78*s12^3*s13 + 1881*s12^2*s13^2 - 1645*s12*
                 s13^3 - 98*s13^4)*s23^3 + (-1000*s12^3 + 446*s12^2*s13 +
                3215*s12*s13^2 + 1084*s13^3)*s23^4 + (-500*s12^2 +
                408*s12*s13 + 1304*s13^2)*s23^5) + p1q^3*p2q*
             ((-486*s12^3*s13^3 - 666*s12^2*s13^4 - 180*s12*s13^5)*s23 +
              (360*s12^4*s13 - 612*s12^3*s13^2 - 4014*s12^2*s13^3 -
                3096*s12*s13^4 - 360*s13^5)*s23^2 + (40*s12^4 + 660*s12^3*
                 s13 + 362*s12^2*s13^2 - 1744*s12*s13^3 - 622*s13^4)*s23^3 +
              (-320*s12^3 + 12*s12^2*s13 + 1794*s12*s13^2 + 346*s13^3)*s23^
                4 + (-40*s12^2 - 220*s12*s13 - 44*s13^2)*s23^5 +
              (320*s12 - 652*s13)*s23^6) + p1q^4*((-486*s12^3*s13^2 -
                666*s12^2*s13^3 - 180*s12*s13^4)*s23^2 + (540*s12^4 -
                198*s12^3*s13 - 297*s12^2*s13^2 + 855*s12*s13^3 + 108*s13^4)*
               s23^3 + (340*s12^3 - 922*s12^2*s13 + 939*s12*s13^2 +
                104*s13^3)*s23^4 + (-40*s12^2 - 150*s12*s13 - 330*s13^2)*s23^
                5 + (160*s12 - 326*s13)*s23^6)) +
          p3q^2*(p2q^3*(-324*s12^4*s13^3 + 972*s12^3*s13^4 + 972*s12^2*s13^
                5 - 324*s12*s13^6 + (540*s12^5*s13 - 135*s12^4*s13^2 -
                1233*s12^3*s13^3 + 1467*s12^2*s13^4 + 27*s12*s13^5 -
                54*s13^6)*s23 + (990*s12^4*s13 - 1377*s12^3*s13^2 -
                864*s12^2*s13^3 + 927*s12*s13^4 - 54*s13^5)*s23^2 +
              (450*s12^3*s13 - 1152*s12^2*s13^2 + 522*s12*s13^3)*s23^3) +
            p1q*p2q^2*(-324*s12^4*s13^3 + 324*s12^3*s13^4 + 648*s12^2*s13^5 +
              (1323*s12^4*s13^2 - 81*s12^3*s13^3 + 1413*s12^2*s13^4 +
                1611*s12*s13^5 - 234*s13^6)*s23 + (520*s12^5 + 112*s12^4*
                 s13 + 377*s12^3*s13^2 - 2216*s12^2*s13^3 + 703*s12*s13^4 -
                778*s13^5)*s23^2 + (1040*s12^4 - 926*s12^3*s13 -
                1156*s12^2*s13^2 - 504*s12*s13^3 - 870*s13^4)*s23^3 +
              (520*s12^3 - 1038*s12^2*s13 + 420*s12*s13^2 - 326*s13^3)*s23^
                4) + p1q^2*p2q*((-540*s12^5*s13 + 621*s12^4*s13^2 +
                243*s12^3*s13^3 - 612*s12^2*s13^4 + 306*s12*s13^5)*s23 +
              (-20*s12^5 + 90*s12^4*s13 + 83*s12^3*s13^2 - 4348*s12^2*s13^3 -
                1558*s12*s13^4 - 162*s13^5)*s23^2 + (40*s12^4 + 1030*s12^3*
                 s13 - 367*s12^2*s13^2 - 635*s12*s13^3 - 136*s13^4)*s23^3 +
              (-940*s12^3 + 826*s12^2*s13 + 3199*s12*s13^2 + 678*s13^3)*s23^
                4 + (-1000*s12^2 + 1506*s12*s13 + 652*s13^2)*s23^5) +
            p1q^3*((243*s12^4*s13^2 + 333*s12^3*s13^3 + 90*s12^2*s13^4)*s23 +
              (-540*s12^5 + 288*s12^4*s13 - 765*s12^3*s13^2 - 1944*s12^2*
                 s13^3 - 198*s12*s13^4)*s23^2 + (40*s12^4 + 1070*s12^3*s13 -
                1203*s12^2*s13^2 + 881*s12*s13^3 + 108*s13^4)*s23^3 +
              (60*s12^3 - 190*s12^2*s13 + 1635*s12*s13^2 + 104*s13^3)*s23^4 +
              (-360*s12^2 + 502*s12*s13 - 330*s13^2)*s23^5 +
              (160*s12 - 326*s13)*s23^6)))*PolyLog(2, s12/(s12 + s13 + s23)))/
        (36*p1q*p3q^4*s12^3*s13^3*s23^2 + 36*p1q*p2q^4*s12*s13^5*s23^2 +
         36*p1q^4*p2q*s12*s13^3*s23^4 + p1q^2*p2q^3*(36*s12*s13^5*s23^2 -
           72*s12*s13^4*s23^3) + p1q^3*p2q^2*(-72*s12*s13^4*s23^3 +
           36*s12*s13^3*s23^4) + p3q^3*(p1q*p2q*(72*s12^3*s13^3 -
             72*s12^2*s13^4)*s23^2 + p1q^2*(36*s12^3*s13^3*s23^2 -
             72*s12^2*s13^3*s23^3)) +
         p3q^2*(p1q*p2q^2*(36*s12^3*s13^3 - 144*s12^2*s13^4 + 36*s12*s13^5)*
            s23^2 + p1q^2*p2q*((36*s12^3*s13^3 - 72*s12^2*s13^4)*s23^2 +
             (-144*s12^2*s13^3 - 72*s12*s13^4)*s23^3) +
           p1q^3*(-72*s12^2*s13^3*s23^3 + 36*s12*s13^3*s23^4)) +
         p3q*(p1q*p2q^3*(-72*s12^2*s13^4 + 72*s12*s13^5)*s23^2 +
           36*p1q^4*s12*s13^3*s23^4 + p1q^2*p2q^2*
            ((-72*s12^2*s13^4 + 36*s12*s13^5)*s23^2 +
             (-72*s12^2*s13^3 - 144*s12*s13^4)*s23^3) +
           p1q^3*p2q*((-72*s12^2*s13^3 - 72*s12*s13^4)*s23^3 +
             72*s12*s13^3*s23^4))) +
       ((p3q^5*((-90*s12^6 - 333*s12^5*s13 - 243*s12^4*s13^2)*s23 +
            (-90*s12^5 - 333*s12^4*s13 - 90*s12^3*s13^2)*s23^2 -
            90*s12^3*s13*s23^3) + p2q^5*(-324*s12^4*s13^3 - 324*s12^3*s13^4 +
            (-90*s12^4*s13^2 - 1017*s12^3*s13^3 - 477*s12^2*s13^4 -
              54*s12*s13^5 - 180*s13^6)*s23 + (-90*s12^3*s13^2 -
              819*s12^2*s13^3 + 90*s12*s13^4)*s23^2 +
            (-216*s12*s13^3 + 180*s13^4)*s23^3) + p1q*p2q^4*
           (-324*s12^4*s13^3 - 324*s12^3*s13^4 + (558*s12^4*s13^2 -
              675*s12^3*s13^3 - 603*s12^2*s13^4 + 126*s12*s13^5 - 180*s13^6)*
             s23 + (180*s12^4*s13 + 2626*s12^3*s13^2 + 365*s12^2*s13^3 +
              412*s12*s13^4 + 540*s13^5)*s23^2 + (180*s12^3*s13 +
              2646*s12^2*s13^2 - 376*s12*s13^3 + 200*s13^4)*s23^3 +
            (758*s12*s13^2 - 520*s13^3)*s23^4) +
          p1q^5*((-90*s12^4 - 333*s12^3*s13 - 243*s12^2*s13^2)*s23^3 +
            (-90*s12^3 - 333*s12^2*s13 - 90*s12*s13^2)*s23^4 -
            90*s12*s13*s23^5) + p1q^2*p2q^3*
           ((162*s12^5*s13 + 882*s12^4*s13^2 + 171*s12^3*s13^3 -
              369*s12^2*s13^4 + 180*s12*s13^5)*s23 +
            (3040*s12^3*s13^2 + 1085*s12^2*s13^3 - 128*s12*s13^4 + 540*s13^5)*
             s23^2 + (-90*s12^4 - 2183*s12^3*s13 + 1727*s12^2*s13^2 -
              732*s12*s13^3 - 520*s13^4)*s23^3 +
            (-90*s12^3 - 2799*s12^2*s13 + 808*s12*s13^2 - 560*s13^3)*s23^4 +
            (-868*s12*s13 + 500*s13^2)*s23^5) + p1q^4*p2q*
           ((180*s12^4*s13 + 666*s12^3*s13^2 + 486*s12^2*s13^3)*s23^2 +
            (90*s12^4 - 261*s12^3*s13 + 315*s12^2*s13^2 + 360*s12*s13^3)*
             s23^3 + (772*s12^3 - 85*s12^2*s13 + 304*s12*s13^2 + 180*s13^3)*
             s23^4 + (1008*s12^2 - 70*s12*s13 + 20*s13^2)*s23^5 +
            (326*s12 - 160*s13)*s23^6) + p1q^3*p2q^2*
           ((-90*s12^4*s13^2 - 333*s12^3*s13^3 - 243*s12^2*s13^4)*s23 +
            (-198*s12^5 - 720*s12^4*s13 + 468*s12^3*s13^2 + 387*s12^2*s13^3 -
              450*s12*s13^4)*s23^2 + (-342*s12^4 - 2921*s12^3*s13 -
              397*s12^2*s13^2 - 212*s12*s13^3 - 540*s13^4)*s23^3 +
            (502*s12^3 - 2623*s12^2*s13 + 444*s12*s13^2 + 140*s13^3)*s23^4 +
            (972*s12^2 - 848*s12*s13 + 520*s13^2)*s23^5 + (326*s12 - 160*s13)*
             s23^6) + p3q^4*(p2q*(-324*s12^6*s13 - 324*s12^5*s13^2 +
              (90*s12^6 - 909*s12^5*s13 - 9*s12^4*s13^2 + 666*s12^3*s13^3)*
               s23 + (90*s12^5 - 1071*s12^4*s13 + 630*s12^3*s13^2 +
                360*s12^2*s13^3)*s23^2 + (-396*s12^3*s13 + 360*s12^2*s13^2)*
               s23^3) + p1q*((-126*s12^6 - 225*s12^5*s13 - 99*s12^4*s13^2)*
               s23 + (1024*s12^5 + 1427*s12^4*s13 + 376*s12^3*s13^2)*s23^2 +
              (1476*s12^4 + 722*s12^3*s13 + 20*s12^2*s13^2)*s23^3 +
              (326*s12^3 + 20*s12^2*s13)*s23^4)) +
          p3q^3*(p2q^2*(-648*s12^6*s13 + 648*s12^4*s13^3 + (90*s12^6 -
                1953*s12^5*s13 + 1179*s12^4*s13^2 + 1143*s12^3*s13^3 -
                783*s12^2*s13^4)*s23 + (90*s12^5 - 1917*s12^4*s13 +
                2556*s12^3*s13^2 - 81*s12^2*s13^3 - 450*s12*s13^4)*s23^2 +
              (-522*s12^3*s13 + 1152*s12^2*s13^2 - 450*s12*s13^3)*s23^3) +
            p1q*p2q*(-324*s12^6*s13 - 324*s12^5*s13^2 + (468*s12^6 +
                270*s12^5*s13 + 1008*s12^4*s13^2 + 882*s12^3*s13^3)*s23 +
              (2228*s12^5 + 1652*s12^4*s13 + 1354*s12^3*s13^2 + 706*s12^2*
                 s13^3)*s23^2 + (2412*s12^4 + 238*s12^3*s13 + 666*s12^2*
                 s13^2 + 140*s12*s13^3)*s23^3 + (652*s12^3 - 180*s12^2*s13 +
                140*s12*s13^2)*s23^4) + p1q^2*((-126*s12^6 - 225*s12^5*s13 -
                99*s12^4*s13^2)*s23 + (1240*s12^5 + 1661*s12^4*s13 +
                394*s12^3*s13^2)*s23^2 + (-50*s12^4 - 1205*s12^3*s13 -
                183*s12^2*s13^2)*s23^3 + (-2068*s12^3 - 605*s12^2*s13 +
                230*s12*s13^2)*s23^4 + (-652*s12^2 + 230*s12*s13)*s23^5)) +
          p3q*(p2q^4*(648*s12^5*s13^2 - 648*s12^3*s13^4 + (180*s12^5*s13 +
                2124*s12^4*s13^2 - 819*s12^3*s13^3 - 801*s12^2*s13^4 +
                486*s12*s13^5 - 180*s13^6)*s23 + (180*s12^4*s13 +
                1728*s12^3*s13^2 - 1917*s12^2*s13^3 + 144*s12*s13^4 +
                180*s13^5)*s23^2 + (432*s12^2*s13^2 - 882*s12*s13^3 +
                360*s13^4)*s23^3) + p1q*p2q^3*(648*s12^5*s13^2 +
              324*s12^4*s13^3 - 324*s12^3*s13^4 + (180*s12^5*s13 +
                3762*s12^4*s13^2 + 900*s12^3*s13^3 - 990*s12^2*s13^4 +
                720*s12*s13^5)*s23 + (180*s12^5 + 58*s12^4*s13 +
                6898*s12^3*s13^2 + 1112*s12^2*s13^3 - 4*s12*s13^4 +
                720*s13^5)*s23^2 + (180*s12^4 - 522*s12^3*s13 + 5702*s12^2*
                 s13^2 - 828*s12*s13^3 - 320*s13^4)*s23^3 + (-220*s12^2*s13 +
                1656*s12*s13^2 - 1040*s13^3)*s23^4) + p1q^2*p2q^2*
             ((486*s12^6 + 1314*s12^5*s13 + 2286*s12^4*s13^2 + 675*s12^3*
                 s13^3 - 783*s12^2*s13^4)*s23 + (936*s12^5 + 1264*s12^4*s13 +
                4182*s12^3*s13^2 + 1125*s12^2*s13^3 - 830*s12*s13^4)*s23^2 +
              (-824*s12^4 - 5051*s12^3*s13 + 151*s12^2*s13^2 - 714*s12*
                 s13^3 - 1060*s13^4)*s23^3 + (-1926*s12^3 - 5921*s12^2*s13 +
                670*s12*s13^2 - 60*s13^3)*s23^4 + (-652*s12^2 -
                1506*s12*s13 + 1000*s13^2)*s23^5) + p1q^3*p2q*
             ((180*s12^5*s13 + 666*s12^4*s13^2 + 486*s12^3*s13^3)*s23 +
              (-198*s12^5 + 1260*s12^4*s13 + 2412*s12^3*s13^2 + 648*s12^2*
                 s13^3)*s23^2 + (-1580*s12^4 - 2058*s12^3*s13 - 1086*s12^2*
                 s13^2 + 220*s12*s13^3)*s23^3 + (-706*s12^3 - 2082*s12^2*
                 s13 + 96*s12*s13^2 + 680*s13^3)*s23^4 + (1328*s12^2 -
                472*s12*s13 + 360*s13^2)*s23^5 + (652*s12 - 320*s13)*s23^6) +
            p1q^4*((180*s12^5 + 666*s12^4*s13 + 486*s12^3*s13^2)*s23^2 +
              (-90*s12^4 - 9*s12^3*s13 - 225*s12^2*s13^2)*s23^3 +
              (412*s12^3 + 347*s12^2*s13 - 110*s12*s13^2)*s23^4 +
              (1008*s12^2 + 56*s12*s13 - 160*s13^2)*s23^5 + (326*s12 -
                160*s13)*s23^6)) + p3q^2*(p2q^3*(-324*s12^6*s13 +
              972*s12^5*s13^2 + 972*s12^4*s13^3 - 324*s12^3*s13^4 +
              (-90*s12^6 - 1197*s12^5*s13 + 3159*s12^4*s13^2 + 675*s12^3*
                 s13^3 - 1107*s12^2*s13^4 + 540*s12*s13^5)*s23 +
              (-90*s12^5 - 999*s12^4*s13 + 3654*s12^3*s13^2 - 1539*s12^2*
                 s13^3 - 396*s12*s13^4 + 180*s13^5)*s23^2 + (-216*s12^3*s13 +
                1224*s12^2*s13^2 - 1116*s12*s13^3 + 180*s13^4)*s23^3) +
            p1q*p2q^2*(-324*s12^6*s13 + 324*s12^5*s13^2 + 648*s12^4*s13^3 +
              (558*s12^6 + 333*s12^5*s13 + 3447*s12^4*s13^2 + 1377*s12^3*
                 s13^3 - 1323*s12^2*s13^4)*s23 + (1672*s12^5 + 445*s12^4*
                 s13 + 5016*s12^3*s13^2 + 931*s12^2*s13^3 - 830*s12*s13^4)*
               s23^2 + (1440*s12^4 - 862*s12^3*s13 + 3702*s12^2*s13^2 -
                312*s12*s13^3 - 520*s13^4)*s23^3 + (326*s12^3 - 420*s12^2*
                 s13 + 1038*s12*s13^2 - 520*s13^3)*s23^4) +
            p1q^2*p2q*((396*s12^6 + 1557*s12^5*s13 + 2511*s12^4*s13^2 +
                1350*s12^3*s13^3)*s23 + (1492*s12^5 + 3573*s12^4*s13 +
                3210*s12^3*s13^2 + 544*s12^2*s13^3)*s23^2 + (-1180*s12^4 -
                2975*s12^3*s13 - 1471*s12^2*s13^2)*s23^3 + (-3580*s12^3 -
                3727*s12^2*s13 + 92*s12*s13^2 + 500*s13^3)*s23^4 +
              (-1304*s12^2 - 408*s12*s13 + 500*s13^2)*s23^5) +
            p1q^3*((-90*s12^6 - 333*s12^5*s13 - 243*s12^4*s13^2)*s23 +
              (306*s12^5 + 567*s12^4*s13 + 414*s12^3*s13^2)*s23^2 +
              (-1526*s12^4 - 1693*s12^3*s13 - 185*s12^2*s13^2)*s23^3 +
              (-1892*s12^3 + 55*s12^2*s13 + 210*s12*s13^2)*s23^4 +
              (356*s12^2 + 376*s12*s13 - 160*s13^2)*s23^5 + (326*s12 -
                160*s13)*s23^6)))*PolyLog(2, s13/(s12 + s13 + s23)))/
        (36*p1q*p3q^4*s12^5*s13*s23^2 + 36*p1q*p2q^4*s12^3*s13^3*s23^2 +
         36*p1q^4*p2q*s12^3*s13*s23^4 + p1q^2*p2q^3*(36*s12^3*s13^3*s23^2 -
           72*s12^3*s13^2*s23^3) + p1q^3*p2q^2*(-72*s12^3*s13^2*s23^3 +
           36*s12^3*s13*s23^4) + p3q^3*(p1q*p2q*(72*s12^5*s13 -
             72*s12^4*s13^2)*s23^2 + p1q^2*(36*s12^5*s13*s23^2 -
             72*s12^4*s13*s23^3)) + p3q^2*(p1q*p2q^2*(36*s12^5*s13 -
             144*s12^4*s13^2 + 36*s12^3*s13^3)*s23^2 +
           p1q^2*p2q*((36*s12^5*s13 - 72*s12^4*s13^2)*s23^2 +
             (-144*s12^4*s13 - 72*s12^3*s13^2)*s23^3) +
           p1q^3*(-72*s12^4*s13*s23^3 + 36*s12^3*s13*s23^4)) +
         p3q*(p1q*p2q^3*(-72*s12^4*s13^2 + 72*s12^3*s13^3)*s23^2 +
           36*p1q^4*s12^3*s13*s23^4 + p1q^2*p2q^2*
            ((-72*s12^4*s13^2 + 36*s12^3*s13^3)*s23^2 +
             (-72*s12^4*s13 - 144*s12^3*s13^2)*s23^3) +
           p1q^3*p2q*((-72*s12^4*s13 - 72*s12^3*s13^2)*s23^3 +
             72*s12^3*s13*s23^4))) +
       ((p3q^5*((153*s12^6*s13^2 - 153*s12^4*s13^4)*s23 +
            (-180*s12^7 + 36*s12^6*s13 + 369*s12^5*s13^2 - 243*s12^4*s13^3 -
              90*s12^3*s13^4)*s23^2 + (-180*s12^6 + 216*s12^5*s13 -
              90*s12^3*s13^3)*s23^3) + p2q^5*(-648*s12^4*s13^5 -
            648*s12^3*s13^6 + (180*s12^5*s13^3 + 207*s12^4*s13^4 -
              1098*s12^3*s13^5 - 351*s12^2*s13^6 - 54*s12*s13^7 - 180*s13^8)*
             s23 + (270*s12^4*s13^3 + 117*s12^3*s13^4 - 693*s12^2*s13^5 +
              90*s12*s13^6)*s23^2 + (90*s12^3*s13^3 - 216*s12*s13^5 +
              180*s13^6)*s23^3) + p1q*p2q^4*(-648*s12^4*s13^5 -
            648*s12^3*s13^6 + (1305*s12^4*s13^4 - 126*s12^3*s13^5 -
              477*s12^2*s13^6 + 126*s12*s13^7 - 180*s13^8)*s23 +
            (-200*s12^5*s13^2 - 490*s12^4*s13^3 + 2251*s12^3*s13^4 -
              161*s12^2*s13^5 + 412*s12*s13^6 + 540*s13^7)*s23^2 +
            (-220*s12^4*s13^2 - 636*s12^3*s13^3 + 1668*s12^2*s13^4 -
              376*s12*s13^5 + 200*s13^6)*s23^3 + (-20*s12^3*s13^2 -
              326*s12^2*s13^3 + 758*s12*s13^4 - 520*s13^5)*s23^4) +
          p1q^5*((153*s12^4*s13^2 - 153*s12^2*s13^4)*s23^3 +
            (-180*s12^5 + 36*s12^4*s13 + 369*s12^3*s13^2 - 243*s12^2*s13^3 -
              90*s12*s13^4)*s23^4 + (-180*s12^4 + 216*s12^3*s13 -
              90*s12*s13^3)*s23^5) + p1q^2*p2q^3*
           ((630*s12^5*s13^3 + 3033*s12^4*s13^4 + 2106*s12^3*s13^5 -
              117*s12^2*s13^6 + 180*s12*s13^7)*s23 +
            (-20*s12^5*s13^2 + 158*s12^4*s13^3 + 4285*s12^3*s13^4 +
              1189*s12^2*s13^5 - 128*s12*s13^6 + 540*s13^7)*s23^2 +
            (-140*s12^5*s13 + 499*s12^4*s13^2 - 1484*s12^3*s13^3 +
              1819*s12^2*s13^4 - 732*s12*s13^5 - 520*s13^6)*s23^3 +
            (-370*s12^4*s13 + 1081*s12^3*s13^2 - 1907*s12^2*s13^3 +
              808*s12*s13^4 - 560*s13^5)*s23^4 + (-230*s12^3*s13 +
              652*s12^2*s13^2 - 868*s12*s13^3 + 500*s13^4)*s23^5) +
          p1q^4*p2q*((-306*s12^4*s13^3 + 306*s12^2*s13^5)*s23^2 +
            (180*s12^5*s13 + 369*s12^4*s13^2 - 576*s12^3*s13^3 +
              207*s12^2*s13^4 + 360*s12*s13^5)*s23^3 +
            (-20*s12^5 + 50*s12^4*s13 + 685*s12^3*s13^2 - 89*s12^2*s13^3 +
              304*s12*s13^4 + 180*s13^5)*s23^4 + (140*s12^4 - 276*s12^3*s13 +
              606*s12^2*s13^2 - 70*s12*s13^3 + 20*s13^4)*s23^5 +
            (160*s12^3 - 326*s12^2*s13 + 326*s12*s13^2 - 160*s13^3)*s23^6) +
          p1q^3*p2q^2*((153*s12^4*s13^4 - 153*s12^2*s13^6)*s23 +
            (18*s12^5*s13^2 - 1818*s12^4*s13^3 - 927*s12^3*s13^4 +
              153*s12^2*s13^5 - 450*s12*s13^6)*s23^2 +
            (40*s12^5*s13 + 611*s12^4*s13^2 - 3440*s12^3*s13^3 -
              623*s12^2*s13^4 - 212*s12*s13^5 - 540*s13^6)*s23^3 +
            (160*s12^5 - 356*s12^4*s13 + 1255*s12^3*s13^2 - 1913*s12^2*s13^
                3 + 444*s12*s13^4 + 140*s13^5)*s23^4 +
            (320*s12^4 - 722*s12^3*s13 + 1258*s12^2*s13^2 - 848*s12*s13^3 +
              520*s13^4)*s23^5 + (160*s12^3 - 326*s12^2*s13 + 326*s12*s13^2 -
              160*s13^3)*s23^6) + p3q^4*(p2q*(-648*s12^6*s13^3 -
              648*s12^5*s13^4 + (-180*s12^8 - 54*s12^7*s13 + 585*s12^6*
                 s13^2 - 1404*s12^5*s13^3 - 729*s12^4*s13^4 + 486*s12^3*
                 s13^5)*s23 + (-540*s12^7 + 648*s12^6*s13 + 909*s12^5*s13^2 -
                2043*s12^4*s13^3 + 450*s12^3*s13^4 + 360*s12^2*s13^5)*s23^2 +
              (-360*s12^6 + 882*s12^5*s13 - 432*s12^4*s13^2 - 396*s12^3*
                 s13^3 + 360*s12^2*s13^4)*s23^3) +
            p1q*((180*s12^8 - 126*s12^7*s13 + 477*s12^6*s13^2 + 774*s12^5*
                 s13^3 - 9*s12^4*s13^4)*s23 + (-20*s12^7 - 490*s12^6*s13 +
                1423*s12^5*s13^2 + 811*s12^4*s13^3 + 196*s12^3*s13^4)*s23^2 +
              (320*s12^6 - 222*s12^5*s13 + 192*s12^4*s13^2 + 542*s12^3*
                 s13^3 + 20*s12^2*s13^4)*s23^3 + (520*s12^5 - 758*s12^4*s13 +
                326*s12^3*s13^2 + 20*s12^2*s13^3)*s23^4)) +
          p3q^3*(p2q^2*(-1296*s12^6*s13^3 + 1296*s12^4*s13^5 +
              (-180*s12^8 + 486*s12^7*s13 + 747*s12^6*s13^2 - 3366*s12^5*
                 s13^3 + 1422*s12^4*s13^4 + 1584*s12^3*s13^5 - 693*s12^2*
                 s13^6)*s23 + (-360*s12^7 + 1602*s12^6*s13 - 27*s12^5*s13^2 -
                3681*s12^4*s13^3 + 3123*s12^3*s13^4 + 9*s12^2*s13^5 -
                450*s12*s13^6)*s23^2 + (-180*s12^6 + 1116*s12^5*s13 -
                1224*s12^4*s13^2 - 306*s12^3*s13^3 + 1152*s12^2*s13^4 -
                450*s12*s13^5)*s23^3) + p1q*p2q*(-648*s12^6*s13^3 -
              648*s12^5*s13^4 + (-720*s12^7*s13 + 1458*s12^6*s13^2 +
                342*s12^5*s13^3 - 162*s12^4*s13^4 + 1026*s12^3*s13^5)*s23 +
              (320*s12^7 - 472*s12^6*s13 + 3016*s12^5*s13^2 - 774*s12^4*
                 s13^3 + 1056*s12^3*s13^4 + 526*s12^2*s13^5)*s23^2 +
              (1360*s12^6 - 688*s12^5*s13 + 126*s12^4*s13^2 + 196*s12^3*
                 s13^3 + 486*s12^2*s13^4 + 140*s12*s13^5)*s23^3 +
              (1040*s12^5 - 1656*s12^4*s13 + 872*s12^3*s13^2 - 180*s12^2*
                 s13^3 + 140*s12*s13^4)*s23^4) +
            p1q^2*((180*s12^8 - 126*s12^7*s13 + 477*s12^6*s13^2 +
                774*s12^5*s13^3 - 9*s12^4*s13^4)*s23 + (-380*s12^7 -
                238*s12^6*s13 + 937*s12^5*s13^2 - 251*s12^4*s13^3 +
                232*s12^3*s13^4)*s23^2 + (830*s12^5*s13 - 1889*s12^4*s13^2 -
                918*s12^3*s13^3 - 93*s12^2*s13^4)*s23^3 + (60*s12^5 +
                10*s12^4*s13 - 841*s12^3*s13^2 - 515*s12^2*s13^3 +
                230*s12*s13^4)*s23^4 + (-500*s12^4 + 868*s12^3*s13 -
                652*s12^2*s13^2 + 230*s12*s13^3)*s23^5)) +
          p3q*(p2q^4*(1296*s12^5*s13^4 - 1296*s12^3*s13^6 +
              (-540*s12^6*s13^2 - 288*s12^5*s13^3 + 2835*s12^4*s13^4 -
                1494*s12^3*s13^5 - 819*s12^2*s13^6 + 486*s12*s13^7 -
                180*s13^8)*s23 + (-900*s12^5*s13^2 + 288*s12^4*s13^3 +
                2115*s12^3*s13^4 - 1935*s12^2*s13^5 + 144*s12*s13^6 +
                180*s13^7)*s23^2 + (-360*s12^4*s13^2 + 396*s12^3*s13^3 +
                432*s12^2*s13^4 - 882*s12*s13^5 + 360*s13^6)*s23^3) +
            p1q*p2q^3*(1296*s12^5*s13^4 + 648*s12^4*s13^5 - 648*s12^3*s13^6 +
              (-54*s12^5*s13^3 + 6318*s12^4*s13^4 + 2574*s12^3*s13^5 -
                1134*s12^2*s13^6 + 720*s12*s13^7)*s23 + (-320*s12^6*s13 -
                554*s12^5*s13^2 - 1108*s12^4*s13^3 + 7758*s12^3*s13^4 +
                204*s12^2*s13^5 - 4*s12*s13^6 + 720*s13^7)*s23^2 +
              (-460*s12^5*s13 - 194*s12^4*s13^2 - 1512*s12^3*s13^3 +
                4286*s12^2*s13^4 - 828*s12*s13^5 - 320*s13^6)*s23^3 +
              (-140*s12^4*s13 + 180*s12^3*s13^2 - 872*s12^2*s13^3 +
                1656*s12*s13^4 - 1040*s13^5)*s23^4) + p1q^2*p2q^2*
             ((1026*s12^6*s13^2 + 1260*s12^5*s13^3 + 3393*s12^4*s13^4 +
                2628*s12^3*s13^5 - 531*s12^2*s13^6)*s23 + (40*s12^6*s13 +
                1464*s12^5*s13^2 - 2130*s12^4*s13^3 + 3185*s12^3*s13^4 +
                1427*s12^2*s13^5 - 830*s12*s13^6)*s23^2 + (-500*s12^6 +
                78*s12^5*s13 + 1309*s12^4*s13^2 - 6300*s12^3*s13^3 +
                53*s12^2*s13^4 - 714*s12*s13^5 - 1060*s13^6)*s23^3 +
              (-1000*s12^5 + 446*s12^4*s13 + 1433*s12^3*s13^2 - 4765*s12^2*
                 s13^3 + 670*s12*s13^4 - 60*s13^5)*s23^4 + (-500*s12^4 +
                408*s12^3*s13 + 652*s12^2*s13^2 - 1506*s12*s13^3 +
                1000*s13^4)*s23^5) + p1q^3*p2q*((-306*s12^5*s13^3 +
                306*s12^3*s13^5)*s23 + (360*s12^6*s13 - 702*s12^5*s13^2 -
                2502*s12^4*s13^3 - 504*s12^3*s13^4 + 324*s12^2*s13^5)*s23^2 +
              (40*s12^6 + 660*s12^5*s13 - 966*s12^4*s13^2 - 3442*s12^3*
                 s13^3 - 1600*s12^2*s13^4 + 220*s12*s13^5)*s23^3 +
              (-320*s12^5 + 12*s12^4*s13 + 1160*s12^3*s13^2 - 1736*s12^2*
                 s13^3 + 96*s12*s13^4 + 680*s13^5)*s23^4 + (-40*s12^4 -
                220*s12^3*s13 + 1212*s12^2*s13^2 - 472*s12*s13^3 + 360*s13^4)*
               s23^5 + (320*s12^3 - 652*s12^2*s13 + 652*s12*s13^2 -
                320*s13^3)*s23^6) + p1q^4*((-306*s12^5*s13^2 + 306*s12^3*
                 s13^4)*s23^2 + (540*s12^6 - 198*s12^5*s13 - 423*s12^4*
                 s13^2 + 774*s12^3*s13^3 - 153*s12^2*s13^4)*s23^3 +
              (340*s12^5 - 922*s12^4*s13 + 1243*s12^3*s13^2 + 343*s12^2*
                 s13^3 - 110*s12*s13^4)*s23^4 + (-40*s12^4 - 150*s12^3*s13 +
                606*s12^2*s13^2 + 56*s12*s13^3 - 160*s13^4)*s23^5 +
              (160*s12^3 - 326*s12^2*s13 + 326*s12*s13^2 - 160*s13^3)*s23^
                6)) + p3q^2*(p2q^3*(-648*s12^6*s13^3 + 1944*s12^5*s13^4 +
              1944*s12^4*s13^5 - 648*s12^3*s13^6 + (540*s12^7*s13 -
                225*s12^6*s13^2 - 2430*s12^5*s13^3 + 4626*s12^4*s13^4 +
                702*s12^3*s13^5 - 1161*s12^2*s13^6 + 540*s12*s13^7)*s23 +
              (990*s12^6*s13 - 1467*s12^5*s13^2 - 1863*s12^4*s13^3 +
                4581*s12^3*s13^4 - 1593*s12^2*s13^5 - 396*s12*s13^6 +
                180*s13^7)*s23^2 + (450*s12^5*s13 - 1152*s12^4*s13^2 +
                306*s12^3*s13^3 + 1224*s12^2*s13^4 - 1116*s12*s13^5 +
                180*s13^6)*s23^3) + p1q*p2q^2*(-648*s12^6*s13^3 +
              648*s12^5*s13^4 + 1296*s12^4*s13^5 + (1881*s12^6*s13^2 +
                252*s12^5*s13^3 + 4860*s12^4*s13^4 + 2988*s12^3*s13^5 -
                1557*s12^2*s13^6)*s23 + (520*s12^7 + 112*s12^6*s13 +
                2049*s12^5*s13^2 - 1627*s12^4*s13^3 + 5791*s12^3*s13^4 +
                81*s12^2*s13^5 - 830*s12*s13^6)*s23^2 + (1040*s12^6 -
                926*s12^5*s13 + 284*s12^4*s13^2 - 1222*s12^3*s13^3 +
                2760*s12^2*s13^4 - 312*s12*s13^5 - 520*s13^6)*s23^3 +
              (520*s12^5 - 1038*s12^4*s13 + 746*s12^3*s13^2 - 746*s12^2*
                 s13^3 + 1038*s12*s13^4 - 520*s13^5)*s23^4) +
            p1q^2*p2q*((-540*s12^7*s13 + 1017*s12^6*s13^2 + 1800*s12^5*
                 s13^3 + 1899*s12^4*s13^4 + 1656*s12^3*s13^5)*s23 +
              (-20*s12^7 + 90*s12^6*s13 + 1719*s12^5*s13^2 - 451*s12^4*
                 s13^3 + 1796*s12^3*s13^4 + 346*s12^2*s13^5)*s23^2 +
              (40*s12^6 + 1030*s12^5*s13 - 1187*s12^4*s13^2 - 3214*s12^3*
                 s13^3 - 1643*s12^2*s13^4)*s23^3 + (-940*s12^5 +
                826*s12^4*s13 - 165*s12^3*s13^2 - 3049*s12^2*s13^3 +
                92*s12*s13^4 + 500*s13^5)*s23^4 + (-1000*s12^4 +
                1506*s12^3*s13 - 652*s12^2*s13^2 - 408*s12*s13^3 + 500*s13^4)*
               s23^5) + p1q^3*((153*s12^6*s13^2 - 153*s12^4*s13^4)*s23 +
              (-540*s12^7 + 288*s12^6*s13 - 423*s12^5*s13^2 - 1305*s12^4*
                 s13^3 + 252*s12^3*s13^4)*s23^2 + (40*s12^6 + 1070*s12^5*
                 s13 - 2657*s12^4*s13^2 - 776*s12^3*s13^3 - 113*s12^2*s13^4)*
               s23^3 + (60*s12^5 - 190*s12^4*s13 - 293*s12^3*s13^2 +
                51*s12^2*s13^3 + 210*s12*s13^4)*s23^4 + (-360*s12^4 +
                502*s12^3*s13 - 46*s12^2*s13^2 + 376*s12*s13^3 - 160*s13^4)*
               s23^5 + (160*s12^3 - 326*s12^2*s13 + 326*s12*s13^2 -
                160*s13^3)*s23^6)))*PolyLog(2, s23/(s12 + s13 + s23)))/
        (36*p1q*p3q^4*s12^5*s13^3*s23^2 + 36*p1q*p2q^4*s12^3*s13^5*s23^2 +
         36*p1q^4*p2q*s12^3*s13^3*s23^4 + p1q^2*p2q^3*(36*s12^3*s13^5*s23^2 -
           72*s12^3*s13^4*s23^3) + p1q^3*p2q^2*(-72*s12^3*s13^4*s23^3 +
           36*s12^3*s13^3*s23^4) + p3q^3*(p1q*p2q*(72*s12^5*s13^3 -
             72*s12^4*s13^4)*s23^2 + p1q^2*(36*s12^5*s13^3*s23^2 -
             72*s12^4*s13^3*s23^3)) +
         p3q^2*(p1q*p2q^2*(36*s12^5*s13^3 - 144*s12^4*s13^4 + 36*s12^3*s13^5)*
            s23^2 + p1q^2*p2q*((36*s12^5*s13^3 - 72*s12^4*s13^4)*s23^2 +
             (-144*s12^4*s13^3 - 72*s12^3*s13^4)*s23^3) +
           p1q^3*(-72*s12^4*s13^3*s23^3 + 36*s12^3*s13^3*s23^4)) +
         p3q*(p1q*p2q^3*(-72*s12^4*s13^4 + 72*s12^3*s13^5)*s23^2 +
           36*p1q^4*s12^3*s13^3*s23^4 + p1q^2*p2q^2*
            ((-72*s12^4*s13^4 + 36*s12^3*s13^5)*s23^2 +
             (-72*s12^4*s13^3 - 144*s12^3*s13^4)*s23^3) +
           p1q^3*p2q*((-72*s12^4*s13^3 - 72*s12^3*s13^4)*s23^3 +
             72*s12^3*s13^3*s23^4))) +
       ((p2q^5*(36*s12^2*s13^3 + 36*s12*s13^4 + (54*s12*s13^3 + 18*s13^4)*
             s23 + 18*s13^3*s23^2) + p1q*p2q^4*(36*s12^2*s13^3 +
            36*s12*s13^4 + (-54*s12^2*s13^2 + 18*s13^4)*s23 -
            72*s12*s13^2*s23^2 - 18*s13^2*s23^3) + p1q^2*p2q^3*
           ((-45*s12^3*s13 - 153*s12^2*s13^2 - 117*s12*s13^3 - 9*s13^4)*s23 +
            (-63*s12^2*s13 - 171*s12*s13^2 - 54*s13^3)*s23^2 +
            (-18*s12*s13 - 45*s13^2)*s23^3) + p1q^4*p2q*
           ((-9*s12^2 - 9*s12*s13)*s23^3 - 9*s12*s23^4) +
          p1q^3*p2q^2*((9*s12^3 + 72*s12^2*s13 + 72*s12*s13^2 + 9*s13^3)*
             s23^2 + (9*s12^2 + 90*s12*s13 + 36*s13^2)*s23^3 +
            27*s13*s23^4) + p3q^4*(p2q*(36*s12^4*s13 + 36*s12^3*s13^2 +
              (54*s12^3*s13 + 18*s12^2*s13^2)*s23 + 18*s12^2*s13*s23^2) +
            p1q*((-18*s12^4 - 36*s12^3*s13 - 18*s12^2*s13^2)*s23 +
              (-36*s12^3 - 36*s12^2*s13)*s23^2 - 18*s12^2*s23^3)) +
          p3q^3*(p2q^2*(72*s12^4*s13 - 72*s12^2*s13^3 + (108*s12^3*s13 -
                72*s12^2*s13^2 - 36*s12*s13^3)*s23 + (36*s12^2*s13 -
                36*s12*s13^2)*s23^2) + p1q*p2q*(36*s12^4*s13 +
              36*s12^3*s13^2 + (-36*s12^4 - 36*s12^3*s13 - 36*s12^2*s13^2)*
               s23 + (-72*s12^3 - 90*s12^2*s13 - 18*s12*s13^2)*s23^2 +
              (-36*s12^2 - 18*s12*s13)*s23^3) +
            p1q^2*((-18*s12^4 - 36*s12^3*s13 - 18*s12^2*s13^2)*s23 +
              (-9*s12^3 + 9*s12^2*s13 + 18*s12*s13^2)*s23^2 +
              (27*s12^2 + 36*s12*s13)*s23^3 + 18*s12*s23^4)) +
          p3q^2*(p2q^3*(36*s12^4*s13 - 108*s12^3*s13^2 - 108*s12^2*s13^3 +
              36*s12*s13^4 + (54*s12^3*s13 - 198*s12^2*s13^2 - 18*s12*s13^3 +
                18*s13^4)*s23 + (18*s12^2*s13 - 72*s12*s13^2 + 18*s13^3)*s23^
                2) + p1q*p2q^2*(36*s12^4*s13 - 36*s12^3*s13^2 -
              72*s12^2*s13^3 + (-36*s12^4 - 90*s12^3*s13 - 270*s12^2*s13^2 -
                90*s12*s13^3 + 18*s13^4)*s23 + (-72*s12^3 - 198*s12^2*s13 -
                180*s12*s13^2 + 18*s13^3)*s23^2 + (-36*s12^2 - 72*s12*s13)*
               s23^3) + p1q^3*((27*s12^3 + 45*s12^2*s13 + 18*s12*s13^2)*s23^
                2 + (36*s12^2 + 27*s12*s13)*s23^3 + 9*s12*s23^4) +
            p1q^2*p2q*((-27*s12^4 - 117*s12^3*s13 - 135*s12^2*s13^2 -
                45*s12*s13^3)*s23 + (-36*s12^3 - 117*s12^2*s13 -
                63*s12*s13^2)*s23^2 + (-9*s12^2 + 18*s13^2)*s23^3 +
              18*s13*s23^4)) + p3q*(p2q^4*(-72*s12^3*s13^2 + 72*s12*s13^4 +
              (-108*s12^2*s13^2 + 72*s12*s13^3 + 36*s13^4)*s23 +
              (-36*s12*s13^2 + 36*s13^3)*s23^2) + p1q*p2q^3*
             (-72*s12^3*s13^2 - 36*s12^2*s13^3 + 36*s12*s13^4 +
              (-54*s12^3*s13 - 306*s12^2*s13^2 - 126*s12*s13^3 + 18*s13^4)*
               s23 + (-108*s12^2*s13 - 270*s12*s13^2 - 18*s13^3)*s23^2 +
              (-54*s12*s13 - 36*s13^2)*s23^3) +
            p1q^4*((-9*s12^2 - 9*s12*s13)*s23^3 - 9*s12*s23^4) +
            p1q^2*p2q^2*((-27*s12^4 - 108*s12^3*s13 - 180*s12^2*s13^2 -
                108*s12*s13^3 - 9*s13^4)*s23 + (-45*s12^3 - 63*s12^2*s13 -
                90*s12*s13^2 - 36*s13^3)*s23^2 + (-18*s12^2 + 72*s12*s13 +
                9*s13^2)*s23^3 + 36*s13*s23^4) + p1q^3*p2q*
             ((18*s12^3 + 81*s12^2*s13 + 72*s12*s13^2 + 9*s13^3)*s23^2 +
              (9*s12^2 + 81*s12*s13 + 36*s13^2)*s23^3 + (-9*s12 + 27*s13)*s23^
                4)))*PolyLog(2, -((-(p2q*s12) - p3q*s12 - p2q*s13 - p3q*s13 +
             p1q*s23)/((p2q + p3q)*(s12 + s13)))))/
        (2*p1q*p3q^4*s12^3*s13*s23^2 + 2*p1q*p2q^4*s12*s13^3*s23^2 +
         2*p1q^4*p2q*s12*s13*s23^4 + p1q^2*p2q^3*(2*s12*s13^3*s23^2 -
           4*s12*s13^2*s23^3) + p1q^3*p2q^2*(-4*s12*s13^2*s23^3 +
           2*s12*s13*s23^4) + p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*
            s23^2 + p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
         p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*s23^2 +
           p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
             (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) +
           p1q^3*(-4*s12^2*s13*s23^3 + 2*s12*s13*s23^4)) +
         p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
           2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*
            ((-4*s12^2*s13^2 + 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*
                s13^2)*s23^3) + p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*
              s23^3 + 4*s12*s13*s23^4))) +
       ((p2q^5*(-36*s12^2*s13^3 - 36*s12*s13^4 + (-54*s12*s13^3 - 18*s13^4)*
             s23 - 18*s13^3*s23^2) + p1q*p2q^4*(-36*s12^2*s13^3 -
            36*s12*s13^4 + (54*s12^2*s13^2 - 18*s13^4)*s23 +
            72*s12*s13^2*s23^2 + 18*s13^2*s23^3) + p1q^2*p2q^3*
           ((45*s12^3*s13 + 153*s12^2*s13^2 + 117*s12*s13^3 + 9*s13^4)*s23 +
            (63*s12^2*s13 + 171*s12*s13^2 + 54*s13^3)*s23^2 +
            (18*s12*s13 + 45*s13^2)*s23^3) + p1q^4*p2q*
           ((9*s12^2 + 9*s12*s13)*s23^3 + 9*s12*s23^4) +
          p1q^3*p2q^2*((-9*s12^3 - 72*s12^2*s13 - 72*s12*s13^2 - 9*s13^3)*
             s23^2 + (-9*s12^2 - 90*s12*s13 - 36*s13^2)*s23^3 -
            27*s13*s23^4) + p3q^4*(p2q*(-36*s12^4*s13 - 36*s12^3*s13^2 +
              (-54*s12^3*s13 - 18*s12^2*s13^2)*s23 - 18*s12^2*s13*s23^2) +
            p1q*((18*s12^4 + 36*s12^3*s13 + 18*s12^2*s13^2)*s23 +
              (36*s12^3 + 36*s12^2*s13)*s23^2 + 18*s12^2*s23^3)) +
          p3q^3*(p2q^2*(-72*s12^4*s13 + 72*s12^2*s13^3 + (-108*s12^3*s13 +
                72*s12^2*s13^2 + 36*s12*s13^3)*s23 + (-36*s12^2*s13 +
                36*s12*s13^2)*s23^2) + p1q*p2q*(-36*s12^4*s13 -
              36*s12^3*s13^2 + (36*s12^4 + 36*s12^3*s13 + 36*s12^2*s13^2)*
               s23 + (72*s12^3 + 90*s12^2*s13 + 18*s12*s13^2)*s23^2 +
              (36*s12^2 + 18*s12*s13)*s23^3) +
            p1q^2*((18*s12^4 + 36*s12^3*s13 + 18*s12^2*s13^2)*s23 +
              (9*s12^3 - 9*s12^2*s13 - 18*s12*s13^2)*s23^2 + (-27*s12^2 -
                36*s12*s13)*s23^3 - 18*s12*s23^4)) +
          p3q*(p2q^4*(72*s12^3*s13^2 - 72*s12*s13^4 + (108*s12^2*s13^2 -
                72*s12*s13^3 - 36*s13^4)*s23 + (36*s12*s13^2 - 36*s13^3)*s23^
                2) + p1q*p2q^3*(72*s12^3*s13^2 + 36*s12^2*s13^3 -
              36*s12*s13^4 + (54*s12^3*s13 + 306*s12^2*s13^2 + 126*s12*
                 s13^3 - 18*s13^4)*s23 + (108*s12^2*s13 + 270*s12*s13^2 +
                18*s13^3)*s23^2 + (54*s12*s13 + 36*s13^2)*s23^3) +
            p1q^4*((9*s12^2 + 9*s12*s13)*s23^3 + 9*s12*s23^4) +
            p1q^3*p2q*((-18*s12^3 - 81*s12^2*s13 - 72*s12*s13^2 - 9*s13^3)*
               s23^2 + (-9*s12^2 - 81*s12*s13 - 36*s13^2)*s23^3 +
              (9*s12 - 27*s13)*s23^4) + p1q^2*p2q^2*
             ((27*s12^4 + 108*s12^3*s13 + 180*s12^2*s13^2 + 108*s12*s13^3 +
                9*s13^4)*s23 + (45*s12^3 + 63*s12^2*s13 + 90*s12*s13^2 +
                36*s13^3)*s23^2 + (18*s12^2 - 72*s12*s13 - 9*s13^2)*s23^3 -
              36*s13*s23^4)) + p3q^2*(p2q^3*(-36*s12^4*s13 + 108*s12^3*s13^
                2 + 108*s12^2*s13^3 - 36*s12*s13^4 + (-54*s12^3*s13 +
                198*s12^2*s13^2 + 18*s12*s13^3 - 18*s13^4)*s23 +
              (-18*s12^2*s13 + 72*s12*s13^2 - 18*s13^3)*s23^2) +
            p1q*p2q^2*(-36*s12^4*s13 + 36*s12^3*s13^2 + 72*s12^2*s13^3 +
              (36*s12^4 + 90*s12^3*s13 + 270*s12^2*s13^2 + 90*s12*s13^3 -
                18*s13^4)*s23 + (72*s12^3 + 198*s12^2*s13 + 180*s12*s13^2 -
                18*s13^3)*s23^2 + (36*s12^2 + 72*s12*s13)*s23^3) +
            p1q^3*((-27*s12^3 - 45*s12^2*s13 - 18*s12*s13^2)*s23^2 +
              (-36*s12^2 - 27*s12*s13)*s23^3 - 9*s12*s23^4) +
            p1q^2*p2q*((27*s12^4 + 117*s12^3*s13 + 135*s12^2*s13^2 +
                45*s12*s13^3)*s23 + (36*s12^3 + 117*s12^2*s13 + 63*s12*s13^2)*
               s23^2 + (9*s12^2 - 18*s13^2)*s23^3 - 18*s13*s23^4)))*
         PolyLog(2, -((-(p2q*s12) - p3q*s12 - p2q*s13 - p3q*s13 + p1q*s23)/
            ((p1q + p2q + p3q)*(s12 + s13)))))/(2*p1q*p3q^4*s12^3*s13*s23^2 +
         2*p1q*p2q^4*s12*s13^3*s23^2 + 2*p1q^4*p2q*s12*s13*s23^4 +
         p1q^2*p2q^3*(2*s12*s13^3*s23^2 - 4*s12*s13^2*s23^3) +
         p1q^3*p2q^2*(-4*s12*s13^2*s23^3 + 2*s12*s13*s23^4) +
         p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
           p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
         p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*s23^2 +
           p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
             (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) +
           p1q^3*(-4*s12^2*s13*s23^3 + 2*s12*s13*s23^4)) +
         p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
           2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*
            ((-4*s12^2*s13^2 + 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*
                s13^2)*s23^3) + p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*
              s23^3 + 4*s12*s13*s23^4))) +
       ((p2q*p3q^4*(18*s12^4*s13 + 18*s12^3*s13^2 +
            (36*s12^3*s13 + 18*s12^2*s13^2)*s23 + 18*s12^2*s13*s23^2) +
          p2q^5*(18*s12^2*s13^3 + 18*s12*s13^4 + (36*s12*s13^3 + 18*s13^4)*
             s23 + 18*s13^3*s23^2) + p1q*p2q^4*(18*s12^2*s13^3 +
            18*s12*s13^4 + (-18*s12^2*s13^2 + 18*s12*s13^3 + 18*s13^4)*s23 +
            (-38*s12*s13^2 - 2*s13^3)*s23^2 - 20*s13^2*s23^3) +
          p1q^2*p2q^3*((-36*s12^3*s13 - 99*s12^2*s13^2 - 72*s12*s13^3 -
              9*s13^4)*s23 + (-71*s12^2*s13 - 144*s12*s13^2 - 55*s13^3)*
             s23^2 + (-33*s12*s13 - 44*s13^2)*s23^3 + 2*s13*s23^4) +
          p1q^3*p2q^2*((2*s12^3 + 32*s12^2*s13 + 40*s12*s13^2 + 10*s13^3)*
             s23^2 + (5*s12^2 + 63*s12*s13 + 40*s13^2)*s23^3 +
            (3*s12 + 30*s13)*s23^4) + p1q^4*p2q*((-s12^2 - 2*s12*s13 - s13^2)*
             s23^3 + (-3*s12 - 3*s13)*s23^4 - 2*s23^5) +
          p3q^3*(p2q^2*(36*s12^4*s13 - 36*s12^2*s13^3 + (72*s12^3*s13 -
                36*s12^2*s13^2 - 36*s12*s13^3)*s23 + (36*s12^2*s13 -
                36*s12*s13^2)*s23^2) + p1q*p2q*(18*s12^4*s13 +
              18*s12^3*s13^2 + (-36*s12^2*s13^2 - 18*s12*s13^3)*s23 +
              (-52*s12^2*s13 - 52*s12*s13^2)*s23^2 - 34*s12*s13*s23^3) +
            p1q^2*((s12^3 + 2*s12^2*s13 + s12*s13^2)*s23^2 +
              (3*s12^2 + 3*s12*s13)*s23^3 + 2*s12*s23^4)) +
          p3q^2*(p2q^3*(18*s12^4*s13 - 54*s12^3*s13^2 - 54*s12^2*s13^3 +
              18*s12*s13^4 + (36*s12^3*s13 - 126*s12^2*s13^2 - 36*s12*s13^3 +
                18*s13^4)*s23 + (18*s12^2*s13 - 72*s12*s13^2 + 18*s13^3)*s23^
                2) + p1q*p2q^2*(18*s12^4*s13 - 18*s12^3*s13^2 -
              36*s12^2*s13^3 + (-36*s12^3*s13 - 162*s12^2*s13^2 -
                54*s12*s13^3 + 18*s13^4)*s23 + (-122*s12^2*s13 -
                142*s12*s13^2 + 16*s13^3)*s23^2 + (-68*s12*s13 - 2*s13^2)*s23^
                3) + p1q^2*p2q*((-45*s12^3*s13 - 72*s12^2*s13^2 -
                27*s12*s13^3)*s23 + (4*s12^3 - 63*s12^2*s13 - 50*s12*s13^2 -
                s13^3)*s23^2 + (10*s12^2 + 2*s12*s13 + 17*s13^2)*s23^3 +
              (6*s12 + 18*s13)*s23^4) + p1q^3*((s12^3 + 2*s12^2*s13 +
                s12*s13^2)*s23^2 + (2*s12^2 + s12*s13 - s13^2)*s23^3 +
              (-s12 - 3*s13)*s23^4 - 2*s23^5)) +
          p3q*(p2q^4*(-36*s12^3*s13^2 + 36*s12*s13^4 + (-72*s12^2*s13^2 +
                36*s12*s13^3 + 36*s13^4)*s23 + (-36*s12*s13^2 + 36*s13^3)*s23^
                2) + p1q*p2q^3*(-36*s12^3*s13^2 - 18*s12^2*s13^3 +
              18*s12*s13^4 + (-54*s12^3*s13 - 198*s12^2*s13^2 -
                72*s12*s13^3 + 18*s13^4)*s23 + (-106*s12^2*s13 -
                200*s12*s13^2 - 22*s13^3)*s23^2 + (-52*s12*s13 - 40*s13^2)*
               s23^3) + p1q^2*p2q^2*((-45*s12^3*s13 - 99*s12^2*s13^2 -
                63*s12*s13^3 - 9*s13^4)*s23 + (3*s12^3 - 46*s12^2*s13 -
                87*s12*s13^2 - 38*s13^3)*s23^2 + (7*s12^2 + 38*s12*s13 +
                9*s13^2)*s23^3 + (4*s12 + 38*s13)*s23^4) +
            p1q^4*((-s12^2 - 2*s12*s13 - s13^2)*s23^3 + (-3*s12 - 3*s13)*s23^
                4 - 2*s23^5) + p1q^3*p2q*((3*s12^3 + 34*s12^2*s13 +
                41*s12*s13^2 + 10*s13^3)*s23^2 + (7*s12^2 + 64*s12*s13 +
                39*s13^2)*s23^3 + (2*s12 + 27*s13)*s23^4 - 2*s23^5)))*
         PolyLog(2, -((p3q*s12 - p1q*s13 - p2q*s13 - p1q*s23 - p2q*s23)/
            ((p1q + p2q)*(s13 + s23)))))/(2*p1q*p3q^4*s12^3*s13*s23^2 +
         2*p1q*p2q^4*s12*s13^3*s23^2 + 2*p1q^4*p2q*s12*s13*s23^4 +
         p1q^2*p2q^3*(2*s12*s13^3*s23^2 - 4*s12*s13^2*s23^3) +
         p1q^3*p2q^2*(-4*s12*s13^2*s23^3 + 2*s12*s13*s23^4) +
         p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
           p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
         p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*s23^2 +
           p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
             (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) +
           p1q^3*(-4*s12^2*s13*s23^3 + 2*s12*s13*s23^4)) +
         p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
           2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*
            ((-4*s12^2*s13^2 + 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*
                s13^2)*s23^3) + p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*
              s23^3 + 4*s12*s13*s23^4))) +
       ((p2q*p3q^4*(-18*s12^4*s13 - 18*s12^3*s13^2 +
            (-36*s12^3*s13 - 18*s12^2*s13^2)*s23 - 18*s12^2*s13*s23^2) +
          p2q^5*(-18*s12^2*s13^3 - 18*s12*s13^4 + (-36*s12*s13^3 - 18*s13^4)*
             s23 - 18*s13^3*s23^2) + p1q*p2q^4*(-18*s12^2*s13^3 -
            18*s12*s13^4 + (18*s12^2*s13^2 - 18*s12*s13^3 - 18*s13^4)*s23 +
            (38*s12*s13^2 + 2*s13^3)*s23^2 + 20*s13^2*s23^3) +
          p1q^3*p2q^2*((-2*s12^3 - 32*s12^2*s13 - 40*s12*s13^2 - 10*s13^3)*
             s23^2 + (-5*s12^2 - 63*s12*s13 - 40*s13^2)*s23^3 +
            (-3*s12 - 30*s13)*s23^4) + p1q^2*p2q^3*
           ((36*s12^3*s13 + 99*s12^2*s13^2 + 72*s12*s13^3 + 9*s13^4)*s23 +
            (71*s12^2*s13 + 144*s12*s13^2 + 55*s13^3)*s23^2 +
            (33*s12*s13 + 44*s13^2)*s23^3 - 2*s13*s23^4) +
          p1q^4*p2q*((s12^2 + 2*s12*s13 + s13^2)*s23^3 + (3*s12 + 3*s13)*
             s23^4 + 2*s23^5) + p3q^3*(p2q^2*(-36*s12^4*s13 +
              36*s12^2*s13^3 + (-72*s12^3*s13 + 36*s12^2*s13^2 +
                36*s12*s13^3)*s23 + (-36*s12^2*s13 + 36*s12*s13^2)*s23^2) +
            p1q*p2q*(-18*s12^4*s13 - 18*s12^3*s13^2 + (36*s12^2*s13^2 +
                18*s12*s13^3)*s23 + (52*s12^2*s13 + 52*s12*s13^2)*s23^2 +
              34*s12*s13*s23^3) + p1q^2*((-s12^3 - 2*s12^2*s13 - s12*s13^2)*
               s23^2 + (-3*s12^2 - 3*s12*s13)*s23^3 - 2*s12*s23^4)) +
          p3q^2*(p2q^3*(-18*s12^4*s13 + 54*s12^3*s13^2 + 54*s12^2*s13^3 -
              18*s12*s13^4 + (-36*s12^3*s13 + 126*s12^2*s13^2 +
                36*s12*s13^3 - 18*s13^4)*s23 + (-18*s12^2*s13 +
                72*s12*s13^2 - 18*s13^3)*s23^2) + p1q*p2q^2*(-18*s12^4*s13 +
              18*s12^3*s13^2 + 36*s12^2*s13^3 + (36*s12^3*s13 + 162*s12^2*
                 s13^2 + 54*s12*s13^3 - 18*s13^4)*s23 + (122*s12^2*s13 +
                142*s12*s13^2 - 16*s13^3)*s23^2 + (68*s12*s13 + 2*s13^2)*s23^
                3) + p1q^2*p2q*((45*s12^3*s13 + 72*s12^2*s13^2 +
                27*s12*s13^3)*s23 + (-4*s12^3 + 63*s12^2*s13 + 50*s12*s13^2 +
                s13^3)*s23^2 + (-10*s12^2 - 2*s12*s13 - 17*s13^2)*s23^3 +
              (-6*s12 - 18*s13)*s23^4) + p1q^3*((-s12^3 - 2*s12^2*s13 -
                s12*s13^2)*s23^2 + (-2*s12^2 - s12*s13 + s13^2)*s23^3 +
              (s12 + 3*s13)*s23^4 + 2*s23^5)) +
          p3q*(p2q^4*(36*s12^3*s13^2 - 36*s12*s13^4 + (72*s12^2*s13^2 -
                36*s12*s13^3 - 36*s13^4)*s23 + (36*s12*s13^2 - 36*s13^3)*s23^
                2) + p1q*p2q^3*(36*s12^3*s13^2 + 18*s12^2*s13^3 -
              18*s12*s13^4 + (54*s12^3*s13 + 198*s12^2*s13^2 + 72*s12*s13^3 -
                18*s13^4)*s23 + (106*s12^2*s13 + 200*s12*s13^2 + 22*s13^3)*
               s23^2 + (52*s12*s13 + 40*s13^2)*s23^3) + p1q^2*p2q^2*
             ((45*s12^3*s13 + 99*s12^2*s13^2 + 63*s12*s13^3 + 9*s13^4)*s23 +
              (-3*s12^3 + 46*s12^2*s13 + 87*s12*s13^2 + 38*s13^3)*s23^2 +
              (-7*s12^2 - 38*s12*s13 - 9*s13^2)*s23^3 + (-4*s12 - 38*s13)*s23^
                4) + p1q^3*p2q*((-3*s12^3 - 34*s12^2*s13 - 41*s12*s13^2 -
                10*s13^3)*s23^2 + (-7*s12^2 - 64*s12*s13 - 39*s13^2)*s23^3 +
              (-2*s12 - 27*s13)*s23^4 + 2*s23^5) +
            p1q^4*((s12^2 + 2*s12*s13 + s13^2)*s23^3 + (3*s12 + 3*s13)*s23^
                4 + 2*s23^5)))*PolyLog(2, -((p3q*s12 - p1q*s13 - p2q*s13 -
             p1q*s23 - p2q*s23)/((p1q + p2q + p3q)*(s13 + s23)))))/
        (2*p1q*p3q^4*s12^3*s13*s23^2 + 2*p1q*p2q^4*s12*s13^3*s23^2 +
         2*p1q^4*p2q*s12*s13*s23^4 + p1q^2*p2q^3*(2*s12*s13^3*s23^2 -
           4*s12*s13^2*s23^3) + p1q^3*p2q^2*(-4*s12*s13^2*s23^3 +
           2*s12*s13*s23^4) + p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*
            s23^2 + p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
         p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*s23^2 +
           p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
             (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) +
           p1q^3*(-4*s12^2*s13*s23^3 + 2*s12*s13*s23^4)) +
         p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
           2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*
            ((-4*s12^2*s13^2 + 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*
                s13^2)*s23^3) + p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*
              s23^3 + 4*s12*s13*s23^4))) +
       ((p2q^5*(18*s12^2*s13^3 + 18*s12*s13^4 + 18*s12*s13^3*s23) +
          p1q*p2q^4*(18*s12^2*s13^3 + 18*s12*s13^4 +
            (-36*s12^2*s13^2 - 18*s12*s13^3)*s23 + (-38*s12*s13^2 - 2*s13^3)*
             s23^2 - 2*s13^2*s23^3) + p1q^2*p2q^3*
           ((-9*s12^3*s13 - 54*s12^2*s13^2 - 45*s12*s13^3)*s23 +
            (10*s12^2*s13 - 27*s12*s13^2 - s13^3)*s23^2 +
            (21*s12*s13 + s13^2)*s23^3 + 2*s13*s23^4) +
          p1q^3*p2q^2*((11*s12^3 + 50*s12^2*s13 + 40*s12*s13^2 + s13^3)*
             s23^2 + (14*s12^2 + 45*s12*s13 + 4*s13^2)*s23^3 +
            (3*s12 + 3*s13)*s23^4) + p1q^4*p2q*
           ((-10*s12^2 - 11*s12*s13 - s13^2)*s23^3 + (-12*s12 - 3*s13)*
             s23^4 - 2*s23^5) + p3q^4*(p2q*(18*s12^4*s13 + 18*s12^3*s13^2 +
              18*s12^3*s13*s23) + p1q*((-18*s12^4 - 36*s12^3*s13 -
                18*s12^2*s13^2)*s23 + (-36*s12^3 - 36*s12^2*s13)*s23^2 -
              18*s12^2*s23^3)) + p3q^3*(p2q^2*(36*s12^4*s13 -
              36*s12^2*s13^3 + (36*s12^3*s13 - 36*s12^2*s13^2)*s23) +
            p1q*p2q*(18*s12^4*s13 + 18*s12^3*s13^2 + (-36*s12^4 -
                36*s12^3*s13 + 18*s12*s13^3)*s23 + (-72*s12^3 -
                34*s12^2*s13 + 38*s12*s13^2)*s23^2 + (-36*s12^2 + 20*s12*s13)*
               s23^3) + p1q^2*((-18*s12^4 - 36*s12^3*s13 - 18*s12^2*s13^2)*
               s23 + (-8*s12^3 + 11*s12^2*s13 + 19*s12*s13^2)*s23^2 +
              (30*s12^2 + 39*s12*s13)*s23^3 + 20*s12*s23^4)) +
          p3q*(p2q^4*(-36*s12^3*s13^2 + 36*s12*s13^4 + (-36*s12^2*s13^2 +
                36*s12*s13^3)*s23) + p1q*p2q^3*(-36*s12^3*s13^2 -
              18*s12^2*s13^3 + 18*s12*s13^4 + (-108*s12^2*s13^2 -
                54*s12*s13^3)*s23 + (2*s12^2*s13 - 74*s12*s13^2 - 4*s13^3)*
               s23^2 + (2*s12*s13 - 4*s13^2)*s23^3) + p1q^2*p2q^2*
             ((-27*s12^4 - 63*s12^3*s13 - 81*s12^2*s13^2 - 45*s12*s13^3)*
               s23 + (-42*s12^3 - s12^2*s13 + 3*s12*s13^2 - 2*s13^3)*s23^2 +
              (-11*s12^2 + 56*s12*s13)*s23^3 + (4*s12 + 2*s13)*s23^4) +
            p1q^3*p2q*((21*s12^3 + 61*s12^2*s13 + 41*s12*s13^2 + s13^3)*s23^
                2 + (16*s12^2 + 37*s12*s13 + 3*s13^2)*s23^3 - 7*s12*s23^4 -
              2*s23^5) + p1q^4*((-10*s12^2 - 11*s12*s13 - s13^2)*s23^3 +
              (-12*s12 - 3*s13)*s23^4 - 2*s23^5)) +
          p3q^2*(p2q^3*(18*s12^4*s13 - 54*s12^3*s13^2 - 54*s12^2*s13^3 +
              18*s12*s13^4 + (18*s12^3*s13 - 72*s12^2*s13^2 + 18*s12*s13^3)*
               s23) + p1q*p2q^2*(18*s12^4*s13 - 18*s12^3*s13^2 -
              36*s12^2*s13^3 + (-36*s12^4 - 54*s12^3*s13 - 108*s12^2*s13^2 -
                36*s12*s13^3)*s23 + (-72*s12^3 - 68*s12^2*s13 -
                34*s12*s13^2 - 2*s13^3)*s23^2 + (-36*s12^2 + 4*s12*s13 -
                2*s13^2)*s23^3) + p1q^2*p2q*((-27*s12^4 - 72*s12^3*s13 -
                63*s12^2*s13^2 - 18*s12*s13^3)*s23 + (-32*s12^3 -
                36*s12^2*s13 - 5*s12*s13^2 - s13^3)*s23^2 +
              (s12^2 + 20*s12*s13 - s13^2)*s23^3 + 6*s12*s23^4) +
            p1q^3*((28*s12^3 + 47*s12^2*s13 + 19*s12*s13^2)*s23^2 +
              (38*s12^2 + 28*s12*s13 - s13^2)*s23^3 + (8*s12 - 3*s13)*s23^4 -
              2*s23^5)))*PolyLog(2, -((-(p1q*s12) - p3q*s12 + p2q*s13 -
             p1q*s23 - p3q*s23)/((p1q + p3q)*(s12 + s23)))))/
        (2*p1q*p3q^4*s12^3*s13*s23^2 + 2*p1q*p2q^4*s12*s13^3*s23^2 +
         2*p1q^4*p2q*s12*s13*s23^4 + p1q^2*p2q^3*(2*s12*s13^3*s23^2 -
           4*s12*s13^2*s23^3) + p1q^3*p2q^2*(-4*s12*s13^2*s23^3 +
           2*s12*s13*s23^4) + p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*
            s23^2 + p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
         p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*s23^2 +
           p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
             (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) +
           p1q^3*(-4*s12^2*s13*s23^3 + 2*s12*s13*s23^4)) +
         p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
           2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*
            ((-4*s12^2*s13^2 + 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*
                s13^2)*s23^3) + p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*
              s23^3 + 4*s12*s13*s23^4))) +
       ((p2q^5*(-18*s12^2*s13^3 - 18*s12*s13^4 - 18*s12*s13^3*s23) +
          p1q*p2q^4*(-18*s12^2*s13^3 - 18*s12*s13^4 +
            (36*s12^2*s13^2 + 18*s12*s13^3)*s23 + (38*s12*s13^2 + 2*s13^3)*
             s23^2 + 2*s13^2*s23^3) + p1q^3*p2q^2*
           ((-11*s12^3 - 50*s12^2*s13 - 40*s12*s13^2 - s13^3)*s23^2 +
            (-14*s12^2 - 45*s12*s13 - 4*s13^2)*s23^3 + (-3*s12 - 3*s13)*
             s23^4) + p1q^2*p2q^3*((9*s12^3*s13 + 54*s12^2*s13^2 +
              45*s12*s13^3)*s23 + (-10*s12^2*s13 + 27*s12*s13^2 + s13^3)*
             s23^2 + (-21*s12*s13 - s13^2)*s23^3 - 2*s13*s23^4) +
          p1q^4*p2q*((10*s12^2 + 11*s12*s13 + s13^2)*s23^3 +
            (12*s12 + 3*s13)*s23^4 + 2*s23^5) +
          p3q^4*(p2q*(-18*s12^4*s13 - 18*s12^3*s13^2 - 18*s12^3*s13*s23) +
            p1q*((18*s12^4 + 36*s12^3*s13 + 18*s12^2*s13^2)*s23 +
              (36*s12^3 + 36*s12^2*s13)*s23^2 + 18*s12^2*s23^3)) +
          p3q^3*(p2q^2*(-36*s12^4*s13 + 36*s12^2*s13^3 + (-36*s12^3*s13 +
                36*s12^2*s13^2)*s23) + p1q*p2q*(-18*s12^4*s13 -
              18*s12^3*s13^2 + (36*s12^4 + 36*s12^3*s13 - 18*s12*s13^3)*s23 +
              (72*s12^3 + 34*s12^2*s13 - 38*s12*s13^2)*s23^2 +
              (36*s12^2 - 20*s12*s13)*s23^3) +
            p1q^2*((18*s12^4 + 36*s12^3*s13 + 18*s12^2*s13^2)*s23 +
              (8*s12^3 - 11*s12^2*s13 - 19*s12*s13^2)*s23^2 +
              (-30*s12^2 - 39*s12*s13)*s23^3 - 20*s12*s23^4)) +
          p3q^2*(p2q^3*(-18*s12^4*s13 + 54*s12^3*s13^2 + 54*s12^2*s13^3 -
              18*s12*s13^4 + (-18*s12^3*s13 + 72*s12^2*s13^2 - 18*s12*s13^3)*
               s23) + p1q*p2q^2*(-18*s12^4*s13 + 18*s12^3*s13^2 +
              36*s12^2*s13^3 + (36*s12^4 + 54*s12^3*s13 + 108*s12^2*s13^2 +
                36*s12*s13^3)*s23 + (72*s12^3 + 68*s12^2*s13 + 34*s12*s13^2 +
                2*s13^3)*s23^2 + (36*s12^2 - 4*s12*s13 + 2*s13^2)*s23^3) +
            p1q^2*p2q*((27*s12^4 + 72*s12^3*s13 + 63*s12^2*s13^2 +
                18*s12*s13^3)*s23 + (32*s12^3 + 36*s12^2*s13 + 5*s12*s13^2 +
                s13^3)*s23^2 + (-s12^2 - 20*s12*s13 + s13^2)*s23^3 -
              6*s12*s23^4) + p1q^3*((-28*s12^3 - 47*s12^2*s13 - 19*s12*s13^2)*
               s23^2 + (-38*s12^2 - 28*s12*s13 + s13^2)*s23^3 +
              (-8*s12 + 3*s13)*s23^4 + 2*s23^5)) +
          p3q*(p2q^4*(36*s12^3*s13^2 - 36*s12*s13^4 + (36*s12^2*s13^2 -
                36*s12*s13^3)*s23) + p1q*p2q^3*(36*s12^3*s13^2 +
              18*s12^2*s13^3 - 18*s12*s13^4 + (108*s12^2*s13^2 +
                54*s12*s13^3)*s23 + (-2*s12^2*s13 + 74*s12*s13^2 + 4*s13^3)*
               s23^2 + (-2*s12*s13 + 4*s13^2)*s23^3) + p1q^2*p2q^2*
             ((27*s12^4 + 63*s12^3*s13 + 81*s12^2*s13^2 + 45*s12*s13^3)*s23 +
              (42*s12^3 + s12^2*s13 - 3*s12*s13^2 + 2*s13^3)*s23^2 +
              (11*s12^2 - 56*s12*s13)*s23^3 + (-4*s12 - 2*s13)*s23^4) +
            p1q^3*p2q*((-21*s12^3 - 61*s12^2*s13 - 41*s12*s13^2 - s13^3)*s23^
                2 + (-16*s12^2 - 37*s12*s13 - 3*s13^2)*s23^3 + 7*s12*s23^4 +
              2*s23^5) + p1q^4*((10*s12^2 + 11*s12*s13 + s13^2)*s23^3 +
              (12*s12 + 3*s13)*s23^4 + 2*s23^5)))*PolyLog(2,
          -((-(p1q*s12) - p3q*s12 + p2q*s13 - p1q*s23 - p3q*s23)/
            ((p1q + p2q + p3q)*(s12 + s23)))))/(2*p1q*p3q^4*s12^3*s13*s23^2 +
         2*p1q*p2q^4*s12*s13^3*s23^2 + 2*p1q^4*p2q*s12*s13*s23^4 +
         p1q^2*p2q^3*(2*s12*s13^3*s23^2 - 4*s12*s13^2*s23^3) +
         p1q^3*p2q^2*(-4*s12*s13^2*s23^3 + 2*s12*s13*s23^4) +
         p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
           p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
         p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*s23^2 +
           p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
             (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) +
           p1q^3*(-4*s12^2*s13*s23^3 + 2*s12*s13*s23^4)) +
         p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
           2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*
            ((-4*s12^2*s13^2 + 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*
                s13^2)*s23^3) + p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*
              s23^3 + 4*s12*s13*s23^4)))) + p2.E0*p2.E0conj*
      ((p3q^2*(-3168*s12^4*s13^2 - 6336*s12^3*s13^3 - 3168*s12^2*s13^4 +
           (45*s12^5 - 4662*s12^4*s13 - 15840*s12^3*s13^2 -
             14346*s12^2*s13^3 - 3213*s12*s13^4)*s23 +
           (-1494*s12^4 - 12582*s12^3*s13 - 19098*s12^2*s13^2 -
             8010*s12*s13^3)*s23^2 + (-3123*s12^3 - 9504*s12^2*s13 -
             6381*s12*s13^2)*s23^3 + (-1584*s12^2 - 1584*s12*s13)*s23^4) +
         p2q^2*(-3168*s12^4*s13^2 - 6336*s12^3*s13^3 - 3168*s12^2*s13^4 +
           (-3213*s12^4*s13 - 14346*s12^3*s13^2 - 15840*s12^2*s13^3 -
             4662*s12*s13^4 + 45*s13^5)*s23 + (-8010*s12^3*s13 -
             19098*s12^2*s13^2 - 12582*s12*s13^3 - 1494*s13^4)*s23^2 +
           (-6381*s12^2*s13 - 9504*s12*s13^2 - 3123*s13^3)*s23^3 +
           (-1584*s12*s13 - 1584*s13^2)*s23^4) +
         p1q^2*((45*s12^4 + 90*s12^3*s13 + 90*s12^2*s13^2 + 90*s12*s13^3 +
             45*s13^4)*s23^2 + (90*s12^3 + 180*s12^2*s13 + 180*s12*s13^2 +
             90*s13^3)*s23^3 + (45*s12^2 + 90*s12*s13 + 45*s13^2)*s23^4) +
         p1q*p2q*((45*s12^4*s13 + 1674*s12^3*s13^2 + 3168*s12^2*s13^3 +
             1494*s12*s13^4 - 45*s13^5)*s23 + (-40*s12^4 + 1753*s12^3*s13 +
             6772*s12^2*s13^2 + 6325*s12*s13^3 + 1454*s13^4)*s23^2 +
           (34*s12^3 + 3849*s12^2*s13 + 6972*s12*s13^2 + 3157*s13^3)*s23^3 +
           (290*s12^2 + 2272*s12*s13 + 1874*s13^2)*s23^4 +
           (176*s12 + 176*s13)*s23^5) +
         p3q*(p2q*(-6336*s12^4*s13^2 - 12672*s12^3*s13^3 - 6336*s12^2*s13^4 +
             (45*s12^5 - 7875*s12^4*s13 - 30186*s12^3*s13^2 - 30186*s12^2*
                s13^3 - 7875*s12*s13^4 + 45*s13^5)*s23 +
             (-1494*s12^4 - 20592*s12^3*s13 - 38196*s12^2*s13^2 - 20592*s12*
                s13^3 - 1494*s13^4)*s23^2 + (-3123*s12^3 - 15885*s12^2*s13 -
               15885*s12*s13^2 - 3123*s13^3)*s23^3 + (-1584*s12^2 - 3168*s12*
                s13 - 1584*s13^2)*s23^4) +
           p1q*((-45*s12^5 + 1494*s12^4*s13 + 3168*s12^3*s13^2 + 1674*s12^2*
                s13^3 + 45*s12*s13^4)*s23 + (1454*s12^4 + 6325*s12^3*s13 +
               6772*s12^2*s13^2 + 1753*s12*s13^3 - 40*s13^4)*s23^2 +
             (3157*s12^3 + 6972*s12^2*s13 + 3849*s12*s13^2 + 34*s13^3)*
              s23^3 + (1874*s12^2 + 2272*s12*s13 + 290*s13^2)*s23^4 +
             (176*s12 + 176*s13)*s23^5)))/
        (p1q*p2q*((18*s12^3*s13^2 + 18*s12^2*s13^3)*s23^2 +
           (18*s12^3*s13 + 36*s12^2*s13^2 + 18*s12*s13^3)*s23^3 +
           (18*s12^2*s13 + 18*s12*s13^2)*s23^4) +
         p1q*p3q*((18*s12^3*s13^2 + 18*s12^2*s13^3)*s23^2 +
           (18*s12^3*s13 + 36*s12^2*s13^2 + 18*s12*s13^3)*s23^3 +
           (18*s12^2*s13 + 18*s12*s13^2)*s23^4)) +
       (Pi^2*(p3q^5*(1458*s12^6*s13^3 + 1458*s12^5*s13^4 +
            (90*s12^8 + 27*s12^7*s13 + 747*s12^6*s13^2 + 2331*s12^5*s13^3 -
              27*s12^4*s13^4 - 90*s12^3*s13^5)*s23 +
            (90*s12^7 - 63*s12^6*s13 + 810*s12^5*s13^2 + 63*s12^4*s13^3 -
              90*s12^3*s13^4)*s23^2) + p2q^5*(1458*s12^4*s13^5 +
            1458*s12^3*s13^6 + (-90*s12^5*s13^3 - 27*s12^4*s13^4 +
              2169*s12^3*s13^5 + 585*s12^2*s13^6 + 27*s12*s13^7 + 90*s13^8)*
             s23 + (-90*s12^4*s13^3 + 63*s12^3*s13^4 + 648*s12^2*s13^5 -
              63*s12*s13^6 + 90*s13^7)*s23^2) + p1q*p2q^4*(1458*s12^4*s13^5 +
            1458*s12^3*s13^6 + (-2916*s12^4*s13^4 - 1458*s12^3*s13^5)*s23 +
            (100*s12^5*s13^2 + 147*s12^4*s13^3 - 4825*s12^3*s13^4 -
              1657*s12^2*s13^5 + 39*s12*s13^6 - 260*s13^7)*s23^2 +
            (100*s12^4*s13^2 + 47*s12^3*s13^3 - 1956*s12^2*s13^4 +
              299*s12*s13^5 - 260*s13^6)*s23^3) + p1q^2*p2q^3*
           ((9*s12^5*s13^3 - 3051*s12^4*s13^4 - 3708*s12^3*s13^5 -
              585*s12^2*s13^6 - 27*s12*s13^7 - 90*s13^8)*s23 +
            (10*s12^5*s13^2 + 1569*s12^4*s13^3 - 2188*s12^3*s13^4 -
              1216*s12^2*s13^5 + 183*s12*s13^6 - 80*s13^7)*s23^2 +
            (70*s12^5*s13 - 203*s12^4*s13^2 + 3235*s12^3*s13^3 +
              881*s12^2*s13^4 - 49*s12*s13^5 + 260*s13^6)*s23^3 +
            (70*s12^4*s13 - 283*s12^3*s13^2 + 1968*s12^2*s13^3 -
              409*s12*s13^4 + 250*s13^5)*s23^4) + p1q^3*p2q^2*
           ((-27*s12^5*s13^2 + 1620*s12^4*s13^3 + 2925*s12^3*s13^4 +
              1089*s12^2*s13^5 + 81*s12*s13^6 + 270*s13^7)*s23^2 +
            (-20*s12^5*s13 - 285*s12^4*s13^2 + 2729*s12^3*s13^3 +
              2378*s12^2*s13^4 - 429*s12*s13^5 + 250*s13^6)*s23^3 +
            (-80*s12^5 + 73*s12^4*s13 - 725*s12^3*s13^2 + 833*s12^2*s13^3 -
              127*s12*s13^4 - 100*s13^5)*s23^4 + (-80*s12^4 + 173*s12^3*s13 -
              660*s12^2*s13^2 + 173*s12*s13^3 - 80*s13^4)*s23^5) +
          p1q^4*p2q*((-90*s12^5*s13 - 90*s12^4*s13^2 - 630*s12^3*s13^3 -
              441*s12^2*s13^4 - 81*s12*s13^5 - 270*s13^6)*s23^3 +
            (10*s12^5 + 30*s12^4*s13 - 532*s12^3*s13^2 - 1162*s12^2*s13^3 +
              309*s12*s13^4 - 260*s13^5)*s23^4 + (10*s12^4 + 110*s12^3*s13 -
              642*s12^2*s13^2 + 110*s12*s13^3 + 10*s13^4)*s23^5) +
          p1q^5*((90*s12^5 + 27*s12^4*s13 - 63*s12^3*s13^2 - 63*s12^2*s13^3 +
              27*s12*s13^4 + 90*s13^5)*s23^4 + (90*s12^4 - 63*s12^3*s13 -
              63*s12*s13^3 + 90*s13^4)*s23^5) +
          p3q^4*(p2q*(4374*s12^6*s13^3 + 1458*s12^5*s13^4 - 2916*s12^4*s13^
                5 + (180*s12^8 - 216*s12^7*s13 + 1413*s12^6*s13^2 +
                5337*s12^5*s13^3 - 4131*s12^4*s13^4 - 99*s12^3*s13^5 +
                270*s12^2*s13^6)*s23 + (180*s12^7 - 396*s12^6*s13 +
                1809*s12^5*s13^2 - 846*s12^4*s13^3 - 369*s12^3*s13^4 +
                270*s12^2*s13^5)*s23^2) + p1q*(1458*s12^6*s13^3 +
              1458*s12^5*s13^4 + (-1458*s12^5*s13^3 - 2916*s12^4*s13^4)*s23 +
              (-260*s12^7 + 39*s12^6*s13 - 1981*s12^5*s13^2 - 5149*s12^4*
                 s13^3 + 147*s12^3*s13^4 + 100*s12^2*s13^5)*s23^2 +
              (-260*s12^6 + 299*s12^5*s13 - 2280*s12^4*s13^2 + 47*s12^3*
                 s13^3 + 100*s12^2*s13^4)*s23^3)) +
          p3q^3*(p2q^2*(4374*s12^6*s13^3 - 4374*s12^5*s13^4 -
              7290*s12^4*s13^5 + 1458*s12^3*s13^6 + (90*s12^8 - 513*s12^7*
                 s13 + 855*s12^6*s13^2 + 3762*s12^5*s13^3 - 11772*s12^4*
                 s13^4 + 1233*s12^3*s13^5 + 459*s12^2*s13^6 - 270*s12*s13^7)*
               s23 + (90*s12^7 - 603*s12^6*s13 + 1458*s12^5*s13^2 -
                2070*s12^4*s13^3 - 954*s12^3*s13^4 + 729*s12^2*s13^5 -
                270*s12*s13^6)*s23^2) + p1q*p2q*(2916*s12^6*s13^3 -
              2916*s12^4*s13^5 + (-162*s12^6*s13^2 - 6156*s12^5*s13^3 -
                14742*s12^4*s13^4 - 2916*s12^3*s13^5)*s23 + (-520*s12^7 +
                238*s12^6*s13 - 4310*s12^5*s13^2 - 15318*s12^4*s13^3 -
                4564*s12^3*s13^4 + 14*s12^2*s13^5 + 160*s12*s13^6)*s23^2 +
              (-520*s12^6 + 758*s12^5*s13 - 4906*s12^4*s13^2 - 1502*s12^3*
                 s13^3 - 146*s12^2*s13^4 + 160*s12*s13^5)*s23^3) +
            p1q^2*((-90*s12^8 - 27*s12^7*s13 - 828*s12^6*s13^2 -
                4275*s12^5*s13^3 - 3618*s12^4*s13^4 - 234*s12^3*s13^5)*s23 +
              (-80*s12^7 + 183*s12^6*s13 - 1783*s12^5*s13^2 - 3160*s12^4*
                 s13^3 + 1002*s12^3*s13^4 + 10*s12^2*s13^5)*s23^2 +
              (260*s12^6 - 49*s12^5*s13 + 719*s12^4*s13^2 + 3073*s12^3*
                 s13^3 - 203*s12^2*s13^4 + 70*s12*s13^5)*s23^3 +
              (250*s12^5 - 409*s12^4*s13 + 2130*s12^3*s13^2 - 283*s12^2*
                 s13^3 + 70*s12*s13^4)*s23^4)) +
          p3q^2*(p2q^3*(1458*s12^6*s13^3 - 7290*s12^5*s13^4 -
              4374*s12^4*s13^5 + 4374*s12^3*s13^6 + (-270*s12^7*s13 +
                459*s12^6*s13^2 + 747*s12^5*s13^3 - 11286*s12^4*s13^4 +
                4572*s12^3*s13^5 + 693*s12^2*s13^6 - 513*s12*s13^7 +
                90*s13^8)*s23 + (-270*s12^6*s13 + 729*s12^5*s13^2 -
                1440*s12^4*s13^3 - 1098*s12^3*s13^4 + 1296*s12^2*s13^5 -
                603*s12*s13^6 + 90*s13^7)*s23^2) + p1q*p2q^2*
             (1458*s12^6*s13^3 - 4374*s12^5*s13^4 - 4374*s12^4*s13^5 +
              1458*s12^3*s13^6 + (-162*s12^6*s13^2 - 7452*s12^5*s13^3 -
                23166*s12^4*s13^4 - 7128*s12^3*s13^5)*s23 + (-260*s12^7 +
                359*s12^6*s13 - 2415*s12^5*s13^2 - 14718*s12^4*s13^3 -
                14232*s12^3*s13^4 - 1929*s12^2*s13^5 + 359*s12*s13^6 -
                260*s13^7)*s23^2 + (-260*s12^6 + 619*s12^5*s13 -
                2872*s12^4*s13^2 - 3098*s12^3*s13^3 - 2548*s12^2*s13^4 +
                619*s12*s13^5 - 260*s13^6)*s23^3) + p1q^2*p2q*
             ((270*s12^7*s13 - 243*s12^6*s13^2 - 5940*s12^5*s13^3 -
                8397*s12^4*s13^4 - 3240*s12^3*s13^5 - 270*s12^2*s13^6)*s23 +
              (10*s12^7 + 370*s12^6*s13 - 1663*s12^5*s13^2 - 1403*s12^4*
                 s13^3 + 2066*s12^3*s13^4 - 518*s12^2*s13^5 - 20*s12*s13^6)*
               s23^2 + (510*s12^6 - 158*s12^5*s13 + 1989*s12^4*s13^2 +
                10643*s12^3*s13^3 + 905*s12^2*s13^4 - 39*s12*s13^5 +
                250*s13^6)*s23^3 + (500*s12^5 - 748*s12^4*s13 + 3977*s12^3*
                 s13^2 + 1402*s12^2*s13^3 - 269*s12*s13^4 + 250*s13^5)*s23^
                4) + p1q^3*((270*s12^7 + 81*s12^6*s13 + 1413*s12^5*s13^2 +
                3330*s12^4*s13^3 + 1620*s12^3*s13^4 - 108*s12^2*s13^5)*s23^
                2 + (250*s12^6 - 429*s12^5*s13 + 3026*s12^4*s13^2 +
                3134*s12^3*s13^3 - 366*s12^2*s13^4 - 20*s12*s13^5)*s23^3 +
              (-100*s12^5 - 127*s12^4*s13 + 1157*s12^3*s13^2 - 725*s12^2*
                 s13^3 + 73*s12*s13^4 - 80*s13^5)*s23^4 + (-80*s12^4 +
                173*s12^3*s13 - 660*s12^2*s13^2 + 173*s12*s13^3 - 80*s13^4)*
               s23^5)) + p3q*(p2q^4*(-2916*s12^5*s13^4 + 1458*s12^4*s13^5 +
              4374*s12^3*s13^6 + (270*s12^6*s13^2 - 99*s12^5*s13^3 -
                3645*s12^4*s13^4 + 5499*s12^3*s13^5 + 1089*s12^2*s13^6 -
                216*s12*s13^7 + 180*s13^8)*s23 + (270*s12^5*s13^2 -
                369*s12^4*s13^3 - 360*s12^3*s13^4 + 1485*s12^2*s13^5 -
                396*s12*s13^6 + 180*s13^7)*s23^2) + p1q*p2q^3*
             (-2916*s12^5*s13^4 + 2916*s12^3*s13^6 + (-2754*s12^5*s13^3 -
                14256*s12^4*s13^4 - 5670*s12^3*s13^5)*s23 + (160*s12^6*s13 +
                14*s12^5*s13^2 - 4402*s12^4*s13^3 - 14346*s12^3*s13^4 -
                3500*s12^2*s13^5 + 238*s12*s13^6 - 520*s13^7)*s23^2 +
              (160*s12^5*s13 - 146*s12^4*s13^2 - 1502*s12^3*s13^3 -
                4258*s12^2*s13^4 + 758*s12*s13^5 - 520*s13^6)*s23^3) +
            p1q^2*p2q^2*((-513*s12^6*s13^2 - 3483*s12^5*s13^3 - 8316*s12^4*
                 s13^4 - 5535*s12^3*s13^5 + 81*s12^2*s13^6 + 270*s12*s13^7)*
               s23 + (-20*s12^6*s13 - 923*s12^5*s13^2 + 2066*s12^4*s13^3 -
                836*s12^3*s13^4 - 1015*s12^2*s13^5 + 370*s12*s13^6 +
                10*s13^7)*s23^2 + (250*s12^6 - 39*s12^5*s13 + 905*s12^4*
                 s13^2 + 10643*s12^3*s13^3 + 1989*s12^2*s13^4 -
                158*s12*s13^5 + 510*s13^6)*s23^3 + (250*s12^5 - 269*s12^4*
                 s13 + 1564*s12^3*s13^2 + 3653*s12^2*s13^3 - 748*s12*s13^4 +
                500*s13^5)*s23^4) + p1q^3*p2q*((-180*s12^6*s13 +
                153*s12^5*s13^2 + 6012*s12^4*s13^3 + 5769*s12^3*s13^4 -
                90*s12^2*s13^5 - 180*s12*s13^6)*s23^2 + (-20*s12^6 -
                440*s12^5*s13 + 1337*s12^4*s13^2 + 8005*s12^3*s13^3 +
                932*s12^2*s13^4 - 440*s12*s13^5 - 20*s13^6)*s23^3 +
              (-180*s12^5 - 54*s12^4*s13 + 270*s12^3*s13^2 + 108*s12^2*
                 s13^3 - 54*s12*s13^4 - 180*s13^5)*s23^4 + (-160*s12^4 +
                346*s12^3*s13 - 1320*s12^2*s13^2 + 346*s12*s13^3 - 160*s13^4)*
               s23^5) + p1q^4*((-270*s12^6 - 81*s12^5*s13 - 522*s12^4*s13^2 -
                630*s12^3*s13^3 - 9*s12^2*s13^4 - 90*s12*s13^5)*s23^3 +
              (-260*s12^5 + 309*s12^4*s13 - 1243*s12^3*s13^2 - 451*s12^2*
                 s13^3 + 30*s12*s13^4 + 10*s13^5)*s23^4 + (10*s12^4 +
                110*s12^3*s13 - 642*s12^2*s13^2 + 110*s12*s13^3 + 10*s13^4)*
               s23^5))))/(108*p1q*p3q^4*s12^5*s13^3*s23^2 +
         108*p1q*p2q^4*s12^3*s13^5*s23^2 + 108*p1q^4*p2q*s12^3*s13^3*s23^4 +
         p1q^2*p2q^3*(108*s12^3*s13^5*s23^2 - 216*s12^3*s13^4*s23^3) +
         p1q^3*p2q^2*(-216*s12^3*s13^4*s23^3 + 108*s12^3*s13^3*s23^4) +
         p3q^3*(p1q*p2q*(216*s12^5*s13^3 - 216*s12^4*s13^4)*s23^2 +
           p1q^2*(108*s12^5*s13^3*s23^2 - 216*s12^4*s13^3*s23^3)) +
         p3q^2*(p1q*p2q^2*(108*s12^5*s13^3 - 432*s12^4*s13^4 +
             108*s12^3*s13^5)*s23^2 + p1q^2*p2q*
            ((108*s12^5*s13^3 - 216*s12^4*s13^4)*s23^2 +
             (-432*s12^4*s13^3 - 216*s12^3*s13^4)*s23^3) +
           p1q^3*(-216*s12^4*s13^3*s23^3 + 108*s12^3*s13^3*s23^4)) +
         p3q*(p1q*p2q^3*(-216*s12^4*s13^4 + 216*s12^3*s13^5)*s23^2 +
           108*p1q^4*s12^3*s13^3*s23^4 + p1q^2*p2q^2*
            ((-216*s12^4*s13^4 + 108*s12^3*s13^5)*s23^2 +
             (-216*s12^4*s13^3 - 432*s12^3*s13^4)*s23^3) +
           p1q^3*p2q*((-216*s12^4*s13^3 - 216*s12^3*s13^4)*s23^3 +
             216*s12^3*s13^3*s23^4))) +
       ((p3q^2*(18*s12^2*s13 + 18*s12*s13^2 + (9*s12^2 + 27*s12*s13)*s23 +
            9*s12*s23^2) + p1q*p2q*((-9*s12*s13 - 9*s13^2)*s23 -
            9*s13*s23^2) + p2q^2*(18*s12^2*s13 + 18*s12*s13^2 +
            (27*s12*s13 + 9*s13^2)*s23 + 9*s13*s23^2) +
          p3q*(p1q*((-9*s12^2 - 9*s12*s13)*s23 - 9*s12*s23^2) +
            p2q*(36*s12^2*s13 + 36*s12*s13^2 + (9*s12^2 + 54*s12*s13 +
                9*s13^2)*s23 + (9*s12 + 9*s13)*s23^2)))*
         Log(p1q/(p1q + p2q + p3q))^2)/(p1q*p2q*s12*s13*s23^2 +
         p1q*p3q*s12*s13*s23^2) +
       ((p2q^2*(9*s12^2*s13 + 9*s12*s13^2 + 9*s12*s13*s23) +
          p3q^2*(9*s12^2*s13 + 9*s12*s13^2 + (9*s12^2 + 18*s12*s13)*s23 +
            9*s12*s23^2) + p1q*p2q*((-s12 - s13)*s23^2 - s23^3) +
          p3q*(p2q*(18*s12^2*s13 + 18*s12*s13^2 + (9*s12^2 + 27*s12*s13)*
               s23 + 9*s12*s23^2) + p1q*((-9*s12^2 - 9*s12*s13)*s23 +
              (-10*s12 - s13)*s23^2 - s23^3)))*Log(p2q/(p1q + p2q + p3q))^2)/
        (p1q*p2q*s12*s13*s23^2 + p1q*p3q*s12*s13*s23^2) +
       ((p1q*p3q^5*((-2*s12^4 - 2*s12^3*s13)*s23 - 2*s12^3*s23^2) +
          p2q^6*(-18*s12^2*s13^3 - 36*s12*s13^4 - 18*s13^5 +
            (-36*s12*s13^3 - 36*s13^4)*s23 - 18*s13^3*s23^2) +
          p1q*p2q^5*(-18*s12^2*s13^3 - 36*s12*s13^4 - 18*s13^5 +
            (38*s12^2*s13^2 + 42*s12*s13^3 + 4*s13^4)*s23 +
            (78*s12*s13^2 + 62*s13^3)*s23^2 + 40*s13^2*s23^3) +
          p1q^2*p2q^4*(-18*s12^3*s13^2 - 36*s12^2*s13^3 - 18*s12*s13^4 +
            (-35*s12^3*s13 - 75*s12^2*s13^2 - 32*s12*s13^3 + 8*s13^4)*s23 +
            (-91*s12^2*s13 - 96*s12*s13^2 - 10*s13^3)*s23^2 +
            (-82*s12*s13 - 44*s13^2)*s23^3 - 26*s13*s23^4) +
          p1q^3*p2q^3*(-18*s12^3*s13^2 - 36*s12^2*s13^3 - 18*s12*s13^4 +
            (-53*s12^3*s13 - 149*s12^2*s13^2 - 146*s12*s13^3 - 50*s13^4)*
             s23 + (-s12^3 - 106*s12^2*s13 - 178*s12*s13^2 - 98*s13^3)*
             s23^2 + (-s12^2 - 46*s12*s13 - 42*s13^2)*s23^3 +
            (4*s12 + 10*s13)*s23^4 + 4*s23^5) + p1q^5*p2q*
           ((18*s12^2*s13 + 36*s12*s13^2 + 18*s13^3)*s23^2 +
            (2*s12^2 + 42*s12*s13 + 40*s13^2)*s23^3 + (6*s12 + 26*s13)*
             s23^4 + 4*s23^5) + p1q^4*p2q^2*
           ((-18*s12^3*s13 - 36*s12^2*s13^2 - 36*s12*s13^3 - 18*s13^4)*s23 +
            (-s12^3 + 3*s12^2*s13 + 32*s12*s13^2 + 10*s13^3)*s23^2 +
            (s12^2 + 78*s12*s13 + 82*s13^2)*s23^3 + (10*s12 + 62*s13)*s23^4 +
            8*s23^5) + p3q^4*(p2q^2*(-18*s12^4*s13 - 36*s12^3*s13^2 -
              18*s12^2*s13^3 + (-36*s12^3*s13 - 36*s12^2*s13^2)*s23 -
              18*s12^2*s13*s23^2) + p1q*p2q*(-36*s12^4*s13 - 72*s12^3*s13^2 -
              36*s12^2*s13^3 + (-6*s12^4 - 56*s12^3*s13 - 50*s12^2*s13^2)*
               s23 + (-4*s12^3 - 12*s12^2*s13)*s23^2 + 2*s12^2*s23^3) +
            p1q^2*(-18*s12^4*s13 - 36*s12^3*s13^2 - 18*s12^2*s13^3 +
              (-s12^4 - 25*s12^3*s13 - 24*s12^2*s13^2)*s23 + 5*s12^3*s23^2 +
              6*s12^2*s23^3)) + p3q^3*(p2q^3*(-36*s12^4*s13 -
              36*s12^3*s13^2 + 36*s12^2*s13^3 + 36*s12*s13^4 +
              (-72*s12^3*s13 + 72*s12*s13^3)*s23 + (-36*s12^2*s13 +
                36*s12*s13^2)*s23^2) + p1q*p2q^2*(-54*s12^4*s13 -
              36*s12^3*s13^2 + 90*s12^2*s13^3 + 72*s12*s13^4 +
              (-4*s12^4 - 28*s12^3*s13 + 134*s12^2*s13^2 + 158*s12*s13^3)*
               s23 + (2*s12^3 + 68*s12^2*s13 + 118*s12*s13^2)*s23^2 +
              (6*s12^2 + 32*s12*s13)*s23^3) + p1q^3*(18*s12^3*s13^2 +
              36*s12^2*s13^3 + 18*s12*s13^4 + (2*s12^4 + 43*s12^3*s13 +
                87*s12^2*s13^2 + 46*s12*s13^3)*s23 + (8*s12^3 +
                61*s12^2*s13 + 42*s12*s13^2)*s23^2 + 8*s12*s13*s23^3 -
              6*s12*s23^4) + p1q^2*p2q*(-18*s12^4*s13 + 18*s12^3*s13^2 +
              90*s12^2*s13^3 + 54*s12*s13^4 + (s12^4 + 78*s12^3*s13 +
                227*s12^2*s13^2 + 150*s12*s13^3)*s23 + (19*s12^3 +
                145*s12^2*s13 + 128*s12*s13^2)*s23^2 + (14*s12^2 +
                28*s12*s13)*s23^3 - 4*s12*s23^4)) +
          p3q^2*(p2q^4*(-18*s12^4*s13 + 36*s12^3*s13^2 + 108*s12^2*s13^3 +
              36*s12*s13^4 - 18*s13^5 + (-36*s12^3*s13 + 108*s12^2*s13^2 +
                108*s12*s13^3 - 36*s13^4)*s23 + (-18*s12^2*s13 +
                72*s12*s13^2 - 18*s13^3)*s23^2) + p1q*p2q^3*(-18*s12^4*s13 +
              72*s12^3*s13^2 + 162*s12^2*s13^3 + 36*s12*s13^4 - 36*s13^5 +
              (60*s12^3*s13 + 336*s12^2*s13^2 + 242*s12*s13^3 - 34*s13^4)*
               s23 + (4*s12^3 + 142*s12^2*s13 + 266*s12*s13^2 + 40*s13^3)*s23^
                2 + (4*s12^2 + 60*s12*s13 + 38*s13^2)*s23^3) +
            p1q^2*p2q^2*(18*s12^4*s13 + 90*s12^3*s13^2 + 90*s12^2*s13^3 -
              18*s12*s13^4 - 36*s13^5 + (s12^4 + 162*s12^3*s13 +
                337*s12^2*s13^2 + 126*s12*s13^3 - 50*s13^4)*s23 +
              (9*s12^3 + 149*s12^2*s13 + 120*s12*s13^2 - 14*s13^3)*s23^2 +
              (-4*s12^2 - 36*s12*s13 - 22*s13^2)*s23^3 + (-12*s12 - 22*s13)*
               s23^4) + p1q^3*p2q*(18*s12^4*s13 + 54*s12^3*s13^2 +
              36*s12^2*s13^3 - 18*s12*s13^4 - 18*s13^5 + (3*s12^4 +
                72*s12^3*s13 + 76*s12^2*s13^2 - 37*s12*s13^3 - 44*s13^4)*
               s23 + (5*s12^3 - 22*s12^2*s13 - 118*s12*s13^2 - 58*s13^3)*s23^
                2 + (-20*s12^2 - 119*s12*s13 - 54*s13^2)*s23^3 +
              (-20*s12 - 20*s13)*s23^4 + 2*s23^5) +
            p1q^4*((-18*s12^2*s13^2 - 18*s12*s13^3)*s23 + (-4*s12^3 -
                31*s12^2*s13 - 55*s12*s13^2 - 10*s13^3)*s23^2 +
              (-13*s12^2 - 44*s12*s13 - 18*s13^2)*s23^3 + (-7*s12 - 6*s13)*
               s23^4 + 2*s23^5)) + p3q*(p2q^5*(36*s12^3*s13^2 +
              36*s12^2*s13^3 - 36*s12*s13^4 - 36*s13^5 + (72*s12^2*s13^2 -
                72*s13^4)*s23 + (36*s12*s13^2 - 36*s13^3)*s23^2) +
            p1q*p2q^4*(36*s12^3*s13^2 + 18*s12^2*s13^3 - 72*s12*s13^4 -
              54*s13^5 + (34*s12^3*s13 + 190*s12^2*s13^2 + 126*s12*s13^3 -
                30*s13^4)*s23 + (62*s12^2*s13 + 226*s12*s13^2 + 102*s13^3)*
               s23^2 + (28*s12*s13 + 78*s13^2)*s23^3) + p1q^2*p2q^3*
             (18*s12^4*s13 + 18*s12^3*s13^2 - 54*s12^2*s13^3 - 90*s12*s13^4 -
              36*s13^5 + (-s12^4 + 42*s12^3*s13 + 65*s12^2*s13^2 -
                2*s12*s13^3 - 24*s13^4)*s23 + (-5*s12^3 - 51*s12^2*s13 -
                32*s12*s13^2 + 12*s13^3)*s23^2 + (-12*s12^2 - 128*s12*s13 -
                48*s13^2)*s23^3 + (-8*s12 - 48*s13)*s23^4) +
            p1q^5*((2*s12^2 + 6*s12*s13 + 4*s13^2)*s23^3 + (6*s12 + 8*s13)*
               s23^4 + 4*s23^5) + p1q^3*p2q^2*(18*s12^4*s13 +
              18*s12^3*s13^2 - 36*s12^2*s13^3 - 54*s12*s13^4 - 18*s13^5 +
              (s12^4 - 24*s12^3*s13 - 124*s12^2*s13^2 - 157*s12*s13^3 -
                58*s13^4)*s23 + (-4*s12^3 - 207*s12^2*s13 - 302*s12*s13^2 -
                102*s13^3)*s23^2 + (-21*s12^2 - 209*s12*s13 - 96*s13^2)*s23^
                3 + (-10*s12 - 28*s13)*s23^4 + 6*s23^5) +
            p1q^4*p2q*((-36*s12^3*s13 - 72*s12^2*s13^2 - 36*s12*s13^3)*s23 +
              (-5*s12^3 - 100*s12^2*s13 - 95*s12*s13^2)*s23^2 +
              (-12*s12^2 - 56*s12*s13 + 10*s13^2)*s23^3 + (3*s12 + 20*s13)*
               s23^4 + 10*s23^5)))*Log((p1q + p2q)/(p1q + p2q + p3q))^2)/
        (2*p1q*p3q^5*s12^4*s13*s23 + p1q*p2q^5*(-2*s12*s13^4*s23 -
           2*s12*s13^3*s23^2) + p1q^2*p2q^4*(-4*s12*s13^4*s23 +
           4*s12*s13^2*s23^3) + p1q^4*p2q^2*(4*s12*s13^3*s23^2 -
           4*s12*s13*s23^4) + p1q^5*p2q*(-2*s12*s13^2*s23^3 -
           2*s12*s13*s23^4) + p1q^3*p2q^3*(-2*s12*s13^4*s23 +
           6*s12*s13^3*s23^2 + 6*s12*s13^2*s23^3 - 2*s12*s13*s23^4) +
         p3q^4*(p1q^2*((2*s12^4*s13 - 2*s12^3*s13^2)*s23 -
             6*s12^3*s13*s23^2) + p1q*p2q*((4*s12^4*s13 - 6*s12^3*s13^2)*
              s23 - 2*s12^3*s13*s23^2)) +
         p3q^3*(p1q*p2q^2*((2*s12^4*s13 - 12*s12^3*s13^2 + 6*s12^2*s13^3)*
              s23 + (-4*s12^3*s13 + 4*s12^2*s13^2)*s23^2) +
           p1q^2*p2q*((2*s12^4*s13 - 10*s12^3*s13^2 + 4*s12^2*s13^3)*s23 +
             (-14*s12^3*s13 + 4*s12^2*s13^2)*s23^2 + 4*s12^2*s13*s23^3) +
           p1q^3*(-2*s12^3*s13^2*s23 + (-6*s12^3*s13 + 4*s12^2*s13^2)*s23^2 +
             6*s12^2*s13*s23^3)) +
         p3q*(p1q*p2q^4*((6*s12^2*s13^3 - 4*s12*s13^4)*s23 +
             (4*s12^2*s13^2 - 4*s12*s13^3)*s23^2) + p1q^2*p2q^3*
            ((10*s12^2*s13^3 - 6*s12*s13^4)*s23 + (8*s12^2*s13^2 + 2*s12*
                s13^3)*s23^2 + (4*s12^2*s13 + 8*s12*s13^2)*s23^3) +
           p1q^4*p2q*((4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
             (6*s12^2*s13 - 2*s12*s13^2)*s23^3 - 6*s12*s13*s23^4) +
           p1q^3*p2q^2*((4*s12^2*s13^3 - 2*s12*s13^4)*s23 +
             (8*s12^2*s13^2 + 10*s12*s13^3)*s23^2 + (10*s12^2*s13 + 8*s12*
                s13^2)*s23^3 - 4*s12*s13*s23^4) + p1q^5*(-2*s12*s13^2*s23^3 -
             2*s12*s13*s23^4)) + p3q^2*
          (p1q*p2q^3*((-6*s12^3*s13^2 + 12*s12^2*s13^3 - 2*s12*s13^4)*s23 +
             (-2*s12^3*s13 + 8*s12^2*s13^2 - 2*s12*s13^3)*s23^2) +
           p1q^2*p2q^2*((-8*s12^3*s13^2 + 14*s12^2*s13^3 - 2*s12*s13^4)*s23 +
             (-8*s12^3*s13 + 12*s12^2*s13^2 + 2*s12*s13^3)*s23^2 +
             (8*s12^2*s13 + 4*s12*s13^2)*s23^3) +
           p1q^4*(4*s12^2*s13^2*s23^2 + (6*s12^2*s13 - 2*s12*s13^2)*s23^3 -
             2*s12*s13*s23^4) + p1q^3*p2q*((-2*s12^3*s13^2 + 4*s12^2*s13^3)*
              s23 + (-6*s12^3*s13 + 12*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
             (16*s12^2*s13 + 2*s12*s13^2)*s23^3 - 2*s12*s13*s23^4))) +
       ((p3q^2*(9*s12^2*s13 + 9*s12*s13^2 + 9*s12*s13*s23) +
          p2q^2*(9*s12^2*s13 + 9*s12*s13^2 + (18*s12*s13 + 9*s13^2)*s23 +
            9*s13*s23^2) + p1q*p2q*((-9*s12*s13 - 9*s13^2)*s23 +
            (-s12 - 10*s13)*s23^2 - s23^3) +
          p3q*(p2q*(18*s12^2*s13 + 18*s12*s13^2 + (27*s12*s13 + 9*s13^2)*
               s23 + 9*s13*s23^2) + p1q*((-s12 - s13)*s23^2 - s23^3)))*
         Log(p3q/(p1q + p2q + p3q))^2)/(p1q*p2q*s12*s13*s23^2 +
         p1q*p3q*s12*s13*s23^2) +
       ((p3q^6*(18*s12^5 + 36*s12^4*s13 + 18*s12^3*s13^2 +
            (36*s12^4 + 36*s12^3*s13)*s23 + 18*s12^3*s23^2) +
          p1q*p2q^5*((2*s12*s13^3 + 2*s13^4)*s23 + 2*s13^3*s23^2) +
          p1q^2*p2q^4*(18*s12^3*s13^2 + 36*s12^2*s13^3 + 18*s12*s13^4 +
            (24*s12^2*s13^2 + 25*s12*s13^3 + s13^4)*s23 - 5*s13^3*s23^2 -
            6*s13^2*s23^3) + p1q^3*p2q^3*(-18*s12^4*s13 - 36*s12^3*s13^2 -
            18*s12^2*s13^3 + (-46*s12^3*s13 - 87*s12^2*s13^2 - 43*s12*s13^3 -
              2*s13^4)*s23 + (-42*s12^2*s13 - 61*s12*s13^2 - 8*s13^3)*s23^2 -
            8*s12*s13*s23^3 + 6*s13*s23^4) + p1q^5*p2q*
           ((-4*s12^2 - 6*s12*s13 - 2*s13^2)*s23^3 + (-8*s12 - 6*s13)*s23^4 -
            4*s23^5) + p1q^4*p2q^2*((18*s12^3*s13 + 18*s12^2*s13^2)*s23 +
            (10*s12^3 + 55*s12^2*s13 + 31*s12*s13^2 + 4*s13^3)*s23^2 +
            (18*s12^2 + 44*s12*s13 + 13*s13^2)*s23^3 + (6*s12 + 7*s13)*
             s23^4 - 2*s23^5) + p3q^5*(p2q*(36*s12^5 + 36*s12^4*s13 -
              36*s12^3*s13^2 - 36*s12^2*s13^3 + (72*s12^4 - 72*s12^2*s13^2)*
               s23 + (36*s12^3 - 36*s12^2*s13)*s23^2) +
            p1q*(18*s12^5 + 36*s12^4*s13 + 18*s12^3*s13^2 + (-4*s12^4 -
                42*s12^3*s13 - 38*s12^2*s13^2)*s23 + (-62*s12^3 -
                78*s12^2*s13)*s23^2 - 40*s12^2*s23^3)) +
          p3q^4*(p2q^2*(18*s12^5 - 36*s12^4*s13 - 108*s12^3*s13^2 -
              36*s12^2*s13^3 + 18*s12*s13^4 + (36*s12^4 - 108*s12^3*s13 -
                108*s12^2*s13^2 + 36*s12*s13^3)*s23 + (18*s12^3 -
                72*s12^2*s13 + 18*s12*s13^2)*s23^2) +
            p1q*p2q*(54*s12^5 + 72*s12^4*s13 - 18*s12^3*s13^2 -
              36*s12^2*s13^3 + (30*s12^4 - 126*s12^3*s13 - 190*s12^2*s13^2 -
                34*s12*s13^3)*s23 + (-102*s12^3 - 226*s12^2*s13 -
                62*s12*s13^2)*s23^2 + (-78*s12^2 - 28*s12*s13)*s23^3) +
            p1q^2*(18*s12^4*s13 + 36*s12^3*s13^2 + 18*s12^2*s13^3 +
              (-8*s12^4 + 32*s12^3*s13 + 75*s12^2*s13^2 + 35*s12*s13^3)*s23 +
              (10*s12^3 + 96*s12^2*s13 + 91*s12*s13^2)*s23^2 +
              (44*s12^2 + 82*s12*s13)*s23^3 + 26*s12*s23^4)) +
          p3q^2*(p2q^4*(18*s12^3*s13^2 + 36*s12^2*s13^3 + 18*s12*s13^4 +
              (36*s12^2*s13^2 + 36*s12*s13^3)*s23 + 18*s12*s13^2*s23^2) +
            p1q*p2q^3*(-72*s12^4*s13 - 90*s12^3*s13^2 + 36*s12^2*s13^3 +
              54*s12*s13^4 + (-158*s12^3*s13 - 134*s12^2*s13^2 +
                28*s12*s13^3 + 4*s13^4)*s23 + (-118*s12^2*s13 -
                68*s12*s13^2 - 2*s13^3)*s23^2 + (-32*s12*s13 - 6*s13^2)*s23^
                3) + p1q^2*p2q^2*(36*s12^5 + 18*s12^4*s13 - 90*s12^3*s13^2 -
              90*s12^2*s13^3 - 18*s12*s13^4 + (50*s12^4 - 126*s12^3*s13 -
                337*s12^2*s13^2 - 162*s12*s13^3 - s13^4)*s23 +
              (14*s12^3 - 120*s12^2*s13 - 149*s12*s13^2 - 9*s13^3)*s23^2 +
              (22*s12^2 + 36*s12*s13 + 4*s13^2)*s23^3 + (22*s12 + 12*s13)*s23^
                4) + p1q^4*((18*s12^4 + 36*s12^3*s13 + 36*s12^2*s13^2 +
                18*s12*s13^3)*s23 + (-10*s12^3 - 32*s12^2*s13 - 3*s12*s13^2 +
                s13^3)*s23^2 + (-82*s12^2 - 78*s12*s13 - s13^2)*s23^3 +
              (-62*s12 - 10*s13)*s23^4 - 8*s23^5) + p1q^3*p2q*
             (18*s12^5 + 54*s12^4*s13 + 36*s12^3*s13^2 - 18*s12^2*s13^3 -
              18*s12*s13^4 + (58*s12^4 + 157*s12^3*s13 + 124*s12^2*s13^2 +
                24*s12*s13^3 - s13^4)*s23 + (102*s12^3 + 302*s12^2*s13 +
                207*s12*s13^2 + 4*s13^3)*s23^2 + (96*s12^2 + 209*s12*s13 +
                21*s13^2)*s23^3 + (28*s12 + 10*s13)*s23^4 - 6*s23^5)) +
          p3q^3*(p2q^3*(-36*s12^4*s13 - 36*s12^3*s13^2 + 36*s12^2*s13^3 +
              36*s12*s13^4 + (-72*s12^3*s13 + 72*s12*s13^3)*s23 +
              (-36*s12^2*s13 + 36*s12*s13^2)*s23^2) + p1q*p2q^2*
             (36*s12^5 - 36*s12^4*s13 - 162*s12^3*s13^2 - 72*s12^2*s13^3 +
              18*s12*s13^4 + (34*s12^4 - 242*s12^3*s13 - 336*s12^2*s13^2 -
                60*s12*s13^3)*s23 + (-40*s12^3 - 266*s12^2*s13 -
                142*s12*s13^2 - 4*s13^3)*s23^2 + (-38*s12^2 - 60*s12*s13 -
                4*s13^2)*s23^3) + p1q^2*p2q*(36*s12^5 + 90*s12^4*s13 +
              54*s12^3*s13^2 - 18*s12^2*s13^3 - 18*s12*s13^4 +
              (24*s12^4 + 2*s12^3*s13 - 65*s12^2*s13^2 - 42*s12*s13^3 +
                s13^4)*s23 + (-12*s12^3 + 32*s12^2*s13 + 51*s12*s13^2 +
                5*s13^3)*s23^2 + (48*s12^2 + 128*s12*s13 + 12*s13^2)*s23^3 +
              (48*s12 + 8*s13)*s23^4) + p1q^3*(18*s12^4*s13 +
              36*s12^3*s13^2 + 18*s12^2*s13^3 + (50*s12^4 + 146*s12^3*s13 +
                149*s12^2*s13^2 + 53*s12*s13^3)*s23 + (98*s12^3 +
                178*s12^2*s13 + 106*s12*s13^2 + s13^3)*s23^2 +
              (42*s12^2 + 46*s12*s13 + s13^2)*s23^3 + (-10*s12 - 4*s13)*s23^
                4 - 4*s23^5)) + p3q*(p1q*p2q^4*(36*s12^3*s13^2 +
              72*s12^2*s13^3 + 36*s12*s13^4 + (50*s12^2*s13^2 +
                56*s12*s13^3 + 6*s13^4)*s23 + (12*s12*s13^2 + 4*s13^3)*s23^
                2 - 2*s13^2*s23^3) + p1q^2*p2q^3*(-54*s12^4*s13 -
              90*s12^3*s13^2 - 18*s12^2*s13^3 + 18*s12*s13^4 +
              (-150*s12^3*s13 - 227*s12^2*s13^2 - 78*s12*s13^3 - s13^4)*s23 +
              (-128*s12^2*s13 - 145*s12*s13^2 - 19*s13^3)*s23^2 +
              (-28*s12*s13 - 14*s13^2)*s23^3 + 4*s13*s23^4) +
            p1q^4*p2q*((36*s12^3*s13 + 72*s12^2*s13^2 + 36*s12*s13^3)*s23 +
              (95*s12^2*s13 + 100*s12*s13^2 + 5*s13^3)*s23^2 +
              (-10*s12^2 + 56*s12*s13 + 12*s13^2)*s23^3 + (-20*s12 - 3*s13)*
               s23^4 - 10*s23^5) + p1q^5*((-18*s12^3 - 36*s12^2*s13 -
                18*s12*s13^2)*s23^2 + (-40*s12^2 - 42*s12*s13 - 2*s13^2)*s23^
                3 + (-26*s12 - 6*s13)*s23^4 - 4*s23^5) + p1q^3*p2q^2*
             (18*s12^5 + 18*s12^4*s13 - 36*s12^3*s13^2 - 54*s12^2*s13^3 -
              18*s12*s13^4 + (44*s12^4 + 37*s12^3*s13 - 76*s12^2*s13^2 -
                72*s12*s13^3 - 3*s13^4)*s23 + (58*s12^3 + 118*s12^2*s13 +
                22*s12*s13^2 - 5*s13^3)*s23^2 + (54*s12^2 + 119*s12*s13 +
                20*s13^2)*s23^3 + (20*s12 + 20*s13)*s23^4 - 2*s23^5)))*
         Log((p1q + p3q)/(p1q + p2q + p3q))^2)/(-2*p1q*p2q^5*s12*s13^4*s23 +
         p1q*p3q^5*(2*s12^4*s13*s23 + 2*s12^3*s13*s23^2) +
         p1q^2*p2q^4*((2*s12^2*s13^3 - 2*s12*s13^4)*s23 +
           6*s12*s13^3*s23^2) + p1q^3*p2q^3*(2*s12^2*s13^3*s23 +
           (-4*s12^2*s13^2 + 6*s12*s13^3)*s23^2 - 6*s12*s13^2*s23^3) +
         p1q^5*p2q*(2*s12^2*s13*s23^3 + 2*s12*s13*s23^4) +
         p1q^4*p2q^2*(-4*s12^2*s13^2*s23^2 + (2*s12^2*s13 - 6*s12*s13^2)*
            s23^3 + 2*s12*s13*s23^4) +
         p3q^4*(p1q*p2q*((4*s12^4*s13 - 6*s12^3*s13^2)*s23 +
             (4*s12^3*s13 - 4*s12^2*s13^2)*s23^2) +
           p1q^2*(4*s12^4*s13*s23 - 4*s12^2*s13*s23^3)) +
         p3q^3*(p1q*p2q^2*((2*s12^4*s13 - 12*s12^3*s13^2 + 6*s12^2*s13^3)*
              s23 + (2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*s23^2) +
           p1q^2*p2q*((6*s12^4*s13 - 10*s12^3*s13^2)*s23 +
             (-2*s12^3*s13 - 8*s12^2*s13^2)*s23^2 + (-8*s12^2*s13 - 4*s12*
                s13^2)*s23^3) + p1q^3*(2*s12^4*s13*s23 - 6*s12^3*s13*s23^2 -
             6*s12^2*s13*s23^3 + 2*s12*s13*s23^4)) +
         p3q^2*(p1q*p2q^3*((-6*s12^3*s13^2 + 12*s12^2*s13^3 - 2*s12*s13^4)*
              s23 + (-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2) +
           p1q^2*p2q^2*((2*s12^4*s13 - 14*s12^3*s13^2 + 8*s12^2*s13^3)*s23 +
             (-2*s12^3*s13 - 12*s12^2*s13^2 + 8*s12*s13^3)*s23^2 +
             (-4*s12^2*s13 - 8*s12*s13^2)*s23^3) +
           p1q^4*(-4*s12^3*s13*s23^2 + 4*s12*s13*s23^4) +
           p1q^3*p2q*((2*s12^4*s13 - 4*s12^3*s13^2)*s23 +
             (-10*s12^3*s13 - 8*s12^2*s13^2)*s23^2 + (-8*s12^2*s13 - 10*s12*
                s13^2)*s23^3 + 4*s12*s13*s23^4)) +
         p3q*(p1q*p2q^4*((6*s12^2*s13^3 - 4*s12*s13^4)*s23 +
             2*s12*s13^3*s23^2) + p1q^2*p2q^3*((-4*s12^3*s13^2 + 10*s12^2*
                s13^3 - 2*s12*s13^4)*s23 + (-4*s12^2*s13^2 + 14*s12*s13^3)*
              s23^2 - 4*s12*s13^2*s23^3) + p1q^5*(2*s12^2*s13*s23^3 +
             2*s12*s13*s23^4) + p1q^3*p2q^2*((-4*s12^3*s13^2 + 2*s12^2*s13^3)*
              s23 + (-4*s12^3*s13 - 12*s12^2*s13^2 + 6*s12*s13^3)*s23^2 +
             (-2*s12^2*s13 - 16*s12*s13^2)*s23^3 + 2*s12*s13*s23^4) +
           p1q^4*p2q*((-4*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
             (2*s12^2*s13 - 6*s12*s13^2)*s23^3 + 6*s12*s13*s23^4))) +
       ((p3q^6*(54*s12^5*s13 + 108*s12^4*s13^2 + 54*s12^3*s13^3 +
            (90*s12^4*s13 + 90*s12^3*s13^2)*s23 + 36*s12^3*s13*s23^2) +
          p2q^6*(54*s12^3*s13^3 + 108*s12^2*s13^4 + 54*s12*s13^5 +
            (108*s12^2*s13^3 + 126*s12*s13^4 + 18*s13^5)*s23 +
            (54*s12*s13^3 + 18*s13^4)*s23^2) + p1q*p2q^5*(54*s12^3*s13^3 +
            108*s12^2*s13^4 + 54*s12*s13^5 + (-126*s12^3*s13^2 -
              180*s12^2*s13^3 - 54*s12*s13^4)*s23 +
            (-252*s12^2*s13^2 - 288*s12*s13^3 - 54*s13^4)*s23^2 +
            (-126*s12*s13^2 - 54*s13^3)*s23^3) + p1q^2*p2q^4*
           ((27*s12^4*s13 - 63*s12^3*s13^2 - 261*s12^2*s13^3 -
              207*s12*s13^4 - 36*s13^5)*s23 + (117*s12^3*s13 +
              18*s12^2*s13^2 - 171*s12*s13^3 - 54*s13^4)*s23^2 +
            (180*s12^2*s13 + 162*s12*s13^2 + 36*s13^3)*s23^3 +
            (90*s12*s13 + 54*s13^2)*s23^4) + p1q^4*p2q^2*
           ((9*s12^3 - 9*s12^2*s13 - 108*s12*s13^2 - 90*s13^3)*s23^3 +
            (-9*s12^2 - 54*s12*s13 - 108*s13^2)*s23^4 + (-18*s12 - 18*s13)*
             s23^5) + p1q^3*p2q^3*((-9*s12^4 + 18*s12^3*s13 +
              180*s12^2*s13^2 + 252*s12*s13^3 + 99*s13^4)*s23^2 +
            (-27*s12^3 + 63*s12^2*s13 + 243*s12*s13^2 + 135*s13^3)*s23^3 +
            (-36*s12^2 + 18*s12*s13 + 18*s13^2)*s23^4 + (-18*s12 - 18*s13)*
             s23^5) + p1q^5*p2q*((-18*s12^2 + 9*s12*s13 + 27*s13^2)*s23^4 +
            (-18*s12 + 27*s13)*s23^5) +
          p3q^5*(p2q*(216*s12^5*s13 + 324*s12^4*s13^2 - 108*s12^2*s13^4 +
              (378*s12^4*s13 + 216*s12^3*s13^2 - 162*s12^2*s13^3)*s23 +
              (162*s12^3*s13 - 54*s12^2*s13^2)*s23^2) +
            p1q*(54*s12^5*s13 + 108*s12^4*s13^2 + 54*s12^3*s13^3 +
              (-54*s12^4*s13 - 180*s12^3*s13^2 - 126*s12^2*s13^3)*s23 +
              (-198*s12^3*s13 - 216*s12^2*s13^2)*s23^2 - 90*s12^2*s13*s23^
                3)) + p3q^4*(p2q^2*(324*s12^5*s13 + 216*s12^4*s13^2 -
              486*s12^3*s13^3 - 324*s12^2*s13^4 + 54*s12*s13^5 +
              (594*s12^4*s13 - 108*s12^3*s13^2 - 648*s12^2*s13^3 +
                54*s12*s13^4)*s23 + (270*s12^3*s13 - 270*s12^2*s13^2)*s23^
                2) + p1q*p2q*(162*s12^5*s13 + 216*s12^4*s13^2 -
              54*s12^3*s13^3 - 108*s12^2*s13^4 + (-234*s12^4*s13 -
                900*s12^3*s13^2 - 738*s12^2*s13^3 - 72*s12*s13^4)*s23 +
              (-18*s12^4 - 792*s12^3*s13 - 1008*s12^2*s13^2 - 144*s12*s13^3)*
               s23^2 + (-18*s12^3 - 378*s12^2*s13 - 72*s12*s13^2)*s23^3) +
            p1q^2*((-9*s12^5 - 117*s12^4*s13 - 135*s12^3*s13^2 +
                27*s12^2*s13^3 + 54*s12*s13^4)*s23 + (9*s12^4 + 189*s12^2*
                 s13^2 + 180*s12*s13^3)*s23^2 + (18*s12^3 + 162*s12^2*s13 +
                198*s12*s13^2)*s23^3 + 72*s12*s13*s23^4)) +
          p3q^2*(p2q^4*(54*s12^5*s13 - 324*s12^4*s13^2 - 486*s12^3*s13^3 +
              216*s12^2*s13^4 + 324*s12*s13^5 + (108*s12^4*s13 -
                702*s12^3*s13^2 - 324*s12^2*s13^3 + 540*s12*s13^4 + 54*s13^5)*
               s23 + (54*s12^3*s13 - 378*s12^2*s13^2 + 162*s12*s13^3 +
                54*s13^4)*s23^2) + p1q*p2q^3*(54*s12^5*s13 - 216*s12^4*s13^
                2 - 432*s12^3*s13^3 + 162*s12*s13^5 + (-306*s12^4*s13 -
                1782*s12^3*s13^2 - 1962*s12^2*s13^3 - 522*s12*s13^4 -
                36*s13^5)*s23 + (-18*s12^4 - 720*s12^3*s13 - 2052*s12^2*
                 s13^2 - 1368*s12*s13^3 - 198*s13^4)*s23^2 + (-18*s12^3 -
                342*s12^2*s13 - 558*s12*s13^2 - 162*s13^3)*s23^3) +
            p1q^2*p2q^2*((27*s12^5 - 162*s12^4*s13 - 522*s12^3*s13^2 -
                594*s12^2*s13^3 - 297*s12*s13^4 - 36*s13^5)*s23 +
              (45*s12^4 + 333*s12^3*s13 + 639*s12^2*s13^2 + 189*s12*s13^3 -
                54*s13^4)*s23^2 + (90*s12^3 + 990*s12^2*s13 + 1044*s12*
                 s13^2 + 144*s13^3)*s23^3 + (72*s12^2 + 414*s12*s13 +
                162*s13^2)*s23^4) + p1q^3*p2q*((-27*s12^4 + 216*s12^3*s13 +
                486*s12^2*s13^2 + 270*s12*s13^3 + 27*s13^4)*s23^2 +
              (-45*s12^3 + 153*s12^2*s13 + 207*s12*s13^2 + 63*s13^3)*s23^3 +
              (-36*s12^2 - 144*s12*s13 - 18*s13^2)*s23^4 + (-18*s12 - 54*s13)*
               s23^5) + p1q^4*((-45*s12^3 - 54*s12^2*s13 - 18*s12*s13^2 -
                9*s13^3)*s23^3 + (-27*s12^2 - 9*s12*s13 - 27*s13^2)*s23^4 +
              (18*s12 - 18*s13)*s23^5)) +
          p3q^3*(p2q^3*(216*s12^5*s13 - 216*s12^4*s13^2 - 864*s12^3*s13^3 -
              216*s12^2*s13^4 + 216*s12*s13^5 + (414*s12^4*s13 -
                720*s12^3*s13^2 - 864*s12^2*s13^3 + 288*s12*s13^4 + 18*s13^5)*
               s23 + (198*s12^3*s13 - 486*s12^2*s13^2 + 54*s12*s13^3 +
                18*s13^4)*s23^2) + p1q*p2q^2*(162*s12^5*s13 -
              432*s12^3*s13^3 - 216*s12^2*s13^4 + 54*s12*s13^5 +
              (-396*s12^4*s13 - 1818*s12^3*s13^2 - 1746*s12^2*s13^3 -
                342*s12*s13^4 - 18*s13^5)*s23 + (-36*s12^4 - 1152*s12^3*s13 -
                1980*s12^2*s13^2 - 756*s12*s13^3 - 72*s13^4)*s23^2 +
              (-36*s12^3 - 558*s12^2*s13 - 324*s12*s13^2 - 54*s13^3)*s23^3) +
            p1q^2*p2q*((9*s12^5 - 252*s12^4*s13 - 450*s12^3*s13^2 -
                198*s12^2*s13^3 - 27*s12*s13^4 - 18*s13^5)*s23 +
              (27*s12^4 + 63*s12^3*s13 + 513*s12^2*s13^2 + 387*s12*s13^3 -
                18*s13^4)*s23^2 + (54*s12^3 + 612*s12^2*s13 + 720*s12*s13^2 +
                54*s13^3)*s23^3 + (36*s12^2 + 270*s12*s13 + 54*s13^2)*s23^
                4) + p1q^3*((36*s12^4 + 108*s12^3*s13 + 72*s12^2*s13^2)*s23^
                2 + (18*s12^2*s13 - 36*s12*s13^2 - 18*s13^3)*s23^3 +
              (-36*s12^2 - 36*s12*s13 - 36*s13^2)*s23^4 - 18*s13*s23^5)) +
          p3q*(p2q^5*(-108*s12^4*s13^2 + 324*s12^2*s13^4 + 216*s12*s13^5 +
              (-216*s12^3*s13^2 + 162*s12^2*s13^3 + 432*s12*s13^4 + 54*s13^5)*
               s23 + (-108*s12^2*s13^2 + 162*s12*s13^3 + 54*s13^4)*s23^2) +
            p1q*p2q^4*(-108*s12^4*s13^2 - 54*s12^3*s13^3 + 216*s12^2*s13^4 +
              162*s12*s13^5 + (-90*s12^4*s13 - 810*s12^3*s13^2 -
                1008*s12^2*s13^3 - 306*s12*s13^4 - 18*s13^5)*s23 +
              (-162*s12^3*s13 - 1116*s12^2*s13^2 - 1044*s12*s13^3 -
                180*s13^4)*s23^2 + (-72*s12^2*s13 - 432*s12*s13^2 -
                162*s13^3)*s23^3) + p1q^2*p2q^3*((9*s12^5 - 270*s12^3*s13^2 -
                630*s12^2*s13^3 - 423*s12*s13^4 - 54*s13^5)*s23 +
              (27*s12^4 + 387*s12^3*s13 + 333*s12^2*s13^2 - 189*s12*s13^3 -
                90*s13^4)*s23^2 + (54*s12^3 + 720*s12^2*s13 + 684*s12*s13^2 +
                126*s13^3)*s23^3 + (36*s12^2 + 306*s12*s13 + 162*s13^2)*s23^
                4) + p1q^3*p2q^2*((-36*s12^4 + 180*s12^3*s13 + 540*s12^2*
                 s13^2 + 396*s12*s13^3 + 72*s13^4)*s23^2 + (-36*s12^3 +
                198*s12^2*s13 + 378*s12*s13^2 + 144*s13^3)*s23^3 +
              (-36*s12^2 - 108*s12*s13 + 18*s13^2)*s23^4 + (-36*s12 - 54*s13)*
               s23^5) + p1q^5*((18*s12^2 + 9*s12*s13 - 9*s13^2)*s23^4 +
              (18*s12 - 9*s13)*s23^5) + p1q^4*p2q*
             ((36*s12^3 - 117*s12^2*s13 - 162*s12*s13^2 - 9*s13^3)*s23^3 +
              (36*s12^2 - 171*s12*s13 - 27*s13^2)*s23^4 - 18*s13*s23^5)))*
         Log((p2q + p3q)/(p1q + p2q + p3q))^2)/
        (p1q*p3q^5*(2*s12^4*s13 + 2*s12^3*s13^2)*s23^2 +
         p1q*p2q^5*(2*s12^2*s13^3 + 2*s12*s13^4)*s23^2 -
         2*p1q^5*p2q*s12*s13*s23^5 + p1q^2*p2q^4*
          ((2*s12^2*s13^3 + 2*s12*s13^4)*s23^2 +
           (-4*s12^2*s13^2 - 6*s12*s13^3)*s23^3) + p1q^3*p2q^3*
          ((-4*s12^2*s13^2 - 6*s12*s13^3)*s23^3 + (2*s12^2*s13 + 6*s12*s13^2)*
            s23^4) + p1q^4*p2q^2*((2*s12^2*s13 + 6*s12*s13^2)*s23^4 -
           2*s12*s13*s23^5) + p3q^4*(p1q*p2q*(6*s12^4*s13 + 2*s12^3*s13^2 -
             4*s12^2*s13^3)*s23^2 + p1q^2*((2*s12^4*s13 + 2*s12^3*s13^2)*
              s23^2 + (-6*s12^3*s13 - 4*s12^2*s13^2)*s23^3)) +
         p3q^3*(p1q*p2q^2*(6*s12^4*s13 - 6*s12^3*s13^2 - 10*s12^2*s13^3 +
             2*s12*s13^4)*s23^2 + p1q^2*p2q*((4*s12^4*s13 - 4*s12^2*s13^3)*
              s23^2 + (-16*s12^3*s13 - 12*s12^2*s13^2 - 4*s12*s13^3)*s23^3) +
           p1q^3*((-6*s12^3*s13 - 4*s12^2*s13^2)*s23^3 +
             (6*s12^2*s13 + 2*s12*s13^2)*s23^4)) +
         p3q*(p1q*p2q^4*(-4*s12^3*s13^2 + 2*s12^2*s13^3 + 6*s12*s13^4)*
            s23^2 - 2*p1q^5*s12*s13*s23^5 + p1q^2*p2q^3*
            ((-4*s12^3*s13^2 + 4*s12*s13^4)*s23^2 + (-4*s12^3*s13 - 12*s12^2*
                s13^2 - 16*s12*s13^3)*s23^3) + p1q^3*p2q^2*
            ((-4*s12^3*s13 - 8*s12^2*s13^2 - 10*s12*s13^3)*s23^3 +
             (10*s12^2*s13 + 14*s12*s13^2)*s23^4) + p1q^4*p2q*
            ((8*s12^2*s13 + 8*s12*s13^2)*s23^4 - 4*s12*s13*s23^5)) +
         p3q^2*(p1q*p2q^3*(2*s12^4*s13 - 10*s12^3*s13^2 - 6*s12^2*s13^3 +
             6*s12*s13^4)*s23^2 + p1q^2*p2q^2*((2*s12^4*s13 - 6*s12^3*s13^2 -
               6*s12^2*s13^3 + 2*s12*s13^4)*s23^2 + (-14*s12^3*s13 - 16*s12^2*
                s13^2 - 14*s12*s13^3)*s23^3) + p1q^3*p2q*
            ((-10*s12^3*s13 - 8*s12^2*s13^2 - 4*s12*s13^3)*s23^3 +
             (14*s12^2*s13 + 10*s12*s13^2)*s23^4) +
           p1q^4*((6*s12^2*s13 + 2*s12*s13^2)*s23^4 - 2*s12*s13*s23^5))) +
       ((p3q^2*(144*s12^2*s13 + 144*s12*s13^2 + (72*s12^2 + 216*s12*s13)*
             s23 + 72*s12*s23^2) + p2q^2*(144*s12^2*s13 + 144*s12*s13^2 +
            (216*s12*s13 + 72*s13^2)*s23 + 72*s13*s23^2) +
          p1q*p2q*((-72*s12*s13 - 72*s13^2)*s23 + (-8*s12 - 80*s13)*s23^2 -
            8*s23^3) + p3q*(p2q*(288*s12^2*s13 + 288*s12*s13^2 +
              (72*s12^2 + 432*s12*s13 + 72*s13^2)*s23 + (72*s12 + 72*s13)*s23^
                2) + p1q*((-72*s12^2 - 72*s12*s13)*s23 + (-80*s12 - 8*s13)*
               s23^2 - 8*s23^3)))*Log(-s12 - s13 - s23)^2)/
        (9*p1q*p2q*s12*s13*s23^2 + 9*p1q*p3q*s12*s13*s23^2) +
       ((p3q^2*(9*s12^2*s13 + 9*s12*s13^2 + 9*s12*s13*s23) +
          p2q^2*(9*s12^2*s13 + 9*s12*s13^2 + (18*s12*s13 + 9*s13^2)*s23 +
            9*s13*s23^2) + p1q*p2q*((-9*s12*s13 - 9*s13^2)*s23 +
            (-s12 - 10*s13)*s23^2 - s23^3) +
          p3q*(p2q*(18*s12^2*s13 + 18*s12*s13^2 + (27*s12*s13 + 9*s13^2)*
               s23 + 9*s13*s23^2) + p1q*((-s12 - s13)*s23^2 - s23^3)))*
         Log(s12/(s12 + s13 + s23))^2)/(p1q*p2q*s12*s13*s23^2 +
         p1q*p3q*s12*s13*s23^2) +
       ((p2q^2*(9*s12^2*s13 + 9*s12*s13^2 + 9*s12*s13*s23) +
          p3q^2*(9*s12^2*s13 + 9*s12*s13^2 + (9*s12^2 + 18*s12*s13)*s23 +
            9*s12*s23^2) + p1q*p2q*((-s12 - s13)*s23^2 - s23^3) +
          p3q*(p2q*(18*s12^2*s13 + 18*s12*s13^2 + (9*s12^2 + 27*s12*s13)*
               s23 + 9*s12*s23^2) + p1q*((-9*s12^2 - 9*s12*s13)*s23 +
              (-10*s12 - s13)*s23^2 - s23^3)))*Log(s13/(s12 + s13 + s23))^2)/
        (p1q*p2q*s12*s13*s23^2 + p1q*p3q*s12*s13*s23^2) +
       ((p3q^2*(1512*s12^5*s13^2 + 4536*s12^4*s13^3 + 4536*s12^3*s13^4 +
            1512*s12^2*s13^5 + (90*s12^6 + 432*s12^5*s13 + 3366*s12^4*s13^2 +
              5706*s12^3*s13^3 + 2592*s12^2*s13^4 - 90*s12*s13^5)*s23 +
            (90*s12^5 + 342*s12^4*s13 + 1512*s12^3*s13^2 + 1170*s12^2*s13^3 -
              90*s12*s13^4)*s23^2) + p2q^2*(1512*s12^5*s13^2 +
            4536*s12^4*s13^3 + 4536*s12^3*s13^4 + 1512*s12^2*s13^5 +
            (-90*s12^5*s13 + 2592*s12^4*s13^2 + 5706*s12^3*s13^3 +
              3366*s12^2*s13^4 + 432*s12*s13^5 + 90*s13^6)*s23 +
            (-90*s12^4*s13 + 1170*s12^3*s13^2 + 1512*s12^2*s13^3 +
              342*s12*s13^4 + 90*s13^5)*s23^2) +
          p1q*p2q*((90*s12^5*s13 - 1080*s12^4*s13^2 - 2682*s12^3*s13^3 -
              1854*s12^2*s13^4 - 432*s12*s13^5 - 90*s13^6)*s23 +
            (-80*s12^5 - 465*s12^4*s13 - 2327*s12^3*s13^2 - 2669*s12^2*s13^
                3 - 897*s12*s13^4 - 170*s13^5)*s23^2 +
            (-80*s12^4 - 475*s12^3*s13 - 682*s12^2*s13^2 - 475*s12*s13^3 -
              80*s13^4)*s23^3) + p1q^2*((90*s12^5 + 54*s12^4*s13 -
              288*s12^3*s13^2 - 288*s12^2*s13^3 + 54*s12*s13^4 + 90*s13^5)*
             s23^2 + (90*s12^4 - 36*s12^3*s13 - 252*s12^2*s13^2 -
              36*s12*s13^3 + 90*s13^4)*s23^3) +
          p3q*(p2q*(3024*s12^5*s13^2 + 9072*s12^4*s13^3 + 9072*s12^3*s13^4 +
              3024*s12^2*s13^5 + (90*s12^6 + 342*s12^5*s13 + 5958*s12^4*
                 s13^2 + 11412*s12^3*s13^3 + 5958*s12^2*s13^4 +
                342*s12*s13^5 + 90*s13^6)*s23 + (90*s12^5 + 252*s12^4*s13 +
                2682*s12^3*s13^2 + 2682*s12^2*s13^3 + 252*s12*s13^4 +
                90*s13^5)*s23^2) + p1q*((-90*s12^6 - 432*s12^5*s13 -
                1854*s12^4*s13^2 - 2682*s12^3*s13^3 - 1080*s12^2*s13^4 +
                90*s12*s13^5)*s23 + (-170*s12^5 - 897*s12^4*s13 -
                2669*s12^3*s13^2 - 2327*s12^2*s13^3 - 465*s12*s13^4 -
                80*s13^5)*s23^2 + (-80*s12^4 - 475*s12^3*s13 - 682*s12^2*
                 s13^2 - 475*s12*s13^3 - 80*s13^4)*s23^3)))*
         Log(s23/(s12 + s13 + s23)))/(p1q*p2q*(18*s12^4*s13^2 +
           36*s12^3*s13^3 + 18*s12^2*s13^4)*s23^2 +
         p1q*p3q*(18*s12^4*s13^2 + 36*s12^3*s13^3 + 18*s12^2*s13^4)*s23^2) +
       ((p3q^5*(-324*s12^6*s13^3 - 324*s12^5*s13^4 +
            (-90*s12^8 - 27*s12^7*s13 - 99*s12^6*s13^2 - 549*s12^5*s13^3 +
              27*s12^4*s13^4 + 90*s12^3*s13^5)*s23 +
            (-90*s12^7 + 63*s12^6*s13 - 162*s12^5*s13^2 - 63*s12^4*s13^3 +
              90*s12^3*s13^4)*s23^2) + p2q^5*(-324*s12^4*s13^5 -
            324*s12^3*s13^6 + (90*s12^5*s13^3 + 27*s12^4*s13^4 -
              549*s12^3*s13^5 - 99*s12^2*s13^6 - 27*s12*s13^7 - 90*s13^8)*
             s23 + (90*s12^4*s13^3 - 63*s12^3*s13^4 - 162*s12^2*s13^5 +
              63*s12*s13^6 - 90*s13^7)*s23^2) + p1q*p2q^4*(-324*s12^4*s13^5 -
            324*s12^3*s13^6 + (648*s12^4*s13^4 + 324*s12^3*s13^5)*s23 +
            (-100*s12^5*s13^2 - 147*s12^4*s13^3 + 1531*s12^3*s13^4 +
              631*s12^2*s13^5 - 39*s12*s13^6 + 260*s13^7)*s23^2 +
            (-100*s12^4*s13^2 - 47*s12^3*s13^3 + 930*s12^2*s13^4 -
              299*s12*s13^5 + 260*s13^6)*s23^3) + p1q^2*p2q^3*
           ((315*s12^5*s13^3 + 1512*s12^4*s13^4 + 1440*s12^3*s13^5 +
              180*s12^2*s13^6 + 27*s12*s13^7 + 90*s13^8)*s23 +
            (-10*s12^5*s13^2 + 195*s12^4*s13^3 + 2017*s12^3*s13^4 +
              1063*s12^2*s13^5 - 183*s12*s13^6 + 80*s13^7)*s23^2 +
            (-70*s12^5*s13 + 203*s12^4*s13^2 - 1201*s12^3*s13^3 -
              35*s12^2*s13^4 + 49*s12*s13^5 - 260*s13^6)*s23^3 +
            (-70*s12^4*s13 + 283*s12^3*s13^2 - 1374*s12^2*s13^3 +
              409*s12*s13^4 - 250*s13^5)*s23^4) +
          p1q^5*((-90*s12^5 - 27*s12^4*s13 + 63*s12^3*s13^2 +
              63*s12^2*s13^3 - 27*s12*s13^4 - 90*s13^5)*s23^4 +
            (-90*s12^4 + 63*s12^3*s13 + 63*s12*s13^3 - 90*s13^4)*s23^5) +
          p1q^4*p2q*((90*s12^5*s13 + 108*s12^4*s13^2 + 99*s12^3*s13^3 -
              108*s12^2*s13^4 + 81*s12*s13^5 + 270*s13^6)*s23^3 +
            (-10*s12^5 - 30*s12^4*s13 + 514*s12^3*s13^2 + 577*s12^2*s13^3 -
              309*s12*s13^4 + 260*s13^5)*s23^4 + (-10*s12^4 - 110*s12^3*s13 +
              606*s12^2*s13^2 - 110*s12*s13^3 - 10*s13^4)*s23^5) +
          p1q^3*p2q^2*((9*s12^5*s13^2 - 783*s12^4*s13^3 - 1116*s12^3*s13^4 -
              135*s12^2*s13^5 - 81*s12*s13^6 - 270*s13^7)*s23^2 +
            (20*s12^5*s13 + 249*s12^4*s13^2 - 2108*s12^3*s13^3 -
              1640*s12^2*s13^4 + 429*s12*s13^5 - 250*s13^6)*s23^3 +
            (80*s12^5 - 73*s12^4*s13 + 653*s12^3*s13^2 - 1103*s12^2*s13^3 +
              127*s12*s13^4 + 100*s13^5)*s23^4 + (80*s12^4 - 173*s12^3*s13 +
              606*s12^2*s13^2 - 173*s12*s13^3 + 80*s13^4)*s23^5) +
          p3q^4*(p2q*(-972*s12^6*s13^3 - 324*s12^5*s13^4 + 648*s12^4*s13^5 +
              (-180*s12^8 + 216*s12^7*s13 - 117*s12^6*s13^2 - 1449*s12^5*
                 s13^3 + 1053*s12^4*s13^4 + 99*s12^3*s13^5 - 270*s12^2*s13^6)*
               s23 + (-180*s12^7 + 396*s12^6*s13 - 513*s12^5*s13^2 +
                36*s12^4*s13^3 + 369*s12^3*s13^4 - 270*s12^2*s13^5)*s23^2) +
            p1q*(-324*s12^6*s13^3 - 324*s12^5*s13^4 + (324*s12^5*s13^3 +
                648*s12^4*s13^4)*s23 + (260*s12^7 - 39*s12^6*s13 +
                631*s12^5*s13^2 + 1531*s12^4*s13^3 - 147*s12^3*s13^4 -
                100*s12^2*s13^5)*s23^2 + (260*s12^6 - 299*s12^5*s13 +
                930*s12^4*s13^2 - 47*s12^3*s13^3 - 100*s12^2*s13^4)*s23^3)) +
          p3q^3*(p2q^2*(-972*s12^6*s13^3 + 972*s12^5*s13^4 + 1620*s12^4*s13^
                5 - 324*s12^3*s13^6 + (-90*s12^8 + 513*s12^7*s13 -
                207*s12^6*s13^2 - 1332*s12^5*s13^3 + 3024*s12^4*s13^4 -
                423*s12^3*s13^5 - 459*s12^2*s13^6 + 270*s12*s13^7)*s23 +
              (-90*s12^7 + 603*s12^6*s13 - 810*s12^5*s13^2 + 450*s12^4*
                 s13^3 + 630*s12^3*s13^4 - 729*s12^2*s13^5 + 270*s12*s13^6)*
               s23^2) + p1q*p2q*(-648*s12^6*s13^3 + 648*s12^4*s13^5 +
              (162*s12^6*s13^2 + 1458*s12^5*s13^3 + 3078*s12^4*s13^4 +
                486*s12^3*s13^5)*s23 + (520*s12^7 - 238*s12^6*s13 +
                1610*s12^5*s13^2 + 3492*s12^4*s13^3 - 26*s12^3*s13^4 -
                14*s12^2*s13^5 - 160*s12*s13^6)*s23^2 + (520*s12^6 -
                758*s12^5*s13 + 2206*s12^4*s13^2 - 658*s12^3*s13^3 +
                146*s12^2*s13^4 - 160*s12*s13^5)*s23^3) +
            p1q^2*((90*s12^8 + 27*s12^7*s13 + 180*s12^6*s13^2 + 1440*s12^5*
                 s13^3 + 1512*s12^4*s13^4 + 315*s12^3*s13^5)*s23 +
              (80*s12^7 - 183*s12^6*s13 + 1063*s12^5*s13^2 + 2017*s12^4*
                 s13^3 + 195*s12^3*s13^4 - 10*s12^2*s13^5)*s23^2 +
              (-260*s12^6 + 49*s12^5*s13 - 35*s12^4*s13^2 - 1201*s12^3*
                 s13^3 + 203*s12^2*s13^4 - 70*s12*s13^5)*s23^3 +
              (-250*s12^5 + 409*s12^4*s13 - 1374*s12^3*s13^2 + 283*s12^2*
                 s13^3 - 70*s12*s13^4)*s23^4)) +
          p3q^2*(p2q^3*(-324*s12^6*s13^3 + 1620*s12^5*s13^4 +
              972*s12^4*s13^5 - 972*s12^3*s13^6 + (270*s12^7*s13 -
                459*s12^6*s13^2 - 423*s12^5*s13^3 + 3024*s12^4*s13^4 -
                1332*s12^3*s13^5 - 207*s12^2*s13^6 + 513*s12*s13^7 -
                90*s13^8)*s23 + (270*s12^6*s13 - 729*s12^5*s13^2 +
                630*s12^4*s13^3 + 450*s12^3*s13^4 - 810*s12^2*s13^5 +
                603*s12*s13^6 - 90*s13^7)*s23^2) + p1q*p2q^2*
             (-324*s12^6*s13^3 + 972*s12^5*s13^4 + 972*s12^4*s13^5 -
              324*s12^3*s13^6 + (162*s12^6*s13^2 + 1620*s12^5*s13^3 +
                4860*s12^4*s13^4 + 1620*s12^3*s13^5 + 162*s12^2*s13^6)*s23 +
              (260*s12^7 - 359*s12^6*s13 + 1065*s12^5*s13^2 + 2082*s12^4*
                 s13^3 + 2082*s12^3*s13^4 + 1065*s12^2*s13^5 - 359*s12*
                 s13^6 + 260*s13^7)*s23^2 + (260*s12^6 - 619*s12^5*s13 +
                1522*s12^4*s13^2 - 1222*s12^3*s13^3 + 1522*s12^2*s13^4 -
                619*s12*s13^5 + 260*s13^6)*s23^3) + p1q^2*p2q*
             ((-270*s12^7*s13 + 243*s12^6*s13^2 + 2214*s12^5*s13^3 +
                2646*s12^4*s13^4 + 1458*s12^3*s13^5 + 513*s12^2*s13^6)*s23 +
              (-10*s12^7 - 370*s12^6*s13 + 1573*s12^5*s13^2 + 1367*s12^4*
                 s13^3 - 167*s12^3*s13^4 + 905*s12^2*s13^5 + 20*s12*s13^6)*
               s23^2 + (-510*s12^6 + 158*s12^5*s13 - 567*s12^4*s13^2 -
                4757*s12^3*s13^3 - 167*s12^2*s13^4 + 39*s12*s13^5 -
                250*s13^6)*s23^3 + (-500*s12^5 + 748*s12^4*s13 -
                2465*s12^3*s13^2 - 808*s12^2*s13^3 + 269*s12*s13^4 -
                250*s13^5)*s23^4) + p1q^3*((-270*s12^7 - 81*s12^6*s13 -
                135*s12^5*s13^2 - 1116*s12^4*s13^3 - 783*s12^3*s13^4 +
                9*s12^2*s13^5)*s23^2 + (-250*s12^6 + 429*s12^5*s13 -
                1640*s12^4*s13^2 - 2108*s12^3*s13^3 + 249*s12^2*s13^4 +
                20*s12*s13^5)*s23^3 + (100*s12^5 + 127*s12^4*s13 -
                1103*s12^3*s13^2 + 653*s12^2*s13^3 - 73*s12*s13^4 + 80*s13^5)*
               s23^4 + (80*s12^4 - 173*s12^3*s13 + 606*s12^2*s13^2 -
                173*s12*s13^3 + 80*s13^4)*s23^5)) +
          p3q*(p2q^4*(648*s12^5*s13^4 - 324*s12^4*s13^5 - 972*s12^3*s13^6 +
              (-270*s12^6*s13^2 + 99*s12^5*s13^3 + 1053*s12^4*s13^4 -
                1449*s12^3*s13^5 - 117*s12^2*s13^6 + 216*s12*s13^7 -
                180*s13^8)*s23 + (-270*s12^5*s13^2 + 369*s12^4*s13^3 +
                36*s12^3*s13^4 - 513*s12^2*s13^5 + 396*s12*s13^6 - 180*s13^7)*
               s23^2) + p1q*p2q^3*(648*s12^5*s13^4 - 648*s12^3*s13^6 +
              (486*s12^5*s13^3 + 3078*s12^4*s13^4 + 1458*s12^3*s13^5 +
                162*s12^2*s13^6)*s23 + (-160*s12^6*s13 - 14*s12^5*s13^2 -
                26*s12^4*s13^3 + 3492*s12^3*s13^4 + 1610*s12^2*s13^5 -
                238*s12*s13^6 + 520*s13^7)*s23^2 + (-160*s12^5*s13 +
                146*s12^4*s13^2 - 658*s12^3*s13^3 + 2206*s12^2*s13^4 -
                758*s12*s13^5 + 520*s13^6)*s23^3) + p1q^2*p2q^2*
             ((513*s12^6*s13^2 + 1458*s12^5*s13^3 + 2646*s12^4*s13^4 +
                2214*s12^3*s13^5 + 243*s12^2*s13^6 - 270*s12*s13^7)*s23 +
              (20*s12^6*s13 + 905*s12^5*s13^2 - 167*s12^4*s13^3 +
                1367*s12^3*s13^4 + 1573*s12^2*s13^5 - 370*s12*s13^6 -
                10*s13^7)*s23^2 + (-250*s12^6 + 39*s12^5*s13 - 167*s12^4*
                 s13^2 - 4757*s12^3*s13^3 - 567*s12^2*s13^4 + 158*s12*s13^5 -
                510*s13^6)*s23^3 + (-250*s12^5 + 269*s12^4*s13 -
                808*s12^3*s13^2 - 2465*s12^2*s13^3 + 748*s12*s13^4 -
                500*s13^5)*s23^4) + p1q^4*((270*s12^6 + 81*s12^5*s13 -
                108*s12^4*s13^2 + 99*s12^3*s13^3 + 108*s12^2*s13^4 +
                90*s12*s13^5)*s23^3 + (260*s12^5 - 309*s12^4*s13 +
                577*s12^3*s13^2 + 514*s12^2*s13^3 - 30*s12*s13^4 - 10*s13^5)*
               s23^4 + (-10*s12^4 - 110*s12^3*s13 + 606*s12^2*s13^2 -
                110*s12*s13^3 - 10*s13^4)*s23^5) + p1q^3*p2q*
             ((180*s12^6*s13 - 189*s12^5*s13^2 - 1503*s12^4*s13^3 -
                1503*s12^3*s13^4 - 189*s12^2*s13^5 + 180*s12*s13^6)*s23^2 +
              (20*s12^6 + 440*s12^5*s13 - 1283*s12^4*s13^2 - 3442*s12^3*
                 s13^3 - 1283*s12^2*s13^4 + 440*s12*s13^5 + 20*s13^6)*s23^3 +
              (180*s12^5 + 54*s12^4*s13 - 288*s12^3*s13^2 - 288*s12^2*s13^3 +
                54*s12*s13^4 + 180*s13^5)*s23^4 + (160*s12^4 - 346*s12^3*
                 s13 + 1212*s12^2*s13^2 - 346*s12*s13^3 + 160*s13^4)*s23^5)))*
         Log((s12 + s13)/(s12 + s13 + s23))*Log(s23/(s12 + s13 + s23)))/
        (18*p1q*p3q^4*s12^5*s13^3*s23^2 + 18*p1q*p2q^4*s12^3*s13^5*s23^2 +
         18*p1q^4*p2q*s12^3*s13^3*s23^4 + p1q^2*p2q^3*(18*s12^3*s13^5*s23^2 -
           36*s12^3*s13^4*s23^3) + p1q^3*p2q^2*(-36*s12^3*s13^4*s23^3 +
           18*s12^3*s13^3*s23^4) + p3q^3*(p1q*p2q*(36*s12^5*s13^3 -
             36*s12^4*s13^4)*s23^2 + p1q^2*(18*s12^5*s13^3*s23^2 -
             36*s12^4*s13^3*s23^3)) +
         p3q^2*(p1q*p2q^2*(18*s12^5*s13^3 - 72*s12^4*s13^4 + 18*s12^3*s13^5)*
            s23^2 + p1q^2*p2q*((18*s12^5*s13^3 - 36*s12^4*s13^4)*s23^2 +
             (-72*s12^4*s13^3 - 36*s12^3*s13^4)*s23^3) +
           p1q^3*(-36*s12^4*s13^3*s23^3 + 18*s12^3*s13^3*s23^4)) +
         p3q*(p1q*p2q^3*(-36*s12^4*s13^4 + 36*s12^3*s13^5)*s23^2 +
           18*p1q^4*s12^3*s13^3*s23^4 + p1q^2*p2q^2*
            ((-36*s12^4*s13^4 + 18*s12^3*s13^5)*s23^2 +
             (-36*s12^4*s13^3 - 72*s12^3*s13^4)*s23^3) +
           p1q^3*p2q*((-36*s12^4*s13^3 - 36*s12^3*s13^4)*s23^3 +
             36*s12^3*s13^3*s23^4))) +
       ((p3q^2*(-18*s12^2*s13 - 18*s12*s13^2 + (-9*s12^2 - 27*s12*s13)*s23 -
            9*s12*s23^2) + p2q^2*(-18*s12^2*s13 - 18*s12*s13^2 +
            (-27*s12*s13 - 9*s13^2)*s23 - 9*s13*s23^2) +
          p1q*p2q*((9*s12*s13 + 9*s13^2)*s23 + (10*s12 + 19*s13)*s23^2 +
            10*s23^3) + p3q*(p2q*(-36*s12^2*s13 - 36*s12*s13^2 +
              (-9*s12^2 - 54*s12*s13 - 9*s13^2)*s23 + (-9*s12 - 9*s13)*s23^
                2) + p1q*((9*s12^2 + 9*s12*s13)*s23 + (19*s12 + 10*s13)*s23^
                2 + 10*s23^3)))*Log(s23/(s12 + s13 + s23))^2)/
        (9*p1q*p2q*s12*s13*s23^2 + 9*p1q*p3q*s12*s13*s23^2) +
       Log(-s12 - s13 - s23)*((p3q^2*(252*s12^2*s13 + 252*s12*s13^2 +
             (126*s12^2 + 378*s12*s13)*s23 + 126*s12*s23^2) +
           p2q^2*(252*s12^2*s13 + 252*s12*s13^2 + (378*s12*s13 + 126*s13^2)*
              s23 + 126*s13*s23^2) + p1q*p2q*((-126*s12*s13 - 126*s13^2)*
              s23 + (-14*s12 - 140*s13)*s23^2 - 14*s23^3) +
           p3q*(p2q*(504*s12^2*s13 + 504*s12*s13^2 + (126*s12^2 +
                 756*s12*s13 + 126*s13^2)*s23 + (126*s12 + 126*s13)*s23^2) +
             p1q*((-126*s12^2 - 126*s12*s13)*s23 + (-140*s12 - 14*s13)*
                s23^2 - 14*s23^3)))/(3*p1q*p2q*s12*s13*s23^2 +
           3*p1q*p3q*s12*s13*s23^2) +
         ((p3q^2*(18*s12^2*s13 + 18*s12*s13^2 + 18*s12*s13*s23) +
            p2q^2*(18*s12^2*s13 + 18*s12*s13^2 + (36*s12*s13 + 18*s13^2)*
               s23 + 18*s13*s23^2) + p1q*p2q*((-18*s12*s13 - 18*s13^2)*s23 +
              (-2*s12 - 20*s13)*s23^2 - 2*s23^3) +
            p3q*(p2q*(36*s12^2*s13 + 36*s12*s13^2 + (54*s12*s13 + 18*s13^2)*
                 s23 + 18*s13*s23^2) + p1q*((-2*s12 - 2*s13)*s23^2 -
                2*s23^3)))*Log(s12/(s12 + s13 + s23)))/
          (p1q*p2q*s12*s13*s23^2 + p1q*p3q*s12*s13*s23^2) +
         ((p2q^2*(18*s12^2*s13 + 18*s12*s13^2 + 18*s12*s13*s23) +
            p3q^2*(18*s12^2*s13 + 18*s12*s13^2 + (18*s12^2 + 36*s12*s13)*
               s23 + 18*s12*s23^2) + p1q*p2q*((-2*s12 - 2*s13)*s23^2 -
              2*s23^3) + p3q*(p2q*(36*s12^2*s13 + 36*s12*s13^2 +
                (18*s12^2 + 54*s12*s13)*s23 + 18*s12*s23^2) +
              p1q*((-18*s12^2 - 18*s12*s13)*s23 + (-20*s12 - 2*s13)*s23^2 -
                2*s23^3)))*Log(s13/(s12 + s13 + s23)))/
          (p1q*p2q*s12*s13*s23^2 + p1q*p3q*s12*s13*s23^2) +
         ((p3q^2*(-36*s12^2*s13 - 36*s12*s13^2 + (-18*s12^2 - 54*s12*s13)*
               s23 - 18*s12*s23^2) + p2q^2*(-36*s12^2*s13 - 36*s12*s13^2 +
              (-54*s12*s13 - 18*s13^2)*s23 - 18*s13*s23^2) +
            p1q*p2q*((18*s12*s13 + 18*s13^2)*s23 + (20*s12 + 38*s13)*s23^2 +
              20*s23^3) + p3q*(p2q*(-72*s12^2*s13 - 72*s12*s13^2 +
                (-18*s12^2 - 108*s12*s13 - 18*s13^2)*s23 + (-18*s12 - 18*s13)*
                 s23^2) + p1q*((18*s12^2 + 18*s12*s13)*s23 +
                (38*s12 + 20*s13)*s23^2 + 20*s23^3)))*
           Log(s23/(s12 + s13 + s23)))/(9*p1q*p2q*s12*s13*s23^2 +
           9*p1q*p3q*s12*s13*s23^2)) +
       nl*((p3q^2*(720*s12^3*s13 + 1440*s12^2*s13^2 + 720*s12*s13^3 +
             (360*s12^3 + 1440*s12^2*s13 + 1080*s12*s13^2)*s23 +
             (360*s12^2 + 360*s12*s13)*s23^2) + p2q^2*(720*s12^3*s13 +
             1440*s12^2*s13^2 + 720*s12*s13^3 + (1080*s12^2*s13 + 1440*s12*
                s13^2 + 360*s13^3)*s23 + (360*s12*s13 + 360*s13^2)*s23^2) +
           p1q*p2q*((-360*s12^2*s13 - 720*s12*s13^2 - 360*s13^3)*s23 +
             (-13*s12^2 - 494*s12*s13 - 373*s13^2)*s23^2 + (-40*s12 - 40*s13)*
              s23^3) + p3q*(p2q*(1440*s12^3*s13 + 2880*s12^2*s13^2 + 1440*s12*
                s13^3 + (360*s12^3 + 2520*s12^2*s13 + 2520*s12*s13^2 +
                 360*s13^3)*s23 + (360*s12^2 + 720*s12*s13 + 360*s13^2)*
                s23^2) + p1q*((-360*s12^3 - 720*s12^2*s13 - 360*s12*s13^2)*
                s23 + (-373*s12^2 - 494*s12*s13 - 13*s13^2)*s23^2 +
               (-40*s12 - 40*s13)*s23^3)))/
          (p1q*p2q*(54*s12^2*s13 + 54*s12*s13^2)*s23^2 +
           p1q*p3q*(54*s12^2*s13 + 54*s12*s13^2)*s23^2) +
         ((p3q^2*(-72*s12^2*s13 - 72*s12*s13^2 + (-36*s12^2 - 108*s12*s13)*
               s23 - 36*s12*s23^2) + p2q^2*(-72*s12^2*s13 - 72*s12*s13^2 +
              (-108*s12*s13 - 36*s13^2)*s23 - 36*s13*s23^2) +
            p1q*p2q*((36*s12*s13 + 36*s13^2)*s23 + (4*s12 + 40*s13)*s23^2 +
              4*s23^3) + p3q*(p2q*(-144*s12^2*s13 - 144*s12*s13^2 +
                (-36*s12^2 - 216*s12*s13 - 36*s13^2)*s23 + (-36*s12 - 36*s13)*
                 s23^2) + p1q*((36*s12^2 + 36*s12*s13)*s23 + (40*s12 + 4*s13)*
                 s23^2 + 4*s23^3)))*Log(-s12 - s13 - s23))/
          (9*p1q*p2q*s12*s13*s23^2 + 9*p1q*p3q*s12*s13*s23^2) +
         ((p3q^2*(-16*s12^4*s13 - 48*s12^3*s13^2 - 48*s12^2*s13^3 -
              16*s12*s13^4 + (-4*s12^4 - 36*s12^3*s13 - 60*s12^2*s13^2 -
                28*s12*s13^3)*s23 + (-4*s12^3 - 16*s12^2*s13 - 12*s12*s13^2)*
               s23^2) + p2q^2*(-16*s12^4*s13 - 48*s12^3*s13^2 -
              48*s12^2*s13^3 - 16*s12*s13^4 + (-28*s12^3*s13 - 60*s12^2*
                 s13^2 - 36*s12*s13^3 - 4*s13^4)*s23 + (-12*s12^2*s13 -
                16*s12*s13^2 - 4*s13^3)*s23^2) + p1q*p2q*
             ((12*s12^3*s13 + 28*s12^2*s13^2 + 20*s12*s13^3 + 4*s13^4)*s23 +
              (5*s12^3 + 23*s12^2*s13 + 27*s12*s13^2 + 9*s13^3)*s23^2 +
              (5*s12^2 + 6*s12*s13 + 5*s13^2)*s23^3) +
            p3q*(p2q*(-32*s12^4*s13 - 96*s12^3*s13^2 - 96*s12^2*s13^3 -
                32*s12*s13^4 + (-4*s12^4 - 64*s12^3*s13 - 120*s12^2*s13^2 -
                  64*s12*s13^3 - 4*s13^4)*s23 + (-4*s12^3 - 28*s12^2*s13 -
                  28*s12*s13^2 - 4*s13^3)*s23^2) + p1q*((4*s12^4 +
                  20*s12^3*s13 + 28*s12^2*s13^2 + 12*s12*s13^3)*s23 +
                (9*s12^3 + 27*s12^2*s13 + 23*s12*s13^2 + 5*s13^3)*s23^2 +
                (5*s12^2 + 6*s12*s13 + 5*s13^2)*s23^3)))*
           Log(s23/(s12 + s13 + s23)))/(p1q*p2q*(2*s12^3*s13 +
             4*s12^2*s13^2 + 2*s12*s13^3)*s23^2 + p1q*p3q*(2*s12^3*s13 +
             4*s12^2*s13^2 + 2*s12*s13^3)*s23^2)) +
       Log(p1q/(p1q + p2q + p3q))*
        (((p3q^5*(-18*s12^4 - 18*s12^3*s13 - 18*s12^3*s23) +
            p2q^5*(-18*s12^2*s13^2 - 18*s12*s13^3 + (-36*s12*s13^2 -
                18*s13^3)*s23 - 18*s13^2*s23^2) + p1q*p2q^4*
             (-18*s12^2*s13^2 - 18*s12*s13^3 + (36*s12^2*s13 + 18*s12*s13^2)*
               s23 + (72*s12*s13 + 36*s13^2)*s23^2 + 36*s13*s23^3) +
            p1q^3*p2q^2*((-45*s12^2 - 81*s12*s13 - 36*s13^2)*s23^2 +
              (-81*s12 - 72*s13)*s23^3 - 36*s23^4) + p1q^2*p2q^3*
             ((36*s12^3 + 117*s12^2*s13 + 108*s12*s13^2 + 27*s13^3)*s23 +
              (54*s12^2 + 135*s12*s13 + 63*s13^2)*s23^2 + 18*s13*s23^3 -
              18*s23^4) + p1q^4*p2q*((9*s12 + 9*s13)*s23^3 + 9*s23^4) +
            p3q^4*(p2q*(-54*s12^4 - 18*s12^3*s13 + 36*s12^2*s13^2 +
                (-72*s12^3 + 18*s12^2*s13)*s23 - 18*s12^2*s23^2) +
              p1q*(-18*s12^4 - 18*s12^3*s13 + (18*s12^3 + 36*s12^2*s13)*s23 +
                36*s12^2*s23^2)) + p3q^3*(p2q^2*(-54*s12^4 + 54*s12^3*s13 +
                90*s12^2*s13^2 - 18*s12*s13^3 + (-90*s12^3 + 108*s12^2*s13 +
                  18*s12*s13^2)*s23 + (-36*s12^2 + 36*s12*s13)*s23^2) +
              p1q^2*((45*s12^3 + 54*s12^2*s13 + 9*s12*s13^2)*s23 +
                (27*s12^2 - 9*s12*s13)*s23^2 - 18*s12*s23^3) +
              p1q*p2q*(-36*s12^4 + 36*s12^2*s13^2 + (54*s12^3 + 144*s12^2*
                   s13 + 18*s12*s13^2)*s23 + (126*s12^2 + 54*s12*s13)*s23^2 +
                36*s12*s23^3)) + p3q^2*(p2q^3*(-18*s12^4 + 90*s12^3*s13 +
                54*s12^2*s13^2 - 54*s12*s13^3 + (-36*s12^3 + 162*s12^2*s13 -
                  18*s13^3)*s23 + (-18*s12^2 + 72*s12*s13 - 18*s13^2)*
                 s23^2) + p1q^3*((-36*s12^2 - 45*s12*s13 - 9*s13^2)*s23^2 +
                (-36*s12 - 9*s13)*s23^3) + p1q*p2q^2*(-18*s12^4 +
                54*s12^3*s13 + 54*s12^2*s13^2 - 18*s12*s13^3 +
                (72*s12^3 + 270*s12^2*s13 + 108*s12*s13^2 + 18*s13^3)*s23 +
                (162*s12^2 + 216*s12*s13 + 54*s13^2)*s23^2 +
                (72*s12 + 36*s13)*s23^3) + p1q^2*p2q*((90*s12^3 + 153*s12^2*
                   s13 + 90*s12*s13^2 + 27*s13^3)*s23 + (72*s12^2 +
                  63*s12*s13 + 45*s13^2)*s23^2 - 36*s12*s23^3 - 18*s23^4)) +
            p3q*(p2q^4*(36*s12^3*s13 - 18*s12^2*s13^2 - 54*s12*s13^3 +
                (72*s12^2*s13 - 54*s12*s13^2 - 36*s13^3)*s23 +
                (36*s12*s13 - 36*s13^2)*s23^2) + p1q*p2q^3*(36*s12^3*s13 -
                36*s12*s13^3 + (36*s12^3 + 198*s12^2*s13 + 108*s12*s13^2 +
                  18*s13^3)*s23 + (72*s12^2 + 234*s12*s13 + 90*s13^2)*s23^2 +
                (36*s12 + 72*s13)*s23^3) + p1q^2*p2q^2*((63*s12^3 +
                  162*s12^2*s13 + 135*s12*s13^2 + 36*s13^3)*s23 +
                (63*s12^2 + 135*s12*s13 + 72*s13^2)*s23^2 - 36*s12*s23^3 -
                36*s23^4) + p1q^3*p2q*((-63*s12^2 - 90*s12*s13 - 27*s13^2)*
                 s23^2 + (-81*s12 - 45*s13)*s23^3 - 18*s23^4) +
              p1q^4*((9*s12 + 9*s13)*s23^3 + 9*s23^4)))*
           Log(p2q/(p1q + p2q + p3q)))/(2*p1q*p3q^4*s12^3*s23^2 +
           2*p1q*p2q^4*s12*s13^2*s23^2 + 2*p1q^4*p2q*s12*s23^4 +
           p1q^2*p2q^3*(2*s12*s13^2*s23^2 - 4*s12*s13*s23^3) +
           p1q^3*p2q^2*(-4*s12*s13*s23^3 + 2*s12*s23^4) +
           p3q^3*(p1q*p2q*(4*s12^3 - 4*s12^2*s13)*s23^2 +
             p1q^2*(2*s12^3*s23^2 - 4*s12^2*s23^3)) +
           p3q^2*(p1q*p2q^2*(2*s12^3 - 8*s12^2*s13 + 2*s12*s13^2)*s23^2 +
             p1q^2*p2q*((2*s12^3 - 4*s12^2*s13)*s23^2 + (-8*s12^2 -
                 4*s12*s13)*s23^3) + p1q^3*(-4*s12^2*s23^3 + 2*s12*s23^4)) +
           p3q*(p1q*p2q^3*(-4*s12^2*s13 + 4*s12*s13^2)*s23^2 +
             2*p1q^4*s12*s23^4 + p1q^2*p2q^2*((-4*s12^2*s13 + 2*s12*s13^2)*
                s23^2 + (-4*s12^2 - 8*s12*s13)*s23^3) + p1q^3*p2q*
              ((-4*s12^2 - 4*s12*s13)*s23^3 + 4*s12*s23^4))) +
         ((p2q^6*(18*s12^2*s13^2 + 36*s12*s13^3 + 18*s13^4 + (36*s12*s13^2 +
                36*s13^3)*s23 + 18*s13^2*s23^2) + p1q*p2q^5*(18*s12^2*s13^2 +
              36*s12*s13^3 + 18*s13^4 + (-36*s12^2*s13 - 36*s12*s13^2)*s23 +
              (-72*s12*s13 - 54*s13^2)*s23^2 - 36*s13*s23^3) +
            p1q^4*p2q^2*((18*s12^3 + 36*s12^2*s13 + 36*s12*s13^2 + 18*s13^3)*
               s23 + (-9*s12^2 - 45*s12*s13 - 18*s13^2)*s23^2 +
              (-81*s12 - 90*s13)*s23^3 - 54*s23^4) + p1q^5*p2q*
             ((-18*s12^2 - 36*s12*s13 - 18*s13^2)*s23^2 + (-36*s12 - 36*s13)*
               s23^3 - 18*s23^4) + p1q^3*p2q^3*(18*s12^3*s13 +
              36*s12^2*s13^2 + 18*s12*s13^3 + (54*s12^3 + 153*s12^2*s13 +
                153*s12*s13^2 + 54*s13^3)*s23 + (99*s12^2 + 162*s12*s13 +
                90*s13^2)*s23^2 + (27*s12 + 18*s13)*s23^3 - 18*s23^4) +
            p1q^2*p2q^4*(18*s12^3*s13 + 36*s12^2*s13^2 + 18*s12*s13^3 +
              (36*s12^3 + 81*s12^2*s13 + 45*s12*s13^2)*s23 +
              (90*s12^2 + 99*s12*s13 + 18*s13^2)*s23^2 + (72*s12 + 36*s13)*
               s23^3 + 18*s23^4) + p3q^4*(p1q^2*(18*s12^4 + 36*s12^3*s13 +
                18*s12^2*s13^2 + (27*s12^3 + 27*s12^2*s13)*s23 +
                9*s12^2*s23^2) + p2q^2*(18*s12^4 + 36*s12^3*s13 +
                18*s12^2*s13^2 + (36*s12^3 + 36*s12^2*s13)*s23 +
                18*s12^2*s23^2) + p1q*p2q*(36*s12^4 + 72*s12^3*s13 +
                36*s12^2*s13^2 + (54*s12^3 + 54*s12^2*s13)*s23 +
                18*s12^2*s23^2)) + p3q^3*(p2q^3*(36*s12^4 + 36*s12^3*s13 -
                36*s12^2*s13^2 - 36*s12*s13^3 + (72*s12^3 - 72*s12*s13^2)*
                 s23 + (36*s12^2 - 36*s12*s13)*s23^2) + p1q^2*p2q*(18*s12^4 -
                18*s12^3*s13 - 90*s12^2*s13^2 - 54*s12*s13^3 +
                (-63*s12^3 - 216*s12^2*s13 - 153*s12*s13^2)*s23 +
                (-117*s12^2 - 135*s12*s13)*s23^2 - 36*s12*s23^3) +
              p1q*p2q^2*(54*s12^4 + 36*s12^3*s13 - 90*s12^2*s13^2 -
                72*s12*s13^3 + (36*s12^3 - 126*s12^2*s13 - 162*s12*s13^2)*
                 s23 + (-54*s12^2 - 126*s12*s13)*s23^2 - 36*s12*s23^3) +
              p1q^3*(-18*s12^3*s13 - 36*s12^2*s13^2 - 18*s12*s13^3 +
                (-36*s12^3 - 81*s12^2*s13 - 45*s12*s13^2)*s23 +
                (-54*s12^2 - 45*s12*s13)*s23^2 - 18*s12*s23^3)) +
            p3q^2*(p2q^4*(18*s12^4 - 36*s12^3*s13 - 108*s12^2*s13^2 -
                36*s12*s13^3 + 18*s13^4 + (36*s12^3 - 108*s12^2*s13 -
                  108*s12*s13^2 + 36*s13^3)*s23 + (18*s12^2 - 72*s12*s13 +
                  18*s13^2)*s23^2) + p1q*p2q^3*(18*s12^4 - 72*s12^3*s13 -
                162*s12^2*s13^2 - 36*s12*s13^3 + 36*s13^4 +
                (-54*s12^3 - 342*s12^2*s13 - 252*s12*s13^2 + 36*s13^3)*s23 +
                (-144*s12^2 - 288*s12*s13 - 36*s13^2)*s23^2 +
                (-72*s12 - 36*s13)*s23^3) + p1q^4*((18*s12^2*s13 +
                  18*s12*s13^2)*s23 + (18*s12^2 + 45*s12*s13 + 9*s13^2)*
                 s23^2 + (27*s12 + 18*s13)*s23^3 + 9*s23^4) +
              p1q^2*p2q^2*(-18*s12^4 - 90*s12^3*s13 - 90*s12^2*s13^2 +
                18*s12*s13^3 + 36*s13^4 + (-153*s12^3 - 342*s12^2*s13 -
                  135*s12*s13^2 + 54*s13^3)*s23 + (-153*s12^2 - 153*s12*s13 +
                  18*s13^2)*s23^2 + 18*s13*s23^3 + 18*s23^4) +
              p1q^3*p2q*(-18*s12^4 - 54*s12^3*s13 - 36*s12^2*s13^2 +
                18*s12*s13^3 + 18*s13^4 + (-63*s12^3 - 72*s12^2*s13 +
                  36*s12*s13^2 + 45*s13^3)*s23 + (9*s12^2 + 90*s12*s13 +
                  54*s13^2)*s23^2 + (72*s12 + 45*s13)*s23^3 + 18*s23^4)) +
            p3q*(p2q^5*(-36*s12^3*s13 - 36*s12^2*s13^2 + 36*s12*s13^3 +
                36*s13^4 + (-72*s12^2*s13 + 72*s13^3)*s23 +
                (-36*s12*s13 + 36*s13^2)*s23^2) + p1q*p2q^4*(-36*s12^3*s13 -
                18*s12^2*s13^2 + 72*s12*s13^3 + 54*s13^4 +
                (-36*s12^3 - 198*s12^2*s13 - 126*s12*s13^2 + 36*s13^3)*s23 +
                (-72*s12^2 - 234*s12*s13 - 90*s13^2)*s23^2 +
                (-36*s12 - 72*s13)*s23^3) + p1q^4*p2q*((36*s12^3 +
                  72*s12^2*s13 + 36*s12*s13^2)*s23 + (81*s12^2 + 72*s12*s13 -
                  9*s13^2)*s23^2 + (36*s12 - 18*s13)*s23^3 - 9*s23^4) +
              p1q^3*p2q^2*(-18*s12^4 - 18*s12^3*s13 + 36*s12^2*s13^2 +
                54*s12*s13^3 + 18*s13^4 + (27*s12^3 + 126*s12^2*s13 +
                  162*s12*s13^2 + 63*s13^3)*s23 + (180*s12^2 + 261*s12*s13 +
                  90*s13^2)*s23^2 + (153*s12 + 63*s13)*s23^3 + 18*s23^4) +
              p1q^2*p2q^3*(-18*s12^4 - 18*s12^3*s13 + 54*s12^2*s13^2 +
                90*s12*s13^3 + 36*s13^4 + (-45*s12^3 - 72*s12^2*s13 +
                  9*s12*s13^2 + 36*s13^3)*s23 + (27*s12^2 + 9*s12*s13)*
                 s23^2 + (90*s12 + 36*s13)*s23^3 + 36*s23^4)))*
           Log((p1q + p2q)/(p1q + p2q + p3q)))/(2*p1q*p3q^5*s12^4*s23 +
           p1q*p2q^5*(-2*s12*s13^3*s23 - 2*s12*s13^2*s23^2) +
           p1q^2*p2q^4*(-4*s12*s13^3*s23 + 4*s12*s13*s23^3) +
           p1q^4*p2q^2*(4*s12*s13^2*s23^2 - 4*s12*s23^4) +
           p1q^5*p2q*(-2*s12*s13*s23^3 - 2*s12*s23^4) +
           p1q^3*p2q^3*(-2*s12*s13^3*s23 + 6*s12*s13^2*s23^2 +
             6*s12*s13*s23^3 - 2*s12*s23^4) +
           p3q^4*(p1q^2*((2*s12^4 - 2*s12^3*s13)*s23 - 6*s12^3*s23^2) +
             p1q*p2q*((4*s12^4 - 6*s12^3*s13)*s23 - 2*s12^3*s23^2)) +
           p3q^3*(p1q*p2q^2*((2*s12^4 - 12*s12^3*s13 + 6*s12^2*s13^2)*s23 +
               (-4*s12^3 + 4*s12^2*s13)*s23^2) + p1q^2*p2q*
              ((2*s12^4 - 10*s12^3*s13 + 4*s12^2*s13^2)*s23 + (-14*s12^3 +
                 4*s12^2*s13)*s23^2 + 4*s12^2*s23^3) +
             p1q^3*(-2*s12^3*s13*s23 + (-6*s12^3 + 4*s12^2*s13)*s23^2 + 6*
                s12^2*s23^3)) + p3q*(p1q*p2q^4*((6*s12^2*s13^2 - 4*s12*s13^3)*
                s23 + (4*s12^2*s13 - 4*s12*s13^2)*s23^2) +
             p1q^2*p2q^3*((10*s12^2*s13^2 - 6*s12*s13^3)*s23 + (8*s12^2*s13 +
                 2*s12*s13^2)*s23^2 + (4*s12^2 + 8*s12*s13)*s23^3) +
             p1q^4*p2q*((4*s12^2*s13 + 4*s12*s13^2)*s23^2 + (6*s12^2 -
                 2*s12*s13)*s23^3 - 6*s12*s23^4) + p1q^3*p2q^2*
              ((4*s12^2*s13^2 - 2*s12*s13^3)*s23 + (8*s12^2*s13 +
                 10*s12*s13^2)*s23^2 + (10*s12^2 + 8*s12*s13)*s23^3 - 4*s12*
                s23^4) + p1q^5*(-2*s12*s13*s23^3 - 2*s12*s23^4)) +
           p3q^2*(p1q*p2q^3*((-6*s12^3*s13 + 12*s12^2*s13^2 - 2*s12*s13^3)*
                s23 + (-2*s12^3 + 8*s12^2*s13 - 2*s12*s13^2)*s23^2) +
             p1q^2*p2q^2*((-8*s12^3*s13 + 14*s12^2*s13^2 - 2*s12*s13^3)*s23 +
               (-8*s12^3 + 12*s12^2*s13 + 2*s12*s13^2)*s23^2 + (8*s12^2 +
                 4*s12*s13)*s23^3) + p1q^4*(4*s12^2*s13*s23^2 + (6*s12^2 -
                 2*s12*s13)*s23^3 - 2*s12*s23^4) + p1q^3*p2q*
              ((-2*s12^3*s13 + 4*s12^2*s13^2)*s23 + (-6*s12^3 + 12*s12^2*
                  s13 + 4*s12*s13^2)*s23^2 + (16*s12^2 + 2*s12*s13)*s23^3 - 2*
                s12*s23^4))) + ((p2q^5*(-18*s12*s13^3 - 18*s13^4 -
              18*s13^3*s23) + p3q^5*(-18*s12^3*s13 - 18*s12^2*s13^2 +
              (-18*s12^3 - 36*s12^2*s13)*s23 - 18*s12^2*s23^2) +
            p1q*p2q^4*(-18*s12*s13^3 - 18*s13^4 + (36*s12*s13^2 + 18*s13^3)*
               s23 + 36*s13^2*s23^2) + p1q^3*p2q^2*((-9*s12^2 - 45*s12*s13 -
                36*s13^2)*s23^2 + (-9*s12 - 36*s13)*s23^3) +
            p1q^2*p2q^3*((9*s12^2*s13 + 54*s12*s13^2 + 45*s13^3)*s23 +
              (-9*s12*s13 + 27*s13^2)*s23^2 - 18*s13*s23^3) +
            p1q^4*p2q*((9*s12 + 9*s13)*s23^3 + 9*s23^4) +
            p3q^4*(p2q*(-54*s12^3*s13 - 18*s12^2*s13^2 + 36*s12*s13^3 +
                (-36*s12^3 - 54*s12^2*s13 + 72*s12*s13^2)*s23 +
                (-36*s12^2 + 36*s12*s13)*s23^2) + p1q*(-18*s12^3*s13 -
                18*s12^2*s13^2 + (18*s12^2*s13 + 36*s12*s13^2)*s23 +
                (36*s12^2 + 72*s12*s13)*s23^2 + 36*s12*s23^3)) +
            p3q^2*(p2q^3*(-18*s12^3*s13 + 90*s12^2*s13^2 + 54*s12*s13^3 -
                54*s13^4 + (18*s12^2*s13 + 108*s12*s13^2 - 90*s13^3)*s23 +
                (36*s12*s13 - 36*s13^2)*s23^2) + p1q*p2q^2*(-18*s12^3*s13 +
                54*s12^2*s13^2 + 54*s12*s13^3 - 18*s13^4 +
                (18*s12^3 + 108*s12^2*s13 + 270*s12*s13^2 + 72*s13^3)*s23 +
                (54*s12^2 + 216*s12*s13 + 162*s13^2)*s23^2 +
                (36*s12 + 72*s13)*s23^3) + p1q^3*((-36*s12^2 - 81*s12*s13 -
                  45*s13^2)*s23^2 + (-72*s12 - 81*s13)*s23^3 - 36*s23^4) +
              p1q^2*p2q*((36*s12^3 + 135*s12^2*s13 + 162*s12*s13^2 +
                  63*s13^3)*s23 + (72*s12^2 + 135*s12*s13 + 63*s13^2)*s23^2 -
                36*s13*s23^3 - 36*s23^4)) + p3q^3*(p2q^2*(-54*s12^3*s13 +
                54*s12^2*s13^2 + 90*s12*s13^3 - 18*s13^4 +
                (-18*s12^3 + 162*s12*s13^2 - 36*s13^3)*s23 +
                (-18*s12^2 + 72*s12*s13 - 18*s13^2)*s23^2) +
              p1q*p2q*(-36*s12^3*s13 + 36*s12*s13^3 + (18*s12^3 + 108*s12^2*
                   s13 + 198*s12*s13^2 + 36*s13^3)*s23 + (90*s12^2 +
                  234*s12*s13 + 72*s13^2)*s23^2 + (72*s12 + 36*s13)*s23^3) +
              p1q^2*((27*s12^3 + 108*s12^2*s13 + 117*s12*s13^2 + 36*s13^3)*
                 s23 + (63*s12^2 + 135*s12*s13 + 54*s13^2)*s23^2 +
                18*s12*s23^3 - 18*s23^4)) + p3q*(p2q^4*(36*s12^2*s13^2 -
                18*s12*s13^3 - 54*s13^4 + (18*s12*s13^2 - 72*s13^3)*s23 -
                18*s13^2*s23^2) + p1q*p2q^3*(36*s12^2*s13^2 - 36*s13^4 +
                (18*s12^2*s13 + 144*s12*s13^2 + 54*s13^3)*s23 +
                (54*s12*s13 + 126*s13^2)*s23^2 + 36*s13*s23^3) +
              p1q^3*p2q*((-27*s12^2 - 90*s12*s13 - 63*s13^2)*s23^2 +
                (-45*s12 - 81*s13)*s23^3 - 18*s23^4) + p1q^2*p2q^2*(
                (27*s12^3 + 90*s12^2*s13 + 153*s12*s13^2 + 90*s13^3)*s23 +
                (45*s12^2 + 63*s12*s13 + 72*s13^2)*s23^2 - 36*s13*s23^3 -
                18*s23^4) + p1q^4*((9*s12 + 9*s13)*s23^3 + 9*s23^4)))*
           Log(p3q/(p1q + p2q + p3q)))/(2*p1q*p3q^4*s12^2*s13*s23^2 +
           2*p1q*p2q^4*s13^3*s23^2 + 2*p1q^4*p2q*s13*s23^4 +
           p1q^2*p2q^3*(2*s13^3*s23^2 - 4*s13^2*s23^3) +
           p1q^3*p2q^2*(-4*s13^2*s23^3 + 2*s13*s23^4) +
           p3q^3*(p1q*p2q*(4*s12^2*s13 - 4*s12*s13^2)*s23^2 +
             p1q^2*(2*s12^2*s13*s23^2 - 4*s12*s13*s23^3)) +
           p3q^2*(p1q*p2q^2*(2*s12^2*s13 - 8*s12*s13^2 + 2*s13^3)*s23^2 +
             p1q^2*p2q*((2*s12^2*s13 - 4*s12*s13^2)*s23^2 + (-8*s12*s13 -
                 4*s13^2)*s23^3) + p1q^3*(-4*s12*s13*s23^3 + 2*s13*s23^4)) +
           p3q*(p1q*p2q^3*(-4*s12*s13^2 + 4*s13^3)*s23^2 +
             2*p1q^4*s13*s23^4 + p1q^2*p2q^2*((-4*s12*s13^2 + 2*s13^3)*
                s23^2 + (-4*s12*s13 - 8*s13^2)*s23^3) + p1q^3*p2q*
              ((-4*s12*s13 - 4*s13^2)*s23^3 + 4*s13*s23^4))) +
         ((p3q^6*(-18*s12^4 - 36*s12^3*s13 - 18*s12^2*s13^2 +
              (-36*s12^3 - 36*s12^2*s13)*s23 - 18*s12^2*s23^2) +
            p1q^2*p2q^4*(-18*s12^2*s13^2 - 36*s12*s13^3 - 18*s13^4 +
              (-27*s12*s13^2 - 27*s13^3)*s23 - 9*s13^2*s23^2) +
            p1q^3*p2q^3*(18*s12^3*s13 + 36*s12^2*s13^2 + 18*s12*s13^3 +
              (45*s12^2*s13 + 81*s12*s13^2 + 36*s13^3)*s23 + (45*s12*s13 +
                54*s13^2)*s23^2 + 18*s13*s23^3) + p1q^4*p2q^2*
             ((-18*s12^2*s13 - 18*s12*s13^2)*s23 + (-9*s12^2 - 45*s12*s13 -
                18*s13^2)*s23^2 + (-18*s12 - 27*s13)*s23^3 - 9*s23^4) +
            p3q^5*(p2q*(-36*s12^4 - 36*s12^3*s13 + 36*s12^2*s13^2 +
                36*s12*s13^3 + (-72*s12^3 + 72*s12*s13^2)*s23 +
                (-36*s12^2 + 36*s12*s13)*s23^2) + p1q*(-18*s12^4 -
                36*s12^3*s13 - 18*s12^2*s13^2 + (36*s12^2*s13 + 36*s12*s13^2)*
                 s23 + (54*s12^2 + 72*s12*s13)*s23^2 + 36*s12*s23^3)) +
            p3q^4*(p2q^2*(-18*s12^4 + 36*s12^3*s13 + 108*s12^2*s13^2 +
                36*s12*s13^3 - 18*s13^4 + (-36*s12^3 + 108*s12^2*s13 +
                  108*s12*s13^2 - 36*s13^3)*s23 + (-18*s12^2 + 72*s12*s13 -
                  18*s13^2)*s23^2) + p1q*p2q*(-54*s12^4 - 72*s12^3*s13 +
                18*s12^2*s13^2 + 36*s12*s13^3 + (-36*s12^3 + 126*s12^2*s13 +
                  198*s12*s13^2 + 36*s13^3)*s23 + (90*s12^2 + 234*s12*s13 +
                  72*s13^2)*s23^2 + (72*s12 + 36*s13)*s23^3) +
              p1q^2*(-18*s12^3*s13 - 36*s12^2*s13^2 - 18*s12*s13^3 +
                (-45*s12^2*s13 - 81*s12*s13^2 - 36*s13^3)*s23 +
                (-18*s12^2 - 99*s12*s13 - 90*s13^2)*s23^2 +
                (-36*s12 - 72*s13)*s23^3 - 18*s23^4)) +
            p3q^3*(p2q^3*(36*s12^3*s13 + 36*s12^2*s13^2 - 36*s12*s13^3 -
                36*s13^4 + (72*s12^2*s13 - 72*s13^3)*s23 + (36*s12*s13 -
                  36*s13^2)*s23^2) + p1q*p2q^2*(-36*s12^4 + 36*s12^3*s13 +
                162*s12^2*s13^2 + 72*s12*s13^3 - 18*s13^4 +
                (-36*s12^3 + 252*s12^2*s13 + 342*s12*s13^2 + 54*s13^3)*s23 +
                (36*s12^2 + 288*s12*s13 + 144*s13^2)*s23^2 +
                (36*s12 + 72*s13)*s23^3) + p1q^2*p2q*(-36*s12^4 -
                90*s12^3*s13 - 54*s12^2*s13^2 + 18*s12*s13^3 + 18*s13^4 +
                (-36*s12^3 - 9*s12^2*s13 + 72*s12*s13^2 + 45*s13^3)*s23 +
                (-9*s12*s13 - 27*s13^2)*s23^2 + (-36*s12 - 90*s13)*s23^3 -
                36*s23^4) + p1q^3*(-18*s12^3*s13 - 36*s12^2*s13^2 -
                18*s12*s13^3 + (-54*s12^3 - 153*s12^2*s13 - 153*s12*s13^2 -
                  54*s13^3)*s23 + (-90*s12^2 - 162*s12*s13 - 99*s13^2)*
                 s23^2 + (-18*s12 - 27*s13)*s23^3 + 18*s23^4)) +
            p3q*(p1q*p2q^4*(-36*s12^2*s13^2 - 72*s12*s13^3 - 36*s13^4 +
                (-54*s12*s13^2 - 54*s13^3)*s23 - 18*s13^2*s23^2) +
              p1q^2*p2q^3*(54*s12^3*s13 + 90*s12^2*s13^2 + 18*s12*s13^3 -
                18*s13^4 + (153*s12^2*s13 + 216*s12*s13^2 + 63*s13^3)*s23 +
                (135*s12*s13 + 117*s13^2)*s23^2 + 36*s13*s23^3) +
              p1q^3*p2q^2*(-18*s12^4 - 18*s12^3*s13 + 36*s12^2*s13^2 +
                54*s12*s13^3 + 18*s13^4 + (-45*s12^3 - 36*s12^2*s13 +
                  72*s12*s13^2 + 63*s13^3)*s23 + (-54*s12^2 - 90*s12*s13 -
                  9*s13^2)*s23^2 + (-45*s12 - 72*s13)*s23^3 - 18*s23^4) +
              p1q^4*p2q*((-36*s12^2*s13 - 72*s12*s13^2 - 36*s13^3)*s23 +
                (9*s12^2 - 72*s12*s13 - 81*s13^2)*s23^2 + (18*s12 - 36*s13)*
                 s23^3 + 9*s23^4) + p1q^5*((18*s12^2 + 36*s12*s13 + 18*s13^2)*
                 s23^2 + (36*s12 + 36*s13)*s23^3 + 18*s23^4)) +
            p3q^2*(p2q^4*(-18*s12^2*s13^2 - 36*s12*s13^3 - 18*s13^4 +
                (-36*s12*s13^2 - 36*s13^3)*s23 - 18*s13^2*s23^2) +
              p1q*p2q^3*(72*s12^3*s13 + 90*s12^2*s13^2 - 36*s12*s13^3 -
                54*s13^4 + (162*s12^2*s13 + 126*s12*s13^2 - 36*s13^3)*s23 +
                (126*s12*s13 + 54*s13^2)*s23^2 + 36*s13*s23^3) +
              p1q^2*p2q^2*(-36*s12^4 - 18*s12^3*s13 + 90*s12^2*s13^2 +
                90*s12*s13^3 + 18*s13^4 + (-54*s12^3 + 135*s12^2*s13 +
                  342*s12*s13^2 + 153*s13^3)*s23 + (-18*s12^2 + 153*s12*s13 +
                  153*s13^2)*s23^2 - 18*s12*s23^3 - 18*s23^4) +
              p1q^3*p2q*(-18*s12^4 - 54*s12^3*s13 - 36*s12^2*s13^2 +
                18*s12*s13^3 + 18*s13^4 + (-63*s12^3 - 162*s12^2*s13 -
                  126*s12*s13^2 - 27*s13^3)*s23 + (-90*s12^2 - 261*s12*s13 -
                  180*s13^2)*s23^2 + (-63*s12 - 153*s13)*s23^3 - 18*s23^4) +
              p1q^4*((-18*s12^3 - 36*s12^2*s13 - 36*s12*s13^2 - 18*s13^3)*
                 s23 + (18*s12^2 + 45*s12*s13 + 9*s13^2)*s23^2 +
                (90*s12 + 81*s13)*s23^3 + 54*s23^4)))*
           Log((p1q + p3q)/(p1q + p2q + p3q)))/(-2*p1q*p2q^5*s13^4*s23 +
           p1q*p3q^5*(2*s12^3*s13*s23 + 2*s12^2*s13*s23^2) +
           p1q^2*p2q^4*((2*s12*s13^3 - 2*s13^4)*s23 + 6*s13^3*s23^2) +
           p1q^3*p2q^3*(2*s12*s13^3*s23 + (-4*s12*s13^2 + 6*s13^3)*s23^2 -
             6*s13^2*s23^3) + p1q^5*p2q*(2*s12*s13*s23^3 + 2*s13*s23^4) +
           p1q^4*p2q^2*(-4*s12*s13^2*s23^2 + (2*s12*s13 - 6*s13^2)*s23^3 +
             2*s13*s23^4) + p3q^4*(p1q*p2q*((4*s12^3*s13 - 6*s12^2*s13^2)*
                s23 + (4*s12^2*s13 - 4*s12*s13^2)*s23^2) +
             p1q^2*(4*s12^3*s13*s23 - 4*s12*s13*s23^3)) +
           p3q^3*(p1q*p2q^2*((2*s12^3*s13 - 12*s12^2*s13^2 + 6*s12*s13^3)*
                s23 + (2*s12^2*s13 - 8*s12*s13^2 + 2*s13^3)*s23^2) +
             p1q^2*p2q*((6*s12^3*s13 - 10*s12^2*s13^2)*s23 + (-2*s12^2*s13 -
                 8*s12*s13^2)*s23^2 + (-8*s12*s13 - 4*s13^2)*s23^3) +
             p1q^3*(2*s12^3*s13*s23 - 6*s12^2*s13*s23^2 - 6*s12*s13*s23^3 + 2*
                s13*s23^4)) + p3q^2*(p1q*p2q^3*((-6*s12^2*s13^2 +
                 12*s12*s13^3 - 2*s13^4)*s23 + (-4*s12*s13^2 + 4*s13^3)*
                s23^2) + p1q^2*p2q^2*((2*s12^3*s13 - 14*s12^2*s13^2 +
                 8*s12*s13^3)*s23 + (-2*s12^2*s13 - 12*s12*s13^2 + 8*s13^3)*
                s23^2 + (-4*s12*s13 - 8*s13^2)*s23^3) +
             p1q^4*(-4*s12^2*s13*s23^2 + 4*s13*s23^4) + p1q^3*p2q*
              ((2*s12^3*s13 - 4*s12^2*s13^2)*s23 + (-10*s12^2*s13 -
                 8*s12*s13^2)*s23^2 + (-8*s12*s13 - 10*s13^2)*s23^3 + 4*s13*
                s23^4)) + p3q*(p1q*p2q^4*((6*s12*s13^3 - 4*s13^4)*s23 + 2*
                s13^3*s23^2) + p1q^2*p2q^3*((-4*s12^2*s13^2 + 10*s12*s13^3 -
                 2*s13^4)*s23 + (-4*s12*s13^2 + 14*s13^3)*s23^2 - 4*s13^2*
                s23^3) + p1q^5*(2*s12*s13*s23^3 + 2*s13*s23^4) +
             p1q^3*p2q^2*((-4*s12^2*s13^2 + 2*s12*s13^3)*s23 +
               (-4*s12^2*s13 - 12*s12*s13^2 + 6*s13^3)*s23^2 + (-2*s12*s13 -
                 16*s13^2)*s23^3 + 2*s13*s23^4) + p1q^4*p2q*
              ((-4*s12^2*s13 - 4*s12*s13^2)*s23^2 + (2*s12*s13 - 6*s13^2)*
                s23^3 + 6*s13*s23^4))) +
         ((p3q^6*(-72*s12^5*s13 - 144*s12^4*s13^2 - 72*s12^3*s13^3 +
              (-18*s12^5 - 144*s12^4*s13 - 126*s12^3*s13^2)*s23 +
              (-18*s12^4 - 54*s12^3*s13)*s23^2) + p2q^6*(-72*s12^3*s13^3 -
              144*s12^2*s13^4 - 72*s12*s13^5 + (-126*s12^2*s13^3 -
                144*s12*s13^4 - 18*s13^5)*s23 + (-54*s12*s13^3 - 18*s13^4)*
               s23^2) + p1q*p2q^5*(-72*s12^3*s13^3 - 144*s12^2*s13^4 -
              72*s12*s13^5 + (162*s12^3*s13^2 + 252*s12^2*s13^3 +
                90*s12*s13^4)*s23 + (288*s12^2*s13^2 + 342*s12*s13^3 +
                54*s13^4)*s23^2 + (126*s12*s13^2 + 54*s13^3)*s23^3) +
            p1q^2*p2q^4*((-18*s12^4*s13 + 126*s12^3*s13^2 + 378*s12^2*s13^3 +
                270*s12*s13^4 + 36*s13^5)*s23 + (-126*s12^3*s13 -
                36*s12^2*s13^2 + 180*s12*s13^3 + 54*s13^4)*s23^2 +
              (-198*s12^2*s13 - 216*s12*s13^2 - 36*s13^3)*s23^3 +
              (-90*s12*s13 - 54*s13^2)*s23^4) + p1q^5*p2q*
             ((9*s12^2 - 18*s12*s13 - 27*s13^2)*s23^4 + (9*s12 - 27*s13)*s23^
                5) + p1q^3*p2q^3*((-81*s12^3*s13 - 315*s12^2*s13^2 -
                333*s12*s13^3 - 99*s13^4)*s23^2 + (18*s12^3 - 99*s12^2*s13 -
                306*s12*s13^2 - 135*s13^3)*s23^3 + (36*s12^2 - 18*s13^2)*s23^
                4 + (18*s12 + 18*s13)*s23^5) + p1q^4*p2q^2*
             ((9*s12^3 + 72*s12^2*s13 + 153*s12*s13^2 + 90*s13^3)*s23^3 +
              (27*s12^2 + 99*s12*s13 + 108*s13^2)*s23^4 + (18*s12 + 18*s13)*
               s23^5) + p3q^5*(p2q*(-288*s12^5*s13 - 432*s12^4*s13^2 +
                144*s12^2*s13^4 + (-54*s12^5 - 522*s12^4*s13 - 234*s12^3*
                   s13^2 + 234*s12^2*s13^3)*s23 + (-54*s12^4 - 180*s12^3*
                   s13 + 90*s12^2*s13^2)*s23^2) + p1q*(-72*s12^5*s13 -
                144*s12^4*s13^2 - 72*s12^3*s13^3 + (90*s12^4*s13 +
                  252*s12^3*s13^2 + 162*s12^2*s13^3)*s23 +
                (54*s12^4 + 342*s12^3*s13 + 288*s12^2*s13^2)*s23^2 +
                (54*s12^3 + 126*s12^2*s13)*s23^3)) +
            p3q^4*(p2q^2*(-432*s12^5*s13 - 288*s12^4*s13^2 + 648*s12^3*
                 s13^3 + 432*s12^2*s13^4 - 72*s12*s13^5 + (-54*s12^5 -
                  702*s12^4*s13 + 288*s12^3*s13^2 + 846*s12^2*s13^3 -
                  90*s12*s13^4)*s23 + (-54*s12^4 - 216*s12^3*s13 +
                  360*s12^2*s13^2 - 18*s12*s13^3)*s23^2) +
              p1q*p2q*(-216*s12^5*s13 - 288*s12^4*s13^2 + 72*s12^3*s13^3 +
                144*s12^2*s13^4 + (18*s12^5 + 432*s12^4*s13 + 1278*s12^3*
                   s13^2 + 972*s12^2*s13^3 + 108*s12*s13^4)*s23 +
                (180*s12^4 + 1278*s12^3*s13 + 1314*s12^2*s13^2 + 216*s12*
                   s13^3)*s23^2 + (162*s12^3 + 486*s12^2*s13 + 108*s12*s13^2)*
                 s23^3) + p1q^2*((36*s12^5 + 270*s12^4*s13 + 378*s12^3*
                   s13^2 + 126*s12^2*s13^3 - 18*s12*s13^4)*s23 +
                (54*s12^4 + 180*s12^3*s13 - 36*s12^2*s13^2 - 126*s12*s13^3)*
                 s23^2 + (-36*s12^3 - 216*s12^2*s13 - 198*s12*s13^2)*s23^3 +
                (-54*s12^2 - 90*s12*s13)*s23^4)) +
            p3q^3*(p2q^3*(-288*s12^5*s13 + 288*s12^4*s13^2 + 1152*s12^3*
                 s13^3 + 288*s12^2*s13^4 - 288*s12*s13^5 +
                (-18*s12^5 - 414*s12^4*s13 + 1008*s12^3*s13^2 + 1008*s12^2*
                   s13^3 - 414*s12*s13^4 - 18*s13^5)*s23 +
                (-18*s12^4 - 108*s12^3*s13 + 540*s12^2*s13^2 - 108*s12*
                   s13^3 - 18*s13^4)*s23^2) + p1q*p2q^2*(-216*s12^5*s13 +
                576*s12^3*s13^3 + 288*s12^2*s13^4 - 72*s12*s13^5 +
                (36*s12^5 + 702*s12^4*s13 + 2448*s12^3*s13^2 + 2232*s12^2*
                   s13^3 + 468*s12*s13^4 + 18*s13^5)*s23 +
                (198*s12^4 + 1746*s12^3*s13 + 2502*s12^2*s13^2 + 1026*s12*
                   s13^3 + 72*s13^4)*s23^2 + (162*s12^3 + 702*s12^2*s13 +
                  450*s12*s13^2 + 54*s13^3)*s23^3) + p1q^2*p2q*(
                (54*s12^5 + 594*s12^4*s13 + 972*s12^3*s13^2 + 540*s12^2*
                   s13^3 + 126*s12*s13^4 + 18*s13^5)*s23 +
                (90*s12^4 + 234*s12^3*s13 - 324*s12^2*s13^2 - 306*s12*s13^3 +
                  18*s13^4)*s23^2 + (-126*s12^3 - 864*s12^2*s13 -
                  828*s12*s13^2 - 54*s13^3)*s23^3 + (-162*s12^2 -
                  360*s12*s13 - 54*s13^2)*s23^4) + p1q^3*((-99*s12^4 -
                  333*s12^3*s13 - 315*s12^2*s13^2 - 81*s12*s13^3)*s23^2 +
                (-135*s12^3 - 306*s12^2*s13 - 99*s12*s13^2 + 18*s13^3)*
                 s23^3 + (-18*s12^2 + 36*s13^2)*s23^4 + (18*s12 + 18*s13)*
                 s23^5)) + p3q*(p2q^5*(144*s12^4*s13^2 - 432*s12^2*s13^4 -
                288*s12*s13^5 + (234*s12^3*s13^2 - 234*s12^2*s13^3 -
                  522*s12*s13^4 - 54*s13^5)*s23 + (90*s12^2*s13^2 -
                  180*s12*s13^3 - 54*s13^4)*s23^2) + p1q*p2q^4*(144*s12^4*
                 s13^2 + 72*s12^3*s13^3 - 288*s12^2*s13^4 - 216*s12*s13^5 +
                (108*s12^4*s13 + 972*s12^3*s13^2 + 1278*s12^2*s13^3 +
                  432*s12*s13^4 + 18*s13^5)*s23 + (216*s12^3*s13 +
                  1314*s12^2*s13^2 + 1278*s12*s13^3 + 180*s13^4)*s23^2 +
                (108*s12^2*s13 + 486*s12*s13^2 + 162*s13^3)*s23^3) +
              p1q^2*p2q^3*((18*s12^5 + 126*s12^4*s13 + 540*s12^3*s13^2 +
                  972*s12^2*s13^3 + 594*s12*s13^4 + 54*s13^5)*s23 +
                (18*s12^4 - 306*s12^3*s13 - 324*s12^2*s13^2 + 234*s12*s13^3 +
                  90*s13^4)*s23^2 + (-54*s12^3 - 828*s12^2*s13 - 864*s12*
                   s13^2 - 126*s13^3)*s23^3 + (-54*s12^2 - 360*s12*s13 -
                  162*s13^2)*s23^4) + p1q^5*((-27*s12^2 - 18*s12*s13 +
                  9*s13^2)*s23^4 + (-27*s12 + 9*s13)*s23^5) +
              p1q^4*p2q*((9*s12^3 + 243*s12^2*s13 + 243*s12*s13^2 + 9*s13^3)*
                 s23^3 + (27*s12^2 + 270*s12*s13 + 27*s13^2)*s23^4 +
                (18*s12 + 18*s13)*s23^5) + p1q^3*p2q^2*((-27*s12^4 -
                  441*s12^3*s13 - 927*s12^2*s13^2 - 585*s12*s13^3 - 72*s13^4)*
                 s23^2 + (-63*s12^3 - 432*s12^2*s13 - 567*s12*s13^2 -
                  144*s13^3)*s23^3 + (18*s12^2 + 126*s12*s13 - 18*s13^2)*
                 s23^4 + (54*s12 + 54*s13)*s23^5)) +
            p3q^2*(p2q^4*(-72*s12^5*s13 + 432*s12^4*s13^2 + 648*s12^3*s13^3 -
                288*s12^2*s13^4 - 432*s12*s13^5 + (-90*s12^4*s13 +
                  846*s12^3*s13^2 + 288*s12^2*s13^3 - 702*s12*s13^4 -
                  54*s13^5)*s23 + (-18*s12^3*s13 + 360*s12^2*s13^2 -
                  216*s12*s13^3 - 54*s13^4)*s23^2) + p1q*p2q^3*(-72*s12^5*
                 s13 + 288*s12^4*s13^2 + 576*s12^3*s13^3 - 216*s12*s13^5 +
                (18*s12^5 + 468*s12^4*s13 + 2232*s12^3*s13^2 + 2448*s12^2*
                   s13^3 + 702*s12*s13^4 + 36*s13^5)*s23 +
                (72*s12^4 + 1026*s12^3*s13 + 2502*s12^2*s13^2 + 1746*s12*
                   s13^3 + 198*s13^4)*s23^2 + (54*s12^3 + 450*s12^2*s13 +
                  702*s12*s13^2 + 162*s13^3)*s23^3) + p1q^2*p2q^2*(
                (36*s12^5 + 468*s12^4*s13 + 1008*s12^3*s13^2 + 1008*s12^2*
                   s13^3 + 468*s12*s13^4 + 36*s13^5)*s23 +
                (54*s12^4 - 126*s12^3*s13 - 576*s12^2*s13^2 - 126*s12*s13^3 +
                  54*s13^4)*s23^2 + (-144*s12^3 - 1278*s12^2*s13 -
                  1278*s12*s13^2 - 144*s13^3)*s23^3 + (-162*s12^2 -
                  540*s12*s13 - 162*s13^2)*s23^4) + p1q^4*(
                (90*s12^3 + 153*s12^2*s13 + 72*s12*s13^2 + 9*s13^3)*s23^3 +
                (108*s12^2 + 99*s12*s13 + 27*s13^2)*s23^4 + (18*s12 + 18*s13)*
                 s23^5) + p1q^3*p2q*((-72*s12^4 - 585*s12^3*s13 - 927*s12^2*
                   s13^2 - 441*s12*s13^3 - 27*s13^4)*s23^2 +
                (-144*s12^3 - 567*s12^2*s13 - 432*s12*s13^2 - 63*s13^3)*
                 s23^3 + (-18*s12^2 + 126*s12*s13 + 18*s13^2)*s23^4 +
                (54*s12 + 54*s13)*s23^5)))*Log((p2q + p3q)/(p1q + p2q +
              p3q)))/(p1q*p3q^5*(2*s12^4*s13 + 2*s12^3*s13^2)*s23^2 +
           p1q*p2q^5*(2*s12^2*s13^3 + 2*s12*s13^4)*s23^2 -
           2*p1q^5*p2q*s12*s13*s23^5 + p1q^2*p2q^4*
            ((2*s12^2*s13^3 + 2*s12*s13^4)*s23^2 + (-4*s12^2*s13^2 - 6*s12*
                s13^3)*s23^3) + p1q^3*p2q^3*((-4*s12^2*s13^2 - 6*s12*s13^3)*
              s23^3 + (2*s12^2*s13 + 6*s12*s13^2)*s23^4) +
           p1q^4*p2q^2*((2*s12^2*s13 + 6*s12*s13^2)*s23^4 -
             2*s12*s13*s23^5) + p3q^4*(p1q*p2q*(6*s12^4*s13 + 2*s12^3*s13^2 -
               4*s12^2*s13^3)*s23^2 + p1q^2*((2*s12^4*s13 + 2*s12^3*s13^2)*
                s23^2 + (-6*s12^3*s13 - 4*s12^2*s13^2)*s23^3)) +
           p3q^3*(p1q*p2q^2*(6*s12^4*s13 - 6*s12^3*s13^2 - 10*s12^2*s13^3 + 2*
                s12*s13^4)*s23^2 + p1q^2*p2q*((4*s12^4*s13 - 4*s12^2*s13^3)*
                s23^2 + (-16*s12^3*s13 - 12*s12^2*s13^2 - 4*s12*s13^3)*
                s23^3) + p1q^3*((-6*s12^3*s13 - 4*s12^2*s13^2)*s23^3 +
               (6*s12^2*s13 + 2*s12*s13^2)*s23^4)) +
           p3q*(p1q*p2q^4*(-4*s12^3*s13^2 + 2*s12^2*s13^3 + 6*s12*s13^4)*
              s23^2 - 2*p1q^5*s12*s13*s23^5 + p1q^2*p2q^3*
              ((-4*s12^3*s13^2 + 4*s12*s13^4)*s23^2 + (-4*s12^3*s13 -
                 12*s12^2*s13^2 - 16*s12*s13^3)*s23^3) + p1q^3*p2q^2*
              ((-4*s12^3*s13 - 8*s12^2*s13^2 - 10*s12*s13^3)*s23^3 +
               (10*s12^2*s13 + 14*s12*s13^2)*s23^4) + p1q^4*p2q*
              ((8*s12^2*s13 + 8*s12*s13^2)*s23^4 - 4*s12*s13*s23^5)) +
           p3q^2*(p1q*p2q^3*(2*s12^4*s13 - 10*s12^3*s13^2 - 6*s12^2*s13^3 + 6*
                s12*s13^4)*s23^2 + p1q^2*p2q^2*((2*s12^4*s13 - 6*s12^3*
                  s13^2 - 6*s12^2*s13^3 + 2*s12*s13^4)*s23^2 +
               (-14*s12^3*s13 - 16*s12^2*s13^2 - 14*s12*s13^3)*s23^3) +
             p1q^3*p2q*((-10*s12^3*s13 - 8*s12^2*s13^2 - 4*s12*s13^3)*s23^3 +
               (14*s12^2*s13 + 10*s12*s13^2)*s23^4) +
             p1q^4*((6*s12^2*s13 + 2*s12*s13^2)*s23^4 - 2*s12*s13*s23^5))) +
         ((p3q^2*(36*s12^2*s13 + 36*s12*s13^2 + (18*s12^2 + 54*s12*s13)*s23 +
              18*s12*s23^2) + p1q*p2q*((-18*s12*s13 - 18*s13^2)*s23 -
              18*s13*s23^2) + p2q^2*(36*s12^2*s13 + 36*s12*s13^2 +
              (54*s12*s13 + 18*s13^2)*s23 + 18*s13*s23^2) +
            p3q*(p1q*((-18*s12^2 - 18*s12*s13)*s23 - 18*s12*s23^2) +
              p2q*(72*s12^2*s13 + 72*s12*s13^2 + (18*s12^2 + 108*s12*s13 +
                  18*s13^2)*s23 + (18*s12 + 18*s13)*s23^2)))*
           Log(-s12 - s13 - s23))/(p1q*p2q*s12*s13*s23^2 +
           p1q*p3q*s12*s13*s23^2) +
         ((p3q^6*(18*s12^5 + 18*s12^4*s13 + 18*s12^4*s23) +
            p2q^6*(-18*s12^2*s13^3 - 18*s12*s13^4 + (-36*s12^2*s13^2 -
                90*s12*s13^3 - 36*s13^4)*s23 + (-72*s12*s13^2 - 72*s13^3)*s23^
                2 - 36*s13^2*s23^3) + p1q*p2q^5*(-36*s12^2*s13^3 -
              36*s12*s13^4 + (-18*s12^2*s13^2 - 90*s12*s13^3 - 36*s13^4)*
               s23 + (72*s12^2*s13 + 90*s12*s13^2)*s23^2 + (144*s12*s13 +
                108*s13^2)*s23^3 + 72*s13*s23^4) + p1q^2*p2q^4*
             (-18*s12^2*s13^3 - 18*s12*s13^4 + (18*s12^3*s13 + 99*s12^2*
                 s13^2 + 90*s12*s13^3 + 27*s13^4)*s23 + (126*s12^2*s13 +
                288*s12*s13^2 + 126*s13^3)*s23^2 + (-36*s12^2 + 108*s12*s13 +
                135*s13^2)*s23^3 - 72*s12*s23^4 - 36*s23^5) +
            p1q^3*p2q^3*((18*s12^3*s13 + 81*s12^2*s13^2 + 90*s12*s13^3 +
                27*s13^4)*s23 + (-18*s12^3 - 27*s12^2*s13 + 9*s12*s13^2)*s23^
                2 + (-90*s12^2 - 189*s12*s13 - 117*s13^2)*s23^3 +
              (-108*s12 - 126*s13)*s23^4 - 36*s23^5) + p1q^4*p2q^2*
             ((-18*s12^3 - 81*s12^2*s13 - 117*s12*s13^2 - 54*s13^3)*s23^2 +
              (-36*s12^2 - 108*s12*s13 - 81*s13^2)*s23^3 + 9*s12*s23^4 +
              27*s23^5) + p1q^5*p2q*((18*s12^2 + 45*s12*s13 + 27*s13^2)*s23^
                3 + (45*s12 + 54*s13)*s23^4 + 27*s23^5) +
            p3q^5*(p2q*(54*s12^5 - 54*s12^3*s13^2 + (54*s12^4 - 54*s12^3*s13)*
                 s23) + p1q*(18*s12^5 - 18*s12^3*s13^2 + (-36*s12^4 -
                  72*s12^3*s13)*s23 - 54*s12^3*s23^2)) +
            p3q^4*(p2q^2*(54*s12^5 - 108*s12^4*s13 - 108*s12^3*s13^2 +
                54*s12^2*s13^3 + (18*s12^4 - 234*s12^3*s13 + 18*s12^2*s13^2)*
                 s23 + (-72*s12^3 - 72*s12^2*s13)*s23^2 - 36*s12^2*s23^3) +
              p1q*p2q*(36*s12^5 - 72*s12^4*s13 - 72*s12^3*s13^2 +
                36*s12^2*s13^3 + (-162*s12^4 - 306*s12^3*s13 + 36*s12^2*
                   s13^2)*s23 + (-234*s12^3 - 36*s12^2*s13)*s23^2 -
                36*s12^2*s23^3) + p1q^2*(-18*s12^4*s13 - 18*s12^3*s13^2 +
                (-81*s12^4 - 90*s12^3*s13 + 9*s12^2*s13^2)*s23 +
                (-36*s12^3 + 54*s12^2*s13)*s23^2 + 45*s12^2*s23^3)) +
            p3q^3*(p1q^3*((63*s12^3*s13 + 90*s12^2*s13^2 + 27*s12*s13^3)*
                 s23 + (117*s12^3 + 207*s12^2*s13 + 54*s12*s13^2)*s23^2 +
                (117*s12^2 + 27*s12*s13)*s23^3) + p2q^3*(18*s12^5 -
                144*s12^4*s13 + 144*s12^2*s13^3 - 18*s12*s13^4 +
                (-54*s12^4 - 234*s12^3*s13 + 234*s12^2*s13^2 + 54*s12*s13^3)*
                 s23 + (-144*s12^3 + 144*s12*s13^2)*s23^2 +
                (-72*s12^2 + 72*s12*s13)*s23^3) + p1q^2*p2q*(-36*s12^4*s13 +
                36*s12^2*s13^3 + (-144*s12^4 - 36*s12^3*s13 + 234*s12^2*
                   s13^2 + 54*s12*s13^3)*s23 + (90*s12^3 + 504*s12^2*s13 +
                  180*s12*s13^2)*s23^2 + (306*s12^2 + 198*s12*s13)*s23^3 +
                72*s12*s23^4) + p1q*p2q^2*(18*s12^5 - 144*s12^4*s13 +
                144*s12^2*s13^3 - 18*s12*s13^4 + (-216*s12^4 - 288*s12^3*
                   s13 + 360*s12^2*s13^2 + 72*s12*s13^3)*s23 +
                (-234*s12^3 + 252*s12^2*s13 + 234*s12*s13^2)*s23^2 +
                (72*s12^2 + 216*s12*s13)*s23^3 + 72*s12*s23^4)) +
            p3q^2*(p2q^4*(-54*s12^4*s13 + 108*s12^3*s13^2 + 108*s12^2*s13^3 -
                54*s12*s13^4 + (-36*s12^4 + 18*s12^3*s13 + 378*s12^2*s13^2 +
                  18*s12*s13^3 - 36*s13^4)*s23 + (-72*s12^3 + 216*s12^2*s13 +
                  216*s12*s13^2 - 72*s13^3)*s23^2 + (-36*s12^2 + 144*s12*
                   s13 - 36*s13^2)*s23^3) + p1q*p2q^3*(-72*s12^4*s13 +
                144*s12^3*s13^2 + 144*s12^2*s13^3 - 72*s12*s13^4 +
                (-90*s12^4 + 54*s12^3*s13 + 594*s12^2*s13^2 + 54*s12*s13^3 -
                  36*s13^4)*s23 + (18*s12^3 + 684*s12^2*s13 + 558*s12*s13^2)*
                 s23^2 + (252*s12^2 + 576*s12*s13 + 108*s13^2)*s23^3 +
                (144*s12 + 72*s13)*s23^4) + p1q^2*p2q^2*(-18*s12^4*s13 +
                54*s12^3*s13^2 + 54*s12^2*s13^3 - 18*s12*s13^4 +
                (-63*s12^4 + 144*s12^3*s13 + 432*s12^2*s13^2 + 126*s12*
                   s13^3 + 9*s13^4)*s23 + (252*s12^3 + 864*s12^2*s13 +
                  540*s12*s13^2 + 90*s13^3)*s23^2 + (423*s12^2 + 468*s12*
                   s13 + 117*s13^2)*s23^3 + 72*s12*s23^4 - 36*s23^5) +
              p1q^3*p2q*((18*s12^4 + 144*s12^3*s13 + 189*s12^2*s13^2 +
                  72*s12*s13^3 + 9*s13^4)*s23 + (216*s12^3 + 351*s12^2*s13 +
                  99*s12*s13^2 + 18*s13^3)*s23^2 + (108*s12^2 - 99*s12*s13 -
                  27*s13^2)*s23^3 + (-126*s12 - 72*s13)*s23^4 - 36*s23^5) +
              p1q^4*((-54*s12^2*s13 - 63*s12*s13^2 - 9*s13^3)*s23^2 +
                (-63*s12^2 - 135*s12*s13 - 27*s13^2)*s23^3 +
                (-72*s12 - 27*s13)*s23^4 - 9*s23^5)) +
            p3q*(p2q^5*(54*s12^3*s13^2 - 54*s12*s13^4 + (72*s12^3*s13 +
                  126*s12^2*s13^2 - 126*s12*s13^3 - 72*s13^4)*s23 +
                (144*s12^2*s13 - 144*s13^3)*s23^2 + (72*s12*s13 - 72*s13^2)*
                 s23^3) + p1q^4*p2q*((-36*s12^3 - 135*s12^2*s13 -
                  126*s12*s13^2 - 27*s13^3)*s23^2 + (-153*s12^2 -
                  243*s12*s13 - 54*s13^2)*s23^3 + (-117*s12 - 27*s13)*
                 s23^4) + p1q*p2q^4*(90*s12^3*s13^2 - 90*s12*s13^4 +
                (108*s12^3*s13 + 252*s12^2*s13^2 - 108*s12*s13^3 - 72*s13^4)*
                 s23 + (72*s12^3 + 468*s12^2*s13 + 414*s12*s13^2)*s23^2 +
                (144*s12^2 + 504*s12*s13 + 216*s13^2)*s23^3 +
                (72*s12 + 144*s13)*s23^4) + p1q^2*p2q^3*(36*s12^3*s13^2 -
                36*s12*s13^4 + (-18*s12^4 + 36*s12^3*s13 + 198*s12^2*s13^2 +
                  90*s12*s13^3 + 18*s13^4)*s23 + (90*s12^3 + 432*s12^2*s13 +
                  540*s12*s13^2 + 180*s13^3)*s23^2 + (108*s12^2 +
                  342*s12*s13 + 234*s13^2)*s23^3 - 72*s12*s23^4 - 72*s23^5) +
              p1q^3*p2q^2*((18*s12^4 + 81*s12^3*s13 + 126*s12^2*s13^2 +
                  81*s12*s13^3 + 18*s13^4)*s23 + (81*s12^3 + 117*s12^2*s13 +
                  54*s12*s13^2 + 18*s13^3)*s23^2 + (-99*s12^2 - 261*s12*s13 -
                  90*s13^2)*s23^3 + (-234*s12 - 162*s13)*s23^4 - 72*s23^5) +
              p1q^5*((9*s12*s13 + 9*s13^2)*s23^3 + (9*s12 + 18*s13)*s23^4 +
                9*s23^5)))*Log(s12/(s12 + s13 + s23)))/
          (2*p1q*p3q^5*s12^4*s23^2 + p1q*p2q^5*(-2*s12*s13^3*s23^2 -
             2*s12*s13^2*s23^3) + p1q^2*p2q^4*(-4*s12*s13^3*s23^2 +
             4*s12*s13*s23^4) + p1q^4*p2q^2*(4*s12*s13^2*s23^3 -
             4*s12*s23^5) + p1q^5*p2q*(-2*s12*s13*s23^4 - 2*s12*s23^5) +
           p1q^3*p2q^3*(-2*s12*s13^3*s23^2 + 6*s12*s13^2*s23^3 +
             6*s12*s13*s23^4 - 2*s12*s23^5) +
           p3q^4*(p1q^2*((2*s12^4 - 2*s12^3*s13)*s23^2 - 6*s12^3*s23^3) +
             p1q*p2q*((4*s12^4 - 6*s12^3*s13)*s23^2 - 2*s12^3*s23^3)) +
           p3q^3*(p1q*p2q^2*((2*s12^4 - 12*s12^3*s13 + 6*s12^2*s13^2)*s23^2 +
               (-4*s12^3 + 4*s12^2*s13)*s23^3) + p1q^2*p2q*
              ((2*s12^4 - 10*s12^3*s13 + 4*s12^2*s13^2)*s23^2 + (-14*s12^3 +
                 4*s12^2*s13)*s23^3 + 4*s12^2*s23^4) +
             p1q^3*(-2*s12^3*s13*s23^2 + (-6*s12^3 + 4*s12^2*s13)*s23^3 + 6*
                s12^2*s23^4)) + p3q*(p1q*p2q^4*((6*s12^2*s13^2 - 4*s12*s13^3)*
                s23^2 + (4*s12^2*s13 - 4*s12*s13^2)*s23^3) +
             p1q^2*p2q^3*((10*s12^2*s13^2 - 6*s12*s13^3)*s23^2 +
               (8*s12^2*s13 + 2*s12*s13^2)*s23^3 + (4*s12^2 + 8*s12*s13)*
                s23^4) + p1q^4*p2q*((4*s12^2*s13 + 4*s12*s13^2)*s23^3 +
               (6*s12^2 - 2*s12*s13)*s23^4 - 6*s12*s23^5) +
             p1q^3*p2q^2*((4*s12^2*s13^2 - 2*s12*s13^3)*s23^2 +
               (8*s12^2*s13 + 10*s12*s13^2)*s23^3 + (10*s12^2 + 8*s12*s13)*
                s23^4 - 4*s12*s23^5) + p1q^5*(-2*s12*s13*s23^4 - 2*s12*
                s23^5)) + p3q^2*(p1q*p2q^3*((-6*s12^3*s13 + 12*s12^2*s13^2 -
                 2*s12*s13^3)*s23^2 + (-2*s12^3 + 8*s12^2*s13 - 2*s12*s13^2)*
                s23^3) + p1q^2*p2q^2*((-8*s12^3*s13 + 14*s12^2*s13^2 -
                 2*s12*s13^3)*s23^2 + (-8*s12^3 + 12*s12^2*s13 + 2*s12*s13^2)*
                s23^3 + (8*s12^2 + 4*s12*s13)*s23^4) +
             p1q^4*(4*s12^2*s13*s23^3 + (6*s12^2 - 2*s12*s13)*s23^4 - 2*s12*
                s23^5) + p1q^3*p2q*((-2*s12^3*s13 + 4*s12^2*s13^2)*s23^2 +
               (-6*s12^3 + 12*s12^2*s13 + 4*s12*s13^2)*s23^3 + (16*s12^2 +
                 2*s12*s13)*s23^4 - 2*s12*s23^5))) +
         ((p2q^6*(-18*s12*s13^4 - 18*s13^5 - 18*s13^4*s23) +
            p1q*p2q^5*(18*s12^2*s13^3 - 18*s13^5 + (72*s12*s13^3 + 36*s13^4)*
               s23 + 54*s13^3*s23^2) + p3q^6*(18*s12^4*s13 + 18*s12^3*s13^2 +
              (36*s12^4 + 90*s12^3*s13 + 36*s12^2*s13^2)*s23 +
              (72*s12^3 + 72*s12^2*s13)*s23^2 + 36*s12^2*s23^3) +
            p1q^2*p2q^4*(18*s12^2*s13^3 + 18*s12*s13^4 + (-9*s12^2*s13^2 +
                90*s12*s13^3 + 81*s13^4)*s23 + (-54*s12*s13^2 + 36*s13^3)*s23^
                2 - 45*s13^2*s23^3) + p1q^3*p2q^3*((-27*s12^3*s13 -
                90*s12^2*s13^2 - 63*s12*s13^3)*s23 + (-54*s12^2*s13 -
                207*s12*s13^2 - 117*s13^3)*s23^2 + (-27*s12*s13 - 117*s13^2)*
               s23^3) + p1q^5*p2q*((-9*s12^2 - 9*s12*s13)*s23^3 +
              (-18*s12 - 9*s13)*s23^4 - 9*s23^5) + p1q^4*p2q^2*
             ((9*s12^3 + 63*s12^2*s13 + 54*s12*s13^2)*s23^2 +
              (27*s12^2 + 135*s12*s13 + 63*s13^2)*s23^3 + (27*s12 + 72*s13)*
               s23^4 + 9*s23^5) + p3q^5*(p2q*(54*s12^4*s13 - 54*s12^2*s13^3 +
                (72*s12^4 + 126*s12^3*s13 - 126*s12^2*s13^2 - 72*s12*s13^3)*
                 s23 + (144*s12^3 - 144*s12*s13^2)*s23^2 +
                (72*s12^2 - 72*s12*s13)*s23^3) + p1q*(36*s12^4*s13 +
                36*s12^3*s13^2 + (36*s12^4 + 90*s12^3*s13 + 18*s12^2*s13^2)*
                 s23 + (-90*s12^2*s13 - 72*s12*s13^2)*s23^2 +
                (-108*s12^2 - 144*s12*s13)*s23^3 - 72*s12*s23^4)) +
            p3q^4*(p2q^2*(54*s12^4*s13 - 108*s12^3*s13^2 - 108*s12^2*s13^3 +
                54*s12*s13^4 + (36*s12^4 - 18*s12^3*s13 - 378*s12^2*s13^2 -
                  18*s12*s13^3 + 36*s13^4)*s23 + (72*s12^3 - 216*s12^2*s13 -
                  216*s12*s13^2 + 72*s13^3)*s23^2 + (36*s12^2 - 144*s12*s13 +
                  36*s13^2)*s23^3) + p1q*p2q*(90*s12^4*s13 - 90*s12^2*s13^3 +
                (72*s12^4 + 108*s12^3*s13 - 252*s12^2*s13^2 - 108*s12*s13^3)*
                 s23 + (-414*s12^2*s13 - 468*s12*s13^2 - 72*s13^3)*s23^2 +
                (-216*s12^2 - 504*s12*s13 - 144*s13^2)*s23^3 +
                (-144*s12 - 72*s13)*s23^4) + p1q^2*(18*s12^4*s13 +
                18*s12^3*s13^2 + (-27*s12^4 - 90*s12^3*s13 - 99*s12^2*s13^2 -
                  18*s12*s13^3)*s23 + (-126*s12^3 - 288*s12^2*s13 -
                  126*s12*s13^2)*s23^2 + (-135*s12^2 - 108*s12*s13 +
                  36*s13^2)*s23^3 + 72*s13*s23^4 + 36*s23^5)) +
            p3q*(p2q^5*(54*s12^2*s13^3 - 54*s13^5 + (54*s12*s13^3 - 54*s13^4)*
                 s23) + p1q*p2q^4*(-36*s12^3*s13^2 + 72*s12^2*s13^3 +
                72*s12*s13^4 - 36*s13^5 + (-36*s12^2*s13^2 + 306*s12*s13^3 +
                  162*s13^4)*s23 + (36*s12*s13^2 + 234*s13^3)*s23^2 +
                36*s13^2*s23^3) + p1q^2*p2q^3*(-36*s12^3*s13^2 +
                36*s12*s13^4 + (-54*s12^3*s13 - 234*s12^2*s13^2 +
                  36*s12*s13^3 + 144*s13^4)*s23 + (-180*s12^2*s13 -
                  504*s12*s13^2 - 90*s13^3)*s23^2 + (-198*s12*s13 -
                  306*s13^2)*s23^3 - 72*s13*s23^4) + p1q^4*p2q*(
                (27*s12^3 + 126*s12^2*s13 + 135*s12*s13^2 + 36*s13^3)*s23^2 +
                (54*s12^2 + 243*s12*s13 + 153*s13^2)*s23^3 +
                (27*s12 + 117*s13)*s23^4) + p1q^5*((-27*s12^2 - 45*s12*s13 -
                  18*s13^2)*s23^3 + (-54*s12 - 45*s13)*s23^4 - 27*s23^5) +
              p1q^3*p2q^2*((-9*s12^4 - 72*s12^3*s13 - 189*s12^2*s13^2 -
                  144*s12*s13^3 - 18*s13^4)*s23 + (-18*s12^3 - 99*s12^2*s13 -
                  351*s12*s13^2 - 216*s13^3)*s23^2 + (27*s12^2 + 99*s12*s13 -
                  108*s13^2)*s23^3 + (72*s12 + 126*s13)*s23^4 + 36*s23^5)) +
            p3q^3*(p2q^3*(18*s12^4*s13 - 144*s12^3*s13^2 + 144*s12*s13^4 -
                18*s13^5 + (-54*s12^3*s13 - 234*s12^2*s13^2 + 234*s12*s13^3 +
                  54*s13^4)*s23 + (-144*s12^2*s13 + 144*s13^3)*s23^2 +
                (-72*s12*s13 + 72*s13^2)*s23^3) + p1q*p2q^2*(72*s12^4*s13 -
                144*s12^3*s13^2 - 144*s12^2*s13^3 + 72*s12*s13^4 +
                (36*s12^4 - 54*s12^3*s13 - 594*s12^2*s13^2 - 54*s12*s13^3 +
                  90*s13^4)*s23 + (-558*s12^2*s13 - 684*s12*s13^2 - 18*s13^3)*
                 s23^2 + (-108*s12^2 - 576*s12*s13 - 252*s13^2)*s23^3 +
                (-72*s12 - 144*s13)*s23^4) + p1q^3*((-27*s12^4 - 90*s12^3*
                   s13 - 81*s12^2*s13^2 - 18*s12*s13^3)*s23 +
                (-9*s12^2*s13 + 27*s12*s13^2 + 18*s13^3)*s23^2 +
                (117*s12^2 + 189*s12*s13 + 90*s13^2)*s23^3 +
                (126*s12 + 108*s13)*s23^4 + 36*s23^5) + p1q^2*p2q*(
                36*s12^4*s13 - 36*s12^2*s13^3 + (-18*s12^4 - 90*s12^3*s13 -
                  198*s12^2*s13^2 - 36*s12*s13^3 + 18*s13^4)*s23 +
                (-180*s12^3 - 540*s12^2*s13 - 432*s12*s13^2 - 90*s13^3)*
                 s23^2 + (-234*s12^2 - 342*s12*s13 - 108*s13^2)*s23^3 +
                72*s13*s23^4 + 72*s23^5)) + p3q^2*(p2q^4*(-54*s12^3*s13^2 +
                108*s12^2*s13^3 + 108*s12*s13^4 - 54*s13^5 +
                (-18*s12^2*s13^2 + 234*s12*s13^3 - 18*s13^4)*s23 +
                (72*s12*s13^2 + 72*s13^3)*s23^2 + 36*s13^2*s23^3) +
              p1q*p2q^3*(18*s12^4*s13 - 144*s12^3*s13^2 + 144*s12*s13^4 -
                18*s13^5 + (-72*s12^3*s13 - 360*s12^2*s13^2 + 288*s12*s13^3 +
                  216*s13^4)*s23 + (-234*s12^2*s13 - 252*s12*s13^2 +
                  234*s13^3)*s23^2 + (-216*s12*s13 - 72*s13^2)*s23^3 -
                72*s13*s23^4) + p1q^4*((54*s12^3 + 117*s12^2*s13 +
                  81*s12*s13^2 + 18*s13^3)*s23^2 + (81*s12^2 + 108*s12*s13 +
                  36*s13^2)*s23^3 - 9*s13*s23^4 - 27*s23^5) +
              p1q^2*p2q^2*(18*s12^4*s13 - 54*s12^3*s13^2 - 54*s12^2*s13^3 +
                18*s12*s13^4 + (-9*s12^4 - 126*s12^3*s13 - 432*s12^2*s13^2 -
                  144*s12*s13^3 + 63*s13^4)*s23 + (-90*s12^3 - 540*s12^2*
                   s13 - 864*s12*s13^2 - 252*s13^3)*s23^2 +
                (-117*s12^2 - 468*s12*s13 - 423*s13^2)*s23^3 - 72*s13*s23^4 +
                36*s23^5) + p1q^3*p2q*((-18*s12^4 - 81*s12^3*s13 -
                  126*s12^2*s13^2 - 81*s12*s13^3 - 18*s13^4)*s23 +
                (-18*s12^3 - 54*s12^2*s13 - 117*s12*s13^2 - 81*s13^3)*s23^2 +
                (90*s12^2 + 261*s12*s13 + 99*s13^2)*s23^3 +
                (162*s12 + 234*s13)*s23^4 + 72*s23^5)))*
           Log(s13/(s12 + s13 + s23)))/(-2*p1q*p2q^5*s13^4*s23^2 +
           p1q*p3q^5*(2*s12^3*s13*s23^2 + 2*s12^2*s13*s23^3) +
           p1q^2*p2q^4*((2*s12*s13^3 - 2*s13^4)*s23^2 + 6*s13^3*s23^3) +
           p1q^3*p2q^3*(2*s12*s13^3*s23^2 + (-4*s12*s13^2 + 6*s13^3)*s23^3 -
             6*s13^2*s23^4) + p1q^5*p2q*(2*s12*s13*s23^4 + 2*s13*s23^5) +
           p1q^4*p2q^2*(-4*s12*s13^2*s23^3 + (2*s12*s13 - 6*s13^2)*s23^4 +
             2*s13*s23^5) + p3q^4*(p1q*p2q*((4*s12^3*s13 - 6*s12^2*s13^2)*
                s23^2 + (4*s12^2*s13 - 4*s12*s13^2)*s23^3) +
             p1q^2*(4*s12^3*s13*s23^2 - 4*s12*s13*s23^4)) +
           p3q^3*(p1q*p2q^2*((2*s12^3*s13 - 12*s12^2*s13^2 + 6*s12*s13^3)*
                s23^2 + (2*s12^2*s13 - 8*s12*s13^2 + 2*s13^3)*s23^3) +
             p1q^2*p2q*((6*s12^3*s13 - 10*s12^2*s13^2)*s23^2 +
               (-2*s12^2*s13 - 8*s12*s13^2)*s23^3 + (-8*s12*s13 - 4*s13^2)*
                s23^4) + p1q^3*(2*s12^3*s13*s23^2 - 6*s12^2*s13*s23^3 - 6*s12*
                s13*s23^4 + 2*s13*s23^5)) +
           p3q^2*(p1q*p2q^3*((-6*s12^2*s13^2 + 12*s12*s13^3 - 2*s13^4)*
                s23^2 + (-4*s12*s13^2 + 4*s13^3)*s23^3) + p1q^2*p2q^2*
              ((2*s12^3*s13 - 14*s12^2*s13^2 + 8*s12*s13^3)*s23^2 +
               (-2*s12^2*s13 - 12*s12*s13^2 + 8*s13^3)*s23^3 + (-4*s12*s13 -
                 8*s13^2)*s23^4) + p1q^4*(-4*s12^2*s13*s23^3 + 4*s13*s23^5) +
             p1q^3*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
               (-10*s12^2*s13 - 8*s12*s13^2)*s23^3 + (-8*s12*s13 - 10*s13^2)*
                s23^4 + 4*s13*s23^5)) +
           p3q*(p1q*p2q^4*((6*s12*s13^3 - 4*s13^4)*s23^2 + 2*s13^3*s23^3) +
             p1q^2*p2q^3*((-4*s12^2*s13^2 + 10*s12*s13^3 - 2*s13^4)*s23^2 +
               (-4*s12*s13^2 + 14*s13^3)*s23^3 - 4*s13^2*s23^4) +
             p1q^5*(2*s12*s13*s23^4 + 2*s13*s23^5) + p1q^3*p2q^2*
              ((-4*s12^2*s13^2 + 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 -
                 12*s12*s13^2 + 6*s13^3)*s23^3 + (-2*s12*s13 - 16*s13^2)*
                s23^4 + 2*s13*s23^5) + p1q^4*p2q*((-4*s12^2*s13 -
                 4*s12*s13^2)*s23^3 + (2*s12*s13 - 6*s13^2)*s23^4 + 6*s13*
                s23^5))) + ((p3q^6*(-18*s12^5 + 18*s12^3*s13^2 +
              (-18*s12^4 + 18*s12^3*s13)*s23) + p2q^6*(18*s12^2*s13^3 -
              18*s13^5 + (18*s12*s13^3 - 18*s13^4)*s23) +
            p1q*p2q^5*(-18*s12^3*s13^2 + 36*s12^2*s13^3 + 54*s12*s13^4 +
              (-72*s12^2*s13^2 + 54*s12*s13^3 + 54*s13^4)*s23 +
              (-54*s12*s13^2 + 54*s13^3)*s23^2) + p1q^2*p2q^4*
             (18*s12^4*s13 + 18*s12^3*s13^2 + 18*s12^2*s13^3 + 18*s12*s13^4 +
              (54*s12^3*s13 - 108*s12^2*s13^2 - 144*s12*s13^3 - 18*s13^4)*
               s23 + (90*s12^2*s13 - 144*s12*s13^2 - 72*s13^3)*s23^2 +
              (54*s12*s13 - 54*s13^2)*s23^3) + p1q^4*p2q^2*
             ((-9*s12^3 + 36*s12^2*s13 + 63*s12*s13^2 + 18*s13^3)*s23^2 +
              (-27*s12^2 + 9*s12*s13)*s23^3 + (-18*s12 - 18*s13)*s23^4) +
            p1q^5*p2q*((-9*s12^2 - 18*s12*s13 - 9*s13^2)*s23^3 +
              (-9*s12 - 9*s13)*s23^4) + p1q^3*p2q^3*
             ((9*s12^3*s13 - 45*s12^2*s13^2 - 63*s12*s13^3 - 9*s13^4)*s23 +
              (-18*s12^3 + 99*s12^2*s13 + 90*s12*s13^2 + 27*s13^3)*s23^2 +
              (-36*s12^2 + 108*s12*s13 + 54*s13^2)*s23^3 + (-18*s12 + 18*s13)*
               s23^4) + p3q^5*(p2q*(-54*s12^5 + 54*s12^4*s13 + 54*s12^3*
                 s13^2 - 54*s12^2*s13^3 + (-54*s12^4 + 108*s12^3*s13 -
                  54*s12^2*s13^2)*s23) + p1q*(54*s12^4*s13 + 36*s12^3*s13^2 -
                18*s12^2*s13^3 + (54*s12^4 + 54*s12^3*s13 - 72*s12^2*s13^2)*
                 s23 + (54*s12^3 - 54*s12^2*s13)*s23^2)) +
            p3q^4*(p2q^2*(-54*s12^5 + 162*s12^4*s13 - 162*s12^2*s13^3 +
                54*s12*s13^4 + (-54*s12^4 + 216*s12^3*s13 - 216*s12^2*s13^2 +
                  54*s12*s13^3)*s23) + p1q*p2q*(-18*s12^5 + 144*s12^4*s13 +
                18*s12^3*s13^2 - 108*s12^2*s13^3 + 36*s12*s13^4 +
                (108*s12^4 + 126*s12^3*s13 - 270*s12^2*s13^2 + 72*s12*s13^3)*
                 s23 + (126*s12^3 - 162*s12^2*s13 + 36*s12*s13^2)*s23^2) +
              p1q^2*(18*s12^4*s13 + 18*s12^3*s13^2 + 18*s12^2*s13^3 +
                18*s12*s13^4 + (-18*s12^4 - 144*s12^3*s13 - 108*s12^2*s13^2 +
                  54*s12*s13^3)*s23 + (-72*s12^3 - 144*s12^2*s13 +
                  90*s12*s13^2)*s23^2 + (-54*s12^2 + 54*s12*s13)*s23^3)) +
            p3q^3*(p2q^3*(-18*s12^5 + 162*s12^4*s13 - 144*s12^3*s13^2 -
                144*s12^2*s13^3 + 162*s12*s13^4 - 18*s13^5 +
                (-18*s12^4 + 180*s12^3*s13 - 324*s12^2*s13^2 + 180*s12*
                   s13^3 - 18*s13^4)*s23) + p1q*p2q^2*(-36*s12^5 +
                162*s12^4*s13 - 144*s12^3*s13^2 - 216*s12^2*s13^3 +
                108*s12*s13^4 - 18*s13^5 + (54*s12^4 + 162*s12^3*s13 -
                  450*s12^2*s13^2 + 162*s12*s13^3)*s23 + (90*s12^3 -
                  126*s12^2*s13 + 18*s12*s13^2 + 18*s13^3)*s23^2) +
              p1q^2*p2q*(-18*s12^5 + 18*s12^4*s13 + 18*s12*s13^4 - 18*s13^5 +
                (-54*s12^4 - 378*s12^3*s13 - 432*s12^2*s13^2 + 18*s12*s13^3 -
                  18*s13^4)*s23 + (-126*s12^3 - 396*s12^2*s13 + 72*s12*
                   s13^2 + 18*s13^3)*s23^2 + (-90*s12^2 + 72*s12*s13 +
                  18*s13^2)*s23^3) + p1q^3*((-9*s12^4 - 63*s12^3*s13 -
                  45*s12^2*s13^2 + 9*s12*s13^3)*s23 + (27*s12^3 +
                  90*s12^2*s13 + 99*s12*s13^2 - 18*s13^3)*s23^2 +
                (54*s12^2 + 108*s12*s13 - 36*s13^2)*s23^3 + (18*s12 - 18*s13)*
                 s23^4)) + p3q^2*(p2q^4*(54*s12^4*s13 - 162*s12^3*s13^2 +
                162*s12*s13^4 - 54*s13^5 + (54*s12^3*s13 - 216*s12^2*s13^2 +
                  216*s12*s13^3 - 54*s13^4)*s23) + p1q*p2q^3*(-18*s12^5 +
                108*s12^4*s13 - 216*s12^3*s13^2 - 144*s12^2*s13^3 +
                162*s12*s13^4 - 36*s13^5 + (162*s12^3*s13 - 450*s12^2*s13^2 +
                  162*s12*s13^3 + 54*s13^4)*s23 + (18*s12^3 + 18*s12^2*s13 -
                  126*s12*s13^2 + 90*s13^3)*s23^2) + p1q^2*p2q^2*(-36*s12^5 -
                36*s12^3*s13^2 - 36*s12^2*s13^3 - 36*s13^5 +
                (-54*s12^4 - 270*s12^3*s13 - 648*s12^2*s13^2 - 270*s12*
                   s13^3 - 54*s13^4)*s23 + (-36*s12^3 - 270*s12^2*s13 -
                  270*s12*s13^2 - 36*s13^3)*s23^2 + (-18*s12^2 + 36*s12*s13 -
                  18*s13^2)*s23^3) + p1q^4*((18*s12^3 + 63*s12^2*s13 +
                  36*s12*s13^2 - 9*s13^3)*s23^2 + (9*s12*s13 - 27*s13^2)*
                 s23^3 + (-18*s12 - 18*s13)*s23^4) + p1q^3*p2q*(
                (-171*s12^3*s13 - 261*s12^2*s13^2 - 63*s12*s13^3 + 27*s13^4)*
                 s23 + (72*s12^3 + 99*s12^2*s13 + 144*s12*s13^2 + 63*s13^3)*
                 s23^2 + (90*s12^2 + 198*s12*s13 + 18*s13^2)*s23^3 +
                (18*s12 - 18*s13)*s23^4)) + p3q*(p2q^5*(-54*s12^3*s13^2 +
                54*s12^2*s13^3 + 54*s12*s13^4 - 54*s13^5 + (-54*s12^2*s13^2 +
                  108*s12*s13^3 - 54*s13^4)*s23) + p1q*p2q^4*(36*s12^4*s13 -
                108*s12^3*s13^2 + 18*s12^2*s13^3 + 144*s12*s13^4 - 18*s13^5 +
                (72*s12^3*s13 - 270*s12^2*s13^2 + 126*s12*s13^3 + 108*s13^4)*
                 s23 + (36*s12^2*s13 - 162*s12*s13^2 + 126*s13^3)*s23^2) +
              p1q^2*p2q^3*(-18*s12^5 + 18*s12^4*s13 + 18*s12*s13^4 -
                18*s13^5 + (-18*s12^4 + 18*s12^3*s13 - 432*s12^2*s13^2 -
                  378*s12*s13^3 - 54*s13^4)*s23 + (18*s12^3 + 72*s12^2*s13 -
                  396*s12*s13^2 - 126*s13^3)*s23^2 + (18*s12^2 + 72*s12*s13 -
                  90*s13^2)*s23^3) + p1q^4*p2q*((27*s12^3 + 153*s12^2*s13 +
                  153*s12*s13^2 + 27*s13^3)*s23^2 + (9*s12^2 + 90*s12*s13 +
                  9*s13^2)*s23^3 + (-18*s12 - 18*s13)*s23^4) +
              p1q^5*((-9*s12^2 - 18*s12*s13 - 9*s13^2)*s23^3 +
                (-9*s12 - 9*s13)*s23^4) + p1q^3*p2q^2*((27*s12^4 -
                  63*s12^3*s13 - 261*s12^2*s13^2 - 171*s12*s13^3)*s23 +
                (63*s12^3 + 144*s12^2*s13 + 99*s12*s13^2 + 72*s13^3)*s23^2 +
                (18*s12^2 + 198*s12*s13 + 90*s13^2)*s23^3 +
                (-18*s12 + 18*s13)*s23^4)))*Log(s23/(s12 + s13 + s23)))/
          (p1q*p3q^5*(2*s12^4*s13 + 2*s12^3*s13^2)*s23 +
           p1q*p2q^5*(2*s12^2*s13^3 + 2*s12*s13^4)*s23 - 2*p1q^5*p2q*s12*s13*
            s23^4 + p1q^2*p2q^4*((2*s12^2*s13^3 + 2*s12*s13^4)*s23 +
             (-4*s12^2*s13^2 - 6*s12*s13^3)*s23^2) + p1q^3*p2q^3*
            ((-4*s12^2*s13^2 - 6*s12*s13^3)*s23^2 + (2*s12^2*s13 + 6*s12*
                s13^2)*s23^3) + p1q^4*p2q^2*((2*s12^2*s13 + 6*s12*s13^2)*
              s23^3 - 2*s12*s13*s23^4) + p3q^4*
            (p1q*p2q*(6*s12^4*s13 + 2*s12^3*s13^2 - 4*s12^2*s13^3)*s23 +
             p1q^2*((2*s12^4*s13 + 2*s12^3*s13^2)*s23 + (-6*s12^3*s13 -
                 4*s12^2*s13^2)*s23^2)) + p3q^3*
            (p1q*p2q^2*(6*s12^4*s13 - 6*s12^3*s13^2 - 10*s12^2*s13^3 + 2*s12*
                s13^4)*s23 + p1q^2*p2q*((4*s12^4*s13 - 4*s12^2*s13^3)*s23 +
               (-16*s12^3*s13 - 12*s12^2*s13^2 - 4*s12*s13^3)*s23^2) +
             p1q^3*((-6*s12^3*s13 - 4*s12^2*s13^2)*s23^2 + (6*s12^2*s13 +
                 2*s12*s13^2)*s23^3)) + p3q*(p1q*p2q^4*(-4*s12^3*s13^2 + 2*
                s12^2*s13^3 + 6*s12*s13^4)*s23 - 2*p1q^5*s12*s13*s23^4 +
             p1q^2*p2q^3*((-4*s12^3*s13^2 + 4*s12*s13^4)*s23 +
               (-4*s12^3*s13 - 12*s12^2*s13^2 - 16*s12*s13^3)*s23^2) +
             p1q^3*p2q^2*((-4*s12^3*s13 - 8*s12^2*s13^2 - 10*s12*s13^3)*
                s23^2 + (10*s12^2*s13 + 14*s12*s13^2)*s23^3) +
             p1q^4*p2q*((8*s12^2*s13 + 8*s12*s13^2)*s23^3 - 4*s12*s13*
                s23^4)) + p3q^2*(p1q*p2q^3*(2*s12^4*s13 - 10*s12^3*s13^2 - 6*
                s12^2*s13^3 + 6*s12*s13^4)*s23 + p1q^2*p2q^2*
              ((2*s12^4*s13 - 6*s12^3*s13^2 - 6*s12^2*s13^3 + 2*s12*s13^4)*
                s23 + (-14*s12^3*s13 - 16*s12^2*s13^2 - 14*s12*s13^3)*
                s23^2) + p1q^3*p2q*((-10*s12^3*s13 - 8*s12^2*s13^2 -
                 4*s12*s13^3)*s23^2 + (14*s12^2*s13 + 10*s12*s13^2)*s23^3) +
             p1q^4*((6*s12^2*s13 + 2*s12*s13^2)*s23^3 - 2*s12*s13*s23^4)))) +
       Log(p3q/(p1q + p2q + p3q))*
        (((p2q^6*(-18*s12^2*s13^4 - 18*s12*s13^5 - 18*s12*s13^4*s23) +
            p3q^6*(18*s12^5*s13 + 18*s12^4*s13^2 + (18*s12^5 + 54*s12^4*s13 +
                18*s12^3*s13^2)*s23 + (36*s12^4 + 36*s12^3*s13)*s23^2 +
              18*s12^3*s23^3) + p1q*p2q^5*(18*s12^3*s13^3 - 18*s12*s13^5 +
              (72*s12^2*s13^3 + 36*s12*s13^4)*s23 + (52*s12*s13^3 - 2*s13^4)*
               s23^2 - 2*s13^3*s23^3) + p1q^2*p2q^4*(18*s12^3*s13^3 +
              18*s12^2*s13^4 + (-27*s12^3*s13^2 + 54*s12^2*s13^3 +
                63*s12*s13^4)*s23 + (-78*s12^2*s13^2 + 11*s12*s13^3 - s13^4)*
               s23^2 + (-45*s12*s13^2 + 5*s13^3)*s23^3 + 6*s13^2*s23^4) +
            p1q^3*p2q^3*((-9*s12^4*s13 - 54*s12^3*s13^2 - 45*s12^2*s13^3)*
               s23 + (-8*s12^3*s13 - 120*s12^2*s13^2 - 74*s12*s13^3 +
                2*s13^4)*s23^2 + (15*s12^2*s13 - 56*s12*s13^2 + 8*s13^3)*s23^
                3 + 8*s12*s13*s23^4 - 6*s13*s23^5) + p1q^4*p2q^2*
             ((9*s12^4 + 45*s12^3*s13 + 36*s12^2*s13^2)*s23^2 +
              (17*s12^3 + 80*s12^2*s13 + 32*s12*s13^2 - 4*s13^3)*s23^3 +
              (9*s12^2 + 28*s12*s13 - 13*s13^2)*s23^4 + (3*s12 - 7*s13)*s23^
                5 + 2*s23^6) + p1q^5*p2q*((-9*s12^3 - 9*s12^2*s13)*s23^3 +
              (-14*s12^2 - 3*s12*s13 + 2*s13^2)*s23^4 + (-s12 + 6*s13)*s23^
                5 + 4*s23^6) + p3q^5*(p2q*(54*s12^5*s13 - 54*s12^3*s13^3 +
                (36*s12^5 + 90*s12^4*s13 - 90*s12^3*s13^2 - 36*s12^2*s13^3)*
                 s23 + (72*s12^4 - 72*s12^2*s13^2)*s23^2 +
                (36*s12^3 - 36*s12^2*s13)*s23^3) + p1q*(36*s12^5*s13 +
                36*s12^4*s13^2 + (18*s12^5 + 54*s12^4*s13)*s23 +
                (4*s12^4 - 48*s12^3*s13 - 34*s12^2*s13^2)*s23^2 +
                (-46*s12^3 - 66*s12^2*s13)*s23^3 - 32*s12^2*s23^4)) +
            p3q^4*(p2q^2*(54*s12^5*s13 - 108*s12^4*s13^2 - 108*s12^3*s13^3 +
                54*s12^2*s13^4 + (18*s12^5 + 18*s12^4*s13 - 270*s12^3*s13^2 +
                  18*s12^2*s13^3 + 18*s12*s13^4)*s23 + (36*s12^4 -
                  108*s12^3*s13 - 108*s12^2*s13^2 + 36*s12*s13^3)*s23^2 +
                (18*s12^3 - 72*s12^2*s13 + 18*s12*s13^2)*s23^3) +
              p1q*p2q*(90*s12^5*s13 - 90*s12^3*s13^3 + (18*s12^5 +
                  36*s12^4*s13 - 234*s12^3*s13^2 - 72*s12^2*s13^3)*s23 +
                (-30*s12^4 - 288*s12^3*s13 - 278*s12^2*s13^2 - 38*s12*s13^3)*
                 s23^2 + (-114*s12^3 - 278*s12^2*s13 - 82*s12*s13^2)*s23^3 +
                (-66*s12^2 - 44*s12*s13)*s23^4) + p1q^2*(18*s12^5*s13 +
                18*s12^4*s13^2 + (-27*s12^5 - 108*s12^4*s13 - 135*s12^3*
                   s13^2 - 36*s12^2*s13^3)*s23 + (-118*s12^4 - 320*s12^3*
                   s13 - 201*s12^2*s13^2 - 35*s12*s13^3)*s23^2 +
                (-145*s12^3 - 204*s12^2*s13 - 55*s12*s13^2)*s23^3 +
                (-44*s12^2 - 10*s12*s13)*s23^4 + 10*s12*s23^5)) +
            p3q^3*(p2q^3*(18*s12^5*s13 - 144*s12^4*s13^2 + 144*s12^2*s13^4 -
                18*s12*s13^5 + (-18*s12^4*s13 - 198*s12^3*s13^2 + 198*s12^2*
                   s13^3 + 18*s12*s13^4)*s23 + (-72*s12^3*s13 + 72*s12*s13^3)*
                 s23^2 + (-36*s12^2*s13 + 36*s12*s13^2)*s23^3) +
              p1q*p2q^2*(72*s12^5*s13 - 144*s12^4*s13^2 - 144*s12^3*s13^3 +
                72*s12^2*s13^4 + (-18*s12^4*s13 - 432*s12^3*s13^2 +
                  18*s12^2*s13^3 + 72*s12*s13^4)*s23 + (-34*s12^4 -
                  316*s12^3*s13 - 348*s12^2*s13^2 + 42*s12*s13^3)*s23^2 +
                (-68*s12^3 - 310*s12^2*s13 - 110*s12*s13^2 + 4*s13^3)*s23^3 +
                (-34*s12^2 - 84*s12*s13 + 4*s13^2)*s23^4) + p1q^2*p2q*(
                36*s12^5*s13 - 36*s12^3*s13^3 + (-54*s12^5 - 180*s12^4*s13 -
                  252*s12^3*s13^2 - 18*s12^2*s13^3 + 36*s12*s13^4)*s23 +
                (-204*s12^4 - 542*s12^3*s13 - 367*s12^2*s13^2 - 48*s12*
                   s13^3 - s13^4)*s23^2 + (-222*s12^3 - 374*s12^2*s13 -
                  159*s12*s13^2 - 5*s13^3)*s23^3 + (-48*s12^2 - 56*s12*s13 -
                  12*s13^2)*s23^4 + (24*s12 - 8*s13)*s23^5) +
              p1q^3*((-27*s12^5 - 108*s12^4*s13 - 117*s12^3*s13^2 -
                  36*s12^2*s13^3)*s23 + (-50*s12^4 - 155*s12^3*s13 -
                  122*s12^2*s13^2 - 35*s12*s13^3)*s23^2 + (19*s12^3 +
                  11*s12^2*s13 - 16*s12*s13^2 - s13^3)*s23^3 +
                (84*s12^2 + 62*s12*s13 - s13^2)*s23^4 + (46*s12 + 4*s13)*
                 s23^5 + 4*s23^6)) + p3q^2*(p2q^4*(-54*s12^4*s13^2 +
                108*s12^3*s13^3 + 108*s12^2*s13^4 - 54*s12*s13^5 +
                (-36*s12^3*s13^2 + 198*s12^2*s13^3 - 36*s12*s13^4)*s23 +
                (36*s12^2*s13^2 + 36*s12*s13^3)*s23^2 + 18*s12*s13^2*s23^3) +
              p1q*p2q^3*(18*s12^5*s13 - 144*s12^4*s13^2 + 144*s12^2*s13^4 -
                18*s12*s13^5 + (-270*s12^3*s13^2 + 252*s12^2*s13^3 +
                  162*s12*s13^4)*s23 + (-76*s12^3*s13 - 118*s12^2*s13^2 +
                  206*s12*s13^3 - 4*s13^4)*s23^2 + (-98*s12^2*s13 -
                  4*s12*s13^2 + 2*s13^3)*s23^3 + (-40*s12*s13 + 6*s13^2)*
                 s23^4) + p1q^2*p2q^2*(18*s12^5*s13 - 54*s12^4*s13^2 -
                54*s12^3*s13^3 + 18*s12^2*s13^4 + (-45*s12^5 - 144*s12^4*
                   s13 - 342*s12^3*s13^2 - 54*s12^2*s13^3 + 81*s12*s13^4)*
                 s23 + (-140*s12^4 - 414*s12^3*s13 - 527*s12^2*s13^2 -
                  90*s12*s13^3 + s13^4)*s23^2 + (-131*s12^3 - 348*s12^2*s13 -
                  274*s12*s13^2 + 9*s13^3)*s23^3 + (-22*s12^2 - 108*s12*s13 -
                  4*s13^2)*s23^4 + (14*s12 - 12*s13)*s23^5) +
              p1q^3*p2q*((-36*s12^5 - 135*s12^4*s13 - 162*s12^3*s13^2 -
                  63*s12^2*s13^3)*s23 + (-76*s12^4 - 211*s12^3*s13 -
                  241*s12^2*s13^2 - 105*s12*s13^3 + s13^4)*s23^2 +
                (-12*s12^3 - 41*s12^2*s13 - 108*s12*s13^2 - 4*s13^3)*s23^3 +
                (66*s12^2 + 25*s12*s13 - 21*s13^2)*s23^4 + (44*s12 - 10*s13)*
                 s23^5 + 6*s23^6) + p1q^4*((36*s12^4 + 81*s12^3*s13 +
                  45*s12^2*s13^2)*s23^2 + (91*s12^3 + 140*s12^2*s13 +
                  39*s12*s13^2 - s13^3)*s23^3 + (82*s12^2 + 69*s12*s13 +
                  s13^2)*s23^4 + (35*s12 + 10*s13)*s23^5 + 8*s23^6)) +
            p3q*(p2q^5*(54*s12^3*s13^3 - 54*s12*s13^5 + (54*s12^2*s13^3 -
                  54*s12*s13^4)*s23) + p1q*p2q^4*(-36*s12^4*s13^2 +
                72*s12^3*s13^3 + 72*s12^2*s13^4 - 36*s12*s13^5 +
                (-72*s12^3*s13^2 + 234*s12^2*s13^3 + 126*s12*s13^4)*s23 +
                (-14*s12^2*s13^2 + 178*s12*s13^3 - 6*s13^4)*s23^2 +
                (24*s12*s13^2 - 4*s13^3)*s23^3 + 2*s13^2*s23^4) +
              p1q^2*p2q^3*(-36*s12^4*s13^2 + 36*s12^2*s13^4 +
                (-144*s12^3*s13^2 + 54*s12^2*s13^3 + 126*s12*s13^4)*s23 +
                (-30*s12^3*s13 - 277*s12^2*s13^2 - 12*s12*s13^3 + s13^4)*
                 s23^2 + (-70*s12^2*s13 - 161*s12*s13^2 + 19*s13^3)*s23^3 +
                (-44*s12*s13 + 14*s13^2)*s23^4 - 4*s13*s23^5) +
              p1q^3*p2q^2*((-27*s12^5 - 90*s12^4*s13 - 153*s12^3*s13^2 -
                  90*s12^2*s13^3)*s23 + (-62*s12^4 - 136*s12^3*s13 -
                  275*s12^2*s13^2 - 144*s12*s13^3 + 3*s13^4)*s23^2 +
                (-31*s12^3 - 19*s12^2*s13 - 130*s12*s13^2 + 5*s13^3)*s23^3 +
                (18*s12^2 + 7*s12*s13 - 20*s13^2)*s23^4 + (16*s12 - 20*s13)*
                 s23^5 + 2*s23^6) + p1q^5*((-9*s12^3 - 9*s12^2*s13)*s23^3 +
                (-14*s12^2 - 3*s12*s13 + 2*s13^2)*s23^4 + (-s12 + 6*s13)*
                 s23^5 + 4*s23^6) + p1q^4*p2q*((27*s12^4 + 90*s12^3*s13 +
                  63*s12^2*s13^2)*s23^2 + (54*s12^3 + 148*s12^2*s13 +
                  53*s12*s13^2 - 5*s13^3)*s23^3 + (37*s12^2 + 61*s12*s13 -
                  12*s13^2)*s23^4 + (20*s12 + 3*s13)*s23^5 + 10*s23^6)))*
           Log((p1q + p3q)/(p1q + p2q + p3q)))/(-2*p1q*p2q^5*s12*s13^4*
            s23^2 + p1q*p3q^5*(2*s12^4*s13*s23^2 + 2*s12^3*s13*s23^3) +
           p1q^2*p2q^4*((2*s12^2*s13^3 - 2*s12*s13^4)*s23^2 +
             6*s12*s13^3*s23^3) + p1q^3*p2q^3*(2*s12^2*s13^3*s23^2 +
             (-4*s12^2*s13^2 + 6*s12*s13^3)*s23^3 - 6*s12*s13^2*s23^4) +
           p1q^5*p2q*(2*s12^2*s13*s23^4 + 2*s12*s13*s23^5) +
           p1q^4*p2q^2*(-4*s12^2*s13^2*s23^3 + (2*s12^2*s13 - 6*s12*s13^2)*
              s23^4 + 2*s12*s13*s23^5) + p3q^4*
            (p1q*p2q*((4*s12^4*s13 - 6*s12^3*s13^2)*s23^2 + (4*s12^3*s13 -
                 4*s12^2*s13^2)*s23^3) + p1q^2*(4*s12^4*s13*s23^2 - 4*s12^2*
                s13*s23^4)) + p3q^3*(p1q*p2q^2*((2*s12^4*s13 - 12*s12^3*
                  s13^2 + 6*s12^2*s13^3)*s23^2 + (2*s12^3*s13 - 8*s12^2*
                  s13^2 + 2*s12*s13^3)*s23^3) + p1q^2*p2q*
              ((6*s12^4*s13 - 10*s12^3*s13^2)*s23^2 + (-2*s12^3*s13 -
                 8*s12^2*s13^2)*s23^3 + (-8*s12^2*s13 - 4*s12*s13^2)*s23^4) +
             p1q^3*(2*s12^4*s13*s23^2 - 6*s12^3*s13*s23^3 - 6*s12^2*s13*
                s23^4 + 2*s12*s13*s23^5)) +
           p3q^2*(p1q*p2q^3*((-6*s12^3*s13^2 + 12*s12^2*s13^3 - 2*s12*s13^4)*
                s23^2 + (-4*s12^2*s13^2 + 4*s12*s13^3)*s23^3) +
             p1q^2*p2q^2*((2*s12^4*s13 - 14*s12^3*s13^2 + 8*s12^2*s13^3)*
                s23^2 + (-2*s12^3*s13 - 12*s12^2*s13^2 + 8*s12*s13^3)*s23^3 +
               (-4*s12^2*s13 - 8*s12*s13^2)*s23^4) + p1q^4*(-4*s12^3*s13*
                s23^3 + 4*s12*s13*s23^5) + p1q^3*p2q*((2*s12^4*s13 -
                 4*s12^3*s13^2)*s23^2 + (-10*s12^3*s13 - 8*s12^2*s13^2)*
                s23^3 + (-8*s12^2*s13 - 10*s12*s13^2)*s23^4 + 4*s12*s13*
                s23^5)) + p3q*(p1q*p2q^4*((6*s12^2*s13^3 - 4*s12*s13^4)*
                s23^2 + 2*s12*s13^3*s23^3) + p1q^2*p2q^3*
              ((-4*s12^3*s13^2 + 10*s12^2*s13^3 - 2*s12*s13^4)*s23^2 +
               (-4*s12^2*s13^2 + 14*s12*s13^3)*s23^3 - 4*s12*s13^2*s23^4) +
             p1q^5*(2*s12^2*s13*s23^4 + 2*s12*s13*s23^5) +
             p1q^3*p2q^2*((-4*s12^3*s13^2 + 2*s12^2*s13^3)*s23^2 +
               (-4*s12^3*s13 - 12*s12^2*s13^2 + 6*s12*s13^3)*s23^3 +
               (-2*s12^2*s13 - 16*s12*s13^2)*s23^4 + 2*s12*s13*s23^5) +
             p1q^4*p2q*((-4*s12^3*s13 - 4*s12^2*s13^2)*s23^3 + (2*s12^2*s13 -
                 6*s12*s13^2)*s23^4 + 6*s12*s13*s23^5))) +
         ((p3q^6*(-18*s12^5*s13 - 36*s12^4*s13^2 - 18*s12^3*s13^3 +
              (18*s12^5 - 18*s12^3*s13^2)*s23 + 18*s12^4*s23^2) +
            p2q^6*(-18*s12^3*s13^3 - 36*s12^2*s13^4 - 18*s12*s13^5 +
              (-54*s12^2*s13^3 - 72*s12*s13^4 - 18*s13^5)*s23 +
              (-36*s12*s13^3 - 18*s13^4)*s23^2) + p1q*p2q^5*
             (-18*s12^3*s13^3 - 36*s12^2*s13^4 - 18*s12*s13^5 +
              (36*s12^3*s13^2 + 36*s12^2*s13^3)*s23 + (108*s12^2*s13^2 +
                144*s12*s13^3 + 54*s13^4)*s23^2 + (72*s12*s13^2 + 54*s13^3)*
               s23^3) + p1q^2*p2q^4*((-9*s12^4*s13 + 27*s12^3*s13^2 +
                117*s12^2*s13^3 + 117*s12*s13^4 + 36*s13^5)*s23 +
              (-27*s12^3*s13 + 54*s12^2*s13^2 + 135*s12*s13^3 + 54*s13^4)*s23^
                2 + (-54*s12^2*s13 - 54*s12*s13^2 - 36*s13^3)*s23^3 +
              (-36*s12*s13 - 54*s13^2)*s23^4) + p1q^5*p2q*
             ((9*s12^2 - 18*s12*s13 - 27*s13^2)*s23^4 + (9*s12 - 27*s13)*s23^
                5) + p1q^3*p2q^3*((9*s12^4 + 9*s12^3*s13 - 90*s12^2*s13^2 -
                189*s12*s13^3 - 99*s13^4)*s23^2 + (9*s12^3 - 36*s12^2*s13 -
                162*s12*s13^2 - 135*s13^3)*s23^3 + (-18*s12*s13 - 18*s13^2)*
               s23^4 + 18*s13*s23^5) + p1q^4*p2q^2*
             ((-18*s12^3 + 108*s12*s13^2 + 90*s13^3)*s23^3 + (-18*s12^2 +
                36*s12*s13 + 108*s13^2)*s23^4 + 18*s13*s23^5) +
            p3q^5*(p2q*(-72*s12^5*s13 - 108*s12^4*s13^2 + 36*s12^2*s13^4 +
                (54*s12^5 - 90*s12^4*s13 - 126*s12^3*s13^2 + 18*s12^2*s13^3)*
                 s23 + (54*s12^4 - 72*s12^3*s13 - 18*s12^2*s13^2)*s23^2) +
              p1q*(-18*s12^5*s13 - 36*s12^4*s13^2 - 18*s12^3*s13^3 +
                (18*s12^4*s13 + 72*s12^3*s13^2 + 54*s12^2*s13^3)*s23 +
                (-54*s12^4 + 72*s12^2*s13^2)*s23^2 + (-54*s12^3 +
                  18*s12^2*s13)*s23^3)) + p3q^4*(p2q^2*(-108*s12^5*s13 -
                72*s12^4*s13^2 + 162*s12^3*s13^3 + 108*s12^2*s13^4 -
                18*s12*s13^5 + (54*s12^5 - 270*s12^4*s13 - 144*s12^3*s13^2 +
                  198*s12^2*s13^3 + 18*s12*s13^4)*s23 + (54*s12^4 -
                  216*s12^3*s13 + 36*s12^2*s13^2 + 36*s12*s13^3)*s23^2) +
              p1q*p2q*(-54*s12^5*s13 - 72*s12^4*s13^2 + 18*s12^3*s13^3 +
                36*s12^2*s13^4 + (-18*s12^5 + 18*s12^4*s13 + 270*s12^3*
                   s13^2 + 234*s12^2*s13^3)*s23 + (-162*s12^4 + 72*s12^3*
                   s13 + 324*s12^2*s13^2)*s23^2 + (-144*s12^3 + 126*s12^2*
                   s13)*s23^3) + p1q^2*((-27*s12^5 - 63*s12^4*s13 -
                  99*s12^3*s13^2 - 117*s12^2*s13^3 - 54*s12*s13^4)*s23 +
                (-63*s12^4 - 144*s12^3*s13 - 225*s12^2*s13^2 - 144*s12*s13^3)*
                 s23^2 + (18*s12^3 - 54*s12^2*s13 - 126*s12*s13^2)*s23^3 +
                (54*s12^2 - 36*s12*s13)*s23^4)) +
            p3q^3*(p2q^3*(-72*s12^5*s13 + 72*s12^4*s13^2 + 288*s12^3*s13^3 +
                72*s12^2*s13^4 - 72*s12*s13^5 + (18*s12^5 - 270*s12^4*s13 +
                  144*s12^3*s13^2 + 432*s12^2*s13^3 - 18*s12*s13^4 -
                  18*s13^5)*s23 + (18*s12^4 - 216*s12^3*s13 + 216*s12^2*
                   s13^2 + 72*s12*s13^3 - 18*s13^4)*s23^2) +
              p1q*p2q^2*(-54*s12^5*s13 + 144*s12^3*s13^3 + 72*s12^2*s13^4 -
                18*s12*s13^5 + (-36*s12^5 + 36*s12^4*s13 + 594*s12^3*s13^2 +
                  594*s12^2*s13^3 + 90*s12*s13^4 + 18*s13^5)*s23 +
                (-162*s12^4 + 234*s12^3*s13 + 702*s12^2*s13^2 + 198*s12*
                   s13^3 + 72*s13^4)*s23^2 + (-126*s12^3 + 234*s12^2*s13 +
                  54*s12*s13^2 + 54*s13^3)*s23^3) + p1q^2*p2q*(
                (-63*s12^5 - 72*s12^4*s13 - 18*s12^3*s13^2 - 54*s12^2*s13^3 -
                  27*s12*s13^4 + 18*s13^5)*s23 + (-117*s12^4 - 225*s12^3*
                   s13 - 405*s12^2*s13^2 - 279*s12*s13^3 + 18*s13^4)*s23^2 +
                (72*s12^3 - 144*s12^2*s13 - 396*s12*s13^2 - 54*s13^3)*s23^3 +
                (126*s12^2 - 108*s12*s13 - 54*s13^2)*s23^4) +
              p1q^3*((63*s12^4 + 162*s12^3*s13 + 153*s12^2*s13^2 +
                  54*s12*s13^3)*s23^2 + (135*s12^3 + 207*s12^2*s13 +
                  108*s12*s13^2 + 18*s13^3)*s23^3 + (54*s12^2 + 36*s12*s13 +
                  36*s13^2)*s23^4 + (-18*s12 + 18*s13)*s23^5)) +
            p3q^2*(p2q^4*(-18*s12^5*s13 + 108*s12^4*s13^2 + 162*s12^3*s13^3 -
                72*s12^2*s13^4 - 108*s12*s13^5 + (-90*s12^4*s13 + 306*s12^3*
                   s13^2 + 288*s12^2*s13^3 - 162*s12*s13^4 - 54*s13^5)*s23 +
                (-72*s12^3*s13 + 252*s12^2*s13^2 - 54*s13^4)*s23^2) +
              p1q*p2q^3*(-18*s12^5*s13 + 72*s12^4*s13^2 + 144*s12^3*s13^3 -
                54*s12*s13^5 + (-18*s12^5 + 90*s12^4*s13 + 702*s12^3*s13^2 +
                  738*s12^2*s13^3 + 180*s12*s13^4 + 36*s13^5)*s23 +
                (-54*s12^4 + 252*s12^3*s13 + 828*s12^2*s13^2 + 540*s12*
                   s13^3 + 198*s13^4)*s23^2 + (-36*s12^3 + 162*s12^2*s13 +
                  180*s12*s13^2 + 162*s13^3)*s23^3) + p1q^2*p2q^2*(
                (-63*s12^5 - 72*s12^4*s13 + 36*s12^3*s13^2 + 72*s12^2*s13^3 +
                  63*s12*s13^4 + 36*s13^5)*s23 + (-99*s12^4 - 243*s12^3*s13 -
                  351*s12^2*s13^2 - 153*s12*s13^3 + 54*s13^4)*s23^2 +
                (54*s12^3 - 252*s12^2*s13 - 504*s12*s13^2 - 144*s13^3)*
                 s23^3 + (90*s12^2 - 144*s12*s13 - 162*s13^2)*s23^4) +
              p1q^4*((-45*s12^3 - 99*s12^2*s13 - 45*s12*s13^2 + 9*s13^3)*
                 s23^3 + (-81*s12^2 - 72*s12*s13 + 27*s13^2)*s23^4 +
                (-36*s12 + 18*s13)*s23^5) + p1q^3*p2q*((99*s12^4 +
                  117*s12^3*s13 - 36*s12^2*s13^2 - 81*s12*s13^3 - 27*s13^4)*
                 s23^2 + (189*s12^3 + 162*s12^2*s13 - 36*s12*s13^2 -
                  63*s13^3)*s23^3 + (54*s12^2 + 72*s12*s13 + 18*s13^2)*
                 s23^4 + (-36*s12 + 54*s13)*s23^5)) +
            p3q*(p2q^5*(36*s12^4*s13^2 - 108*s12^2*s13^4 - 72*s12*s13^5 +
                (126*s12^3*s13^2 - 18*s12^2*s13^3 - 198*s12*s13^4 - 54*s13^5)*
                 s23 + (90*s12^2*s13^2 - 72*s12*s13^3 - 54*s13^4)*s23^2) +
              p1q*p2q^4*(36*s12^4*s13^2 + 18*s12^3*s13^3 - 72*s12^2*s13^4 -
                54*s12*s13^5 + (54*s12^4*s13 + 342*s12^3*s13^2 + 360*s12^2*
                   s13^3 + 90*s12*s13^4 + 18*s13^5)*s23 + (90*s12^3*s13 +
                  486*s12^2*s13^2 + 486*s12*s13^3 + 180*s13^4)*s23^2 +
                (36*s12^2*s13 + 198*s12*s13^2 + 162*s13^3)*s23^3) +
              p1q^2*p2q^3*((-27*s12^5 - 72*s12^4*s13 - 18*s12^3*s13^2 +
                  126*s12^2*s13^3 + 153*s12*s13^4 + 54*s13^5)*s23 +
                (-45*s12^4 - 189*s12^3*s13 - 117*s12^2*s13^2 + 117*s12*
                   s13^3 + 90*s13^4)*s23^2 + (-216*s12^2*s13 - 288*s12*
                   s13^2 - 126*s13^3)*s23^3 + (18*s12^2 - 108*s12*s13 -
                  162*s13^2)*s23^4) + p1q^5*((9*s12^2 + 18*s12*s13 + 9*s13^2)*
                 s23^4 + (9*s12 + 9*s13)*s23^5) + p1q^4*p2q*(
                (-45*s12^3 - 9*s12^2*s13 + 45*s12*s13^2 + 9*s13^3)*s23^3 +
                (-63*s12^2 + 36*s12*s13 + 27*s13^2)*s23^4 +
                (-18*s12 + 18*s13)*s23^5) + p1q^3*p2q^2*((63*s12^4 +
                  72*s12^3*s13 - 63*s12^2*s13^2 - 144*s12*s13^3 - 72*s13^4)*
                 s23^2 + (99*s12^3 + 63*s12^2*s13 - 126*s12*s13^2 -
                  144*s13^3)*s23^3 + (18*s12^2 + 54*s12*s13 - 18*s13^2)*
                 s23^4 + (-18*s12 + 54*s13)*s23^5)))*
           Log((p2q + p3q)/(p1q + p2q + p3q)))/
          (p1q*p3q^5*(2*s12^4*s13 + 2*s12^3*s13^2)*s23^2 +
           p1q*p2q^5*(2*s12^2*s13^3 + 2*s12*s13^4)*s23^2 -
           2*p1q^5*p2q*s12*s13*s23^5 + p1q^2*p2q^4*
            ((2*s12^2*s13^3 + 2*s12*s13^4)*s23^2 + (-4*s12^2*s13^2 - 6*s12*
                s13^3)*s23^3) + p1q^3*p2q^3*((-4*s12^2*s13^2 - 6*s12*s13^3)*
              s23^3 + (2*s12^2*s13 + 6*s12*s13^2)*s23^4) +
           p1q^4*p2q^2*((2*s12^2*s13 + 6*s12*s13^2)*s23^4 -
             2*s12*s13*s23^5) + p3q^4*(p1q*p2q*(6*s12^4*s13 + 2*s12^3*s13^2 -
               4*s12^2*s13^3)*s23^2 + p1q^2*((2*s12^4*s13 + 2*s12^3*s13^2)*
                s23^2 + (-6*s12^3*s13 - 4*s12^2*s13^2)*s23^3)) +
           p3q^3*(p1q*p2q^2*(6*s12^4*s13 - 6*s12^3*s13^2 - 10*s12^2*s13^3 + 2*
                s12*s13^4)*s23^2 + p1q^2*p2q*((4*s12^4*s13 - 4*s12^2*s13^3)*
                s23^2 + (-16*s12^3*s13 - 12*s12^2*s13^2 - 4*s12*s13^3)*
                s23^3) + p1q^3*((-6*s12^3*s13 - 4*s12^2*s13^2)*s23^3 +
               (6*s12^2*s13 + 2*s12*s13^2)*s23^4)) +
           p3q*(p1q*p2q^4*(-4*s12^3*s13^2 + 2*s12^2*s13^3 + 6*s12*s13^4)*
              s23^2 - 2*p1q^5*s12*s13*s23^5 + p1q^2*p2q^3*
              ((-4*s12^3*s13^2 + 4*s12*s13^4)*s23^2 + (-4*s12^3*s13 -
                 12*s12^2*s13^2 - 16*s12*s13^3)*s23^3) + p1q^3*p2q^2*
              ((-4*s12^3*s13 - 8*s12^2*s13^2 - 10*s12*s13^3)*s23^3 +
               (10*s12^2*s13 + 14*s12*s13^2)*s23^4) + p1q^4*p2q*
              ((8*s12^2*s13 + 8*s12*s13^2)*s23^4 - 4*s12*s13*s23^5)) +
           p3q^2*(p1q*p2q^3*(2*s12^4*s13 - 10*s12^3*s13^2 - 6*s12^2*s13^3 + 6*
                s12*s13^4)*s23^2 + p1q^2*p2q^2*((2*s12^4*s13 - 6*s12^3*
                  s13^2 - 6*s12^2*s13^3 + 2*s12*s13^4)*s23^2 +
               (-14*s12^3*s13 - 16*s12^2*s13^2 - 14*s12*s13^3)*s23^3) +
             p1q^3*p2q*((-10*s12^3*s13 - 8*s12^2*s13^2 - 4*s12*s13^3)*s23^3 +
               (14*s12^2*s13 + 10*s12*s13^2)*s23^4) +
             p1q^4*((6*s12^2*s13 + 2*s12*s13^2)*s23^4 - 2*s12*s13*s23^5))) +
         ((p3q^2*(18*s12^2*s13 + 18*s12*s13^2 + 18*s12*s13*s23) +
            p2q^2*(18*s12^2*s13 + 18*s12*s13^2 + (36*s12*s13 + 18*s13^2)*
               s23 + 18*s13*s23^2) + p1q*p2q*((-18*s12*s13 - 18*s13^2)*s23 +
              (-2*s12 - 20*s13)*s23^2 - 2*s23^3) +
            p3q*(p2q*(36*s12^2*s13 + 36*s12*s13^2 + (54*s12*s13 + 18*s13^2)*
                 s23 + 18*s13*s23^2) + p1q*((-2*s12 - 2*s13)*s23^2 -
                2*s23^3)))*Log(-s12 - s13 - s23))/(p1q*p2q*s12*s13*s23^2 +
           p1q*p3q*s12*s13*s23^2) +
         ((p3q^6*(-18*s12^5*s13 - 18*s12^4*s13^2 - 18*s12^4*s13*s23) +
            p2q^6*(18*s12^2*s13^4 + 18*s12*s13^5 + 18*s12*s13^4*s23) +
            p1q*p2q^5*(36*s12^2*s13^4 + 36*s12*s13^5 + (-18*s12^2*s13^3 +
                18*s12*s13^4)*s23 + (2*s12^2*s13^2 - 16*s12*s13^3)*s23^2 +
              2*s12*s13^2*s23^3) + p1q^2*p2q^4*(18*s12^2*s13^4 +
              18*s12*s13^5 + (18*s12^3*s13^2 - 9*s12^2*s13^3 - 18*s12*s13^4 -
                9*s13^5)*s23 + (s12^3*s13 + 24*s12^2*s13^2 - 31*s12*s13^3 -
                18*s13^4)*s23^2 + (-(s12^2*s13) + 3*s12*s13^2 - 9*s13^3)*s23^
                3 - 2*s12*s13*s23^4) + p1q^3*p2q^3*((18*s12^3*s13^2 +
                9*s12^2*s13^3 - 18*s12*s13^4 - 9*s13^5)*s23 +
              (-17*s12^3*s13 - 23*s12^2*s13^2 - 24*s12*s13^3)*s23^2 +
              (-s12^3 - 25*s12^2*s13 - 13*s12*s13^2 + 27*s13^3)*s23^3 +
              (-s12^2 - 7*s12*s13 + 18*s13^2)*s23^4) + p1q^4*p2q^2*
             ((-18*s12^3*s13 - 45*s12^2*s13^2 - 9*s12*s13^3 + 18*s13^4)*s23^
                2 + (-s12^3 - 6*s12^2*s13 - 5*s12*s13^2 + 27*s13^3)*s23^3 +
              (s12^2 + 6*s12*s13)*s23^4 + (2*s12 - 9*s13)*s23^5) +
            p1q^5*p2q*((18*s12^2*s13 + 9*s12*s13^2 - 9*s13^3)*s23^3 +
              (2*s12^2 + 11*s12*s13 - 18*s13^2)*s23^4 + (2*s12 - 9*s13)*s23^
                5) + p3q^5*(p2q*(-54*s12^5*s13 + 54*s12^3*s13^3 +
                (-54*s12^4*s13 + 54*s12^3*s13^2)*s23) + p1q*(-18*s12^5*s13 +
                18*s12^3*s13^3 + (36*s12^4*s13 + 72*s12^3*s13^2)*s23 +
                (2*s12^4 + 56*s12^3*s13)*s23^2 + 2*s12^3*s23^3)) +
            p3q^4*(p2q^2*(-54*s12^5*s13 + 108*s12^4*s13^2 + 108*s12^3*s13^3 -
                54*s12^2*s13^4 + (-54*s12^4*s13 + 162*s12^3*s13^2 -
                  54*s12^2*s13^3)*s23) + p1q^2*(18*s12^4*s13^2 +
                18*s12^3*s13^3 + (27*s12^4*s13 - 18*s12^3*s13^2 -
                  63*s12^2*s13^3)*s23 + (3*s12^4 - 34*s12^3*s13 - 127*s12^2*
                   s13^2)*s23^2 + (-3*s12^3 - 70*s12^2*s13)*s23^3 -
                6*s12^2*s23^4) + p1q*p2q*(-36*s12^5*s13 + 72*s12^4*s13^2 +
                72*s12^3*s13^3 - 36*s12^2*s13^4 + (126*s12^4*s13 +
                  234*s12^3*s13^2 - 72*s12^2*s13^3)*s23 +
                (2*s12^4 + 156*s12^3*s13 - 44*s12^2*s13^2)*s23^2 -
                10*s12^2*s13*s23^3 - 2*s12^2*s23^4)) +
            p3q^3*(p2q^3*(-18*s12^5*s13 + 144*s12^4*s13^2 - 144*s12^2*s13^4 +
                18*s12*s13^5 + (-18*s12^4*s13 + 162*s12^3*s13^2 - 162*s12^2*
                   s13^3 + 18*s12*s13^4)*s23) + p1q*p2q^2*(-18*s12^5*s13 +
                144*s12^4*s13^2 - 144*s12^2*s13^4 + 18*s12*s13^5 +
                (144*s12^4*s13 + 216*s12^3*s13^2 - 288*s12^2*s13^3)*s23 +
                (150*s12^3*s13 - 112*s12^2*s13^2 - 10*s12*s13^3)*s23^2 +
                (-2*s12^3 - 10*s12^2*s13 + 12*s12*s13^2)*s23^3 +
                (-2*s12^2 + 4*s12*s13)*s23^4) + p1q^2*p2q*(36*s12^4*s13^2 -
                36*s12^2*s13^4 + (108*s12^4*s13 - 198*s12^2*s13^3 -
                  18*s12*s13^4)*s23 + (5*s12^4 - 55*s12^3*s13 - 289*s12^2*
                   s13^2 + 5*s12*s13^3)*s23^2 + (-5*s12^3 - 174*s12^2*s13 +
                  27*s12*s13^2)*s23^3 + (-6*s12^2 + 8*s12*s13)*s23^4 +
                4*s12*s23^5) + p1q^3*((-9*s12^3*s13^2 + 18*s12^2*s13^3 +
                  27*s12*s13^4)*s23 + (2*s12^4 + 12*s12^3*s13 + 65*s12^2*
                   s13^2 + 91*s12*s13^3)*s23^2 + (-4*s12^3 + 44*s12^2*s13 +
                  104*s12*s13^2)*s23^3 + 46*s12*s13*s23^4 + 6*s12*s23^5)) +
            p3q*(p2q^5*(-54*s12^3*s13^3 + 54*s12*s13^5 + (-54*s12^2*s13^3 +
                  54*s12*s13^4)*s23) + p1q*p2q^4*(-90*s12^3*s13^3 +
                90*s12*s13^5 + (-36*s12^3*s13^2 - 180*s12^2*s13^3 +
                  36*s12*s13^4)*s23 + (-2*s12^3*s13 - 32*s12^2*s13^2 -
                  50*s12*s13^3 - 2*s13^4)*s23^2 + (-2*s12^2*s13 +
                  4*s12*s13^2 - 4*s13^3)*s23^3 - 2*s13^2*s23^4) +
              p1q^2*p2q^3*(-36*s12^3*s13^3 + 36*s12*s13^5 +
                (-18*s12^4*s13 - 108*s12^3*s13^2 - 198*s12^2*s13^3 -
                  18*s12*s13^4 + 18*s13^5)*s23 + (-s12^4 - 93*s12^3*s13 -
                  131*s12^2*s13^2 - 21*s12*s13^3 + 36*s13^4)*s23^2 +
                (-5*s12^3 - 80*s12^2*s13 + 35*s12*s13^2 + 22*s13^3)*s23^3 +
                (-4*s12^2 + 2*s12*s13 + 8*s13^2)*s23^4 + 4*s13*s23^5) +
              p1q^5*((9*s12*s13^2 + 9*s13^3)*s23^3 + (2*s12^2 + 11*s12*s13 +
                  18*s13^2)*s23^4 + (2*s12 + 9*s13)*s23^5) +
              p1q^4*p2q*((-36*s12^3*s13 + 9*s12^2*s13^2 + 18*s12*s13^3 -
                  27*s13^4)*s23^2 + (-5*s12^3 + 16*s12^2*s13 + 74*s12*s13^2 -
                  55*s13^3)*s23^3 + (59*s12*s13 - 31*s13^2)*s23^4 +
                (3*s12 - 5*s13)*s23^5 - 2*s23^6) + p1q^3*p2q^2*(
                (18*s12^4*s13 + 9*s12^3*s13^2 - 18*s12^2*s13^3 +
                  9*s12*s13^4 + 18*s13^5)*s23 + (s12^4 - 24*s12^3*s13 +
                  55*s12^2*s13^2 + 99*s12*s13^3 + 19*s13^4)*s23^2 +
                (-4*s12^3 + 34*s12^2*s13 + 174*s12*s13^2 - 14*s13^3)*s23^3 +
                (-s12^2 + 86*s12*s13 - 15*s13^2)*s23^4 + (2*s12 - 2*s13)*
                 s23^5 - 2*s23^6)) + p3q^2*(p2q^4*(54*s12^4*s13^2 -
                108*s12^3*s13^3 - 108*s12^2*s13^4 + 54*s12*s13^5 +
                (54*s12^3*s13^2 - 162*s12^2*s13^3 + 54*s12*s13^4)*s23) +
              p1q*p2q^3*(72*s12^4*s13^2 - 144*s12^3*s13^3 - 144*s12^2*s13^4 +
                72*s12*s13^5 + (54*s12^4*s13 + 18*s12^3*s13^2 - 378*s12^2*
                   s13^3 + 18*s12*s13^4)*s23 + (48*s12^3*s13 - 102*s12^2*
                   s13^2 - 44*s12*s13^3 - 2*s13^4)*s23^2 + (-2*s12^2*s13 +
                  14*s12*s13^2 - 4*s13^3)*s23^3 + (4*s12*s13 - 2*s13^2)*
                 s23^4) + p1q^2*p2q^2*(18*s12^4*s13^2 - 54*s12^3*s13^3 -
                54*s12^2*s13^4 + 18*s12*s13^5 + (45*s12^4*s13 - 180*s12^3*
                   s13^2 - 432*s12^2*s13^3 - 90*s12*s13^4 + 9*s13^5)*s23 +
                (s12^4 - 151*s12^3*s13 - 425*s12^2*s13^2 - 93*s12*s13^3 +
                  18*s13^4)*s23^2 + (-7*s12^3 - 201*s12^2*s13 + 23*s12*
                   s13^2 + 13*s13^3)*s23^3 + (-4*s12^2 + 12*s12*s13 +
                  8*s13^2)*s23^4 + (4*s12 + 4*s13)*s23^5) +
              p1q^4*((-18*s12^2*s13^2 - 27*s12*s13^3 - 9*s13^4)*s23^2 +
                (-4*s12^3 - 32*s12^2*s13 - 65*s12*s13^2 - 28*s13^3)*s23^3 +
                (-s12^2 - 37*s12*s13 - 31*s13^2)*s23^4 + (s12 - 14*s13)*
                 s23^5 - 2*s23^6) + p1q^3*p2q*((18*s12^4*s13 - 36*s12^3*
                   s13^2 - 63*s12^2*s13^3 + 9*s13^5)*s23 +
                (3*s12^4 - 103*s12^3*s13 - 73*s12^2*s13^2 + 106*s12*s13^3 +
                  19*s13^4)*s23^2 + (-7*s12^3 - 77*s12^2*s13 + 165*s12*
                   s13^2 + 13*s13^3)*s23^3 + (67*s12*s13 + 3*s13^2)*s23^4 +
                (8*s12 - 2*s13)*s23^5 - 2*s23^6)))*
           Log(s12/(s12 + s13 + s23)))/(2*p1q*p3q^5*s12^4*s13*s23^2 +
           p1q*p2q^5*(-2*s12*s13^4*s23^2 - 2*s12*s13^3*s23^3) +
           p1q^2*p2q^4*(-4*s12*s13^4*s23^2 + 4*s12*s13^2*s23^4) +
           p1q^4*p2q^2*(4*s12*s13^3*s23^3 - 4*s12*s13*s23^5) +
           p1q^5*p2q*(-2*s12*s13^2*s23^4 - 2*s12*s13*s23^5) +
           p1q^3*p2q^3*(-2*s12*s13^4*s23^2 + 6*s12*s13^3*s23^3 +
             6*s12*s13^2*s23^4 - 2*s12*s13*s23^5) +
           p3q^4*(p1q^2*((2*s12^4*s13 - 2*s12^3*s13^2)*s23^2 - 6*s12^3*s13*
                s23^3) + p1q*p2q*((4*s12^4*s13 - 6*s12^3*s13^2)*s23^2 - 2*
                s12^3*s13*s23^3)) + p3q^3*(p1q*p2q^2*((2*s12^4*s13 -
                 12*s12^3*s13^2 + 6*s12^2*s13^3)*s23^2 + (-4*s12^3*s13 +
                 4*s12^2*s13^2)*s23^3) + p1q^2*p2q*((2*s12^4*s13 -
                 10*s12^3*s13^2 + 4*s12^2*s13^3)*s23^2 + (-14*s12^3*s13 +
                 4*s12^2*s13^2)*s23^3 + 4*s12^2*s13*s23^4) +
             p1q^3*(-2*s12^3*s13^2*s23^2 + (-6*s12^3*s13 + 4*s12^2*s13^2)*
                s23^3 + 6*s12^2*s13*s23^4)) +
           p3q*(p1q*p2q^4*((6*s12^2*s13^3 - 4*s12*s13^4)*s23^2 +
               (4*s12^2*s13^2 - 4*s12*s13^3)*s23^3) + p1q^2*p2q^3*
              ((10*s12^2*s13^3 - 6*s12*s13^4)*s23^2 + (8*s12^2*s13^2 +
                 2*s12*s13^3)*s23^3 + (4*s12^2*s13 + 8*s12*s13^2)*s23^4) +
             p1q^4*p2q*((4*s12^2*s13^2 + 4*s12*s13^3)*s23^3 + (6*s12^2*s13 -
                 2*s12*s13^2)*s23^4 - 6*s12*s13*s23^5) + p1q^3*p2q^2*
              ((4*s12^2*s13^3 - 2*s12*s13^4)*s23^2 + (8*s12^2*s13^2 +
                 10*s12*s13^3)*s23^3 + (10*s12^2*s13 + 8*s12*s13^2)*s23^4 - 4*
                s12*s13*s23^5) + p1q^5*(-2*s12*s13^2*s23^4 - 2*s12*s13*
                s23^5)) + p3q^2*(p1q*p2q^3*((-6*s12^3*s13^2 + 12*s12^2*
                  s13^3 - 2*s12*s13^4)*s23^2 + (-2*s12^3*s13 + 8*s12^2*
                  s13^2 - 2*s12*s13^3)*s23^3) + p1q^2*p2q^2*
              ((-8*s12^3*s13^2 + 14*s12^2*s13^3 - 2*s12*s13^4)*s23^2 +
               (-8*s12^3*s13 + 12*s12^2*s13^2 + 2*s12*s13^3)*s23^3 +
               (8*s12^2*s13 + 4*s12*s13^2)*s23^4) + p1q^4*(4*s12^2*s13^2*
                s23^3 + (6*s12^2*s13 - 2*s12*s13^2)*s23^4 - 2*s12*s13*
                s23^5) + p1q^3*p2q*((-2*s12^3*s13^2 + 4*s12^2*s13^3)*s23^2 +
               (-6*s12^3*s13 + 12*s12^2*s13^2 + 4*s12*s13^3)*s23^3 +
               (16*s12^2*s13 + 2*s12*s13^2)*s23^4 - 2*s12*s13*s23^5))) +
         ((p2q^4*(2*s12*s13^3 + 2*s13^4 + 2*s13^3*s23) +
            p3q^4*(-4*s12^4 - 6*s12^3*s13 - 2*s12^2*s13^2 + (-8*s12^3 -
                6*s12^2*s13)*s23 - 4*s12^2*s23^2) + p1q*p2q^3*
             (-3*s12^2*s13^2 - 2*s12*s13^3 + s13^4 + (-9*s12*s13^2 - 5*s13^3)*
               s23 - 6*s13^2*s23^2) + p1q^2*p2q^2*(-(s12^3*s13) -
              6*s12^2*s13^2 - 7*s12*s13^3 - 2*s13^4 + (3*s12^2*s13 -
                7*s12*s13^2 - 8*s13^3)*s23 + 10*s12*s13*s23^2 +
              6*s13*s23^3) + p1q^4*((-4*s12^2 - 6*s12*s13 - 2*s13^2)*s23^2 +
              (-8*s12 - 6*s13)*s23^3 - 4*s23^4) + p1q^3*p2q*
             ((s12^3 + 10*s12^2*s13 + 13*s12*s13^2 + 4*s13^3)*s23 +
              (17*s12*s13 + 13*s13^2)*s23^2 + (-3*s12 + 7*s13)*s23^3 -
              2*s23^4) + p3q^3*(p2q*(-2*s12^4 + 6*s12^3*s13 + 10*s12^2*
                 s13^2 + 2*s12*s13^3 + (-4*s12^3 + 14*s12^2*s13 +
                  10*s12*s13^2)*s23 + (-2*s12^2 + 8*s12*s13)*s23^2) +
              p1q*(-8*s12^4 - 13*s12^3*s13 - 6*s12^2*s13^2 - s12*s13^3 +
                (-8*s12^3 - 3*s12^2*s13 + s12*s13^2)*s23 +
                (8*s12^2 + 10*s12*s13)*s23^2 + 8*s12*s23^3)) +
            p3q^2*(p2q^2*(4*s12^3*s13 - 4*s12^2*s13^2 - 8*s12*s13^3 +
                (8*s12^2*s13 - 8*s12*s13^2 - 4*s13^3)*s23 +
                (4*s12*s13 - 4*s13^2)*s23^2) + p1q*p2q*(-4*s12^4 +
                6*s12^3*s13 + 13*s12^2*s13^2 + 4*s12*s13^3 + s13^4 +
                (-4*s12^3 + 26*s12^2*s13 + 23*s12*s13^2 + 5*s13^3)*s23 +
                (4*s12^2 + 28*s12*s13 + 12*s13^2)*s23^2 + (4*s12 + 8*s13)*
                 s23^3) + p1q^2*(-4*s12^4 - 7*s12^3*s13 - 4*s12^2*s13^2 -
                s12*s13^3 + (8*s12^3 + 16*s12^2*s13 + 7*s12*s13^2 + s13^3)*
                 s23 + (24*s12^2 + 19*s12*s13 + s13^2)*s23^2 +
                (8*s12 - 4*s13)*s23^3 - 4*s23^4)) +
            p3q*(p2q^3*(-4*s12^2*s13^2 + 4*s13^4 + (-6*s12*s13^2 + 2*s13^3)*
                 s23 - 2*s13^2*s23^2) + p1q*p2q^2*(3*s12^3*s13 -
                8*s12^2*s13^2 - 13*s12*s13^3 - 2*s13^4 + (7*s12^2*s13 -
                  19*s12*s13^2 - 14*s13^3)*s23 + (8*s12*s13 - 8*s13^2)*
                 s23^2 + 4*s13*s23^3) + p1q^3*((8*s12^3 + 13*s12^2*s13 +
                  6*s12*s13^2 + s13^3)*s23 + (8*s12^2 + 3*s12*s13 - s13^2)*
                 s23^2 + (-8*s12 - 10*s13)*s23^3 - 8*s23^4) +
              p1q^2*p2q*(-s12^4 + 2*s12^3*s13 + 2*s12^2*s13^2 - 2*s12*s13^3 -
                s13^4 + (4*s12^3 + 25*s12^2*s13 + 20*s12*s13^2 + 3*s13^3)*
                 s23 + (9*s12^2 + 37*s12*s13 + 20*s13^2)*s23^2 +
                (2*s12 + 14*s13)*s23^3 - 2*s23^4)))*
           Log(s13/(s12 + s13 + s23)))/(-2*p2q^4*s12*s13^4 +
           p3q^4*(2*s12^4*s13 + 2*s12^3*s13*s23) + p1q*p2q^3*
            (2*s12^2*s13^3 - 2*s12*s13^4 + 6*s12*s13^3*s23) +
           p1q^2*p2q^2*(2*s12^2*s13^3 + (-4*s12^2*s13^2 + 6*s12*s13^3)*s23 -
             6*s12*s13^2*s23^2) + p1q^4*(2*s12^2*s13*s23^2 +
             2*s12*s13*s23^3) + p1q^3*p2q*(-4*s12^2*s13^2*s23 +
             (2*s12^2*s13 - 6*s12*s13^2)*s23^2 + 2*s12*s13*s23^3) +
           p3q^3*(p2q*(2*s12^4*s13 - 6*s12^3*s13^2 + (2*s12^3*s13 -
                 4*s12^2*s13^2)*s23) + p1q*(4*s12^4*s13 - 4*s12^2*s13*
                s23^2)) + p3q^2*(p2q^2*(-6*s12^3*s13^2 + 6*s12^2*s13^3 +
               (-4*s12^2*s13^2 + 2*s12*s13^3)*s23) + p1q*p2q*
              (2*s12^4*s13 - 10*s12^3*s13^2 + (-2*s12^3*s13 - 8*s12^2*s13^2)*
                s23 + (-4*s12^2*s13 - 4*s12*s13^2)*s23^2) +
             p1q^2*(2*s12^4*s13 - 6*s12^3*s13*s23 - 6*s12^2*s13*s23^2 + 2*s12*
                s13*s23^3)) + p3q*(p2q^3*(6*s12^2*s13^3 - 2*s12*s13^4 + 2*s12*
                s13^3*s23) + p1q*p2q^2*(-4*s12^3*s13^2 + 8*s12^2*s13^3 +
               (-4*s12^2*s13^2 + 8*s12*s13^3)*s23 - 4*s12*s13^2*s23^2) +
             p1q^2*p2q*(-4*s12^3*s13^2 + (-4*s12^3*s13 - 8*s12^2*s13^2)*s23 +
               (-2*s12^2*s13 - 10*s12*s13^2)*s23^2 + 2*s12*s13*s23^3) +
             p1q^3*(-4*s12^3*s13*s23 + 4*s12*s13*s23^3))) +
         ((p3q^6*(36*s12^5 + 72*s12^4*s13 + 36*s12^3*s13^2 +
              (54*s12^4 + 54*s12^3*s13)*s23 + 18*s12^3*s23^2) +
            p2q^6*(36*s12^3*s13^2 + 72*s12^2*s13^3 + 36*s12*s13^4 +
              (72*s12^2*s13^2 + 90*s12*s13^3 + 18*s13^4)*s23 +
              (36*s12*s13^2 + 18*s13^3)*s23^2) + p1q*p2q^5*(36*s12^3*s13^2 +
              72*s12^2*s13^3 + 36*s12*s13^4 + (-72*s12^3*s13 - 108*s12^2*
                 s13^2 - 36*s12*s13^3)*s23 + (-144*s12^2*s13 - 198*s12*
                 s13^2 - 54*s13^3)*s23^2 + (-72*s12*s13 - 54*s13^2)*s23^3) +
            p1q^2*p2q^4*((-90*s12^3*s13 - 234*s12^2*s13^2 - 180*s12*s13^3 -
                36*s13^4)*s23 + (36*s12^3 - 36*s12^2*s13 - 144*s12*s13^2 -
                54*s13^3)*s23^2 + (72*s12^2 + 108*s12*s13 + 36*s13^2)*s23^3 +
              (36*s12 + 54*s13)*s23^4) + p1q^4*p2q^2*
             ((-63*s12^2 - 153*s12*s13 - 90*s13^2)*s23^3 + (-81*s12 -
                108*s13)*s23^4 - 18*s23^5) + p1q^3*p2q^3*
             ((54*s12^3 + 225*s12^2*s13 + 270*s12*s13^2 + 99*s13^3)*s23^2 +
              (72*s12^2 + 225*s12*s13 + 135*s13^2)*s23^3 + 18*s13*s23^4 -
              18*s23^5) + p1q^5*p2q*((27*s12 + 27*s13)*s23^4 + 27*s23^5) +
            p3q^5*(p2q*(144*s12^5 + 216*s12^4*s13 - 72*s12^2*s13^3 +
                (234*s12^4 + 144*s12^3*s13 - 90*s12^2*s13^2)*s23 +
                (90*s12^3 - 18*s12^2*s13)*s23^2) + p1q*(36*s12^5 +
                72*s12^4*s13 + 36*s12^3*s13^2 + (-54*s12^4 - 144*s12^3*s13 -
                  90*s12^2*s13^2)*s23 + (-144*s12^3 - 144*s12^2*s13)*s23^2 -
                54*s12^2*s23^3)) + p3q^4*(p2q^2*(216*s12^5 + 144*s12^4*s13 -
                324*s12^3*s13^2 - 216*s12^2*s13^3 + 36*s12*s13^4 +
                (378*s12^4 - 36*s12^3*s13 - 396*s12^2*s13^2 + 18*s12*s13^3)*
                 s23 + (162*s12^3 - 126*s12^2*s13 - 18*s12*s13^2)*s23^2) +
              p1q*p2q*(108*s12^5 + 144*s12^4*s13 - 36*s12^3*s13^2 -
                72*s12^2*s13^3 + (-216*s12^4 - 648*s12^3*s13 - 468*s12^2*
                   s13^2 - 36*s12*s13^3)*s23 + (-558*s12^3 - 630*s12^2*s13 -
                  72*s12*s13^2)*s23^2 + (-234*s12^2 - 36*s12*s13)*s23^3) +
              p1q^2*((-90*s12^4 - 144*s12^3*s13 - 36*s12^2*s13^2 +
                  18*s12*s13^3)*s23 + (-36*s12^3 + 72*s12^2*s13 +
                  90*s12*s13^2)*s23^2 + (108*s12^2 + 126*s12*s13)*s23^3 +
                54*s12*s23^4)) + p3q^2*(p2q^4*(36*s12^5 - 216*s12^4*s13 -
                324*s12^3*s13^2 + 144*s12^2*s13^3 + 216*s12*s13^4 +
                (72*s12^4 - 450*s12^3*s13 - 252*s12^2*s13^2 + 324*s12*s13^3 +
                  54*s13^4)*s23 + (36*s12^3 - 234*s12^2*s13 + 54*s12*s13^2 +
                  54*s13^3)*s23^2) + p1q*p2q^3*(36*s12^5 - 144*s12^4*s13 -
                288*s12^3*s13^2 + 108*s12*s13^4 + (-252*s12^4 - 1152*s12^3*
                   s13 - 1224*s12^2*s13^2 - 360*s12*s13^3 - 36*s13^4)*s23 +
                (-558*s12^3 - 1278*s12^2*s13 - 918*s12*s13^2 - 198*s13^3)*
                 s23^2 + (-270*s12^2 - 324*s12*s13 - 162*s13^2)*s23^3) +
              p1q^2*p2q^2*((-234*s12^4 - 522*s12^3*s13 - 486*s12^2*s13^2 -
                  234*s12*s13^3 - 36*s13^4)*s23 + (36*s12^3 + 288*s12^2*s13 +
                  90*s12*s13^2 - 54*s13^3)*s23^2 + (540*s12^2 + 738*s12*s13 +
                  144*s13^2)*s23^3 + (270*s12 + 162*s13)*s23^4) +
              p1q^3*p2q*((252*s12^3 + 477*s12^2*s13 + 252*s12*s13^2 +
                  27*s13^3)*s23^2 + (252*s12^2 + 261*s12*s13 + 63*s13^2)*
                 s23^3 + (-54*s12 - 18*s13)*s23^4 - 54*s23^5) +
              p1q^4*((-9*s12*s13 - 9*s13^2)*s23^3 + (-18*s12 - 27*s13)*
                 s23^4 - 18*s23^5)) + p3q^3*(p2q^3*(144*s12^5 - 144*s12^4*
                 s13 - 576*s12^3*s13^2 - 144*s12^2*s13^3 + 144*s12*s13^4 +
                (270*s12^4 - 432*s12^3*s13 - 576*s12^2*s13^2 + 144*s12*
                   s13^3 + 18*s13^4)*s23 + (126*s12^3 - 270*s12^2*s13 -
                  18*s12*s13^2 + 18*s13^3)*s23^2) + p1q*p2q^2*(108*s12^5 -
                288*s12^3*s13^2 - 144*s12^2*s13^3 + 36*s12*s13^4 +
                (-342*s12^4 - 1224*s12^3*s13 - 1080*s12^2*s13^2 -
                  216*s12*s13^3 - 18*s13^4)*s23 + (-828*s12^3 - 1224*s12^2*
                   s13 - 468*s12*s13^2 - 72*s13^3)*s23^2 + (-378*s12^2 -
                  180*s12*s13 - 54*s13^2)*s23^3) + p1q^2*p2q*(
                (-270*s12^4 - 504*s12^3*s13 - 288*s12^2*s13^2 - 72*s12*
                   s13^3 - 18*s13^4)*s23 + (-72*s12^3 + 216*s12^2*s13 +
                  198*s12*s13^2 - 18*s13^3)*s23^2 + (396*s12^2 + 504*s12*
                   s13 + 54*s13^2)*s23^3 + (198*s12 + 54*s13)*s23^4) +
              p1q^3*((63*s12^3 + 90*s12^2*s13 + 27*s12*s13^2)*s23^2 +
                (81*s12^2 + 27*s12*s13 - 18*s13^2)*s23^3 - 36*s13*s23^4 -
                18*s23^5)) + p3q*(p2q^5*(-72*s12^4*s13 + 216*s12^2*s13^3 +
                144*s12*s13^4 + (-144*s12^3*s13 + 90*s12^2*s13^2 +
                  288*s12*s13^3 + 54*s13^4)*s23 + (-72*s12^2*s13 +
                  90*s12*s13^2 + 54*s13^3)*s23^2) + p1q*p2q^4*(-72*s12^4*
                 s13 - 36*s12^3*s13^2 + 144*s12^2*s13^3 + 108*s12*s13^4 +
                (-72*s12^4 - 504*s12^3*s13 - 630*s12^2*s13^2 - 216*s12*
                   s13^3 - 18*s13^4)*s23 + (-144*s12^3 - 684*s12^2*s13 -
                  720*s12*s13^2 - 180*s13^3)*s23^2 + (-72*s12^2 -
                  252*s12*s13 - 162*s13^2)*s23^3) + p1q^2*p2q^3*(
                (-54*s12^4 - 252*s12^3*s13 - 468*s12^2*s13^2 - 324*s12*
                   s13^3 - 54*s13^4)*s23 + (108*s12^3 + 108*s12^2*s13 -
                  162*s12*s13^2 - 90*s13^3)*s23^2 + (324*s12^2 + 468*s12*
                   s13 + 126*s13^2)*s23^3 + (162*s12 + 162*s13)*s23^4) +
              p1q^3*p2q^2*((189*s12^3 + 450*s12^2*s13 + 333*s12*s13^2 +
                  72*s13^3)*s23^2 + (171*s12^2 + 315*s12*s13 + 144*s13^2)*
                 s23^3 + (-72*s12 + 18*s13)*s23^4 - 54*s23^5) +
              p1q^4*p2q*((-117*s12^2 - 126*s12*s13 - 9*s13^2)*s23^3 +
                (-135*s12 - 27*s13)*s23^4 - 18*s23^5) +
              p1q^5*((-9*s12 - 9*s13)*s23^4 - 9*s23^5)))*
           Log(s23/(s12 + s13 + s23)))/(p1q*p3q^5*(2*s12^4 + 2*s12^3*s13)*
            s23^2 + p1q*p2q^5*(2*s12^2*s13^2 + 2*s12*s13^3)*s23^2 -
           2*p1q^5*p2q*s12*s23^5 + p1q^2*p2q^4*((2*s12^2*s13^2 + 2*s12*s13^3)*
              s23^2 + (-4*s12^2*s13 - 6*s12*s13^2)*s23^3) +
           p1q^3*p2q^3*((-4*s12^2*s13 - 6*s12*s13^2)*s23^3 +
             (2*s12^2 + 6*s12*s13)*s23^4) + p1q^4*p2q^2*
            ((2*s12^2 + 6*s12*s13)*s23^4 - 2*s12*s23^5) +
           p3q^4*(p1q*p2q*(6*s12^4 + 2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
             p1q^2*((2*s12^4 + 2*s12^3*s13)*s23^2 + (-6*s12^3 - 4*s12^2*s13)*
                s23^3)) + p3q^3*(p1q*p2q^2*(6*s12^4 - 6*s12^3*s13 - 10*s12^2*
                s13^2 + 2*s12*s13^3)*s23^2 + p1q^2*p2q*
              ((4*s12^4 - 4*s12^2*s13^2)*s23^2 + (-16*s12^3 - 12*s12^2*s13 -
                 4*s12*s13^2)*s23^3) + p1q^3*((-6*s12^3 - 4*s12^2*s13)*
                s23^3 + (6*s12^2 + 2*s12*s13)*s23^4)) +
           p3q*(p1q*p2q^4*(-4*s12^3*s13 + 2*s12^2*s13^2 + 6*s12*s13^3)*
              s23^2 - 2*p1q^5*s12*s23^5 + p1q^2*p2q^3*((-4*s12^3*s13 +
                 4*s12*s13^3)*s23^2 + (-4*s12^3 - 12*s12^2*s13 -
                 16*s12*s13^2)*s23^3) + p1q^3*p2q^2*((-4*s12^3 -
                 8*s12^2*s13 - 10*s12*s13^2)*s23^3 + (10*s12^2 + 14*s12*s13)*
                s23^4) + p1q^4*p2q*((8*s12^2 + 8*s12*s13)*s23^4 - 4*s12*
                s23^5)) + p3q^2*(p1q*p2q^3*(2*s12^4 - 10*s12^3*s13 - 6*s12^2*
                s13^2 + 6*s12*s13^3)*s23^2 + p1q^2*p2q^2*
              ((2*s12^4 - 6*s12^3*s13 - 6*s12^2*s13^2 + 2*s12*s13^3)*s23^2 +
               (-14*s12^3 - 16*s12^2*s13 - 14*s12*s13^2)*s23^3) +
             p1q^3*p2q*((-10*s12^3 - 8*s12^2*s13 - 4*s12*s13^2)*s23^3 +
               (14*s12^2 + 10*s12*s13)*s23^4) + p1q^4*((6*s12^2 + 2*s12*s13)*
                s23^4 - 2*s12*s23^5)))) + Log(p2q/(p1q + p2q + p3q))*
        (((p3q^6*(18*s12^5*s13 + 18*s12^4*s13^2 + 18*s12^4*s13*s23) +
            p2q^6*(-18*s12^2*s13^4 - 18*s12*s13^5 + (-18*s12^2*s13^3 -
                54*s12*s13^4 - 18*s13^5)*s23 + (-36*s12*s13^3 - 36*s13^4)*s23^
                2 - 18*s13^3*s23^3) + p1q*p2q^5*(-36*s12^2*s13^4 -
              36*s12*s13^5 + (-54*s12*s13^4 - 18*s13^5)*s23 +
              (34*s12^2*s13^2 + 48*s12*s13^3 - 4*s13^4)*s23^2 +
              (66*s12*s13^2 + 46*s13^3)*s23^3 + 32*s13^2*s23^4) +
            p1q^2*p2q^4*(-18*s12^2*s13^4 - 18*s12*s13^5 + (36*s12^3*s13^2 +
                135*s12^2*s13^3 + 108*s12*s13^4 + 27*s13^5)*s23 +
              (35*s12^3*s13 + 201*s12^2*s13^2 + 320*s12*s13^3 + 118*s13^4)*
               s23^2 + (55*s12^2*s13 + 204*s12*s13^2 + 145*s13^3)*s23^3 +
              (10*s12*s13 + 44*s13^2)*s23^4 - 10*s13*s23^5) +
            p1q^4*p2q^2*((-45*s12^2*s13^2 - 81*s12*s13^3 - 36*s13^4)*s23^2 +
              (s12^3 - 39*s12^2*s13 - 140*s12*s13^2 - 91*s13^3)*s23^3 +
              (-s12^2 - 69*s12*s13 - 82*s13^2)*s23^4 + (-10*s12 - 35*s13)*s23^
                5 - 8*s23^6) + p1q^3*p2q^3*((36*s12^3*s13^2 + 117*s12^2*
                 s13^3 + 108*s12*s13^4 + 27*s13^5)*s23 + (35*s12^3*s13 +
                122*s12^2*s13^2 + 155*s12*s13^3 + 50*s13^4)*s23^2 +
              (s12^3 + 16*s12^2*s13 - 11*s12*s13^2 - 19*s13^3)*s23^3 +
              (s12^2 - 62*s12*s13 - 84*s13^2)*s23^4 + (-4*s12 - 46*s13)*s23^
                5 - 4*s23^6) + p1q^5*p2q*((9*s12*s13^2 + 9*s13^3)*s23^3 +
              (-2*s12^2 + 3*s12*s13 + 14*s13^2)*s23^4 + (-6*s12 + s13)*s23^
                5 - 4*s23^6) + p3q^5*(p2q*(54*s12^5*s13 - 54*s12^3*s13^3 +
                (54*s12^4*s13 - 54*s12^3*s13^2)*s23) + p1q*(18*s12^5*s13 -
                18*s12^3*s13^3 + (-36*s12^4*s13 - 72*s12^3*s13^2)*s23 +
                (2*s12^4 - 52*s12^3*s13)*s23^2 + 2*s12^3*s23^3)) +
            p3q^4*(p2q^2*(54*s12^5*s13 - 108*s12^4*s13^2 - 108*s12^3*s13^3 +
                54*s12^2*s13^4 + (36*s12^4*s13 - 198*s12^3*s13^2 +
                  36*s12^2*s13^3)*s23 + (-36*s12^3*s13 - 36*s12^2*s13^2)*
                 s23^2 - 18*s12^2*s13*s23^3) + p1q^2*(-18*s12^4*s13^2 -
                18*s12^3*s13^3 + (-63*s12^4*s13 - 54*s12^3*s13^2 +
                  27*s12^2*s13^3)*s23 + (s12^4 - 11*s12^3*s13 + 78*s12^2*
                   s13^2)*s23^2 + (-5*s12^3 + 45*s12^2*s13)*s23^3 -
                6*s12^2*s23^4) + p1q*p2q*(36*s12^5*s13 - 72*s12^4*s13^2 -
                72*s12^3*s13^3 + 36*s12^2*s13^4 + (-126*s12^4*s13 -
                  234*s12^3*s13^2 + 72*s12^2*s13^3)*s23 +
                (6*s12^4 - 178*s12^3*s13 + 14*s12^2*s13^2)*s23^2 +
                (4*s12^3 - 24*s12^2*s13)*s23^3 - 2*s12^2*s23^4)) +
            p3q^3*(p2q^3*(18*s12^5*s13 - 144*s12^4*s13^2 + 144*s12^2*s13^4 -
                18*s12*s13^5 + (-18*s12^4*s13 - 198*s12^3*s13^2 + 198*s12^2*
                   s13^3 + 18*s12*s13^4)*s23 + (-72*s12^3*s13 + 72*s12*s13^3)*
                 s23^2 + (-36*s12^2*s13 + 36*s12*s13^2)*s23^3) +
              p1q*p2q^2*(18*s12^5*s13 - 144*s12^4*s13^2 + 144*s12^2*s13^4 -
                18*s12*s13^5 + (-162*s12^4*s13 - 252*s12^3*s13^2 +
                  270*s12^2*s13^3)*s23 + (4*s12^4 - 206*s12^3*s13 +
                  118*s12^2*s13^2 + 76*s12*s13^3)*s23^2 + (-2*s12^3 +
                  4*s12^2*s13 + 98*s12*s13^2)*s23^3 + (-6*s12^2 + 40*s12*s13)*
                 s23^4) + p1q^2*p2q*(-36*s12^4*s13^2 + 36*s12^2*s13^4 +
                (-126*s12^4*s13 - 54*s12^3*s13^2 + 144*s12^2*s13^3)*s23 +
                (-s12^4 + 12*s12^3*s13 + 277*s12^2*s13^2 + 30*s12*s13^3)*
                 s23^2 + (-19*s12^3 + 161*s12^2*s13 + 70*s12*s13^2)*s23^3 +
                (-14*s12^2 + 44*s12*s13)*s23^4 + 4*s12*s23^5) +
              p1q^3*((45*s12^3*s13^2 + 54*s12^2*s13^3 + 9*s12*s13^4)*s23 +
                (-2*s12^4 + 74*s12^3*s13 + 120*s12^2*s13^2 + 8*s12*s13^3)*
                 s23^2 + (-8*s12^3 + 56*s12^2*s13 - 15*s12*s13^2)*s23^3 -
                8*s12*s13*s23^4 + 6*s12*s23^5)) +
            p3q*(p2q^5*(54*s12^3*s13^3 - 54*s12*s13^5 + (36*s12^3*s13^2 +
                  90*s12^2*s13^3 - 90*s12*s13^4 - 36*s13^5)*s23 +
                (72*s12^2*s13^2 - 72*s13^4)*s23^2 + (36*s12*s13^2 - 36*s13^3)*
                 s23^3) + p1q*p2q^4*(90*s12^3*s13^3 - 90*s12*s13^5 +
                (72*s12^3*s13^2 + 234*s12^2*s13^3 - 36*s12*s13^4 - 18*s13^5)*
                 s23 + (38*s12^3*s13 + 278*s12^2*s13^2 + 288*s12*s13^3 +
                  30*s13^4)*s23^2 + (82*s12^2*s13 + 278*s12*s13^2 +
                  114*s13^3)*s23^3 + (44*s12*s13 + 66*s13^2)*s23^4) +
              p1q^2*p2q^3*(36*s12^3*s13^3 - 36*s12*s13^5 + (-36*s12^4*s13 +
                  18*s12^3*s13^2 + 252*s12^2*s13^3 + 180*s12*s13^4 +
                  54*s13^5)*s23 + (s12^4 + 48*s12^3*s13 + 367*s12^2*s13^2 +
                  542*s12*s13^3 + 204*s13^4)*s23^2 + (5*s12^3 + 159*s12^2*
                   s13 + 374*s12*s13^2 + 222*s13^3)*s23^3 +
                (12*s12^2 + 56*s12*s13 + 48*s13^2)*s23^4 + (8*s12 - 24*s13)*
                 s23^5) + p1q^4*p2q*((-63*s12^2*s13^2 - 90*s12*s13^3 -
                  27*s13^4)*s23^2 + (5*s12^3 - 53*s12^2*s13 - 148*s12*s13^2 -
                  54*s13^3)*s23^3 + (12*s12^2 - 61*s12*s13 - 37*s13^2)*
                 s23^4 + (-3*s12 - 20*s13)*s23^5 - 10*s23^6) +
              p1q^3*p2q^2*((63*s12^3*s13^2 + 162*s12^2*s13^3 + 135*s12*
                   s13^4 + 36*s13^5)*s23 + (-s12^4 + 105*s12^3*s13 +
                  241*s12^2*s13^2 + 211*s12*s13^3 + 76*s13^4)*s23^2 +
                (4*s12^3 + 108*s12^2*s13 + 41*s12*s13^2 + 12*s13^3)*s23^3 +
                (21*s12^2 - 25*s12*s13 - 66*s13^2)*s23^4 + (10*s12 - 44*s13)*
                 s23^5 - 6*s23^6) + p1q^5*((9*s12*s13^2 + 9*s13^3)*s23^3 +
                (-2*s12^2 + 3*s12*s13 + 14*s13^2)*s23^4 + (-6*s12 + s13)*
                 s23^5 - 4*s23^6)) + p3q^2*(p2q^4*(-54*s12^4*s13^2 +
                108*s12^3*s13^3 + 108*s12^2*s13^4 - 54*s12*s13^5 +
                (-18*s12^4*s13 - 18*s12^3*s13^2 + 270*s12^2*s13^3 -
                  18*s12*s13^4 - 18*s13^5)*s23 + (-36*s12^3*s13 + 108*s12^2*
                   s13^2 + 108*s12*s13^3 - 36*s13^4)*s23^2 +
                (-18*s12^2*s13 + 72*s12*s13^2 - 18*s13^3)*s23^3) +
              p1q*p2q^3*(-72*s12^4*s13^2 + 144*s12^3*s13^3 + 144*s12^2*
                 s13^4 - 72*s12*s13^5 + (-72*s12^4*s13 - 18*s12^3*s13^2 +
                  432*s12^2*s13^3 + 18*s12*s13^4)*s23 + (-42*s12^3*s13 +
                  348*s12^2*s13^2 + 316*s12*s13^3 + 34*s13^4)*s23^2 +
                (-4*s12^3 + 110*s12^2*s13 + 310*s12*s13^2 + 68*s13^3)*s23^3 +
                (-4*s12^2 + 84*s12*s13 + 34*s13^2)*s23^4) + p1q^2*p2q^2*(
                -18*s12^4*s13^2 + 54*s12^3*s13^3 + 54*s12^2*s13^4 -
                18*s12*s13^5 + (-81*s12^4*s13 + 54*s12^3*s13^2 + 342*s12^2*
                   s13^3 + 144*s12*s13^4 + 45*s13^5)*s23 +
                (-s12^4 + 90*s12^3*s13 + 527*s12^2*s13^2 + 414*s12*s13^3 +
                  140*s13^4)*s23^2 + (-9*s12^3 + 274*s12^2*s13 + 348*s12*
                   s13^2 + 131*s13^3)*s23^3 + (4*s12^2 + 108*s12*s13 +
                  22*s13^2)*s23^4 + (12*s12 - 14*s13)*s23^5) +
              p1q^3*p2q*((90*s12^3*s13^2 + 153*s12^2*s13^3 + 90*s12*s13^4 +
                  27*s13^5)*s23 + (-3*s12^4 + 144*s12^3*s13 + 275*s12^2*
                   s13^2 + 136*s12*s13^3 + 62*s13^4)*s23^2 +
                (-5*s12^3 + 130*s12^2*s13 + 19*s12*s13^2 + 31*s13^3)*s23^3 +
                (20*s12^2 - 7*s12*s13 - 18*s13^2)*s23^4 + (20*s12 - 16*s13)*
                 s23^5 - 2*s23^6) + p1q^4*((-36*s12^2*s13^2 - 45*s12*s13^3 -
                  9*s13^4)*s23^2 + (4*s12^3 - 32*s12^2*s13 - 80*s12*s13^2 -
                  17*s13^3)*s23^3 + (13*s12^2 - 28*s12*s13 - 9*s13^2)*s23^4 +
                (7*s12 - 3*s13)*s23^5 - 2*s23^6)))*
           Log((p1q + p2q)/(p1q + p2q + p3q)))/(2*p1q*p3q^5*s12^4*s13*s23^2 +
           p1q*p2q^5*(-2*s12*s13^4*s23^2 - 2*s12*s13^3*s23^3) +
           p1q^2*p2q^4*(-4*s12*s13^4*s23^2 + 4*s12*s13^2*s23^4) +
           p1q^4*p2q^2*(4*s12*s13^3*s23^3 - 4*s12*s13*s23^5) +
           p1q^5*p2q*(-2*s12*s13^2*s23^4 - 2*s12*s13*s23^5) +
           p1q^3*p2q^3*(-2*s12*s13^4*s23^2 + 6*s12*s13^3*s23^3 +
             6*s12*s13^2*s23^4 - 2*s12*s13*s23^5) +
           p3q^4*(p1q^2*((2*s12^4*s13 - 2*s12^3*s13^2)*s23^2 - 6*s12^3*s13*
                s23^3) + p1q*p2q*((4*s12^4*s13 - 6*s12^3*s13^2)*s23^2 - 2*
                s12^3*s13*s23^3)) + p3q^3*(p1q*p2q^2*((2*s12^4*s13 -
                 12*s12^3*s13^2 + 6*s12^2*s13^3)*s23^2 + (-4*s12^3*s13 +
                 4*s12^2*s13^2)*s23^3) + p1q^2*p2q*((2*s12^4*s13 -
                 10*s12^3*s13^2 + 4*s12^2*s13^3)*s23^2 + (-14*s12^3*s13 +
                 4*s12^2*s13^2)*s23^3 + 4*s12^2*s13*s23^4) +
             p1q^3*(-2*s12^3*s13^2*s23^2 + (-6*s12^3*s13 + 4*s12^2*s13^2)*
                s23^3 + 6*s12^2*s13*s23^4)) +
           p3q*(p1q*p2q^4*((6*s12^2*s13^3 - 4*s12*s13^4)*s23^2 +
               (4*s12^2*s13^2 - 4*s12*s13^3)*s23^3) + p1q^2*p2q^3*
              ((10*s12^2*s13^3 - 6*s12*s13^4)*s23^2 + (8*s12^2*s13^2 +
                 2*s12*s13^3)*s23^3 + (4*s12^2*s13 + 8*s12*s13^2)*s23^4) +
             p1q^4*p2q*((4*s12^2*s13^2 + 4*s12*s13^3)*s23^3 + (6*s12^2*s13 -
                 2*s12*s13^2)*s23^4 - 6*s12*s13*s23^5) + p1q^3*p2q^2*
              ((4*s12^2*s13^3 - 2*s12*s13^4)*s23^2 + (8*s12^2*s13^2 +
                 10*s12*s13^3)*s23^3 + (10*s12^2*s13 + 8*s12*s13^2)*s23^4 - 4*
                s12*s13*s23^5) + p1q^5*(-2*s12*s13^2*s23^4 - 2*s12*s13*
                s23^5)) + p3q^2*(p1q*p2q^3*((-6*s12^3*s13^2 + 12*s12^2*
                  s13^3 - 2*s12*s13^4)*s23^2 + (-2*s12^3*s13 + 8*s12^2*
                  s13^2 - 2*s12*s13^3)*s23^3) + p1q^2*p2q^2*
              ((-8*s12^3*s13^2 + 14*s12^2*s13^3 - 2*s12*s13^4)*s23^2 +
               (-8*s12^3*s13 + 12*s12^2*s13^2 + 2*s12*s13^3)*s23^3 +
               (8*s12^2*s13 + 4*s12*s13^2)*s23^4) + p1q^4*(4*s12^2*s13^2*
                s23^3 + (6*s12^2*s13 - 2*s12*s13^2)*s23^4 - 2*s12*s13*
                s23^5) + p1q^3*p2q*((-2*s12^3*s13^2 + 4*s12^2*s13^3)*s23^2 +
               (-6*s12^3*s13 + 12*s12^2*s13^2 + 4*s12*s13^3)*s23^3 +
               (16*s12^2*s13 + 2*s12*s13^2)*s23^4 - 2*s12*s13*s23^5))) +
         ((p2q^5*(-18*s12*s13^3 - 18*s13^4 - 18*s13^3*s23) +
            p3q^5*(-18*s12^3*s13 - 18*s12^2*s13^2 + (-18*s12^3 -
                36*s12^2*s13)*s23 - 18*s12^2*s23^2) + p1q*p2q^4*
             (-18*s12*s13^3 - 18*s13^4 + (36*s12*s13^2 + 18*s13^3)*s23 +
              36*s13^2*s23^2) + p1q^3*p2q^2*((-9*s12^2 - 45*s12*s13 -
                36*s13^2)*s23^2 + (-9*s12 - 36*s13)*s23^3) +
            p1q^2*p2q^3*((9*s12^2*s13 + 54*s12*s13^2 + 45*s13^3)*s23 +
              (-9*s12*s13 + 27*s13^2)*s23^2 - 18*s13*s23^3) +
            p1q^4*p2q*((9*s12 + 9*s13)*s23^3 + 9*s23^4) +
            p3q^4*(p2q*(-54*s12^3*s13 - 18*s12^2*s13^2 + 36*s12*s13^3 +
                (-36*s12^3 - 54*s12^2*s13 + 72*s12*s13^2)*s23 +
                (-36*s12^2 + 36*s12*s13)*s23^2) + p1q*(-18*s12^3*s13 -
                18*s12^2*s13^2 + (18*s12^2*s13 + 36*s12*s13^2)*s23 +
                (36*s12^2 + 72*s12*s13)*s23^2 + 36*s12*s23^3)) +
            p3q^2*(p2q^3*(-18*s12^3*s13 + 90*s12^2*s13^2 + 54*s12*s13^3 -
                54*s13^4 + (18*s12^2*s13 + 108*s12*s13^2 - 90*s13^3)*s23 +
                (36*s12*s13 - 36*s13^2)*s23^2) + p1q*p2q^2*(-18*s12^3*s13 +
                54*s12^2*s13^2 + 54*s12*s13^3 - 18*s13^4 +
                (18*s12^3 + 108*s12^2*s13 + 270*s12*s13^2 + 72*s13^3)*s23 +
                (54*s12^2 + 216*s12*s13 + 162*s13^2)*s23^2 +
                (36*s12 + 72*s13)*s23^3) + p1q^3*((-36*s12^2 - 81*s12*s13 -
                  45*s13^2)*s23^2 + (-72*s12 - 81*s13)*s23^3 - 36*s23^4) +
              p1q^2*p2q*((36*s12^3 + 135*s12^2*s13 + 162*s12*s13^2 +
                  63*s13^3)*s23 + (72*s12^2 + 135*s12*s13 + 63*s13^2)*s23^2 -
                36*s13*s23^3 - 36*s23^4)) + p3q^3*(p2q^2*(-54*s12^3*s13 +
                54*s12^2*s13^2 + 90*s12*s13^3 - 18*s13^4 +
                (-18*s12^3 + 162*s12*s13^2 - 36*s13^3)*s23 +
                (-18*s12^2 + 72*s12*s13 - 18*s13^2)*s23^2) +
              p1q*p2q*(-36*s12^3*s13 + 36*s12*s13^3 + (18*s12^3 + 108*s12^2*
                   s13 + 198*s12*s13^2 + 36*s13^3)*s23 + (90*s12^2 +
                  234*s12*s13 + 72*s13^2)*s23^2 + (72*s12 + 36*s13)*s23^3) +
              p1q^2*((27*s12^3 + 108*s12^2*s13 + 117*s12*s13^2 + 36*s13^3)*
                 s23 + (63*s12^2 + 135*s12*s13 + 54*s13^2)*s23^2 +
                18*s12*s23^3 - 18*s23^4)) + p3q*(p2q^4*(36*s12^2*s13^2 -
                18*s12*s13^3 - 54*s13^4 + (18*s12*s13^2 - 72*s13^3)*s23 -
                18*s13^2*s23^2) + p1q*p2q^3*(36*s12^2*s13^2 - 36*s13^4 +
                (18*s12^2*s13 + 144*s12*s13^2 + 54*s13^3)*s23 +
                (54*s12*s13 + 126*s13^2)*s23^2 + 36*s13*s23^3) +
              p1q^3*p2q*((-27*s12^2 - 90*s12*s13 - 63*s13^2)*s23^2 +
                (-45*s12 - 81*s13)*s23^3 - 18*s23^4) + p1q^2*p2q^2*(
                (27*s12^3 + 90*s12^2*s13 + 153*s12*s13^2 + 90*s13^3)*s23 +
                (45*s12^2 + 63*s12*s13 + 72*s13^2)*s23^2 - 36*s13*s23^3 -
                18*s23^4) + p1q^4*((9*s12 + 9*s13)*s23^3 + 9*s23^4)))*
           Log(p3q/(p1q + p2q + p3q)))/(2*p1q*p3q^4*s12^2*s13*s23^2 +
           2*p1q*p2q^4*s13^3*s23^2 + 2*p1q^4*p2q*s13*s23^4 +
           p1q^2*p2q^3*(2*s13^3*s23^2 - 4*s13^2*s23^3) +
           p1q^3*p2q^2*(-4*s13^2*s23^3 + 2*s13*s23^4) +
           p3q^3*(p1q*p2q*(4*s12^2*s13 - 4*s12*s13^2)*s23^2 +
             p1q^2*(2*s12^2*s13*s23^2 - 4*s12*s13*s23^3)) +
           p3q^2*(p1q*p2q^2*(2*s12^2*s13 - 8*s12*s13^2 + 2*s13^3)*s23^2 +
             p1q^2*p2q*((2*s12^2*s13 - 4*s12*s13^2)*s23^2 + (-8*s12*s13 -
                 4*s13^2)*s23^3) + p1q^3*(-4*s12*s13*s23^3 + 2*s13*s23^4)) +
           p3q*(p1q*p2q^3*(-4*s12*s13^2 + 4*s13^3)*s23^2 +
             2*p1q^4*s13*s23^4 + p1q^2*p2q^2*((-4*s12*s13^2 + 2*s13^3)*
                s23^2 + (-4*s12*s13 - 8*s13^2)*s23^3) + p1q^3*p2q*
              ((-4*s12*s13 - 4*s13^2)*s23^3 + 4*s13*s23^4))) +
         ((p2q^6*(18*s12^2*s13^4 + 18*s12*s13^5 + 18*s12*s13^4*s23) +
            p3q^6*(-18*s12^5*s13 - 18*s12^4*s13^2 + (-36*s12^5 -
                90*s12^4*s13 - 36*s12^3*s13^2)*s23 + (-72*s12^4 -
                72*s12^3*s13)*s23^2 - 36*s12^3*s23^3) +
            p1q*p2q^5*(-18*s12^3*s13^3 + 18*s12*s13^5 + (-72*s12^2*s13^3 -
                36*s12*s13^4)*s23 + (-56*s12*s13^3 - 2*s13^4)*s23^2 -
              2*s13^3*s23^3) + p1q^2*p2q^4*(-18*s12^3*s13^3 -
              18*s12^2*s13^4 + (9*s12^3*s13^2 - 90*s12^2*s13^3 -
                81*s12*s13^4)*s23 + (57*s12^2*s13^2 - 34*s12*s13^3 - s13^4)*
               s23^2 + (54*s12*s13^2 + 5*s13^3)*s23^3 + 6*s13^2*s23^4) +
            p1q^3*p2q^3*((27*s12^4*s13 + 90*s12^3*s13^2 + 63*s12^2*s13^3)*
               s23 + (55*s12^3*s13 + 213*s12^2*s13^2 + 124*s12*s13^3 +
                2*s13^4)*s23^2 + (24*s12^2*s13 + 124*s12*s13^2 + 8*s13^3)*s23^
                3 - 10*s12*s13*s23^4 - 6*s13*s23^5) + p1q^4*p2q^2*
             ((-9*s12^4 - 63*s12^3*s13 - 54*s12^2*s13^2)*s23^2 +
              (-28*s12^3 - 145*s12^2*s13 - 76*s12*s13^2 - 4*s13^3)*s23^3 +
              (-27*s12^2 - 89*s12*s13 - 13*s13^2)*s23^4 + (-6*s12 - 7*s13)*
               s23^5 + 2*s23^6) + p1q^5*p2q*((9*s12^3 + 9*s12^2*s13)*s23^3 +
              (22*s12^2 + 15*s12*s13 + 2*s13^2)*s23^4 + (17*s12 + 6*s13)*s23^
                5 + 4*s23^6) + p3q^5*(p2q*(-54*s12^5*s13 + 54*s12^3*s13^3 +
                (-72*s12^5 - 126*s12^4*s13 + 126*s12^3*s13^2 + 72*s12^2*
                   s13^3)*s23 + (-144*s12^4 + 144*s12^2*s13^2)*s23^2 +
                (-72*s12^3 + 72*s12^2*s13)*s23^3) + p1q*(-36*s12^5*s13 -
                36*s12^4*s13^2 + (-36*s12^5 - 90*s12^4*s13 - 18*s12^3*s13^2)*
                 s23 + (4*s12^4 + 96*s12^3*s13 + 74*s12^2*s13^2)*s23^2 +
                (116*s12^3 + 150*s12^2*s13)*s23^3 + 76*s12^2*s23^4)) +
            p3q^4*(p2q^2*(-54*s12^5*s13 + 108*s12^4*s13^2 + 108*s12^3*s13^3 -
                54*s12^2*s13^4 + (-36*s12^5 + 18*s12^4*s13 + 378*s12^3*
                   s13^2 + 18*s12^2*s13^3 - 36*s12*s13^4)*s23 +
                (-72*s12^4 + 216*s12^3*s13 + 216*s12^2*s13^2 - 72*s12*s13^3)*
                 s23^2 + (-36*s12^3 + 144*s12^2*s13 - 36*s12*s13^2)*s23^3) +
              p1q*p2q*(-90*s12^5*s13 + 90*s12^3*s13^3 + (-72*s12^5 -
                  108*s12^4*s13 + 252*s12^3*s13^2 + 108*s12^2*s13^3)*s23 +
                (6*s12^4 + 414*s12^3*s13 + 460*s12^2*s13^2 + 70*s12*s13^3)*
                 s23^2 + (228*s12^3 + 496*s12^2*s13 + 134*s12*s13^2)*s23^3 +
                (150*s12^2 + 64*s12*s13)*s23^4) + p1q^2*(-18*s12^5*s13 -
                18*s12^4*s13^2 + (27*s12^5 + 90*s12^4*s13 + 99*s12^3*s13^2 +
                  18*s12^2*s13^3)*s23 + (134*s12^4 + 301*s12^3*s13 +
                  132*s12^2*s13^2 + s12*s13^3)*s23^2 + (143*s12^3 +
                  111*s12^2*s13 - 37*s12*s13^2)*s23^3 + (-8*s12^2 -
                  82*s12*s13)*s23^4 - 44*s12*s23^5)) +
            p3q^3*(p2q^3*(-18*s12^5*s13 + 144*s12^4*s13^2 - 144*s12^2*s13^4 +
                18*s12*s13^5 + (54*s12^4*s13 + 234*s12^3*s13^2 - 234*s12^2*
                   s13^3 - 54*s12*s13^4)*s23 + (144*s12^3*s13 - 144*s12*
                   s13^3)*s23^2 + (72*s12^2*s13 - 72*s12*s13^2)*s23^3) +
              p1q*p2q^2*(-72*s12^5*s13 + 144*s12^4*s13^2 + 144*s12^3*s13^3 -
                72*s12^2*s13^4 + (-36*s12^5 + 54*s12^4*s13 + 594*s12^3*
                   s13^2 + 54*s12^2*s13^3 - 90*s12*s13^4)*s23 +
                (2*s12^4 + 548*s12^3*s13 + 678*s12^2*s13^2 + 24*s12*s13^3)*
                 s23^2 + (112*s12^3 + 554*s12^2*s13 + 250*s12*s13^2 +
                  4*s13^3)*s23^3 + (74*s12^2 + 132*s12*s13 + 4*s13^2)*
                 s23^4) + p1q^2*p2q*(-36*s12^5*s13 + 36*s12^3*s13^3 +
                (18*s12^5 + 90*s12^4*s13 + 198*s12^3*s13^2 + 36*s12^2*s13^3 -
                  18*s12*s13^4)*s23 + (192*s12^4 + 547*s12^3*s13 +
                  425*s12^2*s13^2 + 87*s12*s13^3 - s13^4)*s23^2 +
                (246*s12^3 + 319*s12^2*s13 + 84*s12*s13^2 - 5*s13^3)*s23^3 +
                (-12*s12^2 - 110*s12*s13 - 12*s13^2)*s23^4 +
                (-84*s12 - 8*s13)*s23^5) + p1q^3*((27*s12^5 + 90*s12^4*s13 +
                  81*s12^3*s13^2 + 18*s12^2*s13^3)*s23 + (4*s12^4 +
                  16*s12^3*s13 - 23*s12^2*s13^2 - 17*s12*s13^3)*s23^2 +
                (-125*s12^3 - 205*s12^2*s13 - 97*s12*s13^2 - s13^3)*s23^3 +
                (-150*s12^2 - 127*s12*s13 - s13^2)*s23^4 + (-44*s12 + 4*s13)*
                 s23^5 + 4*s23^6)) + p3q^2*(p2q^4*(54*s12^4*s13^2 -
                108*s12^3*s13^3 - 108*s12^2*s13^4 + 54*s12*s13^5 +
                (18*s12^3*s13^2 - 234*s12^2*s13^3 + 18*s12*s13^4)*s23 +
                (-72*s12^2*s13^2 - 72*s12*s13^3)*s23^2 - 36*s12*s13^2*
                 s23^3) + p1q*p2q^3*(-18*s12^5*s13 + 144*s12^4*s13^2 -
                144*s12^2*s13^4 + 18*s12*s13^5 + (72*s12^4*s13 + 360*s12^3*
                   s13^2 - 288*s12^2*s13^3 - 216*s12*s13^4)*s23 +
                (230*s12^3*s13 + 260*s12^2*s13^2 - 226*s12*s13^3 - 4*s13^4)*
                 s23^2 + (208*s12^2*s13 + 86*s12*s13^2 + 2*s13^3)*s23^3 +
                (68*s12*s13 + 6*s13^2)*s23^4) + p1q^2*p2q^2*(-18*s12^5*s13 +
                54*s12^4*s13^2 + 54*s12^3*s13^3 - 18*s12^2*s13^4 +
                (9*s12^5 + 126*s12^4*s13 + 432*s12^3*s13^2 + 144*s12^2*
                   s13^3 - 63*s12*s13^4)*s23 + (94*s12^4 + 531*s12^3*s13 +
                  859*s12^2*s13^2 + 261*s12*s13^3 + s13^4)*s23^2 +
                (121*s12^3 + 435*s12^2*s13 + 419*s12*s13^2 + 9*s13^3)*s23^3 +
                (-4*s12^2 + 36*s12*s13 - 4*s13^2)*s23^4 + (-40*s12 - 12*s13)*
                 s23^5) + p1q^3*p2q*((18*s12^5 + 81*s12^4*s13 + 126*s12^3*
                   s13^2 + 81*s12^2*s13^3 + 18*s12*s13^4)*s23 +
                (23*s12^4 + 59*s12^3*s13 + 119*s12^2*s13^2 + 84*s12*s13^3 +
                  s13^4)*s23^2 + (-102*s12^3 - 302*s12^2*s13 - 126*s12*
                   s13^2 - 4*s13^3)*s23^3 + (-195*s12^2 - 290*s12*s13 -
                  21*s13^2)*s23^4 + (-82*s12 - 10*s13)*s23^5 + 6*s23^6) +
              p1q^4*((-54*s12^4 - 117*s12^3*s13 - 81*s12^2*s13^2 -
                  18*s12*s13^3)*s23^2 + (-89*s12^3 - 121*s12^2*s13 -
                  42*s12*s13^2 - s13^3)*s23^3 + (-8*s12^2 + 6*s12*s13 +
                  s13^2)*s23^4 + (35*s12 + 10*s13)*s23^5 + 8*s23^6)) +
            p3q*(p2q^5*(-54*s12^3*s13^3 + 54*s12*s13^5 + (-54*s12^2*s13^3 +
                  54*s12*s13^4)*s23) + p1q*p2q^4*(36*s12^4*s13^2 -
                72*s12^3*s13^3 - 72*s12^2*s13^4 + 36*s12*s13^5 +
                (36*s12^3*s13^2 - 306*s12^2*s13^3 - 162*s12*s13^4)*s23 +
                (-32*s12^2*s13^2 - 236*s12*s13^3 - 6*s13^4)*s23^2 +
                (-30*s12*s13^2 - 4*s13^3)*s23^3 + 2*s13^2*s23^4) +
              p1q^2*p2q^3*(36*s12^4*s13^2 - 36*s12^2*s13^4 +
                (54*s12^4*s13 + 234*s12^3*s13^2 - 36*s12^2*s13^3 -
                  144*s12*s13^4)*s23 + (177*s12^3*s13 + 515*s12^2*s13^2 +
                  105*s12*s13^3 + s13^4)*s23^2 + (191*s12^2*s13 +
                  334*s12*s13^2 + 19*s13^3)*s23^3 + (64*s12*s13 + 14*s13^2)*
                 s23^4 - 4*s13*s23^5) + p1q^3*p2q^2*((9*s12^5 + 72*s12^4*
                   s13 + 189*s12^3*s13^2 + 144*s12^2*s13^3 + 18*s12*s13^4)*
                 s23 + (19*s12^4 + 98*s12^3*s13 + 355*s12^2*s13^2 +
                  225*s12*s13^3 + 3*s13^4)*s23^2 + (-31*s12^3 - 127*s12^2*
                   s13 + 95*s12*s13^2 + 5*s13^3)*s23^3 + (-81*s12^2 -
                  173*s12*s13 - 20*s13^2)*s23^4 + (-38*s12 - 20*s13)*s23^5 +
                2*s23^6) + p1q^5*((27*s12^3 + 45*s12^2*s13 + 18*s12*s13^2)*
                 s23^3 + (58*s12^2 + 51*s12*s13 + 2*s13^2)*s23^4 +
                (35*s12 + 6*s13)*s23^5 + 4*s23^6) + p1q^4*p2q*(
                (-27*s12^4 - 126*s12^3*s13 - 135*s12^2*s13^2 - 36*s12*s13^3)*
                 s23^2 + (-63*s12^3 - 266*s12^2*s13 - 172*s12*s13^2 -
                  5*s13^3)*s23^3 + (-35*s12^2 - 137*s12*s13 - 12*s13^2)*
                 s23^4 + (11*s12 + 3*s13)*s23^5 + 10*s23^6)))*
           Log((p1q + p3q)/(p1q + p2q + p3q)))/(-2*p1q*p2q^5*s12*s13^4*
            s23^2 + p1q*p3q^5*(2*s12^4*s13*s23^2 + 2*s12^3*s13*s23^3) +
           p1q^2*p2q^4*((2*s12^2*s13^3 - 2*s12*s13^4)*s23^2 +
             6*s12*s13^3*s23^3) + p1q^3*p2q^3*(2*s12^2*s13^3*s23^2 +
             (-4*s12^2*s13^2 + 6*s12*s13^3)*s23^3 - 6*s12*s13^2*s23^4) +
           p1q^5*p2q*(2*s12^2*s13*s23^4 + 2*s12*s13*s23^5) +
           p1q^4*p2q^2*(-4*s12^2*s13^2*s23^3 + (2*s12^2*s13 - 6*s12*s13^2)*
              s23^4 + 2*s12*s13*s23^5) + p3q^4*
            (p1q*p2q*((4*s12^4*s13 - 6*s12^3*s13^2)*s23^2 + (4*s12^3*s13 -
                 4*s12^2*s13^2)*s23^3) + p1q^2*(4*s12^4*s13*s23^2 - 4*s12^2*
                s13*s23^4)) + p3q^3*(p1q*p2q^2*((2*s12^4*s13 - 12*s12^3*
                  s13^2 + 6*s12^2*s13^3)*s23^2 + (2*s12^3*s13 - 8*s12^2*
                  s13^2 + 2*s12*s13^3)*s23^3) + p1q^2*p2q*
              ((6*s12^4*s13 - 10*s12^3*s13^2)*s23^2 + (-2*s12^3*s13 -
                 8*s12^2*s13^2)*s23^3 + (-8*s12^2*s13 - 4*s12*s13^2)*s23^4) +
             p1q^3*(2*s12^4*s13*s23^2 - 6*s12^3*s13*s23^3 - 6*s12^2*s13*
                s23^4 + 2*s12*s13*s23^5)) +
           p3q^2*(p1q*p2q^3*((-6*s12^3*s13^2 + 12*s12^2*s13^3 - 2*s12*s13^4)*
                s23^2 + (-4*s12^2*s13^2 + 4*s12*s13^3)*s23^3) +
             p1q^2*p2q^2*((2*s12^4*s13 - 14*s12^3*s13^2 + 8*s12^2*s13^3)*
                s23^2 + (-2*s12^3*s13 - 12*s12^2*s13^2 + 8*s12*s13^3)*s23^3 +
               (-4*s12^2*s13 - 8*s12*s13^2)*s23^4) + p1q^4*(-4*s12^3*s13*
                s23^3 + 4*s12*s13*s23^5) + p1q^3*p2q*((2*s12^4*s13 -
                 4*s12^3*s13^2)*s23^2 + (-10*s12^3*s13 - 8*s12^2*s13^2)*
                s23^3 + (-8*s12^2*s13 - 10*s12*s13^2)*s23^4 + 4*s12*s13*
                s23^5)) + p3q*(p1q*p2q^4*((6*s12^2*s13^3 - 4*s12*s13^4)*
                s23^2 + 2*s12*s13^3*s23^3) + p1q^2*p2q^3*
              ((-4*s12^3*s13^2 + 10*s12^2*s13^3 - 2*s12*s13^4)*s23^2 +
               (-4*s12^2*s13^2 + 14*s12*s13^3)*s23^3 - 4*s12*s13^2*s23^4) +
             p1q^5*(2*s12^2*s13*s23^4 + 2*s12*s13*s23^5) +
             p1q^3*p2q^2*((-4*s12^3*s13^2 + 2*s12^2*s13^3)*s23^2 +
               (-4*s12^3*s13 - 12*s12^2*s13^2 + 6*s12*s13^3)*s23^3 +
               (-2*s12^2*s13 - 16*s12*s13^2)*s23^4 + 2*s12*s13*s23^5) +
             p1q^4*p2q*((-4*s12^3*s13 - 4*s12^2*s13^2)*s23^3 + (2*s12^2*s13 -
                 6*s12*s13^2)*s23^4 + 6*s12*s13*s23^5))) +
         ((p3q^6*(-18*s12^4*s13 - 36*s12^3*s13^2 - 18*s12^2*s13^3 +
              (-36*s12^3*s13 - 36*s12^2*s13^2)*s23 - 18*s12^2*s13*s23^2) +
            p2q^6*(-18*s12^2*s13^3 - 36*s12*s13^4 - 18*s13^5 +
              (-36*s12*s13^3 - 36*s13^4)*s23 - 18*s13^3*s23^2) +
            p1q*p2q^5*(-18*s12^2*s13^3 - 36*s12*s13^4 - 18*s13^5 +
              (54*s12^2*s13^2 + 72*s12*s13^3 + 18*s13^4)*s23 +
              (108*s12*s13^2 + 90*s13^3)*s23^2 + 54*s13^2*s23^3) +
            p1q^2*p2q^4*((-27*s12^3*s13 - 27*s12^2*s13^2 + 27*s12*s13^3 +
                27*s13^4)*s23 + (-81*s12^2*s13 - 54*s12*s13^2 + 27*s13^3)*s23^
                2 + (-108*s12*s13 - 54*s13^2)*s23^3 - 54*s13*s23^4) +
            p1q^4*p2q^2*((-9*s12^2 - 54*s12*s13 - 45*s13^2)*s23^3 +
              (9*s12 - 27*s13)*s23^4 + 18*s23^5) + p1q^3*p2q^3*
             ((9*s12^3 + 36*s12^2*s13 + 45*s12*s13^2 + 18*s13^3)*s23^2 +
              (27*s12^2 + 9*s12*s13 - 18*s13^2)*s23^3 + (36*s12 - 18*s13)*s23^
                4 + 18*s23^5) + p1q^5*p2q*((18*s12 + 18*s13)*s23^4 +
              18*s23^5) + p3q^5*(p2q*(-72*s12^4*s13 - 108*s12^3*s13^2 +
                36*s12*s13^4 + (-144*s12^3*s13 - 72*s12^2*s13^2 +
                  72*s12*s13^3)*s23 + (-72*s12^2*s13 + 36*s12*s13^2)*s23^2) +
              p1q*(-18*s12^4*s13 - 36*s12^3*s13^2 - 18*s12^2*s13^3 +
                (36*s12^2*s13^2 + 36*s12*s13^3)*s23 + (54*s12^2*s13 +
                  72*s12*s13^2)*s23^2 + 36*s12*s13*s23^3)) +
            p3q^4*(p2q^2*(-108*s12^4*s13 - 72*s12^3*s13^2 + 162*s12^2*s13^3 +
                108*s12*s13^4 - 18*s13^5 + (-216*s12^3*s13 + 72*s12^2*s13^2 +
                  252*s12*s13^3 - 36*s13^4)*s23 + (-108*s12^2*s13 +
                  144*s12*s13^2 - 18*s13^3)*s23^2) + p1q*p2q*(-54*s12^4*s13 -
                72*s12^3*s13^2 + 18*s12^2*s13^3 + 36*s12*s13^4 +
                (18*s12^3*s13 + 252*s12^2*s13^2 + 270*s12*s13^3 + 36*s13^4)*
                 s23 + (18*s12^3 + 234*s12^2*s13 + 378*s12*s13^2 + 72*s13^3)*
                 s23^2 + (18*s12^2 + 144*s12*s13 + 36*s13^2)*s23^3) +
              p1q^2*((9*s12^4 + 27*s12^3*s13 - 9*s12^2*s13^2 - 63*s12*s13^3 -
                  36*s13^4)*s23 + (-9*s12^3 - 36*s12^2*s13 - 117*s12*s13^2 -
                  90*s13^3)*s23^2 + (-18*s12^2 - 54*s12*s13 - 72*s13^2)*
                 s23^3 - 18*s13*s23^4)) + p3q^3*(p2q^3*(-72*s12^4*s13 +
                72*s12^3*s13^2 + 288*s12^2*s13^3 + 72*s12*s13^4 - 72*s13^5 +
                (-144*s12^3*s13 + 288*s12^2*s13^2 + 288*s12*s13^3 -
                  144*s13^4)*s23 + (-72*s12^2*s13 + 216*s12*s13^2 - 72*s13^3)*
                 s23^2) + p1q*p2q^2*(-54*s12^4*s13 + 144*s12^2*s13^3 +
                72*s12*s13^4 - 18*s13^5 + (54*s12^3*s13 + 594*s12^2*s13^2 +
                  666*s12*s13^3 + 126*s13^4)*s23 + (36*s12^3 + 324*s12^2*
                   s13 + 756*s12*s13^2 + 288*s13^3)*s23^2 +
                (36*s12^2 + 180*s12*s13 + 144*s13^2)*s23^3) +
              p1q^2*p2q*((-9*s12^4 - 18*s12^3*s13 - 54*s12^2*s13^2 -
                  90*s12*s13^3 - 45*s13^4)*s23 + (-27*s12^3 - 135*s12^2*s13 -
                  297*s12*s13^2 - 189*s13^3)*s23^2 + (-54*s12^2 -
                  216*s12*s13 - 216*s13^2)*s23^3 + (-36*s12 - 72*s13)*
                 s23^4) + p1q^3*((-36*s12^3 - 45*s12^2*s13 + 18*s12*s13^2 +
                  27*s13^3)*s23^2 + (63*s12*s13 + 63*s13^2)*s23^3 +
                (36*s12 + 36*s13)*s23^4)) + p3q^2*(p2q^4*(-18*s12^4*s13 +
                108*s12^3*s13^2 + 162*s12^2*s13^3 - 72*s12*s13^4 -
                108*s13^5 + (-36*s12^3*s13 + 252*s12^2*s13^2 + 72*s12*s13^3 -
                  216*s13^4)*s23 + (-18*s12^2*s13 + 144*s12*s13^2 -
                  108*s13^3)*s23^2) + p1q*p2q^3*(-18*s12^4*s13 +
                72*s12^3*s13^2 + 144*s12^2*s13^3 - 54*s13^5 +
                (54*s12^3*s13 + 630*s12^2*s13^2 + 738*s12*s13^3 + 162*s13^4)*
                 s23 + (18*s12^3 + 162*s12^2*s13 + 774*s12*s13^2 + 450*s13^3)*
                 s23^2 + (18*s12^2 + 72*s12*s13 + 234*s13^2)*s23^3) +
              p1q^2*p2q^2*((-27*s12^4 - 72*s12^3*s13 + 108*s12*s13^3 +
                  63*s13^4)*s23 + (-45*s12^3 - 297*s12^2*s13 - 351*s12*
                   s13^2 - 99*s13^3)*s23^2 + (-90*s12^2 - 450*s12*s13 -
                  306*s13^2)*s23^3 + (-72*s12 - 144*s13)*s23^4) +
              p1q^4*((45*s12^2 + 54*s12*s13 + 9*s13^2)*s23^3 +
                (27*s12 - 9*s13)*s23^4 - 18*s23^5) + p1q^3*p2q*(
                (27*s12^3 + 36*s12^2*s13 - 9*s12*s13^2 - 18*s13^3)*s23^2 +
                (45*s12^2 + 99*s12*s13 + 54*s13^2)*s23^3 + (36*s12 + 90*s13)*
                 s23^4 + 18*s23^5)) + p3q*(p2q^5*(36*s12^3*s13^2 -
                108*s12*s13^4 - 72*s13^5 + (72*s12^2*s13^2 - 72*s12*s13^3 -
                  144*s13^4)*s23 + (36*s12*s13^2 - 72*s13^3)*s23^2) +
              p1q*p2q^4*(36*s12^3*s13^2 + 18*s12^2*s13^3 - 72*s12*s13^4 -
                54*s13^5 + (18*s12^3*s13 + 306*s12^2*s13^2 + 378*s12*s13^3 +
                  90*s13^4)*s23 + (18*s12^2*s13 + 432*s12*s13^2 + 324*s13^3)*
                 s23^2 + 180*s13^2*s23^3) + p1q^2*p2q^3*((-9*s12^4 -
                  54*s12^3*s13 + 18*s12^2*s13^2 + 162*s12*s13^3 + 99*s13^4)*
                 s23 + (-27*s12^3 - 279*s12^2*s13 - 225*s12*s13^2 + 27*s13^3)*
                 s23^2 + (-54*s12^2 - 396*s12*s13 - 216*s13^2)*s23^3 +
                (-36*s12 - 144*s13)*s23^4) + p1q^4*p2q*((-36*s12^2 +
                  36*s13^2)*s23^3 + (-36*s12 + 36*s13)*s23^4) +
              p1q^5*((-18*s12 - 18*s13)*s23^4 - 18*s23^5) + p1q^3*p2q^2*(
                (36*s12^3 + 9*s12^2*s13 - 90*s12*s13^2 - 63*s13^3)*s23^2 +
                (36*s12^2 - 27*s12*s13 - 63*s13^2)*s23^3 + (36*s12 + 36*s13)*
                 s23^4 + 36*s23^5)))*Log((p2q + p3q)/(p1q + p2q + p3q)))/
          (p1q*p3q^5*(2*s12^3*s13 + 2*s12^2*s13^2)*s23^2 +
           p1q*p2q^5*(2*s12*s13^3 + 2*s13^4)*s23^2 - 2*p1q^5*p2q*s13*s23^5 +
           p1q^2*p2q^4*((2*s12*s13^3 + 2*s13^4)*s23^2 +
             (-4*s12*s13^2 - 6*s13^3)*s23^3) + p1q^3*p2q^3*
            ((-4*s12*s13^2 - 6*s13^3)*s23^3 + (2*s12*s13 + 6*s13^2)*s23^4) +
           p1q^4*p2q^2*((2*s12*s13 + 6*s13^2)*s23^4 - 2*s13*s23^5) +
           p3q^4*(p1q*p2q*(6*s12^3*s13 + 2*s12^2*s13^2 - 4*s12*s13^3)*s23^2 +
             p1q^2*((2*s12^3*s13 + 2*s12^2*s13^2)*s23^2 + (-6*s12^2*s13 -
                 4*s12*s13^2)*s23^3)) + p3q^3*(p1q*p2q^2*(6*s12^3*s13 - 6*
                s12^2*s13^2 - 10*s12*s13^3 + 2*s13^4)*s23^2 +
             p1q^2*p2q*((4*s12^3*s13 - 4*s12*s13^3)*s23^2 + (-16*s12^2*s13 -
                 12*s12*s13^2 - 4*s13^3)*s23^3) +
             p1q^3*((-6*s12^2*s13 - 4*s12*s13^2)*s23^3 + (6*s12*s13 +
                 2*s13^2)*s23^4)) + p3q*(p1q*p2q^4*(-4*s12^2*s13^2 + 2*s12*
                s13^3 + 6*s13^4)*s23^2 - 2*p1q^5*s13*s23^5 +
             p1q^2*p2q^3*((-4*s12^2*s13^2 + 4*s13^4)*s23^2 + (-4*s12^2*s13 -
                 12*s12*s13^2 - 16*s13^3)*s23^3) + p1q^3*p2q^2*
              ((-4*s12^2*s13 - 8*s12*s13^2 - 10*s13^3)*s23^3 + (10*s12*s13 +
                 14*s13^2)*s23^4) + p1q^4*p2q*((8*s12*s13 + 8*s13^2)*s23^4 -
               4*s13*s23^5)) + p3q^2*(p1q*p2q^3*(2*s12^3*s13 - 10*s12^2*
                s13^2 - 6*s12*s13^3 + 6*s13^4)*s23^2 + p1q^2*p2q^2*
              ((2*s12^3*s13 - 6*s12^2*s13^2 - 6*s12*s13^3 + 2*s13^4)*s23^2 +
               (-14*s12^2*s13 - 16*s12*s13^2 - 14*s13^3)*s23^3) +
             p1q^3*p2q*((-10*s12^2*s13 - 8*s12*s13^2 - 4*s13^3)*s23^3 +
               (14*s12*s13 + 10*s13^2)*s23^4) + p1q^4*((6*s12*s13 + 2*s13^2)*
                s23^4 - 2*s13*s23^5))) +
         ((p2q^2*(18*s12^2*s13 + 18*s12*s13^2 + 18*s12*s13*s23) +
            p3q^2*(18*s12^2*s13 + 18*s12*s13^2 + (18*s12^2 + 36*s12*s13)*
               s23 + 18*s12*s23^2) + p1q*p2q*((-2*s12 - 2*s13)*s23^2 -
              2*s23^3) + p3q*(p2q*(36*s12^2*s13 + 36*s12*s13^2 +
                (18*s12^2 + 54*s12*s13)*s23 + 18*s12*s23^2) +
              p1q*((-18*s12^2 - 18*s12*s13)*s23 + (-20*s12 - 2*s13)*s23^2 -
                2*s23^3)))*Log(-s12 - s13 - s23))/(p1q*p2q*s12*s13*s23^2 +
           p1q*p3q*s12*s13*s23^2) +
         ((p3q^4*(-2*s12^4 - 2*s12^3*s13 - 2*s12^3*s23) +
            p2q^4*(2*s12^2*s13^2 + 6*s12*s13^3 + 4*s13^4 + (6*s12*s13^2 +
                8*s13^3)*s23 + 4*s13^2*s23^2) + p1q*p2q^3*(s12^3*s13 +
              6*s12^2*s13^2 + 13*s12*s13^3 + 8*s13^4 + (-(s12^2*s13) +
                3*s12*s13^2 + 8*s13^3)*s23 + (-10*s12*s13 - 8*s13^2)*s23^2 -
              8*s13*s23^3) + p1q^2*p2q^2*(s12^3*s13 + 4*s12^2*s13^2 +
              7*s12*s13^3 + 4*s13^4 + (-s12^3 - 7*s12^2*s13 - 16*s12*s13^2 -
                8*s13^3)*s23 + (-s12^2 - 19*s12*s13 - 24*s13^2)*s23^2 +
              (4*s12 - 8*s13)*s23^3 + 4*s23^4) +
            p1q^4*((2*s12^2 + 6*s12*s13 + 4*s13^2)*s23^2 + (6*s12 + 8*s13)*
               s23^3 + 4*s23^4) + p1q^3*p2q*((-s12^3 - 6*s12^2*s13 -
                13*s12*s13^2 - 8*s13^3)*s23 + (s12^2 - 3*s12*s13 - 8*s13^2)*
               s23^2 + (10*s12 + 8*s13)*s23^3 + 8*s23^4) +
            p3q^3*(p2q*(-4*s12^4 + 4*s12^2*s13^2 + (-2*s12^3 + 6*s12^2*s13)*
                 s23 + 2*s12^2*s23^2) + p1q*(-s12^4 + 2*s12^3*s13 +
                3*s12^2*s13^2 + (5*s12^3 + 9*s12^2*s13)*s23 + 6*s12^2*
                 s23^2)) + p3q^2*(p2q^2*(8*s12^3*s13 + 4*s12^2*s13^2 -
                4*s12*s13^3 + (4*s12^3 + 8*s12^2*s13 - 8*s12*s13^2)*s23 +
                (4*s12^2 - 4*s12*s13)*s23^2) + p1q^2*(2*s12^4 + 7*s12^3*s13 +
                6*s12^2*s13^2 + s12*s13^3 + (8*s12^3 + 7*s12^2*s13 -
                  3*s12*s13^2)*s23 - 10*s12*s13*s23^2 - 6*s12*s23^3) +
              p1q*p2q*(2*s12^4 + 13*s12^3*s13 + 8*s12^2*s13^2 - 3*s12*s13^3 +
                (14*s12^3 + 19*s12^2*s13 - 7*s12*s13^2)*s23 +
                (8*s12^2 - 8*s12*s13)*s23^2 - 4*s12*s23^3)) +
            p3q*(p2q^3*(-2*s12^3*s13 - 10*s12^2*s13^2 - 6*s12*s13^3 +
                2*s13^4 + (-10*s12^2*s13 - 14*s12*s13^2 + 4*s13^3)*s23 +
                (-8*s12*s13 + 2*s13^2)*s23^2) + p1q*p2q^2*(-s12^4 -
                4*s12^3*s13 - 13*s12^2*s13^2 - 6*s12*s13^3 + 4*s13^4 +
                (-5*s12^3 - 23*s12^2*s13 - 26*s12*s13^2 + 4*s13^3)*s23 +
                (-12*s12^2 - 28*s12*s13 - 4*s13^2)*s23^2 + (-8*s12 - 4*s13)*
                 s23^3) + p1q^2*p2q*(s12^4 + 2*s12^3*s13 - 2*s12^2*s13^2 -
                2*s12*s13^3 + s13^4 + (-3*s12^3 - 20*s12^2*s13 -
                  25*s12*s13^2 - 4*s13^3)*s23 + (-20*s12^2 - 37*s12*s13 -
                  9*s13^2)*s23^2 + (-14*s12 - 2*s13)*s23^3 + 2*s23^4) +
              p1q^3*((-4*s12^3 - 13*s12^2*s13 - 10*s12*s13^2 - s13^3)*s23 +
                (-13*s12^2 - 17*s12*s13)*s23^2 + (-7*s12 + 3*s13)*s23^3 +
                2*s23^4)))*Log(s12/(s12 + s13 + s23)))/(2*p3q^4*s12^4*s13 +
           p2q^4*(-2*s12*s13^4 - 2*s12*s13^3*s23) + p1q*p2q^3*
            (-4*s12*s13^4 + 4*s12*s13^2*s23^2) + p1q^3*p2q*(4*s12*s13^3*s23 -
             4*s12*s13*s23^3) + p1q^4*(-2*s12*s13^2*s23^2 -
             2*s12*s13*s23^3) + p1q^2*p2q^2*(-2*s12*s13^4 + 6*s12*s13^3*s23 +
             6*s12*s13^2*s23^2 - 2*s12*s13*s23^3) +
           p3q^3*(p1q*(2*s12^4*s13 - 2*s12^3*s13^2 - 6*s12^3*s13*s23) +
             p2q*(2*s12^4*s13 - 6*s12^3*s13^2 - 2*s12^3*s13*s23)) +
           p3q^2*(p2q^2*(-6*s12^3*s13^2 + 6*s12^2*s13^3 + (-2*s12^3*s13 +
                 4*s12^2*s13^2)*s23) + p1q*p2q*(-8*s12^3*s13^2 + 4*s12^2*
                s13^3 + (-8*s12^3*s13 + 4*s12^2*s13^2)*s23 + 4*s12^2*s13*
                s23^2) + p1q^2*(-2*s12^3*s13^2 + (-6*s12^3*s13 +
                 4*s12^2*s13^2)*s23 + 6*s12^2*s13*s23^2)) +
           p3q*(p2q^3*(6*s12^2*s13^3 - 2*s12*s13^4 + (4*s12^2*s13^2 -
                 2*s12*s13^3)*s23) + p1q*p2q^2*(10*s12^2*s13^3 - 2*s12*
                s13^4 + (8*s12^2*s13^2 + 2*s12*s13^3)*s23 + (4*s12^2*s13 +
                 4*s12*s13^2)*s23^2) + p1q^3*(4*s12^2*s13^2*s23 +
               (6*s12^2*s13 - 2*s12*s13^2)*s23^2 - 2*s12*s13*s23^3) +
             p1q^2*p2q*(4*s12^2*s13^3 + (8*s12^2*s13^2 + 4*s12*s13^3)*s23 +
               (10*s12^2*s13 + 2*s12*s13^2)*s23^2 - 2*s12*s13*s23^3))) +
         ((p3q^6*(-18*s12^5*s13 - 18*s12^4*s13^2 - 18*s12^4*s13*s23) +
            p2q^6*(18*s12^2*s13^4 + 18*s12*s13^5 + 18*s12*s13^4*s23) +
            p1q*p2q^5*(-18*s12^3*s13^3 + 18*s12*s13^5 + (-72*s12^2*s13^3 -
                36*s12*s13^4)*s23 + (-56*s12*s13^3 - 2*s13^4)*s23^2 -
              2*s13^3*s23^3) + p1q^2*p2q^4*(-18*s12^3*s13^3 -
              18*s12^2*s13^4 + (63*s12^3*s13^2 + 18*s12^2*s13^3 -
                27*s12*s13^4)*s23 + (127*s12^2*s13^2 + 34*s12*s13^3 -
                3*s13^4)*s23^2 + (70*s12*s13^2 + 3*s13^3)*s23^3 +
              6*s13^2*s23^4) + p1q^5*p2q*((-9*s12^3 - 9*s12^2*s13)*s23^3 +
              (-18*s12^2 - 11*s12*s13 - 2*s13^2)*s23^4 + (-9*s12 - 2*s13)*s23^
                5) + p1q^3*p2q^3*((-27*s12^4*s13 - 18*s12^3*s13^2 +
                9*s12^2*s13^3)*s23 + (-91*s12^3*s13 - 65*s12^2*s13^2 -
                12*s12*s13^3 - 2*s13^4)*s23^2 + (-104*s12^2*s13 -
                44*s12*s13^2 + 4*s13^3)*s23^3 - 46*s12*s13*s23^4 -
              6*s13*s23^5) + p1q^4*p2q^2*((9*s12^4 + 27*s12^3*s13 +
                18*s12^2*s13^2)*s23^2 + (28*s12^3 + 65*s12^2*s13 +
                32*s12*s13^2 + 4*s13^3)*s23^3 + (31*s12^2 + 37*s12*s13 +
                s13^2)*s23^4 + (14*s12 - s13)*s23^5 + 2*s23^6) +
            p3q^5*(p2q*(-54*s12^5*s13 + 54*s12^3*s13^3 + (-54*s12^4*s13 +
                  54*s12^3*s13^2)*s23) + p1q*(-36*s12^5*s13 - 36*s12^4*
                 s13^2 + (-18*s12^4*s13 + 18*s12^3*s13^2)*s23 +
                (16*s12^3*s13 - 2*s12^2*s13^2)*s23^2 - 2*s12^2*s13*s23^3)) +
            p3q^4*(p2q^2*(-54*s12^5*s13 + 108*s12^4*s13^2 + 108*s12^3*s13^3 -
                54*s12^2*s13^4 + (-54*s12^4*s13 + 162*s12^3*s13^2 -
                  54*s12^2*s13^3)*s23) + p1q*p2q*(-90*s12^5*s13 +
                90*s12^3*s13^3 + (-36*s12^4*s13 + 180*s12^3*s13^2 +
                  36*s12^2*s13^3)*s23 + (2*s12^4 + 50*s12^3*s13 +
                  32*s12^2*s13^2 + 2*s12*s13^3)*s23^2 + (4*s12^3 -
                  4*s12^2*s13 + 2*s12*s13^2)*s23^3 + 2*s12^2*s23^4) +
              p1q^2*(-18*s12^5*s13 - 18*s12^4*s13^2 + (9*s12^5 + 18*s12^4*
                   s13 + 9*s12^3*s13^2 - 18*s12^2*s13^3)*s23 +
                (18*s12^4 + 31*s12^3*s13 - 24*s12^2*s13^2 - s12*s13^3)*
                 s23^2 + (9*s12^3 - 3*s12^2*s13 + s12*s13^2)*s23^3 +
                2*s12*s13*s23^4)) + p3q^3*(p2q^3*(-18*s12^5*s13 +
                144*s12^4*s13^2 - 144*s12^2*s13^4 + 18*s12*s13^5 +
                (-18*s12^4*s13 + 162*s12^3*s13^2 - 162*s12^2*s13^3 +
                  18*s12*s13^4)*s23) + p1q*p2q^2*(-72*s12^5*s13 +
                144*s12^4*s13^2 + 144*s12^3*s13^3 - 72*s12^2*s13^4 +
                (-18*s12^4*s13 + 378*s12^3*s13^2 - 18*s12^2*s13^3 -
                  54*s12*s13^4)*s23 + (2*s12^4 + 44*s12^3*s13 + 102*s12^2*
                   s13^2 - 48*s12*s13^3)*s23^2 + (4*s12^3 - 14*s12^2*s13 +
                  2*s12*s13^2)*s23^3 + (2*s12^2 - 4*s12*s13)*s23^4) +
              p1q^3*((9*s12^5 + 18*s12^4*s13 - 9*s12^3*s13^2 - 18*s12^2*
                   s13^3)*s23 + (24*s12^3*s13 + 23*s12^2*s13^2 +
                  17*s12*s13^3)*s23^2 + (-27*s12^3 + 13*s12^2*s13 +
                  25*s12*s13^2 + s13^3)*s23^3 + (-18*s12^2 + 7*s12*s13 +
                  s13^2)*s23^4) + p1q^2*p2q*(-36*s12^5*s13 + 36*s12^3*s13^3 +
                (-18*s12^5 + 18*s12^4*s13 + 198*s12^3*s13^2 + 108*s12^2*
                   s13^3 + 18*s12*s13^4)*s23 + (-36*s12^4 + 21*s12^3*s13 +
                  131*s12^2*s13^2 + 93*s12*s13^3 + s13^4)*s23^2 +
                (-22*s12^3 - 35*s12^2*s13 + 80*s12*s13^2 + 5*s13^3)*s23^3 +
                (-8*s12^2 - 2*s12*s13 + 4*s13^2)*s23^4 - 4*s12*s23^5)) +
            p3q*(p2q^5*(-54*s12^3*s13^3 + 54*s12*s13^5 + (-54*s12^2*s13^3 +
                  54*s12*s13^4)*s23) + p1q*p2q^4*(36*s12^4*s13^2 -
                72*s12^3*s13^3 - 72*s12^2*s13^4 + 36*s12*s13^5 +
                (72*s12^3*s13^2 - 234*s12^2*s13^3 - 126*s12*s13^4)*s23 +
                (44*s12^2*s13^2 - 156*s12*s13^3 - 2*s13^4)*s23^2 +
                10*s12*s13^2*s23^3 + 2*s13^2*s23^4) + p1q^5*(
                (9*s12^3 - 9*s12^2*s13 - 18*s12*s13^2)*s23^3 +
                (18*s12^2 - 11*s12*s13 - 2*s13^2)*s23^4 + (9*s12 - 2*s13)*
                 s23^5) + p1q^2*p2q^3*(36*s12^4*s13^2 - 36*s12^2*s13^4 +
                (18*s12^4*s13 + 198*s12^3*s13^2 - 108*s12*s13^4)*s23 +
                (-5*s12^3*s13 + 289*s12^2*s13^2 + 55*s12*s13^3 - 5*s13^4)*
                 s23^2 + (-27*s12^2*s13 + 174*s12*s13^2 + 5*s13^3)*s23^3 +
                (-8*s12*s13 + 6*s13^2)*s23^4 - 4*s13*s23^5) +
              p1q^3*p2q^2*((-9*s12^5 + 63*s12^3*s13^2 + 36*s12^2*s13^3 -
                  18*s12*s13^4)*s23 + (-19*s12^4 - 106*s12^3*s13 +
                  73*s12^2*s13^2 + 103*s12*s13^3 - 3*s13^4)*s23^2 +
                (-13*s12^3 - 165*s12^2*s13 + 77*s12*s13^2 + 7*s13^3)*s23^3 +
                (-3*s12^2 - 67*s12*s13)*s23^4 + (2*s12 - 8*s13)*s23^5 +
                2*s23^6) + p1q^4*p2q*((27*s12^4 - 18*s12^3*s13 - 9*s12^2*
                   s13^2 + 36*s12*s13^3)*s23^2 + (55*s12^3 - 74*s12^2*s13 -
                  16*s12*s13^2 + 5*s13^3)*s23^3 + (31*s12^2 - 59*s12*s13)*
                 s23^4 + (5*s12 - 3*s13)*s23^5 + 2*s23^6)) +
            p3q^2*(p2q^4*(54*s12^4*s13^2 - 108*s12^3*s13^3 - 108*s12^2*
                 s13^4 + 54*s12*s13^5 + (54*s12^3*s13^2 - 162*s12^2*s13^3 +
                  54*s12*s13^4)*s23) + p1q*p2q^3*(-18*s12^5*s13 +
                144*s12^4*s13^2 - 144*s12^2*s13^4 + 18*s12*s13^5 +
                (288*s12^3*s13^2 - 216*s12^2*s13^3 - 144*s12*s13^4)*s23 +
                (10*s12^3*s13 + 112*s12^2*s13^2 - 150*s12*s13^3)*s23^2 +
                (-12*s12^2*s13 + 10*s12*s13^2 + 2*s13^3)*s23^3 +
                (-4*s12*s13 + 2*s13^2)*s23^4) + p1q^2*p2q^2*(-18*s12^5*s13 +
                54*s12^4*s13^2 + 54*s12^3*s13^3 - 18*s12^2*s13^4 +
                (-9*s12^5 + 90*s12^4*s13 + 432*s12^3*s13^2 + 180*s12^2*
                   s13^3 - 45*s12*s13^4)*s23 + (-18*s12^4 + 93*s12^3*s13 +
                  425*s12^2*s13^2 + 151*s12*s13^3 - s13^4)*s23^2 +
                (-13*s12^3 - 23*s12^2*s13 + 201*s12*s13^2 + 7*s13^3)*s23^3 +
                (-8*s12^2 - 12*s12*s13 + 4*s13^2)*s23^4 + (-4*s12 - 4*s13)*
                 s23^5) + p1q^4*((-18*s12^4 + 9*s12^3*s13 + 45*s12^2*s13^2 +
                  18*s12*s13^3)*s23^2 + (-27*s12^3 + 5*s12^2*s13 +
                  6*s12*s13^2 + s13^3)*s23^3 + (-6*s12*s13 - s13^2)*s23^4 +
                (9*s12 - 2*s13)*s23^5) + p1q^3*p2q*((-18*s12^5 - 9*s12^4*
                   s13 + 18*s12^3*s13^2 - 9*s12^2*s13^3 - 18*s12*s13^4)*s23 +
                (-19*s12^4 - 99*s12^3*s13 - 55*s12^2*s13^2 + 24*s12*s13^3 -
                  s13^4)*s23^2 + (14*s12^3 - 174*s12^2*s13 - 34*s12*s13^2 +
                  4*s13^3)*s23^3 + (15*s12^2 - 86*s12*s13 + s13^2)*s23^4 +
                (2*s12 - 2*s13)*s23^5 + 2*s23^6)))*
           Log(s13/(s12 + s13 + s23)))/(-2*p1q*p2q^5*s12*s13^4*s23^2 +
           p1q*p3q^5*(2*s12^4*s13*s23^2 + 2*s12^3*s13*s23^3) +
           p1q^2*p2q^4*((2*s12^2*s13^3 - 2*s12*s13^4)*s23^2 +
             6*s12*s13^3*s23^3) + p1q^3*p2q^3*(2*s12^2*s13^3*s23^2 +
             (-4*s12^2*s13^2 + 6*s12*s13^3)*s23^3 - 6*s12*s13^2*s23^4) +
           p1q^5*p2q*(2*s12^2*s13*s23^4 + 2*s12*s13*s23^5) +
           p1q^4*p2q^2*(-4*s12^2*s13^2*s23^3 + (2*s12^2*s13 - 6*s12*s13^2)*
              s23^4 + 2*s12*s13*s23^5) + p3q^4*
            (p1q*p2q*((4*s12^4*s13 - 6*s12^3*s13^2)*s23^2 + (4*s12^3*s13 -
                 4*s12^2*s13^2)*s23^3) + p1q^2*(4*s12^4*s13*s23^2 - 4*s12^2*
                s13*s23^4)) + p3q^3*(p1q*p2q^2*((2*s12^4*s13 - 12*s12^3*
                  s13^2 + 6*s12^2*s13^3)*s23^2 + (2*s12^3*s13 - 8*s12^2*
                  s13^2 + 2*s12*s13^3)*s23^3) + p1q^2*p2q*
              ((6*s12^4*s13 - 10*s12^3*s13^2)*s23^2 + (-2*s12^3*s13 -
                 8*s12^2*s13^2)*s23^3 + (-8*s12^2*s13 - 4*s12*s13^2)*s23^4) +
             p1q^3*(2*s12^4*s13*s23^2 - 6*s12^3*s13*s23^3 - 6*s12^2*s13*
                s23^4 + 2*s12*s13*s23^5)) +
           p3q^2*(p1q*p2q^3*((-6*s12^3*s13^2 + 12*s12^2*s13^3 - 2*s12*s13^4)*
                s23^2 + (-4*s12^2*s13^2 + 4*s12*s13^3)*s23^3) +
             p1q^2*p2q^2*((2*s12^4*s13 - 14*s12^3*s13^2 + 8*s12^2*s13^3)*
                s23^2 + (-2*s12^3*s13 - 12*s12^2*s13^2 + 8*s12*s13^3)*s23^3 +
               (-4*s12^2*s13 - 8*s12*s13^2)*s23^4) + p1q^4*(-4*s12^3*s13*
                s23^3 + 4*s12*s13*s23^5) + p1q^3*p2q*((2*s12^4*s13 -
                 4*s12^3*s13^2)*s23^2 + (-10*s12^3*s13 - 8*s12^2*s13^2)*
                s23^3 + (-8*s12^2*s13 - 10*s12*s13^2)*s23^4 + 4*s12*s13*
                s23^5)) + p3q*(p1q*p2q^4*((6*s12^2*s13^3 - 4*s12*s13^4)*
                s23^2 + 2*s12*s13^3*s23^3) + p1q^2*p2q^3*
              ((-4*s12^3*s13^2 + 10*s12^2*s13^3 - 2*s12*s13^4)*s23^2 +
               (-4*s12^2*s13^2 + 14*s12*s13^3)*s23^3 - 4*s12*s13^2*s23^4) +
             p1q^5*(2*s12^2*s13*s23^4 + 2*s12*s13*s23^5) +
             p1q^3*p2q^2*((-4*s12^3*s13^2 + 2*s12^2*s13^3)*s23^2 +
               (-4*s12^3*s13 - 12*s12^2*s13^2 + 6*s12*s13^3)*s23^3 +
               (-2*s12^2*s13 - 16*s12*s13^2)*s23^4 + 2*s12*s13*s23^5) +
             p1q^4*p2q*((-4*s12^3*s13 - 4*s12^2*s13^2)*s23^3 + (2*s12^2*s13 -
                 6*s12*s13^2)*s23^4 + 6*s12*s13*s23^5))) +
         ((p2q^6*(36*s12^2*s13^3 + 72*s12*s13^4 + 36*s13^5 + (54*s12*s13^3 +
                54*s13^4)*s23 + 18*s13^3*s23^2) + p3q^6*(36*s12^4*s13 +
              72*s12^3*s13^2 + 36*s12^2*s13^3 + (18*s12^4 + 90*s12^3*s13 +
                72*s12^2*s13^2)*s23 + (18*s12^3 + 36*s12^2*s13)*s23^2) +
            p1q*p2q^5*(36*s12^2*s13^3 + 72*s12*s13^4 + 36*s13^5 +
              (-90*s12^2*s13^2 - 144*s12*s13^3 - 54*s13^4)*s23 +
              (-144*s12*s13^2 - 144*s13^3)*s23^2 - 54*s13^2*s23^3) +
            p1q^2*p2q^4*((18*s12^3*s13 - 36*s12^2*s13^2 - 144*s12*s13^3 -
                90*s13^4)*s23 + (90*s12^2*s13 + 72*s12*s13^2 - 36*s13^3)*s23^
                2 + (126*s12*s13 + 108*s13^2)*s23^3 + 54*s13*s23^4) +
            p1q^3*p2q^3*((27*s12^2*s13 + 90*s12*s13^2 + 63*s13^3)*s23^2 +
              (-18*s12^2 + 27*s12*s13 + 81*s13^2)*s23^3 - 36*s12*s23^4 -
              18*s23^5) + p1q^4*p2q^2*((-9*s12^2 - 9*s12*s13)*s23^3 +
              (-27*s12 - 18*s13)*s23^4 - 18*s23^5) + p1q^5*p2q*
             ((-9*s12 - 9*s13)*s23^4 - 9*s23^5) +
            p3q^5*(p2q*(144*s12^4*s13 + 216*s12^3*s13^2 - 72*s12*s13^4 +
                (54*s12^4 + 288*s12^3*s13 + 90*s12^2*s13^2 - 144*s12*s13^3)*
                 s23 + (54*s12^3 + 90*s12^2*s13 - 72*s12*s13^2)*s23^2) +
              p1q*(36*s12^4*s13 + 72*s12^3*s13^2 + 36*s12^2*s13^3 +
                (-36*s12^3*s13 - 108*s12^2*s13^2 - 72*s12*s13^3)*s23 +
                (-54*s12^3 - 198*s12^2*s13 - 144*s12*s13^2)*s23^2 +
                (-54*s12^2 - 72*s12*s13)*s23^3)) +
            p3q^4*(p2q^2*(216*s12^4*s13 + 144*s12^3*s13^2 - 324*s12^2*s13^3 -
                216*s12*s13^4 + 36*s13^5 + (54*s12^4 + 324*s12^3*s13 -
                  252*s12^2*s13^2 - 450*s12*s13^3 + 72*s13^4)*s23 +
                (54*s12^3 + 54*s12^2*s13 - 234*s12*s13^2 + 36*s13^3)*s23^2) +
              p1q*p2q*(108*s12^4*s13 + 144*s12^3*s13^2 - 36*s12^2*s13^3 -
                72*s12*s13^4 + (-18*s12^4 - 216*s12^3*s13 - 630*s12^2*s13^2 -
                  504*s12*s13^3 - 72*s13^4)*s23 + (-180*s12^3 - 720*s12^2*
                   s13 - 684*s12*s13^2 - 144*s13^3)*s23^2 +
                (-162*s12^2 - 252*s12*s13 - 72*s13^2)*s23^3) +
              p1q^2*((-36*s12^4 - 180*s12^3*s13 - 234*s12^2*s13^2 -
                  90*s12*s13^3)*s23 + (-54*s12^3 - 144*s12^2*s13 -
                  36*s12*s13^2 + 36*s13^3)*s23^2 + (36*s12^2 + 108*s12*s13 +
                  72*s13^2)*s23^3 + (54*s12 + 36*s13)*s23^4)) +
            p3q^3*(p2q^3*(144*s12^4*s13 - 144*s12^3*s13^2 - 576*s12^2*s13^3 -
                144*s12*s13^4 + 144*s13^5 + (18*s12^4 + 144*s12^3*s13 -
                  576*s12^2*s13^2 - 432*s12*s13^3 + 270*s13^4)*s23 +
                (18*s12^3 - 18*s12^2*s13 - 270*s12*s13^2 + 126*s13^3)*
                 s23^2) + p1q*p2q^2*(108*s12^4*s13 - 288*s12^2*s13^3 -
                144*s12*s13^4 + 36*s13^5 + (-36*s12^4 - 360*s12^3*s13 -
                  1224*s12^2*s13^2 - 1152*s12*s13^3 - 252*s13^4)*s23 +
                (-198*s12^3 - 918*s12^2*s13 - 1278*s12*s13^2 - 558*s13^3)*
                 s23^2 + (-162*s12^2 - 324*s12*s13 - 270*s13^2)*s23^3) +
              p1q^2*p2q*((-54*s12^4 - 324*s12^3*s13 - 468*s12^2*s13^2 -
                  252*s12*s13^3 - 54*s13^4)*s23 + (-90*s12^3 - 162*s12^2*
                   s13 + 108*s12*s13^2 + 108*s13^3)*s23^2 +
                (126*s12^2 + 468*s12*s13 + 324*s13^2)*s23^3 +
                (162*s12 + 162*s13)*s23^4) + p1q^3*((99*s12^3 + 270*s12^2*
                   s13 + 225*s12*s13^2 + 54*s13^3)*s23^2 +
                (135*s12^2 + 225*s12*s13 + 72*s13^2)*s23^3 + 18*s12*s23^4 -
                18*s23^5)) + p3q^2*(p2q^4*(36*s12^4*s13 - 216*s12^3*s13^2 -
                324*s12^2*s13^3 + 144*s12*s13^4 + 216*s13^5 +
                (18*s12^3*s13 - 396*s12^2*s13^2 - 36*s12*s13^3 + 378*s13^4)*
                 s23 + (-18*s12^2*s13 - 126*s12*s13^2 + 162*s13^3)*s23^2) +
              p1q*p2q^3*(36*s12^4*s13 - 144*s12^3*s13^2 - 288*s12^2*s13^3 +
                108*s13^5 + (-18*s12^4 - 216*s12^3*s13 - 1080*s12^2*s13^2 -
                  1224*s12*s13^3 - 342*s13^4)*s23 + (-72*s12^3 - 468*s12^2*
                   s13 - 1224*s12*s13^2 - 828*s13^3)*s23^2 +
                (-54*s12^2 - 180*s12*s13 - 378*s13^2)*s23^3) +
              p1q^2*p2q^2*((-36*s12^4 - 234*s12^3*s13 - 486*s12^2*s13^2 -
                  522*s12*s13^3 - 234*s13^4)*s23 + (-54*s12^3 + 90*s12^2*
                   s13 + 288*s12*s13^2 + 36*s13^3)*s23^2 +
                (144*s12^2 + 738*s12*s13 + 540*s13^2)*s23^3 +
                (162*s12 + 270*s13)*s23^4) + p1q^3*p2q*((72*s12^3 +
                  333*s12^2*s13 + 450*s12*s13^2 + 189*s13^3)*s23^2 +
                (144*s12^2 + 315*s12*s13 + 171*s13^2)*s23^3 +
                (18*s12 - 72*s13)*s23^4 - 54*s23^5) + p1q^4*(
                (-90*s12^2 - 153*s12*s13 - 63*s13^2)*s23^3 +
                (-108*s12 - 81*s13)*s23^4 - 18*s23^5)) +
            p3q*(p2q^5*(-72*s12^3*s13^2 + 216*s12*s13^4 + 144*s13^5 +
                (-90*s12^2*s13^2 + 144*s12*s13^3 + 234*s13^4)*s23 +
                (-18*s12*s13^2 + 90*s13^3)*s23^2) + p1q*p2q^4*(-72*s12^3*
                 s13^2 - 36*s12^2*s13^3 + 144*s12*s13^4 + 108*s13^5 +
                (-36*s12^3*s13 - 468*s12^2*s13^2 - 648*s12*s13^3 - 216*s13^4)*
                 s23 + (-72*s12^2*s13 - 630*s12*s13^2 - 558*s13^3)*s23^2 +
                (-36*s12*s13 - 234*s13^2)*s23^3) + p1q^2*p2q^3*(
                (-18*s12^4 - 72*s12^3*s13 - 288*s12^2*s13^2 - 504*s12*s13^3 -
                  270*s13^4)*s23 + (-18*s12^3 + 198*s12^2*s13 + 216*s12*
                   s13^2 - 72*s13^3)*s23^2 + (54*s12^2 + 504*s12*s13 +
                  396*s13^2)*s23^3 + (54*s12 + 198*s13)*s23^4) +
              p1q^3*p2q^2*((27*s12^3 + 252*s12^2*s13 + 477*s12*s13^2 +
                  252*s13^3)*s23^2 + (63*s12^2 + 261*s12*s13 + 252*s13^2)*
                 s23^3 + (-18*s12 - 54*s13)*s23^4 - 54*s23^5) +
              p1q^4*p2q*((-9*s12^2 - 126*s12*s13 - 117*s13^2)*s23^3 +
                (-27*s12 - 135*s13)*s23^4 - 18*s23^5) +
              p1q^5*((27*s12 + 27*s13)*s23^4 + 27*s23^5)))*
           Log(s23/(s12 + s13 + s23)))/(p1q*p3q^5*(2*s12^3*s13 +
             2*s12^2*s13^2)*s23^2 + p1q*p2q^5*(2*s12*s13^3 + 2*s13^4)*s23^2 -
           2*p1q^5*p2q*s13*s23^5 + p1q^2*p2q^4*((2*s12*s13^3 + 2*s13^4)*
              s23^2 + (-4*s12*s13^2 - 6*s13^3)*s23^3) +
           p1q^3*p2q^3*((-4*s12*s13^2 - 6*s13^3)*s23^3 +
             (2*s12*s13 + 6*s13^2)*s23^4) + p1q^4*p2q^2*
            ((2*s12*s13 + 6*s13^2)*s23^4 - 2*s13*s23^5) +
           p3q^4*(p1q*p2q*(6*s12^3*s13 + 2*s12^2*s13^2 - 4*s12*s13^3)*s23^2 +
             p1q^2*((2*s12^3*s13 + 2*s12^2*s13^2)*s23^2 + (-6*s12^2*s13 -
                 4*s12*s13^2)*s23^3)) + p3q^3*(p1q*p2q^2*(6*s12^3*s13 - 6*
                s12^2*s13^2 - 10*s12*s13^3 + 2*s13^4)*s23^2 +
             p1q^2*p2q*((4*s12^3*s13 - 4*s12*s13^3)*s23^2 + (-16*s12^2*s13 -
                 12*s12*s13^2 - 4*s13^3)*s23^3) +
             p1q^3*((-6*s12^2*s13 - 4*s12*s13^2)*s23^3 + (6*s12*s13 +
                 2*s13^2)*s23^4)) + p3q*(p1q*p2q^4*(-4*s12^2*s13^2 + 2*s12*
                s13^3 + 6*s13^4)*s23^2 - 2*p1q^5*s13*s23^5 +
             p1q^2*p2q^3*((-4*s12^2*s13^2 + 4*s13^4)*s23^2 + (-4*s12^2*s13 -
                 12*s12*s13^2 - 16*s13^3)*s23^3) + p1q^3*p2q^2*
              ((-4*s12^2*s13 - 8*s12*s13^2 - 10*s13^3)*s23^3 + (10*s12*s13 +
                 14*s13^2)*s23^4) + p1q^4*p2q*((8*s12*s13 + 8*s13^2)*s23^4 -
               4*s13*s23^5)) + p3q^2*(p1q*p2q^3*(2*s12^3*s13 - 10*s12^2*
                s13^2 - 6*s12*s13^3 + 6*s13^4)*s23^2 + p1q^2*p2q^2*
              ((2*s12^3*s13 - 6*s12^2*s13^2 - 6*s12*s13^3 + 2*s13^4)*s23^2 +
               (-14*s12^2*s13 - 16*s12*s13^2 - 14*s13^3)*s23^3) +
             p1q^3*p2q*((-10*s12^2*s13 - 8*s12*s13^2 - 4*s13^3)*s23^3 +
               (14*s12*s13 + 10*s13^2)*s23^4) + p1q^4*((6*s12*s13 + 2*s13^2)*
                s23^4 - 2*s13*s23^5)))) + Log((p2q + p3q)/(p1q + p2q + p3q))*
        (((p3q^6*(18*s12^5 + 36*s12^4*s13 + 18*s12^3*s13^2 +
              (36*s12^4 + 36*s12^3*s13)*s23 + 18*s12^3*s23^2) +
            p2q^6*(18*s12^3*s13^2 + 36*s12^2*s13^3 + 18*s12*s13^4 +
              (36*s12^2*s13^2 + 36*s12*s13^3)*s23 + 18*s12*s13^2*s23^2) +
            p1q*p2q^5*(18*s12^3*s13^2 + 36*s12^2*s13^3 + 18*s12*s13^4 +
              (-36*s12^3*s13 - 36*s12^2*s13^2)*s23 + (-72*s12^2*s13 -
                54*s12*s13^2)*s23^2 - 36*s12*s13*s23^3) +
            p1q^2*p2q^4*((36*s12^4 + 63*s12^3*s13 + 9*s12^2*s13^2 -
                27*s12*s13^3 - 9*s13^4)*s23 + (90*s12^3 + 117*s12^2*s13 +
                36*s12*s13^2 + 9*s13^3)*s23^2 + (72*s12^2 + 54*s12*s13 +
                18*s13^2)*s23^3 + 18*s12*s23^4) + p1q^3*p2q^3*
             ((-27*s12^3 - 18*s12^2*s13 + 45*s12*s13^2 + 36*s13^3)*s23^2 +
              (-63*s12^2 - 63*s12*s13)*s23^3 + (-36*s12 - 36*s13)*s23^4) +
            p1q^4*p2q^2*((-9*s12^2 - 54*s12*s13 - 45*s13^2)*s23^3 +
              (9*s12 - 27*s13)*s23^4 + 18*s23^5) + p1q^5*p2q*
             ((18*s12 + 18*s13)*s23^4 + 18*s23^5) +
            p3q^5*(p2q*(72*s12^5 + 108*s12^4*s13 - 36*s12^2*s13^3 +
                (144*s12^4 + 72*s12^3*s13 - 72*s12^2*s13^2)*s23 +
                (72*s12^3 - 36*s12^2*s13)*s23^2) + p1q*(18*s12^5 +
                36*s12^4*s13 + 18*s12^3*s13^2 + (-18*s12^4 - 72*s12^3*s13 -
                  54*s12^2*s13^2)*s23 + (-90*s12^3 - 108*s12^2*s13)*s23^2 -
                54*s12^2*s23^3)) + p3q^4*(p2q^2*(108*s12^5 + 72*s12^4*s13 -
                162*s12^3*s13^2 - 108*s12^2*s13^3 + 18*s12*s13^4 +
                (216*s12^4 - 72*s12^3*s13 - 252*s12^2*s13^2 + 36*s12*s13^3)*
                 s23 + (108*s12^3 - 144*s12^2*s13 + 18*s12*s13^2)*s23^2) +
              p1q*p2q*(54*s12^5 + 72*s12^4*s13 - 18*s12^3*s13^2 -
                36*s12^2*s13^3 + (-90*s12^4 - 378*s12^3*s13 - 306*s12^2*
                   s13^2 - 18*s12*s13^3)*s23 + (-324*s12^3 - 432*s12^2*s13 -
                  18*s12*s13^2)*s23^2 - 180*s12^2*s23^3) +
              p1q^2*((-27*s12^4 - 27*s12^3*s13 + 27*s12^2*s13^2 +
                  27*s12*s13^3)*s23 + (-27*s12^3 + 54*s12^2*s13 +
                  81*s12*s13^2)*s23^2 + (54*s12^2 + 108*s12*s13)*s23^3 +
                54*s12*s23^4)) + p3q^3*(p2q^3*(72*s12^5 - 72*s12^4*s13 -
                288*s12^3*s13^2 - 72*s12^2*s13^3 + 72*s12*s13^4 +
                (144*s12^4 - 288*s12^3*s13 - 288*s12^2*s13^2 + 144*s12*s13^3)*
                 s23 + (72*s12^3 - 216*s12^2*s13 + 72*s12*s13^2)*s23^2) +
              p1q*p2q^2*(54*s12^5 - 144*s12^3*s13^2 - 72*s12^2*s13^3 +
                18*s12*s13^4 + (-162*s12^4 - 738*s12^3*s13 - 630*s12^2*
                   s13^2 - 54*s12*s13^3)*s23 + (-450*s12^3 - 774*s12^2*s13 -
                  162*s12*s13^2 - 18*s13^3)*s23^2 + (-234*s12^2 -
                  72*s12*s13 - 18*s13^2)*s23^3) + p1q^2*p2q*(
                (-99*s12^4 - 162*s12^3*s13 - 18*s12^2*s13^2 + 54*s12*s13^3 +
                  9*s13^4)*s23 + (-27*s12^3 + 225*s12^2*s13 + 279*s12*s13^2 +
                  27*s13^3)*s23^2 + (216*s12^2 + 396*s12*s13 + 54*s13^2)*
                 s23^3 + (144*s12 + 36*s13)*s23^4) + p1q^3*(
                (-18*s12^3 - 45*s12^2*s13 - 36*s12*s13^2 - 9*s13^3)*s23^2 +
                (18*s12^2 - 9*s12*s13 - 27*s13^2)*s23^3 + (18*s12 - 36*s13)*
                 s23^4 - 18*s23^5)) + p3q*(p2q^5*(-36*s12^4*s13 +
                108*s12^2*s13^3 + 72*s12*s13^4 + (-72*s12^3*s13 +
                  72*s12^2*s13^2 + 144*s12*s13^3)*s23 + (-36*s12^2*s13 +
                  72*s12*s13^2)*s23^2) + p1q*p2q^4*(-36*s12^4*s13 -
                18*s12^3*s13^2 + 72*s12^2*s13^3 + 54*s12*s13^4 +
                (-36*s12^4 - 270*s12^3*s13 - 252*s12^2*s13^2 - 18*s12*s13^3)*
                 s23 + (-72*s12^3 - 378*s12^2*s13 - 234*s12*s13^2 - 18*s13^3)*
                 s23^2 + (-36*s12^2 - 144*s12*s13 - 18*s13^2)*s23^3) +
              p1q^4*p2q*((-36*s12^2 + 36*s13^2)*s23^3 + (-36*s12 + 36*s13)*
                 s23^4) + p1q^2*p2q^3*((45*s12^4 + 90*s12^3*s13 +
                  54*s12^2*s13^2 + 18*s12*s13^3 + 9*s13^4)*s23 +
                (189*s12^3 + 297*s12^2*s13 + 135*s12*s13^2 + 27*s13^3)*
                 s23^2 + (216*s12^2 + 216*s12*s13 + 54*s13^2)*s23^3 +
                (72*s12 + 36*s13)*s23^4) + p1q^3*p2q^2*((18*s12^3 +
                  9*s12^2*s13 - 36*s12*s13^2 - 27*s13^3)*s23^2 +
                (-54*s12^2 - 99*s12*s13 - 45*s13^2)*s23^3 +
                (-90*s12 - 36*s13)*s23^4 - 18*s23^5) + p1q^5*(
                (-18*s12 - 18*s13)*s23^4 - 18*s23^5)) +
            p3q^2*(p2q^4*(18*s12^5 - 108*s12^4*s13 - 162*s12^3*s13^2 +
                72*s12^2*s13^3 + 108*s12*s13^4 + (36*s12^4 - 252*s12^3*s13 -
                  72*s12^2*s13^2 + 216*s12*s13^3)*s23 + (18*s12^3 -
                  144*s12^2*s13 + 108*s12*s13^2)*s23^2) + p1q*p2q^3*(
                18*s12^5 - 72*s12^4*s13 - 144*s12^3*s13^2 + 54*s12*s13^4 +
                (-126*s12^4 - 666*s12^3*s13 - 594*s12^2*s13^2 - 54*s12*s13^3)*
                 s23 + (-288*s12^3 - 756*s12^2*s13 - 324*s12*s13^2 -
                  36*s13^3)*s23^2 + (-144*s12^2 - 180*s12*s13 - 36*s13^2)*
                 s23^3) + p1q^2*p2q^2*((-63*s12^4 - 108*s12^3*s13 +
                  72*s12*s13^3 + 27*s13^4)*s23 + (99*s12^3 + 351*s12^2*s13 +
                  297*s12*s13^2 + 45*s13^3)*s23^2 + (306*s12^2 + 450*s12*
                   s13 + 90*s13^2)*s23^3 + (144*s12 + 72*s13)*s23^4) +
              p1q^3*p2q*((63*s12^3 + 90*s12^2*s13 - 9*s12*s13^2 - 36*s13^3)*
                 s23^2 + (63*s12^2 + 27*s12*s13 - 36*s13^2)*s23^3 +
                (-36*s12 - 36*s13)*s23^4 - 36*s23^5) + p1q^4*(
                (45*s12^2 + 54*s12*s13 + 9*s13^2)*s23^3 + (27*s12 - 9*s13)*
                 s23^4 - 18*s23^5)))*Log(s12/(s12 + s13 + s23)))/
          (p1q*p3q^5*(2*s12^4 + 2*s12^3*s13)*s23^2 + p1q*p2q^5*
            (2*s12^2*s13^2 + 2*s12*s13^3)*s23^2 - 2*p1q^5*p2q*s12*s23^5 +
           p1q^2*p2q^4*((2*s12^2*s13^2 + 2*s12*s13^3)*s23^2 +
             (-4*s12^2*s13 - 6*s12*s13^2)*s23^3) + p1q^3*p2q^3*
            ((-4*s12^2*s13 - 6*s12*s13^2)*s23^3 + (2*s12^2 + 6*s12*s13)*
              s23^4) + p1q^4*p2q^2*((2*s12^2 + 6*s12*s13)*s23^4 -
             2*s12*s23^5) + p3q^4*(p1q*p2q*(6*s12^4 + 2*s12^3*s13 - 4*s12^2*
                s13^2)*s23^2 + p1q^2*((2*s12^4 + 2*s12^3*s13)*s23^2 +
               (-6*s12^3 - 4*s12^2*s13)*s23^3)) +
           p3q^3*(p1q*p2q^2*(6*s12^4 - 6*s12^3*s13 - 10*s12^2*s13^2 + 2*s12*
                s13^3)*s23^2 + p1q^2*p2q*((4*s12^4 - 4*s12^2*s13^2)*s23^2 +
               (-16*s12^3 - 12*s12^2*s13 - 4*s12*s13^2)*s23^3) +
             p1q^3*((-6*s12^3 - 4*s12^2*s13)*s23^3 + (6*s12^2 + 2*s12*s13)*
                s23^4)) + p3q*(p1q*p2q^4*(-4*s12^3*s13 + 2*s12^2*s13^2 + 6*
                s12*s13^3)*s23^2 - 2*p1q^5*s12*s23^5 + p1q^2*p2q^3*
              ((-4*s12^3*s13 + 4*s12*s13^3)*s23^2 + (-4*s12^3 - 12*s12^2*
                  s13 - 16*s12*s13^2)*s23^3) + p1q^3*p2q^2*
              ((-4*s12^3 - 8*s12^2*s13 - 10*s12*s13^2)*s23^3 + (10*s12^2 +
                 14*s12*s13)*s23^4) + p1q^4*p2q*((8*s12^2 + 8*s12*s13)*
                s23^4 - 4*s12*s23^5)) + p3q^2*(p1q*p2q^3*(2*s12^4 - 10*s12^3*
                s13 - 6*s12^2*s13^2 + 6*s12*s13^3)*s23^2 +
             p1q^2*p2q^2*((2*s12^4 - 6*s12^3*s13 - 6*s12^2*s13^2 +
                 2*s12*s13^3)*s23^2 + (-14*s12^3 - 16*s12^2*s13 -
                 14*s12*s13^2)*s23^3) + p1q^3*p2q*((-10*s12^3 - 8*s12^2*s13 -
                 4*s12*s13^2)*s23^3 + (14*s12^2 + 10*s12*s13)*s23^4) +
             p1q^4*((6*s12^2 + 2*s12*s13)*s23^4 - 2*s12*s23^5))) +
         ((p3q^6*(18*s12^4*s13 + 36*s12^3*s13^2 + 18*s12^2*s13^3 +
              (36*s12^3*s13 + 36*s12^2*s13^2)*s23 + 18*s12^2*s13*s23^2) +
            p2q^6*(18*s12^2*s13^3 + 36*s12*s13^4 + 18*s13^5 +
              (36*s12*s13^3 + 36*s13^4)*s23 + 18*s13^3*s23^2) +
            p1q*p2q^5*(18*s12^2*s13^3 + 36*s12*s13^4 + 18*s13^5 +
              (-54*s12^2*s13^2 - 72*s12*s13^3 - 18*s13^4)*s23 +
              (-108*s12*s13^2 - 90*s13^3)*s23^2 - 54*s13^2*s23^3) +
            p1q^2*p2q^4*((27*s12^3*s13 + 27*s12^2*s13^2 - 27*s12*s13^3 -
                27*s13^4)*s23 + (81*s12^2*s13 + 54*s12*s13^2 - 27*s13^3)*s23^
                2 + (108*s12*s13 + 54*s13^2)*s23^3 + 54*s13*s23^4) +
            p1q^5*p2q*((-18*s12 - 18*s13)*s23^4 - 18*s23^5) +
            p1q^3*p2q^3*((-9*s12^3 - 36*s12^2*s13 - 45*s12*s13^2 - 18*s13^3)*
               s23^2 + (-27*s12^2 - 9*s12*s13 + 18*s13^2)*s23^3 +
              (-36*s12 + 18*s13)*s23^4 - 18*s23^5) + p1q^4*p2q^2*
             ((9*s12^2 + 54*s12*s13 + 45*s13^2)*s23^3 + (-9*s12 + 27*s13)*s23^
                4 - 18*s23^5) + p3q^5*(p2q*(72*s12^4*s13 + 108*s12^3*s13^2 -
                36*s12*s13^4 + (144*s12^3*s13 + 72*s12^2*s13^2 -
                  72*s12*s13^3)*s23 + (72*s12^2*s13 - 36*s12*s13^2)*s23^2) +
              p1q*(18*s12^4*s13 + 36*s12^3*s13^2 + 18*s12^2*s13^3 +
                (-36*s12^2*s13^2 - 36*s12*s13^3)*s23 + (-54*s12^2*s13 -
                  72*s12*s13^2)*s23^2 - 36*s12*s13*s23^3)) +
            p3q^4*(p2q^2*(108*s12^4*s13 + 72*s12^3*s13^2 - 162*s12^2*s13^3 -
                108*s12*s13^4 + 18*s13^5 + (216*s12^3*s13 - 72*s12^2*s13^2 -
                  252*s12*s13^3 + 36*s13^4)*s23 + (108*s12^2*s13 -
                  144*s12*s13^2 + 18*s13^3)*s23^2) + p1q*p2q*(54*s12^4*s13 +
                72*s12^3*s13^2 - 18*s12^2*s13^3 - 36*s12*s13^4 +
                (-18*s12^3*s13 - 252*s12^2*s13^2 - 270*s12*s13^3 - 36*s13^4)*
                 s23 + (-18*s12^3 - 234*s12^2*s13 - 378*s12*s13^2 - 72*s13^3)*
                 s23^2 + (-18*s12^2 - 144*s12*s13 - 36*s13^2)*s23^3) +
              p1q^2*((-9*s12^4 - 27*s12^3*s13 + 9*s12^2*s13^2 + 63*s12*
                   s13^3 + 36*s13^4)*s23 + (9*s12^3 + 36*s12^2*s13 +
                  117*s12*s13^2 + 90*s13^3)*s23^2 + (18*s12^2 + 54*s12*s13 +
                  72*s13^2)*s23^3 + 18*s13*s23^4)) +
            p3q^3*(p2q^3*(72*s12^4*s13 - 72*s12^3*s13^2 - 288*s12^2*s13^3 -
                72*s12*s13^4 + 72*s13^5 + (144*s12^3*s13 - 288*s12^2*s13^2 -
                  288*s12*s13^3 + 144*s13^4)*s23 + (72*s12^2*s13 -
                  216*s12*s13^2 + 72*s13^3)*s23^2) + p1q*p2q^2*(
                54*s12^4*s13 - 144*s12^2*s13^3 - 72*s12*s13^4 + 18*s13^5 +
                (-54*s12^3*s13 - 594*s12^2*s13^2 - 666*s12*s13^3 - 126*s13^4)*
                 s23 + (-36*s12^3 - 324*s12^2*s13 - 756*s12*s13^2 -
                  288*s13^3)*s23^2 + (-36*s12^2 - 180*s12*s13 - 144*s13^2)*
                 s23^3) + p1q^3*((36*s12^3 + 45*s12^2*s13 - 18*s12*s13^2 -
                  27*s13^3)*s23^2 + (-63*s12*s13 - 63*s13^2)*s23^3 +
                (-36*s12 - 36*s13)*s23^4) + p1q^2*p2q*((9*s12^4 +
                  18*s12^3*s13 + 54*s12^2*s13^2 + 90*s12*s13^3 + 45*s13^4)*
                 s23 + (27*s12^3 + 135*s12^2*s13 + 297*s12*s13^2 + 189*s13^3)*
                 s23^2 + (54*s12^2 + 216*s12*s13 + 216*s13^2)*s23^3 +
                (36*s12 + 72*s13)*s23^4)) + p3q^2*(p2q^4*(18*s12^4*s13 -
                108*s12^3*s13^2 - 162*s12^2*s13^3 + 72*s12*s13^4 +
                108*s13^5 + (36*s12^3*s13 - 252*s12^2*s13^2 - 72*s12*s13^3 +
                  216*s13^4)*s23 + (18*s12^2*s13 - 144*s12*s13^2 + 108*s13^3)*
                 s23^2) + p1q*p2q^3*(18*s12^4*s13 - 72*s12^3*s13^2 -
                144*s12^2*s13^3 + 54*s13^5 + (-54*s12^3*s13 - 630*s12^2*
                   s13^2 - 738*s12*s13^3 - 162*s13^4)*s23 +
                (-18*s12^3 - 162*s12^2*s13 - 774*s12*s13^2 - 450*s13^3)*
                 s23^2 + (-18*s12^2 - 72*s12*s13 - 234*s13^2)*s23^3) +
              p1q^2*p2q^2*((27*s12^4 + 72*s12^3*s13 - 108*s12*s13^3 -
                  63*s13^4)*s23 + (45*s12^3 + 297*s12^2*s13 + 351*s12*s13^2 +
                  99*s13^3)*s23^2 + (90*s12^2 + 450*s12*s13 + 306*s13^2)*
                 s23^3 + (72*s12 + 144*s13)*s23^4) + p1q^3*p2q*(
                (-27*s12^3 - 36*s12^2*s13 + 9*s12*s13^2 + 18*s13^3)*s23^2 +
                (-45*s12^2 - 99*s12*s13 - 54*s13^2)*s23^3 +
                (-36*s12 - 90*s13)*s23^4 - 18*s23^5) + p1q^4*(
                (-45*s12^2 - 54*s12*s13 - 9*s13^2)*s23^3 + (-27*s12 + 9*s13)*
                 s23^4 + 18*s23^5)) + p3q*(p2q^5*(-36*s12^3*s13^2 +
                108*s12*s13^4 + 72*s13^5 + (-72*s12^2*s13^2 + 72*s12*s13^3 +
                  144*s13^4)*s23 + (-36*s12*s13^2 + 72*s13^3)*s23^2) +
              p1q*p2q^4*(-36*s12^3*s13^2 - 18*s12^2*s13^3 + 72*s12*s13^4 +
                54*s13^5 + (-18*s12^3*s13 - 306*s12^2*s13^2 - 378*s12*s13^3 -
                  90*s13^4)*s23 + (-18*s12^2*s13 - 432*s12*s13^2 - 324*s13^3)*
                 s23^2 - 180*s13^2*s23^3) + p1q^4*p2q*((36*s12^2 - 36*s13^2)*
                 s23^3 + (36*s12 - 36*s13)*s23^4) + p1q^2*p2q^3*(
                (9*s12^4 + 54*s12^3*s13 - 18*s12^2*s13^2 - 162*s12*s13^3 -
                  99*s13^4)*s23 + (27*s12^3 + 279*s12^2*s13 + 225*s12*s13^2 -
                  27*s13^3)*s23^2 + (54*s12^2 + 396*s12*s13 + 216*s13^2)*
                 s23^3 + (36*s12 + 144*s13)*s23^4) + p1q^3*p2q^2*(
                (-36*s12^3 - 9*s12^2*s13 + 90*s12*s13^2 + 63*s13^3)*s23^2 +
                (-36*s12^2 + 27*s12*s13 + 63*s13^2)*s23^3 +
                (-36*s12 - 36*s13)*s23^4 - 36*s23^5) + p1q^5*(
                (18*s12 + 18*s13)*s23^4 + 18*s23^5)))*
           Log(s13/(s12 + s13 + s23)))/(p1q*p3q^5*(2*s12^3*s13 +
             2*s12^2*s13^2)*s23^2 + p1q*p2q^5*(2*s12*s13^3 + 2*s13^4)*s23^2 -
           2*p1q^5*p2q*s13*s23^5 + p1q^2*p2q^4*((2*s12*s13^3 + 2*s13^4)*
              s23^2 + (-4*s12*s13^2 - 6*s13^3)*s23^3) +
           p1q^3*p2q^3*((-4*s12*s13^2 - 6*s13^3)*s23^3 +
             (2*s12*s13 + 6*s13^2)*s23^4) + p1q^4*p2q^2*
            ((2*s12*s13 + 6*s13^2)*s23^4 - 2*s13*s23^5) +
           p3q^4*(p1q*p2q*(6*s12^3*s13 + 2*s12^2*s13^2 - 4*s12*s13^3)*s23^2 +
             p1q^2*((2*s12^3*s13 + 2*s12^2*s13^2)*s23^2 + (-6*s12^2*s13 -
                 4*s12*s13^2)*s23^3)) + p3q^3*(p1q*p2q^2*(6*s12^3*s13 - 6*
                s12^2*s13^2 - 10*s12*s13^3 + 2*s13^4)*s23^2 +
             p1q^2*p2q*((4*s12^3*s13 - 4*s12*s13^3)*s23^2 + (-16*s12^2*s13 -
                 12*s12*s13^2 - 4*s13^3)*s23^3) +
             p1q^3*((-6*s12^2*s13 - 4*s12*s13^2)*s23^3 + (6*s12*s13 +
                 2*s13^2)*s23^4)) + p3q*(p1q*p2q^4*(-4*s12^2*s13^2 + 2*s12*
                s13^3 + 6*s13^4)*s23^2 - 2*p1q^5*s13*s23^5 +
             p1q^2*p2q^3*((-4*s12^2*s13^2 + 4*s13^4)*s23^2 + (-4*s12^2*s13 -
                 12*s12*s13^2 - 16*s13^3)*s23^3) + p1q^3*p2q^2*
              ((-4*s12^2*s13 - 8*s12*s13^2 - 10*s13^3)*s23^3 + (10*s12*s13 +
                 14*s13^2)*s23^4) + p1q^4*p2q*((8*s12*s13 + 8*s13^2)*s23^4 -
               4*s13*s23^5)) + p3q^2*(p1q*p2q^3*(2*s12^3*s13 - 10*s12^2*
                s13^2 - 6*s12*s13^3 + 6*s13^4)*s23^2 + p1q^2*p2q^2*
              ((2*s12^3*s13 - 6*s12^2*s13^2 - 6*s12*s13^3 + 2*s13^4)*s23^2 +
               (-14*s12^2*s13 - 16*s12*s13^2 - 14*s13^3)*s23^3) +
             p1q^3*p2q*((-10*s12^2*s13 - 8*s12*s13^2 - 4*s13^3)*s23^3 +
               (14*s12*s13 + 10*s13^2)*s23^4) + p1q^4*((6*s12*s13 + 2*s13^2)*
                s23^4 - 2*s13*s23^5))) +
         ((p3q^5*(36*s12^4*s13 + 36*s12^3*s13^2 + (18*s12^4 + 54*s12^3*s13)*
               s23 + 18*s12^3*s23^2) + p2q^5*(36*s12^2*s13^3 + 36*s12*s13^4 +
              (54*s12*s13^3 + 18*s13^4)*s23 + 18*s13^3*s23^2) +
            p1q*p2q^4*(36*s12^2*s13^3 + 36*s12*s13^4 + (-72*s12^2*s13^2 -
                36*s12*s13^3)*s23 + (-108*s12*s13^2 - 36*s13^3)*s23^2 -
              36*s13^2*s23^3) + p1q^4*p2q*((-9*s12^2 - 18*s12*s13 - 9*s13^2)*
               s23^3 + (-9*s12 - 9*s13)*s23^4) + p1q^2*p2q^3*
             ((-45*s12^3*s13 - 171*s12^2*s13^2 - 153*s12*s13^3 - 27*s13^4)*
               s23 + (-45*s12^2*s13 - 162*s12*s13^2 - 63*s13^3)*s23^2 +
              (18*s12*s13 - 18*s13^2)*s23^3 + 18*s13*s23^4) +
            p1q^3*p2q^2*((9*s12^3 + 90*s12^2*s13 + 117*s12*s13^2 + 36*s13^3)*
               s23^2 + (9*s12^2 + 117*s12*s13 + 72*s13^2)*s23^3 +
              36*s13*s23^4) + p3q^4*(p2q*(108*s12^4*s13 + 36*s12^3*s13^2 -
                72*s12^2*s13^3 + (36*s12^4 + 126*s12^3*s13 - 90*s12^2*s13^2)*
                 s23 + (36*s12^3 - 18*s12^2*s13)*s23^2) + p1q*(36*s12^4*s13 +
                36*s12^3*s13^2 + (-36*s12^3*s13 - 72*s12^2*s13^2)*s23 +
                (-36*s12^3 - 108*s12^2*s13)*s23^2 - 36*s12^2*s23^3)) +
            p3q^3*(p2q^2*(108*s12^4*s13 - 108*s12^3*s13^2 - 180*s12^2*s13^3 +
                36*s12*s13^4 + (18*s12^4 + 90*s12^3*s13 - 270*s12^2*s13^2 +
                  18*s12*s13^3)*s23 + (18*s12^3 - 36*s12^2*s13 -
                  18*s12*s13^2)*s23^2) + p1q*p2q*(72*s12^4*s13 -
                72*s12^2*s13^3 + (-18*s12^4 - 162*s12^3*s13 - 342*s12^2*
                   s13^2 - 54*s12*s13^3)*s23 + (-90*s12^3 - 360*s12^2*s13 -
                  126*s12*s13^2)*s23^2 + (-72*s12^2 - 72*s12*s13)*s23^3) +
              p1q^2*((-27*s12^4 - 153*s12^3*s13 - 171*s12^2*s13^2 -
                  45*s12*s13^3)*s23 + (-63*s12^3 - 162*s12^2*s13 -
                  45*s12*s13^2)*s23^2 + (-18*s12^2 + 18*s12*s13)*s23^3 +
                18*s12*s23^4)) + p3q^2*(p2q^3*(36*s12^4*s13 - 180*s12^3*
                 s13^2 - 108*s12^2*s13^3 + 108*s12*s13^4 + (18*s12^3*s13 -
                  270*s12^2*s13^2 + 90*s12*s13^3 + 18*s13^4)*s23 +
                (-18*s12^2*s13 - 36*s12*s13^2 + 18*s13^3)*s23^2) +
              p1q*p2q^2*(36*s12^4*s13 - 108*s12^3*s13^2 - 108*s12^2*s13^3 +
                36*s12*s13^4 + (-18*s12^4 - 180*s12^3*s13 - 540*s12^2*s13^2 -
                  180*s12*s13^3 - 18*s13^4)*s23 + (-54*s12^3 - 378*s12^2*
                   s13 - 378*s12*s13^2 - 54*s13^3)*s23^2 +
                (-36*s12^2 - 144*s12*s13 - 36*s13^2)*s23^3) +
              p1q^3*((36*s12^3 + 117*s12^2*s13 + 90*s12*s13^2 + 9*s13^3)*
                 s23^2 + (72*s12^2 + 117*s12*s13 + 9*s13^2)*s23^3 +
                36*s12*s23^4) + p1q^2*p2q*((-36*s12^4 - 225*s12^3*s13 -
                  315*s12^2*s13^2 - 153*s12*s13^3 - 27*s13^4)*s23 +
                (-72*s12^3 - 207*s12^2*s13 - 126*s12*s13^2 - 45*s13^3)*
                 s23^2 + 72*s12*s13*s23^3 + (36*s12 + 18*s13)*s23^4)) +
            p3q*(p2q^4*(-72*s12^3*s13^2 + 36*s12^2*s13^3 + 108*s12*s13^4 +
                (-90*s12^2*s13^2 + 126*s12*s13^3 + 36*s13^4)*s23 +
                (-18*s12*s13^2 + 36*s13^3)*s23^2) + p1q*p2q^3*(-72*s12^3*
                 s13^2 + 72*s12*s13^4 + (-54*s12^3*s13 - 342*s12^2*s13^2 -
                  162*s12*s13^3 - 18*s13^4)*s23 + (-126*s12^2*s13 -
                  360*s12*s13^2 - 90*s13^3)*s23^2 + (-72*s12*s13 - 72*s13^2)*
                 s23^3) + p1q^4*((-9*s12^2 - 18*s12*s13 - 9*s13^2)*s23^3 +
                (-9*s12 - 9*s13)*s23^4) + p1q^3*p2q*((27*s12^3 + 153*s12^2*
                   s13 + 153*s12*s13^2 + 27*s13^3)*s23^2 +
                (45*s12^2 + 162*s12*s13 + 45*s13^2)*s23^3 + (18*s12 + 18*s13)*
                 s23^4) + p1q^2*p2q^2*((-27*s12^4 - 153*s12^3*s13 -
                  315*s12^2*s13^2 - 225*s12*s13^3 - 36*s13^4)*s23 +
                (-45*s12^3 - 126*s12^2*s13 - 207*s12*s13^2 - 72*s13^3)*
                 s23^2 + 72*s12*s13*s23^3 + (18*s12 + 36*s13)*s23^4)))*
           Log((s12 + s13)/(s12 + s13 + s23)))/(2*p1q*p3q^4*s12^3*s13*s23^2 +
           2*p1q*p2q^4*s12*s13^3*s23^2 + 2*p1q^4*p2q*s12*s13*s23^4 +
           p1q^2*p2q^3*(2*s12*s13^3*s23^2 - 4*s12*s13^2*s23^3) +
           p1q^3*p2q^2*(-4*s12*s13^2*s23^3 + 2*s12*s13*s23^4) +
           p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
             p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
           p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*
              s23^2 + p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
               (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) + p1q^3*(-4*s12^2*s13*
                s23^3 + 2*s12*s13*s23^4)) +
           p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
             2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*((-4*s12^2*s13^2 +
                 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*s13^2)*s23^3) +
             p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*s23^3 + 4*s12*s13*
                s23^4))) + ((p3q^6*(-72*s12^5*s13 - 144*s12^4*s13^2 -
              72*s12^3*s13^3 + (-18*s12^5 - 144*s12^4*s13 - 126*s12^3*s13^2)*
               s23 + (-18*s12^4 - 54*s12^3*s13)*s23^2) +
            p2q^6*(-72*s12^3*s13^3 - 144*s12^2*s13^4 - 72*s12*s13^5 +
              (-126*s12^2*s13^3 - 144*s12*s13^4 - 18*s13^5)*s23 +
              (-54*s12*s13^3 - 18*s13^4)*s23^2) + p1q*p2q^5*
             (-72*s12^3*s13^3 - 144*s12^2*s13^4 - 72*s12*s13^5 +
              (162*s12^3*s13^2 + 252*s12^2*s13^3 + 90*s12*s13^4)*s23 +
              (288*s12^2*s13^2 + 342*s12*s13^3 + 54*s13^4)*s23^2 +
              (126*s12*s13^2 + 54*s13^3)*s23^3) + p1q^2*p2q^4*
             ((-18*s12^4*s13 + 126*s12^3*s13^2 + 378*s12^2*s13^3 +
                270*s12*s13^4 + 36*s13^5)*s23 + (-126*s12^3*s13 -
                36*s12^2*s13^2 + 180*s12*s13^3 + 54*s13^4)*s23^2 +
              (-198*s12^2*s13 - 216*s12*s13^2 - 36*s13^3)*s23^3 +
              (-90*s12*s13 - 54*s13^2)*s23^4) + p1q^5*p2q*
             ((9*s12^2 - 18*s12*s13 - 27*s13^2)*s23^4 + (9*s12 - 27*s13)*s23^
                5) + p1q^3*p2q^3*((-81*s12^3*s13 - 315*s12^2*s13^2 -
                333*s12*s13^3 - 99*s13^4)*s23^2 + (18*s12^3 - 99*s12^2*s13 -
                306*s12*s13^2 - 135*s13^3)*s23^3 + (36*s12^2 - 18*s13^2)*s23^
                4 + (18*s12 + 18*s13)*s23^5) + p1q^4*p2q^2*
             ((9*s12^3 + 72*s12^2*s13 + 153*s12*s13^2 + 90*s13^3)*s23^3 +
              (27*s12^2 + 99*s12*s13 + 108*s13^2)*s23^4 + (18*s12 + 18*s13)*
               s23^5) + p3q^5*(p2q*(-288*s12^5*s13 - 432*s12^4*s13^2 +
                144*s12^2*s13^4 + (-54*s12^5 - 522*s12^4*s13 - 234*s12^3*
                   s13^2 + 234*s12^2*s13^3)*s23 + (-54*s12^4 - 180*s12^3*
                   s13 + 90*s12^2*s13^2)*s23^2) + p1q*(-72*s12^5*s13 -
                144*s12^4*s13^2 - 72*s12^3*s13^3 + (90*s12^4*s13 +
                  252*s12^3*s13^2 + 162*s12^2*s13^3)*s23 +
                (54*s12^4 + 342*s12^3*s13 + 288*s12^2*s13^2)*s23^2 +
                (54*s12^3 + 126*s12^2*s13)*s23^3)) +
            p3q^4*(p2q^2*(-432*s12^5*s13 - 288*s12^4*s13^2 + 648*s12^3*
                 s13^3 + 432*s12^2*s13^4 - 72*s12*s13^5 + (-54*s12^5 -
                  702*s12^4*s13 + 288*s12^3*s13^2 + 846*s12^2*s13^3 -
                  90*s12*s13^4)*s23 + (-54*s12^4 - 216*s12^3*s13 +
                  360*s12^2*s13^2 - 18*s12*s13^3)*s23^2) +
              p1q*p2q*(-216*s12^5*s13 - 288*s12^4*s13^2 + 72*s12^3*s13^3 +
                144*s12^2*s13^4 + (18*s12^5 + 432*s12^4*s13 + 1278*s12^3*
                   s13^2 + 972*s12^2*s13^3 + 108*s12*s13^4)*s23 +
                (180*s12^4 + 1278*s12^3*s13 + 1314*s12^2*s13^2 + 216*s12*
                   s13^3)*s23^2 + (162*s12^3 + 486*s12^2*s13 + 108*s12*s13^2)*
                 s23^3) + p1q^2*((36*s12^5 + 270*s12^4*s13 + 378*s12^3*
                   s13^2 + 126*s12^2*s13^3 - 18*s12*s13^4)*s23 +
                (54*s12^4 + 180*s12^3*s13 - 36*s12^2*s13^2 - 126*s12*s13^3)*
                 s23^2 + (-36*s12^3 - 216*s12^2*s13 - 198*s12*s13^2)*s23^3 +
                (-54*s12^2 - 90*s12*s13)*s23^4)) +
            p3q^3*(p2q^3*(-288*s12^5*s13 + 288*s12^4*s13^2 + 1152*s12^3*
                 s13^3 + 288*s12^2*s13^4 - 288*s12*s13^5 +
                (-18*s12^5 - 414*s12^4*s13 + 1008*s12^3*s13^2 + 1008*s12^2*
                   s13^3 - 414*s12*s13^4 - 18*s13^5)*s23 +
                (-18*s12^4 - 108*s12^3*s13 + 540*s12^2*s13^2 - 108*s12*
                   s13^3 - 18*s13^4)*s23^2) + p1q*p2q^2*(-216*s12^5*s13 +
                576*s12^3*s13^3 + 288*s12^2*s13^4 - 72*s12*s13^5 +
                (36*s12^5 + 702*s12^4*s13 + 2448*s12^3*s13^2 + 2232*s12^2*
                   s13^3 + 468*s12*s13^4 + 18*s13^5)*s23 +
                (198*s12^4 + 1746*s12^3*s13 + 2502*s12^2*s13^2 + 1026*s12*
                   s13^3 + 72*s13^4)*s23^2 + (162*s12^3 + 702*s12^2*s13 +
                  450*s12*s13^2 + 54*s13^3)*s23^3) + p1q^2*p2q*(
                (54*s12^5 + 594*s12^4*s13 + 972*s12^3*s13^2 + 540*s12^2*
                   s13^3 + 126*s12*s13^4 + 18*s13^5)*s23 +
                (90*s12^4 + 234*s12^3*s13 - 324*s12^2*s13^2 - 306*s12*s13^3 +
                  18*s13^4)*s23^2 + (-126*s12^3 - 864*s12^2*s13 -
                  828*s12*s13^2 - 54*s13^3)*s23^3 + (-162*s12^2 -
                  360*s12*s13 - 54*s13^2)*s23^4) + p1q^3*((-99*s12^4 -
                  333*s12^3*s13 - 315*s12^2*s13^2 - 81*s12*s13^3)*s23^2 +
                (-135*s12^3 - 306*s12^2*s13 - 99*s12*s13^2 + 18*s13^3)*
                 s23^3 + (-18*s12^2 + 36*s13^2)*s23^4 + (18*s12 + 18*s13)*
                 s23^5)) + p3q*(p2q^5*(144*s12^4*s13^2 - 432*s12^2*s13^4 -
                288*s12*s13^5 + (234*s12^3*s13^2 - 234*s12^2*s13^3 -
                  522*s12*s13^4 - 54*s13^5)*s23 + (90*s12^2*s13^2 -
                  180*s12*s13^3 - 54*s13^4)*s23^2) + p1q*p2q^4*(144*s12^4*
                 s13^2 + 72*s12^3*s13^3 - 288*s12^2*s13^4 - 216*s12*s13^5 +
                (108*s12^4*s13 + 972*s12^3*s13^2 + 1278*s12^2*s13^3 +
                  432*s12*s13^4 + 18*s13^5)*s23 + (216*s12^3*s13 +
                  1314*s12^2*s13^2 + 1278*s12*s13^3 + 180*s13^4)*s23^2 +
                (108*s12^2*s13 + 486*s12*s13^2 + 162*s13^3)*s23^3) +
              p1q^2*p2q^3*((18*s12^5 + 126*s12^4*s13 + 540*s12^3*s13^2 +
                  972*s12^2*s13^3 + 594*s12*s13^4 + 54*s13^5)*s23 +
                (18*s12^4 - 306*s12^3*s13 - 324*s12^2*s13^2 + 234*s12*s13^3 +
                  90*s13^4)*s23^2 + (-54*s12^3 - 828*s12^2*s13 - 864*s12*
                   s13^2 - 126*s13^3)*s23^3 + (-54*s12^2 - 360*s12*s13 -
                  162*s13^2)*s23^4) + p1q^5*((-27*s12^2 - 18*s12*s13 +
                  9*s13^2)*s23^4 + (-27*s12 + 9*s13)*s23^5) +
              p1q^4*p2q*((9*s12^3 + 243*s12^2*s13 + 243*s12*s13^2 + 9*s13^3)*
                 s23^3 + (27*s12^2 + 270*s12*s13 + 27*s13^2)*s23^4 +
                (18*s12 + 18*s13)*s23^5) + p1q^3*p2q^2*((-27*s12^4 -
                  441*s12^3*s13 - 927*s12^2*s13^2 - 585*s12*s13^3 - 72*s13^4)*
                 s23^2 + (-63*s12^3 - 432*s12^2*s13 - 567*s12*s13^2 -
                  144*s13^3)*s23^3 + (18*s12^2 + 126*s12*s13 - 18*s13^2)*
                 s23^4 + (54*s12 + 54*s13)*s23^5)) +
            p3q^2*(p2q^4*(-72*s12^5*s13 + 432*s12^4*s13^2 + 648*s12^3*s13^3 -
                288*s12^2*s13^4 - 432*s12*s13^5 + (-90*s12^4*s13 +
                  846*s12^3*s13^2 + 288*s12^2*s13^3 - 702*s12*s13^4 -
                  54*s13^5)*s23 + (-18*s12^3*s13 + 360*s12^2*s13^2 -
                  216*s12*s13^3 - 54*s13^4)*s23^2) + p1q*p2q^3*(-72*s12^5*
                 s13 + 288*s12^4*s13^2 + 576*s12^3*s13^3 - 216*s12*s13^5 +
                (18*s12^5 + 468*s12^4*s13 + 2232*s12^3*s13^2 + 2448*s12^2*
                   s13^3 + 702*s12*s13^4 + 36*s13^5)*s23 +
                (72*s12^4 + 1026*s12^3*s13 + 2502*s12^2*s13^2 + 1746*s12*
                   s13^3 + 198*s13^4)*s23^2 + (54*s12^3 + 450*s12^2*s13 +
                  702*s12*s13^2 + 162*s13^3)*s23^3) + p1q^2*p2q^2*(
                (36*s12^5 + 468*s12^4*s13 + 1008*s12^3*s13^2 + 1008*s12^2*
                   s13^3 + 468*s12*s13^4 + 36*s13^5)*s23 +
                (54*s12^4 - 126*s12^3*s13 - 576*s12^2*s13^2 - 126*s12*s13^3 +
                  54*s13^4)*s23^2 + (-144*s12^3 - 1278*s12^2*s13 -
                  1278*s12*s13^2 - 144*s13^3)*s23^3 + (-162*s12^2 -
                  540*s12*s13 - 162*s13^2)*s23^4) + p1q^4*(
                (90*s12^3 + 153*s12^2*s13 + 72*s12*s13^2 + 9*s13^3)*s23^3 +
                (108*s12^2 + 99*s12*s13 + 27*s13^2)*s23^4 + (18*s12 + 18*s13)*
                 s23^5) + p1q^3*p2q*((-72*s12^4 - 585*s12^3*s13 - 927*s12^2*
                   s13^2 - 441*s12*s13^3 - 27*s13^4)*s23^2 +
                (-144*s12^3 - 567*s12^2*s13 - 432*s12*s13^2 - 63*s13^3)*
                 s23^3 + (-18*s12^2 + 126*s12*s13 + 18*s13^2)*s23^4 +
                (54*s12 + 54*s13)*s23^5)))*Log(s23/(s12 + s13 + s23)))/
          (p1q*p3q^5*(2*s12^4*s13 + 2*s12^3*s13^2)*s23^2 +
           p1q*p2q^5*(2*s12^2*s13^3 + 2*s12*s13^4)*s23^2 -
           2*p1q^5*p2q*s12*s13*s23^5 + p1q^2*p2q^4*
            ((2*s12^2*s13^3 + 2*s12*s13^4)*s23^2 + (-4*s12^2*s13^2 - 6*s12*
                s13^3)*s23^3) + p1q^3*p2q^3*((-4*s12^2*s13^2 - 6*s12*s13^3)*
              s23^3 + (2*s12^2*s13 + 6*s12*s13^2)*s23^4) +
           p1q^4*p2q^2*((2*s12^2*s13 + 6*s12*s13^2)*s23^4 -
             2*s12*s13*s23^5) + p3q^4*(p1q*p2q*(6*s12^4*s13 + 2*s12^3*s13^2 -
               4*s12^2*s13^3)*s23^2 + p1q^2*((2*s12^4*s13 + 2*s12^3*s13^2)*
                s23^2 + (-6*s12^3*s13 - 4*s12^2*s13^2)*s23^3)) +
           p3q^3*(p1q*p2q^2*(6*s12^4*s13 - 6*s12^3*s13^2 - 10*s12^2*s13^3 + 2*
                s12*s13^4)*s23^2 + p1q^2*p2q*((4*s12^4*s13 - 4*s12^2*s13^3)*
                s23^2 + (-16*s12^3*s13 - 12*s12^2*s13^2 - 4*s12*s13^3)*
                s23^3) + p1q^3*((-6*s12^3*s13 - 4*s12^2*s13^2)*s23^3 +
               (6*s12^2*s13 + 2*s12*s13^2)*s23^4)) +
           p3q*(p1q*p2q^4*(-4*s12^3*s13^2 + 2*s12^2*s13^3 + 6*s12*s13^4)*
              s23^2 - 2*p1q^5*s12*s13*s23^5 + p1q^2*p2q^3*
              ((-4*s12^3*s13^2 + 4*s12*s13^4)*s23^2 + (-4*s12^3*s13 -
                 12*s12^2*s13^2 - 16*s12*s13^3)*s23^3) + p1q^3*p2q^2*
              ((-4*s12^3*s13 - 8*s12^2*s13^2 - 10*s12*s13^3)*s23^3 +
               (10*s12^2*s13 + 14*s12*s13^2)*s23^4) + p1q^4*p2q*
              ((8*s12^2*s13 + 8*s12*s13^2)*s23^4 - 4*s12*s13*s23^5)) +
           p3q^2*(p1q*p2q^3*(2*s12^4*s13 - 10*s12^3*s13^2 - 6*s12^2*s13^3 + 6*
                s12*s13^4)*s23^2 + p1q^2*p2q^2*((2*s12^4*s13 - 6*s12^3*
                  s13^2 - 6*s12^2*s13^3 + 2*s12*s13^4)*s23^2 +
               (-14*s12^3*s13 - 16*s12^2*s13^2 - 14*s12*s13^3)*s23^3) +
             p1q^3*p2q*((-10*s12^3*s13 - 8*s12^2*s13^2 - 4*s12*s13^3)*s23^3 +
               (14*s12^2*s13 + 10*s12*s13^2)*s23^4) +
             p1q^4*((6*s12^2*s13 + 2*s12*s13^2)*s23^4 - 2*s12*s13*s23^5)))) +
       Log((p1q + p3q)/(p1q + p2q + p3q))*
        (((p1q*p2q^3*(s12^2*s13^2 + 2*s12*s13^3 + s13^4 + (s12*s13^2 + s13^3)*
               s23) + p3q^4*(-2*s12^4 - 4*s12^3*s13 - 2*s12^2*s13^2 +
              (-4*s12^3 - 4*s12^2*s13)*s23 - 2*s12^2*s23^2) +
            p1q^2*p2q^2*(-(s12^3*s13) - 2*s12^2*s13^2 - s12*s13^3 +
              (-(s12^2*s13) - 3*s12*s13^2 - 2*s13^3)*s23 - 2*s13^2*s23^2) +
            p1q^4*((2*s12^3 + 4*s12^2*s13 + 2*s12*s13^2)*s23 +
              (4*s12^2 + 4*s12*s13)*s23^2 + 2*s12*s23^3) +
            p1q^3*p2q*(-2*s12^4 - 6*s12^3*s13 - 6*s12^2*s13^2 - 2*s12*s13^3 +
              (-5*s12^3 - 8*s12^2*s13 - 3*s12*s13^2)*s23 + (-4*s12^2 -
                s12*s13 + s13^2)*s23^2 + (-s12 + s13)*s23^3) +
            p3q^3*(p2q*(2*s12^3*s13 + 4*s12^2*s13^2 + 2*s12*s13^3 +
                (6*s12^2*s13 + 6*s12*s13^2)*s23 + 4*s12*s13*s23^2) +
              p1q*(-6*s12^4 - 13*s12^3*s13 - 8*s12^2*s13^2 - s12*s13^3 +
                (-8*s12^3 - 9*s12^2*s13 - s12*s13^2)*s23 +
                (2*s12^2 + 4*s12*s13)*s23^2 + 4*s12*s23^3)) +
            p3q*(p2q^3*(2*s12^2*s13^2 + 4*s12*s13^3 + 2*s13^4 +
                (2*s12*s13^2 + 2*s13^3)*s23) + p1q*p2q^2*(-(s12^3*s13) -
                2*s12^2*s13^2 - s12*s13^3 + (-3*s12^2*s13 - 9*s12*s13^2 -
                  6*s13^3)*s23 + (-2*s12*s13 - 6*s13^2)*s23^2) +
              p1q^2*p2q*(-5*s12^4 - 12*s12^3*s13 - 8*s12^2*s13^2 + s13^4 +
                (-10*s12^3 - 11*s12^2*s13 + 2*s12*s13^2 + 3*s13^3)*s23 +
                (-5*s12^2 + 7*s12*s13 + 8*s13^2)*s23^2 + 6*s13*s23^3) +
              p1q^3*(-2*s12^4 - 6*s12^3*s13 - 6*s12^2*s13^2 - 2*s12*s13^3 +
                (2*s12^3 + s12^2*s13 - 2*s12*s13^2 - s13^3)*s23 +
                (8*s12^2 + 3*s12*s13 - 3*s13^2)*s23^2 + (2*s12 - 4*s13)*
                 s23^3 - 2*s23^4)) + p3q^2*(p2q^2*(-2*s12^3*s13 -
                4*s12^2*s13^2 - 2*s12*s13^3 + (-2*s12^2*s13 - 4*s12*s13^2 -
                  2*s13^3)*s23 - 2*s13^2*s23^2) + p1q*p2q*(-4*s12^4 -
                6*s12^3*s13 + s12^2*s13^2 + 4*s12*s13^3 + s13^4 +
                (-8*s12^3 - 2*s12^2*s13 + 9*s12*s13^2 + 3*s13^3)*s23 +
                (-4*s12^2 + 8*s12*s13 + 6*s13^2)*s23^2 + 4*s13*s23^3) +
              p1q^2*(-6*s12^4 - 15*s12^3*s13 - 12*s12^2*s13^2 - 3*s12*s13^3 +
                (-4*s12^3 - 8*s12^2*s13 - 5*s12*s13^2 - s13^3)*s23 +
                (8*s12^2 + 3*s12*s13 - 3*s13^2)*s23^2 + (4*s12 - 4*s13)*
                 s23^3 - 2*s23^4)))*Log(s12/(s12 + s13 + s23)))/
          (-2*p2q^4*s12*s13^4 + p3q^4*(2*s12^4*s13 + 2*s12^3*s13*s23) +
           p1q*p2q^3*(2*s12^2*s13^3 - 2*s12*s13^4 + 6*s12*s13^3*s23) +
           p1q^2*p2q^2*(2*s12^2*s13^3 + (-4*s12^2*s13^2 + 6*s12*s13^3)*s23 -
             6*s12*s13^2*s23^2) + p1q^4*(2*s12^2*s13*s23^2 +
             2*s12*s13*s23^3) + p1q^3*p2q*(-4*s12^2*s13^2*s23 +
             (2*s12^2*s13 - 6*s12*s13^2)*s23^2 + 2*s12*s13*s23^3) +
           p3q^3*(p2q*(2*s12^4*s13 - 6*s12^3*s13^2 + (2*s12^3*s13 -
                 4*s12^2*s13^2)*s23) + p1q*(4*s12^4*s13 - 4*s12^2*s13*
                s23^2)) + p3q^2*(p2q^2*(-6*s12^3*s13^2 + 6*s12^2*s13^3 +
               (-4*s12^2*s13^2 + 2*s12*s13^3)*s23) + p1q*p2q*
              (2*s12^4*s13 - 10*s12^3*s13^2 + (-2*s12^3*s13 - 8*s12^2*s13^2)*
                s23 + (-4*s12^2*s13 - 4*s12*s13^2)*s23^2) +
             p1q^2*(2*s12^4*s13 - 6*s12^3*s13*s23 - 6*s12^2*s13*s23^2 + 2*s12*
                s13*s23^3)) + p3q*(p2q^3*(6*s12^2*s13^3 - 2*s12*s13^4 + 2*s12*
                s13^3*s23) + p1q*p2q^2*(-4*s12^3*s13^2 + 8*s12^2*s13^3 +
               (-4*s12^2*s13^2 + 8*s12*s13^3)*s23 - 4*s12*s13^2*s23^2) +
             p1q^2*p2q*(-4*s12^3*s13^2 + (-4*s12^3*s13 - 8*s12^2*s13^2)*s23 +
               (-2*s12^2*s13 - 10*s12*s13^2)*s23^2 + 2*s12*s13*s23^3) +
             p1q^3*(-4*s12^3*s13*s23 + 4*s12*s13*s23^3))) +
         ((p2q^6*(18*s12^2*s13^4 + 18*s12*s13^5 + 18*s12*s13^4*s23) +
            p3q^6*(-18*s12^5*s13 - 18*s12^4*s13^2 + (-36*s12^5 -
                90*s12^4*s13 - 36*s12^3*s13^2)*s23 + (-72*s12^4 -
                72*s12^3*s13)*s23^2 - 36*s12^3*s23^3) +
            p1q*p2q^5*(-18*s12^3*s13^3 + 18*s12*s13^5 + (-72*s12^2*s13^3 -
                36*s12*s13^4)*s23 + (-56*s12*s13^3 - 2*s13^4)*s23^2 -
              2*s13^3*s23^3) + p1q^2*p2q^4*(-18*s12^3*s13^3 -
              18*s12^2*s13^4 + (9*s12^3*s13^2 - 90*s12^2*s13^3 -
                81*s12*s13^4)*s23 + (57*s12^2*s13^2 - 34*s12*s13^3 - s13^4)*
               s23^2 + (54*s12*s13^2 + 5*s13^3)*s23^3 + 6*s13^2*s23^4) +
            p1q^3*p2q^3*((27*s12^4*s13 + 90*s12^3*s13^2 + 63*s12^2*s13^3)*
               s23 + (55*s12^3*s13 + 213*s12^2*s13^2 + 124*s12*s13^3 +
                2*s13^4)*s23^2 + (24*s12^2*s13 + 124*s12*s13^2 + 8*s13^3)*s23^
                3 - 10*s12*s13*s23^4 - 6*s13*s23^5) + p1q^4*p2q^2*
             ((-9*s12^4 - 63*s12^3*s13 - 54*s12^2*s13^2)*s23^2 +
              (-28*s12^3 - 145*s12^2*s13 - 76*s12*s13^2 - 4*s13^3)*s23^3 +
              (-27*s12^2 - 89*s12*s13 - 13*s13^2)*s23^4 + (-6*s12 - 7*s13)*
               s23^5 + 2*s23^6) + p1q^5*p2q*((9*s12^3 + 9*s12^2*s13)*s23^3 +
              (22*s12^2 + 15*s12*s13 + 2*s13^2)*s23^4 + (17*s12 + 6*s13)*s23^
                5 + 4*s23^6) + p3q^5*(p2q*(-54*s12^5*s13 + 54*s12^3*s13^3 +
                (-72*s12^5 - 126*s12^4*s13 + 126*s12^3*s13^2 + 72*s12^2*
                   s13^3)*s23 + (-144*s12^4 + 144*s12^2*s13^2)*s23^2 +
                (-72*s12^3 + 72*s12^2*s13)*s23^3) + p1q*(-36*s12^5*s13 -
                36*s12^4*s13^2 + (-36*s12^5 - 90*s12^4*s13 - 18*s12^3*s13^2)*
                 s23 + (4*s12^4 + 96*s12^3*s13 + 74*s12^2*s13^2)*s23^2 +
                (116*s12^3 + 150*s12^2*s13)*s23^3 + 76*s12^2*s23^4)) +
            p3q^4*(p2q^2*(-54*s12^5*s13 + 108*s12^4*s13^2 + 108*s12^3*s13^3 -
                54*s12^2*s13^4 + (-36*s12^5 + 18*s12^4*s13 + 378*s12^3*
                   s13^2 + 18*s12^2*s13^3 - 36*s12*s13^4)*s23 +
                (-72*s12^4 + 216*s12^3*s13 + 216*s12^2*s13^2 - 72*s12*s13^3)*
                 s23^2 + (-36*s12^3 + 144*s12^2*s13 - 36*s12*s13^2)*s23^3) +
              p1q*p2q*(-90*s12^5*s13 + 90*s12^3*s13^3 + (-72*s12^5 -
                  108*s12^4*s13 + 252*s12^3*s13^2 + 108*s12^2*s13^3)*s23 +
                (6*s12^4 + 414*s12^3*s13 + 460*s12^2*s13^2 + 70*s12*s13^3)*
                 s23^2 + (228*s12^3 + 496*s12^2*s13 + 134*s12*s13^2)*s23^3 +
                (150*s12^2 + 64*s12*s13)*s23^4) + p1q^2*(-18*s12^5*s13 -
                18*s12^4*s13^2 + (27*s12^5 + 90*s12^4*s13 + 99*s12^3*s13^2 +
                  18*s12^2*s13^3)*s23 + (134*s12^4 + 301*s12^3*s13 +
                  132*s12^2*s13^2 + s12*s13^3)*s23^2 + (143*s12^3 +
                  111*s12^2*s13 - 37*s12*s13^2)*s23^3 + (-8*s12^2 -
                  82*s12*s13)*s23^4 - 44*s12*s23^5)) +
            p3q^3*(p2q^3*(-18*s12^5*s13 + 144*s12^4*s13^2 - 144*s12^2*s13^4 +
                18*s12*s13^5 + (54*s12^4*s13 + 234*s12^3*s13^2 - 234*s12^2*
                   s13^3 - 54*s12*s13^4)*s23 + (144*s12^3*s13 - 144*s12*
                   s13^3)*s23^2 + (72*s12^2*s13 - 72*s12*s13^2)*s23^3) +
              p1q*p2q^2*(-72*s12^5*s13 + 144*s12^4*s13^2 + 144*s12^3*s13^3 -
                72*s12^2*s13^4 + (-36*s12^5 + 54*s12^4*s13 + 594*s12^3*
                   s13^2 + 54*s12^2*s13^3 - 90*s12*s13^4)*s23 +
                (2*s12^4 + 548*s12^3*s13 + 678*s12^2*s13^2 + 24*s12*s13^3)*
                 s23^2 + (112*s12^3 + 554*s12^2*s13 + 250*s12*s13^2 +
                  4*s13^3)*s23^3 + (74*s12^2 + 132*s12*s13 + 4*s13^2)*
                 s23^4) + p1q^2*p2q*(-36*s12^5*s13 + 36*s12^3*s13^3 +
                (18*s12^5 + 90*s12^4*s13 + 198*s12^3*s13^2 + 36*s12^2*s13^3 -
                  18*s12*s13^4)*s23 + (192*s12^4 + 547*s12^3*s13 +
                  425*s12^2*s13^2 + 87*s12*s13^3 - s13^4)*s23^2 +
                (246*s12^3 + 319*s12^2*s13 + 84*s12*s13^2 - 5*s13^3)*s23^3 +
                (-12*s12^2 - 110*s12*s13 - 12*s13^2)*s23^4 +
                (-84*s12 - 8*s13)*s23^5) + p1q^3*((27*s12^5 + 90*s12^4*s13 +
                  81*s12^3*s13^2 + 18*s12^2*s13^3)*s23 + (4*s12^4 +
                  16*s12^3*s13 - 23*s12^2*s13^2 - 17*s12*s13^3)*s23^2 +
                (-125*s12^3 - 205*s12^2*s13 - 97*s12*s13^2 - s13^3)*s23^3 +
                (-150*s12^2 - 127*s12*s13 - s13^2)*s23^4 + (-44*s12 + 4*s13)*
                 s23^5 + 4*s23^6)) + p3q^2*(p2q^4*(54*s12^4*s13^2 -
                108*s12^3*s13^3 - 108*s12^2*s13^4 + 54*s12*s13^5 +
                (18*s12^3*s13^2 - 234*s12^2*s13^3 + 18*s12*s13^4)*s23 +
                (-72*s12^2*s13^2 - 72*s12*s13^3)*s23^2 - 36*s12*s13^2*
                 s23^3) + p1q*p2q^3*(-18*s12^5*s13 + 144*s12^4*s13^2 -
                144*s12^2*s13^4 + 18*s12*s13^5 + (72*s12^4*s13 + 360*s12^3*
                   s13^2 - 288*s12^2*s13^3 - 216*s12*s13^4)*s23 +
                (230*s12^3*s13 + 260*s12^2*s13^2 - 226*s12*s13^3 - 4*s13^4)*
                 s23^2 + (208*s12^2*s13 + 86*s12*s13^2 + 2*s13^3)*s23^3 +
                (68*s12*s13 + 6*s13^2)*s23^4) + p1q^2*p2q^2*(-18*s12^5*s13 +
                54*s12^4*s13^2 + 54*s12^3*s13^3 - 18*s12^2*s13^4 +
                (9*s12^5 + 126*s12^4*s13 + 432*s12^3*s13^2 + 144*s12^2*
                   s13^3 - 63*s12*s13^4)*s23 + (94*s12^4 + 531*s12^3*s13 +
                  859*s12^2*s13^2 + 261*s12*s13^3 + s13^4)*s23^2 +
                (121*s12^3 + 435*s12^2*s13 + 419*s12*s13^2 + 9*s13^3)*s23^3 +
                (-4*s12^2 + 36*s12*s13 - 4*s13^2)*s23^4 + (-40*s12 - 12*s13)*
                 s23^5) + p1q^3*p2q*((18*s12^5 + 81*s12^4*s13 + 126*s12^3*
                   s13^2 + 81*s12^2*s13^3 + 18*s12*s13^4)*s23 +
                (23*s12^4 + 59*s12^3*s13 + 119*s12^2*s13^2 + 84*s12*s13^3 +
                  s13^4)*s23^2 + (-102*s12^3 - 302*s12^2*s13 - 126*s12*
                   s13^2 - 4*s13^3)*s23^3 + (-195*s12^2 - 290*s12*s13 -
                  21*s13^2)*s23^4 + (-82*s12 - 10*s13)*s23^5 + 6*s23^6) +
              p1q^4*((-54*s12^4 - 117*s12^3*s13 - 81*s12^2*s13^2 -
                  18*s12*s13^3)*s23^2 + (-89*s12^3 - 121*s12^2*s13 -
                  42*s12*s13^2 - s13^3)*s23^3 + (-8*s12^2 + 6*s12*s13 +
                  s13^2)*s23^4 + (35*s12 + 10*s13)*s23^5 + 8*s23^6)) +
            p3q*(p2q^5*(-54*s12^3*s13^3 + 54*s12*s13^5 + (-54*s12^2*s13^3 +
                  54*s12*s13^4)*s23) + p1q*p2q^4*(36*s12^4*s13^2 -
                72*s12^3*s13^3 - 72*s12^2*s13^4 + 36*s12*s13^5 +
                (36*s12^3*s13^2 - 306*s12^2*s13^3 - 162*s12*s13^4)*s23 +
                (-32*s12^2*s13^2 - 236*s12*s13^3 - 6*s13^4)*s23^2 +
                (-30*s12*s13^2 - 4*s13^3)*s23^3 + 2*s13^2*s23^4) +
              p1q^2*p2q^3*(36*s12^4*s13^2 - 36*s12^2*s13^4 +
                (54*s12^4*s13 + 234*s12^3*s13^2 - 36*s12^2*s13^3 -
                  144*s12*s13^4)*s23 + (177*s12^3*s13 + 515*s12^2*s13^2 +
                  105*s12*s13^3 + s13^4)*s23^2 + (191*s12^2*s13 +
                  334*s12*s13^2 + 19*s13^3)*s23^3 + (64*s12*s13 + 14*s13^2)*
                 s23^4 - 4*s13*s23^5) + p1q^3*p2q^2*((9*s12^5 + 72*s12^4*
                   s13 + 189*s12^3*s13^2 + 144*s12^2*s13^3 + 18*s12*s13^4)*
                 s23 + (19*s12^4 + 98*s12^3*s13 + 355*s12^2*s13^2 +
                  225*s12*s13^3 + 3*s13^4)*s23^2 + (-31*s12^3 - 127*s12^2*
                   s13 + 95*s12*s13^2 + 5*s13^3)*s23^3 + (-81*s12^2 -
                  173*s12*s13 - 20*s13^2)*s23^4 + (-38*s12 - 20*s13)*s23^5 +
                2*s23^6) + p1q^5*((27*s12^3 + 45*s12^2*s13 + 18*s12*s13^2)*
                 s23^3 + (58*s12^2 + 51*s12*s13 + 2*s13^2)*s23^4 +
                (35*s12 + 6*s13)*s23^5 + 4*s23^6) + p1q^4*p2q*(
                (-27*s12^4 - 126*s12^3*s13 - 135*s12^2*s13^2 - 36*s12*s13^3)*
                 s23^2 + (-63*s12^3 - 266*s12^2*s13 - 172*s12*s13^2 -
                  5*s13^3)*s23^3 + (-35*s12^2 - 137*s12*s13 - 12*s13^2)*
                 s23^4 + (11*s12 + 3*s13)*s23^5 + 10*s23^6)))*
           Log(s13/(s12 + s13 + s23)))/(-2*p1q*p2q^5*s12*s13^4*s23^2 +
           p1q*p3q^5*(2*s12^4*s13*s23^2 + 2*s12^3*s13*s23^3) +
           p1q^2*p2q^4*((2*s12^2*s13^3 - 2*s12*s13^4)*s23^2 +
             6*s12*s13^3*s23^3) + p1q^3*p2q^3*(2*s12^2*s13^3*s23^2 +
             (-4*s12^2*s13^2 + 6*s12*s13^3)*s23^3 - 6*s12*s13^2*s23^4) +
           p1q^5*p2q*(2*s12^2*s13*s23^4 + 2*s12*s13*s23^5) +
           p1q^4*p2q^2*(-4*s12^2*s13^2*s23^3 + (2*s12^2*s13 - 6*s12*s13^2)*
              s23^4 + 2*s12*s13*s23^5) + p3q^4*
            (p1q*p2q*((4*s12^4*s13 - 6*s12^3*s13^2)*s23^2 + (4*s12^3*s13 -
                 4*s12^2*s13^2)*s23^3) + p1q^2*(4*s12^4*s13*s23^2 - 4*s12^2*
                s13*s23^4)) + p3q^3*(p1q*p2q^2*((2*s12^4*s13 - 12*s12^3*
                  s13^2 + 6*s12^2*s13^3)*s23^2 + (2*s12^3*s13 - 8*s12^2*
                  s13^2 + 2*s12*s13^3)*s23^3) + p1q^2*p2q*
              ((6*s12^4*s13 - 10*s12^3*s13^2)*s23^2 + (-2*s12^3*s13 -
                 8*s12^2*s13^2)*s23^3 + (-8*s12^2*s13 - 4*s12*s13^2)*s23^4) +
             p1q^3*(2*s12^4*s13*s23^2 - 6*s12^3*s13*s23^3 - 6*s12^2*s13*
                s23^4 + 2*s12*s13*s23^5)) +
           p3q^2*(p1q*p2q^3*((-6*s12^3*s13^2 + 12*s12^2*s13^3 - 2*s12*s13^4)*
                s23^2 + (-4*s12^2*s13^2 + 4*s12*s13^3)*s23^3) +
             p1q^2*p2q^2*((2*s12^4*s13 - 14*s12^3*s13^2 + 8*s12^2*s13^3)*
                s23^2 + (-2*s12^3*s13 - 12*s12^2*s13^2 + 8*s12*s13^3)*s23^3 +
               (-4*s12^2*s13 - 8*s12*s13^2)*s23^4) + p1q^4*(-4*s12^3*s13*
                s23^3 + 4*s12*s13*s23^5) + p1q^3*p2q*((2*s12^4*s13 -
                 4*s12^3*s13^2)*s23^2 + (-10*s12^3*s13 - 8*s12^2*s13^2)*
                s23^3 + (-8*s12^2*s13 - 10*s12*s13^2)*s23^4 + 4*s12*s13*
                s23^5)) + p3q*(p1q*p2q^4*((6*s12^2*s13^3 - 4*s12*s13^4)*
                s23^2 + 2*s12*s13^3*s23^3) + p1q^2*p2q^3*
              ((-4*s12^3*s13^2 + 10*s12^2*s13^3 - 2*s12*s13^4)*s23^2 +
               (-4*s12^2*s13^2 + 14*s12*s13^3)*s23^3 - 4*s12*s13^2*s23^4) +
             p1q^5*(2*s12^2*s13*s23^4 + 2*s12*s13*s23^5) +
             p1q^3*p2q^2*((-4*s12^3*s13^2 + 2*s12^2*s13^3)*s23^2 +
               (-4*s12^3*s13 - 12*s12^2*s13^2 + 6*s12*s13^3)*s23^3 +
               (-2*s12^2*s13 - 16*s12*s13^2)*s23^4 + 2*s12*s13*s23^5) +
             p1q^4*p2q*((-4*s12^3*s13 - 4*s12^2*s13^2)*s23^3 + (2*s12^2*s13 -
                 6*s12*s13^2)*s23^4 + 6*s12*s13*s23^5))) +
         ((p3q^6*(18*s12^4 + 36*s12^3*s13 + 18*s12^2*s13^2 +
              (36*s12^3 + 36*s12^2*s13)*s23 + 18*s12^2*s23^2) +
            p1q^2*p2q^4*(18*s12^2*s13^2 + 36*s12*s13^3 + 18*s13^4 +
              (27*s12*s13^2 + 27*s13^3)*s23 + 9*s13^2*s23^2) +
            p1q^3*p2q^3*(-18*s12^3*s13 - 36*s12^2*s13^2 - 18*s12*s13^3 +
              (-45*s12^2*s13 - 81*s12*s13^2 - 36*s13^3)*s23 +
              (-45*s12*s13 - 54*s13^2)*s23^2 - 18*s13*s23^3) +
            p1q^4*p2q^2*((18*s12^2*s13 + 18*s12*s13^2)*s23 +
              (9*s12^2 + 45*s12*s13 + 18*s13^2)*s23^2 + (18*s12 + 27*s13)*s23^
                3 + 9*s23^4) + p3q^5*(p2q*(36*s12^4 + 36*s12^3*s13 -
                36*s12^2*s13^2 - 36*s12*s13^3 + (72*s12^3 - 72*s12*s13^2)*
                 s23 + (36*s12^2 - 36*s12*s13)*s23^2) + p1q*(18*s12^4 +
                36*s12^3*s13 + 18*s12^2*s13^2 + (-36*s12^2*s13 -
                  36*s12*s13^2)*s23 + (-54*s12^2 - 72*s12*s13)*s23^2 -
                36*s12*s23^3)) + p3q^4*(p2q^2*(18*s12^4 - 36*s12^3*s13 -
                108*s12^2*s13^2 - 36*s12*s13^3 + 18*s13^4 +
                (36*s12^3 - 108*s12^2*s13 - 108*s12*s13^2 + 36*s13^3)*s23 +
                (18*s12^2 - 72*s12*s13 + 18*s13^2)*s23^2) +
              p1q*p2q*(54*s12^4 + 72*s12^3*s13 - 18*s12^2*s13^2 -
                36*s12*s13^3 + (36*s12^3 - 126*s12^2*s13 - 198*s12*s13^2 -
                  36*s13^3)*s23 + (-90*s12^2 - 234*s12*s13 - 72*s13^2)*
                 s23^2 + (-72*s12 - 36*s13)*s23^3) + p1q^2*(18*s12^3*s13 +
                36*s12^2*s13^2 + 18*s12*s13^3 + (45*s12^2*s13 + 81*s12*
                   s13^2 + 36*s13^3)*s23 + (18*s12^2 + 99*s12*s13 + 90*s13^2)*
                 s23^2 + (36*s12 + 72*s13)*s23^3 + 18*s23^4)) +
            p3q*(p1q*p2q^4*(36*s12^2*s13^2 + 72*s12*s13^3 + 36*s13^4 +
                (54*s12*s13^2 + 54*s13^3)*s23 + 18*s13^2*s23^2) +
              p1q^2*p2q^3*(-54*s12^3*s13 - 90*s12^2*s13^2 - 18*s12*s13^3 +
                18*s13^4 + (-153*s12^2*s13 - 216*s12*s13^2 - 63*s13^3)*s23 +
                (-135*s12*s13 - 117*s13^2)*s23^2 - 36*s13*s23^3) +
              p1q^5*((-18*s12^2 - 36*s12*s13 - 18*s13^2)*s23^2 +
                (-36*s12 - 36*s13)*s23^3 - 18*s23^4) + p1q^4*p2q*(
                (36*s12^2*s13 + 72*s12*s13^2 + 36*s13^3)*s23 +
                (-9*s12^2 + 72*s12*s13 + 81*s13^2)*s23^2 + (-18*s12 + 36*s13)*
                 s23^3 - 9*s23^4) + p1q^3*p2q^2*(18*s12^4 + 18*s12^3*s13 -
                36*s12^2*s13^2 - 54*s12*s13^3 - 18*s13^4 +
                (45*s12^3 + 36*s12^2*s13 - 72*s12*s13^2 - 63*s13^3)*s23 +
                (54*s12^2 + 90*s12*s13 + 9*s13^2)*s23^2 + (45*s12 + 72*s13)*
                 s23^3 + 18*s23^4)) + p3q^2*(p2q^4*(18*s12^2*s13^2 +
                36*s12*s13^3 + 18*s13^4 + (36*s12*s13^2 + 36*s13^3)*s23 +
                18*s13^2*s23^2) + p1q*p2q^3*(-72*s12^3*s13 - 90*s12^2*s13^2 +
                36*s12*s13^3 + 54*s13^4 + (-162*s12^2*s13 - 126*s12*s13^2 +
                  36*s13^3)*s23 + (-126*s12*s13 - 54*s13^2)*s23^2 -
                36*s13*s23^3) + p1q^4*((18*s12^3 + 36*s12^2*s13 +
                  36*s12*s13^2 + 18*s13^3)*s23 + (-18*s12^2 - 45*s12*s13 -
                  9*s13^2)*s23^2 + (-90*s12 - 81*s13)*s23^3 - 54*s23^4) +
              p1q^2*p2q^2*(36*s12^4 + 18*s12^3*s13 - 90*s12^2*s13^2 -
                90*s12*s13^3 - 18*s13^4 + (54*s12^3 - 135*s12^2*s13 -
                  342*s12*s13^2 - 153*s13^3)*s23 + (18*s12^2 - 153*s12*s13 -
                  153*s13^2)*s23^2 + 18*s12*s23^3 + 18*s23^4) +
              p1q^3*p2q*(18*s12^4 + 54*s12^3*s13 + 36*s12^2*s13^2 -
                18*s12*s13^3 - 18*s13^4 + (63*s12^3 + 162*s12^2*s13 +
                  126*s12*s13^2 + 27*s13^3)*s23 + (90*s12^2 + 261*s12*s13 +
                  180*s13^2)*s23^2 + (63*s12 + 153*s13)*s23^3 + 18*s23^4)) +
            p3q^3*(p2q^3*(-36*s12^3*s13 - 36*s12^2*s13^2 + 36*s12*s13^3 +
                36*s13^4 + (-72*s12^2*s13 + 72*s13^3)*s23 +
                (-36*s12*s13 + 36*s13^2)*s23^2) + p1q*p2q^2*(36*s12^4 -
                36*s12^3*s13 - 162*s12^2*s13^2 - 72*s12*s13^3 + 18*s13^4 +
                (36*s12^3 - 252*s12^2*s13 - 342*s12*s13^2 - 54*s13^3)*s23 +
                (-36*s12^2 - 288*s12*s13 - 144*s13^2)*s23^2 +
                (-36*s12 - 72*s13)*s23^3) + p1q^3*(18*s12^3*s13 +
                36*s12^2*s13^2 + 18*s12*s13^3 + (54*s12^3 + 153*s12^2*s13 +
                  153*s12*s13^2 + 54*s13^3)*s23 + (90*s12^2 + 162*s12*s13 +
                  99*s13^2)*s23^2 + (18*s12 + 27*s13)*s23^3 - 18*s23^4) +
              p1q^2*p2q*(36*s12^4 + 90*s12^3*s13 + 54*s12^2*s13^2 -
                18*s12*s13^3 - 18*s13^4 + (36*s12^3 + 9*s12^2*s13 -
                  72*s12*s13^2 - 45*s13^3)*s23 + (9*s12*s13 + 27*s13^2)*
                 s23^2 + (36*s12 + 90*s13)*s23^3 + 36*s23^4)))*
           Log(s23/(s12 + s13 + s23)))/(-2*p1q*p2q^5*s13^4*s23 +
           p1q*p3q^5*(2*s12^3*s13*s23 + 2*s12^2*s13*s23^2) +
           p1q^2*p2q^4*((2*s12*s13^3 - 2*s13^4)*s23 + 6*s13^3*s23^2) +
           p1q^3*p2q^3*(2*s12*s13^3*s23 + (-4*s12*s13^2 + 6*s13^3)*s23^2 -
             6*s13^2*s23^3) + p1q^5*p2q*(2*s12*s13*s23^3 + 2*s13*s23^4) +
           p1q^4*p2q^2*(-4*s12*s13^2*s23^2 + (2*s12*s13 - 6*s13^2)*s23^3 +
             2*s13*s23^4) + p3q^4*(p1q*p2q*((4*s12^3*s13 - 6*s12^2*s13^2)*
                s23 + (4*s12^2*s13 - 4*s12*s13^2)*s23^2) +
             p1q^2*(4*s12^3*s13*s23 - 4*s12*s13*s23^3)) +
           p3q^3*(p1q*p2q^2*((2*s12^3*s13 - 12*s12^2*s13^2 + 6*s12*s13^3)*
                s23 + (2*s12^2*s13 - 8*s12*s13^2 + 2*s13^3)*s23^2) +
             p1q^2*p2q*((6*s12^3*s13 - 10*s12^2*s13^2)*s23 + (-2*s12^2*s13 -
                 8*s12*s13^2)*s23^2 + (-8*s12*s13 - 4*s13^2)*s23^3) +
             p1q^3*(2*s12^3*s13*s23 - 6*s12^2*s13*s23^2 - 6*s12*s13*s23^3 + 2*
                s13*s23^4)) + p3q^2*(p1q*p2q^3*((-6*s12^2*s13^2 +
                 12*s12*s13^3 - 2*s13^4)*s23 + (-4*s12*s13^2 + 4*s13^3)*
                s23^2) + p1q^2*p2q^2*((2*s12^3*s13 - 14*s12^2*s13^2 +
                 8*s12*s13^3)*s23 + (-2*s12^2*s13 - 12*s12*s13^2 + 8*s13^3)*
                s23^2 + (-4*s12*s13 - 8*s13^2)*s23^3) +
             p1q^4*(-4*s12^2*s13*s23^2 + 4*s13*s23^4) + p1q^3*p2q*
              ((2*s12^3*s13 - 4*s12^2*s13^2)*s23 + (-10*s12^2*s13 -
                 8*s12*s13^2)*s23^2 + (-8*s12*s13 - 10*s13^2)*s23^3 + 4*s13*
                s23^4)) + p3q*(p1q*p2q^4*((6*s12*s13^3 - 4*s13^4)*s23 + 2*
                s13^3*s23^2) + p1q^2*p2q^3*((-4*s12^2*s13^2 + 10*s12*s13^3 -
                 2*s13^4)*s23 + (-4*s12*s13^2 + 14*s13^3)*s23^2 - 4*s13^2*
                s23^3) + p1q^5*(2*s12*s13*s23^3 + 2*s13*s23^4) +
             p1q^3*p2q^2*((-4*s12^2*s13^2 + 2*s12*s13^3)*s23 +
               (-4*s12^2*s13 - 12*s12*s13^2 + 6*s13^3)*s23^2 + (-2*s12*s13 -
                 16*s13^2)*s23^3 + 2*s13*s23^4) + p1q^4*p2q*
              ((-4*s12^2*s13 - 4*s12*s13^2)*s23^2 + (2*s12*s13 - 6*s13^2)*
                s23^3 + 6*s13*s23^4))) +
         ((p2q^5*(18*s12^2*s13^3 + 18*s12*s13^4 + 18*s12*s13^3*s23) +
            p3q^5*(18*s12^4*s13 + 18*s12^3*s13^2 + (18*s12^4 + 36*s12^3*s13)*
               s23 + 18*s12^3*s23^2) + p1q*p2q^4*(18*s12^2*s13^3 +
              18*s12*s13^4 + (-36*s12^2*s13^2 - 18*s12*s13^3)*s23 +
              (-38*s12*s13^2 - 2*s13^3)*s23^2 - 2*s13^2*s23^3) +
            p1q^2*p2q^3*((-9*s12^3*s13 - 54*s12^2*s13^2 - 45*s12*s13^3)*s23 +
              (11*s12^2*s13 - 25*s12*s13^2)*s23^2 + (24*s12*s13 + 4*s13^2)*
               s23^3 + 4*s13*s23^4) + p1q^4*p2q*((-11*s12^2 - 13*s12*s13 -
                2*s13^2)*s23^3 + (-15*s12 - 6*s13)*s23^4 - 4*s23^5) +
            p1q^3*p2q^2*((11*s12^3 + 51*s12^2*s13 + 42*s12*s13^2 + 2*s13^3)*
               s23^2 + (13*s12^2 + 46*s12*s13 + 6*s13^2)*s23^3 +
              2*s13*s23^4 - 2*s23^5) + p3q^4*(p2q*(54*s12^4*s13 +
                18*s12^3*s13^2 - 36*s12^2*s13^3 + (36*s12^4 + 54*s12^3*s13 -
                  72*s12^2*s13^2)*s23 + (36*s12^3 - 36*s12^2*s13)*s23^2) +
              p1q*(18*s12^4*s13 + 18*s12^3*s13^2 + (-18*s12^3*s13 -
                  36*s12^2*s13^2)*s23 + (-38*s12^3 - 74*s12^2*s13)*s23^2 -
                38*s12^2*s23^3)) + p3q^3*(p2q^2*(54*s12^4*s13 -
                54*s12^3*s13^2 - 90*s12^2*s13^3 + 18*s12*s13^4 +
                (18*s12^4 - 162*s12^2*s13^2 + 36*s12*s13^3)*s23 +
                (18*s12^3 - 72*s12^2*s13 + 18*s12*s13^2)*s23^2) +
              p1q*p2q*(36*s12^4*s13 - 36*s12^2*s13^3 + (-18*s12^4 -
                  108*s12^3*s13 - 198*s12^2*s13^2 - 36*s12*s13^3)*s23 +
                (-94*s12^3 - 234*s12^2*s13 - 68*s12*s13^2)*s23^2 +
                (-76*s12^2 - 32*s12*s13)*s23^3) + p1q^2*((-27*s12^4 -
                  108*s12^3*s13 - 117*s12^2*s13^2 - 36*s12*s13^3)*s23 +
                (-63*s12^3 - 133*s12^2*s13 - 52*s12*s13^2)*s23^2 +
                (-14*s12^2 + 6*s12*s13)*s23^3 + 22*s12*s23^4)) +
            p3q*(p2q^4*(-36*s12^3*s13^2 + 18*s12^2*s13^3 + 54*s12*s13^4 +
                (-18*s12^2*s13^2 + 72*s12*s13^3)*s23 + 18*s12*s13^2*s23^2) +
              p1q*p2q^3*(-36*s12^3*s13^2 + 36*s12*s13^4 + (-18*s12^3*s13 -
                  144*s12^2*s13^2 - 54*s12*s13^3)*s23 + (-50*s12^2*s13 -
                  126*s12*s13^2 - 4*s13^3)*s23^2 + (-32*s12*s13 - 4*s13^2)*
                 s23^3) + p1q^2*p2q^2*((-27*s12^4 - 90*s12^3*s13 -
                  153*s12^2*s13^2 - 90*s12*s13^3)*s23 + (-43*s12^3 -
                  51*s12^2*s13 - 60*s12*s13^2 + 2*s13^3)*s23^2 +
                (6*s12^2 + 58*s12*s13 + 10*s13^2)*s23^3 + (22*s12 + 8*s13)*
                 s23^4) + p1q^4*((-11*s12^2 - 13*s12*s13 - 2*s13^2)*s23^3 +
                (-15*s12 - 6*s13)*s23^4 - 4*s23^5) + p1q^3*p2q*(
                (31*s12^3 + 102*s12^2*s13 + 75*s12*s13^2 + 4*s13^3)*s23^2 +
                (55*s12^2 + 101*s12*s13 + 10*s13^2)*s23^3 + (20*s12 + 2*s13)*
                 s23^4 - 4*s23^5)) + p3q^2*(p2q^3*(18*s12^4*s13 -
                90*s12^3*s13^2 - 54*s12^2*s13^3 + 54*s12*s13^4 +
                (-18*s12^3*s13 - 108*s12^2*s13^2 + 90*s12*s13^3)*s23 +
                (-36*s12^2*s13 + 36*s12*s13^2)*s23^2) + p1q*p2q^2*(
                18*s12^4*s13 - 54*s12^3*s13^2 - 54*s12^2*s13^3 +
                18*s12*s13^4 + (-18*s12^4 - 108*s12^3*s13 - 270*s12^2*s13^2 -
                  72*s12*s13^3)*s23 + (-56*s12^3 - 210*s12^2*s13 -
                  156*s12*s13^2 - 2*s13^3)*s23^2 + (-38*s12^2 - 64*s12*s13 -
                  2*s13^2)*s23^3) + p1q^2*p2q*((-36*s12^4 - 135*s12^3*s13 -
                  162*s12^2*s13^2 - 63*s12*s13^3)*s23 + (-70*s12^3 -
                  123*s12^2*s13 - 51*s12*s13^2 + 2*s13^3)*s23^2 +
                (10*s12^2 + 58*s12*s13 + 6*s13^2)*s23^3 + (44*s12 + 4*s13)*
                 s23^4) + p1q^3*((38*s12^3 + 87*s12^2*s13 + 51*s12*s13^2 +
                  2*s13^3)*s23^2 + (78*s12^2 + 91*s12*s13 + 4*s13^2)*s23^3 +
                38*s12*s23^4 - 2*s23^5)))*Log((s12 + s23)/(s12 + s13 + s23)))/
          (2*p1q*p3q^4*s12^3*s13*s23^2 + 2*p1q*p2q^4*s12*s13^3*s23^2 +
           2*p1q^4*p2q*s12*s13*s23^4 + p1q^2*p2q^3*(2*s12*s13^3*s23^2 -
             4*s12*s13^2*s23^3) + p1q^3*p2q^2*(-4*s12*s13^2*s23^3 +
             2*s12*s13*s23^4) + p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*
              s23^2 + p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
           p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*
              s23^2 + p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
               (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) + p1q^3*(-4*s12^2*s13*
                s23^3 + 2*s12*s13*s23^4)) +
           p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
             2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*((-4*s12^2*s13^2 +
                 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*s13^2)*s23^3) +
             p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*s23^3 + 4*s12*s13*
                s23^4)))) + Log(s13/(s12 + s13 + s23))*
        ((p3q^2*(63*s12^4*s13 - 72*s12^3*s13^2 - 135*s12^2*s13^3 +
             (126*s12^3*s13 - 162*s12^2*s13^2 - 90*s12*s13^3)*s23 +
             (63*s12^2*s13 - 90*s12*s13^2)*s23^2) +
           p2q^2*(-63*s12^3*s13^2 + 72*s12^2*s13^3 + 135*s12*s13^4 +
             (-126*s12^2*s13^2 + 162*s12*s13^3 + 90*s13^4)*s23 +
             (-63*s12*s13^2 + 90*s13^3)*s23^2) + p1q*p2q*(63*s12^3*s13^2 -
             72*s12^2*s13^3 - 135*s12*s13^4 + (-176*s12^4 + 15*s12^3*s13 +
               197*s12^2*s13^2 - 282*s12*s13^3 - 90*s13^4)*s23 +
             (-312*s12^3 + 201*s12^2*s13 + 9*s12*s13^2 - 170*s13^3)*s23^2 +
             (-136*s12^2 + 146*s12*s13 - 80*s13^2)*s23^3) +
           p1q^2*((-63*s12^3*s13 + 72*s12^2*s13^2 + 135*s12*s13^3)*s23 +
             (-126*s12^2*s13 + 162*s12*s13^2 + 90*s13^3)*s23^2 +
             (-63*s12*s13 + 90*s13^2)*s23^3) +
           p3q*(p2q*(63*s12^4*s13 - 135*s12^3*s13^2 - 63*s12^2*s13^3 + 135*
                s12*s13^4 + (126*s12^3*s13 - 288*s12^2*s13^2 + 72*s12*s13^3 +
                 90*s13^4)*s23 + (63*s12^2*s13 - 153*s12*s13^2 + 90*s13^3)*
                s23^2) + p1q*(-63*s12^4*s13 + 72*s12^3*s13^2 + 135*s12^2*
                s13^3 + (-176*s12^4 - 111*s12^3*s13 + 233*s12^2*s13^2 -
                 30*s12*s13^3)*s23 + (-312*s12^3 + 138*s12^2*s13 +
                 36*s12*s13^2 - 80*s13^3)*s23^2 + (-136*s12^2 + 146*s12*s13 -
                 80*s13^2)*s23^3)))/(p1q*p2q*(18*s12^4*s13*s23 +
             36*s12^3*s13*s23^2 + 18*s12^2*s13*s23^3) +
           p1q*p3q*(18*s12^4*s13*s23 + 36*s12^3*s13*s23^2 +
             18*s12^2*s13*s23^3)) +
         ((p2q^6*(-324*s12^5*s13^4 - 648*s12^4*s13^5 - 324*s12^3*s13^6 +
              (-342*s12^4*s13^4 - 459*s12^3*s13^5 - 144*s12^2*s13^6 -
                117*s12*s13^7 - 90*s13^8)*s23 + (-18*s12^3*s13^4 -
                117*s12^2*s13^5 - 27*s12*s13^6 - 90*s13^7)*s23^2) +
            p3q^6*(324*s12^8*s13 + 648*s12^7*s13^2 + 324*s12^6*s13^3 +
              (144*s12^8 + 675*s12^7*s13 + 666*s12^6*s13^2 + 45*s12^5*s13^3 -
                90*s12^4*s13^4)*s23 + (288*s12^7 + 396*s12^6*s13 +
                153*s12^5*s13^2 - 207*s12^4*s13^3 - 90*s12^3*s13^4)*s23^2 +
              (144*s12^6 + 45*s12^5*s13 - 27*s12^4*s13^2 - 90*s12^3*s13^3)*
               s23^3) + p1q*p2q^5*(324*s12^6*s13^3 + 648*s12^5*s13^4 +
              324*s12^4*s13^5 + (1152*s12^5*s13^3 + 2745*s12^4*s13^4 +
                1737*s12^3*s13^5 + 261*s12^2*s13^6 + 207*s12*s13^7 +
                90*s13^8)*s23 + (1023*s12^4*s13^3 + 2449*s12^3*s13^4 +
                730*s12^2*s13^5 + 482*s12*s13^6 + 530*s13^7)*s23^2 +
              (195*s12^3*s13^3 + 661*s12^2*s13^4 - 75*s12*s13^5 + 440*s13^6)*
               s23^3) + p1q^2*p2q^4*((-486*s12^6*s13^2 - 1638*s12^5*s13^3 -
                1269*s12^4*s13^4 - 144*s12^3*s13^5 - 117*s12^2*s13^6 -
                90*s12*s13^7)*s23 + (-1230*s12^5*s13^2 - 5005*s12^4*s13^3 -
                3592*s12^3*s13^4 - 788*s12^2*s13^5 - 935*s12*s13^6 -
                450*s13^7)*s23^2 + (-1221*s12^4*s13^2 - 5170*s12^3*s13^3 -
                1390*s12^2*s13^4 - 695*s12*s13^5 - 1310*s13^6)*s23^3 +
              (-477*s12^3*s13^2 - 1584*s12^2*s13^3 + 560*s12*s13^4 -
                860*s13^5)*s23^4) + p1q^3*p2q^3*((81*s12^6*s13 +
                1494*s12^5*s13^2 + 1764*s12^4*s13^3 + 369*s12^3*s13^4 +
                378*s12^2*s13^5 + 360*s12*s13^6)*s23^2 + (381*s12^5*s13 +
                4832*s12^4*s13^2 + 3714*s12^3*s13^3 + 682*s12^2*s13^4 +
                1680*s12*s13^5 + 900*s13^6)*s23^3 + (741*s12^4*s13 +
                5516*s12^3*s13^2 + 1240*s12^2*s13^3 + 300*s12*s13^4 +
                1740*s13^5)*s23^4 + (441*s12^3*s13 + 1956*s12^2*s13^2 -
                960*s12*s13^3 + 840*s13^4)*s23^5) + p1q^4*p2q^2*
             ((81*s12^6 - 585*s12^5*s13 - 1017*s12^4*s13^2 - 243*s12^3*
                 s13^3 - 432*s12^2*s13^4 - 540*s12*s13^5)*s23^3 +
              (21*s12^5 - 2389*s12^4*s13 - 1980*s12^3*s13^2 + 82*s12^2*
                 s13^3 - 1500*s12*s13^4 - 900*s13^5)*s23^4 + (-201*s12^4 -
                3023*s12^3*s13 - 510*s12^2*s13^2 + 205*s12*s13^3 -
                1310*s13^4)*s23^5 + (-141*s12^3 - 1219*s12^2*s13 +
                675*s12*s13^2 - 410*s13^3)*s23^6) +
            p1q^6*((63*s12^3*s13 - 27*s12^2*s13^2 - 90*s12*s13^3)*s23^5 +
              (126*s12^2*s13 - 117*s12*s13^2 - 90*s13^3)*s23^6 +
              (63*s12*s13 - 90*s13^2)*s23^7) + p1q^5*p2q*
             ((81*s12^5 + 198*s12^4*s13 - 45*s12^3*s13^2 + 198*s12^2*s13^3 +
                360*s12*s13^4)*s23^4 + (465*s12^4 + 445*s12^3*s13 -
                363*s12^2*s13^2 + 665*s12*s13^3 + 450*s13^4)*s23^5 +
              (687*s12^3 + 74*s12^2*s13 - 238*s12*s13^2 + 530*s13^3)*s23^6 +
              (303*s12^2 - 173*s12*s13 + 80*s13^2)*s23^7) +
            p3q^5*(p2q*(972*s12^8*s13 + 972*s12^7*s13^2 - 972*s12^6*s13^3 -
                972*s12^5*s13^4 + (288*s12^8 + 1422*s12^7*s13 + 252*s12^6*
                   s13^2 - 1278*s12^5*s13^3 - 36*s12^4*s13^4 + 360*s12^3*
                   s13^5)*s23 + (576*s12^7 + 270*s12^6*s13 - 117*s12^5*
                   s13^2 - 522*s12^4*s13^3 + 531*s12^3*s13^4 + 270*s12^2*
                   s13^5)*s23^2 + (288*s12^6 - 180*s12^5*s13 - 27*s12^4*
                   s13^2 - 99*s12^3*s13^3 + 270*s12^2*s13^4)*s23^3) +
              p1q*(324*s12^8*s13 + 648*s12^7*s13^2 + 324*s12^6*s13^3 +
                (-648*s12^7*s13 - 972*s12^6*s13^2 - 324*s12^5*s13^3)*s23 +
                (-735*s12^7 - 2800*s12^6*s13 - 1504*s12^5*s13^2 +
                  13*s12^4*s13^3 + 100*s12^3*s13^4)*s23^2 +
                (-1470*s12^6 - 2111*s12^5*s13 - 133*s12^4*s13^2 + 437*s12^3*
                   s13^3 + 100*s12^2*s13^4)*s23^3 + (-735*s12^5 - 283*s12^4*
                   s13 + 237*s12^3*s13^2 + 100*s12^2*s13^3)*s23^4)) +
            p3q^4*(p2q^2*(972*s12^8*s13 - 972*s12^7*s13^2 - 3888*s12^6*
                 s13^3 - 972*s12^5*s13^4 + 972*s12^4*s13^5 +
                (144*s12^8 + 819*s12^7*s13 - 2412*s12^6*s13^2 - 3015*s12^5*
                   s13^3 + 792*s12^4*s13^4 + 180*s12^3*s13^5 - 540*s12^2*
                   s13^6)*s23 + (288*s12^7 - 648*s12^6*s13 - 531*s12^5*
                   s13^2 - 882*s12^4*s13^3 + 1062*s12^3*s13^4 - 351*s12^2*
                   s13^5 - 270*s12*s13^6)*s23^2 + (144*s12^6 - 495*s12^5*
                   s13 + 135*s12^4*s13^2 - 117*s12^3*s13^3 + 459*s12^2*
                   s13^4 - 270*s12*s13^5)*s23^3) + p1q*p2q*(972*s12^8*s13 +
                1296*s12^7*s13^2 - 324*s12^6*s13^3 - 648*s12^5*s13^4 +
                (144*s12^8 - 1125*s12^7*s13 - 1737*s12^6*s13^2 - 1233*s12^5*
                   s13^3 - 855*s12^4*s13^4 - 90*s12^3*s13^5)*s23 +
                (-876*s12^7 - 4700*s12^6*s13 - 980*s12^5*s13^2 - 1393*s12^4*
                   s13^3 - 937*s12^3*s13^4 + 60*s12^2*s13^5)*s23^2 +
                (-2184*s12^6 - 2716*s12^5*s13 + 675*s12^4*s13^2 - 654*s12^3*
                   s13^3 - 36*s12^2*s13^4 + 160*s12*s13^5)*s23^3 +
                (-1164*s12^5 - 113*s12^4*s13 + 509*s12^3*s13^2 - 256*s12^2*
                   s13^3 + 160*s12*s13^4)*s23^4) + p1q^2*((-144*s12^8 -
                  1485*s12^7*s13 - 2124*s12^6*s13^2 - 855*s12^5*s13^3 -
                  72*s12^4*s13^4)*s23 + (-753*s12^7 - 2431*s12^6*s13 -
                  2170*s12^5*s13^2 - 1202*s12^4*s13^3 - 224*s12^3*s13^4)*
                 s23^2 + (267*s12^6 + 1108*s12^5*s13 - 548*s12^4*s13^2 -
                  499*s12^3*s13^3 + 80*s12^2*s13^4)*s23^3 +
                (2217*s12^5 + 2312*s12^4*s13 - 410*s12^3*s13^2 - 163*s12^2*
                   s13^3 + 70*s12*s13^4)*s23^4 + (1341*s12^4 + 258*s12^3*
                   s13 - 313*s12^2*s13^2 + 70*s12*s13^3)*s23^5)) +
            p3q^3*(p2q^3*(324*s12^8*s13 - 2268*s12^7*s13^2 - 2592*s12^6*
                 s13^3 + 2592*s12^5*s13^4 + 2268*s12^4*s13^5 - 324*s12^3*
                 s13^6 + (72*s12^7*s13 - 2916*s12^6*s13^2 - 972*s12^5*s13^3 +
                  2520*s12^4*s13^4 - 468*s12^3*s13^5 - 612*s12^2*s13^6 +
                  360*s12*s13^7)*s23 + (-522*s12^6*s13 - 99*s12^5*s13^2 -
                  936*s12^4*s13^3 + 774*s12^3*s13^4 - 1260*s12^2*s13^5 -
                  63*s12*s13^6 + 90*s13^7)*s23^2 + (-270*s12^5*s13 +
                  243*s12^4*s13^2 - 279*s12^3*s13^3 + 225*s12^2*s13^4 -
                  513*s12*s13^5 + 90*s13^6)*s23^3) + p1q*p2q^2*(972*s12^8*
                 s13 - 2592*s12^6*s13^3 - 1296*s12^5*s13^4 + 324*s12^4*
                 s13^5 + (144*s12^8 - 909*s12^7*s13 - 2250*s12^6*s13^2 -
                  3474*s12^5*s13^3 - 1044*s12^4*s13^4 + 1503*s12^3*s13^5 +
                  270*s12^2*s13^6)*s23 + (-141*s12^7 - 3025*s12^6*s13 +
                  68*s12^5*s13^2 - 5474*s12^4*s13^3 - 521*s12^3*s13^4 +
                  1005*s12^2*s13^5 - 420*s12*s13^6)*s23^2 +
                (-714*s12^6 - 1016*s12^5*s13 + 249*s12^4*s13^2 - 3919*s12^3*
                   s13^3 + 689*s12^2*s13^4 - 51*s12*s13^5 - 260*s13^6)*
                 s23^3 + (-429*s12^5 + 128*s12^4*s13 + 85*s12^3*s13^2 -
                  1095*s12^2*s13^3 + 629*s12*s13^4 - 260*s13^5)*s23^4) +
              p1q^2*p2q*((-144*s12^8 - 3321*s12^7*s13 - 4959*s12^6*s13^2 -
                  2583*s12^5*s13^3 - 909*s12^4*s13^4 - 108*s12^3*s13^5)*s23 +
                (-1326*s12^7 - 4841*s12^6*s13 - 3069*s12^5*s13^2 -
                  2825*s12^4*s13^3 - 1527*s12^3*s13^4 - 200*s12^2*s13^5)*
                 s23^2 + (-453*s12^6 + 1885*s12^5*s13 + 2325*s12^4*s13^2 +
                  277*s12^3*s13^3 - 36*s12^2*s13^4 + 160*s12*s13^5)*s23^3 +
                (2496*s12^5 + 4634*s12^4*s13 + 2918*s12^3*s13^2 +
                  22*s12^2*s13^3 + 231*s12*s13^4 + 250*s13^5)*s23^4 +
                (1767*s12^4 + 1229*s12^3*s13 + 197*s12^2*s13^2 - 179*s12*
                   s13^3 + 250*s13^4)*s23^5) + p1q^3*((351*s12^7 +
                  1656*s12^6*s13 + 1188*s12^5*s13^2 - 369*s12^4*s13^3 -
                  252*s12^3*s13^4)*s23^2 + (1935*s12^6 + 4632*s12^5*s13 +
                  1826*s12^4*s13^2 - 162*s12^3*s13^3 - 110*s12^2*s13^4)*
                 s23^3 + (1764*s12^5 + 2352*s12^4*s13 + 402*s12^3*s13^2 -
                  437*s12^2*s13^3 - 100*s12*s13^4)*s23^4 + (-873*s12^4 -
                  471*s12^3*s13 - 51*s12^2*s13^2 - 157*s12*s13^3 - 80*s13^4)*
                 s23^5 + (-1053*s12^3 + 153*s12^2*s13 + 23*s12*s13^2 -
                  80*s13^3)*s23^6)) + p3q*(p2q^5*(972*s12^6*s13^3 +
                972*s12^5*s13^4 - 972*s12^4*s13^5 - 972*s12^3*s13^6 +
                (1044*s12^5*s13^3 + 504*s12^4*s13^4 - 666*s12^3*s13^5 +
                  180*s12^2*s13^6 + 126*s12*s13^7 - 180*s13^8)*s23 +
                (90*s12^4*s13^3 + 567*s12^3*s13^4 + 18*s12^2*s13^5 +
                  423*s12*s13^6 - 90*s13^7)*s23^2 + (18*s12^3*s13^3 +
                  117*s12^2*s13^4 + 27*s12*s13^5 + 90*s13^6)*s23^3) +
              p1q*p2q^4*(-648*s12^7*s13^2 - 324*s12^6*s13^3 + 1296*s12^5*
                 s13^4 + 972*s12^4*s13^5 + (-864*s12^6*s13^2 + 369*s12^5*
                   s13^3 + 4986*s12^4*s13^4 + 3546*s12^3*s13^5 - 360*s12^2*
                   s13^6 - 63*s12*s13^7 + 90*s13^8)*s23 + (-405*s12^5*s13^2 -
                  927*s12^4*s13^3 + 4175*s12^3*s13^4 + 50*s12^2*s13^5 -
                  617*s12*s13^6 + 790*s13^7)*s23^2 + (-366*s12^4*s13^2 -
                  1720*s12^3*s13^3 + 979*s12^2*s13^4 - 1412*s12*s13^5 +
                  350*s13^6)*s23^3 + (-177*s12^3*s13^2 - 544*s12^2*s13^3 +
                  102*s12*s13^4 - 350*s13^5)*s23^4) + p1q^2*p2q^3*(
                (-810*s12^7*s13 - 2052*s12^6*s13^2 - 3825*s12^5*s13^3 -
                  2457*s12^4*s13^4 + 369*s12^3*s13^5 + 153*s12^2*s13^6 -
                  90*s12*s13^7)*s23 + (-1419*s12^6*s13 - 3907*s12^5*s13^2 -
                  11583*s12^4*s13^3 - 6571*s12^3*s13^4 + 852*s12^2*s13^5 -
                  88*s12*s13^6 - 360*s13^7)*s23^2 + (-939*s12^5*s13 -
                  2135*s12^4*s13^2 - 9633*s12^3*s13^3 - 887*s12^2*s13^4 +
                  1158*s12*s13^5 - 1370*s13^6)*s23^3 + (-30*s12^4*s13 +
                  1591*s12^3*s13^2 - 2358*s12^2*s13^3 + 1858*s12*s13^4 -
                  500*s13^5)*s23^4 + (300*s12^3*s13 + 1040*s12^2*s13^2 -
                  458*s12*s13^3 + 510*s13^4)*s23^5) + p1q^3*p2q^2*(
                (-81*s12^7 + 1944*s12^6*s13 + 5049*s12^5*s13^2 + 2844*s12^4*
                   s13^3 - 549*s12^3*s13^4 - 99*s12^2*s13^5 + 270*s12*s13^6)*
                 s23^2 + (426*s12^6 + 5306*s12^5*s13 + 11821*s12^4*s13^2 +
                  5694*s12^3*s13^3 - 676*s12^2*s13^4 + 652*s12*s13^5 +
                  540*s13^6)*s23^3 + (954*s12^5 + 4428*s12^4*s13 +
                  9694*s12^3*s13^2 + 861*s12^2*s13^3 - 982*s12*s13^4 +
                  1170*s13^5)*s23^4 + (306*s12^4 + 150*s12^3*s13 +
                  2050*s12^2*s13^2 - 1282*s12*s13^3 + 300*s13^4)*s23^5 +
                (-141*s12^3 - 916*s12^2*s13 + 502*s12*s13^2 - 330*s13^3)*
                 s23^6) + p1q^5*((63*s12^5 - 225*s12^4*s13 - 171*s12^3*
                   s13^2 + 207*s12^2*s13^3 + 90*s12*s13^4)*s23^4 +
                (429*s12^4 - 158*s12^3*s13 - 12*s12^2*s13^2 + 287*s12*s13^3 +
                  90*s13^4)*s23^5 + (669*s12^3 - 43*s12^2*s13 - 13*s12*
                   s13^2 + 80*s13^3)*s23^6 + (303*s12^2 - 110*s12*s13 -
                  10*s13^2)*s23^7) + p1q^4*p2q*((-225*s12^6 - 1701*s12^5*
                   s13 - 1134*s12^4*s13^2 + 351*s12^3*s13^3 - 261*s12^2*
                   s13^4 - 270*s12*s13^5)*s23^3 + (-1644*s12^5 - 5161*s12^4*
                   s13 - 1579*s12^3*s13^2 + 196*s12^2*s13^3 - 788*s12*s13^4 -
                  360*s13^5)*s23^4 + (-2310*s12^4 - 4279*s12^3*s13 -
                  161*s12^2*s13^2 + 328*s12*s13^3 - 490*s13^4)*s23^5 +
                (-588*s12^3 - 992*s12^2*s13 + 523*s12*s13^2 - 50*s13^3)*
                 s23^6 + (303*s12^2 - 173*s12*s13 + 80*s13^2)*s23^7)) +
            p3q^2*(p2q^4*(-972*s12^7*s13^2 + 972*s12^6*s13^3 + 3888*s12^5*
                 s13^4 + 972*s12^4*s13^5 - 972*s12^3*s13^6 +
                (-918*s12^6*s13^2 + 1764*s12^5*s13^3 + 2628*s12^4*s13^4 -
                  495*s12^3*s13^5 + 252*s12^2*s13^6 + 603*s12*s13^7 -
                  90*s13^8)*s23 + (162*s12^5*s13^2 - 279*s12^4*s13^3 +
                  918*s12^3*s13^4 - 504*s12^2*s13^5 + 657*s12*s13^6 +
                  90*s13^7)*s23^2 + (108*s12^4*s13^2 - 153*s12^3*s13^3 +
                  153*s12^2*s13^4 - 216*s12*s13^5 + 180*s13^6)*s23^3) +
              p1q*p2q^3*(324*s12^8*s13 - 1296*s12^7*s13^2 - 2592*s12^6*
                 s13^3 + 972*s12^4*s13^5 + (-432*s12^7*s13 - 2349*s12^6*
                   s13^2 - 3348*s12^5*s13^3 + 2052*s12^4*s13^4 + 3402*s12^3*
                   s13^5 - 351*s12^2*s13^6 - 270*s12*s13^7)*s23 +
                (-1125*s12^6*s13 - 861*s12^5*s13^2 - 6018*s12^4*s13^3 +
                  2242*s12^3*s13^4 + 265*s12^2*s13^5 - 1519*s12*s13^6 +
                  260*s13^7)*s23^2 + (-411*s12^5*s13 - 925*s12^4*s13^2 -
                  4743*s12^3*s13^3 + 1143*s12^2*s13^4 - 1548*s12*s13^5 -
                  350*s13^6)*s23^3 + (-42*s12^4*s13 - 364*s12^3*s13^2 -
                  1283*s12^2*s13^3 + 571*s12*s13^4 - 610*s13^5)*s23^4) +
              p1q^2*p2q^2*((-2646*s12^7*s13 - 4401*s12^6*s13^2 - 3915*s12^5*
                   s13^3 - 2025*s12^4*s13^4 + 405*s12^3*s13^5 + 270*s12^2*
                   s13^6)*s23 + (-591*s12^7 - 4018*s12^6*s13 - 4179*s12^5*
                   s13^2 - 9173*s12^4*s13^3 - 5290*s12^3*s13^4 + 675*s12^2*
                   s13^5 + 460*s12*s13^6)*s23^2 + (-756*s12^6 - 504*s12^5*
                   s13 + 1095*s12^4*s13^2 - 4767*s12^3*s13^3 - 549*s12^2*
                   s13^4 + 1419*s12*s13^5 - 240*s13^6)*s23^3 +
                (261*s12^5 + 2139*s12^4*s13 + 5117*s12^3*s13^2 - 850*s12^2*
                   s13^3 + 1252*s12*s13^4 + 520*s13^5)*s23^4 +
                (426*s12^4 + 1271*s12^3*s13 + 1550*s12^2*s13^2 - 707*s12*
                   s13^3 + 760*s13^4)*s23^5) + p1q^3*p2q*((288*s12^7 +
                  3690*s12^6*s13 + 5175*s12^5*s13^2 + 1251*s12^4*s13^3 -
                  702*s12^3*s13^4 - 180*s12^2*s13^5)*s23^2 +
                (2361*s12^6 + 9062*s12^5*s13 + 8140*s12^4*s13^2 + 2151*s12^3*
                   s13^3 - 397*s12^2*s13^4 - 110*s12*s13^5)*s23^3 +
                (2664*s12^5 + 4788*s12^4*s13 + 3815*s12^3*s13^2 - 285*s12^2*
                   s13^3 - 653*s12*s13^4 + 60*s13^5)*s23^4 +
                (-603*s12^4 - 1347*s12^3*s13 + 187*s12^2*s13^2 - 488*s12*
                   s13^3 - 350*s13^4)*s23^5 + (-1194*s12^3 - 763*s12^2*s13 +
                  525*s12*s13^2 - 410*s13^3)*s23^6) + p1q^4*(
                (-270*s12^6 - 333*s12^5*s13 + 324*s12^4*s13^2 + 297*s12^3*
                   s13^3 - 90*s12^2*s13^4)*s23^3 + (-1611*s12^5 - 1845*s12^4*
                   s13 + 149*s12^3*s13^2 + 33*s12^2*s13^3 - 80*s12*s13^4)*
                 s23^4 + (-2109*s12^4 - 1355*s12^3*s13 + 277*s12^2*s13^2 +
                  150*s12*s13^3 + 10*s13^4)*s23^5 + (-465*s12^3 -
                  16*s12^2*s13 + 127*s12*s13^2 + 90*s13^3)*s23^6 +
                (303*s12^2 - 173*s12*s13 + 80*s13^2)*s23^7)))*
           Log(s23/(s12 + s13 + s23)))/(p1q*p2q^5*(-18*s12^4*s13^4 -
             18*s12^3*s13^5)*s23^2 + p1q*p3q^5*
            ((18*s12^7*s13 + 18*s12^6*s13^2)*s23^2 + (18*s12^6*s13 + 18*s12^5*
                s13^2)*s23^3) + p1q^2*p2q^4*((18*s12^5*s13^3 + 18*s12^4*
                s13^4)*s23^2 + (54*s12^4*s13^3 + 72*s12^3*s13^4)*s23^3) +
           p1q^3*p2q^3*((-36*s12^5*s13^2 - 54*s12^4*s13^3)*s23^3 +
             (-54*s12^4*s13^2 - 108*s12^3*s13^3)*s23^4) +
           p1q^4*p2q^2*((18*s12^5*s13 + 54*s12^4*s13^2)*s23^4 +
             (18*s12^4*s13 + 72*s12^3*s13^2)*s23^5) +
           p1q^5*p2q*(-18*s12^4*s13*s23^5 - 18*s12^3*s13*s23^6) +
           p3q^4*(p1q*p2q*((36*s12^7*s13 - 18*s12^6*s13^2 - 54*s12^5*s13^3)*
                s23^2 + (36*s12^6*s13 - 36*s12^4*s13^3)*s23^3) +
             p1q^2*((18*s12^7*s13 + 18*s12^6*s13^2)*s23^2 + (-36*s12^6*s13 -
                 18*s12^5*s13^2)*s23^3 + (-54*s12^5*s13 - 36*s12^4*s13^2)*
                s23^4)) + p3q^3*(p1q*p2q^2*((18*s12^7*s13 - 90*s12^6*s13^2 -
                 54*s12^5*s13^3 + 54*s12^4*s13^4)*s23^2 + (18*s12^6*s13 -
                 54*s12^5*s13^2 - 54*s12^4*s13^3 + 18*s12^3*s13^4)*s23^3) +
             p1q^2*p2q*((36*s12^7*s13 - 36*s12^5*s13^3)*s23^2 +
               (-54*s12^6*s13 - 18*s12^5*s13^2 - 36*s12^4*s13^3)*s23^3 +
               (-90*s12^5*s13 - 72*s12^4*s13^2 - 36*s12^3*s13^3)*s23^4) +
             p1q^3*((-54*s12^6*s13 - 36*s12^5*s13^2)*s23^3 - 18*s12^4*s13^2*
                s23^4 + (54*s12^4*s13 + 18*s12^3*s13^2)*s23^5)) +
           p3q^2*(p1q*p2q^3*((-54*s12^6*s13^2 + 54*s12^5*s13^3 +
                 90*s12^4*s13^4 - 18*s12^3*s13^5)*s23^2 + (-36*s12^5*s13^2 +
                 36*s12^3*s13^4)*s23^3) + p1q^2*p2q^2*((18*s12^7*s13 -
                 54*s12^6*s13^2 - 54*s12^5*s13^3 + 18*s12^4*s13^4)*s23^2 +
               (-18*s12^6*s13 - 36*s12^5*s13^2 - 72*s12^4*s13^3 +
                 54*s12^3*s13^4)*s23^3 + (-36*s12^5*s13 - 72*s12^4*s13^2 -
                 90*s12^3*s13^3)*s23^4) + p1q^3*p2q*((-90*s12^6*s13 -
                 72*s12^5*s13^2 - 36*s12^4*s13^3)*s23^3 + (-18*s12^5*s13 -
                 54*s12^4*s13^2 - 54*s12^3*s13^3)*s23^4 + (72*s12^4*s13 +
                 72*s12^3*s13^2)*s23^5) + p1q^4*((54*s12^5*s13 +
                 18*s12^4*s13^2)*s23^4 + (36*s12^4*s13 + 18*s12^3*s13^2)*
                s23^5 - 18*s12^3*s13*s23^6)) +
           p3q*(p1q*p2q^4*((54*s12^5*s13^3 + 18*s12^4*s13^4 - 36*s12^3*s13^5)*
                s23^2 + (18*s12^4*s13^3 + 18*s12^3*s13^4)*s23^3) +
             p1q^2*p2q^3*((-36*s12^6*s13^2 + 36*s12^4*s13^4)*s23^2 +
               (-36*s12^5*s13^2 + 18*s12^4*s13^3 + 126*s12^3*s13^4)*s23^3 +
               (-36*s12^4*s13^2 - 54*s12^3*s13^3)*s23^4) +
             p1q^3*p2q^2*((-36*s12^6*s13 - 72*s12^5*s13^2 - 90*s12^4*s13^3)*
                s23^3 + (-18*s12^5*s13 - 90*s12^4*s13^2 - 162*s12^3*s13^3)*
                s23^4 + (18*s12^4*s13 + 54*s12^3*s13^2)*s23^5) +
             p1q^5*(-18*s12^4*s13*s23^5 - 18*s12^3*s13*s23^6) +
             p1q^4*p2q*((72*s12^5*s13 + 72*s12^4*s13^2)*s23^4 +
               (54*s12^4*s13 + 90*s12^3*s13^2)*s23^5 - 18*s12^3*s13*
                s23^6))) + ((p3q^5*(-162*s12^6*s13 - 162*s12^5*s13^2 +
              (18*s12^6 - 207*s12^5*s13 + 27*s12^4*s13^2 + 90*s12^3*s13^3)*
               s23 + (18*s12^5 - 63*s12^4*s13 + 90*s12^3*s13^2)*s23^2) +
            p2q^5*(-162*s12^4*s13^3 - 162*s12^3*s13^4 + (-342*s12^3*s13^3 -
                117*s12^2*s13^4 - 27*s12*s13^5 - 90*s13^6)*s23 +
              (-180*s12^2*s13^3 + 63*s12*s13^4 - 90*s13^5)*s23^2) +
            p1q*p2q^4*(-162*s12^4*s13^3 - 162*s12^3*s13^4 +
              (324*s12^4*s13^2 + 162*s12^3*s13^3)*s23 + (1005*s12^3*s13^2 +
                382*s12^2*s13^3 - 39*s12*s13^4 + 260*s13^5)*s23^2 +
              (681*s12^2*s13^2 - 299*s12*s13^3 + 260*s13^4)*s23^3) +
            p1q^2*p2q^3*((81*s12^5*s13 + 486*s12^4*s13^2 + 585*s12^3*s13^3 +
                117*s12^2*s13^4 + 27*s12*s13^5 + 90*s13^6)*s23 +
              (-99*s12^4*s13 + 528*s12^3*s13^2 + 373*s12^2*s13^3 -
                183*s12*s13^4 + 80*s13^5)*s23^2 + (-1002*s12^3*s13 -
                110*s12^2*s13^2 + 49*s12*s13^3 - 260*s13^4)*s23^3 +
              (-822*s12^2*s13 + 409*s12*s13^2 - 250*s13^3)*s23^4) +
            p1q^5*((63*s12^2*s13 - 27*s12*s13^2 - 90*s13^3)*s23^4 +
              (63*s12*s13 - 90*s13^2)*s23^5) + p1q^4*p2q*
             ((99*s12^4 + 297*s12^3*s13 + 9*s12^2*s13^2 + 81*s12*s13^3 +
                270*s13^4)*s23^3 + (438*s12^3 + 427*s12^2*s13 -
                309*s12*s13^2 + 260*s13^3)*s23^4 + (339*s12^2 - 110*s12*s13 -
                10*s13^2)*s23^5) + p1q^3*p2q^2*((-99*s12^5 - 459*s12^4*s13 -
                738*s12^3*s13^2 - 189*s12^2*s13^3 - 81*s12*s13^4 - 270*s13^5)*
               s23^2 + (-117*s12^4 - 1020*s12^3*s13 - 800*s12^2*s13^2 +
                429*s12*s13^3 - 250*s13^4)*s23^3 + (303*s12^3 - 494*s12^2*
                 s13 + 127*s12*s13^2 + 100*s13^3)*s23^4 + (321*s12^2 -
                173*s12*s13 + 80*s13^2)*s23^5) +
            p3q^4*(p2q*(-486*s12^6*s13 - 162*s12^5*s13^2 + 324*s12^4*s13^3 +
                (36*s12^6 - 792*s12^5*s13 + 351*s12^4*s13^2 + 99*s12^3*
                   s13^3 - 270*s12^2*s13^4)*s23 + (36*s12^5 - 342*s12^4*s13 +
                  369*s12^3*s13^2 - 270*s12^2*s13^3)*s23^2) +
              p1q*(-162*s12^6*s13 - 162*s12^5*s13^2 + (162*s12^5*s13 +
                  324*s12^4*s13^2)*s23 + (285*s12^5 + 562*s12^4*s13 -
                  147*s12^3*s13^2 - 100*s12^2*s13^3)*s23^2 +
                (285*s12^4 - 47*s12^3*s13 - 100*s12^2*s13^2)*s23^3)) +
            p3q^3*(p2q^2*(-486*s12^6*s13 + 486*s12^5*s13^2 + 810*s12^4*
                 s13^3 - 162*s12^3*s13^4 + (18*s12^6 - 963*s12^5*s13 +
                  1323*s12^4*s13^2 - 45*s12^3*s13^3 - 459*s12^2*s13^4 +
                  270*s12*s13^5)*s23 + (18*s12^5 - 495*s12^4*s13 +
                  846*s12^3*s13^2 - 729*s12^2*s13^3 + 270*s12*s13^4)*s23^2) +
              p1q*p2q*(-324*s12^6*s13 + 324*s12^4*s13^3 + (162*s12^6 +
                  972*s12^5*s13 + 1782*s12^4*s13^2 + 324*s12^3*s13^3)*s23 +
                (732*s12^5 + 1292*s12^4*s13 + 58*s12^3*s13^2 - 14*s12^2*
                   s13^3 - 160*s12*s13^4)*s23^2 + (570*s12^4 - 412*s12^3*
                   s13 + 146*s12^2*s13^2 - 160*s12*s13^3)*s23^3) +
              p1q^2*((63*s12^6 + 855*s12^5*s13 + 1026*s12^4*s13^2 +
                  234*s12^3*s13^3)*s23 + (690*s12^5 + 1453*s12^4*s13 +
                  258*s12^3*s13^2 - 10*s12^2*s13^3)*s23^2 +
                (3*s12^4 - 307*s12^3*s13 + 203*s12^2*s13^2 - 70*s12*s13^3)*
                 s23^3 + (-624*s12^3 + 283*s12^2*s13 - 70*s12*s13^2)*
                 s23^4)) + p3q^2*(p2q^3*(-162*s12^6*s13 + 810*s12^5*s13^2 +
                486*s12^4*s13^3 - 486*s12^3*s13^4 + (-378*s12^5*s13 +
                  1701*s12^4*s13^2 - 369*s12^3*s13^3 - 225*s12^2*s13^4 +
                  513*s12*s13^5 - 90*s13^6)*s23 + (-216*s12^4*s13 +
                  945*s12^3*s13^2 - 828*s12^2*s13^3 + 603*s12*s13^4 -
                  90*s13^5)*s23^2) + p1q*p2q^2*(-162*s12^6*s13 +
                486*s12^5*s13^2 + 486*s12^4*s13^3 - 162*s12^3*s13^4 +
                (162*s12^6 + 972*s12^5*s13 + 2430*s12^4*s13^2 + 648*s12^3*
                   s13^3)*s23 + (447*s12^5 + 574*s12^4*s13 + 1400*s12^3*
                   s13^2 + 654*s12^2*s13^3 - 359*s12*s13^4 + 260*s13^5)*
                 s23^2 + (285*s12^4 - 683*s12^3*s13 + 1273*s12^2*s13^2 -
                  619*s12*s13^3 + 260*s13^4)*s23^3) + p1q^2*p2q*(
                (324*s12^6 + 1755*s12^5*s13 + 1809*s12^4*s13^2 + 648*s12^3*
                   s13^3 + 270*s12^2*s13^4)*s23 + (933*s12^5 + 1234*s12^4*
                   s13 - 236*s12^3*s13^2 + 482*s12^2*s13^3 + 20*s12*s13^4)*
                 s23^2 + (-639*s12^4 - 2310*s12^3*s13 + 205*s12^2*s13^2 +
                  39*s12*s13^3 - 250*s13^4)*s23^3 + (-1248*s12^3 -
                  256*s12^2*s13 + 269*s12*s13^2 - 250*s13^3)*s23^4) +
              p1q^3*((18*s12^5 - 486*s12^4*s13 - 432*s12^3*s13^2 +
                  72*s12^2*s13^3)*s23^2 + (-948*s12^4 - 1268*s12^3*s13 +
                  294*s12^2*s13^2 + 20*s12*s13^3)*s23^3 + (-645*s12^3 +
                  350*s12^2*s13 - 73*s12*s13^2 + 80*s13^3)*s23^4 +
                (321*s12^2 - 173*s12*s13 + 80*s13^2)*s23^5)) +
            p3q*(p2q^4*(324*s12^5*s13^2 - 162*s12^4*s13^3 - 486*s12^3*s13^4 +
                (702*s12^4*s13^2 - 657*s12^3*s13^3 - 153*s12^2*s13^4 +
                  216*s12*s13^5 - 180*s13^6)*s23 + (378*s12^3*s13^2 -
                  549*s12^2*s13^3 + 396*s12*s13^4 - 180*s13^5)*s23^2) +
              p1q*p2q^3*(324*s12^5*s13^2 - 324*s12^3*s13^4 +
                (162*s12^5*s13 + 1296*s12^4*s13^2 + 486*s12^3*s13^3)*s23 +
                (-156*s12^4*s13 + 2200*s12^3*s13^2 + 950*s12^2*s13^3 -
                  238*s12*s13^4 + 520*s13^5)*s23^2 + (-318*s12^3*s13 +
                  1708*s12^2*s13^2 - 758*s12*s13^3 + 520*s13^4)*s23^3) +
              p1q^2*p2q^2*((243*s12^6 + 810*s12^5*s13 + 837*s12^4*s13^2 +
                  459*s12^3*s13^3 - 81*s12^2*s13^4 - 270*s12*s13^5)*s23 +
                (387*s12^5 - 147*s12^4*s13 - 83*s12^3*s13^2 + 604*s12^2*
                   s13^3 - 370*s12*s13^4 - 10*s13^5)*s23^2 +
                (-480*s12^4 - 2843*s12^3*s13 - 108*s12^2*s13^2 + 158*s12*
                   s13^3 - 510*s13^4)*s23^3 + (-624*s12^3 - 1361*s12^2*s13 +
                  748*s12*s13^2 - 500*s13^3)*s23^4) + p1q^4*(
                (-81*s12^4 - 126*s12^3*s13 + 45*s12^2*s13^2 + 90*s12*s13^3)*
                 s23^3 + (258*s12^3 + 184*s12^2*s13 - 30*s12*s13^2 -
                  10*s13^3)*s23^4 + (339*s12^2 - 110*s12*s13 - 10*s13^2)*
                 s23^5) + p1q^3*p2q*((-279*s12^5 - 918*s12^4*s13 -
                  801*s12^3*s13^2 + 18*s12^2*s13^3 + 180*s12*s13^4)*s23^2 +
                (-1101*s12^4 - 1901*s12^3*s13 - 362*s12^2*s13^2 +
                  440*s12*s13^3 + 20*s13^4)*s23^3 + (-180*s12^3 - 144*s12^2*
                   s13 + 54*s12*s13^2 + 180*s13^3)*s23^4 +
                (642*s12^2 - 346*s12*s13 + 160*s13^2)*s23^5)))*
           Log((s12 + s23)/(s12 + s13 + s23)))/(18*p1q*p3q^4*s12^5*s13*
            s23^2 + 18*p1q*p2q^4*s12^3*s13^3*s23^2 + 18*p1q^4*p2q*s12^3*s13*
            s23^4 + p1q^2*p2q^3*(18*s12^3*s13^3*s23^2 - 36*s12^3*s13^2*
              s23^3) + p1q^3*p2q^2*(-36*s12^3*s13^2*s23^3 +
             18*s12^3*s13*s23^4) + p3q^3*(p1q*p2q*(36*s12^5*s13 - 36*s12^4*
                s13^2)*s23^2 + p1q^2*(18*s12^5*s13*s23^2 - 36*s12^4*s13*
                s23^3)) + p3q^2*(p1q*p2q^2*(18*s12^5*s13 - 72*s12^4*s13^2 +
               18*s12^3*s13^3)*s23^2 + p1q^2*p2q*((18*s12^5*s13 -
                 36*s12^4*s13^2)*s23^2 + (-72*s12^4*s13 - 36*s12^3*s13^2)*
                s23^3) + p1q^3*(-36*s12^4*s13*s23^3 + 18*s12^3*s13*s23^4)) +
           p3q*(p1q*p2q^3*(-36*s12^4*s13^2 + 36*s12^3*s13^3)*s23^2 +
             18*p1q^4*s12^3*s13*s23^4 + p1q^2*p2q^2*((-36*s12^4*s13^2 +
                 18*s12^3*s13^3)*s23^2 + (-36*s12^4*s13 - 72*s12^3*s13^2)*
                s23^3) + p1q^3*p2q*((-36*s12^4*s13 - 36*s12^3*s13^2)*s23^3 +
               36*s12^3*s13*s23^4)))) + Log((p1q + p2q)/(p1q + p2q + p3q))*
        (((p3q^6*(-18*s12^5*s13 - 18*s12^4*s13^2 - 18*s12^4*s13*s23) +
            p2q^6*(18*s12^2*s13^4 + 18*s12*s13^5 + (36*s12^2*s13^3 +
                90*s12*s13^4 + 36*s13^5)*s23 + (72*s12*s13^3 + 72*s13^4)*s23^
                2 + 36*s13^3*s23^3) + p1q*p2q^5*(36*s12^2*s13^4 +
              36*s12*s13^5 + (18*s12^2*s13^3 + 90*s12*s13^4 + 36*s13^5)*s23 +
              (-74*s12^2*s13^2 - 96*s12*s13^3 - 4*s13^4)*s23^2 +
              (-150*s12*s13^2 - 116*s13^3)*s23^3 - 76*s13^2*s23^4) +
            p1q^2*p2q^4*(18*s12^2*s13^4 + 18*s12*s13^5 + (-18*s12^3*s13^2 -
                99*s12^2*s13^3 - 90*s12*s13^4 - 27*s13^5)*s23 +
              (-(s12^3*s13) - 132*s12^2*s13^2 - 301*s12*s13^3 - 134*s13^4)*
               s23^2 + (37*s12^2*s13 - 111*s12*s13^2 - 143*s13^3)*s23^3 +
              (82*s12*s13 + 8*s13^2)*s23^4 + 44*s13*s23^5) +
            p1q^4*p2q^2*((18*s12^3*s13 + 81*s12^2*s13^2 + 117*s12*s13^3 +
                54*s13^4)*s23^2 + (s12^3 + 42*s12^2*s13 + 121*s12*s13^2 +
                89*s13^3)*s23^3 + (-s12^2 - 6*s12*s13 + 8*s13^2)*s23^4 +
              (-10*s12 - 35*s13)*s23^5 - 8*s23^6) + p1q^5*p2q*
             ((-18*s12^2*s13 - 45*s12*s13^2 - 27*s13^3)*s23^3 +
              (-2*s12^2 - 51*s12*s13 - 58*s13^2)*s23^4 + (-6*s12 - 35*s13)*
               s23^5 - 4*s23^6) + p1q^3*p2q^3*((-18*s12^3*s13^2 -
                81*s12^2*s13^3 - 90*s12*s13^4 - 27*s13^5)*s23 +
              (17*s12^3*s13 + 23*s12^2*s13^2 - 16*s12*s13^3 - 4*s13^4)*s23^
                2 + (s12^3 + 97*s12^2*s13 + 205*s12*s13^2 + 125*s13^3)*s23^
                3 + (s12^2 + 127*s12*s13 + 150*s13^2)*s23^4 +
              (-4*s12 + 44*s13)*s23^5 - 4*s23^6) +
            p3q^5*(p2q*(-54*s12^5*s13 + 54*s12^3*s13^3 + (-54*s12^4*s13 +
                  54*s12^3*s13^2)*s23) + p1q*(-18*s12^5*s13 + 18*s12^3*
                 s13^3 + (36*s12^4*s13 + 72*s12^3*s13^2)*s23 +
                (2*s12^4 + 56*s12^3*s13)*s23^2 + 2*s12^3*s23^3)) +
            p3q^4*(p2q^2*(-54*s12^5*s13 + 108*s12^4*s13^2 + 108*s12^3*s13^3 -
                54*s12^2*s13^4 + (-18*s12^4*s13 + 234*s12^3*s13^2 -
                  18*s12^2*s13^3)*s23 + (72*s12^3*s13 + 72*s12^2*s13^2)*
                 s23^2 + 36*s12^2*s13*s23^3) + p1q^2*(18*s12^4*s13^2 +
                18*s12^3*s13^3 + (81*s12^4*s13 + 90*s12^3*s13^2 -
                  9*s12^2*s13^3)*s23 + (s12^4 + 34*s12^3*s13 - 57*s12^2*
                   s13^2)*s23^2 + (-5*s12^3 - 54*s12^2*s13)*s23^3 -
                6*s12^2*s23^4) + p1q*p2q*(-36*s12^5*s13 + 72*s12^4*s13^2 +
                72*s12^3*s13^3 - 36*s12^2*s13^4 + (162*s12^4*s13 +
                  306*s12^3*s13^2 - 36*s12^2*s13^3)*s23 +
                (6*s12^4 + 236*s12^3*s13 + 32*s12^2*s13^2)*s23^2 +
                (4*s12^3 + 30*s12^2*s13)*s23^3 - 2*s12^2*s23^4)) +
            p3q^3*(p2q^3*(-18*s12^5*s13 + 144*s12^4*s13^2 - 144*s12^2*s13^4 +
                18*s12*s13^5 + (54*s12^4*s13 + 234*s12^3*s13^2 - 234*s12^2*
                   s13^3 - 54*s12*s13^4)*s23 + (144*s12^3*s13 - 144*s12*
                   s13^3)*s23^2 + (72*s12^2*s13 - 72*s12*s13^2)*s23^3) +
              p1q*p2q^2*(-18*s12^5*s13 + 144*s12^4*s13^2 - 144*s12^2*s13^4 +
                18*s12*s13^5 + (216*s12^4*s13 + 288*s12^3*s13^2 - 360*s12^2*
                   s13^3 - 72*s12*s13^4)*s23 + (4*s12^4 + 226*s12^3*s13 -
                  260*s12^2*s13^2 - 230*s12*s13^3)*s23^2 +
                (-2*s12^3 - 86*s12^2*s13 - 208*s12*s13^2)*s23^3 +
                (-6*s12^2 - 68*s12*s13)*s23^4) + p1q^2*p2q*(36*s12^4*s13^2 -
                36*s12^2*s13^4 + (144*s12^4*s13 + 36*s12^3*s13^2 -
                  234*s12^2*s13^3 - 54*s12*s13^4)*s23 + (-s12^4 - 105*s12^3*
                   s13 - 515*s12^2*s13^2 - 177*s12*s13^3)*s23^2 +
                (-19*s12^3 - 334*s12^2*s13 - 191*s12*s13^2)*s23^3 +
                (-14*s12^2 - 64*s12*s13)*s23^4 + 4*s12*s23^5) +
              p1q^3*((-63*s12^3*s13^2 - 90*s12^2*s13^3 - 27*s12*s13^4)*s23 +
                (-2*s12^4 - 124*s12^3*s13 - 213*s12^2*s13^2 - 55*s12*s13^3)*
                 s23^2 + (-8*s12^3 - 124*s12^2*s13 - 24*s12*s13^2)*s23^3 +
                10*s12*s13*s23^4 + 6*s12*s23^5)) +
            p3q*(p2q^5*(-54*s12^3*s13^3 + 54*s12*s13^5 + (-72*s12^3*s13^2 -
                  126*s12^2*s13^3 + 126*s12*s13^4 + 72*s13^5)*s23 +
                (-144*s12^2*s13^2 + 144*s13^4)*s23^2 + (-72*s12*s13^2 +
                  72*s13^3)*s23^3) + p1q*p2q^4*(-90*s12^3*s13^3 +
                90*s12*s13^5 + (-108*s12^3*s13^2 - 252*s12^2*s13^3 +
                  108*s12*s13^4 + 72*s13^5)*s23 + (-70*s12^3*s13 -
                  460*s12^2*s13^2 - 414*s12*s13^3 - 6*s13^4)*s23^2 +
                (-134*s12^2*s13 - 496*s12*s13^2 - 228*s13^3)*s23^3 +
                (-64*s12*s13 - 150*s13^2)*s23^4) + p1q^2*p2q^3*(-36*s12^3*
                 s13^3 + 36*s12*s13^5 + (18*s12^4*s13 - 36*s12^3*s13^2 -
                  198*s12^2*s13^3 - 90*s12*s13^4 - 18*s13^5)*s23 +
                (s12^4 - 87*s12^3*s13 - 425*s12^2*s13^2 - 547*s12*s13^3 -
                  192*s13^4)*s23^2 + (5*s12^3 - 84*s12^2*s13 - 319*s12*
                   s13^2 - 246*s13^3)*s23^3 + (12*s12^2 + 110*s12*s13 +
                  12*s13^2)*s23^4 + (8*s12 + 84*s13)*s23^5) +
              p1q^4*p2q*((36*s12^3*s13 + 135*s12^2*s13^2 + 126*s12*s13^3 +
                  27*s13^4)*s23^2 + (5*s12^3 + 172*s12^2*s13 + 266*s12*
                   s13^2 + 63*s13^3)*s23^3 + (12*s12^2 + 137*s12*s13 +
                  35*s13^2)*s23^4 + (-3*s12 - 11*s13)*s23^5 - 10*s23^6) +
              p1q^3*p2q^2*((-18*s12^4*s13 - 81*s12^3*s13^2 - 126*s12^2*
                   s13^3 - 81*s12*s13^4 - 18*s13^5)*s23 +
                (-s12^4 - 84*s12^3*s13 - 119*s12^2*s13^2 - 59*s12*s13^3 -
                  23*s13^4)*s23^2 + (4*s12^3 + 126*s12^2*s13 + 302*s12*
                   s13^2 + 102*s13^3)*s23^3 + (21*s12^2 + 290*s12*s13 +
                  195*s13^2)*s23^4 + (10*s12 + 82*s13)*s23^5 - 6*s23^6) +
              p1q^5*((-9*s12*s13^2 - 9*s13^3)*s23^3 + (-2*s12^2 -
                  15*s12*s13 - 22*s13^2)*s23^4 + (-6*s12 - 17*s13)*s23^5 -
                4*s23^6)) + p3q^2*(p2q^4*(54*s12^4*s13^2 - 108*s12^3*s13^3 -
                108*s12^2*s13^4 + 54*s12*s13^5 + (36*s12^4*s13 - 18*s12^3*
                   s13^2 - 378*s12^2*s13^3 - 18*s12*s13^4 + 36*s13^5)*s23 +
                (72*s12^3*s13 - 216*s12^2*s13^2 - 216*s12*s13^3 + 72*s13^4)*
                 s23^2 + (36*s12^2*s13 - 144*s12*s13^2 + 36*s13^3)*s23^3) +
              p1q*p2q^3*(72*s12^4*s13^2 - 144*s12^3*s13^3 - 144*s12^2*s13^4 +
                72*s12*s13^5 + (90*s12^4*s13 - 54*s12^3*s13^2 - 594*s12^2*
                   s13^3 - 54*s12*s13^4 + 36*s13^5)*s23 + (-24*s12^3*s13 -
                  678*s12^2*s13^2 - 548*s12*s13^3 - 2*s13^4)*s23^2 +
                (-4*s12^3 - 250*s12^2*s13 - 554*s12*s13^2 - 112*s13^3)*
                 s23^3 + (-4*s12^2 - 132*s12*s13 - 74*s13^2)*s23^4) +
              p1q^2*p2q^2*(18*s12^4*s13^2 - 54*s12^3*s13^3 - 54*s12^2*s13^4 +
                18*s12*s13^5 + (63*s12^4*s13 - 144*s12^3*s13^2 - 432*s12^2*
                   s13^3 - 126*s12*s13^4 - 9*s13^5)*s23 +
                (-s12^4 - 261*s12^3*s13 - 859*s12^2*s13^2 - 531*s12*s13^3 -
                  94*s13^4)*s23^2 + (-9*s12^3 - 419*s12^2*s13 - 435*s12*
                   s13^2 - 121*s13^3)*s23^3 + (4*s12^2 - 36*s12*s13 +
                  4*s13^2)*s23^4 + (12*s12 + 40*s13)*s23^5) +
              p1q^4*((54*s12^2*s13^2 + 63*s12*s13^3 + 9*s13^4)*s23^2 +
                (4*s12^3 + 76*s12^2*s13 + 145*s12*s13^2 + 28*s13^3)*s23^3 +
                (13*s12^2 + 89*s12*s13 + 27*s13^2)*s23^4 + (7*s12 + 6*s13)*
                 s23^5 - 2*s23^6) + p1q^3*p2q*((-18*s12^4*s13 - 144*s12^3*
                   s13^2 - 189*s12^2*s13^3 - 72*s12*s13^4 - 9*s13^5)*s23 +
                (-3*s12^4 - 225*s12^3*s13 - 355*s12^2*s13^2 - 98*s12*s13^3 -
                  19*s13^4)*s23^2 + (-5*s12^3 - 95*s12^2*s13 + 127*s12*
                   s13^2 + 31*s13^3)*s23^3 + (20*s12^2 + 173*s12*s13 +
                  81*s13^2)*s23^4 + (20*s12 + 38*s13)*s23^5 - 2*s23^6)))*
           Log(p3q/(p1q + p2q + p3q)))/(2*p1q*p3q^5*s12^4*s13*s23^2 +
           p1q*p2q^5*(-2*s12*s13^4*s23^2 - 2*s12*s13^3*s23^3) +
           p1q^2*p2q^4*(-4*s12*s13^4*s23^2 + 4*s12*s13^2*s23^4) +
           p1q^4*p2q^2*(4*s12*s13^3*s23^3 - 4*s12*s13*s23^5) +
           p1q^5*p2q*(-2*s12*s13^2*s23^4 - 2*s12*s13*s23^5) +
           p1q^3*p2q^3*(-2*s12*s13^4*s23^2 + 6*s12*s13^3*s23^3 +
             6*s12*s13^2*s23^4 - 2*s12*s13*s23^5) +
           p3q^4*(p1q^2*((2*s12^4*s13 - 2*s12^3*s13^2)*s23^2 - 6*s12^3*s13*
                s23^3) + p1q*p2q*((4*s12^4*s13 - 6*s12^3*s13^2)*s23^2 - 2*
                s12^3*s13*s23^3)) + p3q^3*(p1q*p2q^2*((2*s12^4*s13 -
                 12*s12^3*s13^2 + 6*s12^2*s13^3)*s23^2 + (-4*s12^3*s13 +
                 4*s12^2*s13^2)*s23^3) + p1q^2*p2q*((2*s12^4*s13 -
                 10*s12^3*s13^2 + 4*s12^2*s13^3)*s23^2 + (-14*s12^3*s13 +
                 4*s12^2*s13^2)*s23^3 + 4*s12^2*s13*s23^4) +
             p1q^3*(-2*s12^3*s13^2*s23^2 + (-6*s12^3*s13 + 4*s12^2*s13^2)*
                s23^3 + 6*s12^2*s13*s23^4)) +
           p3q*(p1q*p2q^4*((6*s12^2*s13^3 - 4*s12*s13^4)*s23^2 +
               (4*s12^2*s13^2 - 4*s12*s13^3)*s23^3) + p1q^2*p2q^3*
              ((10*s12^2*s13^3 - 6*s12*s13^4)*s23^2 + (8*s12^2*s13^2 +
                 2*s12*s13^3)*s23^3 + (4*s12^2*s13 + 8*s12*s13^2)*s23^4) +
             p1q^4*p2q*((4*s12^2*s13^2 + 4*s12*s13^3)*s23^3 + (6*s12^2*s13 -
                 2*s12*s13^2)*s23^4 - 6*s12*s13*s23^5) + p1q^3*p2q^2*
              ((4*s12^2*s13^3 - 2*s12*s13^4)*s23^2 + (8*s12^2*s13^2 +
                 10*s12*s13^3)*s23^3 + (10*s12^2*s13 + 8*s12*s13^2)*s23^4 - 4*
                s12*s13*s23^5) + p1q^5*(-2*s12*s13^2*s23^4 - 2*s12*s13*
                s23^5)) + p3q^2*(p1q*p2q^3*((-6*s12^3*s13^2 + 12*s12^2*
                  s13^3 - 2*s12*s13^4)*s23^2 + (-2*s12^3*s13 + 8*s12^2*
                  s13^2 - 2*s12*s13^3)*s23^3) + p1q^2*p2q^2*
              ((-8*s12^3*s13^2 + 14*s12^2*s13^3 - 2*s12*s13^4)*s23^2 +
               (-8*s12^3*s13 + 12*s12^2*s13^2 + 2*s12*s13^3)*s23^3 +
               (8*s12^2*s13 + 4*s12*s13^2)*s23^4) + p1q^4*(4*s12^2*s13^2*
                s23^3 + (6*s12^2*s13 - 2*s12*s13^2)*s23^4 - 2*s12*s13*
                s23^5) + p1q^3*p2q*((-2*s12^3*s13^2 + 4*s12^2*s13^3)*s23^2 +
               (-6*s12^3*s13 + 12*s12^2*s13^2 + 4*s12*s13^3)*s23^3 +
               (16*s12^2*s13 + 2*s12*s13^2)*s23^4 - 2*s12*s13*s23^5))) +
         ((p3q^6*(-18*s12^5*s13 - 18*s12^4*s13^2 - 18*s12^4*s13*s23) +
            p2q^6*(18*s12^2*s13^4 + 18*s12*s13^5 + (36*s12^2*s13^3 +
                90*s12*s13^4 + 36*s13^5)*s23 + (72*s12*s13^3 + 72*s13^4)*s23^
                2 + 36*s13^3*s23^3) + p1q*p2q^5*(36*s12^2*s13^4 +
              36*s12*s13^5 + (18*s12^2*s13^3 + 90*s12*s13^4 + 36*s13^5)*s23 +
              (-74*s12^2*s13^2 - 96*s12*s13^3 - 4*s13^4)*s23^2 +
              (-150*s12*s13^2 - 116*s13^3)*s23^3 - 76*s13^2*s23^4) +
            p1q^2*p2q^4*(18*s12^2*s13^4 + 18*s12*s13^5 + (-18*s12^3*s13^2 -
                99*s12^2*s13^3 - 90*s12*s13^4 - 27*s13^5)*s23 +
              (-(s12^3*s13) - 132*s12^2*s13^2 - 301*s12*s13^3 - 134*s13^4)*
               s23^2 + (37*s12^2*s13 - 111*s12*s13^2 - 143*s13^3)*s23^3 +
              (82*s12*s13 + 8*s13^2)*s23^4 + 44*s13*s23^5) +
            p1q^4*p2q^2*((18*s12^3*s13 + 81*s12^2*s13^2 + 117*s12*s13^3 +
                54*s13^4)*s23^2 + (s12^3 + 42*s12^2*s13 + 121*s12*s13^2 +
                89*s13^3)*s23^3 + (-s12^2 - 6*s12*s13 + 8*s13^2)*s23^4 +
              (-10*s12 - 35*s13)*s23^5 - 8*s23^6) + p1q^5*p2q*
             ((-18*s12^2*s13 - 45*s12*s13^2 - 27*s13^3)*s23^3 +
              (-2*s12^2 - 51*s12*s13 - 58*s13^2)*s23^4 + (-6*s12 - 35*s13)*
               s23^5 - 4*s23^6) + p1q^3*p2q^3*((-18*s12^3*s13^2 -
                81*s12^2*s13^3 - 90*s12*s13^4 - 27*s13^5)*s23 +
              (17*s12^3*s13 + 23*s12^2*s13^2 - 16*s12*s13^3 - 4*s13^4)*s23^
                2 + (s12^3 + 97*s12^2*s13 + 205*s12*s13^2 + 125*s13^3)*s23^
                3 + (s12^2 + 127*s12*s13 + 150*s13^2)*s23^4 +
              (-4*s12 + 44*s13)*s23^5 - 4*s23^6) +
            p3q^5*(p2q*(-54*s12^5*s13 + 54*s12^3*s13^3 + (-54*s12^4*s13 +
                  54*s12^3*s13^2)*s23) + p1q*(-18*s12^5*s13 + 18*s12^3*
                 s13^3 + (36*s12^4*s13 + 72*s12^3*s13^2)*s23 +
                (2*s12^4 + 56*s12^3*s13)*s23^2 + 2*s12^3*s23^3)) +
            p3q^4*(p2q^2*(-54*s12^5*s13 + 108*s12^4*s13^2 + 108*s12^3*s13^3 -
                54*s12^2*s13^4 + (-18*s12^4*s13 + 234*s12^3*s13^2 -
                  18*s12^2*s13^3)*s23 + (72*s12^3*s13 + 72*s12^2*s13^2)*
                 s23^2 + 36*s12^2*s13*s23^3) + p1q^2*(18*s12^4*s13^2 +
                18*s12^3*s13^3 + (81*s12^4*s13 + 90*s12^3*s13^2 -
                  9*s12^2*s13^3)*s23 + (s12^4 + 34*s12^3*s13 - 57*s12^2*
                   s13^2)*s23^2 + (-5*s12^3 - 54*s12^2*s13)*s23^3 -
                6*s12^2*s23^4) + p1q*p2q*(-36*s12^5*s13 + 72*s12^4*s13^2 +
                72*s12^3*s13^3 - 36*s12^2*s13^4 + (162*s12^4*s13 +
                  306*s12^3*s13^2 - 36*s12^2*s13^3)*s23 +
                (6*s12^4 + 236*s12^3*s13 + 32*s12^2*s13^2)*s23^2 +
                (4*s12^3 + 30*s12^2*s13)*s23^3 - 2*s12^2*s23^4)) +
            p3q^3*(p2q^3*(-18*s12^5*s13 + 144*s12^4*s13^2 - 144*s12^2*s13^4 +
                18*s12*s13^5 + (54*s12^4*s13 + 234*s12^3*s13^2 - 234*s12^2*
                   s13^3 - 54*s12*s13^4)*s23 + (144*s12^3*s13 - 144*s12*
                   s13^3)*s23^2 + (72*s12^2*s13 - 72*s12*s13^2)*s23^3) +
              p1q*p2q^2*(-18*s12^5*s13 + 144*s12^4*s13^2 - 144*s12^2*s13^4 +
                18*s12*s13^5 + (216*s12^4*s13 + 288*s12^3*s13^2 - 360*s12^2*
                   s13^3 - 72*s12*s13^4)*s23 + (4*s12^4 + 226*s12^3*s13 -
                  260*s12^2*s13^2 - 230*s12*s13^3)*s23^2 +
                (-2*s12^3 - 86*s12^2*s13 - 208*s12*s13^2)*s23^3 +
                (-6*s12^2 - 68*s12*s13)*s23^4) + p1q^2*p2q*(36*s12^4*s13^2 -
                36*s12^2*s13^4 + (144*s12^4*s13 + 36*s12^3*s13^2 -
                  234*s12^2*s13^3 - 54*s12*s13^4)*s23 + (-s12^4 - 105*s12^3*
                   s13 - 515*s12^2*s13^2 - 177*s12*s13^3)*s23^2 +
                (-19*s12^3 - 334*s12^2*s13 - 191*s12*s13^2)*s23^3 +
                (-14*s12^2 - 64*s12*s13)*s23^4 + 4*s12*s23^5) +
              p1q^3*((-63*s12^3*s13^2 - 90*s12^2*s13^3 - 27*s12*s13^4)*s23 +
                (-2*s12^4 - 124*s12^3*s13 - 213*s12^2*s13^2 - 55*s12*s13^3)*
                 s23^2 + (-8*s12^3 - 124*s12^2*s13 - 24*s12*s13^2)*s23^3 +
                10*s12*s13*s23^4 + 6*s12*s23^5)) +
            p3q*(p2q^5*(-54*s12^3*s13^3 + 54*s12*s13^5 + (-72*s12^3*s13^2 -
                  126*s12^2*s13^3 + 126*s12*s13^4 + 72*s13^5)*s23 +
                (-144*s12^2*s13^2 + 144*s13^4)*s23^2 + (-72*s12*s13^2 +
                  72*s13^3)*s23^3) + p1q*p2q^4*(-90*s12^3*s13^3 +
                90*s12*s13^5 + (-108*s12^3*s13^2 - 252*s12^2*s13^3 +
                  108*s12*s13^4 + 72*s13^5)*s23 + (-70*s12^3*s13 -
                  460*s12^2*s13^2 - 414*s12*s13^3 - 6*s13^4)*s23^2 +
                (-134*s12^2*s13 - 496*s12*s13^2 - 228*s13^3)*s23^3 +
                (-64*s12*s13 - 150*s13^2)*s23^4) + p1q^2*p2q^3*(-36*s12^3*
                 s13^3 + 36*s12*s13^5 + (18*s12^4*s13 - 36*s12^3*s13^2 -
                  198*s12^2*s13^3 - 90*s12*s13^4 - 18*s13^5)*s23 +
                (s12^4 - 87*s12^3*s13 - 425*s12^2*s13^2 - 547*s12*s13^3 -
                  192*s13^4)*s23^2 + (5*s12^3 - 84*s12^2*s13 - 319*s12*
                   s13^2 - 246*s13^3)*s23^3 + (12*s12^2 + 110*s12*s13 +
                  12*s13^2)*s23^4 + (8*s12 + 84*s13)*s23^5) +
              p1q^4*p2q*((36*s12^3*s13 + 135*s12^2*s13^2 + 126*s12*s13^3 +
                  27*s13^4)*s23^2 + (5*s12^3 + 172*s12^2*s13 + 266*s12*
                   s13^2 + 63*s13^3)*s23^3 + (12*s12^2 + 137*s12*s13 +
                  35*s13^2)*s23^4 + (-3*s12 - 11*s13)*s23^5 - 10*s23^6) +
              p1q^3*p2q^2*((-18*s12^4*s13 - 81*s12^3*s13^2 - 126*s12^2*
                   s13^3 - 81*s12*s13^4 - 18*s13^5)*s23 +
                (-s12^4 - 84*s12^3*s13 - 119*s12^2*s13^2 - 59*s12*s13^3 -
                  23*s13^4)*s23^2 + (4*s12^3 + 126*s12^2*s13 + 302*s12*
                   s13^2 + 102*s13^3)*s23^3 + (21*s12^2 + 290*s12*s13 +
                  195*s13^2)*s23^4 + (10*s12 + 82*s13)*s23^5 - 6*s23^6) +
              p1q^5*((-9*s12*s13^2 - 9*s13^3)*s23^3 + (-2*s12^2 -
                  15*s12*s13 - 22*s13^2)*s23^4 + (-6*s12 - 17*s13)*s23^5 -
                4*s23^6)) + p3q^2*(p2q^4*(54*s12^4*s13^2 - 108*s12^3*s13^3 -
                108*s12^2*s13^4 + 54*s12*s13^5 + (36*s12^4*s13 - 18*s12^3*
                   s13^2 - 378*s12^2*s13^3 - 18*s12*s13^4 + 36*s13^5)*s23 +
                (72*s12^3*s13 - 216*s12^2*s13^2 - 216*s12*s13^3 + 72*s13^4)*
                 s23^2 + (36*s12^2*s13 - 144*s12*s13^2 + 36*s13^3)*s23^3) +
              p1q*p2q^3*(72*s12^4*s13^2 - 144*s12^3*s13^3 - 144*s12^2*s13^4 +
                72*s12*s13^5 + (90*s12^4*s13 - 54*s12^3*s13^2 - 594*s12^2*
                   s13^3 - 54*s12*s13^4 + 36*s13^5)*s23 + (-24*s12^3*s13 -
                  678*s12^2*s13^2 - 548*s12*s13^3 - 2*s13^4)*s23^2 +
                (-4*s12^3 - 250*s12^2*s13 - 554*s12*s13^2 - 112*s13^3)*
                 s23^3 + (-4*s12^2 - 132*s12*s13 - 74*s13^2)*s23^4) +
              p1q^2*p2q^2*(18*s12^4*s13^2 - 54*s12^3*s13^3 - 54*s12^2*s13^4 +
                18*s12*s13^5 + (63*s12^4*s13 - 144*s12^3*s13^2 - 432*s12^2*
                   s13^3 - 126*s12*s13^4 - 9*s13^5)*s23 +
                (-s12^4 - 261*s12^3*s13 - 859*s12^2*s13^2 - 531*s12*s13^3 -
                  94*s13^4)*s23^2 + (-9*s12^3 - 419*s12^2*s13 - 435*s12*
                   s13^2 - 121*s13^3)*s23^3 + (4*s12^2 - 36*s12*s13 +
                  4*s13^2)*s23^4 + (12*s12 + 40*s13)*s23^5) +
              p1q^4*((54*s12^2*s13^2 + 63*s12*s13^3 + 9*s13^4)*s23^2 +
                (4*s12^3 + 76*s12^2*s13 + 145*s12*s13^2 + 28*s13^3)*s23^3 +
                (13*s12^2 + 89*s12*s13 + 27*s13^2)*s23^4 + (7*s12 + 6*s13)*
                 s23^5 - 2*s23^6) + p1q^3*p2q*((-18*s12^4*s13 - 144*s12^3*
                   s13^2 - 189*s12^2*s13^3 - 72*s12*s13^4 - 9*s13^5)*s23 +
                (-3*s12^4 - 225*s12^3*s13 - 355*s12^2*s13^2 - 98*s12*s13^3 -
                  19*s13^4)*s23^2 + (-5*s12^3 - 95*s12^2*s13 + 127*s12*
                   s13^2 + 31*s13^3)*s23^3 + (20*s12^2 + 173*s12*s13 +
                  81*s13^2)*s23^4 + (20*s12 + 38*s13)*s23^5 - 2*s23^6)))*
           Log(s12/(s12 + s13 + s23)))/(2*p1q*p3q^5*s12^4*s13*s23^2 +
           p1q*p2q^5*(-2*s12*s13^4*s23^2 - 2*s12*s13^3*s23^3) +
           p1q^2*p2q^4*(-4*s12*s13^4*s23^2 + 4*s12*s13^2*s23^4) +
           p1q^4*p2q^2*(4*s12*s13^3*s23^3 - 4*s12*s13*s23^5) +
           p1q^5*p2q*(-2*s12*s13^2*s23^4 - 2*s12*s13*s23^5) +
           p1q^3*p2q^3*(-2*s12*s13^4*s23^2 + 6*s12*s13^3*s23^3 +
             6*s12*s13^2*s23^4 - 2*s12*s13*s23^5) +
           p3q^4*(p1q^2*((2*s12^4*s13 - 2*s12^3*s13^2)*s23^2 - 6*s12^3*s13*
                s23^3) + p1q*p2q*((4*s12^4*s13 - 6*s12^3*s13^2)*s23^2 - 2*
                s12^3*s13*s23^3)) + p3q^3*(p1q*p2q^2*((2*s12^4*s13 -
                 12*s12^3*s13^2 + 6*s12^2*s13^3)*s23^2 + (-4*s12^3*s13 +
                 4*s12^2*s13^2)*s23^3) + p1q^2*p2q*((2*s12^4*s13 -
                 10*s12^3*s13^2 + 4*s12^2*s13^3)*s23^2 + (-14*s12^3*s13 +
                 4*s12^2*s13^2)*s23^3 + 4*s12^2*s13*s23^4) +
             p1q^3*(-2*s12^3*s13^2*s23^2 + (-6*s12^3*s13 + 4*s12^2*s13^2)*
                s23^3 + 6*s12^2*s13*s23^4)) +
           p3q*(p1q*p2q^4*((6*s12^2*s13^3 - 4*s12*s13^4)*s23^2 +
               (4*s12^2*s13^2 - 4*s12*s13^3)*s23^3) + p1q^2*p2q^3*
              ((10*s12^2*s13^3 - 6*s12*s13^4)*s23^2 + (8*s12^2*s13^2 +
                 2*s12*s13^3)*s23^3 + (4*s12^2*s13 + 8*s12*s13^2)*s23^4) +
             p1q^4*p2q*((4*s12^2*s13^2 + 4*s12*s13^3)*s23^3 + (6*s12^2*s13 -
                 2*s12*s13^2)*s23^4 - 6*s12*s13*s23^5) + p1q^3*p2q^2*
              ((4*s12^2*s13^3 - 2*s12*s13^4)*s23^2 + (8*s12^2*s13^2 +
                 10*s12*s13^3)*s23^3 + (10*s12^2*s13 + 8*s12*s13^2)*s23^4 - 4*
                s12*s13*s23^5) + p1q^5*(-2*s12*s13^2*s23^4 - 2*s12*s13*
                s23^5)) + p3q^2*(p1q*p2q^3*((-6*s12^3*s13^2 + 12*s12^2*
                  s13^3 - 2*s12*s13^4)*s23^2 + (-2*s12^3*s13 + 8*s12^2*
                  s13^2 - 2*s12*s13^3)*s23^3) + p1q^2*p2q^2*
              ((-8*s12^3*s13^2 + 14*s12^2*s13^3 - 2*s12*s13^4)*s23^2 +
               (-8*s12^3*s13 + 12*s12^2*s13^2 + 2*s12*s13^3)*s23^3 +
               (8*s12^2*s13 + 4*s12*s13^2)*s23^4) + p1q^4*(4*s12^2*s13^2*
                s23^3 + (6*s12^2*s13 - 2*s12*s13^2)*s23^4 - 2*s12*s13*
                s23^5) + p1q^3*p2q*((-2*s12^3*s13^2 + 4*s12^2*s13^3)*s23^2 +
               (-6*s12^3*s13 + 12*s12^2*s13^2 + 4*s12*s13^3)*s23^3 +
               (16*s12^2*s13 + 2*s12*s13^2)*s23^4 - 2*s12*s13*s23^5))) +
         ((p2q^4*(2*s12^2*s13^2 + 4*s12*s13^3 + 2*s13^4 + (4*s12*s13^2 +
                4*s13^3)*s23 + 2*s13^2*s23^2) + p1q*p2q^3*(s12^3*s13 +
              8*s12^2*s13^2 + 13*s12*s13^3 + 6*s13^4 + (s12^2*s13 +
                9*s12*s13^2 + 8*s13^3)*s23 + (-4*s12*s13 - 2*s13^2)*s23^2 -
              4*s13*s23^3) + p1q^4*((-2*s12^2*s13 - 4*s12*s13^2 - 2*s13^3)*
               s23 + (-4*s12*s13 - 4*s13^2)*s23^2 - 2*s13*s23^3) +
            p1q^2*p2q^2*(3*s12^3*s13 + 12*s12^2*s13^2 + 15*s12*s13^3 +
              6*s13^4 + (s12^3 + 5*s12^2*s13 + 8*s12*s13^2 + 4*s13^3)*s23 +
              (3*s12^2 - 3*s12*s13 - 8*s13^2)*s23^2 + (4*s12 - 4*s13)*s23^3 +
              2*s23^4) + p1q^3*p2q*(2*s12^3*s13 + 6*s12^2*s13^2 +
              6*s12*s13^3 + 2*s13^4 + (s12^3 + 2*s12^2*s13 - s12*s13^2 -
                2*s13^3)*s23 + (3*s12^2 - 3*s12*s13 - 8*s13^2)*s23^2 +
              (4*s12 - 2*s13)*s23^3 + 2*s23^4) +
            p3q^3*(p2q*(-2*s12^4 - 4*s12^3*s13 - 2*s12^2*s13^2 +
                (-2*s12^3 - 2*s12^2*s13)*s23) + p1q*(-s12^4 - 2*s12^3*s13 -
                s12^2*s13^2 + (-s12^3 - s12^2*s13)*s23)) +
            p3q^2*(p1q^2*(s12^3*s13 + 2*s12^2*s13^2 + s12*s13^3 +
                (2*s12^3 + 3*s12^2*s13 + s12*s13^2)*s23 + 2*s12^2*s23^2) +
              p2q^2*(2*s12^3*s13 + 4*s12^2*s13^2 + 2*s12*s13^3 +
                (2*s12^3 + 4*s12^2*s13 + 2*s12*s13^2)*s23 + 2*s12^2*s23^2) +
              p1q*p2q*(s12^3*s13 + 2*s12^2*s13^2 + s12*s13^3 +
                (6*s12^3 + 9*s12^2*s13 + 3*s12*s13^2)*s23 +
                (6*s12^2 + 2*s12*s13)*s23^2)) +
            p3q*(p2q^3*(-2*s12^3*s13 - 4*s12^2*s13^2 - 2*s12*s13^3 +
                (-6*s12^2*s13 - 6*s12*s13^2)*s23 - 4*s12*s13*s23^2) +
              p1q^2*p2q*(-s12^4 + 8*s12^2*s13^2 + 12*s12*s13^3 + 5*s13^4 +
                (-3*s12^3 - 2*s12^2*s13 + 11*s12*s13^2 + 10*s13^3)*s23 +
                (-8*s12^2 - 7*s12*s13 + 5*s13^2)*s23^2 - 6*s12*s23^3) +
              p1q*p2q^2*(-s12^4 - 4*s12^3*s13 - s12^2*s13^2 + 6*s12*s13^3 +
                4*s13^4 + (-3*s12^3 - 9*s12^2*s13 + 2*s12*s13^2 + 8*s13^3)*
                 s23 + (-6*s12^2 - 8*s12*s13 + 4*s13^2)*s23^2 -
                4*s12*s23^3) + p1q^3*(2*s12^3*s13 + 6*s12^2*s13^2 +
                6*s12*s13^3 + 2*s13^4 + (3*s12^2*s13 + 8*s12*s13^2 + 5*s13^3)*
                 s23 + (-s12^2 + s12*s13 + 4*s13^2)*s23^2 + (-s12 + s13)*
                 s23^3)))*Log(s13/(s12 + s13 + s23)))/(2*p3q^4*s12^4*s13 +
           p2q^4*(-2*s12*s13^4 - 2*s12*s13^3*s23) + p1q*p2q^3*
            (-4*s12*s13^4 + 4*s12*s13^2*s23^2) + p1q^3*p2q*(4*s12*s13^3*s23 -
             4*s12*s13*s23^3) + p1q^4*(-2*s12*s13^2*s23^2 -
             2*s12*s13*s23^3) + p1q^2*p2q^2*(-2*s12*s13^4 + 6*s12*s13^3*s23 +
             6*s12*s13^2*s23^2 - 2*s12*s13*s23^3) +
           p3q^3*(p1q*(2*s12^4*s13 - 2*s12^3*s13^2 - 6*s12^3*s13*s23) +
             p2q*(2*s12^4*s13 - 6*s12^3*s13^2 - 2*s12^3*s13*s23)) +
           p3q^2*(p2q^2*(-6*s12^3*s13^2 + 6*s12^2*s13^3 + (-2*s12^3*s13 +
                 4*s12^2*s13^2)*s23) + p1q*p2q*(-8*s12^3*s13^2 + 4*s12^2*
                s13^3 + (-8*s12^3*s13 + 4*s12^2*s13^2)*s23 + 4*s12^2*s13*
                s23^2) + p1q^2*(-2*s12^3*s13^2 + (-6*s12^3*s13 +
                 4*s12^2*s13^2)*s23 + 6*s12^2*s13*s23^2)) +
           p3q*(p2q^3*(6*s12^2*s13^3 - 2*s12*s13^4 + (4*s12^2*s13^2 -
                 2*s12*s13^3)*s23) + p1q*p2q^2*(10*s12^2*s13^3 - 2*s12*
                s13^4 + (8*s12^2*s13^2 + 2*s12*s13^3)*s23 + (4*s12^2*s13 +
                 4*s12*s13^2)*s23^2) + p1q^3*(4*s12^2*s13^2*s23 +
               (6*s12^2*s13 - 2*s12*s13^2)*s23^2 - 2*s12*s13*s23^3) +
             p1q^2*p2q*(4*s12^2*s13^3 + (8*s12^2*s13^2 + 4*s12*s13^3)*s23 +
               (10*s12^2*s13 + 2*s12*s13^2)*s23^2 - 2*s12*s13*s23^3))) +
         ((p2q^6*(-18*s12^2*s13^2 - 36*s12*s13^3 - 18*s13^4 +
              (-36*s12*s13^2 - 36*s13^3)*s23 - 18*s13^2*s23^2) +
            p1q*p2q^5*(-18*s12^2*s13^2 - 36*s12*s13^3 - 18*s13^4 +
              (36*s12^2*s13 + 36*s12*s13^2)*s23 + (72*s12*s13 + 54*s13^2)*s23^
                2 + 36*s13*s23^3) + p1q^2*p2q^4*(-18*s12^3*s13 -
              36*s12^2*s13^2 - 18*s12*s13^3 + (-36*s12^3 - 81*s12^2*s13 -
                45*s12*s13^2)*s23 + (-90*s12^2 - 99*s12*s13 - 18*s13^2)*s23^
                2 + (-72*s12 - 36*s13)*s23^3 - 18*s23^4) +
            p1q^3*p2q^3*(-18*s12^3*s13 - 36*s12^2*s13^2 - 18*s12*s13^3 +
              (-54*s12^3 - 153*s12^2*s13 - 153*s12*s13^2 - 54*s13^3)*s23 +
              (-99*s12^2 - 162*s12*s13 - 90*s13^2)*s23^2 + (-27*s12 - 18*s13)*
               s23^3 + 18*s23^4) + p1q^5*p2q*((18*s12^2 + 36*s12*s13 +
                18*s13^2)*s23^2 + (36*s12 + 36*s13)*s23^3 + 18*s23^4) +
            p1q^4*p2q^2*((-18*s12^3 - 36*s12^2*s13 - 36*s12*s13^2 - 18*s13^3)*
               s23 + (9*s12^2 + 45*s12*s13 + 18*s13^2)*s23^2 +
              (81*s12 + 90*s13)*s23^3 + 54*s23^4) +
            p3q^4*(p1q*p2q*(-36*s12^4 - 72*s12^3*s13 - 36*s12^2*s13^2 +
                (-54*s12^3 - 54*s12^2*s13)*s23 - 18*s12^2*s23^2) +
              p2q^2*(-18*s12^4 - 36*s12^3*s13 - 18*s12^2*s13^2 +
                (-36*s12^3 - 36*s12^2*s13)*s23 - 18*s12^2*s23^2) +
              p1q^2*(-18*s12^4 - 36*s12^3*s13 - 18*s12^2*s13^2 +
                (-27*s12^3 - 27*s12^2*s13)*s23 - 9*s12^2*s23^2)) +
            p3q^3*(p2q^3*(-36*s12^4 - 36*s12^3*s13 + 36*s12^2*s13^2 +
                36*s12*s13^3 + (-72*s12^3 + 72*s12*s13^2)*s23 +
                (-36*s12^2 + 36*s12*s13)*s23^2) + p1q^3*(18*s12^3*s13 +
                36*s12^2*s13^2 + 18*s12*s13^3 + (36*s12^3 + 81*s12^2*s13 +
                  45*s12*s13^2)*s23 + (54*s12^2 + 45*s12*s13)*s23^2 +
                18*s12*s23^3) + p1q*p2q^2*(-54*s12^4 - 36*s12^3*s13 +
                90*s12^2*s13^2 + 72*s12*s13^3 + (-36*s12^3 + 126*s12^2*s13 +
                  162*s12*s13^2)*s23 + (54*s12^2 + 126*s12*s13)*s23^2 +
                36*s12*s23^3) + p1q^2*p2q*(-18*s12^4 + 18*s12^3*s13 +
                90*s12^2*s13^2 + 54*s12*s13^3 + (63*s12^3 + 216*s12^2*s13 +
                  153*s12*s13^2)*s23 + (117*s12^2 + 135*s12*s13)*s23^2 +
                36*s12*s23^3)) + p3q^2*(p2q^4*(-18*s12^4 + 36*s12^3*s13 +
                108*s12^2*s13^2 + 36*s12*s13^3 - 18*s13^4 +
                (-36*s12^3 + 108*s12^2*s13 + 108*s12*s13^2 - 36*s13^3)*s23 +
                (-18*s12^2 + 72*s12*s13 - 18*s13^2)*s23^2) +
              p1q*p2q^3*(-18*s12^4 + 72*s12^3*s13 + 162*s12^2*s13^2 +
                36*s12*s13^3 - 36*s13^4 + (54*s12^3 + 342*s12^2*s13 +
                  252*s12*s13^2 - 36*s13^3)*s23 + (144*s12^2 + 288*s12*s13 +
                  36*s13^2)*s23^2 + (72*s12 + 36*s13)*s23^3) +
              p1q^3*p2q*(18*s12^4 + 54*s12^3*s13 + 36*s12^2*s13^2 -
                18*s12*s13^3 - 18*s13^4 + (63*s12^3 + 72*s12^2*s13 -
                  36*s12*s13^2 - 45*s13^3)*s23 + (-9*s12^2 - 90*s12*s13 -
                  54*s13^2)*s23^2 + (-72*s12 - 45*s13)*s23^3 - 18*s23^4) +
              p1q^2*p2q^2*(18*s12^4 + 90*s12^3*s13 + 90*s12^2*s13^2 -
                18*s12*s13^3 - 36*s13^4 + (153*s12^3 + 342*s12^2*s13 +
                  135*s12*s13^2 - 54*s13^3)*s23 + (153*s12^2 + 153*s12*s13 -
                  18*s13^2)*s23^2 - 18*s13*s23^3 - 18*s23^4) +
              p1q^4*((-18*s12^2*s13 - 18*s12*s13^2)*s23 + (-18*s12^2 -
                  45*s12*s13 - 9*s13^2)*s23^2 + (-27*s12 - 18*s13)*s23^3 -
                9*s23^4)) + p3q*(p2q^5*(36*s12^3*s13 + 36*s12^2*s13^2 -
                36*s12*s13^3 - 36*s13^4 + (72*s12^2*s13 - 72*s13^3)*s23 +
                (36*s12*s13 - 36*s13^2)*s23^2) + p1q*p2q^4*(36*s12^3*s13 +
                18*s12^2*s13^2 - 72*s12*s13^3 - 54*s13^4 +
                (36*s12^3 + 198*s12^2*s13 + 126*s12*s13^2 - 36*s13^3)*s23 +
                (72*s12^2 + 234*s12*s13 + 90*s13^2)*s23^2 + (36*s12 + 72*s13)*
                 s23^3) + p1q^2*p2q^3*(18*s12^4 + 18*s12^3*s13 -
                54*s12^2*s13^2 - 90*s12*s13^3 - 36*s13^4 +
                (45*s12^3 + 72*s12^2*s13 - 9*s12*s13^2 - 36*s13^3)*s23 +
                (-27*s12^2 - 9*s12*s13)*s23^2 + (-90*s12 - 36*s13)*s23^3 -
                36*s23^4) + p1q^3*p2q^2*(18*s12^4 + 18*s12^3*s13 -
                36*s12^2*s13^2 - 54*s12*s13^3 - 18*s13^4 +
                (-27*s12^3 - 126*s12^2*s13 - 162*s12*s13^2 - 63*s13^3)*s23 +
                (-180*s12^2 - 261*s12*s13 - 90*s13^2)*s23^2 +
                (-153*s12 - 63*s13)*s23^3 - 18*s23^4) + p1q^4*p2q*(
                (-36*s12^3 - 72*s12^2*s13 - 36*s12*s13^2)*s23 +
                (-81*s12^2 - 72*s12*s13 + 9*s13^2)*s23^2 + (-36*s12 + 18*s13)*
                 s23^3 + 9*s23^4)))*Log(s23/(s12 + s13 + s23)))/
          (2*p1q*p3q^5*s12^4*s23 + p1q*p2q^5*(-2*s12*s13^3*s23 -
             2*s12*s13^2*s23^2) + p1q^2*p2q^4*(-4*s12*s13^3*s23 +
             4*s12*s13*s23^3) + p1q^4*p2q^2*(4*s12*s13^2*s23^2 -
             4*s12*s23^4) + p1q^5*p2q*(-2*s12*s13*s23^3 - 2*s12*s23^4) +
           p1q^3*p2q^3*(-2*s12*s13^3*s23 + 6*s12*s13^2*s23^2 +
             6*s12*s13*s23^3 - 2*s12*s23^4) +
           p3q^4*(p1q^2*((2*s12^4 - 2*s12^3*s13)*s23 - 6*s12^3*s23^2) +
             p1q*p2q*((4*s12^4 - 6*s12^3*s13)*s23 - 2*s12^3*s23^2)) +
           p3q^3*(p1q*p2q^2*((2*s12^4 - 12*s12^3*s13 + 6*s12^2*s13^2)*s23 +
               (-4*s12^3 + 4*s12^2*s13)*s23^2) + p1q^2*p2q*
              ((2*s12^4 - 10*s12^3*s13 + 4*s12^2*s13^2)*s23 + (-14*s12^3 +
                 4*s12^2*s13)*s23^2 + 4*s12^2*s23^3) +
             p1q^3*(-2*s12^3*s13*s23 + (-6*s12^3 + 4*s12^2*s13)*s23^2 + 6*
                s12^2*s23^3)) + p3q*(p1q*p2q^4*((6*s12^2*s13^2 - 4*s12*s13^3)*
                s23 + (4*s12^2*s13 - 4*s12*s13^2)*s23^2) +
             p1q^2*p2q^3*((10*s12^2*s13^2 - 6*s12*s13^3)*s23 + (8*s12^2*s13 +
                 2*s12*s13^2)*s23^2 + (4*s12^2 + 8*s12*s13)*s23^3) +
             p1q^4*p2q*((4*s12^2*s13 + 4*s12*s13^2)*s23^2 + (6*s12^2 -
                 2*s12*s13)*s23^3 - 6*s12*s23^4) + p1q^3*p2q^2*
              ((4*s12^2*s13^2 - 2*s12*s13^3)*s23 + (8*s12^2*s13 +
                 10*s12*s13^2)*s23^2 + (10*s12^2 + 8*s12*s13)*s23^3 - 4*s12*
                s23^4) + p1q^5*(-2*s12*s13*s23^3 - 2*s12*s23^4)) +
           p3q^2*(p1q*p2q^3*((-6*s12^3*s13 + 12*s12^2*s13^2 - 2*s12*s13^3)*
                s23 + (-2*s12^3 + 8*s12^2*s13 - 2*s12*s13^2)*s23^2) +
             p1q^2*p2q^2*((-8*s12^3*s13 + 14*s12^2*s13^2 - 2*s12*s13^3)*s23 +
               (-8*s12^3 + 12*s12^2*s13 + 2*s12*s13^2)*s23^2 + (8*s12^2 +
                 4*s12*s13)*s23^3) + p1q^4*(4*s12^2*s13*s23^2 + (6*s12^2 -
                 2*s12*s13)*s23^3 - 2*s12*s23^4) + p1q^3*p2q*
              ((-2*s12^3*s13 + 4*s12^2*s13^2)*s23 + (-6*s12^3 + 12*s12^2*
                  s13 + 4*s12*s13^2)*s23^2 + (16*s12^2 + 2*s12*s13)*s23^3 - 2*
                s12*s23^4))) + ((p3q^5*(18*s12^4*s13 + 18*s12^3*s13^2 +
              18*s12^3*s13*s23) + p2q^5*(18*s12^2*s13^3 + 18*s12*s13^4 +
              (36*s12*s13^3 + 18*s13^4)*s23 + 18*s13^3*s23^2) +
            p1q*p2q^4*(18*s12^2*s13^3 + 18*s12*s13^4 + (-36*s12^2*s13^2 -
                18*s12*s13^3)*s23 + (-74*s12*s13^2 - 38*s13^3)*s23^2 -
              38*s13^2*s23^3) + p1q^2*p2q^3*((-36*s12^3*s13 - 117*s12^2*
                 s13^2 - 108*s12*s13^3 - 27*s13^4)*s23 + (-52*s12^2*s13 -
                133*s12*s13^2 - 63*s13^3)*s23^2 + (6*s12*s13 - 14*s13^2)*s23^
                3 + 22*s13*s23^4) + p1q^4*p2q*((-2*s12^2 - 13*s12*s13 -
                11*s13^2)*s23^3 + (-6*s12 - 15*s13)*s23^4 - 4*s23^5) +
            p1q^3*p2q^2*((2*s12^3 + 51*s12^2*s13 + 87*s12*s13^2 + 38*s13^3)*
               s23^2 + (4*s12^2 + 91*s12*s13 + 78*s13^2)*s23^3 +
              38*s13*s23^4 - 2*s23^5) + p3q^4*(p2q*(54*s12^4*s13 +
                18*s12^3*s13^2 - 36*s12^2*s13^3 + (72*s12^3*s13 -
                  18*s12^2*s13^2)*s23 + 18*s12^2*s13*s23^2) +
              p1q*(18*s12^4*s13 + 18*s12^3*s13^2 + (-18*s12^3*s13 -
                  36*s12^2*s13^2)*s23 + (-2*s12^3 - 38*s12^2*s13)*s23^2 -
                2*s12^2*s23^3)) + p3q^3*(p2q^2*(54*s12^4*s13 - 54*s12^3*
                 s13^2 - 90*s12^2*s13^3 + 18*s12*s13^4 + (90*s12^3*s13 -
                  108*s12^2*s13^2 - 18*s12*s13^3)*s23 + (36*s12^2*s13 -
                  36*s12*s13^2)*s23^2) + p1q*p2q*(36*s12^4*s13 -
                36*s12^2*s13^3 + (-54*s12^3*s13 - 144*s12^2*s13^2 -
                  18*s12*s13^3)*s23 + (-4*s12^3 - 126*s12^2*s13 -
                  50*s12*s13^2)*s23^2 + (-4*s12^2 - 32*s12*s13)*s23^3) +
              p1q^2*((-45*s12^3*s13 - 54*s12^2*s13^2 - 9*s12*s13^3)*s23 +
                (-25*s12^2*s13 + 11*s12*s13^2)*s23^2 + (4*s12^2 + 24*s12*s13)*
                 s23^3 + 4*s12*s23^4)) + p3q*(p2q^4*(-36*s12^3*s13^2 +
                18*s12^2*s13^3 + 54*s12*s13^4 + (-72*s12^2*s13^2 +
                  54*s12*s13^3 + 36*s13^4)*s23 + (-36*s12*s13^2 + 36*s13^3)*
                 s23^2) + p1q*p2q^3*(-36*s12^3*s13^2 + 36*s12*s13^4 +
                (-36*s12^3*s13 - 198*s12^2*s13^2 - 108*s12*s13^3 - 18*s13^4)*
                 s23 + (-68*s12^2*s13 - 234*s12*s13^2 - 94*s13^3)*s23^2 +
                (-32*s12*s13 - 76*s13^2)*s23^3) + p1q^2*p2q^2*(
                (-63*s12^3*s13 - 162*s12^2*s13^2 - 135*s12*s13^3 - 36*s13^4)*
                 s23 + (2*s12^3 - 51*s12^2*s13 - 123*s12*s13^2 - 70*s13^3)*
                 s23^2 + (6*s12^2 + 58*s12*s13 + 10*s13^2)*s23^3 +
                (4*s12 + 44*s13)*s23^4) + p1q^4*((-2*s12^2 - 13*s12*s13 -
                  11*s13^2)*s23^3 + (-6*s12 - 15*s13)*s23^4 - 4*s23^5) +
              p1q^3*p2q*((4*s12^3 + 75*s12^2*s13 + 102*s12*s13^2 + 31*s13^3)*
                 s23^2 + (10*s12^2 + 101*s12*s13 + 55*s13^2)*s23^3 +
                (2*s12 + 20*s13)*s23^4 - 4*s23^5)) +
            p3q^2*(p2q^3*(18*s12^4*s13 - 90*s12^3*s13^2 - 54*s12^2*s13^3 +
                54*s12*s13^4 + (36*s12^3*s13 - 162*s12^2*s13^2 + 18*s13^4)*
                 s23 + (18*s12^2*s13 - 72*s12*s13^2 + 18*s13^3)*s23^2) +
              p1q*p2q^2*(18*s12^4*s13 - 54*s12^3*s13^2 - 54*s12^2*s13^3 +
                18*s12*s13^4 + (-72*s12^3*s13 - 270*s12^2*s13^2 -
                  108*s12*s13^3 - 18*s13^4)*s23 + (-2*s12^3 - 156*s12^2*s13 -
                  210*s12*s13^2 - 56*s13^3)*s23^2 + (-2*s12^2 - 64*s12*s13 -
                  38*s13^2)*s23^3) + p1q^2*p2q*((-90*s12^3*s13 - 153*s12^2*
                   s13^2 - 90*s12*s13^3 - 27*s13^4)*s23 +
                (2*s12^3 - 60*s12^2*s13 - 51*s12*s13^2 - 43*s13^3)*s23^2 +
                (10*s12^2 + 58*s12*s13 + 6*s13^2)*s23^3 + (8*s12 + 22*s13)*
                 s23^4) + p1q^3*((2*s12^3 + 42*s12^2*s13 + 51*s12*s13^2 +
                  11*s13^3)*s23^2 + (6*s12^2 + 46*s12*s13 + 13*s13^2)*s23^3 +
                2*s12*s23^4 - 2*s23^5)))*Log((s13 + s23)/(s12 + s13 + s23)))/
          (2*p1q*p3q^4*s12^3*s13*s23^2 + 2*p1q*p2q^4*s12*s13^3*s23^2 +
           2*p1q^4*p2q*s12*s13*s23^4 + p1q^2*p2q^3*(2*s12*s13^3*s23^2 -
             4*s12*s13^2*s23^3) + p1q^3*p2q^2*(-4*s12*s13^2*s23^3 +
             2*s12*s13*s23^4) + p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*
              s23^2 + p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
           p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*
              s23^2 + p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
               (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) + p1q^3*(-4*s12^2*s13*
                s23^3 + 2*s12*s13*s23^4)) +
           p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
             2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*((-4*s12^2*s13^2 +
                 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*s13^2)*s23^3) +
             p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*s23^3 + 4*s12*s13*
                s23^4)))) + Log(s12/(s12 + s13 + s23))*
        ((p3q^2*(135*s12^4*s13 + 72*s12^3*s13^2 - 63*s12^2*s13^3 +
             (90*s12^4 + 162*s12^3*s13 - 126*s12^2*s13^2)*s23 +
             (90*s12^3 - 63*s12^2*s13)*s23^2) + p2q^2*(-135*s12^3*s13^2 -
             72*s12^2*s13^3 + 63*s12*s13^4 + (-90*s12^3*s13 - 162*s12^2*
                s13^2 + 126*s12*s13^3)*s23 + (-90*s12^2*s13 + 63*s12*s13^2)*
              s23^2) + p1q^2*((135*s12^3*s13 + 72*s12^2*s13^2 - 63*s12*s13^3)*
              s23 + (90*s12^3 + 162*s12^2*s13 - 126*s12*s13^2)*s23^2 +
             (90*s12^2 - 63*s12*s13)*s23^3) + p1q*p2q*(135*s12^3*s13^2 +
             72*s12^2*s13^3 - 63*s12*s13^4 + (-30*s12^3*s13 + 233*s12^2*
                s13^2 - 111*s12*s13^3 - 176*s13^4)*s23 +
             (-80*s12^3 + 36*s12^2*s13 + 138*s12*s13^2 - 312*s13^3)*s23^2 +
             (-80*s12^2 + 146*s12*s13 - 136*s13^2)*s23^3) +
           p3q*(p2q*(135*s12^4*s13 - 63*s12^3*s13^2 - 135*s12^2*s13^3 + 63*
                s12*s13^4 + (90*s12^4 + 72*s12^3*s13 - 288*s12^2*s13^2 +
                 126*s12*s13^3)*s23 + (90*s12^3 - 153*s12^2*s13 +
                 63*s12*s13^2)*s23^2) + p1q*(-135*s12^4*s13 - 72*s12^3*
                s13^2 + 63*s12^2*s13^3 + (-90*s12^4 - 282*s12^3*s13 +
                 197*s12^2*s13^2 + 15*s12*s13^3 - 176*s13^4)*s23 +
               (-170*s12^3 + 9*s12^2*s13 + 201*s12*s13^2 - 312*s13^3)*s23^2 +
               (-80*s12^2 + 146*s12*s13 - 136*s13^2)*s23^3)))/
          (p1q*p2q*(18*s12*s13^4*s23 + 36*s12*s13^3*s23^2 +
             18*s12*s13^2*s23^3) + p1q*p3q*(18*s12*s13^4*s23 +
             36*s12*s13^3*s23^2 + 18*s12*s13^2*s23^3)) +
         ((p3q^4*(-4*s12^5 - 2*s12^4*s13 + 2*s12^3*s13^2 + (-8*s12^4 -
                2*s12^3*s13)*s23 - 4*s12^3*s23^2) +
            p2q^4*(2*s12^2*s13^3 - 2*s12*s13^4 - 4*s13^5 + (-2*s12*s13^3 -
                8*s13^4)*s23 - 4*s13^3*s23^2) + p1q*p2q^3*(-(s12^3*s13^2) +
              7*s12^2*s13^3 + 5*s12*s13^4 - 3*s13^5 + (18*s12*s13^3 +
                6*s13^4)*s23 + (13*s12*s13^2 + 21*s13^3)*s23^2 +
              12*s13^2*s23^3) + p1q^2*p2q^2*(-(s12^4*s13) - 5*s12^3*s13^2 -
              s12^2*s13^3 + 3*s12*s13^4 + (-2*s12^3*s13 - 18*s12^2*s13^2 +
                10*s13^4)*s23 + (-7*s12^2*s13 - 21*s12*s13^2 + 8*s13^3)*s23^
                2 + (-18*s12*s13 - 14*s13^2)*s23^3 - 12*s13*s23^4) +
            p1q^3*p2q*(-2*s12^4*s13 - 6*s12^3*s13^2 - 6*s12^2*s13^3 -
              2*s12*s13^4 + (-s12^4 - 5*s12^3*s13 - 17*s12^2*s13^2 -
                13*s12*s13^3)*s23 + (-3*s12^3 - 3*s12^2*s13 - 21*s12*s13^2 -
                11*s13^3)*s23^2 + (s12^2 - 3*s12*s13 - 18*s13^2)*s23^3 +
              (7*s12 - 3*s13)*s23^4 + 4*s23^5) +
            p1q^4*((2*s12^3*s13 + 4*s12^2*s13^2 + 2*s12*s13^3)*s23 +
              (10*s12^2*s13 + 10*s12*s13^2)*s23^2 + (4*s12^2 + 16*s12*s13 +
                4*s13^2)*s23^3 + (8*s12 + 8*s13)*s23^4 + 4*s23^5) +
            p3q^3*(p2q*(20*s12^4*s13 + 16*s12^3*s13^2 - 4*s12^2*s13^3 +
                (4*s12^4 + 36*s12^3*s13 + 8*s12^2*s13^2)*s23 +
                (8*s12^3 + 16*s12^2*s13)*s23^2 + 4*s12^2*s23^3) +
              p1q*(-3*s12^5 + 5*s12^4*s13 + 7*s12^3*s13^2 - s12^2*s13^3 +
                (6*s12^4 + 18*s12^3*s13)*s23 + (21*s12^3 + 13*s12^2*s13)*
                 s23^2 + 12*s12^2*s23^3)) + p3q^2*(p2q^2*(2*s12^4*s13 -
                30*s12^3*s13^2 - 30*s12^2*s13^3 + 2*s12*s13^4 +
                (-10*s12^3*s13 - 56*s12^2*s13^2 - 10*s12*s13^3)*s23 +
                (-20*s12^2*s13 - 20*s12*s13^2)*s23^2 - 8*s12*s13*s23^3) +
              p1q^2*(3*s12^4*s13 - s12^3*s13^2 - 5*s12^2*s13^3 - s12*s13^4 +
                (10*s12^4 - 18*s12^2*s13^2 - 2*s12*s13^3)*s23 +
                (8*s12^3 - 21*s12^2*s13 - 7*s12*s13^2)*s23^2 +
                (-14*s12^2 - 18*s12*s13)*s23^3 - 12*s12*s23^4) +
              p1q*p2q*(s12^5 + 17*s12^4*s13 - 5*s12^3*s13^2 - 21*s12^2*
                 s13^3 + (6*s12^4 + 8*s12^3*s13 - 44*s12^2*s13^2 -
                  10*s12*s13^3)*s23 + (s12^3 - 25*s12^2*s13 - 18*s12*s13^2)*
                 s23^2 + (-12*s12^2 - 16*s12*s13)*s23^3 - 8*s12*s23^4)) +
            p3q*(p2q^3*(-4*s12^3*s13^2 + 16*s12^2*s13^3 + 20*s12*s13^4 +
                (8*s12^2*s13^2 + 36*s12*s13^3 + 4*s13^4)*s23 +
                (16*s12*s13^2 + 8*s13^3)*s23^2 + 4*s13^2*s23^3) +
              p1q*p2q^2*(-21*s12^3*s13^2 - 5*s12^2*s13^3 + 17*s12*s13^4 +
                s13^5 + (-10*s12^3*s13 - 44*s12^2*s13^2 + 8*s12*s13^3 +
                  6*s13^4)*s23 + (-18*s12^2*s13 - 25*s12*s13^2 + s13^3)*
                 s23^2 + (-16*s12*s13 - 12*s13^2)*s23^3 - 8*s13*s23^4) +
              p1q^2*p2q*(s12^5 + s12^4*s13 - 14*s12^3*s13^2 - 14*s12^2*
                 s13^3 + s12*s13^4 + s13^5 + (2*s12^4 - 12*s12^3*s13 -
                  40*s12^2*s13^2 - 12*s12*s13^3 + 2*s13^4)*s23 +
                (-7*s12^3 - 17*s12^2*s13 - 17*s12*s13^2 - 7*s13^3)*s23^2 +
                (-12*s12^2 - 4*s12*s13 - 12*s13^2)*s23^3 + 4*s23^5) +
              p1q^3*(-2*s12^4*s13 - 6*s12^3*s13^2 - 6*s12^2*s13^3 -
                2*s12*s13^4 + (-13*s12^3*s13 - 17*s12^2*s13^2 - 5*s12*s13^3 -
                  s13^4)*s23 + (-11*s12^3 - 21*s12^2*s13 - 3*s12*s13^2 -
                  3*s13^3)*s23^2 + (-18*s12^2 - 3*s12*s13 + s13^2)*s23^3 +
                (-3*s12 + 7*s13)*s23^4 + 4*s23^5)))*
           Log(s13/(s12 + s13 + s23)))/(p3q^4*(2*s12^5*s13 +
             2*s12^4*s13*s23) + p2q^4*(2*s12*s13^5 + 2*s12*s13^4*s23) +
           p1q*p2q^3*(-2*s12^2*s13^4 + 2*s12*s13^5 + (-2*s12^2*s13^3 - 4*s12*
                s13^4)*s23 - 6*s12*s13^3*s23^2) + p1q^2*p2q^2*
            (-2*s12^2*s13^4 + (2*s12^2*s13^3 - 6*s12*s13^4)*s23 +
             4*s12^2*s13^2*s23^2 + 6*s12*s13^2*s23^3) +
           p1q^4*(-2*s12^2*s13^2*s23^2 + (-2*s12^2*s13 - 2*s12*s13^2)*s23^3 -
             2*s12*s13*s23^4) + p1q^3*p2q*(4*s12^2*s13^3*s23 +
             (2*s12^2*s13^2 + 6*s12*s13^3)*s23^2 + (-2*s12^2*s13 + 4*s12*
                s13^2)*s23^3 - 2*s12*s13*s23^4) +
           p3q^3*(p1q*(2*s12^5*s13 - 2*s12^4*s13^2 + (-4*s12^4*s13 -
                 2*s12^3*s13^2)*s23 - 6*s12^3*s13*s23^2) +
             p2q*(-8*s12^4*s13^2 + (-2*s12^4*s13 - 6*s12^3*s13^2)*s23 - 2*
                s12^3*s13*s23^2)) + p3q^2*(p2q^2*(12*s12^3*s13^3 +
               (6*s12^3*s13^2 + 6*s12^2*s13^3)*s23 + 4*s12^2*s13^2*s23^2) +
             p1q*p2q*(-6*s12^4*s13^2 + 6*s12^3*s13^3 + (-2*s12^4*s13 +
                 4*s12^3*s13^2 + 4*s12^2*s13^3)*s23 + (2*s12^3*s13 +
                 4*s12^2*s13^2)*s23^2 + 4*s12^2*s13*s23^3) +
             p1q^2*(-2*s12^4*s13^2 + (-6*s12^4*s13 + 2*s12^3*s13^2)*s23 + 4*
                s12^2*s13^2*s23^2 + 6*s12^2*s13*s23^3)) +
           p3q*(p2q^3*(-8*s12^2*s13^4 + (-6*s12^2*s13^3 - 2*s12*s13^4)*s23 -
               2*s12*s13^3*s23^2) + p1q*p2q^2*(6*s12^3*s13^3 - 6*s12^2*
                s13^4 + (4*s12^3*s13^2 + 4*s12^2*s13^3 - 2*s12*s13^4)*s23 +
               (4*s12^2*s13^2 + 2*s12*s13^3)*s23^2 + 4*s12*s13^2*s23^3) +
             p1q^3*(4*s12^3*s13^2*s23 + (6*s12^3*s13 + 2*s12^2*s13^2)*s23^2 +
               (4*s12^2*s13 - 2*s12*s13^2)*s23^3 - 2*s12*s13*s23^4) +
             p1q^2*p2q*(4*s12^3*s13^3 + (4*s12^3*s13^2 + 4*s12^2*s13^3)*s23 +
               (4*s12^3*s13 + 4*s12*s13^3)*s23^2 + (2*s12^2*s13 +
                 2*s12*s13^2)*s23^3 - 2*s12*s13*s23^4))) +
         ((p3q^6*(324*s12^6*s13^3 + 648*s12^5*s13^4 + 324*s12^4*s13^5 +
              (90*s12^8 + 117*s12^7*s13 + 144*s12^6*s13^2 + 459*s12^5*s13^3 +
                342*s12^4*s13^4)*s23 + (90*s12^7 + 27*s12^6*s13 +
                117*s12^5*s13^2 + 18*s12^4*s13^3)*s23^2) +
            p2q^6*(-324*s12^3*s13^6 - 648*s12^2*s13^7 - 324*s12*s13^8 +
              (90*s12^4*s13^4 - 45*s12^3*s13^5 - 666*s12^2*s13^6 -
                675*s12*s13^7 - 144*s13^8)*s23 + (90*s12^4*s13^3 +
                207*s12^3*s13^4 - 153*s12^2*s13^5 - 396*s12*s13^6 -
                288*s13^7)*s23^2 + (90*s12^3*s13^3 + 27*s12^2*s13^4 -
                45*s12*s13^5 - 144*s13^6)*s23^3) + p1q*p2q^5*
             (-324*s12^3*s13^6 - 648*s12^2*s13^7 - 324*s12*s13^8 +
              (324*s12^3*s13^5 + 972*s12^2*s13^6 + 648*s12*s13^7)*s23 +
              (-100*s12^4*s13^3 - 13*s12^3*s13^4 + 1504*s12^2*s13^5 +
                2800*s12*s13^6 + 735*s13^7)*s23^2 + (-100*s12^4*s13^2 -
                437*s12^3*s13^3 + 133*s12^2*s13^4 + 2111*s12*s13^5 +
                1470*s13^6)*s23^3 + (-100*s12^3*s13^2 - 237*s12^2*s13^3 +
                283*s12*s13^4 + 735*s13^5)*s23^4) + p1q^2*p2q^4*
             ((72*s12^4*s13^4 + 855*s12^3*s13^5 + 2124*s12^2*s13^6 +
                1485*s12*s13^7 + 144*s13^8)*s23 + (224*s12^4*s13^3 +
                1202*s12^3*s13^4 + 2170*s12^2*s13^5 + 2431*s12*s13^6 +
                753*s13^7)*s23^2 + (-80*s12^4*s13^2 + 499*s12^3*s13^3 +
                548*s12^2*s13^4 - 1108*s12*s13^5 - 267*s13^6)*s23^3 +
              (-70*s12^4*s13 + 163*s12^3*s13^2 + 410*s12^2*s13^3 -
                2312*s12*s13^4 - 2217*s13^5)*s23^4 + (-70*s12^3*s13 +
                313*s12^2*s13^2 - 258*s12*s13^3 - 1341*s13^4)*s23^5) +
            p1q^3*p2q^3*((252*s12^4*s13^3 + 369*s12^3*s13^4 - 1188*s12^2*
                 s13^5 - 1656*s12*s13^6 - 351*s13^7)*s23^2 +
              (110*s12^4*s13^2 + 162*s12^3*s13^3 - 1826*s12^2*s13^4 -
                4632*s12*s13^5 - 1935*s13^6)*s23^3 + (100*s12^4*s13 +
                437*s12^3*s13^2 - 402*s12^2*s13^3 - 2352*s12*s13^4 -
                1764*s13^5)*s23^4 + (80*s12^4 + 157*s12^3*s13 +
                51*s12^2*s13^2 + 471*s12*s13^3 + 873*s13^4)*s23^5 +
              (80*s12^3 - 23*s12^2*s13 - 153*s12*s13^2 + 1053*s13^3)*s23^6) +
            p1q^6*((90*s12^3*s13 + 27*s12^2*s13^2 - 63*s12*s13^3)*s23^5 +
              (90*s12^3 + 117*s12^2*s13 - 126*s12*s13^2)*s23^6 +
              (90*s12^2 - 63*s12*s13)*s23^7) + p1q^5*p2q*
             ((-90*s12^4*s13 - 207*s12^3*s13^2 + 171*s12^2*s13^3 +
                225*s12*s13^4 - 63*s13^5)*s23^4 + (-90*s12^4 - 287*s12^3*
                 s13 + 12*s12^2*s13^2 + 158*s12*s13^3 - 429*s13^4)*s23^5 +
              (-80*s12^3 + 13*s12^2*s13 + 43*s12*s13^2 - 669*s13^3)*s23^6 +
              (10*s12^2 + 110*s12*s13 - 303*s13^2)*s23^7) +
            p1q^4*p2q^2*((90*s12^4*s13^2 - 297*s12^3*s13^3 - 324*s12^2*
                 s13^4 + 333*s12*s13^5 + 270*s13^6)*s23^3 + (80*s12^4*s13 -
                33*s12^3*s13^2 - 149*s12^2*s13^3 + 1845*s12*s13^4 +
                1611*s13^5)*s23^4 + (-10*s12^4 - 150*s12^3*s13 -
                277*s12^2*s13^2 + 1355*s12*s13^3 + 2109*s13^4)*s23^5 +
              (-90*s12^3 - 127*s12^2*s13 + 16*s12*s13^2 + 465*s13^3)*s23^6 +
              (-80*s12^2 + 173*s12*s13 - 303*s13^2)*s23^7) +
            p3q^5*(p1q*(-324*s12^5*s13^4 - 648*s12^4*s13^5 - 324*s12^3*
                 s13^6 + (-90*s12^8 - 207*s12^7*s13 - 261*s12^6*s13^2 -
                  1737*s12^5*s13^3 - 2745*s12^4*s13^4 - 1152*s12^3*s13^5)*
                 s23 + (-530*s12^7 - 482*s12^6*s13 - 730*s12^5*s13^2 -
                  2449*s12^4*s13^3 - 1023*s12^3*s13^4)*s23^2 +
                (-440*s12^6 + 75*s12^5*s13 - 661*s12^4*s13^2 - 195*s12^3*
                   s13^3)*s23^3) + p2q*(972*s12^6*s13^3 + 972*s12^5*s13^4 -
                972*s12^4*s13^5 - 972*s12^3*s13^6 + (180*s12^8 - 126*s12^7*
                   s13 - 180*s12^6*s13^2 + 666*s12^5*s13^3 - 504*s12^4*
                   s13^4 - 1044*s12^3*s13^5)*s23 + (90*s12^7 - 423*s12^6*
                   s13 - 18*s12^5*s13^2 - 567*s12^4*s13^3 - 90*s12^3*s13^4)*
                 s23^2 + (-90*s12^6 - 27*s12^5*s13 - 117*s12^4*s13^2 -
                  18*s12^3*s13^3)*s23^3)) + p3q^4*(p2q^2*(972*s12^6*s13^3 -
                972*s12^5*s13^4 - 3888*s12^4*s13^5 - 972*s12^3*s13^6 +
                972*s12^2*s13^7 + (90*s12^8 - 603*s12^7*s13 - 252*s12^6*
                   s13^2 + 495*s12^5*s13^3 - 2628*s12^4*s13^4 - 1764*s12^3*
                   s13^5 + 918*s12^2*s13^6)*s23 + (-90*s12^7 - 657*s12^6*
                   s13 + 504*s12^5*s13^2 - 918*s12^4*s13^3 + 279*s12^3*
                   s13^4 - 162*s12^2*s13^5)*s23^2 + (-180*s12^6 + 216*s12^5*
                   s13 - 153*s12^4*s13^2 + 153*s12^3*s13^3 - 108*s12^2*s13^4)*
                 s23^3) + p1q*p2q*(-972*s12^5*s13^4 - 1296*s12^4*s13^5 +
                324*s12^3*s13^6 + 648*s12^2*s13^7 + (-90*s12^8 + 63*s12^7*
                   s13 + 360*s12^6*s13^2 - 3546*s12^5*s13^3 - 4986*s12^4*
                   s13^4 - 369*s12^3*s13^5 + 864*s12^2*s13^6)*s23 +
                (-790*s12^7 + 617*s12^6*s13 - 50*s12^5*s13^2 - 4175*s12^4*
                   s13^3 + 927*s12^3*s13^4 + 405*s12^2*s13^5)*s23^2 +
                (-350*s12^6 + 1412*s12^5*s13 - 979*s12^4*s13^2 + 1720*s12^3*
                   s13^3 + 366*s12^2*s13^4)*s23^3 + (350*s12^5 - 102*s12^4*
                   s13 + 544*s12^3*s13^2 + 177*s12^2*s13^3)*s23^4) +
              p1q^2*((90*s12^7*s13 + 117*s12^6*s13^2 + 144*s12^5*s13^3 +
                  1269*s12^4*s13^4 + 1638*s12^3*s13^5 + 486*s12^2*s13^6)*
                 s23 + (450*s12^7 + 935*s12^6*s13 + 788*s12^5*s13^2 +
                  3592*s12^4*s13^3 + 5005*s12^3*s13^4 + 1230*s12^2*s13^5)*
                 s23^2 + (1310*s12^6 + 695*s12^5*s13 + 1390*s12^4*s13^2 +
                  5170*s12^3*s13^3 + 1221*s12^2*s13^4)*s23^3 +
                (860*s12^5 - 560*s12^4*s13 + 1584*s12^3*s13^2 + 477*s12^2*
                   s13^3)*s23^4)) + p3q^3*(p2q^3*(324*s12^6*s13^3 -
                2268*s12^5*s13^4 - 2592*s12^4*s13^5 + 2592*s12^3*s13^6 +
                2268*s12^2*s13^7 - 324*s12*s13^8 + (-360*s12^7*s13 +
                  612*s12^6*s13^2 + 468*s12^5*s13^3 - 2520*s12^4*s13^4 +
                  972*s12^3*s13^5 + 2916*s12^2*s13^6 - 72*s12*s13^7)*s23 +
                (-90*s12^7 + 63*s12^6*s13 + 1260*s12^5*s13^2 - 774*s12^4*
                   s13^3 + 936*s12^3*s13^4 + 99*s12^2*s13^5 + 522*s12*s13^6)*
                 s23^2 + (-90*s12^6 + 513*s12^5*s13 - 225*s12^4*s13^2 +
                  279*s12^3*s13^3 - 243*s12^2*s13^4 + 270*s12*s13^5)*s23^3) +
              p1q*p2q^2*(-972*s12^5*s13^4 + 2592*s12^3*s13^6 + 1296*s12^2*
                 s13^7 - 324*s12*s13^8 + (270*s12^7*s13 + 351*s12^6*s13^2 -
                  3402*s12^5*s13^3 - 2052*s12^4*s13^4 + 3348*s12^3*s13^5 +
                  2349*s12^2*s13^6 + 432*s12*s13^7)*s23 + (-260*s12^7 +
                  1519*s12^6*s13 - 265*s12^5*s13^2 - 2242*s12^4*s13^3 +
                  6018*s12^3*s13^4 + 861*s12^2*s13^5 + 1125*s12*s13^6)*
                 s23^2 + (350*s12^6 + 1548*s12^5*s13 - 1143*s12^4*s13^2 +
                  4743*s12^3*s13^3 + 925*s12^2*s13^4 + 411*s12*s13^5)*s23^3 +
                (610*s12^5 - 571*s12^4*s13 + 1283*s12^3*s13^2 + 364*s12^2*
                   s13^3 + 42*s12*s13^4)*s23^4) + p1q^3*((-360*s12^6*s13 -
                  378*s12^5*s13^2 - 369*s12^4*s13^3 - 1764*s12^3*s13^4 -
                  1494*s12^2*s13^5 - 81*s12*s13^6)*s23^2 + (-900*s12^6 -
                  1680*s12^5*s13 - 682*s12^4*s13^2 - 3714*s12^3*s13^3 -
                  4832*s12^2*s13^4 - 381*s12*s13^5)*s23^3 +
                (-1740*s12^5 - 300*s12^4*s13 - 1240*s12^3*s13^2 - 5516*s12^2*
                   s13^3 - 741*s12*s13^4)*s23^4 + (-840*s12^4 + 960*s12^3*
                   s13 - 1956*s12^2*s13^2 - 441*s12*s13^3)*s23^5) +
              p1q^2*p2q*((90*s12^7*s13 - 153*s12^6*s13^2 - 369*s12^5*s13^3 +
                  2457*s12^4*s13^4 + 3825*s12^3*s13^5 + 2052*s12^2*s13^6 +
                  810*s12*s13^7)*s23 + (360*s12^7 + 88*s12^6*s13 -
                  852*s12^5*s13^2 + 6571*s12^4*s13^3 + 11583*s12^3*s13^4 +
                  3907*s12^2*s13^5 + 1419*s12*s13^6)*s23^2 +
                (1370*s12^6 - 1158*s12^5*s13 + 887*s12^4*s13^2 + 9633*s12^3*
                   s13^3 + 2135*s12^2*s13^4 + 939*s12*s13^5)*s23^3 +
                (500*s12^5 - 1858*s12^4*s13 + 2358*s12^3*s13^2 - 1591*s12^2*
                   s13^3 + 30*s12*s13^4)*s23^4 + (-510*s12^4 + 458*s12^3*
                   s13 - 1040*s12^2*s13^2 - 300*s12*s13^3)*s23^5)) +
            p3q^2*(p2q^4*(-972*s12^5*s13^4 + 972*s12^4*s13^5 + 3888*s12^3*
                 s13^6 + 972*s12^2*s13^7 - 972*s12*s13^8 + (540*s12^6*s13^2 -
                  180*s12^5*s13^3 - 792*s12^4*s13^4 + 3015*s12^3*s13^5 +
                  2412*s12^2*s13^6 - 819*s12*s13^7 - 144*s13^8)*s23 +
                (270*s12^6*s13 + 351*s12^5*s13^2 - 1062*s12^4*s13^3 +
                  882*s12^3*s13^4 + 531*s12^2*s13^5 + 648*s12*s13^6 -
                  288*s13^7)*s23^2 + (270*s12^5*s13 - 459*s12^4*s13^2 +
                  117*s12^3*s13^3 - 135*s12^2*s13^4 + 495*s12*s13^5 -
                  144*s13^6)*s23^3) + p1q*p2q^3*(-324*s12^5*s13^4 +
                1296*s12^4*s13^5 + 2592*s12^3*s13^6 - 972*s12*s13^8 +
                (-270*s12^6*s13^2 - 1503*s12^5*s13^3 + 1044*s12^4*s13^4 +
                  3474*s12^3*s13^5 + 2250*s12^2*s13^6 + 909*s12*s13^7 -
                  144*s13^8)*s23 + (420*s12^6*s13 - 1005*s12^5*s13^2 +
                  521*s12^4*s13^3 + 5474*s12^3*s13^4 - 68*s12^2*s13^5 +
                  3025*s12*s13^6 + 141*s13^7)*s23^2 + (260*s12^6 +
                  51*s12^5*s13 - 689*s12^4*s13^2 + 3919*s12^3*s13^3 -
                  249*s12^2*s13^4 + 1016*s12*s13^5 + 714*s13^6)*s23^3 +
                (260*s12^5 - 629*s12^4*s13 + 1095*s12^3*s13^2 - 85*s12^2*
                   s13^3 - 128*s12*s13^4 + 429*s13^5)*s23^4) +
              p1q^2*p2q^2*((-270*s12^6*s13^2 - 405*s12^5*s13^3 + 2025*s12^4*
                   s13^4 + 3915*s12^3*s13^5 + 4401*s12^2*s13^6 + 2646*s12*
                   s13^7)*s23 + (-460*s12^6*s13 - 675*s12^5*s13^2 +
                  5290*s12^4*s13^3 + 9173*s12^3*s13^4 + 4179*s12^2*s13^5 +
                  4018*s12*s13^6 + 591*s13^7)*s23^2 + (240*s12^6 -
                  1419*s12^5*s13 + 549*s12^4*s13^2 + 4767*s12^3*s13^3 -
                  1095*s12^2*s13^4 + 504*s12*s13^5 + 756*s13^6)*s23^3 +
                (-520*s12^5 - 1252*s12^4*s13 + 850*s12^3*s13^2 - 5117*s12^2*
                   s13^3 - 2139*s12*s13^4 - 261*s13^5)*s23^4 +
                (-760*s12^4 + 707*s12^3*s13 - 1550*s12^2*s13^2 - 1271*s12*
                   s13^3 - 426*s13^4)*s23^5) + p1q^3*p2q*((-270*s12^6*s13 +
                  99*s12^5*s13^2 + 549*s12^4*s13^3 - 2844*s12^3*s13^4 -
                  5049*s12^2*s13^5 - 1944*s12*s13^6 + 81*s13^7)*s23^2 +
                (-540*s12^6 - 652*s12^5*s13 + 676*s12^4*s13^2 - 5694*s12^3*
                   s13^3 - 11821*s12^2*s13^4 - 5306*s12*s13^5 - 426*s13^6)*
                 s23^3 + (-1170*s12^5 + 982*s12^4*s13 - 861*s12^3*s13^2 -
                  9694*s12^2*s13^3 - 4428*s12*s13^4 - 954*s13^5)*s23^4 +
                (-300*s12^4 + 1282*s12^3*s13 - 2050*s12^2*s13^2 -
                  150*s12*s13^3 - 306*s13^4)*s23^5 + (330*s12^3 - 502*s12^2*
                   s13 + 916*s12*s13^2 + 141*s13^3)*s23^6) +
              p1q^4*((540*s12^5*s13 + 432*s12^4*s13^2 + 243*s12^3*s13^3 +
                  1017*s12^2*s13^4 + 585*s12*s13^5 - 81*s13^6)*s23^3 +
                (900*s12^5 + 1500*s12^4*s13 - 82*s12^3*s13^2 + 1980*s12^2*
                   s13^3 + 2389*s12*s13^4 - 21*s13^5)*s23^4 +
                (1310*s12^4 - 205*s12^3*s13 + 510*s12^2*s13^2 + 3023*s12*
                   s13^3 + 201*s13^4)*s23^5 + (410*s12^3 - 675*s12^2*s13 +
                  1219*s12*s13^2 + 141*s13^3)*s23^6)) +
            p3q*(p2q^5*(972*s12^4*s13^5 + 972*s12^3*s13^6 - 972*s12^2*s13^7 -
                972*s12*s13^8 + (-360*s12^5*s13^3 + 36*s12^4*s13^4 +
                  1278*s12^3*s13^5 - 252*s12^2*s13^6 - 1422*s12*s13^7 -
                  288*s13^8)*s23 + (-270*s12^5*s13^2 - 531*s12^4*s13^3 +
                  522*s12^3*s13^4 + 117*s12^2*s13^5 - 270*s12*s13^6 -
                  576*s13^7)*s23^2 + (-270*s12^4*s13^2 + 99*s12^3*s13^3 +
                  27*s12^2*s13^4 + 180*s12*s13^5 - 288*s13^6)*s23^3) +
              p1q*p2q^4*(648*s12^4*s13^5 + 324*s12^3*s13^6 - 1296*s12^2*
                 s13^7 - 972*s12*s13^8 + (90*s12^5*s13^3 + 855*s12^4*s13^4 +
                  1233*s12^3*s13^5 + 1737*s12^2*s13^6 + 1125*s12*s13^7 -
                  144*s13^8)*s23 + (-60*s12^5*s13^2 + 937*s12^4*s13^3 +
                  1393*s12^3*s13^4 + 980*s12^2*s13^5 + 4700*s12*s13^6 +
                  876*s13^7)*s23^2 + (-160*s12^5*s13 + 36*s12^4*s13^2 +
                  654*s12^3*s13^3 - 675*s12^2*s13^4 + 2716*s12*s13^5 +
                  2184*s13^6)*s23^3 + (-160*s12^4*s13 + 256*s12^3*s13^2 -
                  509*s12^2*s13^3 + 113*s12*s13^4 + 1164*s13^5)*s23^4) +
              p1q^2*p2q^3*((108*s12^5*s13^3 + 909*s12^4*s13^4 + 2583*s12^3*
                   s13^5 + 4959*s12^2*s13^6 + 3321*s12*s13^7 + 144*s13^8)*
                 s23 + (200*s12^5*s13^2 + 1527*s12^4*s13^3 + 2825*s12^3*
                   s13^4 + 3069*s12^2*s13^5 + 4841*s12*s13^6 + 1326*s13^7)*
                 s23^2 + (-160*s12^5*s13 + 36*s12^4*s13^2 - 277*s12^3*s13^3 -
                  2325*s12^2*s13^4 - 1885*s12*s13^5 + 453*s13^6)*s23^3 +
                (-250*s12^5 - 231*s12^4*s13 - 22*s12^3*s13^2 - 2918*s12^2*
                   s13^3 - 4634*s12*s13^4 - 2496*s13^5)*s23^4 +
                (-250*s12^4 + 179*s12^3*s13 - 197*s12^2*s13^2 - 1229*s12*
                   s13^3 - 1767*s13^4)*s23^5) + p1q^3*p2q^2*(
                (180*s12^5*s13^2 + 702*s12^4*s13^3 - 1251*s12^3*s13^4 -
                  5175*s12^2*s13^5 - 3690*s12*s13^6 - 288*s13^7)*s23^2 +
                (110*s12^5*s13 + 397*s12^4*s13^2 - 2151*s12^3*s13^3 -
                  8140*s12^2*s13^4 - 9062*s12*s13^5 - 2361*s13^6)*s23^3 +
                (-60*s12^5 + 653*s12^4*s13 + 285*s12^3*s13^2 - 3815*s12^2*
                   s13^3 - 4788*s12*s13^4 - 2664*s13^5)*s23^4 +
                (350*s12^4 + 488*s12^3*s13 - 187*s12^2*s13^2 + 1347*s12*
                   s13^3 + 603*s13^4)*s23^5 + (410*s12^3 - 525*s12^2*s13 +
                  763*s12*s13^2 + 1194*s13^3)*s23^6) + p1q^5*(
                (-360*s12^4*s13 - 198*s12^3*s13^2 + 45*s12^2*s13^3 -
                  198*s12*s13^4 - 81*s13^5)*s23^4 + (-450*s12^4 - 665*s12^3*
                   s13 + 363*s12^2*s13^2 - 445*s12*s13^3 - 465*s13^4)*s23^5 +
                (-530*s12^3 + 238*s12^2*s13 - 74*s12*s13^2 - 687*s13^3)*
                 s23^6 + (-80*s12^2 + 173*s12*s13 - 303*s13^2)*s23^7) +
              p1q^4*p2q*((270*s12^5*s13 + 261*s12^4*s13^2 - 351*s12^3*s13^3 +
                  1134*s12^2*s13^4 + 1701*s12*s13^5 + 225*s13^6)*s23^3 +
                (360*s12^5 + 788*s12^4*s13 - 196*s12^3*s13^2 + 1579*s12^2*
                   s13^3 + 5161*s12*s13^4 + 1644*s13^5)*s23^4 +
                (490*s12^4 - 328*s12^3*s13 + 161*s12^2*s13^2 + 4279*s12*
                   s13^3 + 2310*s13^4)*s23^5 + (50*s12^3 - 523*s12^2*s13 +
                  992*s12*s13^2 + 588*s13^3)*s23^6 + (-80*s12^2 +
                  173*s12*s13 - 303*s13^2)*s23^7)))*
           Log(s23/(s12 + s13 + s23)))/(p1q*p3q^5*(18*s12^5*s13^3 +
             18*s12^4*s13^4)*s23^2 + p1q*p2q^5*((-18*s12^2*s13^6 - 18*s12*
                s13^7)*s23^2 + (-18*s12^2*s13^5 - 18*s12*s13^6)*s23^3) +
           p1q^2*p2q^4*((-18*s12^2*s13^6 - 18*s12*s13^7)*s23^2 +
             (18*s12^2*s13^5 + 36*s12*s13^6)*s23^3 + (36*s12^2*s13^4 + 54*s12*
                s13^5)*s23^4) + p1q^3*p2q^3*((36*s12^2*s13^5 + 54*s12*s13^6)*
              s23^3 + 18*s12^2*s13^4*s23^4 + (-18*s12^2*s13^3 - 54*s12*s13^4)*
              s23^5) + p1q^5*p2q*(18*s12*s13^4*s23^5 + 18*s12*s13^3*s23^6) +
           p1q^4*p2q^2*((-18*s12^2*s13^4 - 54*s12*s13^5)*s23^4 +
             (-18*s12^2*s13^3 - 36*s12*s13^4)*s23^5 + 18*s12*s13^3*s23^6) +
           p3q^4*(p1q^2*((-18*s12^4*s13^4 - 18*s12^3*s13^5)*s23^2 +
               (-72*s12^4*s13^3 - 54*s12^3*s13^4)*s23^3) +
             p1q*p2q*((36*s12^5*s13^3 - 18*s12^4*s13^4 - 54*s12^3*s13^5)*
                s23^2 + (-18*s12^4*s13^3 - 18*s12^3*s13^4)*s23^3)) +
           p3q^3*(p1q*p2q^2*((18*s12^5*s13^3 - 90*s12^4*s13^4 - 54*s12^3*
                  s13^5 + 54*s12^2*s13^6)*s23^2 + (-36*s12^4*s13^3 +
                 36*s12^2*s13^5)*s23^3) + p1q^2*p2q*((-36*s12^4*s13^4 +
                 36*s12^2*s13^6)*s23^2 + (-126*s12^4*s13^3 - 18*s12^3*s13^4 +
                 36*s12^2*s13^5)*s23^3 + (54*s12^3*s13^3 + 36*s12^2*s13^4)*
                s23^4) + p1q^3*((54*s12^3*s13^4 + 36*s12^2*s13^5)*s23^3 +
               (108*s12^3*s13^3 + 54*s12^2*s13^4)*s23^4)) +
           p3q^2*(p1q*p2q^3*((-54*s12^4*s13^4 + 54*s12^3*s13^5 +
                 90*s12^2*s13^6 - 18*s12*s13^7)*s23^2 + (-18*s12^4*s13^3 +
                 54*s12^3*s13^4 + 54*s12^2*s13^5 - 18*s12*s13^6)*s23^3) +
             p1q^2*p2q^2*((-18*s12^4*s13^4 + 54*s12^3*s13^5 + 54*s12^2*
                  s13^6 - 18*s12*s13^7)*s23^2 + (-54*s12^4*s13^3 +
                 72*s12^3*s13^4 + 36*s12^2*s13^5 + 18*s12*s13^6)*s23^3 +
               (90*s12^3*s13^3 + 72*s12^2*s13^4 + 36*s12*s13^5)*s23^4) +
             p1q^4*((-54*s12^2*s13^4 - 18*s12*s13^5)*s23^4 +
               (-72*s12^2*s13^3 - 18*s12*s13^4)*s23^5) +
             p1q^3*p2q*((90*s12^3*s13^4 + 72*s12^2*s13^5 + 36*s12*s13^6)*
                s23^3 + (162*s12^3*s13^3 + 90*s12^2*s13^4 + 18*s12*s13^5)*
                s23^4 + (-54*s12^2*s13^3 - 18*s12*s13^4)*s23^5)) +
           p3q*(p1q*p2q^4*((54*s12^3*s13^5 + 18*s12^2*s13^6 - 36*s12*s13^7)*
                s23^2 + (36*s12^3*s13^4 - 36*s12*s13^6)*s23^3) +
             p1q^2*p2q^3*((36*s12^3*s13^5 - 36*s12*s13^7)*s23^2 +
               (36*s12^3*s13^4 + 18*s12^2*s13^5 + 54*s12*s13^6)*s23^3 +
               (36*s12^3*s13^3 + 72*s12^2*s13^4 + 90*s12*s13^5)*s23^4) +
             p1q^3*p2q^2*((36*s12^3*s13^4 + 72*s12^2*s13^5 + 90*s12*s13^6)*
                s23^3 + (54*s12^3*s13^3 + 54*s12^2*s13^4 + 18*s12*s13^5)*
                s23^4 + (-72*s12^2*s13^3 - 72*s12*s13^4)*s23^5) +
             p1q^5*(18*s12*s13^4*s23^5 + 18*s12*s13^3*s23^6) +
             p1q^4*p2q*((-72*s12^2*s13^4 - 72*s12*s13^5)*s23^4 +
               (-90*s12^2*s13^3 - 54*s12*s13^4)*s23^5 + 18*s12*s13^3*
                s23^6))) + ((p3q^5*(-162*s12^4*s13^3 - 162*s12^3*s13^4 +
              (-90*s12^6 - 27*s12^5*s13 - 117*s12^4*s13^2 - 342*s12^3*s13^3)*
               s23 + (-90*s12^5 + 63*s12^4*s13 - 180*s12^3*s13^2)*s23^2) +
            p2q^5*(-162*s12^2*s13^5 - 162*s12*s13^6 + (90*s12^3*s13^3 +
                27*s12^2*s13^4 - 207*s12*s13^5 + 18*s13^6)*s23 +
              (90*s12^2*s13^3 - 63*s12*s13^4 + 18*s13^5)*s23^2) +
            p1q*p2q^4*(-162*s12^2*s13^5 - 162*s12*s13^6 + (324*s12^2*s13^4 +
                162*s12*s13^5)*s23 + (-100*s12^3*s13^2 - 147*s12^2*s13^3 +
                562*s12*s13^4 + 285*s13^5)*s23^2 + (-100*s12^2*s13^2 -
                47*s12*s13^3 + 285*s13^4)*s23^3) + p1q^2*p2q^3*
             ((234*s12^3*s13^3 + 1026*s12^2*s13^4 + 855*s12*s13^5 + 63*s13^6)*
               s23 + (-10*s12^3*s13^2 + 258*s12^2*s13^3 + 1453*s12*s13^4 +
                690*s13^5)*s23^2 + (-70*s12^3*s13 + 203*s12^2*s13^2 -
                307*s12*s13^3 + 3*s13^4)*s23^3 + (-70*s12^2*s13 +
                283*s12*s13^2 - 624*s13^3)*s23^4) +
            p1q^5*((-90*s12^3 - 27*s12^2*s13 + 63*s12*s13^2)*s23^4 +
              (-90*s12^2 + 63*s12*s13)*s23^5) + p1q^3*p2q^2*
             ((72*s12^3*s13^2 - 432*s12^2*s13^3 - 486*s12*s13^4 + 18*s13^5)*
               s23^2 + (20*s12^3*s13 + 294*s12^2*s13^2 - 1268*s12*s13^3 -
                948*s13^4)*s23^3 + (80*s12^3 - 73*s12^2*s13 + 350*s12*s13^2 -
                645*s13^3)*s23^4 + (80*s12^2 - 173*s12*s13 + 321*s13^2)*s23^
                5) + p1q^4*p2q*((90*s12^3*s13 + 45*s12^2*s13^2 -
                126*s12*s13^3 - 81*s13^4)*s23^3 + (-10*s12^3 - 30*s12^2*s13 +
                184*s12*s13^2 + 258*s13^3)*s23^4 + (-10*s12^2 - 110*s12*s13 +
                339*s13^2)*s23^5) + p3q^4*(p2q*(-486*s12^4*s13^3 -
                162*s12^3*s13^4 + 324*s12^2*s13^5 + (-180*s12^6 + 216*s12^5*
                   s13 - 153*s12^4*s13^2 - 657*s12^3*s13^3 + 702*s12^2*s13^4)*
                 s23 + (-180*s12^5 + 396*s12^4*s13 - 549*s12^3*s13^2 +
                  378*s12^2*s13^3)*s23^2) + p1q*(-162*s12^4*s13^3 -
                162*s12^3*s13^4 + (162*s12^3*s13^3 + 324*s12^2*s13^4)*s23 +
                (260*s12^5 - 39*s12^4*s13 + 382*s12^3*s13^2 + 1005*s12^2*
                   s13^3)*s23^2 + (260*s12^4 - 299*s12^3*s13 + 681*s12^2*
                   s13^2)*s23^3)) + p3q^3*(p2q^2*(-486*s12^4*s13^3 +
                486*s12^3*s13^4 + 810*s12^2*s13^5 - 162*s12*s13^6 +
                (-90*s12^6 + 513*s12^5*s13 - 225*s12^4*s13^2 - 369*s12^3*
                   s13^3 + 1701*s12^2*s13^4 - 378*s12*s13^5)*s23 +
                (-90*s12^5 + 603*s12^4*s13 - 828*s12^3*s13^2 + 945*s12^2*
                   s13^3 - 216*s12*s13^4)*s23^2) + p1q*p2q*(-324*s12^4*
                 s13^3 + 324*s12^2*s13^5 + (486*s12^3*s13^3 + 1296*s12^2*
                   s13^4 + 162*s12*s13^5)*s23 + (520*s12^5 - 238*s12^4*s13 +
                  950*s12^3*s13^2 + 2200*s12^2*s13^3 - 156*s12*s13^4)*s23^2 +
                (520*s12^4 - 758*s12^3*s13 + 1708*s12^2*s13^2 - 318*s12*
                   s13^3)*s23^3) + p1q^2*((90*s12^6 + 27*s12^5*s13 +
                  117*s12^4*s13^2 + 585*s12^3*s13^3 + 486*s12^2*s13^4 +
                  81*s12*s13^5)*s23 + (80*s12^5 - 183*s12^4*s13 + 373*s12^3*
                   s13^2 + 528*s12^2*s13^3 - 99*s12*s13^4)*s23^2 +
                (-260*s12^4 + 49*s12^3*s13 - 110*s12^2*s13^2 - 1002*s12*
                   s13^3)*s23^3 + (-250*s12^3 + 409*s12^2*s13 - 822*s12*
                   s13^2)*s23^4)) + p3q^2*(p2q^3*(-162*s12^4*s13^3 +
                810*s12^3*s13^4 + 486*s12^2*s13^5 - 486*s12*s13^6 +
                (270*s12^5*s13 - 459*s12^4*s13^2 - 45*s12^3*s13^3 +
                  1323*s12^2*s13^4 - 963*s12*s13^5 + 18*s13^6)*s23 +
                (270*s12^4*s13 - 729*s12^3*s13^2 + 846*s12^2*s13^3 -
                  495*s12*s13^4 + 18*s13^5)*s23^2) + p1q*p2q^2*(-162*s12^4*
                 s13^3 + 486*s12^3*s13^4 + 486*s12^2*s13^5 - 162*s12*s13^6 +
                (648*s12^3*s13^3 + 2430*s12^2*s13^4 + 972*s12*s13^5 +
                  162*s13^6)*s23 + (260*s12^5 - 359*s12^4*s13 + 654*s12^3*
                   s13^2 + 1400*s12^2*s13^3 + 574*s12*s13^4 + 447*s13^5)*
                 s23^2 + (260*s12^4 - 619*s12^3*s13 + 1273*s12^2*s13^2 -
                  683*s12*s13^3 + 285*s13^4)*s23^3) + p1q^2*p2q*(
                (-270*s12^5*s13 - 81*s12^4*s13^2 + 459*s12^3*s13^3 +
                  837*s12^2*s13^4 + 810*s12*s13^5 + 243*s13^6)*s23 +
                (-10*s12^5 - 370*s12^4*s13 + 604*s12^3*s13^2 - 83*s12^2*
                   s13^3 - 147*s12*s13^4 + 387*s13^5)*s23^2 +
                (-510*s12^4 + 158*s12^3*s13 - 108*s12^2*s13^2 - 2843*s12*
                   s13^3 - 480*s13^4)*s23^3 + (-500*s12^3 + 748*s12^2*s13 -
                  1361*s12*s13^2 - 624*s13^3)*s23^4) + p1q^3*(
                (-270*s12^5 - 81*s12^4*s13 - 189*s12^3*s13^2 - 738*s12^2*
                   s13^3 - 459*s12*s13^4 - 99*s13^5)*s23^2 +
                (-250*s12^4 + 429*s12^3*s13 - 800*s12^2*s13^2 - 1020*s12*
                   s13^3 - 117*s13^4)*s23^3 + (100*s12^3 + 127*s12^2*s13 -
                  494*s12*s13^2 + 303*s13^3)*s23^4 + (80*s12^2 - 173*s12*
                   s13 + 321*s13^2)*s23^5)) + p3q*(p2q^4*(324*s12^3*s13^4 -
                162*s12^2*s13^5 - 486*s12*s13^6 + (-270*s12^4*s13^2 +
                  99*s12^3*s13^3 + 351*s12^2*s13^4 - 792*s12*s13^5 +
                  36*s13^6)*s23 + (-270*s12^3*s13^2 + 369*s12^2*s13^3 -
                  342*s12*s13^4 + 36*s13^5)*s23^2) + p1q*p2q^3*(324*s12^3*
                 s13^4 - 324*s12*s13^6 + (324*s12^3*s13^3 + 1782*s12^2*
                   s13^4 + 972*s12*s13^5 + 162*s13^6)*s23 +
                (-160*s12^4*s13 - 14*s12^3*s13^2 + 58*s12^2*s13^3 +
                  1292*s12*s13^4 + 732*s13^5)*s23^2 + (-160*s12^3*s13 +
                  146*s12^2*s13^2 - 412*s12*s13^3 + 570*s13^4)*s23^3) +
              p1q^2*p2q^2*((270*s12^4*s13^2 + 648*s12^3*s13^3 + 1809*s12^2*
                   s13^4 + 1755*s12*s13^5 + 324*s13^6)*s23 +
                (20*s12^4*s13 + 482*s12^3*s13^2 - 236*s12^2*s13^3 +
                  1234*s12*s13^4 + 933*s13^5)*s23^2 + (-250*s12^4 +
                  39*s12^3*s13 + 205*s12^2*s13^2 - 2310*s12*s13^3 -
                  639*s13^4)*s23^3 + (-250*s12^3 + 269*s12^2*s13 -
                  256*s12*s13^2 - 1248*s13^3)*s23^4) + p1q^4*(
                (270*s12^4 + 81*s12^3*s13 + 9*s12^2*s13^2 + 297*s12*s13^3 +
                  99*s13^4)*s23^3 + (260*s12^3 - 309*s12^2*s13 + 427*s12*
                   s13^2 + 438*s13^3)*s23^4 + (-10*s12^2 - 110*s12*s13 +
                  339*s13^2)*s23^5) + p1q^3*p2q*((180*s12^4*s13 +
                  18*s12^3*s13^2 - 801*s12^2*s13^3 - 918*s12*s13^4 -
                  279*s13^5)*s23^2 + (20*s12^4 + 440*s12^3*s13 - 362*s12^2*
                   s13^2 - 1901*s12*s13^3 - 1101*s13^4)*s23^3 +
                (180*s12^3 + 54*s12^2*s13 - 144*s12*s13^2 - 180*s13^3)*
                 s23^4 + (160*s12^2 - 346*s12*s13 + 642*s13^2)*s23^5)))*
           Log((s13 + s23)/(s12 + s13 + s23)))/(18*p1q*p3q^4*s12^3*s13^3*
            s23^2 + 18*p1q*p2q^4*s12*s13^5*s23^2 + 18*p1q^4*p2q*s12*s13^3*
            s23^4 + p1q^2*p2q^3*(18*s12*s13^5*s23^2 - 36*s12*s13^4*s23^3) +
           p1q^3*p2q^2*(-36*s12*s13^4*s23^3 + 18*s12*s13^3*s23^4) +
           p3q^3*(p1q*p2q*(36*s12^3*s13^3 - 36*s12^2*s13^4)*s23^2 +
             p1q^2*(18*s12^3*s13^3*s23^2 - 36*s12^2*s13^3*s23^3)) +
           p3q^2*(p1q*p2q^2*(18*s12^3*s13^3 - 72*s12^2*s13^4 + 18*s12*s13^5)*
              s23^2 + p1q^2*p2q*((18*s12^3*s13^3 - 36*s12^2*s13^4)*s23^2 +
               (-72*s12^2*s13^3 - 36*s12*s13^4)*s23^3) +
             p1q^3*(-36*s12^2*s13^3*s23^3 + 18*s12*s13^3*s23^4)) +
           p3q*(p1q*p2q^3*(-36*s12^2*s13^4 + 36*s12*s13^5)*s23^2 +
             18*p1q^4*s12*s13^3*s23^4 + p1q^2*p2q^2*((-36*s12^2*s13^4 +
                 18*s12*s13^5)*s23^2 + (-36*s12^2*s13^3 - 72*s12*s13^4)*
                s23^3) + p1q^3*p2q*((-36*s12^2*s13^3 - 36*s12*s13^4)*s23^3 +
               36*s12*s13^3*s23^4)))) +
       ((p3q^5*(-18*s12^4*s13 - 18*s12^3*s13^2 - 18*s12^3*s13*s23) +
          p2q^5*(-18*s12^2*s13^3 - 18*s12*s13^4 + (-36*s12*s13^3 - 18*s13^4)*
             s23 - 18*s13^3*s23^2) + p1q*p2q^4*(-18*s12^2*s13^3 -
            18*s12*s13^4 + (36*s12^2*s13^2 + 18*s12*s13^3)*s23 +
            (70*s12*s13^2 + 34*s13^3)*s23^2 + 34*s13^2*s23^3) +
          p1q^2*p2q^3*((36*s12^3*s13 + 117*s12^2*s13^2 + 108*s12*s13^3 +
              27*s13^4)*s23 + (56*s12^2*s13 + 137*s12*s13^2 + 63*s13^3)*
             s23^2 + (6*s12*s13 + 22*s13^2)*s23^3 - 14*s13*s23^4) +
          p1q^4*p2q*((-2*s12^2 + 5*s12*s13 + 7*s13^2)*s23^3 +
            (-6*s12 + 3*s13)*s23^4 - 4*s23^5) + p1q^3*p2q^2*
           ((2*s12^3 - 39*s12^2*s13 - 75*s12*s13^2 - 34*s13^3)*s23^2 +
            (4*s12^2 - 71*s12*s13 - 66*s13^2)*s23^3 - 34*s13*s23^4 -
            2*s23^5) + p3q^4*(p2q*(-54*s12^4*s13 - 18*s12^3*s13^2 +
              36*s12^2*s13^3 + (-72*s12^3*s13 + 18*s12^2*s13^2)*s23 -
              18*s12^2*s13*s23^2) + p1q*(-18*s12^4*s13 - 18*s12^3*s13^2 +
              (18*s12^3*s13 + 36*s12^2*s13^2)*s23 + (-2*s12^3 + 34*s12^2*s13)*
               s23^2 - 2*s12^2*s23^3)) +
          p3q^3*(p2q^2*(-54*s12^4*s13 + 54*s12^3*s13^2 + 90*s12^2*s13^3 -
              18*s12*s13^4 + (-90*s12^3*s13 + 108*s12^2*s13^2 + 18*s12*s13^3)*
               s23 + (-36*s12^2*s13 + 36*s12*s13^2)*s23^2) +
            p1q*p2q*(-36*s12^4*s13 + 36*s12^2*s13^3 + (54*s12^3*s13 +
                144*s12^2*s13^2 + 18*s12*s13^3)*s23 + (-4*s12^3 +
                126*s12^2*s13 + 58*s12*s13^2)*s23^2 + (-4*s12^2 + 40*s12*s13)*
               s23^3) + p1q^2*((45*s12^3*s13 + 54*s12^2*s13^2 + 9*s12*s13^3)*
               s23 + (29*s12^2*s13 - 7*s12*s13^2)*s23^2 + (4*s12^2 -
                12*s12*s13)*s23^3 + 4*s12*s23^4)) +
          p3q*(p2q^4*(36*s12^3*s13^2 - 18*s12^2*s13^3 - 54*s12*s13^4 +
              (72*s12^2*s13^2 - 54*s12*s13^3 - 36*s13^4)*s23 +
              (36*s12*s13^2 - 36*s13^3)*s23^2) + p1q*p2q^3*(36*s12^3*s13^2 -
              36*s12*s13^4 + (36*s12^3*s13 + 198*s12^2*s13^2 + 108*s12*
                 s13^3 + 18*s13^4)*s23 + (76*s12^2*s13 + 234*s12*s13^2 +
                86*s13^3)*s23^2 + (40*s12*s13 + 68*s13^2)*s23^3) +
            p1q^2*p2q^2*((63*s12^3*s13 + 162*s12^2*s13^2 + 135*s12*s13^3 +
                36*s13^4)*s23 + (2*s12^3 + 75*s12^2*s13 + 147*s12*s13^2 +
                74*s13^3)*s23^2 + (6*s12^2 - 14*s12*s13 + 10*s13^2)*s23^3 +
              (4*s12 - 28*s13)*s23^4) + p1q^3*p2q*((4*s12^3 - 51*s12^2*s13 -
                78*s12*s13^2 - 23*s13^3)*s23^2 + (10*s12^2 - 61*s12*s13 -
                35*s13^2)*s23^3 + (2*s12 - 16*s13)*s23^4 - 4*s23^5) +
            p1q^4*((-2*s12^2 + 5*s12*s13 + 7*s13^2)*s23^3 + (-6*s12 + 3*s13)*
               s23^4 - 4*s23^5)) + p3q^2*(p2q^3*(-18*s12^4*s13 +
              90*s12^3*s13^2 + 54*s12^2*s13^3 - 54*s12*s13^4 +
              (-36*s12^3*s13 + 162*s12^2*s13^2 - 18*s13^4)*s23 +
              (-18*s12^2*s13 + 72*s12*s13^2 - 18*s13^3)*s23^2) +
            p1q*p2q^2*(-18*s12^4*s13 + 54*s12^3*s13^2 + 54*s12^2*s13^3 -
              18*s12*s13^4 + (72*s12^3*s13 + 270*s12^2*s13^2 + 108*s12*
                 s13^3 + 18*s13^4)*s23 + (-2*s12^3 + 168*s12^2*s13 +
                222*s12*s13^2 + 52*s13^3)*s23^2 + (-2*s12^2 + 80*s12*s13 +
                34*s13^2)*s23^3) + p1q^2*p2q*((90*s12^3*s13 + 153*s12^2*
                 s13^2 + 90*s12*s13^3 + 27*s13^4)*s23 + (2*s12^3 +
                84*s12^2*s13 + 75*s12*s13^2 + 47*s13^3)*s23^2 +
              (10*s12^2 - 14*s12*s13 + 6*s13^2)*s23^3 + (8*s12 - 14*s13)*s23^
                4) + p1q^3*((2*s12^3 - 30*s12^2*s13 - 39*s12*s13^2 - 7*s13^3)*
               s23^2 + (6*s12^2 - 26*s12*s13 - 5*s13^2)*s23^3 + 2*s12*s23^4 -
              2*s23^5)))*PolyLog(2, p1q/(p1q + p2q)))/
        (2*p1q*p3q^4*s12^3*s13*s23^2 + 2*p1q*p2q^4*s12*s13^3*s23^2 +
         2*p1q^4*p2q*s12*s13*s23^4 + p1q^2*p2q^3*(2*s12*s13^3*s23^2 -
           4*s12*s13^2*s23^3) + p1q^3*p2q^2*(-4*s12*s13^2*s23^3 +
           2*s12*s13*s23^4) + p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*
            s23^2 + p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
         p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*s23^2 +
           p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
             (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) +
           p1q^3*(-4*s12^2*s13*s23^3 + 2*s12*s13*s23^4)) +
         p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
           2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*
            ((-4*s12^2*s13^2 + 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*
                s13^2)*s23^3) + p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*
              s23^3 + 4*s12*s13*s23^4))) +
       ((p2q^5*(-18*s12^2*s13^3 - 18*s12*s13^4 - 18*s12*s13^3*s23) +
          p3q^5*(-18*s12^4*s13 - 18*s12^3*s13^2 + (-18*s12^4 - 36*s12^3*s13)*
             s23 - 18*s12^3*s23^2) + p1q*p2q^4*(-18*s12^2*s13^3 -
            18*s12*s13^4 + (36*s12^2*s13^2 + 18*s12*s13^3)*s23 +
            (34*s12*s13^2 - 2*s13^3)*s23^2 - 2*s13^2*s23^3) +
          p1q^2*p2q^3*((9*s12^3*s13 + 54*s12^2*s13^2 + 45*s12*s13^3)*s23 +
            (-7*s12^2*s13 + 29*s12*s13^2)*s23^2 + (-12*s12*s13 + 4*s13^2)*
             s23^3 + 4*s13*s23^4) + p1q^4*p2q*
           ((7*s12^2 + 5*s12*s13 - 2*s13^2)*s23^3 + (3*s12 - 6*s13)*s23^4 -
            4*s23^5) + p1q^3*p2q^2*((-7*s12^3 - 39*s12^2*s13 - 30*s12*s13^2 +
              2*s13^3)*s23^2 + (-5*s12^2 - 26*s12*s13 + 6*s13^2)*s23^3 +
            2*s13*s23^4 - 2*s23^5) + p3q^4*
           (p2q*(-54*s12^4*s13 - 18*s12^3*s13^2 + 36*s12^2*s13^3 +
              (-36*s12^4 - 54*s12^3*s13 + 72*s12^2*s13^2)*s23 +
              (-36*s12^3 + 36*s12^2*s13)*s23^2) + p1q*(-18*s12^4*s13 -
              18*s12^3*s13^2 + (18*s12^3*s13 + 36*s12^2*s13^2)*s23 +
              (34*s12^3 + 70*s12^2*s13)*s23^2 + 34*s12^2*s23^3)) +
          p3q^3*(p2q^2*(-54*s12^4*s13 + 54*s12^3*s13^2 + 90*s12^2*s13^3 -
              18*s12*s13^4 + (-18*s12^4 + 162*s12^2*s13^2 - 36*s12*s13^3)*
               s23 + (-18*s12^3 + 72*s12^2*s13 - 18*s12*s13^2)*s23^2) +
            p1q*p2q*(-36*s12^4*s13 + 36*s12^2*s13^3 + (18*s12^4 +
                108*s12^3*s13 + 198*s12^2*s13^2 + 36*s12*s13^3)*s23 +
              (86*s12^3 + 234*s12^2*s13 + 76*s12*s13^2)*s23^2 +
              (68*s12^2 + 40*s12*s13)*s23^3) +
            p1q^2*((27*s12^4 + 108*s12^3*s13 + 117*s12^2*s13^2 +
                36*s12*s13^3)*s23 + (63*s12^3 + 137*s12^2*s13 + 56*s12*s13^2)*
               s23^2 + (22*s12^2 + 6*s12*s13)*s23^3 - 14*s12*s23^4)) +
          p3q*(p2q^4*(36*s12^3*s13^2 - 18*s12^2*s13^3 - 54*s12*s13^4 +
              (18*s12^2*s13^2 - 72*s12*s13^3)*s23 - 18*s12*s13^2*s23^2) +
            p1q*p2q^3*(36*s12^3*s13^2 - 36*s12*s13^4 + (18*s12^3*s13 +
                144*s12^2*s13^2 + 54*s12*s13^3)*s23 + (58*s12^2*s13 +
                126*s12*s13^2 - 4*s13^3)*s23^2 + (40*s12*s13 - 4*s13^2)*s23^
                3) + p1q^2*p2q^2*((27*s12^4 + 90*s12^3*s13 + 153*s12^2*
                 s13^2 + 90*s12*s13^3)*s23 + (47*s12^3 + 75*s12^2*s13 +
                84*s12*s13^2 + 2*s13^3)*s23^2 + (6*s12^2 - 14*s12*s13 +
                10*s13^2)*s23^3 + (-14*s12 + 8*s13)*s23^4) +
            p1q^4*((7*s12^2 + 5*s12*s13 - 2*s13^2)*s23^3 + (3*s12 - 6*s13)*
               s23^4 - 4*s23^5) + p1q^3*p2q*((-23*s12^3 - 78*s12^2*s13 -
                51*s12*s13^2 + 4*s13^3)*s23^2 + (-35*s12^2 - 61*s12*s13 +
                10*s13^2)*s23^3 + (-16*s12 + 2*s13)*s23^4 - 4*s23^5)) +
          p3q^2*(p2q^3*(-18*s12^4*s13 + 90*s12^3*s13^2 + 54*s12^2*s13^3 -
              54*s12*s13^4 + (18*s12^3*s13 + 108*s12^2*s13^2 - 90*s12*s13^3)*
               s23 + (36*s12^2*s13 - 36*s12*s13^2)*s23^2) +
            p1q*p2q^2*(-18*s12^4*s13 + 54*s12^3*s13^2 + 54*s12^2*s13^3 -
              18*s12*s13^4 + (18*s12^4 + 108*s12^3*s13 + 270*s12^2*s13^2 +
                72*s12*s13^3)*s23 + (52*s12^3 + 222*s12^2*s13 +
                168*s12*s13^2 - 2*s13^3)*s23^2 + (34*s12^2 + 80*s12*s13 -
                2*s13^2)*s23^3) + p1q^2*p2q*((36*s12^4 + 135*s12^3*s13 +
                162*s12^2*s13^2 + 63*s12*s13^3)*s23 + (74*s12^3 +
                147*s12^2*s13 + 75*s12*s13^2 + 2*s13^3)*s23^2 +
              (10*s12^2 - 14*s12*s13 + 6*s13^2)*s23^3 + (-28*s12 + 4*s13)*s23^
                4) + p1q^3*((-34*s12^3 - 75*s12^2*s13 - 39*s12*s13^2 +
                2*s13^3)*s23^2 + (-66*s12^2 - 71*s12*s13 + 4*s13^2)*s23^3 -
              34*s12*s23^4 - 2*s23^5)))*PolyLog(2, p1q/(p1q + p3q)))/
        (2*p1q*p3q^4*s12^3*s13*s23^2 + 2*p1q*p2q^4*s12*s13^3*s23^2 +
         2*p1q^4*p2q*s12*s13*s23^4 + p1q^2*p2q^3*(2*s12*s13^3*s23^2 -
           4*s12*s13^2*s23^3) + p1q^3*p2q^2*(-4*s12*s13^2*s23^3 +
           2*s12*s13*s23^4) + p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*
            s23^2 + p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
         p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*s23^2 +
           p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
             (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) +
           p1q^3*(-4*s12^2*s13*s23^3 + 2*s12*s13*s23^4)) +
         p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
           2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*
            ((-4*s12^2*s13^2 + 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*
                s13^2)*s23^3) + p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*
              s23^3 + 4*s12*s13*s23^4))) +
       ((p3q^5*(-18*s12^4 - 18*s12^3*s13 - 18*s12^3*s23) +
          p2q^5*(18*s12*s13^3 + 18*s13^4 + 18*s13^3*s23) +
          p1q*p2q^4*((-36*s12*s13^2 - 36*s13^3)*s23 - 36*s13^2*s23^2) +
          p1q^4*p2q*((9*s12^2 - 9*s13^2)*s23^2 + (9*s12 - 9*s13)*s23^3) +
          p1q^2*p2q^3*(-27*s12^3*s13 - 63*s12^2*s13^2 - 63*s12*s13^3 -
            27*s13^4 + (-63*s12^2*s13 - 108*s12*s13^2 - 63*s13^3)*s23 +
            (-18*s12*s13 - 18*s13^2)*s23^2 + 18*s13*s23^3) +
          p1q^3*p2q^2*((-9*s12^3 + 45*s12*s13^2 + 36*s13^3)*s23 +
            (-9*s12^2 + 45*s12*s13 + 72*s13^2)*s23^2 + 36*s13*s23^3) +
          p3q^4*(p2q*(-36*s12^4 + 18*s12^3*s13 + 54*s12^2*s13^2 +
              (-36*s12^3 + 54*s12^2*s13)*s23) +
            p1q*((36*s12^3 + 36*s12^2*s13)*s23 + 36*s12^2*s23^2)) +
          p3q^3*(p2q^2*(-18*s12^4 + 90*s12^3*s13 + 54*s12^2*s13^2 -
              54*s12*s13^3 + (-18*s12^3 + 108*s12^2*s13 - 54*s12*s13^2)*
               s23) + p1q*p2q*(18*s12^4 + 54*s12^3*s13 + 54*s12^2*s13^2 +
              18*s12*s13^3 + (90*s12^3 + 108*s12^2*s13 + 18*s12*s13^2)*s23 +
              72*s12^2*s23^2) + p1q^2*(27*s12^4 + 63*s12^3*s13 +
              63*s12^2*s13^2 + 27*s12*s13^3 + (63*s12^3 + 108*s12^2*s13 +
                63*s12*s13^2)*s23 + (18*s12^2 + 18*s12*s13)*s23^2 -
              18*s12*s23^3)) + p3q^2*(p2q^3*(54*s12^3*s13 - 54*s12^2*s13^2 -
              90*s12*s13^3 + 18*s13^4 + (54*s12^2*s13 - 108*s12*s13^2 +
                18*s13^3)*s23) + p1q*p2q^2*(18*s12^4 + 36*s12^3*s13 -
              36*s12*s13^3 - 18*s13^4 + (54*s12^3 + 54*s12^2*s13 -
                54*s12*s13^2 - 54*s13^3)*s23 + (36*s12^2 - 36*s13^2)*s23^2) +
            p1q^3*((-36*s12^3 - 45*s12^2*s13 + 9*s13^3)*s23 +
              (-72*s12^2 - 45*s12*s13 + 9*s13^2)*s23^2 - 36*s12*s23^3) +
            p1q^2*p2q*(36*s12^4 + 45*s12^3*s13 + 9*s12^2*s13^2 -
              27*s12*s13^3 - 27*s13^4 + (72*s12^3 + 63*s12^2*s13 - 45*s13^3)*
               s23 + (-36*s12 + 18*s13)*s23^3)) +
          p3q*(p2q^4*(-54*s12^2*s13^2 - 18*s12*s13^3 + 36*s13^4 +
              (-54*s12*s13^2 + 36*s13^3)*s23) + p1q*p2q^3*(-18*s12^3*s13 -
              54*s12^2*s13^2 - 54*s12*s13^3 - 18*s13^4 + (-18*s12^2*s13 -
                108*s12*s13^2 - 90*s13^3)*s23 - 72*s13^2*s23^2) +
            p1q^4*((9*s12^2 - 9*s13^2)*s23^2 + (9*s12 - 9*s13)*s23^3) +
            p1q^3*p2q*((-27*s12^3 - 27*s12^2*s13 + 27*s12*s13^2 + 27*s13^3)*
               s23 + (-45*s12^2 + 45*s13^2)*s23^2 + (-18*s12 + 18*s13)*s23^
                3) + p1q^2*p2q^2*(27*s12^4 + 27*s12^3*s13 - 9*s12^2*s13^2 -
              45*s12*s13^3 - 36*s13^4 + (45*s12^3 - 63*s12*s13^2 - 72*s13^3)*
               s23 + (-18*s12 + 36*s13)*s23^3)))*PolyLog(2, p2q/(p2q + p3q)))/
        (2*p1q*p3q^4*s12^3*s13*s23 + 2*p1q*p2q^4*s12*s13^3*s23 +
         2*p1q^4*p2q*s12*s13*s23^3 + p1q^2*p2q^3*(2*s12*s13^3*s23 -
           4*s12*s13^2*s23^2) + p1q^3*p2q^2*(-4*s12*s13^2*s23^2 +
           2*s12*s13*s23^3) + p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*
            s23 + p1q^2*(2*s12^3*s13*s23 - 4*s12^2*s13*s23^2)) +
         p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*s23 +
           p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23 +
             (-8*s12^2*s13 - 4*s12*s13^2)*s23^2) +
           p1q^3*(-4*s12^2*s13*s23^2 + 2*s12*s13*s23^3)) +
         p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23 +
           2*p1q^4*s12*s13*s23^3 + p1q^2*p2q^2*
            ((-4*s12^2*s13^2 + 2*s12*s13^3)*s23 + (-4*s12^2*s13 - 8*s12*
                s13^2)*s23^2) + p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*
              s23^2 + 4*s12*s13*s23^3))) +
       ((p3q^5*(-162*s12^4*s13^3 - 162*s12^3*s13^4 +
            (-90*s12^6 - 27*s12^5*s13 - 117*s12^4*s13^2 - 342*s12^3*s13^3)*
             s23 + (-90*s12^5 + 63*s12^4*s13 - 180*s12^3*s13^2)*s23^2) +
          p2q^5*(-162*s12^2*s13^5 - 162*s12*s13^6 +
            (90*s12^3*s13^3 + 27*s12^2*s13^4 - 207*s12*s13^5 + 18*s13^6)*
             s23 + (90*s12^2*s13^3 - 63*s12*s13^4 + 18*s13^5)*s23^2) +
          p1q*p2q^4*(-162*s12^2*s13^5 - 162*s12*s13^6 +
            (324*s12^2*s13^4 + 162*s12*s13^5)*s23 +
            (-100*s12^3*s13^2 - 147*s12^2*s13^3 + 562*s12*s13^4 + 285*s13^5)*
             s23^2 + (-100*s12^2*s13^2 - 47*s12*s13^3 + 285*s13^4)*s23^3) +
          p1q^2*p2q^3*((234*s12^3*s13^3 + 1026*s12^2*s13^4 + 855*s12*s13^5 +
              63*s13^6)*s23 + (-10*s12^3*s13^2 + 258*s12^2*s13^3 +
              1453*s12*s13^4 + 690*s13^5)*s23^2 +
            (-70*s12^3*s13 + 203*s12^2*s13^2 - 307*s12*s13^3 + 3*s13^4)*
             s23^3 + (-70*s12^2*s13 + 283*s12*s13^2 - 624*s13^3)*s23^4) +
          p1q^5*((-90*s12^3 - 27*s12^2*s13 + 63*s12*s13^2)*s23^4 +
            (-90*s12^2 + 63*s12*s13)*s23^5) + p1q^3*p2q^2*
           ((72*s12^3*s13^2 - 432*s12^2*s13^3 - 486*s12*s13^4 + 18*s13^5)*
             s23^2 + (20*s12^3*s13 + 294*s12^2*s13^2 - 1268*s12*s13^3 -
              948*s13^4)*s23^3 + (80*s12^3 - 73*s12^2*s13 + 350*s12*s13^2 -
              645*s13^3)*s23^4 + (80*s12^2 - 173*s12*s13 + 321*s13^2)*
             s23^5) + p1q^4*p2q*((90*s12^3*s13 + 45*s12^2*s13^2 -
              126*s12*s13^3 - 81*s13^4)*s23^3 + (-10*s12^3 - 30*s12^2*s13 +
              184*s12*s13^2 + 258*s13^3)*s23^4 + (-10*s12^2 - 110*s12*s13 +
              339*s13^2)*s23^5) + p3q^4*(p2q*(-486*s12^4*s13^3 -
              162*s12^3*s13^4 + 324*s12^2*s13^5 + (-180*s12^6 + 216*s12^5*
                 s13 - 153*s12^4*s13^2 - 657*s12^3*s13^3 + 702*s12^2*s13^4)*
               s23 + (-180*s12^5 + 396*s12^4*s13 - 549*s12^3*s13^2 +
                378*s12^2*s13^3)*s23^2) + p1q*(-162*s12^4*s13^3 -
              162*s12^3*s13^4 + (162*s12^3*s13^3 + 324*s12^2*s13^4)*s23 +
              (260*s12^5 - 39*s12^4*s13 + 382*s12^3*s13^2 + 1005*s12^2*s13^3)*
               s23^2 + (260*s12^4 - 299*s12^3*s13 + 681*s12^2*s13^2)*s23^
                3)) + p3q^3*(p2q^2*(-486*s12^4*s13^3 + 486*s12^3*s13^4 +
              810*s12^2*s13^5 - 162*s12*s13^6 + (-90*s12^6 + 513*s12^5*s13 -
                225*s12^4*s13^2 - 369*s12^3*s13^3 + 1701*s12^2*s13^4 -
                378*s12*s13^5)*s23 + (-90*s12^5 + 603*s12^4*s13 -
                828*s12^3*s13^2 + 945*s12^2*s13^3 - 216*s12*s13^4)*s23^2) +
            p1q*p2q*(-324*s12^4*s13^3 + 324*s12^2*s13^5 + (486*s12^3*s13^3 +
                1296*s12^2*s13^4 + 162*s12*s13^5)*s23 + (520*s12^5 -
                238*s12^4*s13 + 950*s12^3*s13^2 + 2200*s12^2*s13^3 -
                156*s12*s13^4)*s23^2 + (520*s12^4 - 758*s12^3*s13 +
                1708*s12^2*s13^2 - 318*s12*s13^3)*s23^3) +
            p1q^2*((90*s12^6 + 27*s12^5*s13 + 117*s12^4*s13^2 + 585*s12^3*
                 s13^3 + 486*s12^2*s13^4 + 81*s12*s13^5)*s23 +
              (80*s12^5 - 183*s12^4*s13 + 373*s12^3*s13^2 + 528*s12^2*s13^3 -
                99*s12*s13^4)*s23^2 + (-260*s12^4 + 49*s12^3*s13 -
                110*s12^2*s13^2 - 1002*s12*s13^3)*s23^3 + (-250*s12^3 +
                409*s12^2*s13 - 822*s12*s13^2)*s23^4)) +
          p3q^2*(p2q^3*(-162*s12^4*s13^3 + 810*s12^3*s13^4 + 486*s12^2*s13^
                5 - 486*s12*s13^6 + (270*s12^5*s13 - 459*s12^4*s13^2 -
                45*s12^3*s13^3 + 1323*s12^2*s13^4 - 963*s12*s13^5 + 18*s13^6)*
               s23 + (270*s12^4*s13 - 729*s12^3*s13^2 + 846*s12^2*s13^3 -
                495*s12*s13^4 + 18*s13^5)*s23^2) + p1q*p2q^2*
             (-162*s12^4*s13^3 + 486*s12^3*s13^4 + 486*s12^2*s13^5 -
              162*s12*s13^6 + (648*s12^3*s13^3 + 2430*s12^2*s13^4 +
                972*s12*s13^5 + 162*s13^6)*s23 + (260*s12^5 - 359*s12^4*s13 +
                654*s12^3*s13^2 + 1400*s12^2*s13^3 + 574*s12*s13^4 +
                447*s13^5)*s23^2 + (260*s12^4 - 619*s12^3*s13 + 1273*s12^2*
                 s13^2 - 683*s12*s13^3 + 285*s13^4)*s23^3) +
            p1q^2*p2q*((-270*s12^5*s13 - 81*s12^4*s13^2 + 459*s12^3*s13^3 +
                837*s12^2*s13^4 + 810*s12*s13^5 + 243*s13^6)*s23 +
              (-10*s12^5 - 370*s12^4*s13 + 604*s12^3*s13^2 - 83*s12^2*s13^3 -
                147*s12*s13^4 + 387*s13^5)*s23^2 + (-510*s12^4 +
                158*s12^3*s13 - 108*s12^2*s13^2 - 2843*s12*s13^3 - 480*s13^4)*
               s23^3 + (-500*s12^3 + 748*s12^2*s13 - 1361*s12*s13^2 -
                624*s13^3)*s23^4) + p1q^3*((-270*s12^5 - 81*s12^4*s13 -
                189*s12^3*s13^2 - 738*s12^2*s13^3 - 459*s12*s13^4 - 99*s13^5)*
               s23^2 + (-250*s12^4 + 429*s12^3*s13 - 800*s12^2*s13^2 -
                1020*s12*s13^3 - 117*s13^4)*s23^3 + (100*s12^3 +
                127*s12^2*s13 - 494*s12*s13^2 + 303*s13^3)*s23^4 +
              (80*s12^2 - 173*s12*s13 + 321*s13^2)*s23^5)) +
          p3q*(p2q^4*(324*s12^3*s13^4 - 162*s12^2*s13^5 - 486*s12*s13^6 +
              (-270*s12^4*s13^2 + 99*s12^3*s13^3 + 351*s12^2*s13^4 -
                792*s12*s13^5 + 36*s13^6)*s23 + (-270*s12^3*s13^2 +
                369*s12^2*s13^3 - 342*s12*s13^4 + 36*s13^5)*s23^2) +
            p1q*p2q^3*(324*s12^3*s13^4 - 324*s12*s13^6 + (324*s12^3*s13^3 +
                1782*s12^2*s13^4 + 972*s12*s13^5 + 162*s13^6)*s23 +
              (-160*s12^4*s13 - 14*s12^3*s13^2 + 58*s12^2*s13^3 +
                1292*s12*s13^4 + 732*s13^5)*s23^2 + (-160*s12^3*s13 +
                146*s12^2*s13^2 - 412*s12*s13^3 + 570*s13^4)*s23^3) +
            p1q^2*p2q^2*((270*s12^4*s13^2 + 648*s12^3*s13^3 + 1809*s12^2*
                 s13^4 + 1755*s12*s13^5 + 324*s13^6)*s23 + (20*s12^4*s13 +
                482*s12^3*s13^2 - 236*s12^2*s13^3 + 1234*s12*s13^4 +
                933*s13^5)*s23^2 + (-250*s12^4 + 39*s12^3*s13 + 205*s12^2*
                 s13^2 - 2310*s12*s13^3 - 639*s13^4)*s23^3 + (-250*s12^3 +
                269*s12^2*s13 - 256*s12*s13^2 - 1248*s13^3)*s23^4) +
            p1q^4*((270*s12^4 + 81*s12^3*s13 + 9*s12^2*s13^2 + 297*s12*
                 s13^3 + 99*s13^4)*s23^3 + (260*s12^3 - 309*s12^2*s13 +
                427*s12*s13^2 + 438*s13^3)*s23^4 + (-10*s12^2 - 110*s12*s13 +
                339*s13^2)*s23^5) + p1q^3*p2q*((180*s12^4*s13 +
                18*s12^3*s13^2 - 801*s12^2*s13^3 - 918*s12*s13^4 - 279*s13^5)*
               s23^2 + (20*s12^4 + 440*s12^3*s13 - 362*s12^2*s13^2 -
                1901*s12*s13^3 - 1101*s13^4)*s23^3 + (180*s12^3 +
                54*s12^2*s13 - 144*s12*s13^2 - 180*s13^3)*s23^4 +
              (160*s12^2 - 346*s12*s13 + 642*s13^2)*s23^5)))*
         PolyLog(2, s12/(s12 + s13 + s23)))/(18*p1q*p3q^4*s12^3*s13^3*s23^2 +
         18*p1q*p2q^4*s12*s13^5*s23^2 + 18*p1q^4*p2q*s12*s13^3*s23^4 +
         p1q^2*p2q^3*(18*s12*s13^5*s23^2 - 36*s12*s13^4*s23^3) +
         p1q^3*p2q^2*(-36*s12*s13^4*s23^3 + 18*s12*s13^3*s23^4) +
         p3q^3*(p1q*p2q*(36*s12^3*s13^3 - 36*s12^2*s13^4)*s23^2 +
           p1q^2*(18*s12^3*s13^3*s23^2 - 36*s12^2*s13^3*s23^3)) +
         p3q^2*(p1q*p2q^2*(18*s12^3*s13^3 - 72*s12^2*s13^4 + 18*s12*s13^5)*
            s23^2 + p1q^2*p2q*((18*s12^3*s13^3 - 36*s12^2*s13^4)*s23^2 +
             (-72*s12^2*s13^3 - 36*s12*s13^4)*s23^3) +
           p1q^3*(-36*s12^2*s13^3*s23^3 + 18*s12*s13^3*s23^4)) +
         p3q*(p1q*p2q^3*(-36*s12^2*s13^4 + 36*s12*s13^5)*s23^2 +
           18*p1q^4*s12*s13^3*s23^4 + p1q^2*p2q^2*
            ((-36*s12^2*s13^4 + 18*s12*s13^5)*s23^2 +
             (-36*s12^2*s13^3 - 72*s12*s13^4)*s23^3) +
           p1q^3*p2q*((-36*s12^2*s13^3 - 36*s12*s13^4)*s23^3 +
             36*s12*s13^3*s23^4))) +
       ((p3q^5*(-162*s12^6*s13 - 162*s12^5*s13^2 +
            (18*s12^6 - 207*s12^5*s13 + 27*s12^4*s13^2 + 90*s12^3*s13^3)*
             s23 + (18*s12^5 - 63*s12^4*s13 + 90*s12^3*s13^2)*s23^2) +
          p2q^5*(-162*s12^4*s13^3 - 162*s12^3*s13^4 +
            (-342*s12^3*s13^3 - 117*s12^2*s13^4 - 27*s12*s13^5 - 90*s13^6)*
             s23 + (-180*s12^2*s13^3 + 63*s12*s13^4 - 90*s13^5)*s23^2) +
          p1q*p2q^4*(-162*s12^4*s13^3 - 162*s12^3*s13^4 +
            (324*s12^4*s13^2 + 162*s12^3*s13^3)*s23 +
            (1005*s12^3*s13^2 + 382*s12^2*s13^3 - 39*s12*s13^4 + 260*s13^5)*
             s23^2 + (681*s12^2*s13^2 - 299*s12*s13^3 + 260*s13^4)*s23^3) +
          p1q^2*p2q^3*((81*s12^5*s13 + 486*s12^4*s13^2 + 585*s12^3*s13^3 +
              117*s12^2*s13^4 + 27*s12*s13^5 + 90*s13^6)*s23 +
            (-99*s12^4*s13 + 528*s12^3*s13^2 + 373*s12^2*s13^3 -
              183*s12*s13^4 + 80*s13^5)*s23^2 + (-1002*s12^3*s13 -
              110*s12^2*s13^2 + 49*s12*s13^3 - 260*s13^4)*s23^3 +
            (-822*s12^2*s13 + 409*s12*s13^2 - 250*s13^3)*s23^4) +
          p1q^5*((63*s12^2*s13 - 27*s12*s13^2 - 90*s13^3)*s23^4 +
            (63*s12*s13 - 90*s13^2)*s23^5) + p1q^4*p2q*
           ((99*s12^4 + 297*s12^3*s13 + 9*s12^2*s13^2 + 81*s12*s13^3 +
              270*s13^4)*s23^3 + (438*s12^3 + 427*s12^2*s13 - 309*s12*s13^2 +
              260*s13^3)*s23^4 + (339*s12^2 - 110*s12*s13 - 10*s13^2)*
             s23^5) + p1q^3*p2q^2*((-99*s12^5 - 459*s12^4*s13 -
              738*s12^3*s13^2 - 189*s12^2*s13^3 - 81*s12*s13^4 - 270*s13^5)*
             s23^2 + (-117*s12^4 - 1020*s12^3*s13 - 800*s12^2*s13^2 +
              429*s12*s13^3 - 250*s13^4)*s23^3 + (303*s12^3 - 494*s12^2*s13 +
              127*s12*s13^2 + 100*s13^3)*s23^4 + (321*s12^2 - 173*s12*s13 +
              80*s13^2)*s23^5) + p3q^4*(p2q*(-486*s12^6*s13 -
              162*s12^5*s13^2 + 324*s12^4*s13^3 + (36*s12^6 - 792*s12^5*s13 +
                351*s12^4*s13^2 + 99*s12^3*s13^3 - 270*s12^2*s13^4)*s23 +
              (36*s12^5 - 342*s12^4*s13 + 369*s12^3*s13^2 - 270*s12^2*s13^3)*
               s23^2) + p1q*(-162*s12^6*s13 - 162*s12^5*s13^2 +
              (162*s12^5*s13 + 324*s12^4*s13^2)*s23 + (285*s12^5 +
                562*s12^4*s13 - 147*s12^3*s13^2 - 100*s12^2*s13^3)*s23^2 +
              (285*s12^4 - 47*s12^3*s13 - 100*s12^2*s13^2)*s23^3)) +
          p3q^3*(p2q^2*(-486*s12^6*s13 + 486*s12^5*s13^2 + 810*s12^4*s13^3 -
              162*s12^3*s13^4 + (18*s12^6 - 963*s12^5*s13 + 1323*s12^4*
                 s13^2 - 45*s12^3*s13^3 - 459*s12^2*s13^4 + 270*s12*s13^5)*
               s23 + (18*s12^5 - 495*s12^4*s13 + 846*s12^3*s13^2 -
                729*s12^2*s13^3 + 270*s12*s13^4)*s23^2) +
            p1q*p2q*(-324*s12^6*s13 + 324*s12^4*s13^3 + (162*s12^6 +
                972*s12^5*s13 + 1782*s12^4*s13^2 + 324*s12^3*s13^3)*s23 +
              (732*s12^5 + 1292*s12^4*s13 + 58*s12^3*s13^2 - 14*s12^2*s13^3 -
                160*s12*s13^4)*s23^2 + (570*s12^4 - 412*s12^3*s13 +
                146*s12^2*s13^2 - 160*s12*s13^3)*s23^3) +
            p1q^2*((63*s12^6 + 855*s12^5*s13 + 1026*s12^4*s13^2 +
                234*s12^3*s13^3)*s23 + (690*s12^5 + 1453*s12^4*s13 +
                258*s12^3*s13^2 - 10*s12^2*s13^3)*s23^2 + (3*s12^4 -
                307*s12^3*s13 + 203*s12^2*s13^2 - 70*s12*s13^3)*s23^3 +
              (-624*s12^3 + 283*s12^2*s13 - 70*s12*s13^2)*s23^4)) +
          p3q^2*(p2q^3*(-162*s12^6*s13 + 810*s12^5*s13^2 + 486*s12^4*s13^3 -
              486*s12^3*s13^4 + (-378*s12^5*s13 + 1701*s12^4*s13^2 -
                369*s12^3*s13^3 - 225*s12^2*s13^4 + 513*s12*s13^5 - 90*s13^6)*
               s23 + (-216*s12^4*s13 + 945*s12^3*s13^2 - 828*s12^2*s13^3 +
                603*s12*s13^4 - 90*s13^5)*s23^2) + p1q*p2q^2*
             (-162*s12^6*s13 + 486*s12^5*s13^2 + 486*s12^4*s13^3 -
              162*s12^3*s13^4 + (162*s12^6 + 972*s12^5*s13 + 2430*s12^4*
                 s13^2 + 648*s12^3*s13^3)*s23 + (447*s12^5 + 574*s12^4*s13 +
                1400*s12^3*s13^2 + 654*s12^2*s13^3 - 359*s12*s13^4 +
                260*s13^5)*s23^2 + (285*s12^4 - 683*s12^3*s13 + 1273*s12^2*
                 s13^2 - 619*s12*s13^3 + 260*s13^4)*s23^3) +
            p1q^2*p2q*((324*s12^6 + 1755*s12^5*s13 + 1809*s12^4*s13^2 +
                648*s12^3*s13^3 + 270*s12^2*s13^4)*s23 + (933*s12^5 +
                1234*s12^4*s13 - 236*s12^3*s13^2 + 482*s12^2*s13^3 +
                20*s12*s13^4)*s23^2 + (-639*s12^4 - 2310*s12^3*s13 +
                205*s12^2*s13^2 + 39*s12*s13^3 - 250*s13^4)*s23^3 +
              (-1248*s12^3 - 256*s12^2*s13 + 269*s12*s13^2 - 250*s13^3)*s23^
                4) + p1q^3*((18*s12^5 - 486*s12^4*s13 - 432*s12^3*s13^2 +
                72*s12^2*s13^3)*s23^2 + (-948*s12^4 - 1268*s12^3*s13 +
                294*s12^2*s13^2 + 20*s12*s13^3)*s23^3 + (-645*s12^3 +
                350*s12^2*s13 - 73*s12*s13^2 + 80*s13^3)*s23^4 +
              (321*s12^2 - 173*s12*s13 + 80*s13^2)*s23^5)) +
          p3q*(p2q^4*(324*s12^5*s13^2 - 162*s12^4*s13^3 - 486*s12^3*s13^4 +
              (702*s12^4*s13^2 - 657*s12^3*s13^3 - 153*s12^2*s13^4 +
                216*s12*s13^5 - 180*s13^6)*s23 + (378*s12^3*s13^2 -
                549*s12^2*s13^3 + 396*s12*s13^4 - 180*s13^5)*s23^2) +
            p1q*p2q^3*(324*s12^5*s13^2 - 324*s12^3*s13^4 + (162*s12^5*s13 +
                1296*s12^4*s13^2 + 486*s12^3*s13^3)*s23 + (-156*s12^4*s13 +
                2200*s12^3*s13^2 + 950*s12^2*s13^3 - 238*s12*s13^4 +
                520*s13^5)*s23^2 + (-318*s12^3*s13 + 1708*s12^2*s13^2 -
                758*s12*s13^3 + 520*s13^4)*s23^3) + p1q^2*p2q^2*
             ((243*s12^6 + 810*s12^5*s13 + 837*s12^4*s13^2 + 459*s12^3*
                 s13^3 - 81*s12^2*s13^4 - 270*s12*s13^5)*s23 +
              (387*s12^5 - 147*s12^4*s13 - 83*s12^3*s13^2 + 604*s12^2*s13^3 -
                370*s12*s13^4 - 10*s13^5)*s23^2 + (-480*s12^4 - 2843*s12^3*
                 s13 - 108*s12^2*s13^2 + 158*s12*s13^3 - 510*s13^4)*s23^3 +
              (-624*s12^3 - 1361*s12^2*s13 + 748*s12*s13^2 - 500*s13^3)*s23^
                4) + p1q^4*((-81*s12^4 - 126*s12^3*s13 + 45*s12^2*s13^2 +
                90*s12*s13^3)*s23^3 + (258*s12^3 + 184*s12^2*s13 -
                30*s12*s13^2 - 10*s13^3)*s23^4 + (339*s12^2 - 110*s12*s13 -
                10*s13^2)*s23^5) + p1q^3*p2q*((-279*s12^5 - 918*s12^4*s13 -
                801*s12^3*s13^2 + 18*s12^2*s13^3 + 180*s12*s13^4)*s23^2 +
              (-1101*s12^4 - 1901*s12^3*s13 - 362*s12^2*s13^2 +
                440*s12*s13^3 + 20*s13^4)*s23^3 + (-180*s12^3 - 144*s12^2*
                 s13 + 54*s12*s13^2 + 180*s13^3)*s23^4 + (642*s12^2 -
                346*s12*s13 + 160*s13^2)*s23^5)))*PolyLog(2,
          s13/(s12 + s13 + s23)))/(18*p1q*p3q^4*s12^5*s13*s23^2 +
         18*p1q*p2q^4*s12^3*s13^3*s23^2 + 18*p1q^4*p2q*s12^3*s13*s23^4 +
         p1q^2*p2q^3*(18*s12^3*s13^3*s23^2 - 36*s12^3*s13^2*s23^3) +
         p1q^3*p2q^2*(-36*s12^3*s13^2*s23^3 + 18*s12^3*s13*s23^4) +
         p3q^3*(p1q*p2q*(36*s12^5*s13 - 36*s12^4*s13^2)*s23^2 +
           p1q^2*(18*s12^5*s13*s23^2 - 36*s12^4*s13*s23^3)) +
         p3q^2*(p1q*p2q^2*(18*s12^5*s13 - 72*s12^4*s13^2 + 18*s12^3*s13^3)*
            s23^2 + p1q^2*p2q*((18*s12^5*s13 - 36*s12^4*s13^2)*s23^2 +
             (-72*s12^4*s13 - 36*s12^3*s13^2)*s23^3) +
           p1q^3*(-36*s12^4*s13*s23^3 + 18*s12^3*s13*s23^4)) +
         p3q*(p1q*p2q^3*(-36*s12^4*s13^2 + 36*s12^3*s13^3)*s23^2 +
           18*p1q^4*s12^3*s13*s23^4 + p1q^2*p2q^2*
            ((-36*s12^4*s13^2 + 18*s12^3*s13^3)*s23^2 +
             (-36*s12^4*s13 - 72*s12^3*s13^2)*s23^3) +
           p1q^3*p2q*((-36*s12^4*s13 - 36*s12^3*s13^2)*s23^3 +
             36*s12^3*s13*s23^4))) +
       ((p3q^5*(-324*s12^6*s13^3 - 324*s12^5*s13^4 +
            (-90*s12^8 - 27*s12^7*s13 - 99*s12^6*s13^2 - 549*s12^5*s13^3 +
              27*s12^4*s13^4 + 90*s12^3*s13^5)*s23 +
            (-90*s12^7 + 63*s12^6*s13 - 162*s12^5*s13^2 - 63*s12^4*s13^3 +
              90*s12^3*s13^4)*s23^2) + p2q^5*(-324*s12^4*s13^5 -
            324*s12^3*s13^6 + (90*s12^5*s13^3 + 27*s12^4*s13^4 -
              549*s12^3*s13^5 - 99*s12^2*s13^6 - 27*s12*s13^7 - 90*s13^8)*
             s23 + (90*s12^4*s13^3 - 63*s12^3*s13^4 - 162*s12^2*s13^5 +
              63*s12*s13^6 - 90*s13^7)*s23^2) + p1q*p2q^4*(-324*s12^4*s13^5 -
            324*s12^3*s13^6 + (648*s12^4*s13^4 + 324*s12^3*s13^5)*s23 +
            (-100*s12^5*s13^2 - 147*s12^4*s13^3 + 1531*s12^3*s13^4 +
              631*s12^2*s13^5 - 39*s12*s13^6 + 260*s13^7)*s23^2 +
            (-100*s12^4*s13^2 - 47*s12^3*s13^3 + 930*s12^2*s13^4 -
              299*s12*s13^5 + 260*s13^6)*s23^3) + p1q^2*p2q^3*
           ((315*s12^5*s13^3 + 1512*s12^4*s13^4 + 1440*s12^3*s13^5 +
              180*s12^2*s13^6 + 27*s12*s13^7 + 90*s13^8)*s23 +
            (-10*s12^5*s13^2 + 195*s12^4*s13^3 + 2017*s12^3*s13^4 +
              1063*s12^2*s13^5 - 183*s12*s13^6 + 80*s13^7)*s23^2 +
            (-70*s12^5*s13 + 203*s12^4*s13^2 - 1201*s12^3*s13^3 -
              35*s12^2*s13^4 + 49*s12*s13^5 - 260*s13^6)*s23^3 +
            (-70*s12^4*s13 + 283*s12^3*s13^2 - 1374*s12^2*s13^3 +
              409*s12*s13^4 - 250*s13^5)*s23^4) +
          p1q^5*((-90*s12^5 - 27*s12^4*s13 + 63*s12^3*s13^2 +
              63*s12^2*s13^3 - 27*s12*s13^4 - 90*s13^5)*s23^4 +
            (-90*s12^4 + 63*s12^3*s13 + 63*s12*s13^3 - 90*s13^4)*s23^5) +
          p1q^4*p2q*((90*s12^5*s13 + 108*s12^4*s13^2 + 99*s12^3*s13^3 -
              108*s12^2*s13^4 + 81*s12*s13^5 + 270*s13^6)*s23^3 +
            (-10*s12^5 - 30*s12^4*s13 + 514*s12^3*s13^2 + 577*s12^2*s13^3 -
              309*s12*s13^4 + 260*s13^5)*s23^4 + (-10*s12^4 - 110*s12^3*s13 +
              606*s12^2*s13^2 - 110*s12*s13^3 - 10*s13^4)*s23^5) +
          p1q^3*p2q^2*((9*s12^5*s13^2 - 783*s12^4*s13^3 - 1116*s12^3*s13^4 -
              135*s12^2*s13^5 - 81*s12*s13^6 - 270*s13^7)*s23^2 +
            (20*s12^5*s13 + 249*s12^4*s13^2 - 2108*s12^3*s13^3 -
              1640*s12^2*s13^4 + 429*s12*s13^5 - 250*s13^6)*s23^3 +
            (80*s12^5 - 73*s12^4*s13 + 653*s12^3*s13^2 - 1103*s12^2*s13^3 +
              127*s12*s13^4 + 100*s13^5)*s23^4 + (80*s12^4 - 173*s12^3*s13 +
              606*s12^2*s13^2 - 173*s12*s13^3 + 80*s13^4)*s23^5) +
          p3q^4*(p2q*(-972*s12^6*s13^3 - 324*s12^5*s13^4 + 648*s12^4*s13^5 +
              (-180*s12^8 + 216*s12^7*s13 - 117*s12^6*s13^2 - 1449*s12^5*
                 s13^3 + 1053*s12^4*s13^4 + 99*s12^3*s13^5 - 270*s12^2*s13^6)*
               s23 + (-180*s12^7 + 396*s12^6*s13 - 513*s12^5*s13^2 +
                36*s12^4*s13^3 + 369*s12^3*s13^4 - 270*s12^2*s13^5)*s23^2) +
            p1q*(-324*s12^6*s13^3 - 324*s12^5*s13^4 + (324*s12^5*s13^3 +
                648*s12^4*s13^4)*s23 + (260*s12^7 - 39*s12^6*s13 +
                631*s12^5*s13^2 + 1531*s12^4*s13^3 - 147*s12^3*s13^4 -
                100*s12^2*s13^5)*s23^2 + (260*s12^6 - 299*s12^5*s13 +
                930*s12^4*s13^2 - 47*s12^3*s13^3 - 100*s12^2*s13^4)*s23^3)) +
          p3q^3*(p2q^2*(-972*s12^6*s13^3 + 972*s12^5*s13^4 + 1620*s12^4*s13^
                5 - 324*s12^3*s13^6 + (-90*s12^8 + 513*s12^7*s13 -
                207*s12^6*s13^2 - 1332*s12^5*s13^3 + 3024*s12^4*s13^4 -
                423*s12^3*s13^5 - 459*s12^2*s13^6 + 270*s12*s13^7)*s23 +
              (-90*s12^7 + 603*s12^6*s13 - 810*s12^5*s13^2 + 450*s12^4*
                 s13^3 + 630*s12^3*s13^4 - 729*s12^2*s13^5 + 270*s12*s13^6)*
               s23^2) + p1q*p2q*(-648*s12^6*s13^3 + 648*s12^4*s13^5 +
              (162*s12^6*s13^2 + 1458*s12^5*s13^3 + 3078*s12^4*s13^4 +
                486*s12^3*s13^5)*s23 + (520*s12^7 - 238*s12^6*s13 +
                1610*s12^5*s13^2 + 3492*s12^4*s13^3 - 26*s12^3*s13^4 -
                14*s12^2*s13^5 - 160*s12*s13^6)*s23^2 + (520*s12^6 -
                758*s12^5*s13 + 2206*s12^4*s13^2 - 658*s12^3*s13^3 +
                146*s12^2*s13^4 - 160*s12*s13^5)*s23^3) +
            p1q^2*((90*s12^8 + 27*s12^7*s13 + 180*s12^6*s13^2 + 1440*s12^5*
                 s13^3 + 1512*s12^4*s13^4 + 315*s12^3*s13^5)*s23 +
              (80*s12^7 - 183*s12^6*s13 + 1063*s12^5*s13^2 + 2017*s12^4*
                 s13^3 + 195*s12^3*s13^4 - 10*s12^2*s13^5)*s23^2 +
              (-260*s12^6 + 49*s12^5*s13 - 35*s12^4*s13^2 - 1201*s12^3*
                 s13^3 + 203*s12^2*s13^4 - 70*s12*s13^5)*s23^3 +
              (-250*s12^5 + 409*s12^4*s13 - 1374*s12^3*s13^2 + 283*s12^2*
                 s13^3 - 70*s12*s13^4)*s23^4)) +
          p3q^2*(p2q^3*(-324*s12^6*s13^3 + 1620*s12^5*s13^4 +
              972*s12^4*s13^5 - 972*s12^3*s13^6 + (270*s12^7*s13 -
                459*s12^6*s13^2 - 423*s12^5*s13^3 + 3024*s12^4*s13^4 -
                1332*s12^3*s13^5 - 207*s12^2*s13^6 + 513*s12*s13^7 -
                90*s13^8)*s23 + (270*s12^6*s13 - 729*s12^5*s13^2 +
                630*s12^4*s13^3 + 450*s12^3*s13^4 - 810*s12^2*s13^5 +
                603*s12*s13^6 - 90*s13^7)*s23^2) + p1q*p2q^2*
             (-324*s12^6*s13^3 + 972*s12^5*s13^4 + 972*s12^4*s13^5 -
              324*s12^3*s13^6 + (162*s12^6*s13^2 + 1620*s12^5*s13^3 +
                4860*s12^4*s13^4 + 1620*s12^3*s13^5 + 162*s12^2*s13^6)*s23 +
              (260*s12^7 - 359*s12^6*s13 + 1065*s12^5*s13^2 + 2082*s12^4*
                 s13^3 + 2082*s12^3*s13^4 + 1065*s12^2*s13^5 - 359*s12*
                 s13^6 + 260*s13^7)*s23^2 + (260*s12^6 - 619*s12^5*s13 +
                1522*s12^4*s13^2 - 1222*s12^3*s13^3 + 1522*s12^2*s13^4 -
                619*s12*s13^5 + 260*s13^6)*s23^3) + p1q^2*p2q*
             ((-270*s12^7*s13 + 243*s12^6*s13^2 + 2214*s12^5*s13^3 +
                2646*s12^4*s13^4 + 1458*s12^3*s13^5 + 513*s12^2*s13^6)*s23 +
              (-10*s12^7 - 370*s12^6*s13 + 1573*s12^5*s13^2 + 1367*s12^4*
                 s13^3 - 167*s12^3*s13^4 + 905*s12^2*s13^5 + 20*s12*s13^6)*
               s23^2 + (-510*s12^6 + 158*s12^5*s13 - 567*s12^4*s13^2 -
                4757*s12^3*s13^3 - 167*s12^2*s13^4 + 39*s12*s13^5 -
                250*s13^6)*s23^3 + (-500*s12^5 + 748*s12^4*s13 -
                2465*s12^3*s13^2 - 808*s12^2*s13^3 + 269*s12*s13^4 -
                250*s13^5)*s23^4) + p1q^3*((-270*s12^7 - 81*s12^6*s13 -
                135*s12^5*s13^2 - 1116*s12^4*s13^3 - 783*s12^3*s13^4 +
                9*s12^2*s13^5)*s23^2 + (-250*s12^6 + 429*s12^5*s13 -
                1640*s12^4*s13^2 - 2108*s12^3*s13^3 + 249*s12^2*s13^4 +
                20*s12*s13^5)*s23^3 + (100*s12^5 + 127*s12^4*s13 -
                1103*s12^3*s13^2 + 653*s12^2*s13^3 - 73*s12*s13^4 + 80*s13^5)*
               s23^4 + (80*s12^4 - 173*s12^3*s13 + 606*s12^2*s13^2 -
                173*s12*s13^3 + 80*s13^4)*s23^5)) +
          p3q*(p2q^4*(648*s12^5*s13^4 - 324*s12^4*s13^5 - 972*s12^3*s13^6 +
              (-270*s12^6*s13^2 + 99*s12^5*s13^3 + 1053*s12^4*s13^4 -
                1449*s12^3*s13^5 - 117*s12^2*s13^6 + 216*s12*s13^7 -
                180*s13^8)*s23 + (-270*s12^5*s13^2 + 369*s12^4*s13^3 +
                36*s12^3*s13^4 - 513*s12^2*s13^5 + 396*s12*s13^6 - 180*s13^7)*
               s23^2) + p1q*p2q^3*(648*s12^5*s13^4 - 648*s12^3*s13^6 +
              (486*s12^5*s13^3 + 3078*s12^4*s13^4 + 1458*s12^3*s13^5 +
                162*s12^2*s13^6)*s23 + (-160*s12^6*s13 - 14*s12^5*s13^2 -
                26*s12^4*s13^3 + 3492*s12^3*s13^4 + 1610*s12^2*s13^5 -
                238*s12*s13^6 + 520*s13^7)*s23^2 + (-160*s12^5*s13 +
                146*s12^4*s13^2 - 658*s12^3*s13^3 + 2206*s12^2*s13^4 -
                758*s12*s13^5 + 520*s13^6)*s23^3) + p1q^2*p2q^2*
             ((513*s12^6*s13^2 + 1458*s12^5*s13^3 + 2646*s12^4*s13^4 +
                2214*s12^3*s13^5 + 243*s12^2*s13^6 - 270*s12*s13^7)*s23 +
              (20*s12^6*s13 + 905*s12^5*s13^2 - 167*s12^4*s13^3 +
                1367*s12^3*s13^4 + 1573*s12^2*s13^5 - 370*s12*s13^6 -
                10*s13^7)*s23^2 + (-250*s12^6 + 39*s12^5*s13 - 167*s12^4*
                 s13^2 - 4757*s12^3*s13^3 - 567*s12^2*s13^4 + 158*s12*s13^5 -
                510*s13^6)*s23^3 + (-250*s12^5 + 269*s12^4*s13 -
                808*s12^3*s13^2 - 2465*s12^2*s13^3 + 748*s12*s13^4 -
                500*s13^5)*s23^4) + p1q^4*((270*s12^6 + 81*s12^5*s13 -
                108*s12^4*s13^2 + 99*s12^3*s13^3 + 108*s12^2*s13^4 +
                90*s12*s13^5)*s23^3 + (260*s12^5 - 309*s12^4*s13 +
                577*s12^3*s13^2 + 514*s12^2*s13^3 - 30*s12*s13^4 - 10*s13^5)*
               s23^4 + (-10*s12^4 - 110*s12^3*s13 + 606*s12^2*s13^2 -
                110*s12*s13^3 - 10*s13^4)*s23^5) + p1q^3*p2q*
             ((180*s12^6*s13 - 189*s12^5*s13^2 - 1503*s12^4*s13^3 -
                1503*s12^3*s13^4 - 189*s12^2*s13^5 + 180*s12*s13^6)*s23^2 +
              (20*s12^6 + 440*s12^5*s13 - 1283*s12^4*s13^2 - 3442*s12^3*
                 s13^3 - 1283*s12^2*s13^4 + 440*s12*s13^5 + 20*s13^6)*s23^3 +
              (180*s12^5 + 54*s12^4*s13 - 288*s12^3*s13^2 - 288*s12^2*s13^3 +
                54*s12*s13^4 + 180*s13^5)*s23^4 + (160*s12^4 - 346*s12^3*
                 s13 + 1212*s12^2*s13^2 - 346*s12*s13^3 + 160*s13^4)*s23^5)))*
         PolyLog(2, s23/(s12 + s13 + s23)))/(18*p1q*p3q^4*s12^5*s13^3*s23^2 +
         18*p1q*p2q^4*s12^3*s13^5*s23^2 + 18*p1q^4*p2q*s12^3*s13^3*s23^4 +
         p1q^2*p2q^3*(18*s12^3*s13^5*s23^2 - 36*s12^3*s13^4*s23^3) +
         p1q^3*p2q^2*(-36*s12^3*s13^4*s23^3 + 18*s12^3*s13^3*s23^4) +
         p3q^3*(p1q*p2q*(36*s12^5*s13^3 - 36*s12^4*s13^4)*s23^2 +
           p1q^2*(18*s12^5*s13^3*s23^2 - 36*s12^4*s13^3*s23^3)) +
         p3q^2*(p1q*p2q^2*(18*s12^5*s13^3 - 72*s12^4*s13^4 + 18*s12^3*s13^5)*
            s23^2 + p1q^2*p2q*((18*s12^5*s13^3 - 36*s12^4*s13^4)*s23^2 +
             (-72*s12^4*s13^3 - 36*s12^3*s13^4)*s23^3) +
           p1q^3*(-36*s12^4*s13^3*s23^3 + 18*s12^3*s13^3*s23^4)) +
         p3q*(p1q*p2q^3*(-36*s12^4*s13^4 + 36*s12^3*s13^5)*s23^2 +
           18*p1q^4*s12^3*s13^3*s23^4 + p1q^2*p2q^2*
            ((-36*s12^4*s13^4 + 18*s12^3*s13^5)*s23^2 +
             (-36*s12^4*s13^3 - 72*s12^3*s13^4)*s23^3) +
           p1q^3*p2q*((-36*s12^4*s13^3 - 36*s12^3*s13^4)*s23^3 +
             36*s12^3*s13^3*s23^4))) +
       ((p3q^5*(36*s12^4*s13 + 36*s12^3*s13^2 + (18*s12^4 + 54*s12^3*s13)*
             s23 + 18*s12^3*s23^2) + p2q^5*(36*s12^2*s13^3 + 36*s12*s13^4 +
            (54*s12*s13^3 + 18*s13^4)*s23 + 18*s13^3*s23^2) +
          p1q*p2q^4*(36*s12^2*s13^3 + 36*s12*s13^4 +
            (-72*s12^2*s13^2 - 36*s12*s13^3)*s23 +
            (-108*s12*s13^2 - 36*s13^3)*s23^2 - 36*s13^2*s23^3) +
          p1q^4*p2q*((-9*s12^2 - 18*s12*s13 - 9*s13^2)*s23^3 +
            (-9*s12 - 9*s13)*s23^4) + p1q^2*p2q^3*
           ((-45*s12^3*s13 - 171*s12^2*s13^2 - 153*s12*s13^3 - 27*s13^4)*
             s23 + (-45*s12^2*s13 - 162*s12*s13^2 - 63*s13^3)*s23^2 +
            (18*s12*s13 - 18*s13^2)*s23^3 + 18*s13*s23^4) +
          p1q^3*p2q^2*((9*s12^3 + 90*s12^2*s13 + 117*s12*s13^2 + 36*s13^3)*
             s23^2 + (9*s12^2 + 117*s12*s13 + 72*s13^2)*s23^3 +
            36*s13*s23^4) + p3q^4*(p2q*(108*s12^4*s13 + 36*s12^3*s13^2 -
              72*s12^2*s13^3 + (36*s12^4 + 126*s12^3*s13 - 90*s12^2*s13^2)*
               s23 + (36*s12^3 - 18*s12^2*s13)*s23^2) +
            p1q*(36*s12^4*s13 + 36*s12^3*s13^2 + (-36*s12^3*s13 -
                72*s12^2*s13^2)*s23 + (-36*s12^3 - 108*s12^2*s13)*s23^2 -
              36*s12^2*s23^3)) + p3q^3*(p2q^2*(108*s12^4*s13 -
              108*s12^3*s13^2 - 180*s12^2*s13^3 + 36*s12*s13^4 +
              (18*s12^4 + 90*s12^3*s13 - 270*s12^2*s13^2 + 18*s12*s13^3)*
               s23 + (18*s12^3 - 36*s12^2*s13 - 18*s12*s13^2)*s23^2) +
            p1q*p2q*(72*s12^4*s13 - 72*s12^2*s13^3 + (-18*s12^4 -
                162*s12^3*s13 - 342*s12^2*s13^2 - 54*s12*s13^3)*s23 +
              (-90*s12^3 - 360*s12^2*s13 - 126*s12*s13^2)*s23^2 +
              (-72*s12^2 - 72*s12*s13)*s23^3) +
            p1q^2*((-27*s12^4 - 153*s12^3*s13 - 171*s12^2*s13^2 -
                45*s12*s13^3)*s23 + (-63*s12^3 - 162*s12^2*s13 -
                45*s12*s13^2)*s23^2 + (-18*s12^2 + 18*s12*s13)*s23^3 +
              18*s12*s23^4)) + p3q^2*(p2q^3*(36*s12^4*s13 - 180*s12^3*s13^2 -
              108*s12^2*s13^3 + 108*s12*s13^4 + (18*s12^3*s13 - 270*s12^2*
                 s13^2 + 90*s12*s13^3 + 18*s13^4)*s23 + (-18*s12^2*s13 -
                36*s12*s13^2 + 18*s13^3)*s23^2) + p1q*p2q^2*
             (36*s12^4*s13 - 108*s12^3*s13^2 - 108*s12^2*s13^3 +
              36*s12*s13^4 + (-18*s12^4 - 180*s12^3*s13 - 540*s12^2*s13^2 -
                180*s12*s13^3 - 18*s13^4)*s23 + (-54*s12^3 - 378*s12^2*s13 -
                378*s12*s13^2 - 54*s13^3)*s23^2 + (-36*s12^2 - 144*s12*s13 -
                36*s13^2)*s23^3) + p1q^3*((36*s12^3 + 117*s12^2*s13 +
                90*s12*s13^2 + 9*s13^3)*s23^2 + (72*s12^2 + 117*s12*s13 +
                9*s13^2)*s23^3 + 36*s12*s23^4) + p1q^2*p2q*
             ((-36*s12^4 - 225*s12^3*s13 - 315*s12^2*s13^2 - 153*s12*s13^3 -
                27*s13^4)*s23 + (-72*s12^3 - 207*s12^2*s13 - 126*s12*s13^2 -
                45*s13^3)*s23^2 + 72*s12*s13*s23^3 + (36*s12 + 18*s13)*s23^
                4)) + p3q*(p2q^4*(-72*s12^3*s13^2 + 36*s12^2*s13^3 +
              108*s12*s13^4 + (-90*s12^2*s13^2 + 126*s12*s13^3 + 36*s13^4)*
               s23 + (-18*s12*s13^2 + 36*s13^3)*s23^2) +
            p1q*p2q^3*(-72*s12^3*s13^2 + 72*s12*s13^4 + (-54*s12^3*s13 -
                342*s12^2*s13^2 - 162*s12*s13^3 - 18*s13^4)*s23 +
              (-126*s12^2*s13 - 360*s12*s13^2 - 90*s13^3)*s23^2 +
              (-72*s12*s13 - 72*s13^2)*s23^3) +
            p1q^4*((-9*s12^2 - 18*s12*s13 - 9*s13^2)*s23^3 +
              (-9*s12 - 9*s13)*s23^4) + p1q^3*p2q*
             ((27*s12^3 + 153*s12^2*s13 + 153*s12*s13^2 + 27*s13^3)*s23^2 +
              (45*s12^2 + 162*s12*s13 + 45*s13^2)*s23^3 + (18*s12 + 18*s13)*
               s23^4) + p1q^2*p2q^2*((-27*s12^4 - 153*s12^3*s13 -
                315*s12^2*s13^2 - 225*s12*s13^3 - 36*s13^4)*s23 +
              (-45*s12^3 - 126*s12^2*s13 - 207*s12*s13^2 - 72*s13^3)*s23^2 +
              72*s12*s13*s23^3 + (18*s12 + 36*s13)*s23^4)))*
         PolyLog(2, -((-(p2q*s12) - p3q*s12 - p2q*s13 - p3q*s13 + p1q*s23)/
            ((p2q + p3q)*(s12 + s13)))))/(2*p1q*p3q^4*s12^3*s13*s23^2 +
         2*p1q*p2q^4*s12*s13^3*s23^2 + 2*p1q^4*p2q*s12*s13*s23^4 +
         p1q^2*p2q^3*(2*s12*s13^3*s23^2 - 4*s12*s13^2*s23^3) +
         p1q^3*p2q^2*(-4*s12*s13^2*s23^3 + 2*s12*s13*s23^4) +
         p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
           p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
         p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*s23^2 +
           p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
             (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) +
           p1q^3*(-4*s12^2*s13*s23^3 + 2*s12*s13*s23^4)) +
         p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
           2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*
            ((-4*s12^2*s13^2 + 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*
                s13^2)*s23^3) + p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*
              s23^3 + 4*s12*s13*s23^4))) +
       ((p3q^5*(-36*s12^4*s13 - 36*s12^3*s13^2 + (-18*s12^4 - 54*s12^3*s13)*
             s23 - 18*s12^3*s23^2) + p2q^5*(-36*s12^2*s13^3 - 36*s12*s13^4 +
            (-54*s12*s13^3 - 18*s13^4)*s23 - 18*s13^3*s23^2) +
          p1q*p2q^4*(-36*s12^2*s13^3 - 36*s12*s13^4 +
            (72*s12^2*s13^2 + 36*s12*s13^3)*s23 + (108*s12*s13^2 + 36*s13^3)*
             s23^2 + 36*s13^2*s23^3) + p1q^3*p2q^2*
           ((-9*s12^3 - 90*s12^2*s13 - 117*s12*s13^2 - 36*s13^3)*s23^2 +
            (-9*s12^2 - 117*s12*s13 - 72*s13^2)*s23^3 - 36*s13*s23^4) +
          p1q^2*p2q^3*((45*s12^3*s13 + 171*s12^2*s13^2 + 153*s12*s13^3 +
              27*s13^4)*s23 + (45*s12^2*s13 + 162*s12*s13^2 + 63*s13^3)*
             s23^2 + (-18*s12*s13 + 18*s13^2)*s23^3 - 18*s13*s23^4) +
          p1q^4*p2q*((9*s12^2 + 18*s12*s13 + 9*s13^2)*s23^3 +
            (9*s12 + 9*s13)*s23^4) + p3q^4*(p2q*(-108*s12^4*s13 -
              36*s12^3*s13^2 + 72*s12^2*s13^3 + (-36*s12^4 - 126*s12^3*s13 +
                90*s12^2*s13^2)*s23 + (-36*s12^3 + 18*s12^2*s13)*s23^2) +
            p1q*(-36*s12^4*s13 - 36*s12^3*s13^2 + (36*s12^3*s13 +
                72*s12^2*s13^2)*s23 + (36*s12^3 + 108*s12^2*s13)*s23^2 +
              36*s12^2*s23^3)) + p3q^3*(p2q^2*(-108*s12^4*s13 +
              108*s12^3*s13^2 + 180*s12^2*s13^3 - 36*s12*s13^4 +
              (-18*s12^4 - 90*s12^3*s13 + 270*s12^2*s13^2 - 18*s12*s13^3)*
               s23 + (-18*s12^3 + 36*s12^2*s13 + 18*s12*s13^2)*s23^2) +
            p1q*p2q*(-72*s12^4*s13 + 72*s12^2*s13^3 + (18*s12^4 +
                162*s12^3*s13 + 342*s12^2*s13^2 + 54*s12*s13^3)*s23 +
              (90*s12^3 + 360*s12^2*s13 + 126*s12*s13^2)*s23^2 +
              (72*s12^2 + 72*s12*s13)*s23^3) +
            p1q^2*((27*s12^4 + 153*s12^3*s13 + 171*s12^2*s13^2 +
                45*s12*s13^3)*s23 + (63*s12^3 + 162*s12^2*s13 + 45*s12*s13^2)*
               s23^2 + (18*s12^2 - 18*s12*s13)*s23^3 - 18*s12*s23^4)) +
          p3q^2*(p2q^3*(-36*s12^4*s13 + 180*s12^3*s13^2 + 108*s12^2*s13^3 -
              108*s12*s13^4 + (-18*s12^3*s13 + 270*s12^2*s13^2 -
                90*s12*s13^3 - 18*s13^4)*s23 + (18*s12^2*s13 + 36*s12*s13^2 -
                18*s13^3)*s23^2) + p1q*p2q^2*(-36*s12^4*s13 +
              108*s12^3*s13^2 + 108*s12^2*s13^3 - 36*s12*s13^4 +
              (18*s12^4 + 180*s12^3*s13 + 540*s12^2*s13^2 + 180*s12*s13^3 +
                18*s13^4)*s23 + (54*s12^3 + 378*s12^2*s13 + 378*s12*s13^2 +
                54*s13^3)*s23^2 + (36*s12^2 + 144*s12*s13 + 36*s13^2)*s23^
                3) + p1q^3*((-36*s12^3 - 117*s12^2*s13 - 90*s12*s13^2 -
                9*s13^3)*s23^2 + (-72*s12^2 - 117*s12*s13 - 9*s13^2)*s23^3 -
              36*s12*s23^4) + p1q^2*p2q*((36*s12^4 + 225*s12^3*s13 +
                315*s12^2*s13^2 + 153*s12*s13^3 + 27*s13^4)*s23 +
              (72*s12^3 + 207*s12^2*s13 + 126*s12*s13^2 + 45*s13^3)*s23^2 -
              72*s12*s13*s23^3 + (-36*s12 - 18*s13)*s23^4)) +
          p3q*(p2q^4*(72*s12^3*s13^2 - 36*s12^2*s13^3 - 108*s12*s13^4 +
              (90*s12^2*s13^2 - 126*s12*s13^3 - 36*s13^4)*s23 +
              (18*s12*s13^2 - 36*s13^3)*s23^2) + p1q*p2q^3*(72*s12^3*s13^2 -
              72*s12*s13^4 + (54*s12^3*s13 + 342*s12^2*s13^2 + 162*s12*
                 s13^3 + 18*s13^4)*s23 + (126*s12^2*s13 + 360*s12*s13^2 +
                90*s13^3)*s23^2 + (72*s12*s13 + 72*s13^2)*s23^3) +
            p1q^2*p2q^2*((27*s12^4 + 153*s12^3*s13 + 315*s12^2*s13^2 +
                225*s12*s13^3 + 36*s13^4)*s23 + (45*s12^3 + 126*s12^2*s13 +
                207*s12*s13^2 + 72*s13^3)*s23^2 - 72*s12*s13*s23^3 +
              (-18*s12 - 36*s13)*s23^4) + p1q^3*p2q*
             ((-27*s12^3 - 153*s12^2*s13 - 153*s12*s13^2 - 27*s13^3)*s23^2 +
              (-45*s12^2 - 162*s12*s13 - 45*s13^2)*s23^3 + (-18*s12 - 18*s13)*
               s23^4) + p1q^4*((9*s12^2 + 18*s12*s13 + 9*s13^2)*s23^3 +
              (9*s12 + 9*s13)*s23^4)))*PolyLog(2,
          -((-(p2q*s12) - p3q*s12 - p2q*s13 - p3q*s13 + p1q*s23)/
            ((p1q + p2q + p3q)*(s12 + s13)))))/(2*p1q*p3q^4*s12^3*s13*s23^2 +
         2*p1q*p2q^4*s12*s13^3*s23^2 + 2*p1q^4*p2q*s12*s13*s23^4 +
         p1q^2*p2q^3*(2*s12*s13^3*s23^2 - 4*s12*s13^2*s23^3) +
         p1q^3*p2q^2*(-4*s12*s13^2*s23^3 + 2*s12*s13*s23^4) +
         p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
           p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
         p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*s23^2 +
           p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
             (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) +
           p1q^3*(-4*s12^2*s13*s23^3 + 2*s12*s13*s23^4)) +
         p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
           2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*
            ((-4*s12^2*s13^2 + 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*
                s13^2)*s23^3) + p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*
              s23^3 + 4*s12*s13*s23^4))) +
       ((p3q^5*(18*s12^4*s13 + 18*s12^3*s13^2 + 18*s12^3*s13*s23) +
          p2q^5*(18*s12^2*s13^3 + 18*s12*s13^4 + (36*s12*s13^3 + 18*s13^4)*
             s23 + 18*s13^3*s23^2) + p1q*p2q^4*(18*s12^2*s13^3 +
            18*s12*s13^4 + (-36*s12^2*s13^2 - 18*s12*s13^3)*s23 +
            (-74*s12*s13^2 - 38*s13^3)*s23^2 - 38*s13^2*s23^3) +
          p1q^2*p2q^3*((-36*s12^3*s13 - 117*s12^2*s13^2 - 108*s12*s13^3 -
              27*s13^4)*s23 + (-52*s12^2*s13 - 133*s12*s13^2 - 63*s13^3)*
             s23^2 + (6*s12*s13 - 14*s13^2)*s23^3 + 22*s13*s23^4) +
          p1q^4*p2q*((-2*s12^2 - 13*s12*s13 - 11*s13^2)*s23^3 +
            (-6*s12 - 15*s13)*s23^4 - 4*s23^5) + p1q^3*p2q^2*
           ((2*s12^3 + 51*s12^2*s13 + 87*s12*s13^2 + 38*s13^3)*s23^2 +
            (4*s12^2 + 91*s12*s13 + 78*s13^2)*s23^3 + 38*s13*s23^4 -
            2*s23^5) + p3q^4*(p2q*(54*s12^4*s13 + 18*s12^3*s13^2 -
              36*s12^2*s13^3 + (72*s12^3*s13 - 18*s12^2*s13^2)*s23 +
              18*s12^2*s13*s23^2) + p1q*(18*s12^4*s13 + 18*s12^3*s13^2 +
              (-18*s12^3*s13 - 36*s12^2*s13^2)*s23 + (-2*s12^3 -
                38*s12^2*s13)*s23^2 - 2*s12^2*s23^3)) +
          p3q^3*(p2q^2*(54*s12^4*s13 - 54*s12^3*s13^2 - 90*s12^2*s13^3 +
              18*s12*s13^4 + (90*s12^3*s13 - 108*s12^2*s13^2 - 18*s12*s13^3)*
               s23 + (36*s12^2*s13 - 36*s12*s13^2)*s23^2) +
            p1q*p2q*(36*s12^4*s13 - 36*s12^2*s13^3 + (-54*s12^3*s13 -
                144*s12^2*s13^2 - 18*s12*s13^3)*s23 + (-4*s12^3 -
                126*s12^2*s13 - 50*s12*s13^2)*s23^2 + (-4*s12^2 - 32*s12*s13)*
               s23^3) + p1q^2*((-45*s12^3*s13 - 54*s12^2*s13^2 - 9*s12*s13^3)*
               s23 + (-25*s12^2*s13 + 11*s12*s13^2)*s23^2 + (4*s12^2 +
                24*s12*s13)*s23^3 + 4*s12*s23^4)) +
          p3q*(p2q^4*(-36*s12^3*s13^2 + 18*s12^2*s13^3 + 54*s12*s13^4 +
              (-72*s12^2*s13^2 + 54*s12*s13^3 + 36*s13^4)*s23 +
              (-36*s12*s13^2 + 36*s13^3)*s23^2) + p1q*p2q^3*
             (-36*s12^3*s13^2 + 36*s12*s13^4 + (-36*s12^3*s13 - 198*s12^2*
                 s13^2 - 108*s12*s13^3 - 18*s13^4)*s23 + (-68*s12^2*s13 -
                234*s12*s13^2 - 94*s13^3)*s23^2 + (-32*s12*s13 - 76*s13^2)*
               s23^3) + p1q^2*p2q^2*((-63*s12^3*s13 - 162*s12^2*s13^2 -
                135*s12*s13^3 - 36*s13^4)*s23 + (2*s12^3 - 51*s12^2*s13 -
                123*s12*s13^2 - 70*s13^3)*s23^2 + (6*s12^2 + 58*s12*s13 +
                10*s13^2)*s23^3 + (4*s12 + 44*s13)*s23^4) +
            p1q^4*((-2*s12^2 - 13*s12*s13 - 11*s13^2)*s23^3 +
              (-6*s12 - 15*s13)*s23^4 - 4*s23^5) + p1q^3*p2q*
             ((4*s12^3 + 75*s12^2*s13 + 102*s12*s13^2 + 31*s13^3)*s23^2 +
              (10*s12^2 + 101*s12*s13 + 55*s13^2)*s23^3 + (2*s12 + 20*s13)*
               s23^4 - 4*s23^5)) + p3q^2*(p2q^3*(18*s12^4*s13 -
              90*s12^3*s13^2 - 54*s12^2*s13^3 + 54*s12*s13^4 +
              (36*s12^3*s13 - 162*s12^2*s13^2 + 18*s13^4)*s23 +
              (18*s12^2*s13 - 72*s12*s13^2 + 18*s13^3)*s23^2) +
            p1q*p2q^2*(18*s12^4*s13 - 54*s12^3*s13^2 - 54*s12^2*s13^3 +
              18*s12*s13^4 + (-72*s12^3*s13 - 270*s12^2*s13^2 -
                108*s12*s13^3 - 18*s13^4)*s23 + (-2*s12^3 - 156*s12^2*s13 -
                210*s12*s13^2 - 56*s13^3)*s23^2 + (-2*s12^2 - 64*s12*s13 -
                38*s13^2)*s23^3) + p1q^2*p2q*((-90*s12^3*s13 - 153*s12^2*
                 s13^2 - 90*s12*s13^3 - 27*s13^4)*s23 + (2*s12^3 -
                60*s12^2*s13 - 51*s12*s13^2 - 43*s13^3)*s23^2 +
              (10*s12^2 + 58*s12*s13 + 6*s13^2)*s23^3 + (8*s12 + 22*s13)*s23^
                4) + p1q^3*((2*s12^3 + 42*s12^2*s13 + 51*s12*s13^2 +
                11*s13^3)*s23^2 + (6*s12^2 + 46*s12*s13 + 13*s13^2)*s23^3 +
              2*s12*s23^4 - 2*s23^5)))*PolyLog(2,
          -((p3q*s12 - p1q*s13 - p2q*s13 - p1q*s23 - p2q*s23)/
            ((p1q + p2q)*(s13 + s23)))))/(2*p1q*p3q^4*s12^3*s13*s23^2 +
         2*p1q*p2q^4*s12*s13^3*s23^2 + 2*p1q^4*p2q*s12*s13*s23^4 +
         p1q^2*p2q^3*(2*s12*s13^3*s23^2 - 4*s12*s13^2*s23^3) +
         p1q^3*p2q^2*(-4*s12*s13^2*s23^3 + 2*s12*s13*s23^4) +
         p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
           p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
         p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*s23^2 +
           p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
             (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) +
           p1q^3*(-4*s12^2*s13*s23^3 + 2*s12*s13*s23^4)) +
         p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
           2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*
            ((-4*s12^2*s13^2 + 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*
                s13^2)*s23^3) + p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*
              s23^3 + 4*s12*s13*s23^4))) +
       ((p3q^5*(-18*s12^4*s13 - 18*s12^3*s13^2 - 18*s12^3*s13*s23) +
          p2q^5*(-18*s12^2*s13^3 - 18*s12*s13^4 + (-36*s12*s13^3 - 18*s13^4)*
             s23 - 18*s13^3*s23^2) + p1q*p2q^4*(-18*s12^2*s13^3 -
            18*s12*s13^4 + (36*s12^2*s13^2 + 18*s12*s13^3)*s23 +
            (74*s12*s13^2 + 38*s13^3)*s23^2 + 38*s13^2*s23^3) +
          p1q^2*p2q^3*((36*s12^3*s13 + 117*s12^2*s13^2 + 108*s12*s13^3 +
              27*s13^4)*s23 + (52*s12^2*s13 + 133*s12*s13^2 + 63*s13^3)*
             s23^2 + (-6*s12*s13 + 14*s13^2)*s23^3 - 22*s13*s23^4) +
          p1q^3*p2q^2*((-2*s12^3 - 51*s12^2*s13 - 87*s12*s13^2 - 38*s13^3)*
             s23^2 + (-4*s12^2 - 91*s12*s13 - 78*s13^2)*s23^3 -
            38*s13*s23^4 + 2*s23^5) + p1q^4*p2q*
           ((2*s12^2 + 13*s12*s13 + 11*s13^2)*s23^3 + (6*s12 + 15*s13)*
             s23^4 + 4*s23^5) + p3q^4*(p2q*(-54*s12^4*s13 - 18*s12^3*s13^2 +
              36*s12^2*s13^3 + (-72*s12^3*s13 + 18*s12^2*s13^2)*s23 -
              18*s12^2*s13*s23^2) + p1q*(-18*s12^4*s13 - 18*s12^3*s13^2 +
              (18*s12^3*s13 + 36*s12^2*s13^2)*s23 + (2*s12^3 + 38*s12^2*s13)*
               s23^2 + 2*s12^2*s23^3)) +
          p3q^3*(p2q^2*(-54*s12^4*s13 + 54*s12^3*s13^2 + 90*s12^2*s13^3 -
              18*s12*s13^4 + (-90*s12^3*s13 + 108*s12^2*s13^2 + 18*s12*s13^3)*
               s23 + (-36*s12^2*s13 + 36*s12*s13^2)*s23^2) +
            p1q*p2q*(-36*s12^4*s13 + 36*s12^2*s13^3 + (54*s12^3*s13 +
                144*s12^2*s13^2 + 18*s12*s13^3)*s23 + (4*s12^3 +
                126*s12^2*s13 + 50*s12*s13^2)*s23^2 + (4*s12^2 + 32*s12*s13)*
               s23^3) + p1q^2*((45*s12^3*s13 + 54*s12^2*s13^2 + 9*s12*s13^3)*
               s23 + (25*s12^2*s13 - 11*s12*s13^2)*s23^2 + (-4*s12^2 -
                24*s12*s13)*s23^3 - 4*s12*s23^4)) +
          p3q^2*(p2q^3*(-18*s12^4*s13 + 90*s12^3*s13^2 + 54*s12^2*s13^3 -
              54*s12*s13^4 + (-36*s12^3*s13 + 162*s12^2*s13^2 - 18*s13^4)*
               s23 + (-18*s12^2*s13 + 72*s12*s13^2 - 18*s13^3)*s23^2) +
            p1q*p2q^2*(-18*s12^4*s13 + 54*s12^3*s13^2 + 54*s12^2*s13^3 -
              18*s12*s13^4 + (72*s12^3*s13 + 270*s12^2*s13^2 + 108*s12*
                 s13^3 + 18*s13^4)*s23 + (2*s12^3 + 156*s12^2*s13 +
                210*s12*s13^2 + 56*s13^3)*s23^2 + (2*s12^2 + 64*s12*s13 +
                38*s13^2)*s23^3) + p1q^2*p2q*((90*s12^3*s13 + 153*s12^2*
                 s13^2 + 90*s12*s13^3 + 27*s13^4)*s23 + (-2*s12^3 +
                60*s12^2*s13 + 51*s12*s13^2 + 43*s13^3)*s23^2 +
              (-10*s12^2 - 58*s12*s13 - 6*s13^2)*s23^3 + (-8*s12 - 22*s13)*
               s23^4) + p1q^3*((-2*s12^3 - 42*s12^2*s13 - 51*s12*s13^2 -
                11*s13^3)*s23^2 + (-6*s12^2 - 46*s12*s13 - 13*s13^2)*s23^3 -
              2*s12*s23^4 + 2*s23^5)) +
          p3q*(p2q^4*(36*s12^3*s13^2 - 18*s12^2*s13^3 - 54*s12*s13^4 +
              (72*s12^2*s13^2 - 54*s12*s13^3 - 36*s13^4)*s23 +
              (36*s12*s13^2 - 36*s13^3)*s23^2) + p1q*p2q^3*(36*s12^3*s13^2 -
              36*s12*s13^4 + (36*s12^3*s13 + 198*s12^2*s13^2 + 108*s12*
                 s13^3 + 18*s13^4)*s23 + (68*s12^2*s13 + 234*s12*s13^2 +
                94*s13^3)*s23^2 + (32*s12*s13 + 76*s13^2)*s23^3) +
            p1q^2*p2q^2*((63*s12^3*s13 + 162*s12^2*s13^2 + 135*s12*s13^3 +
                36*s13^4)*s23 + (-2*s12^3 + 51*s12^2*s13 + 123*s12*s13^2 +
                70*s13^3)*s23^2 + (-6*s12^2 - 58*s12*s13 - 10*s13^2)*s23^3 +
              (-4*s12 - 44*s13)*s23^4) + p1q^3*p2q*
             ((-4*s12^3 - 75*s12^2*s13 - 102*s12*s13^2 - 31*s13^3)*s23^2 +
              (-10*s12^2 - 101*s12*s13 - 55*s13^2)*s23^3 + (-2*s12 - 20*s13)*
               s23^4 + 4*s23^5) + p1q^4*((2*s12^2 + 13*s12*s13 + 11*s13^2)*
               s23^3 + (6*s12 + 15*s13)*s23^4 + 4*s23^5)))*
         PolyLog(2, -((p3q*s12 - p1q*s13 - p2q*s13 - p1q*s23 - p2q*s23)/
            ((p1q + p2q + p3q)*(s13 + s23)))))/(2*p1q*p3q^4*s12^3*s13*s23^2 +
         2*p1q*p2q^4*s12*s13^3*s23^2 + 2*p1q^4*p2q*s12*s13*s23^4 +
         p1q^2*p2q^3*(2*s12*s13^3*s23^2 - 4*s12*s13^2*s23^3) +
         p1q^3*p2q^2*(-4*s12*s13^2*s23^3 + 2*s12*s13*s23^4) +
         p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
           p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
         p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*s23^2 +
           p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
             (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) +
           p1q^3*(-4*s12^2*s13*s23^3 + 2*s12*s13*s23^4)) +
         p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
           2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*
            ((-4*s12^2*s13^2 + 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*
                s13^2)*s23^3) + p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*
              s23^3 + 4*s12*s13*s23^4))) +
       ((p2q^5*(18*s12^2*s13^3 + 18*s12*s13^4 + 18*s12*s13^3*s23) +
          p3q^5*(18*s12^4*s13 + 18*s12^3*s13^2 + (18*s12^4 + 36*s12^3*s13)*
             s23 + 18*s12^3*s23^2) + p1q*p2q^4*(18*s12^2*s13^3 +
            18*s12*s13^4 + (-36*s12^2*s13^2 - 18*s12*s13^3)*s23 +
            (-38*s12*s13^2 - 2*s13^3)*s23^2 - 2*s13^2*s23^3) +
          p1q^2*p2q^3*((-9*s12^3*s13 - 54*s12^2*s13^2 - 45*s12*s13^3)*s23 +
            (11*s12^2*s13 - 25*s12*s13^2)*s23^2 + (24*s12*s13 + 4*s13^2)*
             s23^3 + 4*s13*s23^4) + p1q^4*p2q*
           ((-11*s12^2 - 13*s12*s13 - 2*s13^2)*s23^3 + (-15*s12 - 6*s13)*
             s23^4 - 4*s23^5) + p1q^3*p2q^2*((11*s12^3 + 51*s12^2*s13 +
              42*s12*s13^2 + 2*s13^3)*s23^2 + (13*s12^2 + 46*s12*s13 +
              6*s13^2)*s23^3 + 2*s13*s23^4 - 2*s23^5) +
          p3q^4*(p2q*(54*s12^4*s13 + 18*s12^3*s13^2 - 36*s12^2*s13^3 +
              (36*s12^4 + 54*s12^3*s13 - 72*s12^2*s13^2)*s23 +
              (36*s12^3 - 36*s12^2*s13)*s23^2) + p1q*(18*s12^4*s13 +
              18*s12^3*s13^2 + (-18*s12^3*s13 - 36*s12^2*s13^2)*s23 +
              (-38*s12^3 - 74*s12^2*s13)*s23^2 - 38*s12^2*s23^3)) +
          p3q^3*(p2q^2*(54*s12^4*s13 - 54*s12^3*s13^2 - 90*s12^2*s13^3 +
              18*s12*s13^4 + (18*s12^4 - 162*s12^2*s13^2 + 36*s12*s13^3)*
               s23 + (18*s12^3 - 72*s12^2*s13 + 18*s12*s13^2)*s23^2) +
            p1q*p2q*(36*s12^4*s13 - 36*s12^2*s13^3 + (-18*s12^4 -
                108*s12^3*s13 - 198*s12^2*s13^2 - 36*s12*s13^3)*s23 +
              (-94*s12^3 - 234*s12^2*s13 - 68*s12*s13^2)*s23^2 +
              (-76*s12^2 - 32*s12*s13)*s23^3) +
            p1q^2*((-27*s12^4 - 108*s12^3*s13 - 117*s12^2*s13^2 -
                36*s12*s13^3)*s23 + (-63*s12^3 - 133*s12^2*s13 -
                52*s12*s13^2)*s23^2 + (-14*s12^2 + 6*s12*s13)*s23^3 +
              22*s12*s23^4)) + p3q*(p2q^4*(-36*s12^3*s13^2 + 18*s12^2*s13^3 +
              54*s12*s13^4 + (-18*s12^2*s13^2 + 72*s12*s13^3)*s23 +
              18*s12*s13^2*s23^2) + p1q*p2q^3*(-36*s12^3*s13^2 +
              36*s12*s13^4 + (-18*s12^3*s13 - 144*s12^2*s13^2 - 54*s12*s13^3)*
               s23 + (-50*s12^2*s13 - 126*s12*s13^2 - 4*s13^3)*s23^2 +
              (-32*s12*s13 - 4*s13^2)*s23^3) + p1q^2*p2q^2*
             ((-27*s12^4 - 90*s12^3*s13 - 153*s12^2*s13^2 - 90*s12*s13^3)*
               s23 + (-43*s12^3 - 51*s12^2*s13 - 60*s12*s13^2 + 2*s13^3)*s23^
                2 + (6*s12^2 + 58*s12*s13 + 10*s13^2)*s23^3 +
              (22*s12 + 8*s13)*s23^4) + p1q^4*((-11*s12^2 - 13*s12*s13 -
                2*s13^2)*s23^3 + (-15*s12 - 6*s13)*s23^4 - 4*s23^5) +
            p1q^3*p2q*((31*s12^3 + 102*s12^2*s13 + 75*s12*s13^2 + 4*s13^3)*
               s23^2 + (55*s12^2 + 101*s12*s13 + 10*s13^2)*s23^3 +
              (20*s12 + 2*s13)*s23^4 - 4*s23^5)) +
          p3q^2*(p2q^3*(18*s12^4*s13 - 90*s12^3*s13^2 - 54*s12^2*s13^3 +
              54*s12*s13^4 + (-18*s12^3*s13 - 108*s12^2*s13^2 + 90*s12*s13^3)*
               s23 + (-36*s12^2*s13 + 36*s12*s13^2)*s23^2) +
            p1q*p2q^2*(18*s12^4*s13 - 54*s12^3*s13^2 - 54*s12^2*s13^3 +
              18*s12*s13^4 + (-18*s12^4 - 108*s12^3*s13 - 270*s12^2*s13^2 -
                72*s12*s13^3)*s23 + (-56*s12^3 - 210*s12^2*s13 -
                156*s12*s13^2 - 2*s13^3)*s23^2 + (-38*s12^2 - 64*s12*s13 -
                2*s13^2)*s23^3) + p1q^2*p2q*((-36*s12^4 - 135*s12^3*s13 -
                162*s12^2*s13^2 - 63*s12*s13^3)*s23 + (-70*s12^3 -
                123*s12^2*s13 - 51*s12*s13^2 + 2*s13^3)*s23^2 +
              (10*s12^2 + 58*s12*s13 + 6*s13^2)*s23^3 + (44*s12 + 4*s13)*s23^
                4) + p1q^3*((38*s12^3 + 87*s12^2*s13 + 51*s12*s13^2 +
                2*s13^3)*s23^2 + (78*s12^2 + 91*s12*s13 + 4*s13^2)*s23^3 +
              38*s12*s23^4 - 2*s23^5)))*PolyLog(2,
          -((-(p1q*s12) - p3q*s12 + p2q*s13 - p1q*s23 - p3q*s23)/
            ((p1q + p3q)*(s12 + s23)))))/(2*p1q*p3q^4*s12^3*s13*s23^2 +
         2*p1q*p2q^4*s12*s13^3*s23^2 + 2*p1q^4*p2q*s12*s13*s23^4 +
         p1q^2*p2q^3*(2*s12*s13^3*s23^2 - 4*s12*s13^2*s23^3) +
         p1q^3*p2q^2*(-4*s12*s13^2*s23^3 + 2*s12*s13*s23^4) +
         p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
           p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
         p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*s23^2 +
           p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
             (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) +
           p1q^3*(-4*s12^2*s13*s23^3 + 2*s12*s13*s23^4)) +
         p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
           2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*
            ((-4*s12^2*s13^2 + 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*
                s13^2)*s23^3) + p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*
              s23^3 + 4*s12*s13*s23^4))) +
       ((p2q^5*(-18*s12^2*s13^3 - 18*s12*s13^4 - 18*s12*s13^3*s23) +
          p3q^5*(-18*s12^4*s13 - 18*s12^3*s13^2 + (-18*s12^4 - 36*s12^3*s13)*
             s23 - 18*s12^3*s23^2) + p1q*p2q^4*(-18*s12^2*s13^3 -
            18*s12*s13^4 + (36*s12^2*s13^2 + 18*s12*s13^3)*s23 +
            (38*s12*s13^2 + 2*s13^3)*s23^2 + 2*s13^2*s23^3) +
          p1q^2*p2q^3*((9*s12^3*s13 + 54*s12^2*s13^2 + 45*s12*s13^3)*s23 +
            (-11*s12^2*s13 + 25*s12*s13^2)*s23^2 + (-24*s12*s13 - 4*s13^2)*
             s23^3 - 4*s13*s23^4) + p1q^3*p2q^2*
           ((-11*s12^3 - 51*s12^2*s13 - 42*s12*s13^2 - 2*s13^3)*s23^2 +
            (-13*s12^2 - 46*s12*s13 - 6*s13^2)*s23^3 - 2*s13*s23^4 +
            2*s23^5) + p1q^4*p2q*((11*s12^2 + 13*s12*s13 + 2*s13^2)*s23^3 +
            (15*s12 + 6*s13)*s23^4 + 4*s23^5) +
          p3q^4*(p2q*(-54*s12^4*s13 - 18*s12^3*s13^2 + 36*s12^2*s13^3 +
              (-36*s12^4 - 54*s12^3*s13 + 72*s12^2*s13^2)*s23 +
              (-36*s12^3 + 36*s12^2*s13)*s23^2) + p1q*(-18*s12^4*s13 -
              18*s12^3*s13^2 + (18*s12^3*s13 + 36*s12^2*s13^2)*s23 +
              (38*s12^3 + 74*s12^2*s13)*s23^2 + 38*s12^2*s23^3)) +
          p3q^3*(p2q^2*(-54*s12^4*s13 + 54*s12^3*s13^2 + 90*s12^2*s13^3 -
              18*s12*s13^4 + (-18*s12^4 + 162*s12^2*s13^2 - 36*s12*s13^3)*
               s23 + (-18*s12^3 + 72*s12^2*s13 - 18*s12*s13^2)*s23^2) +
            p1q*p2q*(-36*s12^4*s13 + 36*s12^2*s13^3 + (18*s12^4 +
                108*s12^3*s13 + 198*s12^2*s13^2 + 36*s12*s13^3)*s23 +
              (94*s12^3 + 234*s12^2*s13 + 68*s12*s13^2)*s23^2 +
              (76*s12^2 + 32*s12*s13)*s23^3) +
            p1q^2*((27*s12^4 + 108*s12^3*s13 + 117*s12^2*s13^2 +
                36*s12*s13^3)*s23 + (63*s12^3 + 133*s12^2*s13 + 52*s12*s13^2)*
               s23^2 + (14*s12^2 - 6*s12*s13)*s23^3 - 22*s12*s23^4)) +
          p3q^2*(p2q^3*(-18*s12^4*s13 + 90*s12^3*s13^2 + 54*s12^2*s13^3 -
              54*s12*s13^4 + (18*s12^3*s13 + 108*s12^2*s13^2 - 90*s12*s13^3)*
               s23 + (36*s12^2*s13 - 36*s12*s13^2)*s23^2) +
            p1q*p2q^2*(-18*s12^4*s13 + 54*s12^3*s13^2 + 54*s12^2*s13^3 -
              18*s12*s13^4 + (18*s12^4 + 108*s12^3*s13 + 270*s12^2*s13^2 +
                72*s12*s13^3)*s23 + (56*s12^3 + 210*s12^2*s13 +
                156*s12*s13^2 + 2*s13^3)*s23^2 + (38*s12^2 + 64*s12*s13 +
                2*s13^2)*s23^3) + p1q^2*p2q*((36*s12^4 + 135*s12^3*s13 +
                162*s12^2*s13^2 + 63*s12*s13^3)*s23 + (70*s12^3 +
                123*s12^2*s13 + 51*s12*s13^2 - 2*s13^3)*s23^2 +
              (-10*s12^2 - 58*s12*s13 - 6*s13^2)*s23^3 + (-44*s12 - 4*s13)*
               s23^4) + p1q^3*((-38*s12^3 - 87*s12^2*s13 - 51*s12*s13^2 -
                2*s13^3)*s23^2 + (-78*s12^2 - 91*s12*s13 - 4*s13^2)*s23^3 -
              38*s12*s23^4 + 2*s23^5)) +
          p3q*(p2q^4*(36*s12^3*s13^2 - 18*s12^2*s13^3 - 54*s12*s13^4 +
              (18*s12^2*s13^2 - 72*s12*s13^3)*s23 - 18*s12*s13^2*s23^2) +
            p1q*p2q^3*(36*s12^3*s13^2 - 36*s12*s13^4 + (18*s12^3*s13 +
                144*s12^2*s13^2 + 54*s12*s13^3)*s23 + (50*s12^2*s13 +
                126*s12*s13^2 + 4*s13^3)*s23^2 + (32*s12*s13 + 4*s13^2)*s23^
                3) + p1q^2*p2q^2*((27*s12^4 + 90*s12^3*s13 + 153*s12^2*
                 s13^2 + 90*s12*s13^3)*s23 + (43*s12^3 + 51*s12^2*s13 +
                60*s12*s13^2 - 2*s13^3)*s23^2 + (-6*s12^2 - 58*s12*s13 -
                10*s13^2)*s23^3 + (-22*s12 - 8*s13)*s23^4) +
            p1q^3*p2q*((-31*s12^3 - 102*s12^2*s13 - 75*s12*s13^2 - 4*s13^3)*
               s23^2 + (-55*s12^2 - 101*s12*s13 - 10*s13^2)*s23^3 +
              (-20*s12 - 2*s13)*s23^4 + 4*s23^5) +
            p1q^4*((11*s12^2 + 13*s12*s13 + 2*s13^2)*s23^3 +
              (15*s12 + 6*s13)*s23^4 + 4*s23^5)))*PolyLog(2,
          -((-(p1q*s12) - p3q*s12 + p2q*s13 - p1q*s23 - p3q*s23)/
            ((p1q + p2q + p3q)*(s12 + s23)))))/(2*p1q*p3q^4*s12^3*s13*s23^2 +
         2*p1q*p2q^4*s12*s13^3*s23^2 + 2*p1q^4*p2q*s12*s13*s23^4 +
         p1q^2*p2q^3*(2*s12*s13^3*s23^2 - 4*s12*s13^2*s23^3) +
         p1q^3*p2q^2*(-4*s12*s13^2*s23^3 + 2*s12*s13*s23^4) +
         p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
           p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
         p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*s23^2 +
           p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
             (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) +
           p1q^3*(-4*s12^2*s13*s23^3 + 2*s12*s13*s23^4)) +
         p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
           2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*
            ((-4*s12^2*s13^2 + 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*
                s13^2)*s23^3) + p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*
              s23^3 + 4*s12*s13*s23^4)))) +
     p1.E0*(p1.E0conj*
        ((p1q^2*((54*s12^3*s13^2 + 108*s12^2*s13^3 + 54*s12*s13^4)*s23 +
             (45*s12^4 + 189*s12^3*s13 + 405*s12^2*s13^2 + 261*s12*s13^3)*
              s23^2 + (45*s12^3 + 252*s12^2*s13 + 315*s12*s13^2)*s23^3 +
             108*s12*s13*s23^4) + p3q^2*((54*s12^3*s13^2 + 108*s12^2*s13^3 +
               54*s12*s13^4)*s23 + (45*s12^4 + 189*s12^3*s13 + 405*s12^2*
                s13^2 + 261*s12*s13^3)*s23^2 + (45*s12^3 + 252*s12^2*s13 +
               315*s12*s13^2)*s23^3 + 108*s12*s13*s23^4) +
           p2q^2*(-3168*s12^4*s13^2 - 9612*s12^3*s13^3 - 9720*s12^2*s13^4 -
             3276*s12*s13^5 + (-3213*s12^4*s13 - 14436*s12^3*s13^2 - 21186*
                s12^2*s13^3 - 11592*s12*s13^4 - 1629*s13^5)*s23 +
             (-4734*s12^3*s13 - 12834*s12^2*s13^2 - 11574*s12*s13^3 - 3258*
                s13^4)*s23^2 + (-1413*s12^2*s13 - 3150*s12*s13^2 - 1629*
                s13^3)*s23^3 + 108*s12*s13*s23^4) +
           p1q*p2q*(108*s12^3*s13^3 + 108*s12^2*s13^4 +
             (504*s12^4*s13 + 1584*s12^3*s13^2 + 1764*s12^2*s13^3 + 468*s12*
                s13^4)*s23 + (419*s12^4 + 1772*s12^3*s13 + 2665*s12^2*s13^2 +
               1215*s12*s13^3 + 11*s13^4)*s23^2 + (341*s12^3 + 682*s12^2*
                s13 + 449*s12*s13^2)*s23^3 + (-202*s12^2 - 377*s12*s13 - 175*
                s13^2)*s23^4 + (-124*s12 - 124*s13)*s23^5) +
           p3q*(p2q*(108*s12^4*s13^2 + 216*s12^3*s13^3 + 108*s12^2*s13^4 +
               (45*s12^5 + 288*s12^4*s13 + 864*s12^3*s13^2 + 720*s12^2*
                  s13^3 + 99*s12*s13^4)*s23 + (135*s12^4 + 783*s12^3*s13 +
                 1323*s12^2*s13^2 + 459*s12*s13^3)*s23^2 + (90*s12^3 +
                 666*s12^2*s13 + 576*s12*s13^2)*s23^3 + 216*s12*s13*s23^4) +
             p1q*(-108*s12^4*s13^2 - 108*s12^3*s13^3 + (-45*s12^5 +
                 216*s12^4*s13 + 828*s12^3*s13^2 + 1260*s12^2*s13^3 +
                 477*s12*s13^4)*s23 + (374*s12^4 + 1367*s12^3*s13 +
                 2152*s12^2*s13^2 + 1278*s12*s13^3 + 11*s13^4)*s23^2 +
               (341*s12^3 + 520*s12^2*s13 + 503*s12*s13^2)*s23^3 +
               (-202*s12^2 - 377*s12*s13 - 175*s13^2)*s23^4 + (-124*s12 -
                 124*s13)*s23^5)))/(p1q*p2q*((18*s12^3*s13^2 + 36*s12^2*
                s13^3 + 18*s12*s13^4)*s23^2 + (18*s12^3*s13 + 36*s12^2*
                s13^2 + 18*s12*s13^3)*s23^3) + p1q*p3q*
            ((18*s12^3*s13^2 + 36*s12^2*s13^3 + 18*s12*s13^4)*s23^2 +
             (18*s12^3*s13 + 36*s12^2*s13^2 + 18*s12*s13^3)*s23^3)) +
         (Pi^2*(p3q^5*((90*s12^7 + 180*s12^6*s13 + 90*s12^5*s13^2)*s23^2 +
              (180*s12^6 + 180*s12^5*s13)*s23^3 + 90*s12^5*s23^4) +
            p2q^5*(1458*s12^4*s13^5 + 1458*s12^3*s13^6 + (-90*s12^5*s13^3 -
                180*s12^4*s13^4 + 2169*s12^3*s13^5 + 648*s12^2*s13^6 -
                153*s12*s13^7)*s23 + (-180*s12^4*s13^3 - 180*s12^3*s13^4 +
                1044*s12^2*s13^5 - 90*s13^7)*s23^2 + (-90*s12^3*s13^3 +
                333*s12*s13^5)*s23^3 + 90*s13^5*s23^4) +
            p1q*p2q^4*(1458*s12^4*s13^5 + 1458*s12^3*s13^6 +
              (-3483*s12^4*s13^4 - 1071*s12^3*s13^5 + 801*s12^2*s13^6 -
                153*s12*s13^7)*s23 + (100*s12^5*s13^2 + 190*s12^4*s13^3 -
                5307*s12^3*s13^4 - 168*s12^2*s13^5 + 549*s12*s13^6 -
                90*s13^7)*s23^2 + (120*s12^4*s13^2 + 110*s12^3*s13^3 -
                2643*s12^2*s13^4 + 423*s12*s13^5 + 270*s13^6)*s23^3 +
              (-60*s12^3*s13^2 - 80*s12^2*s13^3 - 989*s12*s13^4 + 100*s13^5)*
               s23^4 + (-80*s12^2*s13^2 - 260*s13^4)*s23^5) +
            p1q^5*((90*s12^5 + 180*s12^4*s13 + 90*s12^3*s13^2)*s23^4 +
              (180*s12^4 + 180*s12^3*s13)*s23^5 + 90*s12^3*s23^6) +
            p1q^2*p2q^3*((9*s12^5*s13^3 - 3465*s12^4*s13^4 - 3321*s12^3*
                 s13^5 + 153*s12^2*s13^6)*s23 + (10*s12^5*s13^2 +
                2701*s12^4*s13^3 - 3012*s12^3*s13^4 - 1518*s12^2*s13^5 +
                549*s12*s13^6)*s23^2 + (70*s12^5*s13 + 100*s12^4*s13^2 +
                4163*s12^3*s13^3 - 2127*s12^2*s13^4 - 549*s12*s13^5 +
                270*s13^6)*s23^3 + (300*s12^4*s13 + 170*s12^3*s13^2 +
                2110*s12^2*s13^3 - 1169*s12*s13^4 - 260*s13^5)*s23^4 +
              (390*s12^3*s13 + 80*s12^2*s13^2 + 979*s12*s13^3 - 280*s13^4)*
               s23^5 + (160*s12^2*s13 + 250*s13^3)*s23^6) +
            p1q^4*p2q*((-90*s12^5*s13 - 828*s12^4*s13^2 - 585*s12^3*s13^3 +
                153*s12^2*s13^4)*s23^3 + (10*s12^5 - 170*s12^4*s13 -
                1158*s12^3*s13^2 + 66*s12^2*s13^3 + 243*s12*s13^4)*s23^4 +
              (-60*s12^4 - 160*s12^3*s13 - 573*s12^2*s13^2 + 90*s12*s13^3 +
                90*s13^4)*s23^5 + (-150*s12^3 - 80*s12^2*s13 - 323*s12*
                 s13^2 + 10*s13^3)*s23^6 + (-80*s12^2 - 80*s13^2)*s23^7) +
            p1q^3*p2q^2*((-27*s12^5*s13^2 + 2619*s12^4*s13^3 + 2340*s12^3*
                 s13^4 - 306*s12^2*s13^5)*s23^2 + (-20*s12^5*s13 -
                740*s12^4*s13^2 + 3549*s12^3*s13^3 + 651*s12^2*s13^4 -
                639*s12*s13^5)*s23^3 + (-80*s12^5 - 50*s12^4*s13 -
                991*s12^3*s13^2 + 2220*s12^2*s13^3 + 63*s12*s13^4 -
                270*s13^5)*s23^4 + (-240*s12^4 + 50*s12^3*s13 - 431*s12^2*
                 s13^2 + 1069*s12*s13^3 + 70*s13^4)*s23^5 + (-240*s12^3 +
                80*s12^2*s13 - 323*s12*s13^2 + 260*s13^3)*s23^6 +
              (-80*s12^2 - 80*s13^2)*s23^7) +
            p3q^4*(p2q*((90*s12^8 + 180*s12^7*s13 - 63*s12^6*s13^2 +
                  153*s12^4*s13^4)*s23 + (360*s12^7 + 270*s12^6*s13 -
                  423*s12^5*s13^2 + 216*s12^4*s13^3 + 243*s12^3*s13^4)*
                 s23^2 + (450*s12^6 - 90*s12^5*s13 - 360*s12^4*s13^2 +
                  333*s12^3*s13^3 + 90*s12^2*s13^4)*s23^3 +
                (180*s12^5 - 180*s12^4*s13 + 90*s12^2*s13^3)*s23^4) +
              p1q*((-90*s12^8 - 90*s12^7*s13 - 405*s12^6*s13^2 - 405*s12^5*
                   s13^3)*s23 + (-80*s12^7 + 280*s12^6*s13 - 465*s12^5*
                   s13^2 - 330*s12^4*s13^3)*s23^2 + (-150*s12^6 -
                  70*s12^5*s13 - 753*s12^4*s13^2 - 243*s12^3*s13^3)*s23^3 +
                (-420*s12^5 - 440*s12^4*s13 - 323*s12^3*s13^2 - 80*s12^2*
                   s13^3)*s23^4 + (-260*s12^4 - 80*s12^2*s13^2)*s23^5)) +
            p3q^3*(p2q^2*(1458*s12^6*s13^3 + 1458*s12^5*s13^4 +
                (90*s12^8 - 90*s12^7*s13 - 765*s12^6*s13^2 + 2133*s12^5*
                   s13^3 + 801*s12^4*s13^4 - 459*s12^3*s13^5)*s23 +
                (270*s12^7 - 630*s12^6*s13 - 1467*s12^5*s13^2 + 1584*s12^4*
                   s13^3 - 459*s12^3*s13^4 - 576*s12^2*s13^5)*s23^2 +
                (270*s12^6 - 900*s12^5*s13 - 522*s12^4*s13^2 + 846*s12^3*
                   s13^3 - 576*s12^2*s13^4 - 180*s12*s13^5)*s23^3 +
                (90*s12^5 - 360*s12^4*s13 + 90*s12^3*s13^2 + 180*s12^2*
                   s13^3 - 180*s12*s13^4)*s23^4) + p1q*p2q*(
                (360*s12^7*s13 - 837*s12^6*s13^2 - 405*s12^5*s13^3 +
                  792*s12^4*s13^4)*s23 + (-160*s12^7 + 180*s12^6*s13 -
                  2534*s12^5*s13^2 - 9*s12^4*s13^3 + 516*s12^3*s13^4)*s23^2 +
                (-840*s12^6 - 1100*s12^5*s13 - 2725*s12^4*s13^2 - 312*s12^3*
                   s13^3 + 180*s12^2*s13^4)*s23^3 + (-1200*s12^5 -
                  940*s12^4*s13 - 1188*s12^3*s13^2 - 20*s12*s13^4)*s23^4 +
                (-520*s12^4 - 20*s12^3*s13 - 160*s12^2*s13^2 - 20*s12*s13^3)*
                 s23^5) + p1q^2*((-90*s12^8 - 90*s12^7*s13 - 405*s12^6*
                   s13^2 - 405*s12^5*s13^3)*s23 + (100*s12^7 + 460*s12^6*
                   s13 + 345*s12^5*s13^2 + 480*s12^4*s13^3)*s23^2 +
                (190*s12^6 - 270*s12^5*s13 + 357*s12^4*s13^2 + 417*s12^3*
                   s13^3)*s23^3 + (-30*s12^5 - 480*s12^4*s13 + 913*s12^3*
                   s13^2 + 406*s12^2*s13^3)*s23^4 + (220*s12^4 + 340*s12^3*
                   s13 + 566*s12^2*s13^2 + 160*s12*s13^3)*s23^5 +
                (250*s12^3 + 160*s12*s13^2)*s23^6)) +
            p3q*(p2q^4*(-2916*s12^5*s13^4 - 1458*s12^4*s13^5 + 1458*s12^3*
                 s13^6 + (270*s12^6*s13^2 + 450*s12^5*s13^3 - 4743*s12^4*
                   s13^4 + 711*s12^3*s13^5 + 1107*s12^2*s13^6 - 153*s12*
                   s13^7)*s23 + (630*s12^5*s13^2 + 450*s12^4*s13^3 -
                  2583*s12^3*s13^4 + 1440*s12^2*s13^5 + 423*s12*s13^6 -
                  90*s13^7)*s23^2 + (450*s12^4*s13^2 - 666*s12^2*s13^4 +
                  666*s12*s13^5 + 90*s13^6)*s23^3 + (90*s12^3*s13^2 -
                  180*s12*s13^4 + 180*s13^5)*s23^4) + p1q*p2q^3*(
                -2916*s12^5*s13^4 - 2916*s12^4*s13^5 + (-1116*s12^5*s13^3 -
                  10053*s12^4*s13^4 - 5409*s12^3*s13^5 + 612*s12^2*s13^6)*
                 s23 + (160*s12^6*s13 + 540*s12^5*s13^2 - 769*s12^4*s13^3 -
                  9270*s12^3*s13^4 - 1632*s12^2*s13^5 + 972*s12*s13^6)*
                 s23^2 + (300*s12^5*s13 + 560*s12^4*s13^2 - 11*s12^3*s13^3 -
                  4872*s12^2*s13^4 - 306*s12*s13^5 + 360*s13^6)*s23^3 +
                (120*s12^4*s13 - 140*s12^3*s13^2 - 198*s12^2*s13^3 -
                  2178*s12*s13^4 - 160*s13^5)*s23^4 + (-20*s12^3*s13 -
                  160*s12^2*s13^2 - 20*s12*s13^3 - 520*s13^4)*s23^5) +
              p1q^2*p2q^2*((-513*s12^6*s13^2 - 2232*s12^5*s13^3 - 2430*s12^4*
                   s13^4 - 711*s12^3*s13^5)*s23 + (-20*s12^6*s13 -
                  127*s12^5*s13^2 + 1543*s12^4*s13^3 + 1041*s12^3*s13^4 -
                  1104*s12^2*s13^5)*s23^2 + (250*s12^6 + 510*s12^5*s13 +
                  628*s12^4*s13^2 + 4568*s12^3*s13^3 - 702*s12^2*s13^4 -
                  1368*s12*s13^5)*s23^3 + (750*s12^5 + 1130*s12^4*s13 +
                  680*s12^3*s13^2 + 3416*s12^2*s13^3 - 640*s12*s13^4 -
                  530*s13^5)*s23^4 + (750*s12^4 + 920*s12^3*s13 + 868*s12^2*
                   s13^2 + 1918*s12*s13^3 - 30*s13^4)*s23^5 +
                (250*s12^3 + 320*s12^2*s13 + 160*s12*s13^2 + 500*s13^3)*
                 s23^6) + p1q^3*p2q*((-180*s12^6*s13 + 657*s12^5*s13^2 +
                  1323*s12^4*s13^3 + 486*s12^3*s13^4)*s23^2 +
                (-20*s12^6 - 400*s12^5*s13 - 476*s12^4*s13^2 - 165*s12^3*
                   s13^3 + 462*s12^2*s13^4)*s23^3 + (140*s12^5 + 100*s12^4*
                   s13 - 1165*s12^3*s13^2 + 1062*s12^2*s13^3 + 792*s12*s13^4)*
                 s23^4 + (180*s12^4 + 320*s12^3*s13 - 358*s12^2*s13^2 +
                  806*s12*s13^3 + 340*s13^4)*s23^5 + (-140*s12^3 -
                  486*s12*s13^2 + 180*s13^3)*s23^6 + (-160*s12^2 - 160*s13^2)*
                 s23^7) + p1q^4*((-270*s12^6 - 450*s12^5*s13 - 585*s12^4*
                   s13^2 - 405*s12^3*s13^3)*s23^3 + (-440*s12^5 -
                  80*s12^4*s13 - 465*s12^3*s13^2 - 330*s12^2*s13^3)*s23^4 +
                (-150*s12^4 + 290*s12^3*s13 - 573*s12^2*s13^2 - 243*s12*
                   s13^3)*s23^5 + (-60*s12^3 - 80*s12^2*s13 - 323*s12*s13^2 -
                  80*s13^3)*s23^6 + (-80*s12^2 - 80*s13^2)*s23^7)) +
            p3q^2*(p2q^3*(1458*s12^6*s13^3 - 1458*s12^5*s13^4 - 2916*s12^4*
                 s13^5 + (-270*s12^7*s13 - 270*s12^6*s13^2 + 3159*s12^5*
                   s13^3 - 3429*s12^4*s13^4 - 1755*s12^3*s13^5 + 459*s12^2*
                   s13^6)*s23 + (-720*s12^6*s13 + 2646*s12^4*s13^3 -
                  2781*s12^3*s13^4 - 180*s12^2*s13^5 + 423*s12*s13^6)*s23^2 +
                (-630*s12^5*s13 + 450*s12^4*s13^2 + 765*s12^3*s13^3 -
                  1332*s12^2*s13^4 + 153*s12*s13^5 + 90*s13^6)*s23^3 +
                (-180*s12^4*s13 + 180*s12^3*s13^2 + 90*s12^2*s13^3 -
                  360*s12*s13^4 + 90*s13^5)*s23^4) + p1q*p2q^2*(1458*s12^6*
                 s13^3 + 1458*s12^5*s13^4 + (-1503*s12^6*s13^2 + 387*s12^5*
                   s13^3 - 414*s12^4*s13^4 - 846*s12^3*s13^5)*s23 +
                (-260*s12^7 - 570*s12^6*s13 - 2772*s12^5*s13^2 + 352*s12^4*
                   s13^3 - 1359*s12^3*s13^4 - 1392*s12^2*s13^5)*s23^2 +
                (-780*s12^6 - 910*s12^5*s13 - 1622*s12^4*s13^2 + 458*s12^3*
                   s13^3 - 2139*s12^2*s13^4 - 909*s12*s13^5)*s23^3 +
                (-780*s12^5 - 380*s12^4*s13 - 783*s12^3*s13^2 - 38*s12^2*
                   s13^3 - 1209*s12*s13^4 - 260*s13^5)*s23^4 +
                (-260*s12^4 - 40*s12^3*s13 - 160*s12^2*s13^2 - 40*s12*s13^3 -
                  260*s13^4)*s23^5) + p1q^2*p2q*((270*s12^7*s13 - 369*s12^6*
                   s13^2 + 639*s12^4*s13^4)*s23 + (10*s12^7 + 170*s12^6*s13 +
                  91*s12^5*s13^2 + 2238*s12^4*s13^3 + 759*s12^3*s13^4)*
                 s23^2 + (-10*s12^6 - 460*s12^5*s13 + 435*s12^4*s13^2 +
                  1083*s12^3*s13^3 + 399*s12^2*s13^4)*s23^3 +
                (450*s12^5 + 350*s12^4*s13 + 1009*s12^3*s13^2 + 1802*s12^2*
                   s13^3 + 529*s12*s13^4)*s23^4 + (970*s12^4 + 870*s12^3*
                   s13 + 1354*s12^2*s13^2 + 1099*s12*s13^3 + 250*s13^4)*
                 s23^5 + (500*s12^3 + 160*s12^2*s13 + 320*s12*s13^2 +
                  250*s13^3)*s23^6) + p1q^3*((270*s12^7 + 360*s12^6*s13 +
                  900*s12^5*s13^2 + 810*s12^4*s13^3)*s23^2 +
                (250*s12^6 - 470*s12^5*s13 + 525*s12^4*s13^2 + 255*s12^3*
                   s13^3)*s23^3 + (-50*s12^5 - 300*s12^4*s13 + 681*s12^3*
                   s13^2 + 156*s12^2*s13^3)*s23^4 + (150*s12^4 + 450*s12^3*
                   s13 + 73*s12^2*s13^2 - 83*s12*s13^3)*s23^5 +
                (100*s12^3 - 80*s12^2*s13 - 163*s12*s13^2 - 80*s13^3)*s23^6 +
                (-80*s12^2 - 80*s13^2)*s23^7))))/(108*p1q*p3q^4*s12^5*s13^3*
            s23^2 + 108*p1q*p2q^4*s12^3*s13^5*s23^2 + 108*p1q^4*p2q*s12^3*
            s13^3*s23^4 + p1q^2*p2q^3*(108*s12^3*s13^5*s23^2 -
             216*s12^3*s13^4*s23^3) + p1q^3*p2q^2*(-216*s12^3*s13^4*s23^3 +
             108*s12^3*s13^3*s23^4) + p3q^3*(p1q*p2q*(216*s12^5*s13^3 - 216*
                s12^4*s13^4)*s23^2 + p1q^2*(108*s12^5*s13^3*s23^2 - 216*s12^4*
                s13^3*s23^3)) + p3q^2*(p1q*p2q^2*(108*s12^5*s13^3 - 432*s12^4*
                s13^4 + 108*s12^3*s13^5)*s23^2 + p1q^2*p2q*
              ((108*s12^5*s13^3 - 216*s12^4*s13^4)*s23^2 + (-432*s12^4*
                  s13^3 - 216*s12^3*s13^4)*s23^3) + p1q^3*(-216*s12^4*s13^3*
                s23^3 + 108*s12^3*s13^3*s23^4)) +
           p3q*(p1q*p2q^3*(-216*s12^4*s13^4 + 216*s12^3*s13^5)*s23^2 +
             108*p1q^4*s12^3*s13^3*s23^4 + p1q^2*p2q^2*((-216*s12^4*s13^4 +
                 108*s12^3*s13^5)*s23^2 + (-216*s12^4*s13^3 - 432*s12^3*
                  s13^4)*s23^3) + p1q^3*p2q*((-216*s12^4*s13^3 - 216*s12^3*
                  s13^4)*s23^3 + 216*s12^3*s13^3*s23^4))) +
         ((p1q*p2q*((-9*s12^2 - 9*s12*s13)*s23 - 9*s12*s23^2) +
            p1q*p3q*((-9*s12^2 - 9*s12*s13)*s23 - 9*s12*s23^2) +
            p2q^2*(36*s12^2*s13 + 36*s12*s13^2 + (54*s12*s13 + 18*s13^2)*
               s23 + 18*s13*s23^2))*Log(p1q/(p1q + p2q + p3q))^2)/
          (2*p1q*p2q*s12*s13*s23^2 + 2*p1q*p3q*s12*s13*s23^2) +
         ((p2q^2*(18*s12^2*s13 + 18*s12*s13^2 + 18*s12*s13*s23) +
            p1q*p2q*((-9*s12^2 - 9*s12*s13)*s23 + (-10*s12 - s13)*s23^2 -
              s23^3) + p1q*p3q*((-9*s12^2 - 9*s12*s13)*s23 +
              (-10*s12 - s13)*s23^2 - s23^3))*Log(p2q/(p1q + p2q + p3q))^2)/
          (2*p1q*p2q*s12*s13*s23^2 + 2*p1q*p3q*s12*s13*s23^2) +
         ((p1q*p3q^5*((-s12^4 - s12^3*s13)*s23 - s12^3*s23^2) +
            p2q^6*(-18*s12^2*s13^3 - 36*s12*s13^4 - 18*s13^5 +
              (-36*s12*s13^3 - 36*s13^4)*s23 - 18*s13^3*s23^2) +
            p1q*p2q^5*(-27*s12*s13^4 - 27*s13^5 + (73*s12^2*s13^2 +
                119*s12*s13^3 + 19*s13^4)*s23 + (146*s12*s13^2 + 119*s13^3)*
               s23^2 + 73*s13^2*s23^3) + p1q^2*p2q^4*(-18*s12^3*s13^2 +
              9*s12*s13^4 - 9*s13^5 + (-35*s12^3*s13 - 5*s12^2*s13^2 +
                168*s12*s13^3 + 93*s13^4)*s23 + (-125*s12^2*s13 +
                13*s12*s13^2 + 157*s13^3)*s23^2 + (-146*s12*s13 - s13^2)*s23^
                3 - 56*s13*s23^4) + p1q^3*p2q^3*(-18*s12^3*s13^2 -
              18*s12^2*s13^3 + (-53*s12^3*s13 - 114*s12^2*s13^2 -
                5*s12*s13^3 + 38*s13^4)*s23 + (-s12^3 - 192*s12^2*s13 -
                230*s12*s13^2 - 11*s13^3)*s23^2 + (-2*s12^2 - 225*s12*s13 -
                135*s13^2)*s23^3 - 85*s13*s23^4 + s23^5) +
            p1q^5*p2q*((s12^2 + 3*s12*s13 + 2*s13^2)*s23^3 +
              (3*s12 + 4*s13)*s23^4 + 2*s23^5) + p1q^4*p2q^2*
             ((-18*s12^3*s13 - 36*s12^2*s13^2 - 18*s12*s13^3)*s23 +
              (-s12^3 - 67*s12^2*s13 - 97*s12*s13^2 - 31*s13^3)*s23^2 +
              (-s12^2 - 76*s12*s13 - 59*s13^2)*s23^3 + (3*s12 - 25*s13)*s23^
                4 + 3*s23^5) + p3q^4*(p2q^2*(-18*s12^4*s13 - 18*s12^3*s13^2 +
                (-34*s12^3*s13 - 16*s12^2*s13^2)*s23 - 16*s12^2*s13*s23^2) +
              p1q*p2q*(-9*s12^4*s13 - 9*s12^3*s13^2 + (s12^4 - 12*s12^3*s13 -
                  4*s12^2*s13^2)*s23 + 5*s12^3*s23^2 + 4*s12^2*s23^3) +
              p1q^2*((2*s12^3*s13 + 2*s12^2*s13^2)*s23 + (4*s12^3 +
                  6*s12^2*s13)*s23^2 + 4*s12^2*s23^3)) +
            p3q^3*(p2q^3*(-18*s12^4*s13 + 18*s12^3*s13^2 + 36*s12^2*s13^3 +
                (-16*s12^3*s13 + 70*s12^2*s13^2 + 32*s12*s13^3)*s23 +
                (18*s12^2*s13 + 48*s12*s13^2)*s23^2 + 16*s12*s13*s23^3) +
              p1q^2*p2q*(-18*s12^4*s13 - 9*s12^3*s13^2 + 9*s12^2*s13^3 +
                (4*s12^4 - 16*s12^3*s13 + 21*s12^2*s13^2 + 14*s12*s13^3)*
                 s23 + (12*s12^3 + 8*s12^2*s13 + 16*s12*s13^2)*s23^2 +
                (2*s12^2 - 4*s12*s13)*s23^3 - 6*s12*s23^4) +
              p1q^3*((s12^4 + 3*s12^3*s13 + 2*s12^2*s13^2)*s23 +
                (3*s12^3 - 4*s12*s13^2)*s23^2 + (-3*s12^2 - 9*s12*s13)*
                 s23^3 - 5*s12*s23^4) + p1q*p2q^2*(-27*s12^4*s13 +
                27*s12^2*s13^3 + (s12^4 - 2*s12^3*s13 + 80*s12^2*s13^2 +
                  29*s12*s13^3)*s23 + (s12^3 + 60*s12^2*s13 + 65*s12*s13^2)*
                 s23^2 + (-4*s12^2 + 32*s12*s13)*s23^3 - 4*s12*s23^4)) +
            p3q^2*(p2q^4*(-18*s12^4*s13 - 18*s12*s13^4 + (-36*s12^3*s13 -
                  4*s12^2*s13^2 - 38*s12*s13^3 - 16*s13^4)*s23 +
                (-20*s12^2*s13 - 22*s12*s13^2 - 32*s13^3)*s23^2 +
                (-2*s12*s13 - 16*s13^2)*s23^3) + p1q^2*p2q^2*(18*s12^4*s13 +
                63*s12^3*s13^2 + 27*s12^2*s13^3 - 18*s12*s13^4 +
                (3*s12^4 + 131*s12^3*s13 + 179*s12^2*s13^2 - 10*s12*s13^3 -
                  16*s13^4)*s23 + (s12^3 + 149*s12^2*s13 + 17*s12*s13^2 -
                  64*s13^3)*s23^2 + (-15*s12^2 - 4*s12*s13 - 80*s13^2)*
                 s23^3 + (-13*s12 - 32*s13)*s23^4) + p1q*p2q^3*(
                27*s12^3*s13^2 - 27*s12*s13^4 + (-s12^4 + 81*s12^3*s13 +
                  98*s12^2*s13^2 - 62*s12*s13^3 - 24*s13^4)*s23 +
                (-5*s12^3 + 127*s12^2*s13 - 6*s12*s13^2 - 68*s13^3)*s23^2 +
                (-8*s12^2 + 25*s12*s13 - 64*s13^2)*s23^3 + (-4*s12 - 20*s13)*
                 s23^4) + p1q^3*p2q*(18*s12^3*s13^2 + 18*s12^2*s13^3 +
                (2*s12^4 + 30*s12^3*s13 + 78*s12^2*s13^2 + 32*s12*s13^3)*
                 s23 + (37*s12^2*s13 + 39*s12*s13^2 - 4*s13^3)*s23^2 +
                (-16*s12^2 - 5*s12*s13 - 6*s13^2)*s23^3 - 12*s12*s23^4 +
                2*s23^5) + p1q^4*((-2*s12^3 - 6*s12^2*s13 - 4*s12*s13^2)*
                 s23^2 + (-6*s12^2 - 6*s12*s13 + 2*s13^2)*s23^3 +
                (-2*s12 + 4*s13)*s23^4 + 2*s23^5)) +
            p3q*(p2q^5*(36*s12^3*s13^2 + 54*s12^2*s13^3 + 18*s12*s13^4 +
                (72*s12^2*s13^2 + 56*s12*s13^3 + 2*s13^4)*s23 +
                (38*s12*s13^2 + 4*s13^3)*s23^2 + 2*s13^2*s23^3) +
              p1q^2*p2q^3*(18*s12^4*s13 - 18*s12^3*s13^2 - 54*s12^2*s13^3 -
                9*s12*s13^4 + 9*s13^5 + (-s12^4 + 42*s12^3*s13 - 79*s12^2*
                   s13^2 - 36*s12*s13^3 + 59*s13^4)*s23 + (-7*s12^3 -
                  86*s12^2*s13 - 238*s12*s13^2 - 15*s13^3)*s23^2 +
                (-13*s12^2 - 218*s12*s13 - 171*s13^2)*s23^3 +
                (-7*s12 - 106*s13)*s23^4) + p1q*p2q^4*(27*s12^2*s13^3 +
                36*s12*s13^4 + 9*s13^5 + (15*s12^2*s13^2 + 100*s12*s13^3 +
                  67*s13^4)*s23 + (-41*s12^2*s13 - 15*s12*s13^2 + 69*s13^3)*
                 s23^2 + (-79*s12*s13 - 27*s13^2)*s23^3 - 38*s13*s23^4) +
              p1q^5*((s12^2 + 3*s12*s13 + 2*s13^2)*s23^3 + (3*s12 + 4*s13)*
                 s23^4 + 2*s23^5) + p1q^3*p2q^2*(18*s12^4*s13 +
                18*s12^3*s13^2 - 18*s12^2*s13^3 - 18*s12*s13^4 +
                (s12^4 + 46*s12^3*s13 - 2*s12^2*s13^2 - 45*s12*s13^3 +
                  2*s13^4)*s23 + (-4*s12^3 - 47*s12^2*s13 - 169*s12*s13^2 -
                  69*s13^3)*s23^2 + (-15*s12^2 - 149*s12*s13 - 141*s13^2)*
                 s23^3 + (-7*s12 - 67*s13)*s23^4 + 3*s23^5) +
              p1q^4*p2q*((-3*s12^3 - 19*s12^2*s13 - 29*s12*s13^2 - 13*s13^3)*
                 s23^2 + (-7*s12^2 - 28*s12*s13 - 21*s13^2)*s23^3 +
                (s12 - 3*s13)*s23^4 + 5*s23^5)))*
           Log((p1q + p2q)/(p1q + p2q + p3q))^2)/(2*p1q*p3q^5*s12^4*s13*s23 +
           p1q*p2q^5*(-2*s12*s13^4*s23 - 2*s12*s13^3*s23^2) +
           p1q^2*p2q^4*(-4*s12*s13^4*s23 + 4*s12*s13^2*s23^3) +
           p1q^4*p2q^2*(4*s12*s13^3*s23^2 - 4*s12*s13*s23^4) +
           p1q^5*p2q*(-2*s12*s13^2*s23^3 - 2*s12*s13*s23^4) +
           p1q^3*p2q^3*(-2*s12*s13^4*s23 + 6*s12*s13^3*s23^2 +
             6*s12*s13^2*s23^3 - 2*s12*s13*s23^4) +
           p3q^4*(p1q^2*((2*s12^4*s13 - 2*s12^3*s13^2)*s23 - 6*s12^3*s13*
                s23^2) + p1q*p2q*((4*s12^4*s13 - 6*s12^3*s13^2)*s23 - 2*s12^3*
                s13*s23^2)) + p3q^3*(p1q*p2q^2*((2*s12^4*s13 - 12*s12^3*
                  s13^2 + 6*s12^2*s13^3)*s23 + (-4*s12^3*s13 + 4*s12^2*s13^2)*
                s23^2) + p1q^2*p2q*((2*s12^4*s13 - 10*s12^3*s13^2 +
                 4*s12^2*s13^3)*s23 + (-14*s12^3*s13 + 4*s12^2*s13^2)*s23^2 +
               4*s12^2*s13*s23^3) + p1q^3*(-2*s12^3*s13^2*s23 +
               (-6*s12^3*s13 + 4*s12^2*s13^2)*s23^2 + 6*s12^2*s13*s23^3)) +
           p3q*(p1q*p2q^4*((6*s12^2*s13^3 - 4*s12*s13^4)*s23 +
               (4*s12^2*s13^2 - 4*s12*s13^3)*s23^2) + p1q^2*p2q^3*
              ((10*s12^2*s13^3 - 6*s12*s13^4)*s23 + (8*s12^2*s13^2 +
                 2*s12*s13^3)*s23^2 + (4*s12^2*s13 + 8*s12*s13^2)*s23^3) +
             p1q^4*p2q*((4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 + (6*s12^2*s13 -
                 2*s12*s13^2)*s23^3 - 6*s12*s13*s23^4) + p1q^3*p2q^2*
              ((4*s12^2*s13^3 - 2*s12*s13^4)*s23 + (8*s12^2*s13^2 +
                 10*s12*s13^3)*s23^2 + (10*s12^2*s13 + 8*s12*s13^2)*s23^3 - 4*
                s12*s13*s23^4) + p1q^5*(-2*s12*s13^2*s23^3 - 2*s12*s13*
                s23^4)) + p3q^2*(p1q*p2q^3*((-6*s12^3*s13^2 + 12*s12^2*
                  s13^3 - 2*s12*s13^4)*s23 + (-2*s12^3*s13 + 8*s12^2*s13^2 -
                 2*s12*s13^3)*s23^2) + p1q^2*p2q^2*((-8*s12^3*s13^2 +
                 14*s12^2*s13^3 - 2*s12*s13^4)*s23 + (-8*s12^3*s13 +
                 12*s12^2*s13^2 + 2*s12*s13^3)*s23^2 + (8*s12^2*s13 +
                 4*s12*s13^2)*s23^3) + p1q^4*(4*s12^2*s13^2*s23^2 +
               (6*s12^2*s13 - 2*s12*s13^2)*s23^3 - 2*s12*s13*s23^4) +
             p1q^3*p2q*((-2*s12^3*s13^2 + 4*s12^2*s13^3)*s23 +
               (-6*s12^3*s13 + 12*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
               (16*s12^2*s13 + 2*s12*s13^2)*s23^3 - 2*s12*s13*s23^4))) +
         ((p2q^2*(18*s12^2*s13 + 18*s12*s13^2 + (36*s12*s13 + 18*s13^2)*s23 +
              18*s13*s23^2) + p1q*p2q*((-s12 - s13)*s23^2 - s23^3) +
            p1q*p3q*((-s12 - s13)*s23^2 - s23^3))*Log(p3q/(p1q + p2q + p3q))^
            2)/(2*p1q*p2q*s12*s13*s23^2 + 2*p1q*p3q*s12*s13*s23^2) +
         ((p1q*p3q^4*((-s12^3 - s12^2*s13)*s23 - s12^2*s23^2) +
            p1q*p2q^4*(9*s12^2*s13^2 + 9*s12*s13^3 + (7*s12*s13^2 - 2*s13^3)*
               s23 - 2*s13^2*s23^2) + p1q^2*p2q^3*(-18*s12^3*s13 -
              18*s12^2*s13^2 + (-28*s12^2*s13 - 12*s12*s13^2 - 2*s13^3)*s23 -
              8*s12*s13*s23^2 + 2*s13*s23^3) + p1q^3*p2q^2*
             ((s12^2 + 4*s12*s13 + 3*s13^2)*s23^2 + (s12 + 3*s13)*s23^3) +
            p1q^4*p2q*((-s12 - s13)*s23^3 - s23^4) +
            p3q^3*(p2q^2*(18*s12^4 + 18*s12^3*s13 + (36*s12^3 + 16*s12^2*
                   s13 - 2*s12*s13^2)*s23 + (18*s12^2 - 2*s12*s13)*s23^2) +
              p1q^2*((-s12^3 - s12^2*s13)*s23 + (s12^2 + 2*s12*s13)*s23^2 +
                2*s12*s23^3) + p1q*p2q*(-9*s12^4 + 9*s12^3*s13 +
                18*s12^2*s13^2 + (14*s12^3 + 78*s12^2*s13 + 37*s12*s13^2)*
                 s23 + (57*s12^2 + 71*s12*s13)*s23^2 + 34*s12*s23^3)) +
            p3q^2*(p2q^3*(-36*s12^3*s13 - 36*s12^2*s13^2 + (-56*s12^2*s13 -
                  18*s12*s13^2 + 2*s13^3)*s23 + (-20*s12*s13 + 2*s13^2)*
                 s23^2) + p1q*p2q^2*(27*s12^4 + 45*s12^3*s13 - 18*s12*s13^3 +
                (69*s12^3 + 35*s12^2*s13 - 43*s12*s13^2)*s23 +
                (58*s12^2 - 9*s12*s13)*s23^2 + 16*s12*s23^3) +
              p1q^3*((2*s12^2 + 2*s12*s13)*s23^2 + (s12 - s13)*s23^3 -
                s23^4) + p1q^2*p2q*(18*s12^3*s13 + 18*s12^2*s13^2 +
                (61*s12^3 + 134*s12^2*s13 + 55*s12*s13^2)*s23 +
                (129*s12^2 + 126*s12*s13 + 3*s13^2)*s23^2 + (70*s12 + 5*s13)*
                 s23^3 + 2*s23^4)) + p3q*(p2q^4*(18*s12^2*s13^2 +
                18*s12*s13^3 + (20*s12*s13^2 + 2*s13^3)*s23 + 2*s13^2*
                 s23^2) + p1q*p2q^3*(-36*s12^3*s13 - 45*s12^2*s13^2 -
                9*s12*s13^3 + (-80*s12^2*s13 - 55*s12*s13^2 - 2*s13^3)*s23 +
                (-44*s12*s13 - 2*s13^2)*s23^2) + p1q^4*((-s12 - s13)*s23^3 -
                s23^4) + p1q^3*p2q*((18*s12^3 + 36*s12^2*s13 + 18*s12*s13^2)*
                 s23 + (39*s12^2 + 42*s12*s13 + 3*s13^2)*s23^2 +
                (20*s12 + 2*s13)*s23^3 - s23^4) + p1q^2*p2q^2*(18*s12^4 +
                18*s12^3*s13 - 18*s12^2*s13^2 - 18*s12*s13^3 +
                (62*s12^3 + 35*s12^2*s13 - 29*s12*s13^2 - 2*s13^3)*s23 +
                (74*s12^2 + 26*s12*s13 + 3*s13^2)*s23^2 + (32*s12 + 7*s13)*
                 s23^3 + 2*s23^4)))*Log((p1q + p3q)/(p1q + p2q + p3q))^2)/
          (2*p1q*p3q^4*s12^3*s13*s23 + 2*p1q*p2q^4*s12*s13^3*s23 +
           2*p1q^4*p2q*s12*s13*s23^3 + p1q^2*p2q^3*(2*s12*s13^3*s23 -
             4*s12*s13^2*s23^2) + p1q^3*p2q^2*(-4*s12*s13^2*s23^2 +
             2*s12*s13*s23^3) + p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*
              s23 + p1q^2*(2*s12^3*s13*s23 - 4*s12^2*s13*s23^2)) +
           p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*s23 +
             p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23 + (-8*s12^2*s13 -
                 4*s12*s13^2)*s23^2) + p1q^3*(-4*s12^2*s13*s23^2 + 2*s12*s13*
                s23^3)) + p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23 +
             2*p1q^4*s12*s13*s23^3 + p1q^2*p2q^2*((-4*s12^2*s13^2 +
                 2*s12*s13^3)*s23 + (-4*s12^2*s13 - 8*s12*s13^2)*s23^2) +
             p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*s23^2 + 4*s12*s13*
                s23^3))) + ((p2q^6*(54*s12^3*s13^3 + 108*s12^2*s13^4 +
              54*s12*s13^5 + (108*s12^2*s13^3 + 126*s12*s13^4 + 18*s13^5)*
               s23 + (54*s12*s13^3 + 18*s13^4)*s23^2) +
            p1q*p3q^5*((-9*s12^5 - 18*s12^4*s13 - 9*s12^3*s13^2)*s23 +
              (-18*s12^4 - 18*s12^3*s13)*s23^2 - 9*s12^3*s23^3) +
            p1q*p2q^5*(54*s12^3*s13^3 + 108*s12^2*s13^4 + 54*s12*s13^5 +
              (-153*s12^3*s13^2 - 207*s12^2*s13^3 - 27*s12*s13^4 + 27*s13^5)*
               s23 + (-279*s12^2*s13^2 - 279*s12*s13^3 - 18*s13^4)*s23^2 +
              (-126*s12*s13^2 - 45*s13^3)*s23^3) + p1q^2*p2q^4*
             ((27*s12^4*s13 - 99*s12^3*s13^2 - 297*s12^2*s13^3 -
                171*s12*s13^4)*s23 + (153*s12^3*s13 + 27*s12^2*s13^2 -
                225*s12*s13^3 - 81*s13^4)*s23^2 + (216*s12^2*s13 +
                153*s12*s13^2 - 45*s13^3)*s23^3 + (90*s12*s13 + 36*s13^2)*s23^
                4) + p1q^4*p2q^2*((-9*s12^3 - 63*s12^2*s13 - 54*s12*s13^2)*
               s23^3 + (-18*s12^2 - 90*s12*s13 - 27*s13^2)*s23^4 +
              (-9*s12 - 27*s13)*s23^5) + p1q^3*p2q^3*
             ((-9*s12^4 + 72*s12^3*s13 + 252*s12^2*s13^2 + 171*s12*s13^3)*s23^
                2 + (-36*s12^3 + 90*s12^2*s13 + 288*s12*s13^2 + 81*s13^3)*s23^
                3 + (-45*s12^2 + 9*s12*s13 + 72*s13^2)*s23^4 +
              (-18*s12 - 9*s13)*s23^5) + p3q^4*(p2q^2*(54*s12^5*s13 +
                108*s12^4*s13^2 + 54*s12^3*s13^3 + (126*s12^4*s13 +
                  162*s12^3*s13^2 + 36*s12^2*s13^3)*s23 + (108*s12^3*s13 +
                  72*s12^2*s13^2)*s23^2 + 36*s12^2*s13*s23^3) +
              p1q^2*((-9*s12^5 - 18*s12^4*s13 - 9*s12^3*s13^2)*s23 +
                (18*s12^3*s13 + 18*s12^2*s13^2)*s23^2 + (27*s12^3 +
                  36*s12^2*s13)*s23^3 + 18*s12^2*s23^4) + p1q*p2q*(
                (-9*s12^5 + 45*s12^4*s13 + 117*s12^3*s13^2 + 63*s12^2*s13^3)*
                 s23 + (153*s12^3*s13 + 207*s12^2*s13^2 + 54*s12*s13^3)*
                 s23^2 + (27*s12^3 + 144*s12^2*s13 + 90*s12*s13^2)*s23^3 +
                (18*s12^2 + 36*s12*s13)*s23^4)) +
            p3q^3*(p2q^3*(108*s12^5*s13 + 108*s12^4*s13^2 - 108*s12^3*s13^3 -
                108*s12^2*s13^4 + (234*s12^4*s13 + 36*s12^3*s13^2 -
                  270*s12^2*s13^3 - 72*s12*s13^4)*s23 + (180*s12^3*s13 -
                  90*s12^2*s13^2 - 126*s12*s13^3)*s23^2 + (54*s12^2*s13 -
                  54*s12*s13^2)*s23^3) + p1q*p2q^2*(54*s12^5*s13 +
                108*s12^4*s13^2 + 54*s12^3*s13^3 + (9*s12^5 + 72*s12^4*s13 -
                  18*s12^3*s13^2 - 144*s12^2*s13^3 - 63*s12*s13^4)*s23 +
                (54*s12^4 + 99*s12^3*s13 - 144*s12^2*s13^2 - 189*s12*s13^3 -
                  18*s13^4)*s23^2 + (81*s12^3 + 117*s12^2*s13 - 108*s12*
                   s13^2 - 54*s13^3)*s23^3 + (36*s12^2 + 36*s12*s13 -
                  36*s13^2)*s23^4) + p1q^2*p2q*((-9*s12^5 + 54*s12^4*s13 +
                  135*s12^3*s13^2 + 72*s12^2*s13^3)*s23 + (27*s12^4 +
                  198*s12^3*s13 + 261*s12^2*s13^2 + 90*s12*s13^3)*s23^2 +
                (63*s12^3 + 162*s12^2*s13 + 126*s12*s13^2)*s23^3 +
                (9*s12^2 + 18*s12*s13)*s23^4 - 18*s12*s23^5) +
              p1q^3*((18*s12^4 + 36*s12^3*s13 + 18*s12^2*s13^2)*s23^2 +
                (27*s12^3 + 18*s12^2*s13 - 9*s12*s13^2)*s23^3 - 18*s12*s13*
                 s23^4 - 9*s12*s23^5)) + p3q^2*(p2q^4*(54*s12^5*s13 -
                108*s12^4*s13^2 - 324*s12^3*s13^3 - 108*s12^2*s13^4 +
                54*s12*s13^5 + (108*s12^4*s13 - 342*s12^3*s13^2 - 432*s12^2*
                   s13^3 + 54*s12*s13^4 + 36*s13^5)*s23 + (72*s12^3*s13 -
                  288*s12^2*s13^2 - 90*s12*s13^3 + 54*s13^4)*s23^2 +
                (18*s12^2*s13 - 72*s12*s13^2 + 18*s13^3)*s23^3) +
              p1q*p2q^3*(54*s12^5*s13 - 162*s12^3*s13^3 - 108*s12^2*s13^4 +
                (9*s12^5 - 63*s12^4*s13 - 594*s12^3*s13^2 - 738*s12^2*s13^3 -
                  207*s12*s13^4 + 9*s13^5)*s23 + (36*s12^4 - 135*s12^3*s13 -
                  774*s12^2*s13^2 - 585*s12*s13^3 - 36*s13^4)*s23^2 +
                (45*s12^3 + 36*s12^2*s13 - 342*s12*s13^2 - 117*s13^3)*s23^3 +
                (18*s12^2 + 54*s12*s13 - 72*s13^2)*s23^4) + p1q^3*p2q*(
                (27*s12^4 + 9*s12^3*s13 + 18*s12*s13^3)*s23^2 +
                (18*s12^3 - 45*s12^2*s13 - 9*s12*s13^2 - 9*s13^3)*s23^3 +
                (-45*s12^2 - 54*s12*s13 - 9*s13^2)*s23^4 - 36*s12*s23^5) +
              p1q^4*((-9*s12^3 - 18*s12^2*s13 - 9*s12*s13^2)*s23^3 +
                (-18*s12^2 - 18*s12*s13)*s23^4 - 9*s12*s23^5) +
              p1q^2*p2q^2*((9*s12^5 - 63*s12^4*s13 - 162*s12^3*s13^2 -
                  117*s12^2*s13^3 - 27*s12*s13^4)*s23 + (54*s12^4 +
                  144*s12^3*s13 + 72*s12^2*s13^2 - 36*s12*s13^3)*s23^2 +
                (45*s12^3 + 342*s12^2*s13 + 153*s12*s13^2 - 9*s13^3)*s23^3 +
                (-36*s12^2 + 153*s12*s13 + 9*s13^2)*s23^4 +
                (-36*s12 + 18*s13)*s23^5)) + p3q*(p2q^5*(-108*s12^4*s13^2 -
                108*s12^3*s13^3 + 108*s12^2*s13^4 + 108*s12*s13^5 +
                (-216*s12^3*s13^2 - 18*s12^2*s13^3 + 252*s12*s13^4 +
                  54*s13^5)*s23 + (-126*s12^2*s13^2 + 90*s12*s13^3 +
                  72*s13^4)*s23^2 + (-18*s12*s13^2 + 18*s13^3)*s23^3) +
              p1q*p2q^4*(-108*s12^4*s13^2 - 162*s12^3*s13^3 + 54*s12*s13^5 +
                (-72*s12^4*s13 - 603*s12^3*s13^2 - 738*s12^2*s13^3 -
                  171*s12*s13^4 + 36*s13^5)*s23 + (-81*s12^3*s13 -
                  756*s12^2*s13^2 - 675*s12*s13^3 - 54*s13^4)*s23^2 +
                (27*s12^2*s13 - 342*s12*s13^2 - 144*s13^3)*s23^3 +
                (36*s12*s13 - 54*s13^2)*s23^4) + p1q^3*p2q^2*(
                (171*s12^3*s13 + 198*s12^2*s13^2 + 27*s12*s13^3)*s23^2 +
                (-45*s12^3 + 207*s12^2*s13 + 108*s12*s13^2)*s23^3 +
                (-90*s12^2 + 27*s12*s13 - 9*s13^2)*s23^4 + (-45*s12 - 9*s13)*
                 s23^5) + p1q^4*p2q*((-18*s12^3 - 9*s12^2*s13 + 9*s12*s13^2)*
                 s23^3 + (-36*s12^2 + 9*s13^2)*s23^4 + (-18*s12 + 9*s13)*
                 s23^5) + p1q^2*p2q^3*((9*s12^5 - 18*s12^4*s13 - 135*s12^3*
                   s13^2 - 216*s12^2*s13^3 - 108*s12*s13^4)*s23 +
                (27*s12^4 + 333*s12^3*s13 + 324*s12^2*s13^2 - 63*s12*s13^3 -
                  45*s13^4)*s23^2 + (9*s12^3 + 648*s12^2*s13 + 450*s12*s13^2)*
                 s23^3 + (-27*s12^2 + 333*s12*s13 + 81*s13^2)*s23^4 +
                (-18*s12 + 36*s13)*s23^5)))*
           Log((p2q + p3q)/(p1q + p2q + p3q))^2)/
          (p1q*p3q^5*(2*s12^4*s13 + 2*s12^3*s13^2)*s23^2 +
           p1q*p2q^5*(2*s12^2*s13^3 + 2*s12*s13^4)*s23^2 -
           2*p1q^5*p2q*s12*s13*s23^5 + p1q^2*p2q^4*
            ((2*s12^2*s13^3 + 2*s12*s13^4)*s23^2 + (-4*s12^2*s13^2 - 6*s12*
                s13^3)*s23^3) + p1q^3*p2q^3*((-4*s12^2*s13^2 - 6*s12*s13^3)*
              s23^3 + (2*s12^2*s13 + 6*s12*s13^2)*s23^4) +
           p1q^4*p2q^2*((2*s12^2*s13 + 6*s12*s13^2)*s23^4 -
             2*s12*s13*s23^5) + p3q^4*(p1q*p2q*(6*s12^4*s13 + 2*s12^3*s13^2 -
               4*s12^2*s13^3)*s23^2 + p1q^2*((2*s12^4*s13 + 2*s12^3*s13^2)*
                s23^2 + (-6*s12^3*s13 - 4*s12^2*s13^2)*s23^3)) +
           p3q^3*(p1q*p2q^2*(6*s12^4*s13 - 6*s12^3*s13^2 - 10*s12^2*s13^3 + 2*
                s12*s13^4)*s23^2 + p1q^2*p2q*((4*s12^4*s13 - 4*s12^2*s13^3)*
                s23^2 + (-16*s12^3*s13 - 12*s12^2*s13^2 - 4*s12*s13^3)*
                s23^3) + p1q^3*((-6*s12^3*s13 - 4*s12^2*s13^2)*s23^3 +
               (6*s12^2*s13 + 2*s12*s13^2)*s23^4)) +
           p3q*(p1q*p2q^4*(-4*s12^3*s13^2 + 2*s12^2*s13^3 + 6*s12*s13^4)*
              s23^2 - 2*p1q^5*s12*s13*s23^5 + p1q^2*p2q^3*
              ((-4*s12^3*s13^2 + 4*s12*s13^4)*s23^2 + (-4*s12^3*s13 -
                 12*s12^2*s13^2 - 16*s12*s13^3)*s23^3) + p1q^3*p2q^2*
              ((-4*s12^3*s13 - 8*s12^2*s13^2 - 10*s12*s13^3)*s23^3 +
               (10*s12^2*s13 + 14*s12*s13^2)*s23^4) + p1q^4*p2q*
              ((8*s12^2*s13 + 8*s12*s13^2)*s23^4 - 4*s12*s13*s23^5)) +
           p3q^2*(p1q*p2q^3*(2*s12^4*s13 - 10*s12^3*s13^2 - 6*s12^2*s13^3 + 6*
                s12*s13^4)*s23^2 + p1q^2*p2q^2*((2*s12^4*s13 - 6*s12^3*
                  s13^2 - 6*s12^2*s13^3 + 2*s12*s13^4)*s23^2 +
               (-14*s12^3*s13 - 16*s12^2*s13^2 - 14*s12*s13^3)*s23^3) +
             p1q^3*p2q*((-10*s12^3*s13 - 8*s12^2*s13^2 - 4*s12*s13^3)*s23^3 +
               (14*s12^2*s13 + 10*s12*s13^2)*s23^4) +
             p1q^4*((6*s12^2*s13 + 2*s12*s13^2)*s23^4 - 2*s12*s13*s23^5))) +
         ((p2q^2*(144*s12^2*s13 + 144*s12*s13^2 + (216*s12*s13 + 72*s13^2)*
               s23 + 72*s13*s23^2) + p1q*p2q*((-36*s12^2 - 36*s12*s13)*s23 +
              (-40*s12 - 4*s13)*s23^2 - 4*s23^3) + p1q*p3q*
             ((-36*s12^2 - 36*s12*s13)*s23 + (-40*s12 - 4*s13)*s23^2 -
              4*s23^3))*Log(-s12 - s13 - s23)^2)/(9*p1q*p2q*s12*s13*s23^2 +
           9*p1q*p3q*s12*s13*s23^2) +
         ((p2q^2*(18*s12^2*s13 + 18*s12*s13^2 + (36*s12*s13 + 18*s13^2)*s23 +
              18*s13*s23^2) + p1q*p2q*((-s12 - s13)*s23^2 - s23^3) +
            p1q*p3q*((-s12 - s13)*s23^2 - s23^3))*Log(s12/(s12 + s13 + s23))^
            2)/(2*p1q*p2q*s12*s13*s23^2 + 2*p1q*p3q*s12*s13*s23^2) +
         ((p2q^2*(18*s12^2*s13 + 18*s12*s13^2 + 18*s12*s13*s23) +
            p1q*p2q*((-9*s12^2 - 9*s12*s13)*s23 + (-10*s12 - s13)*s23^2 -
              s23^3) + p1q*p3q*((-9*s12^2 - 9*s12*s13)*s23 +
              (-10*s12 - s13)*s23^2 - s23^3))*Log(s13/(s12 + s13 + s23))^2)/
          (2*p1q*p2q*s12*s13*s23^2 + 2*p1q*p3q*s12*s13*s23^2) +
         ((p1q^2*((90*s12^6 + 360*s12^5*s13 + 648*s12^4*s13^2 + 576*s12^3*
                 s13^3 + 198*s12^2*s13^4)*s23^2 + (180*s12^5 + 540*s12^4*
                 s13 + 756*s12^3*s13^2 + 396*s12^2*s13^3)*s23^3 +
              (90*s12^4 + 180*s12^3*s13 + 198*s12^2*s13^2)*s23^4) +
            p3q^2*((90*s12^6 + 360*s12^5*s13 + 648*s12^4*s13^2 +
                576*s12^3*s13^3 + 198*s12^2*s13^4)*s23^2 + (180*s12^5 +
                540*s12^4*s13 + 756*s12^3*s13^2 + 396*s12^2*s13^3)*s23^3 +
              (90*s12^4 + 180*s12^3*s13 + 198*s12^2*s13^2)*s23^4) +
            p2q^2*(1512*s12^6*s13^2 + 6048*s12^5*s13^3 + 9072*s12^4*s13^4 +
              6048*s12^3*s13^5 + 1512*s12^2*s13^6 + (-90*s12^6*s13 +
                2556*s12^5*s13^2 + 8154*s12^4*s13^3 + 8442*s12^3*s13^4 +
                3096*s12^2*s13^5 + 162*s12*s13^6)*s23 + (-180*s12^5*s13 +
                1332*s12^4*s13^2 + 3150*s12^3*s13^3 + 1926*s12^2*s13^4 +
                198*s12*s13^5 - 90*s13^6)*s23^2 + (-90*s12^4*s13 +
                486*s12^3*s13^2 + 756*s12^2*s13^3 + 396*s12*s13^4)*s23^3 +
              (198*s12^2*s13^2 + 180*s12*s13^3 + 90*s13^4)*s23^4) +
            p1q*p2q*((-81*s12^6*s13 - 792*s12^5*s13^2 - 1728*s12^4*s13^3 -
                1620*s12^3*s13^4 - 603*s12^2*s13^5)*s23 + (-80*s12^6 -
                660*s12^5*s13 - 1680*s12^4*s13^2 - 1293*s12^3*s13^3 -
                272*s12^2*s13^4 + 137*s12*s13^5)*s23^2 + (-240*s12^5 -
                1353*s12^4*s13 - 1831*s12^3*s13^2 - 516*s12^2*s13^3 +
                184*s12*s13^4 + 90*s13^5)*s23^3 + (-240*s12^4 - 1138*s12^3*
                 s13 - 1395*s12^2*s13^2 - 487*s12*s13^3 + 10*s13^4)*s23^4 +
              (-80*s12^3 - 364*s12^2*s13 - 364*s12*s13^2 - 80*s13^3)*s23^5) +
            p3q*(p2q*((90*s12^7 + 360*s12^6*s13 + 702*s12^5*s13^2 +
                  630*s12^4*s13^3 + 144*s12^3*s13^4 - 54*s12^2*s13^5)*s23 +
                (270*s12^6 + 810*s12^5*s13 + 1656*s12^4*s13^2 + 1836*s12^3*
                   s13^3 + 1026*s12^2*s13^4 + 306*s12*s13^5)*s23^2 +
                (270*s12^5 + 630*s12^4*s13 + 1440*s12^3*s13^2 + 1350*s12^2*
                   s13^3 + 576*s12*s13^4 + 90*s13^5)*s23^3 +
                (90*s12^4 + 180*s12^3*s13 + 396*s12^2*s13^2 + 180*s12*s13^3 +
                  90*s13^4)*s23^4) + p1q*((-90*s12^7 - 441*s12^6*s13 -
                  1494*s12^5*s13^2 - 2358*s12^4*s13^3 - 1764*s12^3*s13^4 -
                  549*s12^2*s13^5)*s23 + (-170*s12^6 - 750*s12^5*s13 -
                  2040*s12^4*s13^2 - 1977*s12^3*s13^3 - 902*s12^2*s13^4 -
                  169*s12*s13^5)*s23^2 + (-150*s12^5 - 903*s12^4*s13 -
                  1759*s12^3*s13^2 - 1074*s12^2*s13^3 - 392*s12*s13^4)*
                 s23^3 + (-150*s12^4 - 958*s12^3*s13 - 1395*s12^2*s13^2 -
                  667*s12*s13^3 - 80*s13^4)*s23^4 + (-80*s12^3 - 364*s12^2*
                   s13 - 364*s12*s13^2 - 80*s13^3)*s23^5)))*
           Log(s23/(s12 + s13 + s23)))/(p1q*p2q*(18*s12^5*s13^2 +
             54*s12^4*s13^3 + 54*s12^3*s13^4 + 18*s12^2*s13^5)*s23^2 +
           p1q*p3q*(18*s12^5*s13^2 + 54*s12^4*s13^3 + 54*s12^3*s13^4 +
             18*s12^2*s13^5)*s23^2) +
         ((p3q^5*((-90*s12^7 - 180*s12^6*s13 - 90*s12^5*s13^2)*s23^2 +
              (-180*s12^6 - 180*s12^5*s13)*s23^3 - 90*s12^5*s23^4) +
            p2q^5*(-324*s12^4*s13^5 - 324*s12^3*s13^6 + (90*s12^5*s13^3 +
                180*s12^4*s13^4 - 549*s12^3*s13^5 - 162*s12^2*s13^6 +
                153*s12*s13^7)*s23 + (180*s12^4*s13^3 + 180*s12^3*s13^4 -
                558*s12^2*s13^5 + 90*s13^7)*s23^2 + (90*s12^3*s13^3 -
                333*s12*s13^5)*s23^3 - 90*s13^5*s23^4) +
            p1q*p2q^4*(-324*s12^4*s13^5 - 324*s12^3*s13^6 +
              (567*s12^4*s13^4 - 306*s12^3*s13^5 - 396*s12^2*s13^6 +
                153*s12*s13^7)*s23 + (-100*s12^5*s13^2 - 190*s12^4*s13^3 +
                1086*s12^3*s13^4 - 732*s12^2*s13^5 - 549*s12*s13^6 +
                90*s13^7)*s23^2 + (-120*s12^4*s13^2 - 110*s12^3*s13^3 +
                1338*s12^2*s13^4 - 423*s12*s13^5 - 270*s13^6)*s23^3 +
              (60*s12^3*s13^2 + 80*s12^2*s13^3 + 989*s12*s13^4 - 100*s13^5)*
               s23^4 + (80*s12^2*s13^2 + 260*s13^4)*s23^5) +
            p1q^5*((-90*s12^5 - 180*s12^4*s13 - 90*s12^3*s13^2)*s23^4 +
              (-180*s12^4 - 180*s12^3*s13)*s23^5 - 90*s12^3*s23^6) +
            p1q^2*p2q^3*((315*s12^5*s13^3 + 1278*s12^4*s13^4 + 810*s12^3*
                 s13^5 - 153*s12^2*s13^6)*s23 + (-10*s12^5*s13^2 +
                53*s12^4*s13^3 + 1950*s12^3*s13^4 + 537*s12^2*s13^5 -
                549*s12*s13^6)*s23^2 + (-70*s12^5*s13 - 100*s12^4*s13^2 -
                869*s12^3*s13^3 + 2010*s12^2*s13^4 + 549*s12*s13^5 -
                270*s13^6)*s23^3 + (-300*s12^4*s13 - 170*s12^3*s13^2 -
                1246*s12^2*s13^3 + 1169*s12*s13^4 + 260*s13^5)*s23^4 +
              (-390*s12^3*s13 - 80*s12^2*s13^2 - 979*s12*s13^3 + 280*s13^4)*
               s23^5 + (-160*s12^2*s13 - 250*s13^3)*s23^6) +
            p1q^3*p2q^2*((9*s12^5*s13^2 - 792*s12^4*s13^3 - 495*s12^3*s13^4 +
                306*s12^2*s13^5)*s23^2 + (20*s12^5*s13 + 362*s12^4*s13^2 -
                1461*s12^3*s13^3 - 48*s12^2*s13^4 + 639*s12*s13^5)*s23^3 +
              (80*s12^5 + 50*s12^4*s13 + 586*s12^3*s13^2 - 1662*s12^2*s13^3 -
                63*s12*s13^4 + 270*s13^5)*s23^4 + (240*s12^4 - 50*s12^3*s13 +
                386*s12^2*s13^2 - 1069*s12*s13^3 - 70*s13^4)*s23^5 +
              (240*s12^3 - 80*s12^2*s13 + 323*s12*s13^2 - 260*s13^3)*s23^6 +
              (80*s12^2 + 80*s13^2)*s23^7) + p1q^4*p2q*
             ((90*s12^5*s13 + 504*s12^4*s13^2 + 261*s12^3*s13^3 -
                153*s12^2*s13^4)*s23^3 + (-10*s12^5 + 170*s12^4*s13 +
                807*s12^3*s13^2 - 93*s12^2*s13^3 - 243*s12*s13^4)*s23^4 +
              (60*s12^4 + 160*s12^3*s13 + 546*s12^2*s13^2 - 90*s12*s13^3 -
                90*s13^4)*s23^5 + (150*s12^3 + 80*s12^2*s13 + 323*s12*s13^2 -
                10*s13^3)*s23^6 + (80*s12^2 + 80*s13^2)*s23^7) +
            p3q^4*(p2q*((-90*s12^8 - 180*s12^7*s13 + 63*s12^6*s13^2 -
                  153*s12^4*s13^4)*s23 + (-360*s12^7 - 270*s12^6*s13 +
                  423*s12^5*s13^2 - 216*s12^4*s13^3 - 243*s12^3*s13^4)*
                 s23^2 + (-450*s12^6 + 90*s12^5*s13 + 360*s12^4*s13^2 -
                  333*s12^3*s13^3 - 90*s12^2*s13^4)*s23^3 +
                (-180*s12^5 + 180*s12^4*s13 - 90*s12^2*s13^3)*s23^4) +
              p1q*((90*s12^8 + 90*s12^7*s13 + 81*s12^6*s13^2 + 81*s12^5*
                   s13^3)*s23 + (80*s12^7 - 280*s12^6*s13 + 114*s12^5*s13^2 +
                  303*s12^4*s13^3)*s23^2 + (150*s12^6 + 70*s12^5*s13 +
                  726*s12^4*s13^2 + 243*s12^3*s13^3)*s23^3 +
                (420*s12^5 + 440*s12^4*s13 + 323*s12^3*s13^2 + 80*s12^2*
                   s13^3)*s23^4 + (260*s12^4 + 80*s12^2*s13^2)*s23^5)) +
            p3q^3*(p2q^2*(-324*s12^6*s13^3 - 324*s12^5*s13^4 +
                (-90*s12^8 + 90*s12^7*s13 + 765*s12^6*s13^2 - 675*s12^5*
                   s13^3 - 477*s12^4*s13^4 + 459*s12^3*s13^5)*s23 +
                (-270*s12^7 + 630*s12^6*s13 + 1467*s12^5*s13^2 - 1422*s12^4*
                   s13^3 + 297*s12^3*s13^4 + 576*s12^2*s13^5)*s23^2 +
                (-270*s12^6 + 900*s12^5*s13 + 522*s12^4*s13^2 - 1008*s12^3*
                   s13^3 + 576*s12^2*s13^4 + 180*s12*s13^5)*s23^3 +
                (-90*s12^5 + 360*s12^4*s13 - 90*s12^3*s13^2 - 180*s12^2*
                   s13^3 + 180*s12*s13^4)*s23^4) + p1q*p2q*(
                (-360*s12^7*s13 + 189*s12^6*s13^2 + 486*s12^5*s13^3 -
                  63*s12^4*s13^4)*s23 + (160*s12^7 - 180*s12^6*s13 +
                  1814*s12^5*s13^2 + 801*s12^4*s13^3 - 381*s12^3*s13^4)*
                 s23^2 + (840*s12^6 + 1100*s12^5*s13 + 2635*s12^4*s13^2 +
                  429*s12^3*s13^3 - 180*s12^2*s13^4)*s23^3 +
                (1200*s12^5 + 940*s12^4*s13 + 1170*s12^3*s13^2 +
                  20*s12*s13^4)*s23^4 + (520*s12^4 + 20*s12^3*s13 +
                  160*s12^2*s13^2 + 20*s12*s13^3)*s23^5) +
              p1q^2*((90*s12^8 + 90*s12^7*s13 + 81*s12^6*s13^2 + 81*s12^5*
                   s13^3)*s23 + (-100*s12^7 - 460*s12^6*s13 - 48*s12^5*
                   s13^2 + 141*s12^4*s13^3)*s23^2 + (-190*s12^6 + 270*s12^5*
                   s13 + 318*s12^4*s13^2 - 363*s12^3*s13^3)*s23^3 +
                (30*s12^5 + 480*s12^4*s13 - 859*s12^3*s13^2 - 406*s12^2*
                   s13^3)*s23^4 + (-220*s12^4 - 340*s12^3*s13 - 566*s12^2*
                   s13^2 - 160*s12*s13^3)*s23^5 + (-250*s12^3 - 160*s12*
                   s13^2)*s23^6)) + p3q^2*(p2q^3*(-324*s12^6*s13^3 +
                324*s12^5*s13^4 + 648*s12^4*s13^5 + (270*s12^7*s13 +
                  270*s12^6*s13^2 - 1539*s12^5*s13^3 + 999*s12^4*s13^4 +
                  1107*s12^3*s13^5 - 459*s12^2*s13^6)*s23 +
                (720*s12^6*s13 - 2160*s12^4*s13^3 + 2295*s12^3*s13^4 +
                  342*s12^2*s13^5 - 423*s12*s13^6)*s23^2 + (630*s12^5*s13 -
                  450*s12^4*s13^2 - 765*s12^3*s13^3 + 1494*s12^2*s13^4 -
                  153*s12*s13^5 - 90*s13^6)*s23^3 + (180*s12^4*s13 -
                  180*s12^3*s13^2 - 90*s12^2*s13^3 + 360*s12*s13^4 -
                  90*s13^5)*s23^4) + p1q*p2q^2*(-324*s12^6*s13^3 -
                324*s12^5*s13^4 + (1179*s12^6*s13^2 - 306*s12^5*s13^3 -
                  477*s12^4*s13^4 + 684*s12^3*s13^5)*s23 +
                (260*s12^7 + 570*s12^6*s13 + 2403*s12^5*s13^2 - 2071*s12^4*
                   s13^3 + 468*s12^3*s13^4 + 1608*s12^2*s13^5)*s23^2 +
                (780*s12^6 + 910*s12^5*s13 + 1559*s12^4*s13^2 - 1277*s12^3*
                   s13^3 + 2499*s12^2*s13^4 + 909*s12*s13^5)*s23^3 +
                (780*s12^5 + 380*s12^4*s13 + 765*s12^3*s13^2 + 182*s12^2*
                   s13^3 + 1209*s12*s13^4 + 260*s13^5)*s23^4 +
                (260*s12^4 + 40*s12^3*s13 + 160*s12^2*s13^2 + 40*s12*s13^3 +
                  260*s13^4)*s23^5) + p1q^2*p2q*((-270*s12^7*s13 +
                  45*s12^6*s13^2 + 405*s12^5*s13^3 + 90*s12^4*s13^4)*s23 +
                (-10*s12^7 - 170*s12^6*s13 + 818*s12^5*s13^2 + 408*s12^4*
                   s13^3 - 75*s12^3*s13^4)*s23^2 + (10*s12^6 + 460*s12^5*
                   s13 + 852*s12^4*s13^2 - 390*s12^3*s13^3 - 444*s12^2*s13^4)*
                 s23^3 + (-450*s12^5 - 350*s12^4*s13 - 973*s12^3*s13^2 -
                  1865*s12^2*s13^3 - 529*s12*s13^4)*s23^4 +
                (-970*s12^4 - 870*s12^3*s13 - 1372*s12^2*s13^2 - 1099*s12*
                   s13^3 - 250*s13^4)*s23^5 + (-500*s12^3 - 160*s12^2*s13 -
                  320*s12*s13^2 - 250*s13^3)*s23^6) + p1q^3*(
                (-270*s12^7 - 360*s12^6*s13 - 252*s12^5*s13^2 - 162*s12^4*
                   s13^3)*s23^2 + (-250*s12^6 + 470*s12^5*s13 - 147*s12^4*
                   s13^2 - 525*s12^3*s13^3)*s23^3 + (50*s12^5 + 300*s12^4*
                   s13 - 978*s12^3*s13^2 - 183*s12^2*s13^3)*s23^4 +
                (-150*s12^4 - 450*s12^3*s13 - 100*s12^2*s13^2 + 83*s12*s13^3)*
                 s23^5 + (-100*s12^3 + 80*s12^2*s13 + 163*s12*s13^2 +
                  80*s13^3)*s23^6 + (80*s12^2 + 80*s13^2)*s23^7)) +
            p3q*(p2q^4*(648*s12^5*s13^4 + 324*s12^4*s13^5 - 324*s12^3*s13^6 +
                (-270*s12^6*s13^2 - 450*s12^5*s13^3 + 1503*s12^4*s13^4 -
                  225*s12^3*s13^5 - 783*s12^2*s13^6 + 153*s12*s13^7)*s23 +
                (-630*s12^5*s13^2 - 450*s12^4*s13^3 + 1611*s12^3*s13^4 -
                  1116*s12^2*s13^5 - 423*s12*s13^6 + 90*s13^7)*s23^2 +
                (-450*s12^4*s13^2 + 666*s12^2*s13^4 - 666*s12*s13^5 -
                  90*s13^6)*s23^3 + (-90*s12^3*s13^2 + 180*s12*s13^4 -
                  180*s13^5)*s23^4) + p1q*p2q^3*(648*s12^5*s13^4 +
                648*s12^4*s13^5 + (-180*s12^5*s13^3 + 2925*s12^4*s13^4 +
                  1602*s12^3*s13^5 - 855*s12^2*s13^6)*s23 +
                (-160*s12^6*s13 - 540*s12^5*s13^2 - 797*s12^4*s13^3 +
                  4509*s12^3*s13^4 + 462*s12^2*s13^5 - 972*s12*s13^6)*s23^2 +
                (-300*s12^5*s13 - 560*s12^4*s13^2 + 47*s12^3*s13^3 +
                  4251*s12^2*s13^4 + 306*s12*s13^5 - 360*s13^6)*s23^3 +
                (-120*s12^4*s13 + 140*s12^3*s13^2 + 504*s12^2*s13^3 +
                  2178*s12*s13^4 + 160*s13^5)*s23^4 + (20*s12^3*s13 +
                  160*s12^2*s13^2 + 20*s12*s13^3 + 520*s13^4)*s23^5) +
              p1q^2*p2q^2*((513*s12^6*s13^2 + 531*s12^5*s13^3 + 648*s12^4*
                   s13^4 + 630*s12^3*s13^5)*s23 + (20*s12^6*s13 + 739*s12^5*
                   s13^2 - 976*s12^4*s13^3 + 849*s12^3*s13^4 + 1419*s12^2*
                   s13^5)*s23^2 + (-250*s12^6 - 510*s12^5*s13 - 16*s12^4*
                   s13^2 - 2093*s12^3*s13^3 + 1836*s12^2*s13^4 + 1368*s12*
                   s13^5)*s23^3 + (-750*s12^5 - 1130*s12^4*s13 - 698*s12^3*
                   s13^2 - 2615*s12^2*s13^3 + 640*s12*s13^4 + 530*s13^5)*
                 s23^4 + (-750*s12^4 - 920*s12^3*s13 - 886*s12^2*s13^2 -
                  1918*s12*s13^3 + 30*s13^4)*s23^5 + (-250*s12^3 -
                  320*s12^2*s13 - 160*s12*s13^2 - 500*s13^3)*s23^6) +
              p1q^4*((270*s12^6 + 450*s12^5*s13 + 261*s12^4*s13^2 +
                  81*s12^3*s13^3)*s23^3 + (440*s12^5 + 80*s12^4*s13 +
                  114*s12^3*s13^2 + 303*s12^2*s13^3)*s23^4 +
                (150*s12^4 - 290*s12^3*s13 + 546*s12^2*s13^2 + 243*s12*s13^3)*
                 s23^5 + (60*s12^3 + 80*s12^2*s13 + 323*s12*s13^2 + 80*s13^3)*
                 s23^6 + (80*s12^2 + 80*s13^2)*s23^7) + p1q^3*p2q*(
                (180*s12^6*s13 - 27*s12^5*s13^2 - 144*s12^4*s13^3 +
                  63*s12^3*s13^4)*s23^2 + (20*s12^6 + 400*s12^5*s13 +
                  476*s12^4*s13^2 + 39*s12^3*s13^3 - 507*s12^2*s13^4)*s23^3 +
                (-140*s12^5 - 100*s12^4*s13 + 463*s12^3*s13^2 - 1179*s12^2*
                   s13^3 - 792*s12*s13^4)*s23^4 + (-180*s12^4 - 320*s12^3*
                   s13 + 286*s12^2*s13^2 - 806*s12*s13^3 - 340*s13^4)*s23^5 +
                (140*s12^3 + 486*s12*s13^2 - 180*s13^3)*s23^6 +
                (160*s12^2 + 160*s13^2)*s23^7)))*
           Log((s12 + s13)/(s12 + s13 + s23))*Log(s23/(s12 + s13 + s23)))/
          (18*p1q*p3q^4*s12^5*s13^3*s23^2 + 18*p1q*p2q^4*s12^3*s13^5*s23^2 +
           18*p1q^4*p2q*s12^3*s13^3*s23^4 + p1q^2*p2q^3*
            (18*s12^3*s13^5*s23^2 - 36*s12^3*s13^4*s23^3) +
           p1q^3*p2q^2*(-36*s12^3*s13^4*s23^3 + 18*s12^3*s13^3*s23^4) +
           p3q^3*(p1q*p2q*(36*s12^5*s13^3 - 36*s12^4*s13^4)*s23^2 +
             p1q^2*(18*s12^5*s13^3*s23^2 - 36*s12^4*s13^3*s23^3)) +
           p3q^2*(p1q*p2q^2*(18*s12^5*s13^3 - 72*s12^4*s13^4 + 18*s12^3*
                s13^5)*s23^2 + p1q^2*p2q*((18*s12^5*s13^3 - 36*s12^4*s13^4)*
                s23^2 + (-72*s12^4*s13^3 - 36*s12^3*s13^4)*s23^3) +
             p1q^3*(-36*s12^4*s13^3*s23^3 + 18*s12^3*s13^3*s23^4)) +
           p3q*(p1q*p2q^3*(-36*s12^4*s13^4 + 36*s12^3*s13^5)*s23^2 +
             18*p1q^4*s12^3*s13^3*s23^4 + p1q^2*p2q^2*((-36*s12^4*s13^4 +
                 18*s12^3*s13^5)*s23^2 + (-36*s12^4*s13^3 - 72*s12^3*s13^4)*
                s23^3) + p1q^3*p2q*((-36*s12^4*s13^3 - 36*s12^3*s13^4)*
                s23^3 + 36*s12^3*s13^3*s23^4))) +
         ((p2q^2*(-36*s12^2*s13 - 36*s12*s13^2 + (-54*s12*s13 - 18*s13^2)*
               s23 - 18*s13*s23^2) + p1q*p2q*((9*s12^2 + 9*s12*s13)*s23 +
              (19*s12 + 10*s13)*s23^2 + 10*s23^3) +
            p1q*p3q*((9*s12^2 + 9*s12*s13)*s23 + (19*s12 + 10*s13)*s23^2 +
              10*s23^3))*Log(s23/(s12 + s13 + s23))^2)/
          (18*p1q*p2q*s12*s13*s23^2 + 18*p1q*p3q*s12*s13*s23^2) +
         Log(-s12 - s13 - s23)*((p2q^2*(756*s12^2*s13 + 756*s12*s13^2 +
               (1134*s12*s13 + 378*s13^2)*s23 + 378*s13*s23^2) +
             p1q*p2q*((-261*s12^2 - 261*s12*s13)*s23 + (-290*s12 - 29*s13)*
                s23^2 - 29*s23^3) + p1q*p3q*((-261*s12^2 - 261*s12*s13)*s23 +
               (-290*s12 - 29*s13)*s23^2 - 29*s23^3))/
            (9*p1q*p2q*s12*s13*s23^2 + 9*p1q*p3q*s12*s13*s23^2) +
           ((p2q^2*(18*s12^2*s13 + 18*s12*s13^2 + (36*s12*s13 + 18*s13^2)*
                 s23 + 18*s13*s23^2) + p1q*p2q*((-s12 - s13)*s23^2 - s23^3) +
              p1q*p3q*((-s12 - s13)*s23^2 - s23^3))*Log(s12/(s12 + s13 +
                s23)))/(p1q*p2q*s12*s13*s23^2 + p1q*p3q*s12*s13*s23^2) +
           ((p2q^2*(18*s12^2*s13 + 18*s12*s13^2 + 18*s12*s13*s23) +
              p1q*p2q*((-9*s12^2 - 9*s12*s13)*s23 + (-10*s12 - s13)*s23^2 -
                s23^3) + p1q*p3q*((-9*s12^2 - 9*s12*s13)*s23 +
                (-10*s12 - s13)*s23^2 - s23^3))*Log(s13/(s12 + s13 + s23)))/
            (p1q*p2q*s12*s13*s23^2 + p1q*p3q*s12*s13*s23^2) +
           ((p2q^2*(-36*s12^2*s13 - 36*s12*s13^2 + (-54*s12*s13 - 18*s13^2)*
                 s23 - 18*s13*s23^2) + p1q*p2q*((9*s12^2 + 9*s12*s13)*s23 +
                (19*s12 + 10*s13)*s23^2 + 10*s23^3) + p1q*p3q*(
                (9*s12^2 + 9*s12*s13)*s23 + (19*s12 + 10*s13)*s23^2 +
                10*s23^3))*Log(s23/(s12 + s13 + s23)))/
            (9*p1q*p2q*s12*s13*s23^2 + 9*p1q*p3q*s12*s13*s23^2)) +
         Log(p1q/(p1q + p2q + p3q))*((-9*s12 - 9*s13 - 9*s23)/(s13*s23) +
           ((p1q*p2q^4*(-18*s12^2*s13^2 - 18*s12*s13^3 + (-45*s12*s13^2 -
                  27*s13^3)*s23 - 27*s13^2*s23^2) + p2q^5*(-18*s12^2*s13^2 -
                18*s12*s13^3 + (-36*s12*s13^2 - 18*s13^3)*s23 -
                18*s13^2*s23^2) + p1q^3*p2q^2*((-9*s12^2 - 9*s12*s13)*s23^2 +
                (-18*s12 - 9*s13)*s23^3 - 9*s23^4) + p1q^2*p2q^3*(
                (36*s12^3 + 81*s12^2*s13 + 45*s12*s13^2)*s23 +
                (90*s12^2 + 135*s12*s13 + 36*s13^2)*s23^2 + (72*s12 + 54*s13)*
                 s23^3 + 18*s23^4) + p3q^3*(p2q^2*(-18*s12^4 - 18*s12^3*s13 +
                  (-54*s12^3 - 36*s12^2*s13)*s23 + (-54*s12^2 - 18*s12*s13)*
                   s23^2 - 18*s12*s23^3) + p1q*p2q*((9*s12^3 + 9*s12^2*s13)*
                   s23 + (18*s12^2 + 9*s12*s13)*s23^2 + 9*s12*s23^3)) +
              p3q^2*(p2q^3*(-18*s12^4 + 18*s12^3*s13 + 36*s12^2*s13^2 +
                  (-36*s12^3 + 90*s12^2*s13 + 72*s12*s13^2)*s23 +
                  (-18*s12^2 + 90*s12*s13 + 18*s13^2)*s23^2 + 18*s13*s23^3) +
                p1q^2*p2q*((9*s12^3 + 9*s12^2*s13)*s23 + 9*s12^2*s23^2 +
                  (-9*s12 - 9*s13)*s23^3 - 9*s23^4) + p1q*p2q^2*(-18*s12^4 -
                  18*s12^3*s13 + (-27*s12^3 + 9*s12^2*s13 + 18*s12*s13^2)*
                   s23 + (18*s12^2 + 72*s12*s13 + 27*s13^2)*s23^2 +
                  (45*s12 + 45*s13)*s23^3 + 18*s23^4)) +
              p3q*(p2q^4*(36*s12^3*s13 + 18*s12^2*s13^2 - 18*s12*s13^3 +
                  (72*s12^2*s13 - 18*s12*s13^2 - 36*s13^3)*s23 +
                  (36*s12*s13 - 36*s13^2)*s23^2) + p1q^3*p2q*
                 ((-9*s12^2 - 9*s12*s13)*s23^2 + (-18*s12 - 9*s13)*s23^3 -
                  9*s23^4) + p1q^2*p2q^2*((27*s12^3 + 54*s12^2*s13 +
                    27*s12*s13^2)*s23 + (63*s12^2 + 99*s12*s13 + 36*s13^2)*
                   s23^2 + (45*s12 + 45*s13)*s23^3 + 9*s23^4) + p1q*p2q^3*
                 (36*s12^3*s13 + 36*s12^2*s13^2 + (72*s12^3 + 216*s12^2*s13 +
                    81*s12*s13^2 - 27*s13^3)*s23 + (180*s12^2 + 261*s12*s13 +
                    18*s13^2)*s23^2 + (144*s12 + 81*s13)*s23^3 + 36*s23^4)))*
             Log(p2q/(p1q + p2q + p3q)))/(2*p1q*p3q^4*s12^3*s23^2 +
             2*p1q*p2q^4*s12*s13^2*s23^2 + 2*p1q^4*p2q*s12*s23^4 +
             p1q^2*p2q^3*(2*s12*s13^2*s23^2 - 4*s12*s13*s23^3) +
             p1q^3*p2q^2*(-4*s12*s13*s23^3 + 2*s12*s23^4) +
             p3q^3*(p1q*p2q*(4*s12^3 - 4*s12^2*s13)*s23^2 + p1q^2*
                (2*s12^3*s23^2 - 4*s12^2*s23^3)) + p3q^2*(p1q*p2q^2*
                (2*s12^3 - 8*s12^2*s13 + 2*s12*s13^2)*s23^2 + p1q^2*p2q*
                ((2*s12^3 - 4*s12^2*s13)*s23^2 + (-8*s12^2 - 4*s12*s13)*
                  s23^3) + p1q^3*(-4*s12^2*s23^3 + 2*s12*s23^4)) +
             p3q*(p1q*p2q^3*(-4*s12^2*s13 + 4*s12*s13^2)*s23^2 + 2*p1q^4*s12*
                s23^4 + p1q^2*p2q^2*((-4*s12^2*s13 + 2*s12*s13^2)*s23^2 +
                 (-4*s12^2 - 8*s12*s13)*s23^3) + p1q^3*p2q*
                ((-4*s12^2 - 4*s12*s13)*s23^3 + 4*s12*s23^4))) +
           ((p2q^6*(18*s12^2*s13^2 + 36*s12*s13^3 + 18*s13^4 +
                (36*s12*s13^2 + 36*s13^3)*s23 + 18*s13^2*s23^2) +
              p1q*p2q^5*(27*s12*s13^3 + 27*s13^4 + (-72*s12^2*s13 -
                  117*s12*s13^2 - 18*s13^3)*s23 + (-144*s12*s13 - 117*s13^2)*
                 s23^2 - 72*s13*s23^3) + p1q^4*p2q^2*((18*s12^3 +
                  36*s12^2*s13 + 18*s12*s13^2)*s23 + (63*s12^2 + 90*s12*s13 +
                  27*s13^2)*s23^2 + (72*s12 + 54*s13)*s23^3 + 27*s23^4) +
              p1q^2*p2q^4*(18*s12^3*s13 - 9*s12*s13^3 + 9*s13^4 +
                (36*s12^3 + 9*s12^2*s13 - 162*s12*s13^2 - 90*s13^3)*s23 +
                (126*s12^2 - 9*s12*s13 - 153*s13^2)*s23^2 + 144*s12*s23^3 +
                54*s23^4) + p1q^3*p2q^3*(18*s12^3*s13 + 18*s12^2*s13^2 +
                (54*s12^3 + 117*s12^2*s13 + 9*s12*s13^2 - 36*s13^3)*s23 +
                (189*s12^2 + 225*s12*s13 + 9*s13^2)*s23^2 +
                (216*s12 + 126*s13)*s23^3 + 81*s23^4) +
              p3q^4*(p1q*p2q*(9*s12^4 + 9*s12^3*s13 + (18*s12^3 + 9*s12^2*
                     s13)*s23 + 9*s12^2*s23^2) + p2q^2*(18*s12^4 +
                  18*s12^3*s13 + (36*s12^3 + 18*s12^2*s13)*s23 + 18*s12^2*
                   s23^2)) + p3q^3*(p1q*p2q^2*(27*s12^4 - 27*s12^2*s13^2 +
                  (9*s12^3 - 81*s12^2*s13 - 36*s12*s13^2)*s23 +
                  (-63*s12^2 - 81*s12*s13)*s23^2 - 45*s12*s23^3) +
                p2q^3*(18*s12^4 - 18*s12^3*s13 - 36*s12^2*s13^2 +
                  (18*s12^3 - 72*s12^2*s13 - 36*s12*s13^2)*s23 +
                  (-18*s12^2 - 54*s12*s13)*s23^2 - 18*s12*s23^3) +
                p1q^2*p2q*(18*s12^4 + 9*s12^3*s13 - 9*s12^2*s13^2 +
                  (27*s12^3 - 18*s12^2*s13 - 18*s12*s13^2)*s23 - 27*s12*s13*
                   s23^2 - 9*s12*s23^3)) + p3q^2*(p1q^3*p2q*(-18*s12^3*s13 -
                  18*s12^2*s13^2 + (-27*s12^3 - 81*s12^2*s13 - 36*s12*s13^2)*
                   s23 + (-54*s12^2 - 63*s12*s13)*s23^2 - 27*s12*s23^3) +
                p2q^4*(18*s12^4 + 18*s12*s13^3 + (36*s12^3 + 36*s12*s13^2 +
                    18*s13^3)*s23 + (18*s12^2 + 18*s12*s13 + 36*s13^2)*
                   s23^2 + 18*s13*s23^3) + p1q*p2q^3*(-27*s12^3*s13 +
                  27*s12*s13^3 + (-81*s12^3 - 108*s12^2*s13 + 54*s12*s13^2 +
                    27*s13^3)*s23 + (-144*s12^2 - 18*s12*s13 + 72*s13^2)*
                   s23^2 + (-45*s12 + 63*s13)*s23^3 + 18*s23^4) +
                p1q^2*p2q^2*(-18*s12^4 - 63*s12^3*s13 - 27*s12^2*s13^2 +
                  18*s12*s13^3 + (-126*s12^3 - 189*s12^2*s13 + 18*s13^3)*
                   s23 + (-171*s12^2 - 54*s12*s13 + 63*s13^2)*s23^2 +
                  (-36*s12 + 72*s13)*s23^3 + 27*s23^4)) +
              p3q*(p2q^5*(-36*s12^3*s13 - 54*s12^2*s13^2 - 18*s12*s13^3 +
                  (-72*s12^2*s13 - 54*s12*s13^2)*s23 - 36*s12*s13*s23^2) +
                p1q^4*p2q*((9*s12^2 + 18*s12*s13 + 9*s13^2)*s23^2 +
                  (18*s12 + 18*s13)*s23^3 + 9*s23^4) + p1q*p2q^4*
                 (-27*s12^2*s13^2 - 36*s12*s13^3 - 9*s13^4 + (-18*s12^2*s13 -
                    99*s12*s13^2 - 63*s13^3)*s23 + (36*s12^2 + 9*s12*s13 -
                    63*s13^2)*s23^2 + (72*s12 + 27*s13)*s23^3 + 36*s23^4) +
                p1q^3*p2q^2*(-18*s12^4 - 18*s12^3*s13 + 18*s12^2*s13^2 +
                  18*s12*s13^3 + (-45*s12^3 + 45*s12*s13^2)*s23 +
                  (27*s12^2 + 144*s12*s13 + 63*s13^2)*s23^2 +
                  (117*s12 + 126*s13)*s23^3 + 63*s23^4) + p1q^2*p2q^3*
                 (-18*s12^4 + 18*s12^3*s13 + 54*s12^2*s13^2 + 9*s12*s13^3 -
                  9*s13^4 + (-45*s12^3 + 72*s12^2*s13 + 36*s12*s13^2 -
                    54*s13^3)*s23 + (63*s12^2 + 216*s12*s13 + 18*s13^2)*
                   s23^2 + (189*s12 + 162*s13)*s23^3 + 99*s23^4)))*
             Log((p1q + p2q)/(p1q + p2q + p3q)))/(2*p1q*p3q^5*s12^4*s23 +
             p1q*p2q^5*(-2*s12*s13^3*s23 - 2*s12*s13^2*s23^2) +
             p1q^2*p2q^4*(-4*s12*s13^3*s23 + 4*s12*s13*s23^3) +
             p1q^4*p2q^2*(4*s12*s13^2*s23^2 - 4*s12*s23^4) +
             p1q^5*p2q*(-2*s12*s13*s23^3 - 2*s12*s23^4) + p1q^3*p2q^3*
              (-2*s12*s13^3*s23 + 6*s12*s13^2*s23^2 + 6*s12*s13*s23^3 - 2*s12*
                s23^4) + p3q^4*(p1q^2*((2*s12^4 - 2*s12^3*s13)*s23 -
                 6*s12^3*s23^2) + p1q*p2q*((4*s12^4 - 6*s12^3*s13)*s23 -
                 2*s12^3*s23^2)) + p3q^3*(p1q*p2q^2*((2*s12^4 - 12*s12^3*
                    s13 + 6*s12^2*s13^2)*s23 + (-4*s12^3 + 4*s12^2*s13)*
                  s23^2) + p1q^2*p2q*((2*s12^4 - 10*s12^3*s13 + 4*s12^2*
                    s13^2)*s23 + (-14*s12^3 + 4*s12^2*s13)*s23^2 +
                 4*s12^2*s23^3) + p1q^3*(-2*s12^3*s13*s23 +
                 (-6*s12^3 + 4*s12^2*s13)*s23^2 + 6*s12^2*s23^3)) +
             p3q*(p1q*p2q^4*((6*s12^2*s13^2 - 4*s12*s13^3)*s23 +
                 (4*s12^2*s13 - 4*s12*s13^2)*s23^2) + p1q^2*p2q^3*
                ((10*s12^2*s13^2 - 6*s12*s13^3)*s23 + (8*s12^2*s13 +
                   2*s12*s13^2)*s23^2 + (4*s12^2 + 8*s12*s13)*s23^3) + p1q^4*
                p2q*((4*s12^2*s13 + 4*s12*s13^2)*s23^2 + (6*s12^2 -
                   2*s12*s13)*s23^3 - 6*s12*s23^4) + p1q^3*p2q^2*
                ((4*s12^2*s13^2 - 2*s12*s13^3)*s23 + (8*s12^2*s13 +
                   10*s12*s13^2)*s23^2 + (10*s12^2 + 8*s12*s13)*s23^3 -
                 4*s12*s23^4) + p1q^5*(-2*s12*s13*s23^3 - 2*s12*s23^4)) +
             p3q^2*(p1q*p2q^3*((-6*s12^3*s13 + 12*s12^2*s13^2 - 2*s12*s13^3)*
                  s23 + (-2*s12^3 + 8*s12^2*s13 - 2*s12*s13^2)*s23^2) + p1q^2*
                p2q^2*((-8*s12^3*s13 + 14*s12^2*s13^2 - 2*s12*s13^3)*s23 +
                 (-8*s12^3 + 12*s12^2*s13 + 2*s12*s13^2)*s23^2 +
                 (8*s12^2 + 4*s12*s13)*s23^3) + p1q^4*(4*s12^2*s13*s23^2 +
                 (6*s12^2 - 2*s12*s13)*s23^3 - 2*s12*s23^4) + p1q^3*p2q*
                ((-2*s12^3*s13 + 4*s12^2*s13^2)*s23 + (-6*s12^3 + 12*s12^2*
                    s13 + 4*s12*s13^2)*s23^2 + (16*s12^2 + 2*s12*s13)*s23^3 -
                 2*s12*s23^4))) + ((p2q^5*(-18*s12*s13^3 - 18*s13^4 -
                18*s13^3*s23) + p1q*p3q^4*((9*s12^3 + 9*s12^2*s13)*s23 +
                9*s12^2*s23^2) + p1q*p2q^4*(-18*s12*s13^3 - 18*s13^4 +
                (36*s12*s13^2 + 18*s13^3)*s23 + 36*s13^2*s23^2) +
              p1q^3*p2q^2*((-9*s12^2 - 45*s12*s13 - 36*s13^2)*s23^2 +
                (-9*s12 - 36*s13)*s23^3) + p1q^2*p2q^3*((9*s12^2*s13 +
                  54*s12*s13^2 + 45*s13^3)*s23 + (-9*s12*s13 + 27*s13^2)*
                 s23^2 - 18*s13*s23^3) + p1q^4*p2q*((9*s12 + 9*s13)*s23^3 +
                9*s23^4) + p3q*(p2q^4*(36*s12^2*s13^2 + 18*s12*s13^3 -
                  18*s13^4 + 54*s12*s13^2*s23 + 18*s13^2*s23^2) +
                p1q*p2q^3*(36*s12^2*s13^2 + 36*s12*s13^3 + (-18*s12^2*s13 +
                    81*s12*s13^2 + 63*s13^3)*s23 + (-45*s12*s13 + 36*s13^2)*
                   s23^2 - 27*s13*s23^3) + p1q^2*p2q^2*((27*s12^3 +
                    36*s12^2*s13 + 18*s12*s13^2 + 9*s13^3)*s23 +
                  (45*s12^2 - 45*s12*s13 - 63*s13^2)*s23^2 +
                  (27*s12 - 63*s13)*s23^3 + 9*s23^4) + p1q^4*
                 ((9*s12 + 9*s13)*s23^3 + 9*s23^4) + p1q^3*p2q*
                 ((-9*s12^2 - 27*s12*s13 - 18*s13^2)*s23^2 + (18*s12 + 9*s13)*
                   s23^3 + 27*s23^4)) + p3q^3*(p1q^2*((9*s12^3 + 9*s12^2*s13)*
                   s23 + (-9*s12^2 - 18*s12*s13)*s23^2 - 18*s12*s23^3) +
                p2q^2*(-18*s12^3*s13 - 18*s12^2*s13^2 + 18*s12^3*s23 +
                  (36*s12^2 + 18*s12*s13)*s23^2 + 18*s12*s23^3) +
                p1q*p2q*((27*s12^3 + 45*s12^2*s13 + 18*s12*s13^2)*s23 +
                  (72*s12^2 + 99*s12*s13 + 36*s13^2)*s23^2 +
                  (81*s12 + 72*s13)*s23^3 + 36*s23^4)) +
              p3q^2*(p2q^3*(-18*s12^3*s13 + 18*s12^2*s13^2 + 36*s12*s13^3 -
                  54*s12^2*s13*s23 + (-54*s12*s13 - 18*s13^2)*s23^2 -
                  18*s13*s23^3) + p1q^3*((-18*s12^2 - 18*s12*s13)*s23^2 +
                  (-9*s12 + 9*s13)*s23^3 + 9*s23^4) + p1q*p2q^2*
                 (-18*s12^3*s13 - 18*s12^2*s13^2 + (54*s12^3 + 18*s12^2*s13 -
                    45*s12*s13^2 - 27*s13^3)*s23 + (117*s12^2 - 72*s13^2)*
                   s23^2 + (81*s12 - 27*s13)*s23^3 + 18*s23^4) +
                p1q^2*p2q*((18*s12^3 + 36*s12^2*s13 + 18*s12*s13^2)*s23 +
                  (36*s12^2 + 54*s12*s13 + 18*s13^2)*s23^2 +
                  (63*s12 + 63*s13)*s23^3 + 45*s23^4)))*
             Log(p3q/(p1q + p2q + p3q)))/(2*p1q*p3q^4*s12^2*s13*s23^2 +
             2*p1q*p2q^4*s13^3*s23^2 + 2*p1q^4*p2q*s13*s23^4 +
             p1q^2*p2q^3*(2*s13^3*s23^2 - 4*s13^2*s23^3) +
             p1q^3*p2q^2*(-4*s13^2*s23^3 + 2*s13*s23^4) +
             p3q^3*(p1q*p2q*(4*s12^2*s13 - 4*s12*s13^2)*s23^2 + p1q^2*
                (2*s12^2*s13*s23^2 - 4*s12*s13*s23^3)) +
             p3q^2*(p1q*p2q^2*(2*s12^2*s13 - 8*s12*s13^2 + 2*s13^3)*s23^2 +
               p1q^2*p2q*((2*s12^2*s13 - 4*s12*s13^2)*s23^2 +
                 (-8*s12*s13 - 4*s13^2)*s23^3) + p1q^3*(-4*s12*s13*s23^3 +
                 2*s13*s23^4)) + p3q*(p1q*p2q^3*(-4*s12*s13^2 + 4*s13^3)*
                s23^2 + 2*p1q^4*s13*s23^4 + p1q^2*p2q^2*
                ((-4*s12*s13^2 + 2*s13^3)*s23^2 + (-4*s12*s13 - 8*s13^2)*
                  s23^3) + p1q^3*p2q*((-4*s12*s13 - 4*s13^2)*s23^3 +
                 4*s13*s23^4))) + ((p1q*p2q^4*(-9*s12*s13^2 - 9*s13^3 -
                9*s13^2*s23) + p1q^2*p2q^3*(18*s12^2*s13 + 18*s12*s13^2 +
                (27*s12*s13 + 9*s13^2)*s23 + 9*s13*s23^2) +
              p3q^3*(p2q^2*(-18*s12^3 - 18*s12^2*s13 + (-36*s12^2 -
                    18*s12*s13)*s23 - 18*s12*s23^2) + p1q*p2q*(9*s12^3 -
                  9*s12^2*s13 - 18*s12*s13^2 + (-18*s12^2 - 81*s12*s13 -
                    36*s13^2)*s23 + (-63*s12 - 72*s13)*s23^2 - 36*s23^3)) +
              p3q*(p2q^4*(-18*s12*s13^2 - 18*s13^3 - 18*s13^2*s23) +
                p1q*p2q^3*(36*s12^2*s13 + 45*s12*s13^2 + 9*s13^3 +
                  (81*s12*s13 + 54*s13^2)*s23 + 45*s13*s23^2) + p1q^2*p2q^2*
                 (-18*s12^3 - 18*s12^2*s13 + 18*s12*s13^2 + 18*s13^3 +
                  (-63*s12^2 - 36*s12*s13 + 27*s13^2)*s23 + (-72*s12 -
                    18*s13)*s23^2 - 27*s23^3) + p1q^3*p2q*
                 ((-18*s12^2 - 36*s12*s13 - 18*s13^2)*s23 + (-36*s12 -
                    36*s13)*s23^2 - 18*s23^3)) + p3q^2*(p2q^3*(36*s12^2*s13 +
                  36*s12*s13^2 + (54*s12*s13 + 18*s13^2)*s23 + 18*s13*
                   s23^2) + p1q^2*p2q*(-18*s12^2*s13 - 18*s12*s13^2 +
                  (-63*s12^2 - 135*s12*s13 - 54*s13^2)*s23 + (-126*s12 -
                    117*s13)*s23^2 - 63*s23^3) + p1q*p2q^2*(-27*s12^3 -
                  45*s12^2*s13 + 18*s13^3 + (-72*s12^2 - 36*s12*s13 +
                    45*s13^2)*s23 + (-63*s12 + 9*s13)*s23^2 - 18*s23^3)))*
             Log((p1q + p3q)/(p1q + p2q + p3q)))/(2*p1q*p3q^4*s12^2*s13*s23 +
             2*p1q*p2q^4*s13^3*s23 + 2*p1q^4*p2q*s13*s23^3 +
             p1q^2*p2q^3*(2*s13^3*s23 - 4*s13^2*s23^2) + p1q^3*p2q^2*
              (-4*s13^2*s23^2 + 2*s13*s23^3) + p3q^3*(p1q*p2q*(4*s12^2*s13 -
                 4*s12*s13^2)*s23 + p1q^2*(2*s12^2*s13*s23 - 4*s12*s13*
                  s23^2)) + p3q^2*(p1q*p2q^2*(2*s12^2*s13 - 8*s12*s13^2 +
                 2*s13^3)*s23 + p1q^2*p2q*((2*s12^2*s13 - 4*s12*s13^2)*s23 +
                 (-8*s12*s13 - 4*s13^2)*s23^2) + p1q^3*(-4*s12*s13*s23^2 +
                 2*s13*s23^3)) + p3q*(p1q*p2q^3*(-4*s12*s13^2 + 4*s13^3)*
                s23 + 2*p1q^4*s13*s23^3 + p1q^2*p2q^2*((-4*s12*s13^2 +
                   2*s13^3)*s23 + (-4*s12*s13 - 8*s13^2)*s23^2) + p1q^3*p2q*
                ((-4*s12*s13 - 4*s13^2)*s23^2 + 4*s13*s23^3))) +
           ((p2q^6*(-72*s12^3*s13^3 - 144*s12^2*s13^4 - 72*s12*s13^5 +
                (-126*s12^2*s13^3 - 144*s12*s13^4 - 18*s13^5)*s23 +
                (-54*s12*s13^3 - 18*s13^4)*s23^2) + p1q*p3q^5*(
                (18*s12^5 + 36*s12^4*s13 + 18*s12^3*s13^2)*s23 +
                (27*s12^4 + 27*s12^3*s13)*s23^2 + 9*s12^3*s23^3) +
              p1q*p2q^5*(-72*s12^3*s13^3 - 144*s12^2*s13^4 - 72*s12*s13^5 +
                (189*s12^3*s13^2 + 279*s12^2*s13^3 + 63*s12*s13^4 - 27*s13^5)*
                 s23 + (315*s12^2*s13^2 + 333*s12*s13^3 + 18*s13^4)*s23^2 +
                (126*s12*s13^2 + 45*s13^3)*s23^3) + p1q^2*p2q^4*(
                (-18*s12^4*s13 + 162*s12^3*s13^2 + 414*s12^2*s13^3 +
                  234*s12*s13^4)*s23 + (-162*s12^3*s13 - 45*s12^2*s13^2 +
                  234*s12*s13^3 + 81*s13^4)*s23^2 + (-234*s12^2*s13 -
                  207*s12*s13^2 + 45*s13^3)*s23^3 + (-90*s12*s13 - 36*s13^2)*
                 s23^4) + p1q^5*p2q*((-9*s12^2 - 9*s12*s13)*s23^4 -
                9*s12*s23^5) + p1q^3*p2q^3*((-135*s12^3*s13 - 387*s12^2*
                   s13^2 - 252*s12*s13^3)*s23^2 + (27*s12^3 - 126*s12^2*s13 -
                  351*s12*s13^2 - 81*s13^3)*s23^3 + (45*s12^2 + 9*s12*s13 -
                  72*s13^2)*s23^4 + (18*s12 + 9*s13)*s23^5) +
              p1q^4*p2q^2*((27*s12^3 + 126*s12^2*s13 + 99*s12*s13^2)*s23^3 +
                (36*s12^2 + 135*s12*s13 + 27*s13^2)*s23^4 + (9*s12 + 27*s13)*
                 s23^5) + p3q^4*(p2q^2*(-72*s12^5*s13 - 144*s12^4*s13^2 -
                  72*s12^3*s13^3 + (18*s12^5 - 108*s12^4*s13 - 162*s12^3*
                     s13^2 - 36*s12^2*s13^3)*s23 + (36*s12^4 - 54*s12^3*s13 -
                    54*s12^2*s13^2)*s23^2 + (18*s12^3 - 18*s12^2*s13)*
                   s23^3) + p1q^2*((18*s12^5 + 36*s12^4*s13 + 18*s12^3*s13^2)*
                   s23 + (-18*s12^4 - 54*s12^3*s13 - 36*s12^2*s13^2)*s23^2 +
                  (-54*s12^3 - 54*s12^2*s13)*s23^3 - 18*s12^2*s23^4) +
                p1q*p2q*((45*s12^5 + 45*s12^4*s13 - 45*s12^3*s13^2 -
                    45*s12^2*s13^3)*s23 + (81*s12^4 + 27*s12^3*s13 -
                    72*s12^2*s13^2 - 18*s12*s13^3)*s23^2 + (54*s12^3 +
                    9*s12^2*s13 - 18*s12*s13^2)*s23^3 + 18*s12^2*s23^4)) +
              p3q^3*(p2q^3*(-144*s12^5*s13 - 144*s12^4*s13^2 + 144*s12^3*
                   s13^3 + 144*s12^2*s13^4 + (18*s12^5 - 270*s12^4*s13 -
                    90*s12^3*s13^2 + 270*s12^2*s13^3 + 72*s12*s13^4)*s23 +
                  (36*s12^4 - 180*s12^3*s13 + 36*s12^2*s13^2 + 108*s12*s13^3)*
                   s23^2 + (18*s12^3 - 54*s12^2*s13 + 36*s12*s13^2)*s23^3) +
                p1q*p2q^2*(-72*s12^5*s13 - 144*s12^4*s13^2 - 72*s12^3*s13^3 +
                  (72*s12^5 + 90*s12^4*s13 + 72*s12^3*s13^2 + 90*s12^2*
                     s13^3 + 36*s12*s13^4)*s23 + (117*s12^4 + 189*s12^3*s13 +
                    207*s12^2*s13^2 + 153*s12*s13^3 + 18*s13^4)*s23^2 +
                  (45*s12^3 + 72*s12^2*s13 + 153*s12*s13^2 + 54*s13^3)*
                   s23^3 + (18*s12*s13 + 36*s13^2)*s23^4) + p1q^2*p2q*
                 ((36*s12^5 + 18*s12^4*s13 - 72*s12^3*s13^2 - 54*s12^2*s13^3)*
                   s23 + (-27*s12^4 - 180*s12^3*s13 - 225*s12^2*s13^2 -
                    72*s12*s13^3)*s23^2 + (-90*s12^3 - 153*s12^2*s13 -
                    99*s12*s13^2)*s23^3 + (-45*s12^2 - 45*s12*s13)*s23^4 -
                  18*s12*s23^5) + p1q^3*((-45*s12^4 - 81*s12^3*s13 -
                    36*s12^2*s13^2)*s23^2 + (-27*s12^3 + 18*s12*s13^2)*
                   s23^3 + (27*s12^2 + 27*s12*s13)*s23^4 + 9*s12*s23^5)) +
              p3q^2*(p2q^4*(-72*s12^5*s13 + 144*s12^4*s13^2 + 432*s12^3*
                   s13^3 + 144*s12^2*s13^4 - 72*s12*s13^5 + (-162*s12^4*s13 +
                    342*s12^3*s13^2 + 486*s12^2*s13^3 - 54*s12*s13^4 -
                    36*s13^5)*s23 + (-126*s12^3*s13 + 234*s12^2*s13^2 +
                    90*s12*s13^3 - 54*s13^4)*s23^2 + (-36*s12^2*s13 +
                    54*s12*s13^2 - 18*s13^3)*s23^3) + p1q^4*
                 ((36*s12^3 + 54*s12^2*s13 + 18*s12*s13^2)*s23^3 +
                  (36*s12^2 + 18*s12*s13)*s23^4) + p1q*p2q^3*(-72*s12^5*s13 +
                  216*s12^3*s13^3 + 144*s12^2*s13^4 + (45*s12^5 + 135*s12^4*
                     s13 + 612*s12^3*s13^2 + 774*s12^2*s13^3 + 243*s12*
                     s13^4 - 9*s13^5)*s23 + (81*s12^4 + 261*s12^3*s13 +
                    693*s12^2*s13^2 + 549*s12*s13^3 + 36*s13^4)*s23^2 +
                  (36*s12^3 + 45*s12^2*s13 + 306*s12*s13^2 + 117*s13^3)*
                   s23^3 + (-18*s12*s13 + 72*s13^2)*s23^4) + p1q^3*p2q*
                 ((-72*s12^4 - 117*s12^3*s13 - 81*s12^2*s13^2 - 36*s12*s13^3)*
                   s23^2 + (-45*s12^3 + 18*s12^2*s13 + 9*s12*s13^2 + 9*s13^3)*
                   s23^3 + (18*s12^2 + 27*s12*s13 + 9*s13^2)*s23^4 -
                  9*s12*s23^5) + p1q^2*p2q^2*((36*s12^5 + 198*s12^4*s13 +
                    288*s12^3*s13^2 + 162*s12^2*s13^3 + 36*s12*s13^4)*s23 +
                  (-27*s12^4 - 72*s12^3*s13 - 63*s12^2*s13^2 + 18*s12*s13^3)*
                   s23^2 + (-72*s12^3 - 252*s12^2*s13 - 81*s12*s13^2 +
                    9*s13^3)*s23^3 + (9*s12^2 - 72*s12*s13 - 9*s13^2)*s23^4 +
                  (18*s12 - 18*s13)*s23^5)) + p3q*(p2q^5*(144*s12^4*s13^2 +
                  144*s12^3*s13^3 - 144*s12^2*s13^4 - 144*s12*s13^5 +
                  (270*s12^3*s13^2 + 54*s12^2*s13^3 - 270*s12*s13^4 -
                    54*s13^5)*s23 + (144*s12^2*s13^2 - 72*s12*s13^3 -
                    72*s13^4)*s23^2 + (18*s12*s13^2 - 18*s13^3)*s23^3) +
                p1q*p2q^4*(144*s12^4*s13^2 + 216*s12^3*s13^3 - 72*s12*s13^5 +
                  (54*s12^4*s13 + 666*s12^3*s13^2 + 918*s12^2*s13^3 +
                    270*s12*s13^4 - 36*s13^5)*s23 + (36*s12^3*s13 +
                    729*s12^2*s13^2 + 747*s12*s13^3 + 54*s13^4)*s23^2 +
                  (-54*s12^2*s13 + 297*s12*s13^2 + 144*s13^3)*s23^3 +
                  (-36*s12*s13 + 54*s13^2)*s23^4) + p1q^5*
                 ((-9*s12^2 - 9*s12*s13)*s23^4 - 9*s12*s23^5) + p1q^2*p2q^3*
                 ((18*s12^5 + 90*s12^4*s13 + 216*s12^3*s13^2 + 306*s12^2*
                     s13^3 + 162*s12*s13^4)*s23 + (18*s12^4 - 324*s12^3*s13 -
                    495*s12^2*s13^2 - 36*s12*s13^3 + 45*s13^4)*s23^2 +
                  (18*s12^3 - 657*s12^2*s13 - 567*s12*s13^2)*s23^3 +
                  (36*s12^2 - 297*s12*s13 - 81*s13^2)*s23^4 +
                  (18*s12 - 36*s13)*s23^5) + p1q^4*p2q*((45*s12^3 +
                    72*s12^2*s13 + 27*s12*s13^2)*s23^3 + (36*s12^2 +
                    9*s12*s13 - 9*s13^2)*s23^4 + (-9*s12 - 9*s13)*s23^5) +
                p1q^3*p2q^2*((-45*s12^4 - 297*s12^3*s13 - 342*s12^2*s13^2 -
                    90*s12*s13^3)*s23^2 + (9*s12^3 - 180*s12^2*s13 -
                    72*s12*s13^2)*s23^3 + (90*s12^2 + 63*s12*s13 + 9*s13^2)*
                   s23^4 + (36*s12 + 9*s13)*s23^5)))*Log((p2q + p3q)/(p1q +
                p2q + p3q)))/(p1q*p3q^5*(2*s12^4*s13 + 2*s12^3*s13^2)*s23^2 +
             p1q*p2q^5*(2*s12^2*s13^3 + 2*s12*s13^4)*s23^2 -
             2*p1q^5*p2q*s12*s13*s23^5 + p1q^2*p2q^4*((2*s12^2*s13^3 +
                 2*s12*s13^4)*s23^2 + (-4*s12^2*s13^2 - 6*s12*s13^3)*s23^3) +
             p1q^3*p2q^3*((-4*s12^2*s13^2 - 6*s12*s13^3)*s23^3 +
               (2*s12^2*s13 + 6*s12*s13^2)*s23^4) + p1q^4*p2q^2*
              ((2*s12^2*s13 + 6*s12*s13^2)*s23^4 - 2*s12*s13*s23^5) +
             p3q^4*(p1q*p2q*(6*s12^4*s13 + 2*s12^3*s13^2 - 4*s12^2*s13^3)*
                s23^2 + p1q^2*((2*s12^4*s13 + 2*s12^3*s13^2)*s23^2 +
                 (-6*s12^3*s13 - 4*s12^2*s13^2)*s23^3)) +
             p3q^3*(p1q*p2q^2*(6*s12^4*s13 - 6*s12^3*s13^2 - 10*s12^2*s13^3 +
                 2*s12*s13^4)*s23^2 + p1q^2*p2q*((4*s12^4*s13 - 4*s12^2*
                    s13^3)*s23^2 + (-16*s12^3*s13 - 12*s12^2*s13^2 -
                   4*s12*s13^3)*s23^3) + p1q^3*((-6*s12^3*s13 - 4*s12^2*
                    s13^2)*s23^3 + (6*s12^2*s13 + 2*s12*s13^2)*s23^4)) +
             p3q*(p1q*p2q^4*(-4*s12^3*s13^2 + 2*s12^2*s13^3 + 6*s12*s13^4)*
                s23^2 - 2*p1q^5*s12*s13*s23^5 + p1q^2*p2q^3*
                ((-4*s12^3*s13^2 + 4*s12*s13^4)*s23^2 + (-4*s12^3*s13 -
                   12*s12^2*s13^2 - 16*s12*s13^3)*s23^3) + p1q^3*p2q^2*
                ((-4*s12^3*s13 - 8*s12^2*s13^2 - 10*s12*s13^3)*s23^3 +
                 (10*s12^2*s13 + 14*s12*s13^2)*s23^4) + p1q^4*p2q*
                ((8*s12^2*s13 + 8*s12*s13^2)*s23^4 - 4*s12*s13*s23^5)) +
             p3q^2*(p1q*p2q^3*(2*s12^4*s13 - 10*s12^3*s13^2 - 6*s12^2*s13^3 +
                 6*s12*s13^4)*s23^2 + p1q^2*p2q^2*((2*s12^4*s13 - 6*s12^3*
                    s13^2 - 6*s12^2*s13^3 + 2*s12*s13^4)*s23^2 +
                 (-14*s12^3*s13 - 16*s12^2*s13^2 - 14*s12*s13^3)*s23^3) +
               p1q^3*p2q*((-10*s12^3*s13 - 8*s12^2*s13^2 - 4*s12*s13^3)*
                  s23^3 + (14*s12^2*s13 + 10*s12*s13^2)*s23^4) + p1q^4*
                ((6*s12^2*s13 + 2*s12*s13^2)*s23^4 - 2*s12*s13*s23^5))) +
           ((p1q*p2q*((-9*s12^2 - 9*s12*s13)*s23 - 9*s12*s23^2) +
              p1q*p3q*((-9*s12^2 - 9*s12*s13)*s23 - 9*s12*s23^2) +
              p2q^2*(36*s12^2*s13 + 36*s12*s13^2 + (54*s12*s13 + 18*s13^2)*
                 s23 + 18*s13*s23^2))*Log(-s12 - s13 - s23))/
            (p1q*p2q*s12*s13*s23^2 + p1q*p3q*s12*s13*s23^2) +
           ((p2q^6*(-18*s12^2*s13^3 - 18*s12*s13^4 + (-36*s12^2*s13^2 -
                  90*s12*s13^3 - 36*s13^4)*s23 + (-72*s12*s13^2 - 72*s13^3)*
                 s23^2 - 36*s13^2*s23^3) + p1q*p2q^5*(-36*s12^2*s13^3 -
                36*s12*s13^4 + (-36*s12^2*s13^2 - 144*s12*s13^3 - 72*s13^4)*
                 s23 + (72*s12^2*s13 + 36*s12*s13^2 - 72*s13^3)*s23^2 +
                (144*s12*s13 + 72*s13^2)*s23^3 + 72*s13*s23^4) +
              p1q^3*p2q^3*((18*s12^3*s13 + 63*s12^2*s13^2 + 45*s12*s13^3)*
                 s23 + (-18*s12^3 + 45*s12^2*s13 + 162*s12*s13^2 + 72*s13^3)*
                 s23^2 + (-108*s12^2 - 45*s12*s13 + 72*s13^2)*s23^3 +
                (-162*s12 - 72*s13)*s23^4 - 72*s23^5) + p1q^4*p2q^2*(
                (-18*s12^3 - 45*s12^2*s13 - 27*s12*s13^2)*s23^2 +
                (-72*s12^2 - 117*s12*s13 - 36*s13^2)*s23^3 +
                (-90*s12 - 72*s13)*s23^4 - 36*s23^5) + p1q^2*p2q^4*(
                -18*s12^2*s13^3 - 18*s12*s13^4 + (18*s12^3*s13 + 63*s12^2*
                   s13^2 - 9*s12*s13^3 - 36*s13^4)*s23 + (162*s12^2*s13 +
                  297*s12*s13^2 + 72*s13^3)*s23^2 + (-36*s12^2 + 216*s12*
                   s13 + 216*s13^2)*s23^3 + (-72*s12 + 72*s13)*s23^4 -
                36*s23^5) + p3q^4*(p2q^2*(18*s12^5 + 18*s12^4*s13 +
                  (36*s12^4 + 18*s12^3*s13)*s23 + 18*s12^3*s23^2) +
                p1q*p2q*((-18*s12^4 - 18*s12^3*s13)*s23 + (-36*s12^3 -
                    18*s12^2*s13)*s23^2 - 18*s12^2*s23^3)) +
              p3q^3*(p2q^3*(18*s12^5 - 36*s12^4*s13 - 54*s12^3*s13^2 +
                  (-144*s12^3*s13 - 72*s12^2*s13^2)*s23 + (-54*s12^3 -
                    108*s12^2*s13)*s23^2 - 36*s12^2*s23^3) + p1q*p2q^2*
                 (18*s12^5 - 18*s12^3*s13^2 + (-18*s12^4 - 72*s12^3*s13 -
                    18*s12^2*s13^2)*s23 + (-72*s12^3 - 54*s12^2*s13)*s23^2 +
                  (-18*s12^2 + 18*s12*s13)*s23^3 + 18*s12*s23^4) +
                p1q^2*p2q*((-27*s12^4 - 9*s12^3*s13 + 18*s12^2*s13^2)*s23 +
                  (-27*s12^3 + 45*s12^2*s13 + 27*s12*s13^2)*s23^2 +
                  (27*s12^2 + 54*s12*s13)*s23^3 + 27*s12*s23^4)) +
              p3q*(p2q^5*(54*s12^3*s13^2 + 36*s12^2*s13^3 - 18*s12*s13^4 +
                  (72*s12^3*s13 + 180*s12^2*s13^2 - 36*s13^4)*s23 +
                  (144*s12^2*s13 + 90*s12*s13^2 - 72*s13^3)*s23^2 +
                  (72*s12*s13 - 36*s13^2)*s23^3) + p1q*p2q^4*
                 (90*s12^3*s13^2 + 72*s12^2*s13^3 - 18*s12*s13^4 +
                  (144*s12^3*s13 + 414*s12^2*s13^2 + 108*s12*s13^3 -
                    54*s13^4)*s23 + (72*s12^3 + 486*s12^2*s13 + 486*s12*
                     s13^2 - 18*s13^3)*s23^2 + (144*s12^2 + 432*s12*s13 +
                    126*s13^2)*s23^3 + (72*s12 + 90*s13)*s23^4) +
                p1q^3*p2q^2*((18*s12^4 + 45*s12^3*s13 + 36*s12^2*s13^2 +
                    9*s12*s13^3)*s23 + (81*s12^3 + 117*s12^2*s13 +
                    72*s12*s13^2 + 36*s13^3)*s23^2 + (45*s12^2 - 18*s12*s13 +
                    9*s13^2)*s23^3 + (-81*s12 - 90*s13)*s23^4 - 63*s23^5) +
                p1q^2*p2q^3*(36*s12^3*s13^2 + 36*s12^2*s13^3 +
                  (-18*s12^4 + 36*s12^3*s13 + 207*s12^2*s13^2 + 99*s12*
                     s13^3 - 18*s13^4)*s23 + (54*s12^3 + 306*s12^2*s13 +
                    396*s12*s13^2 + 81*s13^3)*s23^2 + (108*s12^2 + 279*s12*
                     s13 + 162*s13^2)*s23^3 + (-18*s12 + 9*s13)*s23^4 -
                  54*s23^5) + p1q^4*p2q*((-9*s12^2*s13 - 9*s12*s13^2)*s23^2 +
                  (-18*s12^2 - 45*s12*s13 - 18*s13^2)*s23^3 +
                  (-36*s12 - 36*s13)*s23^4 - 18*s23^5)) +
              p3q^2*(p2q^4*(-54*s12^4*s13 + 54*s12^2*s13^3 + (-36*s12^4 -
                    90*s12^3*s13 + 144*s12^2*s13^2 + 90*s12*s13^3)*s23 +
                  (-72*s12^3 + 36*s12^2*s13 + 162*s12*s13^2)*s23^2 +
                  (-36*s12^2 + 72*s12*s13)*s23^3) + p1q*p2q^3*
                 (-72*s12^4*s13 - 36*s12^3*s13^2 + 36*s12^2*s13^3 +
                  (-108*s12^4 - 252*s12^3*s13 + 54*s12^2*s13^2 + 90*s12*
                     s13^3)*s23 + (-162*s12^3 - 54*s12^2*s13 + 180*s12*
                     s13^2 + 18*s13^3)*s23^2 + (144*s12*s13 + 36*s13^2)*
                   s23^3 + (54*s12 + 18*s13)*s23^4) + p1q^2*p2q^2*
                 (-18*s12^4*s13 - 18*s12^3*s13^2 + (-27*s12^4 - 27*s12^3*
                     s13 + 18*s12^2*s13^2)*s23 + (45*s12^3 + 135*s12^2*s13 +
                    54*s12*s13^2 + 9*s13^3)*s23^2 + (153*s12^2 + 117*s12*s13)*
                   s23^3 + (63*s12 - 27*s13)*s23^4 - 18*s23^5) +
                p1q^3*p2q*((27*s12^3*s13 + 27*s12^2*s13^2)*s23 +
                  (45*s12^3 + 108*s12^2*s13 + 36*s12*s13^2)*s23^2 +
                  (81*s12^2 + 63*s12*s13 - 9*s13^2)*s23^3 + (27*s12 - 18*s13)*
                   s23^4 - 9*s23^5)))*Log(s12/(s12 + s13 + s23)))/
            (2*p1q*p3q^5*s12^4*s23^2 + p1q*p2q^5*(-2*s12*s13^3*s23^2 - 2*s12*
                s13^2*s23^3) + p1q^2*p2q^4*(-4*s12*s13^3*s23^2 + 4*s12*s13*
                s23^4) + p1q^4*p2q^2*(4*s12*s13^2*s23^3 - 4*s12*s23^5) +
             p1q^5*p2q*(-2*s12*s13*s23^4 - 2*s12*s23^5) + p1q^3*p2q^3*
              (-2*s12*s13^3*s23^2 + 6*s12*s13^2*s23^3 + 6*s12*s13*s23^4 - 2*
                s12*s23^5) + p3q^4*(p1q^2*((2*s12^4 - 2*s12^3*s13)*s23^2 -
                 6*s12^3*s23^3) + p1q*p2q*((4*s12^4 - 6*s12^3*s13)*s23^2 -
                 2*s12^3*s23^3)) + p3q^3*(p1q*p2q^2*((2*s12^4 - 12*s12^3*
                    s13 + 6*s12^2*s13^2)*s23^2 + (-4*s12^3 + 4*s12^2*s13)*
                  s23^3) + p1q^2*p2q*((2*s12^4 - 10*s12^3*s13 + 4*s12^2*
                    s13^2)*s23^2 + (-14*s12^3 + 4*s12^2*s13)*s23^3 +
                 4*s12^2*s23^4) + p1q^3*(-2*s12^3*s13*s23^2 +
                 (-6*s12^3 + 4*s12^2*s13)*s23^3 + 6*s12^2*s23^4)) +
             p3q*(p1q*p2q^4*((6*s12^2*s13^2 - 4*s12*s13^3)*s23^2 +
                 (4*s12^2*s13 - 4*s12*s13^2)*s23^3) + p1q^2*p2q^3*
                ((10*s12^2*s13^2 - 6*s12*s13^3)*s23^2 + (8*s12^2*s13 +
                   2*s12*s13^2)*s23^3 + (4*s12^2 + 8*s12*s13)*s23^4) + p1q^4*
                p2q*((4*s12^2*s13 + 4*s12*s13^2)*s23^3 + (6*s12^2 -
                   2*s12*s13)*s23^4 - 6*s12*s23^5) + p1q^3*p2q^2*
                ((4*s12^2*s13^2 - 2*s12*s13^3)*s23^2 + (8*s12^2*s13 +
                   10*s12*s13^2)*s23^3 + (10*s12^2 + 8*s12*s13)*s23^4 -
                 4*s12*s23^5) + p1q^5*(-2*s12*s13*s23^4 - 2*s12*s23^5)) +
             p3q^2*(p1q*p2q^3*((-6*s12^3*s13 + 12*s12^2*s13^2 - 2*s12*s13^3)*
                  s23^2 + (-2*s12^3 + 8*s12^2*s13 - 2*s12*s13^2)*s23^3) +
               p1q^2*p2q^2*((-8*s12^3*s13 + 14*s12^2*s13^2 - 2*s12*s13^3)*
                  s23^2 + (-8*s12^3 + 12*s12^2*s13 + 2*s12*s13^2)*s23^3 +
                 (8*s12^2 + 4*s12*s13)*s23^4) + p1q^4*(4*s12^2*s13*s23^3 +
                 (6*s12^2 - 2*s12*s13)*s23^4 - 2*s12*s23^5) + p1q^3*p2q*
                ((-2*s12^3*s13 + 4*s12^2*s13^2)*s23^2 + (-6*s12^3 +
                   12*s12^2*s13 + 4*s12*s13^2)*s23^3 + (16*s12^2 + 2*s12*s13)*
                  s23^4 - 2*s12*s23^5))) +
           ((p2q^5*(18*s12*s13^3 + 18*s13^4 + 18*s13^3*s23) +
              p1q*p3q^4*((-9*s12^3 - 9*s12^2*s13)*s23 - 9*s12^2*s23^2) +
              p1q*p2q^4*(18*s12*s13^3 + 18*s13^4 + (-27*s12*s13^2 - 9*s13^3)*
                 s23 - 27*s13^2*s23^2) + p1q^2*p2q^3*((-27*s12^2*s13 -
                  72*s12*s13^2 - 45*s13^3)*s23 + (-18*s12*s13 - 36*s13^2)*
                 s23^2 + 9*s13*s23^3) + p1q^3*p2q^2*((9*s12^2 + 45*s12*s13 +
                  36*s13^2)*s23^2 + (9*s12 + 36*s13)*s23^3) +
              p1q^4*p2q*((-9*s12 - 9*s13)*s23^3 - 9*s23^4) +
              p3q^3*(p2q^2*(18*s12^3*s13 + 18*s12^2*s13^2 + 18*s12^2*s13*
                   s23) + p1q*p2q*((-36*s12^3 - 36*s12^2*s13)*s23 +
                  (-54*s12^2 - 18*s12*s13)*s23^2 - 18*s12*s23^3) +
                p1q^2*((-9*s12^3 - 9*s12^2*s13)*s23 + (9*s12^2 + 18*s12*s13)*
                   s23^2 + 18*s12*s23^3)) + p3q^2*(p2q^3*(18*s12^3*s13 -
                  18*s12^2*s13^2 - 36*s12*s13^3 + (18*s12^2*s13 - 36*s12*
                     s13^2)*s23) + p1q*p2q^2*(18*s12^3*s13 + 18*s12^2*s13^2 +
                  (-27*s12^3 + 27*s12^2*s13 + 45*s12*s13^2 + 9*s13^3)*s23 +
                  (-45*s12^2 + 36*s12*s13 + 27*s13^2)*s23^2 +
                  (-18*s12 + 18*s13)*s23^3) + p1q^3*((18*s12^2 + 18*s12*s13)*
                   s23^2 + (9*s12 - 9*s13)*s23^3 - 9*s23^4) + p1q^2*p2q*
                 ((-18*s12^3 - 18*s12^2*s13)*s23 + (27*s12^2 + 81*s12*s13 +
                    36*s13^2)*s23^2 + (63*s12 + 54*s13)*s23^3 + 18*s23^4)) +
              p3q*(p2q^4*(-36*s12^2*s13^2 - 18*s12*s13^3 + 18*s13^4 +
                  (-36*s12*s13^2 + 18*s13^3)*s23) + p1q*p2q^3*
                 (-36*s12^2*s13^2 - 36*s12*s13^3 + (-18*s12^2*s13 -
                    126*s12*s13^2 - 72*s13^3)*s23 + (-36*s12*s13 - 90*s13^2)*
                   s23^2 - 18*s13*s23^3) + p1q^4*((-9*s12 - 9*s13)*s23^3 -
                  9*s23^4) + p1q^3*p2q*((27*s12^2 + 63*s12*s13 + 36*s13^2)*
                   s23^2 + (18*s12 + 27*s13)*s23^3 - 9*s23^4) + p1q^2*p2q^2*
                 ((-9*s12^3 - 18*s12^2*s13 - 36*s12*s13^2 - 27*s13^3)*s23 +
                  (18*s12^2 + 81*s12*s13 + 36*s13^2)*s23^2 +
                  (45*s12 + 81*s13)*s23^3 + 18*s23^4)))*
             Log(s13/(s12 + s13 + s23)))/(2*p1q*p3q^4*s12^2*s13*s23^2 +
             2*p1q*p2q^4*s13^3*s23^2 + 2*p1q^4*p2q*s13*s23^4 +
             p1q^2*p2q^3*(2*s13^3*s23^2 - 4*s13^2*s23^3) +
             p1q^3*p2q^2*(-4*s13^2*s23^3 + 2*s13*s23^4) +
             p3q^3*(p1q*p2q*(4*s12^2*s13 - 4*s12*s13^2)*s23^2 + p1q^2*
                (2*s12^2*s13*s23^2 - 4*s12*s13*s23^3)) +
             p3q^2*(p1q*p2q^2*(2*s12^2*s13 - 8*s12*s13^2 + 2*s13^3)*s23^2 +
               p1q^2*p2q*((2*s12^2*s13 - 4*s12*s13^2)*s23^2 +
                 (-8*s12*s13 - 4*s13^2)*s23^3) + p1q^3*(-4*s12*s13*s23^3 +
                 2*s13*s23^4)) + p3q*(p1q*p2q^3*(-4*s12*s13^2 + 4*s13^3)*
                s23^2 + 2*p1q^4*s13*s23^4 + p1q^2*p2q^2*
                ((-4*s12*s13^2 + 2*s13^3)*s23^2 + (-4*s12*s13 - 8*s13^2)*
                  s23^3) + p1q^3*p2q*((-4*s12*s13 - 4*s13^2)*s23^3 +
                 4*s13*s23^4))) + ((p2q^6*(18*s12^2*s13^3 - 18*s13^5 +
                (18*s12*s13^3 - 18*s13^4)*s23) + p1q*p3q^5*(
                (-9*s12^4 - 9*s12^3*s13)*s23 - 9*s12^3*s23^2) +
              p1q*p2q^5*(-27*s12^3*s13^2 + 9*s12^2*s13^3 + 27*s12*s13^4 -
                9*s13^5 + (-81*s12^2*s13^2 + 45*s12*s13^3 + 54*s13^4)*s23 +
                (-54*s12*s13^2 + 63*s13^3)*s23^2) + p1q^2*p2q^4*(
                18*s12^4*s13 - 18*s12^2*s13^3 + (54*s12^3*s13 - 99*s12^2*
                   s13^2 - 90*s12*s13^3 + 27*s13^4)*s23 + (90*s12^2*s13 -
                  135*s12*s13^2 - 45*s13^3)*s23^2 + (54*s12*s13 - 72*s13^2)*
                 s23^3) + p1q^5*p2q*((-9*s12^2 - 9*s12*s13)*s23^3 -
                9*s12*s23^4) + p1q^4*p2q^2*((-9*s12^3 + 18*s12^2*s13 +
                  27*s12*s13^2)*s23^2 + (-36*s12^2 + 9*s12*s13 + 9*s13^2)*
                 s23^3 + (-27*s12 + 9*s13)*s23^4) + p1q^3*p2q^3*(
                (27*s12^3*s13 + 9*s12^2*s13^2 - 18*s12*s13^3)*s23 +
                (-9*s12^3 + 126*s12^2*s13 + 63*s12*s13^2 - 27*s13^3)*s23^2 +
                (-27*s12^2 + 117*s12*s13)*s23^3 + (-18*s12 + 27*s13)*s23^4) +
              p3q^4*(p2q^2*(-18*s12^5 + 18*s12^3*s13^2 + (-36*s12^4 +
                    18*s12^3*s13 + 18*s12^2*s13^2)*s23 + (-18*s12^3 +
                    18*s12^2*s13)*s23^2) + p1q*p2q*(9*s12^5 + 27*s12^4*s13 +
                  27*s12^3*s13^2 + 9*s12^2*s13^3 + (-27*s12^4 - 9*s12^3*s13 +
                    36*s12^2*s13^2 + 18*s12*s13^3)*s23 + (-54*s12^3 -
                    9*s12^2*s13 + 18*s12*s13^2)*s23^2 - 18*s12^2*s23^3) +
                p1q^2*((-18*s12^4 - 18*s12^3*s13)*s23 + 18*s12^2*s13*s23^2 +
                  18*s12^2*s23^3)) + p3q^3*(p2q^3*(-18*s12^5 + 54*s12^4*s13 +
                  18*s12^3*s13^2 - 54*s12^2*s13^3 + (-36*s12^4 + 108*s12^3*
                     s13 - 36*s12^2*s13^2 - 36*s12*s13^3)*s23 +
                  (-18*s12^3 + 54*s12^2*s13 - 36*s12*s13^2)*s23^2) +
                p1q*p2q^2*(-18*s12^5 + 18*s12^4*s13 - 54*s12^2*s13^3 -
                  18*s12*s13^4 + (-63*s12^4 + 45*s12^3*s13 - 9*s12^2*s13^2 -
                    63*s12*s13^3 - 18*s13^4)*s23 + (-45*s12^3 + 36*s12^2*
                     s13 - 81*s12*s13^2 - 54*s13^3)*s23^2 + (-18*s12*s13 -
                    36*s13^2)*s23^3) + p1q^3*((-9*s12^4 - 9*s12^3*s13)*s23 +
                  (27*s12^3 + 36*s12^2*s13)*s23^2 + (27*s12^2 - 9*s12*s13)*
                   s23^3 - 9*s12*s23^4) + p1q^2*p2q*(18*s12^4*s13 +
                  36*s12^3*s13^2 + 18*s12^2*s13^3 + (-81*s12^4 - 72*s12^3*
                     s13 + 45*s12^2*s13^2 + 36*s12*s13^3)*s23 +
                  (-54*s12^3 + 45*s12^2*s13 + 63*s12*s13^2)*s23^2 +
                  (45*s12^2 + 45*s12*s13)*s23^3 + 18*s12*s23^4)) +
              p3q^2*(p2q^4*(54*s12^4*s13 - 54*s12^3*s13^2 - 54*s12^2*s13^3 +
                  54*s12*s13^4 + (90*s12^3*s13 - 126*s12^2*s13^2 +
                    18*s12*s13^3 + 18*s13^4)*s23 + (36*s12^2*s13 -
                    54*s12*s13^2 + 18*s13^3)*s23^2) + p1q*p2q^3*(-27*s12^5 +
                  45*s12^4*s13 - 36*s12^3*s13^2 - 90*s12^2*s13^3 +
                  27*s12*s13^4 + 9*s13^5 + (-63*s12^4 + 153*s12^3*s13 -
                    99*s12^2*s13^2 - 63*s12*s13^3 + 36*s13^4)*s23 +
                  (-36*s12^3 + 135*s12^2*s13 - 162*s12*s13^2 - 45*s13^3)*
                   s23^2 + (18*s12*s13 - 72*s13^2)*s23^3) + p1q^4*
                 ((18*s12^3 + 18*s12^2*s13)*s23^2 - 18*s12*s13*s23^3 -
                  18*s12*s23^4) + p1q^3*p2q*((-18*s12^4 - 45*s12^3*s13 -
                    27*s12^2*s13^2)*s23 + (81*s12^3 + 126*s12^2*s13 +
                    45*s12*s13^2 - 9*s13^3)*s23^2 + (108*s12^2 + 63*s12*s13 -
                    9*s13^2)*s23^3 + 9*s12*s23^4) + p1q^2*p2q^2*(-18*s12^5 -
                  18*s12^4*s13 - 36*s12^3*s13^2 - 54*s12^2*s13^3 -
                  18*s12*s13^4 + (-81*s12^4 - 144*s12^3*s13 - 225*s12^2*
                     s13^2 - 126*s12*s13^3)*s23 + (-54*s12^3 - 108*s12^2*
                     s13 - 189*s12*s13^2 - 45*s13^3)*s23^2 + (-9*s12^2 -
                    36*s12*s13 - 27*s13^2)*s23^3 + (-18*s12 + 18*s13)*
                   s23^4)) + p3q*(p2q^5*(-54*s12^3*s13^2 + 18*s12^2*s13^3 +
                  54*s12*s13^4 - 18*s13^5 + (-72*s12^2*s13^2 + 72*s12*s13^3)*
                   s23 + (-18*s12*s13^2 + 18*s13^3)*s23^2) + p1q*p2q^4*
                 (54*s12^4*s13 - 36*s12^3*s13^2 - 18*s12^2*s13^3 +
                  72*s12*s13^4 + (144*s12^3*s13 - 135*s12^2*s13^2 +
                    27*s12*s13^3 + 90*s13^4)*s23 + (126*s12^2*s13 -
                    153*s12*s13^2 + 36*s13^3)*s23^2 + (36*s12*s13 - 54*s13^2)*
                   s23^3) + p1q^5*((-9*s12^2 - 9*s12*s13)*s23^3 -
                  9*s12*s23^4) + p1q^4*p2q*((27*s12^3 + 72*s12^2*s13 +
                    45*s12*s13^2)*s23^2 + (27*s12*s13 + 9*s13^2)*s23^3 +
                  (-27*s12 + 9*s13)*s23^4) + p1q^3*p2q^2*
                 ((9*s12^4 - 27*s12^3*s13 - 108*s12^2*s13^2 - 72*s12*s13^3)*
                   s23 + (45*s12^3 + 72*s12^2*s13 - 36*s12*s13^2 - 36*s13^3)*
                   s23^2 + (63*s12*s13 - 9*s13^2)*s23^3 + (-36*s12 + 27*s13)*
                   s23^4) + p1q^2*p2q^3*(-18*s12^5 + 18*s12^4*s13 +
                  36*s12^3*s13^2 + 18*s12^2*s13^3 + 18*s12*s13^4 +
                  (-54*s12^4 + 72*s12^3*s13 - 45*s12^2*s13^2 - 72*s12*s13^3 +
                    27*s13^4)*s23 + (-54*s12^3 + 189*s12^2*s13 - 81*s12*
                     s13^2 - 72*s13^3)*s23^2 + (-36*s12^2 + 153*s12*s13 -
                    63*s13^2)*s23^3 + (-18*s12 + 36*s13)*s23^4)))*
             Log(s23/(s12 + s13 + s23)))/(p1q*p3q^5*(2*s12^4*s13 + 2*s12^3*
                s13^2)*s23 + p1q*p2q^5*(2*s12^2*s13^3 + 2*s12*s13^4)*s23 -
             2*p1q^5*p2q*s12*s13*s23^4 + p1q^2*p2q^4*((2*s12^2*s13^3 +
                 2*s12*s13^4)*s23 + (-4*s12^2*s13^2 - 6*s12*s13^3)*s23^2) +
             p1q^3*p2q^3*((-4*s12^2*s13^2 - 6*s12*s13^3)*s23^2 +
               (2*s12^2*s13 + 6*s12*s13^2)*s23^3) + p1q^4*p2q^2*
              ((2*s12^2*s13 + 6*s12*s13^2)*s23^3 - 2*s12*s13*s23^4) +
             p3q^4*(p1q*p2q*(6*s12^4*s13 + 2*s12^3*s13^2 - 4*s12^2*s13^3)*
                s23 + p1q^2*((2*s12^4*s13 + 2*s12^3*s13^2)*s23 +
                 (-6*s12^3*s13 - 4*s12^2*s13^2)*s23^2)) +
             p3q^3*(p1q*p2q^2*(6*s12^4*s13 - 6*s12^3*s13^2 - 10*s12^2*s13^3 +
                 2*s12*s13^4)*s23 + p1q^2*p2q*((4*s12^4*s13 - 4*s12^2*s13^3)*
                  s23 + (-16*s12^3*s13 - 12*s12^2*s13^2 - 4*s12*s13^3)*
                  s23^2) + p1q^3*((-6*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
                 (6*s12^2*s13 + 2*s12*s13^2)*s23^3)) +
             p3q*(p1q*p2q^4*(-4*s12^3*s13^2 + 2*s12^2*s13^3 + 6*s12*s13^4)*
                s23 - 2*p1q^5*s12*s13*s23^4 + p1q^2*p2q^3*
                ((-4*s12^3*s13^2 + 4*s12*s13^4)*s23 + (-4*s12^3*s13 -
                   12*s12^2*s13^2 - 16*s12*s13^3)*s23^2) + p1q^3*p2q^2*
                ((-4*s12^3*s13 - 8*s12^2*s13^2 - 10*s12*s13^3)*s23^2 +
                 (10*s12^2*s13 + 14*s12*s13^2)*s23^3) + p1q^4*p2q*
                ((8*s12^2*s13 + 8*s12*s13^2)*s23^3 - 4*s12*s13*s23^4)) +
             p3q^2*(p1q*p2q^3*(2*s12^4*s13 - 10*s12^3*s13^2 - 6*s12^2*s13^3 +
                 6*s12*s13^4)*s23 + p1q^2*p2q^2*((2*s12^4*s13 - 6*s12^3*
                    s13^2 - 6*s12^2*s13^3 + 2*s12*s13^4)*s23 +
                 (-14*s12^3*s13 - 16*s12^2*s13^2 - 14*s12*s13^3)*s23^2) +
               p1q^3*p2q*((-10*s12^3*s13 - 8*s12^2*s13^2 - 4*s12*s13^3)*
                  s23^2 + (14*s12^2*s13 + 10*s12*s13^2)*s23^3) + p1q^4*
                ((6*s12^2*s13 + 2*s12*s13^2)*s23^3 - 2*s12*s13*s23^4)))) +
         Log(p3q/(p1q + p2q + p3q))*((-s12 - s13 - s23)/(s12*s13) +
           ((p2q^5*(18*s12^2*s13^3 + 18*s12*s13^4 + 18*s12*s13^3*s23) +
              p1q*p3q^4*((-9*s12^4 - 9*s12^3*s13)*s23 + (-8*s12^3 +
                  s12^2*s13)*s23^2 + s12^2*s23^3) + p1q*p2q^4*(18*s12^2*
                 s13^3 + 18*s12*s13^4 + (-36*s12^2*s13^2 - 18*s12*s13^3)*
                 s23 + (-34*s12*s13^2 + 2*s13^3)*s23^2 + 2*s13^2*s23^3) +
              p1q^3*p2q^2*((9*s12^3 + 45*s12^2*s13 + 36*s12*s13^2)*s23^2 +
                (8*s12^2 + 32*s12*s13 - 3*s13^2)*s23^3 + (-s12 - 3*s13)*
                 s23^4) + p1q^2*p2q^3*((-9*s12^3*s13 - 54*s12^2*s13^2 -
                  45*s12*s13^3)*s23 + (10*s12^2*s13 - 24*s12*s13^2 + 2*s13^3)*
                 s23^2 + 17*s12*s13*s23^3 - 2*s13*s23^4) + p1q^4*p2q*(
                (-9*s12^2 - 9*s12*s13)*s23^3 + (-8*s12 + s13)*s23^4 +
                s23^5) + p3q^3*(p2q^2*(18*s12^4*s13 + 18*s12^3*s13^2 -
                  18*s12^4*s23 + (-36*s12^3 - 16*s12^2*s13 + 2*s12*s13^2)*
                   s23^2 + (-18*s12^2 + 2*s12*s13)*s23^3) + p1q*p2q*
                 ((-27*s12^4 - 45*s12^3*s13 - 18*s12^2*s13^2)*s23 +
                  (-68*s12^3 - 96*s12^2*s13 - 37*s12*s13^2)*s23^2 +
                  (-75*s12^2 - 71*s12*s13)*s23^3 - 34*s12*s23^4) +
                p1q^2*((-9*s12^4 - 9*s12^3*s13)*s23 + (10*s12^3 + 19*s12^2*
                     s13)*s23^2 + (17*s12^2 - 2*s12*s13)*s23^3 -
                  2*s12*s23^4)) + p3q^2*(p2q^3*(18*s12^4*s13 - 18*s12^3*
                   s13^2 - 36*s12^2*s13^3 + 54*s12^3*s13*s23 +
                  (56*s12^2*s13 + 18*s12*s13^2 - 2*s13^3)*s23^2 +
                  (20*s12*s13 - 2*s13^2)*s23^3) + p1q*p2q^2*(18*s12^4*s13 +
                  18*s12^3*s13^2 + (-54*s12^4 - 18*s12^3*s13 + 45*s12^2*
                     s13^2 + 27*s12*s13^3)*s23 + (-114*s12^3 + s12^2*s13 +
                    70*s12*s13^2)*s23^2 + (-76*s12^2 + 27*s12*s13)*s23^3 -
                  16*s12*s23^4) + p1q^2*p2q*((-18*s12^4 - 36*s12^3*s13 -
                    18*s12^2*s13^2)*s23 + (-34*s12^3 - 53*s12^2*s13 -
                    19*s12*s13^2)*s23^2 + (-66*s12^2 - 72*s12*s13 - 3*s13^2)*
                   s23^3 + (-52*s12 - 5*s13)*s23^4 - 2*s23^5) +
                p1q^3*((18*s12^3 + 18*s12^2*s13)*s23^2 + (7*s12^2 -
                    11*s12*s13)*s23^3 + (-10*s12 + s13)*s23^4 + s23^5)) +
              p3q*(p2q^4*(-36*s12^3*s13^2 - 18*s12^2*s13^3 + 18*s12*s13^4 -
                  54*s12^2*s13^2*s23 + (-20*s12*s13^2 - 2*s13^3)*s23^2 -
                  2*s13^2*s23^3) + p1q*p2q^3*(-36*s12^3*s13^2 - 36*s12^2*
                   s13^3 + (18*s12^3*s13 - 81*s12^2*s13^2 - 63*s12*s13^3)*
                   s23 + (44*s12^2*s13 - 35*s12*s13^2 + 2*s13^3)*s23^2 +
                  (26*s12*s13 + 2*s13^2)*s23^3) + p1q^2*p2q^2*
                 ((-27*s12^4 - 36*s12^3*s13 - 18*s12^2*s13^2 - 9*s12*s13^3)*
                   s23 + (-44*s12^3 + 46*s12^2*s13 + 65*s12*s13^2 + 2*s13^3)*
                   s23^2 + (-29*s12^2 + 55*s12*s13 - 3*s13^2)*s23^3 +
                  (-14*s12 - 7*s13)*s23^4 - 2*s23^5) + p1q^3*p2q*
                 ((9*s12^3 + 27*s12^2*s13 + 18*s12*s13^2)*s23^2 +
                  (-21*s12^2 - 15*s12*s13 - 3*s13^2)*s23^3 +
                  (-29*s12 - 2*s13)*s23^4 + s23^5) + p1q^4*
                 ((-9*s12^2 - 9*s12*s13)*s23^3 + (-8*s12 + s13)*s23^4 +
                  s23^5)))*Log((p1q + p3q)/(p1q + p2q + p3q)))/
            (2*p1q*p3q^4*s12^3*s13*s23^2 + 2*p1q*p2q^4*s12*s13^3*s23^2 +
             2*p1q^4*p2q*s12*s13*s23^4 + p1q^2*p2q^3*(2*s12*s13^3*s23^2 - 4*
                s12*s13^2*s23^3) + p1q^3*p2q^2*(-4*s12*s13^2*s23^3 + 2*s12*
                s13*s23^4) + p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*
                s23^2 + p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
             p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*
                s23^2 + p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
                 (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) + p1q^3*
                (-4*s12^2*s13*s23^3 + 2*s12*s13*s23^4)) +
             p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 + 2*p1q^4*
                s12*s13*s23^4 + p1q^2*p2q^2*((-4*s12^2*s13^2 + 2*s12*s13^3)*
                  s23^2 + (-4*s12^2*s13 - 8*s12*s13^2)*s23^3) + p1q^3*p2q*
                ((-4*s12^2*s13 - 4*s12*s13^2)*s23^3 + 4*s12*s13*s23^4))) +
           ((p1q*p3q^5*((-9*s12^5 - 18*s12^4*s13 - 9*s12^3*s13^2)*s23 +
                (-9*s12^4 - 9*s12^3*s13)*s23^2) + p2q^6*(-18*s12^3*s13^3 -
                36*s12^2*s13^4 - 18*s12*s13^5 + (-54*s12^2*s13^3 -
                  72*s12*s13^4 - 18*s13^5)*s23 + (-36*s12*s13^3 - 18*s13^4)*
                 s23^2) + p1q*p2q^5*(-18*s12^3*s13^3 - 36*s12^2*s13^4 -
                18*s12*s13^5 + (36*s12^3*s13^2 + 9*s12^2*s13^3 -
                  54*s12*s13^4 - 27*s13^5)*s23 + (108*s12^2*s13^2 +
                  108*s12*s13^3 + 18*s13^4)*s23^2 + (72*s12*s13^2 + 45*s13^3)*
                 s23^3) + p1q^2*p2q^4*((-9*s12^4*s13 + 27*s12^3*s13^2 +
                  81*s12^2*s13^3 + 45*s12*s13^4)*s23 + (-27*s12^3*s13 +
                  108*s12^2*s13^2 + 216*s12*s13^3 + 81*s13^4)*s23^2 +
                (-54*s12^2*s13 + 18*s12*s13^2 + 45*s13^3)*s23^3 +
                (-36*s12*s13 - 36*s13^2)*s23^4) + p1q^5*p2q*(
                (9*s12^2 + 9*s12*s13)*s23^4 + 9*s12*s23^5) + p1q^3*p2q^3*(
                (9*s12^4 + 9*s12^3*s13 - 18*s12^2*s13^2 - 18*s12*s13^3)*
                 s23^2 + (9*s12^3 - 63*s12^2*s13 - 162*s12*s13^2 - 81*s13^3)*
                 s23^3 + (-54*s12*s13 - 72*s13^2)*s23^4 + 9*s13*s23^5) +
              p1q^4*p2q^2*((-18*s12^3 - 36*s12^2*s13 - 18*s12*s13^2)*s23^3 +
                (-18*s12^2 + 9*s12*s13 + 27*s13^2)*s23^4 + 27*s13*s23^5) +
              p3q^4*(p2q^2*(-18*s12^5*s13 - 36*s12^4*s13^2 - 18*s12^3*s13^3 +
                  (-18*s12^5 - 108*s12^4*s13 - 126*s12^3*s13^2 - 36*s12^2*
                     s13^3)*s23 + (-36*s12^4 - 126*s12^3*s13 - 72*s12^2*
                     s13^2)*s23^2 + (-18*s12^3 - 36*s12^2*s13)*s23^3) +
                p1q^2*((-9*s12^5 - 18*s12^4*s13 - 9*s12^3*s13^2)*s23 +
                  (18*s12^4 + 36*s12^3*s13 + 18*s12^2*s13^2)*s23^2 +
                  (27*s12^3 + 18*s12^2*s13)*s23^3) + p1q*p2q*
                 ((-36*s12^5 - 99*s12^4*s13 - 90*s12^3*s13^2 - 27*s12^2*
                     s13^3)*s23 + (-81*s12^4 - 198*s12^3*s13 - 171*s12^2*
                     s13^2 - 54*s12*s13^3)*s23^2 + (-81*s12^3 - 162*s12^2*
                     s13 - 90*s12*s13^2)*s23^3 + (-36*s12^2 - 36*s12*s13)*
                   s23^4)) + p3q^3*(p2q^3*(-36*s12^5*s13 - 36*s12^4*s13^2 +
                  36*s12^3*s13^3 + 36*s12^2*s13^4 + (-18*s12^5 - 126*s12^4*
                     s13 + 18*s12^3*s13^2 + 198*s12^2*s13^3 + 72*s12*s13^4)*
                   s23 + (-36*s12^4 - 108*s12^3*s13 + 126*s12^2*s13^2 +
                    126*s12*s13^3)*s23^2 + (-18*s12^3 - 18*s12^2*s13 +
                    54*s12*s13^2)*s23^3) + p1q^3*((27*s12^4 + 45*s12^3*s13 +
                    18*s12^2*s13^2)*s23^2 + (-18*s12^2*s13 - 9*s12*s13^2)*
                   s23^3 + (-27*s12^2 - 9*s12*s13)*s23^4) + p1q*p2q^2*
                 (-18*s12^5*s13 - 36*s12^4*s13^2 - 18*s12^3*s13^3 +
                  (-81*s12^5 - 162*s12^4*s13 + 126*s12^2*s13^3 + 45*s12*
                     s13^4)*s23 + (-171*s12^4 - 144*s12^3*s13 + 207*s12^2*
                     s13^2 + 180*s12*s13^3 + 18*s13^4)*s23^2 +
                  (-126*s12^3 - 45*s12^2*s13 + 135*s12*s13^2 + 54*s13^3)*
                   s23^3 + (-36*s12^2 - 18*s12*s13 + 36*s13^2)*s23^4) +
                p1q^2*p2q*((-27*s12^5 - 90*s12^4*s13 - 99*s12^3*s13^2 -
                    36*s12^2*s13^3)*s23 + (-45*s12^3*s13 - 99*s12^2*s13^2 -
                    54*s12*s13^3)*s23^2 + (27*s12^3 - 9*s12^2*s13 -
                    54*s12*s13^2)*s23^3 + (36*s12^2 + 36*s12*s13)*s23^4 +
                  36*s12*s23^5)) + p3q^2*(p2q^4*(-18*s12^5*s13 + 36*s12^4*
                   s13^2 + 108*s12^3*s13^3 + 36*s12^2*s13^4 - 18*s12*s13^5 +
                  (-18*s12^4*s13 + 234*s12^3*s13^2 + 270*s12^2*s13^3 -
                    18*s12*s13^4 - 36*s13^5)*s23 + (18*s12^3*s13 + 252*s12^2*
                     s13^2 + 72*s12*s13^3 - 54*s13^4)*s23^2 +
                  (18*s12^2*s13 + 54*s12*s13^2 - 18*s13^3)*s23^3) +
                p1q*p2q^3*(-18*s12^5*s13 + 54*s12^3*s13^3 + 36*s12^2*s13^4 +
                  (-54*s12^5 + 9*s12^4*s13 + 396*s12^3*s13^2 + 432*s12^2*
                     s13^3 + 90*s12*s13^4 - 9*s13^5)*s23 + (-117*s12^4 +
                    162*s12^3*s13 + 747*s12^2*s13^2 + 450*s12*s13^3 +
                    36*s13^4)*s23^2 + (-81*s12^3 + 108*s12^2*s13 + 360*s12*
                     s13^2 + 117*s13^3)*s23^3 + (-18*s12^2 - 18*s12*s13 +
                    72*s13^2)*s23^4) + p1q^4*((-27*s12^3 - 36*s12^2*s13 -
                    9*s12*s13^2)*s23^3 - 18*s12^2*s23^4 + 9*s12*s23^5) +
                p1q^3*p2q*((45*s12^4 + 135*s12^3*s13 + 108*s12^2*s13^2 +
                    18*s12*s13^3)*s23^2 + (27*s12^3 + 81*s12^2*s13 +
                    36*s12*s13^2 + 9*s13^3)*s23^3 + (27*s12^2 + 54*s12*s13 +
                    9*s13^2)*s23^4 + 45*s12*s23^5) + p1q^2*p2q^2*
                 ((-45*s12^5 - 45*s12^4*s13 + 54*s12^3*s13^2 + 63*s12^2*
                     s13^3 + 9*s12*s13^4)*s23 + (-27*s12^4 + 63*s12^3*s13 +
                    198*s12^2*s13^2 + 108*s12*s13^3)*s23^2 + (27*s12^3 -
                    108*s12^2*s13 - 54*s12*s13^2 + 9*s13^3)*s23^3 +
                  (27*s12^2 - 162*s12*s13 - 9*s13^2)*s23^4 +
                  (18*s12 - 18*s13)*s23^5)) + p3q*(p2q^5*(36*s12^4*s13^2 +
                  36*s12^3*s13^3 - 36*s12^2*s13^4 - 36*s12*s13^5 +
                  (90*s12^3*s13^2 - 18*s12^2*s13^3 - 162*s12*s13^4 -
                    54*s13^5)*s23 + (54*s12^2*s13^2 - 90*s12*s13^3 -
                    72*s13^4)*s23^2 - 18*s13^3*s23^3) + p1q*p2q^4*
                 (36*s12^4*s13^2 + 54*s12^3*s13^3 - 18*s12*s13^5 +
                  (90*s12^4*s13 + 351*s12^3*s13^2 + 288*s12^2*s13^3 -
                    9*s12*s13^4 - 36*s13^5)*s23 + (189*s12^3*s13 + 585*s12^2*
                     s13^2 + 396*s12*s13^3 + 54*s13^4)*s23^2 +
                  (99*s12^2*s13 + 315*s12*s13^2 + 144*s13^3)*s23^3 +
                  54*s13^2*s23^4) + p1q^5*((9*s12^2 + 9*s12*s13)*s23^4 +
                  9*s12*s23^5) + p1q^4*p2q*((-27*s12^3 - 72*s12^2*s13 -
                    45*s12*s13^2)*s23^3 + (-27*s12*s13 - 9*s13^2)*s23^4 +
                  (27*s12 - 9*s13)*s23^5) + p1q^2*p2q^3*((-27*s12^5 -
                    18*s12^4*s13 + 63*s12^3*s13^2 + 72*s12^2*s13^3 +
                    18*s12*s13^4)*s23 + (-45*s12^4 - 63*s12^3*s13 +
                    135*s12^2*s13^2 + 198*s12*s13^3 + 45*s13^4)*s23^2 +
                  (-27*s12^3 - 297*s12^2*s13 - 144*s12*s13^2)*s23^3 +
                  (-9*s12^2 - 270*s12*s13 - 81*s13^2)*s23^4 - 36*s13*s23^5) +
                p1q^3*p2q^2*((45*s12^4 + 45*s12^3*s13 + 54*s12^2*s13^2 +
                    54*s12*s13^3)*s23^2 + (36*s12^3 - 180*s12^2*s13 -
                    117*s12*s13^2)*s23^3 + (-153*s12*s13 + 9*s13^2)*s23^4 +
                  (9*s12 + 9*s13)*s23^5)))*Log((p2q + p3q)/(p1q + p2q +
                p3q)))/(p1q*p3q^5*(2*s12^4*s13 + 2*s12^3*s13^2)*s23^2 +
             p1q*p2q^5*(2*s12^2*s13^3 + 2*s12*s13^4)*s23^2 -
             2*p1q^5*p2q*s12*s13*s23^5 + p1q^2*p2q^4*((2*s12^2*s13^3 +
                 2*s12*s13^4)*s23^2 + (-4*s12^2*s13^2 - 6*s12*s13^3)*s23^3) +
             p1q^3*p2q^3*((-4*s12^2*s13^2 - 6*s12*s13^3)*s23^3 +
               (2*s12^2*s13 + 6*s12*s13^2)*s23^4) + p1q^4*p2q^2*
              ((2*s12^2*s13 + 6*s12*s13^2)*s23^4 - 2*s12*s13*s23^5) +
             p3q^4*(p1q*p2q*(6*s12^4*s13 + 2*s12^3*s13^2 - 4*s12^2*s13^3)*
                s23^2 + p1q^2*((2*s12^4*s13 + 2*s12^3*s13^2)*s23^2 +
                 (-6*s12^3*s13 - 4*s12^2*s13^2)*s23^3)) +
             p3q^3*(p1q*p2q^2*(6*s12^4*s13 - 6*s12^3*s13^2 - 10*s12^2*s13^3 +
                 2*s12*s13^4)*s23^2 + p1q^2*p2q*((4*s12^4*s13 - 4*s12^2*
                    s13^3)*s23^2 + (-16*s12^3*s13 - 12*s12^2*s13^2 -
                   4*s12*s13^3)*s23^3) + p1q^3*((-6*s12^3*s13 - 4*s12^2*
                    s13^2)*s23^3 + (6*s12^2*s13 + 2*s12*s13^2)*s23^4)) +
             p3q*(p1q*p2q^4*(-4*s12^3*s13^2 + 2*s12^2*s13^3 + 6*s12*s13^4)*
                s23^2 - 2*p1q^5*s12*s13*s23^5 + p1q^2*p2q^3*
                ((-4*s12^3*s13^2 + 4*s12*s13^4)*s23^2 + (-4*s12^3*s13 -
                   12*s12^2*s13^2 - 16*s12*s13^3)*s23^3) + p1q^3*p2q^2*
                ((-4*s12^3*s13 - 8*s12^2*s13^2 - 10*s12*s13^3)*s23^3 +
                 (10*s12^2*s13 + 14*s12*s13^2)*s23^4) + p1q^4*p2q*
                ((8*s12^2*s13 + 8*s12*s13^2)*s23^4 - 4*s12*s13*s23^5)) +
             p3q^2*(p1q*p2q^3*(2*s12^4*s13 - 10*s12^3*s13^2 - 6*s12^2*s13^3 +
                 6*s12*s13^4)*s23^2 + p1q^2*p2q^2*((2*s12^4*s13 - 6*s12^3*
                    s13^2 - 6*s12^2*s13^3 + 2*s12*s13^4)*s23^2 +
                 (-14*s12^3*s13 - 16*s12^2*s13^2 - 14*s12*s13^3)*s23^3) +
               p1q^3*p2q*((-10*s12^3*s13 - 8*s12^2*s13^2 - 4*s12*s13^3)*
                  s23^3 + (14*s12^2*s13 + 10*s12*s13^2)*s23^4) + p1q^4*
                ((6*s12^2*s13 + 2*s12*s13^2)*s23^4 - 2*s12*s13*s23^5))) +
           ((p2q^2*(18*s12^2*s13 + 18*s12*s13^2 + (36*s12*s13 + 18*s13^2)*
                 s23 + 18*s13*s23^2) + p1q*p2q*((-s12 - s13)*s23^2 - s23^3) +
              p1q*p3q*((-s12 - s13)*s23^2 - s23^3))*Log(-s12 - s13 - s23))/
            (p1q*p2q*s12*s13*s23^2 + p1q*p3q*s12*s13*s23^2) +
           ((p2q^6*(18*s12^2*s13^4 + 18*s12*s13^5 + 18*s12*s13^4*s23) +
              p1q*p3q^5*((s12^4 + s12^3*s13)*s23^2 + s12^3*s23^3) +
              p1q*p2q^5*(36*s12^2*s13^4 + 36*s12*s13^5 - 36*s12^2*s13^3*s23 +
                (s12^2*s13^2 - 36*s12*s13^3 - s13^4)*s23^2 - 2*s13^3*s23^3 -
                s13^2*s23^4) + p1q^5*p2q*((s12^2 + s12*s13)*s23^4 +
                s12*s23^5) + p1q^2*p2q^4*(18*s12^2*s13^4 + 18*s12*s13^5 +
                (18*s12^3*s13^2 - 45*s12^2*s13^3 - 45*s12*s13^4)*s23 +
                (s12^3*s13 + 58*s12^2*s13^2 - 25*s12*s13^3 - s13^4)*s23^2 +
                (s12^2*s13 + 40*s12*s13^2)*s23^3 + (2*s12*s13 + 3*s13^2)*
                 s23^4 + 2*s13*s23^5) + p1q^3*p2q^3*((18*s12^3*s13^2 -
                  9*s12^2*s13^3 - 27*s12*s13^4)*s23 + (-17*s12^3*s13 +
                  48*s12^2*s13^2 + 20*s12*s13^3)*s23^2 +
                (-s12^3 - 39*s12^2*s13 + 28*s12*s13^2 + 2*s13^3)*s23^3 +
                (-2*s12^2 - 21*s12*s13 + 3*s13^2)*s23^4 - 2*s12*s23^5 -
                s23^6) + p1q^4*p2q^2*((-18*s12^3*s13 - 9*s12^2*s13^2 +
                  9*s12*s13^3)*s23^2 + (-s12^3 - 40*s12^2*s13 - 12*s12*s13^2)*
                 s23^3 + (-s12^2 - 22*s12*s13 - s13^2)*s23^4 + (-s12 - 2*s13)*
                 s23^5 - s23^6) + p3q^4*(p2q^2*(-18*s12^5*s13 - 18*s12^4*
                   s13^2 + (-36*s12^4*s13 - 18*s12^3*s13^2)*s23 +
                  (-16*s12^3*s13 + 2*s12^2*s13^2)*s23^2 + 2*s12^2*s13*
                   s23^3) + p1q^2*((2*s12^4 + 2*s12^3*s13)*s23^2 -
                  2*s12^2*s13*s23^3 - 2*s12^2*s23^4) + p1q*p2q*
                 ((-18*s12^4*s13 - 18*s12^3*s13^2)*s23 + (5*s12^4 -
                    32*s12^3*s13 - 19*s12^2*s13^2)*s23^2 + (7*s12^3 -
                    17*s12^2*s13)*s23^3 + 2*s12^2*s23^4)) +
              p3q^3*(p2q^3*(-18*s12^5*s13 + 36*s12^4*s13^2 + 54*s12^3*s13^3 +
                  (-36*s12^4*s13 + 72*s12^3*s13^2 + 36*s12^2*s13^3)*s23 +
                  (-16*s12^3*s13 + 34*s12^2*s13^2 - 4*s12*s13^3)*s23^2 -
                  6*s12*s13^2*s23^3 - 2*s12*s13*s23^4) + p1q*p2q^2*
                 (-18*s12^5*s13 + 18*s12^3*s13^3 + (18*s12^4*s13 + 72*s12^3*
                     s13^2 + 18*s12^2*s13^3)*s23 + (3*s12^4 + 105*s12^3*s13 +
                    83*s12^2*s13^2 - s12*s13^3)*s23^2 + (-s12^3 + 75*s12^2*
                     s13 + 12*s12*s13^2)*s23^3 + (-8*s12^2 + 9*s12*s13)*
                   s23^4 - 4*s12*s23^5) + p1q^2*p2q*((-27*s12^4*s13 -
                    9*s12^3*s13^2 + 18*s12^2*s13^3)*s23 + (6*s12^4 -
                    24*s12^3*s13 + 42*s12^2*s13^2 + 27*s12*s13^3)*s23^2 +
                  (15*s12^2*s13 + 51*s12*s13^2)*s23^3 + (-8*s12^2 +
                    22*s12*s13)*s23^4 - 2*s12*s23^5) + p1q^3*
                 ((s12^4 + s12^3*s13)*s23^2 + (-3*s12^3 - 4*s12^2*s13)*
                   s23^3 + (-3*s12^2 + s12*s13)*s23^4 + s12*s23^5)) +
              p3q^2*(p2q^4*(54*s12^4*s13^2 - 54*s12^2*s13^4 +
                  (90*s12^3*s13^2 - 36*s12^2*s13^3 - 18*s12*s13^4)*s23 +
                  (32*s12^2*s13^2 - 20*s12*s13^3 + 2*s13^4)*s23^2 +
                  (-2*s12^2*s13 - 4*s12*s13^2 + 4*s13^3)*s23^3 +
                  (-2*s12*s13 + 2*s13^2)*s23^4) + p1q^4*
                 ((-2*s12^3 - 2*s12^2*s13)*s23^3 + 2*s12*s13*s23^4 +
                  2*s12*s23^5) + p1q^2*p2q^2*(18*s12^4*s13^2 + 18*s12^3*
                   s13^3 + (81*s12^4*s13 + 81*s12^3*s13^2 - 18*s12^2*s13^3)*
                   s23 + (3*s12^4 + 150*s12^3*s13 + 23*s12^2*s13^2 -
                    16*s12*s13^3 + 9*s13^4)*s23^2 + (-7*s12^3 + 19*s12^2*
                     s13 - 72*s12*s13^2 - s13^3)*s23^3 + (-15*s12^2 -
                    61*s12*s13 - 29*s13^2)*s23^4 + (-5*s12 - 19*s13)*s23^5) +
                p1q^3*p2q*((27*s12^3*s13^2 + 27*s12^2*s13^3)*s23 +
                  (2*s12^4 + 46*s12^3*s13 + 107*s12^2*s13^2 + 36*s12*s13^3)*
                   s23^2 + (-6*s12^3 + 68*s12^2*s13 + 59*s12*s13^2 - 9*s13^3)*
                   s23^3 + (-6*s12^2 + 25*s12*s13 - 18*s13^2)*s23^4 +
                  (2*s12 - 9*s13)*s23^5) + p1q*p2q^3*(72*s12^4*s13^2 +
                  36*s12^3*s13^3 - 36*s12^2*s13^4 + (36*s12^4*s13 +
                    108*s12^3*s13^2 - 18*s12^2*s13^3 + 18*s12*s13^4)*s23 +
                  (-s12^4 + 48*s12^3*s13 + 14*s12^2*s13^2 + 38*s12*s13^3 +
                    19*s13^4)*s23^2 + (-7*s12^3 - 17*s12^2*s13 - 6*s12*
                     s13^2 + 36*s13^3)*s23^3 + (-10*s12^2 - 30*s12*s13 +
                    15*s13^2)*s23^4 + (-4*s12 - 2*s13)*s23^5)) +
              p3q*(p2q^5*(-54*s12^3*s13^3 - 36*s12^2*s13^4 + 18*s12*s13^5 -
                  72*s12^2*s13^3*s23 + (-16*s12*s13^3 + 2*s13^4)*s23^2 +
                  (2*s12*s13^2 + 4*s13^3)*s23^3 + 2*s13^2*s23^4) +
                p1q^5*((s12^2 + s12*s13)*s23^4 + s12*s23^5) + p1q^2*p2q^3*
                 (-36*s12^3*s13^3 - 36*s12^2*s13^4 + (-18*s12^4*s13 -
                    108*s12^3*s13^2 - 153*s12^2*s13^3 - 45*s12*s13^4 -
                    18*s13^5)*s23 + (-s12^4 - 129*s12^3*s13 - 195*s12^2*
                     s13^2 + 4*s12*s13^3 + 8*s13^4)*s23^2 + (-7*s12^3 -
                    231*s12^2*s13 - 83*s12*s13^2 + 53*s13^3)*s23^3 +
                  (-9*s12^2 - 135*s12*s13 + 10*s13^2)*s23^4 +
                  (-3*s12 - 17*s13)*s23^5) + p1q*p2q^4*(-90*s12^3*s13^3 -
                  72*s12^2*s13^4 + 18*s12*s13^5 + (-126*s12^2*s13^3 -
                    36*s12*s13^4 - 18*s13^5)*s23 + (57*s12^2*s13^2 +
                    21*s12*s13^3 - 18*s13^4)*s23^2 + (-(s12^2*s13) +
                    72*s12*s13^2 + 16*s13^3)*s23^3 + (-3*s12*s13 + 14*s13^2)*
                   s23^4 - 2*s13*s23^5) + p1q^3*p2q^2*((18*s12^4*s13 -
                    27*s12^3*s13^2 - 36*s12^2*s13^3 + 9*s12*s13^4)*s23 +
                  (s12^4 - 26*s12^3*s13 - 97*s12^2*s13^2 + 38*s12*s13^3 +
                    36*s13^4)*s23^2 + (-4*s12^3 - 147*s12^2*s13 - 93*s12*
                     s13^2 + 47*s13^3)*s23^3 + (-5*s12^2 - 123*s12*s13 -
                    15*s13^2)*s23^4 + (-s12 - 27*s13)*s23^5 - s23^6) +
                p1q^4*p2q*((-9*s12^2*s13^2 - 9*s12*s13^3)*s23^2 +
                  (-3*s12^3 - 24*s12^2*s13 - 48*s12*s13^2 - 18*s13^3)*s23^3 +
                  (-s12^2 - 38*s12*s13 - 37*s13^2)*s23^4 + (s12 - 20*s13)*
                   s23^5 - s23^6)))*Log(s12/(s12 + s13 + s23)))/
            (2*p1q*p3q^5*s12^4*s13*s23^2 + p1q*p2q^5*(-2*s12*s13^4*s23^2 - 2*
                s12*s13^3*s23^3) + p1q^2*p2q^4*(-4*s12*s13^4*s23^2 + 4*s12*
                s13^2*s23^4) + p1q^4*p2q^2*(4*s12*s13^3*s23^3 - 4*s12*s13*
                s23^5) + p1q^5*p2q*(-2*s12*s13^2*s23^4 - 2*s12*s13*s23^5) +
             p1q^3*p2q^3*(-2*s12*s13^4*s23^2 + 6*s12*s13^3*s23^3 + 6*s12*
                s13^2*s23^4 - 2*s12*s13*s23^5) +
             p3q^4*(p1q^2*((2*s12^4*s13 - 2*s12^3*s13^2)*s23^2 - 6*s12^3*s13*
                  s23^3) + p1q*p2q*((4*s12^4*s13 - 6*s12^3*s13^2)*s23^2 -
                 2*s12^3*s13*s23^3)) + p3q^3*(p1q*p2q^2*
                ((2*s12^4*s13 - 12*s12^3*s13^2 + 6*s12^2*s13^3)*s23^2 +
                 (-4*s12^3*s13 + 4*s12^2*s13^2)*s23^3) + p1q^2*p2q*
                ((2*s12^4*s13 - 10*s12^3*s13^2 + 4*s12^2*s13^3)*s23^2 +
                 (-14*s12^3*s13 + 4*s12^2*s13^2)*s23^3 + 4*s12^2*s13*s23^4) +
               p1q^3*(-2*s12^3*s13^2*s23^2 + (-6*s12^3*s13 + 4*s12^2*s13^2)*
                  s23^3 + 6*s12^2*s13*s23^4)) + p3q*(p1q*p2q^4*
                ((6*s12^2*s13^3 - 4*s12*s13^4)*s23^2 + (4*s12^2*s13^2 -
                   4*s12*s13^3)*s23^3) + p1q^2*p2q^3*((10*s12^2*s13^3 -
                   6*s12*s13^4)*s23^2 + (8*s12^2*s13^2 + 2*s12*s13^3)*s23^3 +
                 (4*s12^2*s13 + 8*s12*s13^2)*s23^4) + p1q^4*p2q*
                ((4*s12^2*s13^2 + 4*s12*s13^3)*s23^3 + (6*s12^2*s13 -
                   2*s12*s13^2)*s23^4 - 6*s12*s13*s23^5) + p1q^3*p2q^2*
                ((4*s12^2*s13^3 - 2*s12*s13^4)*s23^2 + (8*s12^2*s13^2 +
                   10*s12*s13^3)*s23^3 + (10*s12^2*s13 + 8*s12*s13^2)*s23^4 -
                 4*s12*s13*s23^5) + p1q^5*(-2*s12*s13^2*s23^4 - 2*s12*s13*
                  s23^5)) + p3q^2*(p1q*p2q^3*((-6*s12^3*s13^2 + 12*s12^2*
                    s13^3 - 2*s12*s13^4)*s23^2 + (-2*s12^3*s13 + 8*s12^2*
                    s13^2 - 2*s12*s13^3)*s23^3) + p1q^2*p2q^2*
                ((-8*s12^3*s13^2 + 14*s12^2*s13^3 - 2*s12*s13^4)*s23^2 +
                 (-8*s12^3*s13 + 12*s12^2*s13^2 + 2*s12*s13^3)*s23^3 +
                 (8*s12^2*s13 + 4*s12*s13^2)*s23^4) + p1q^4*
                (4*s12^2*s13^2*s23^3 + (6*s12^2*s13 - 2*s12*s13^2)*s23^4 -
                 2*s12*s13*s23^5) + p1q^3*p2q*((-2*s12^3*s13^2 + 4*s12^2*
                    s13^3)*s23^2 + (-6*s12^3*s13 + 12*s12^2*s13^2 +
                   4*s12*s13^3)*s23^3 + (16*s12^2*s13 + 2*s12*s13^2)*s23^4 -
                 2*s12*s13*s23^5))) + ((p1q*p3q^3*(-s12^3 - s12^2*s13 -
                s12^2*s23) + p1q*p2q^3*(-2*s12*s13^2 - 2*s13^3 -
                2*s13^2*s23) + p1q^2*p2q^2*(-(s12^2*s13) - 3*s12*s13^2 -
                2*s13^3 + s12*s13*s23 + 2*s13*s23^2) + p1q^3*p2q*(
                (s12^2 + 4*s12*s13 + 3*s13^2)*s23 + (s12 + 3*s13)*s23^2) +
              p1q^4*((-s12 - s13)*s23^2 - s23^3) + p3q^2*(p2q^2*
                 (-2*s12^2*s13 - 2*s12*s13^2 - 2*s12*s13*s23) +
                p1q*p2q*(-3*s12^3 - 2*s12^2*s13 + s12*s13^2 +
                  (-5*s12^2 - s12*s13)*s23 - 2*s12*s23^2) + p1q^2*
                 (-s12^3 - s12^2*s13 + (s12^2 + 2*s12*s13)*s23 +
                  2*s12*s23^2)) + p3q*(p1q*p2q^2*(s12^2*s13 + s12*s13^2 +
                  s12*s13*s23) + p2q^3*(2*s12*s13^2 + 2*s13^3 + 2*s13^2*
                   s23) + p1q^3*((2*s12^2 + 2*s12*s13)*s23 + (s12 - s13)*
                   s23^2 - s23^3) + p1q^2*p2q*(-s12^3 + s12*s13^2 +
                  (2*s12^2 + 7*s12*s13 + 3*s13^2)*s23 + (5*s12 + 5*s13)*
                   s23^2 + 2*s23^3)))*Log(s13/(s12 + s13 + s23)))/
            (2*p1q*p3q^3*s12^3*s13 + 2*p1q*p2q^3*s12*s13^3 +
             2*p1q^4*s12*s13*s23^2 + p1q^2*p2q^2*(2*s12*s13^3 - 4*s12*s13^2*
                s23) + p1q^3*p2q*(-4*s12*s13^2*s23 + 2*s12*s13*s23^2) +
             p3q^2*(p1q*p2q*(2*s12^3*s13 - 4*s12^2*s13^2) + p1q^2*
                (2*s12^3*s13 - 4*s12^2*s13*s23)) +
             p3q*(p1q*p2q^2*(-4*s12^2*s13^2 + 2*s12*s13^3) + p1q^2*p2q*
                (-4*s12^2*s13^2 + (-4*s12^2*s13 - 4*s12*s13^2)*s23) + p1q^3*
                (-4*s12^2*s13*s23 + 2*s12*s13*s23^2))) +
           ((p2q^6*(36*s12^3*s13^2 + 72*s12^2*s13^3 + 36*s12*s13^4 +
                (72*s12^2*s13^2 + 90*s12*s13^3 + 18*s13^4)*s23 +
                (36*s12*s13^2 + 18*s13^3)*s23^2) + p1q*p2q^5*(36*s12^3*
                 s13^2 + 72*s12^2*s13^3 + 36*s12*s13^4 + (-72*s12^3*s13 -
                  81*s12^2*s13^2 + 18*s12*s13^3 + 27*s13^4)*s23 +
                (-144*s12^2*s13 - 162*s12*s13^2 - 18*s13^3)*s23^2 +
                (-72*s12*s13 - 45*s13^2)*s23^3) + p1q^2*p2q^4*(
                (-90*s12^3*s13 - 198*s12^2*s13^2 - 108*s12*s13^3)*s23 +
                (36*s12^3 - 90*s12^2*s13 - 225*s12*s13^2 - 81*s13^3)*s23^2 +
                (72*s12^2 + 36*s12*s13 - 45*s13^2)*s23^3 + (36*s12 + 36*s13)*
                 s23^4) + p1q^4*p2q^2*((-27*s12^2 - 27*s12*s13)*s23^3 +
                (-54*s12 - 27*s13)*s23^4 - 27*s23^5) + p1q^3*p2q^3*(
                (54*s12^3 + 153*s12^2*s13 + 99*s12*s13^2)*s23^2 +
                (99*s12^2 + 225*s12*s13 + 81*s13^2)*s23^3 + (36*s12 + 72*s13)*
                 s23^4 - 9*s23^5) + p3q^4*(p2q^2*(36*s12^5 + 72*s12^4*s13 +
                  36*s12^3*s13^2 + (90*s12^4 + 126*s12^3*s13 + 36*s12^2*
                     s13^2)*s23 + (72*s12^3 + 54*s12^2*s13)*s23^2 +
                  18*s12^2*s23^3) + p1q*p2q*((9*s12^4 + 18*s12^3*s13 +
                    9*s12^2*s13^2)*s23 + (18*s12^3 + 36*s12^2*s13 +
                    18*s12*s13^2)*s23^2 + (9*s12^2 + 18*s12*s13)*s23^3)) +
              p3q^3*(p2q^3*(72*s12^5 + 72*s12^4*s13 - 72*s12^3*s13^2 -
                  72*s12^2*s13^3 + (162*s12^4 + 36*s12^3*s13 - 198*s12^2*
                     s13^2 - 72*s12*s13^3)*s23 + (108*s12^3 - 72*s12^2*s13 -
                    108*s12*s13^2)*s23^2 + (18*s12^2 - 36*s12*s13)*s23^3) +
                p1q^2*p2q*((18*s12^4 + 36*s12^3*s13 + 18*s12^2*s13^2)*s23 +
                  (27*s12^3 + 63*s12^2*s13 + 36*s12*s13^2)*s23^2 +
                  27*s12*s13*s23^3 - 9*s12*s23^4) + p1q*p2q^2*(36*s12^5 +
                  72*s12^4*s13 + 36*s12^3*s13^2 + (-54*s12^3*s13 - 72*s12^2*
                     s13^2 - 18*s12*s13^3)*s23 + (-144*s12^3 - 270*s12^2*
                     s13 - 144*s12*s13^2 - 18*s13^3)*s23^2 + (-144*s12^2 -
                    180*s12*s13 - 54*s13^2)*s23^3 + (-36*s12 - 36*s13)*
                   s23^4)) + p3q^2*(p2q^4*(36*s12^5 - 72*s12^4*s13 -
                  216*s12^3*s13^2 - 72*s12^2*s13^3 + 36*s12*s13^4 +
                  (72*s12^4 - 234*s12^3*s13 - 324*s12^2*s13^2 + 18*s12*
                     s13^3 + 36*s13^4)*s23 + (36*s12^3 - 198*s12^2*s13 -
                    72*s12*s13^2 + 54*s13^3)*s23^2 + (-36*s12*s13 + 18*s13^2)*
                   s23^3) + p1q*p2q^3*(36*s12^5 - 108*s12^3*s13^2 -
                  72*s12^2*s13^3 + (-81*s12^4 - 414*s12^3*s13 - 468*s12^2*
                     s13^2 - 126*s12*s13^3 + 9*s13^4)*s23 + (-288*s12^3 -
                    666*s12^2*s13 - 414*s12*s13^2 - 36*s13^3)*s23^2 +
                  (-189*s12^2 - 324*s12*s13 - 117*s13^2)*s23^3 +
                  (-18*s12 - 72*s13)*s23^4) + p1q^3*p2q*((-27*s12^3 -
                    27*s12^2*s13)*s23^2 + (-54*s12^2 - 36*s12*s13 - 9*s13^2)*
                   s23^3 + (-27*s12 - 9*s13)*s23^4) + p1q^2*p2q^2*
                 ((-90*s12^4 - 180*s12^3*s13 - 108*s12^2*s13^2 - 18*s12*
                     s13^3)*s23 + (-135*s12^3 - 207*s12^2*s13 - 90*s12*s13^2)*
                   s23^2 + (18*s12^2 - 18*s12*s13 - 9*s13^2)*s23^3 +
                  (81*s12 + 9*s13)*s23^4 + 18*s23^5)) +
              p3q*(p2q^5*(-72*s12^4*s13 - 72*s12^3*s13^2 + 72*s12^2*s13^3 +
                  72*s12*s13^4 + (-144*s12^3*s13 - 18*s12^2*s13^2 +
                    180*s12*s13^3 + 54*s13^4)*s23 + (-72*s12^2*s13 +
                    72*s12*s13^2 + 72*s13^3)*s23^2 + 18*s13^2*s23^3) +
                p1q*p2q^4*(-72*s12^4*s13 - 108*s12^3*s13^2 + 36*s12*s13^4 +
                  (-72*s12^4 - 414*s12^3*s13 - 468*s12^2*s13^2 - 90*s12*
                     s13^3 + 36*s13^4)*s23 + (-144*s12^3 - 558*s12^2*s13 -
                    468*s12*s13^2 - 54*s13^3)*s23^2 + (-72*s12^2 - 270*s12*
                     s13 - 144*s13^2)*s23^3 - 54*s13*s23^4) + p1q^3*p2q^2*
                 ((81*s12^3 + 90*s12^2*s13 + 9*s12*s13^2)*s23^2 +
                  (153*s12^2 + 81*s12*s13)*s23^3 + (63*s12 - 9*s13)*s23^4 -
                  9*s23^5) + p1q^4*p2q*((9*s12^2 + 9*s12*s13)*s23^3 +
                  (18*s12 + 9*s13)*s23^4 + 9*s23^5) + p1q^2*p2q^3*
                 ((-54*s12^4 - 144*s12^3*s13 - 162*s12^2*s13^2 - 72*s12*
                     s13^3)*s23 + (54*s12^3 + 36*s12^2*s13 - 99*s12*s13^2 -
                    45*s13^3)*s23^2 + (306*s12^2 + 261*s12*s13)*s23^3 +
                  (234*s12 + 81*s13)*s23^4 + 36*s23^5)))*
             Log(s23/(s12 + s13 + s23)))/(p1q*p3q^5*(2*s12^4 + 2*s12^3*s13)*
              s23^2 + p1q*p2q^5*(2*s12^2*s13^2 + 2*s12*s13^3)*s23^2 -
             2*p1q^5*p2q*s12*s23^5 + p1q^2*p2q^4*((2*s12^2*s13^2 +
                 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 6*s12*s13^2)*s23^3) +
             p1q^3*p2q^3*((-4*s12^2*s13 - 6*s12*s13^2)*s23^3 + (2*s12^2 +
                 6*s12*s13)*s23^4) + p1q^4*p2q^2*((2*s12^2 + 6*s12*s13)*
                s23^4 - 2*s12*s23^5) + p3q^4*(p1q*p2q*(6*s12^4 +
                 2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 + p1q^2*
                ((2*s12^4 + 2*s12^3*s13)*s23^2 + (-6*s12^3 - 4*s12^2*s13)*
                  s23^3)) + p3q^3*(p1q*p2q^2*(6*s12^4 - 6*s12^3*s13 -
                 10*s12^2*s13^2 + 2*s12*s13^3)*s23^2 + p1q^2*p2q*
                ((4*s12^4 - 4*s12^2*s13^2)*s23^2 + (-16*s12^3 - 12*s12^2*
                    s13 - 4*s12*s13^2)*s23^3) + p1q^3*
                ((-6*s12^3 - 4*s12^2*s13)*s23^3 + (6*s12^2 + 2*s12*s13)*
                  s23^4)) + p3q*(p1q*p2q^4*(-4*s12^3*s13 + 2*s12^2*s13^2 +
                 6*s12*s13^3)*s23^2 - 2*p1q^5*s12*s23^5 + p1q^2*p2q^3*
                ((-4*s12^3*s13 + 4*s12*s13^3)*s23^2 + (-4*s12^3 - 12*s12^2*
                    s13 - 16*s12*s13^2)*s23^3) + p1q^3*p2q^2*
                ((-4*s12^3 - 8*s12^2*s13 - 10*s12*s13^2)*s23^3 +
                 (10*s12^2 + 14*s12*s13)*s23^4) + p1q^4*p2q*
                ((8*s12^2 + 8*s12*s13)*s23^4 - 4*s12*s23^5)) +
             p3q^2*(p1q*p2q^3*(2*s12^4 - 10*s12^3*s13 - 6*s12^2*s13^2 +
                 6*s12*s13^3)*s23^2 + p1q^2*p2q^2*((2*s12^4 - 6*s12^3*s13 -
                   6*s12^2*s13^2 + 2*s12*s13^3)*s23^2 + (-14*s12^3 -
                   16*s12^2*s13 - 14*s12*s13^2)*s23^3) + p1q^3*p2q*
                ((-10*s12^3 - 8*s12^2*s13 - 4*s12*s13^2)*s23^3 +
                 (14*s12^2 + 10*s12*s13)*s23^4) + p1q^4*
                ((6*s12^2 + 2*s12*s13)*s23^4 - 2*s12*s23^5)))) +
         Log(p2q/(p1q + p2q + p3q))*((-9*s12^2 - 9*s12*s13 +
             (-10*s12 - s13)*s23 - s23^2)/(s12*s13*s23) +
           ((p1q*p3q^5*((s12^4 + s12^3*s13)*s23^2 + s12^3*s23^3) +
              p2q^6*(-18*s12^2*s13^4 - 18*s12*s13^5 + (-18*s12^2*s13^3 -
                  54*s12*s13^4 - 18*s13^5)*s23 + (-36*s12*s13^3 - 36*s13^4)*
                 s23^2 - 18*s13^3*s23^3) + p1q*p2q^5*(-36*s12^2*s13^4 -
                36*s12*s13^5 + (-36*s12^2*s13^3 - 117*s12*s13^4 - 45*s13^5)*
                 s23 + (-(s12^2*s13^2) - 83*s12*s13^3 - 91*s13^4)*s23^2 +
                (-2*s12*s13^2 - 47*s13^3)*s23^3 - s13^2*s23^4) +
              p1q^2*p2q^4*(-18*s12^2*s13^4 - 18*s12*s13^5 +
                (36*s12^3*s13^2 + 63*s12^2*s13^3 - 18*s12*s13^4 - 27*s13^5)*
                 s23 + (35*s12^3*s13 + 167*s12^2*s13^2 + 129*s12*s13^3 -
                  21*s13^4)*s23^2 + (89*s12^2*s13 + 203*s12*s13^2 + 59*s13^3)*
                 s23^3 + (74*s12*s13 + 73*s13^2)*s23^4 + 20*s13*s23^5) +
              p1q^4*p2q^2*((-9*s12^2*s13^2 - 9*s12*s13^3)*s23^2 +
                (s12^3 - 5*s12^2*s13 - 20*s12*s13^2 - 5*s13^3)*s23^3 +
                (s12^2 - 14*s12*s13 - 13*s13^2)*s23^4 + (-3*s12 - 11*s13)*
                 s23^5 - 3*s23^6) + p1q^5*p2q*((-s12^2 - 3*s12*s13 - 2*s13^2)*
                 s23^4 + (-3*s12 - 4*s13)*s23^5 - 2*s23^6) + p1q^3*p2q^3*(
                (36*s12^3*s13^2 + 81*s12^2*s13^3 + 45*s12*s13^4)*s23 +
                (35*s12^3*s13 + 159*s12^2*s13^2 + 167*s12*s13^3 + 34*s13^4)*
                 s23^2 + (s12^3 + 84*s12^2*s13 + 185*s12*s13^2 + 83*s13^3)*
                 s23^3 + (2*s12^2 + 63*s12*s13 + 63*s13^2)*s23^4 +
                13*s13*s23^5 - s23^6) + p3q^4*(p2q^2*(18*s12^5*s13 +
                  18*s12^4*s13^2 + (54*s12^4*s13 + 36*s12^3*s13^2)*s23 +
                  (52*s12^3*s13 + 16*s12^2*s13^2)*s23^2 + 16*s12^2*s13*
                   s23^3) + p1q*p2q*((-9*s12^4*s13 - 9*s12^3*s13^2)*s23 +
                  (-s12^4 - 24*s12^3*s13 - 14*s12^2*s13^2)*s23^2 +
                  (-5*s12^3 - 18*s12^2*s13)*s23^3 - 4*s12^2*s23^4) +
                p1q^2*((-2*s12^3*s13 - 2*s12^2*s13^2)*s23^2 +
                  (-4*s12^3 - 6*s12^2*s13)*s23^3 - 4*s12^2*s23^4)) +
              p3q^3*(p2q^3*(18*s12^5*s13 - 36*s12^4*s13^2 - 54*s12^3*s13^3 +
                  (18*s12^4*s13 - 162*s12^3*s13^2 - 108*s12^2*s13^3)*s23 +
                  (-38*s12^3*s13 - 178*s12^2*s13^2 - 32*s12*s13^3)*s23^2 +
                  (-54*s12^2*s13 - 48*s12*s13^2)*s23^3 - 16*s12*s13*s23^4) +
                p1q*p2q^2*(18*s12^5*s13 - 18*s12^3*s13^3 + (9*s12^4*s13 -
                    72*s12^3*s13^2 - 45*s12^2*s13^3)*s23 + (-s12^4 -
                    70*s12^3*s13 - 134*s12^2*s13^2 - 29*s12*s13^3)*s23^2 +
                  (-s12^3 - 78*s12^2*s13 - 47*s12*s13^2)*s23^3 +
                  (4*s12^2 - 14*s12*s13)*s23^4 + 4*s12*s23^5) +
                p1q^3*((-s12^4 - 3*s12^3*s13 - 2*s12^2*s13^2)*s23^2 +
                  (-3*s12^3 + 4*s12*s13^2)*s23^3 + (3*s12^2 + 9*s12*s13)*
                   s23^4 + 5*s12*s23^5) + p1q^2*p2q*((-9*s12^4*s13 +
                    9*s12^2*s13^3)*s23 + (-4*s12^4 - 11*s12^3*s13 +
                    24*s12^2*s13^2 + 13*s12*s13^3)*s23^2 + (-12*s12^3 +
                    19*s12^2*s13 + 38*s12*s13^2)*s23^3 + (-2*s12^2 +
                    31*s12*s13)*s23^4 + 6*s12*s23^5)) +
              p3q*(p2q^5*(54*s12^3*s13^3 + 36*s12^2*s13^4 - 18*s12*s13^5 +
                  (36*s12^3*s13^2 + 126*s12^2*s13^3 - 18*s12*s13^4 -
                    36*s13^5)*s23 + (72*s12^2*s13^2 + 34*s12*s13^3 -
                    74*s13^4)*s23^2 + (34*s12*s13^2 - 40*s13^3)*s23^3 -
                  2*s13^2*s23^4) + p1q*p2q^4*(90*s12^3*s13^3 + 72*s12^2*
                   s13^4 - 18*s12*s13^5 + (144*s12^3*s13^2 + 387*s12^2*
                     s13^3 + 72*s12*s13^4 - 63*s13^5)*s23 + (72*s12^3*s13 +
                    471*s12^2*s13^2 + 386*s12*s13^3 - 85*s13^4)*s23^2 +
                  (185*s12^2*s13 + 447*s12*s13^2 + 57*s13^3)*s23^3 +
                  (151*s12*s13 + 117*s13^2)*s23^4 + 38*s13*s23^5) +
                p1q^2*p2q^3*(36*s12^3*s13^3 + 36*s12^2*s13^4 +
                  (-36*s12^4*s13 + 54*s12^3*s13^2 + 261*s12^2*s13^3 +
                    108*s12*s13^4 - 27*s13^5)*s23 + (s12^4 + 12*s12^3*s13 +
                    385*s12^2*s13^2 + 432*s12*s13^3 + 22*s13^4)*s23^2 +
                  (7*s12^3 + 194*s12^2*s13 + 517*s12*s13^2 + 177*s13^3)*
                   s23^3 + (13*s12^2 + 200*s12*s13 + 180*s13^2)*s23^4 +
                  (7*s12 + 52*s13)*s23^5) + p1q^4*p2q*((-9*s12^2*s13^2 -
                    9*s12*s13^3)*s23^2 + (3*s12^3 + s12^2*s13 - 16*s12*
                     s13^2 - 5*s13^3)*s23^3 + (7*s12^2 - 8*s12*s13 -
                    15*s13^2)*s23^4 + (-s12 - 15*s13)*s23^5 - 5*s23^6) +
                p1q^3*p2q^2*((27*s12^3*s13^2 + 54*s12^2*s13^3 + 27*s12*s13^4)*
                   s23 + (-s12^4 + 35*s12^3*s13 + 119*s12^2*s13^2 +
                    117*s12*s13^3 + 34*s13^4)*s23^2 + (4*s12^3 + 92*s12^2*
                     s13 + 151*s12*s13^2 + 78*s13^3)*s23^3 + (15*s12^2 +
                    68*s12*s13 + 51*s13^2)*s23^4 + (7*s12 + 4*s13)*s23^5 -
                  3*s23^6) + p1q^5*((-s12^2 - 3*s12*s13 - 2*s13^2)*s23^4 +
                  (-3*s12 - 4*s13)*s23^5 - 2*s23^6)) + p3q^2*(
                p2q^4*(-54*s12^4*s13^2 + 54*s12^2*s13^4 + (-18*s12^4*s13 -
                    90*s12^3*s13^2 + 144*s12^2*s13^3 + 108*s12*s13^4)*s23 +
                  (-36*s12^3*s13 + 40*s12^2*s13^2 + 200*s12*s13^3 + 16*s13^4)*
                   s23^2 + (-16*s12^2*s13 + 94*s12*s13^2 + 32*s13^3)*s23^3 +
                  (2*s12*s13 + 16*s13^2)*s23^4) + p1q^2*p2q^2*
                 (-18*s12^4*s13^2 - 18*s12^3*s13^3 + (-45*s12^4*s13 -
                    90*s12^3*s13^2 - 9*s12^2*s13^3 + 18*s12*s13^4)*s23 +
                  (-3*s12^4 - 86*s12^3*s13 - 44*s12^2*s13^2 + 64*s12*s13^3 +
                    25*s13^4)*s23^2 + (-s12^3 + 4*s12^2*s13 + 100*s12*s13^2 +
                    64*s13^3)*s23^3 + (15*s12^2 + 67*s12*s13 + 53*s13^2)*
                   s23^4 + (13*s12 + 14*s13)*s23^5) + p1q*p2q^3*
                 (-72*s12^4*s13^2 - 36*s12^3*s13^3 + 36*s12^2*s13^4 +
                  (-108*s12^4*s13 - 279*s12^3*s13^2 + 54*s12^2*s13^3 +
                    117*s12*s13^4)*s23 + (s12^4 - 243*s12^3*s13 - 152*s12^2*
                     s13^2 + 242*s12*s13^3 + 42*s13^4)*s23^2 +
                  (5*s12^3 - 127*s12^2*s13 + 150*s12*s13^2 + 104*s13^3)*
                   s23^3 + (8*s12^2 + 29*s12*s13 + 82*s13^2)*s23^4 +
                  (4*s12 + 20*s13)*s23^5) + p1q^3*p2q*((9*s12^3*s13^2 +
                    9*s12^2*s13^3)*s23 + (-2*s12^4 + 15*s12^3*s13 +
                    30*s12^2*s13^2 + 4*s12*s13^3)*s23^2 + (44*s12^2*s13 +
                    24*s12*s13^2 - 5*s13^3)*s23^3 + (16*s12^2 + 32*s12*s13 -
                    12*s13^2)*s23^4 + (12*s12 - 9*s13)*s23^5 - 2*s23^6) +
                p1q^4*((2*s12^3 + 6*s12^2*s13 + 4*s12*s13^2)*s23^3 +
                  (6*s12^2 + 6*s12*s13 - 2*s13^2)*s23^4 + (2*s12 - 4*s13)*
                   s23^5 - 2*s23^6)))*Log((p1q + p2q)/(p1q + p2q + p3q)))/
            (2*p1q*p3q^5*s12^4*s13*s23^2 + p1q*p2q^5*(-2*s12*s13^4*s23^2 - 2*
                s12*s13^3*s23^3) + p1q^2*p2q^4*(-4*s12*s13^4*s23^2 + 4*s12*
                s13^2*s23^4) + p1q^4*p2q^2*(4*s12*s13^3*s23^3 - 4*s12*s13*
                s23^5) + p1q^5*p2q*(-2*s12*s13^2*s23^4 - 2*s12*s13*s23^5) +
             p1q^3*p2q^3*(-2*s12*s13^4*s23^2 + 6*s12*s13^3*s23^3 + 6*s12*
                s13^2*s23^4 - 2*s12*s13*s23^5) +
             p3q^4*(p1q^2*((2*s12^4*s13 - 2*s12^3*s13^2)*s23^2 - 6*s12^3*s13*
                  s23^3) + p1q*p2q*((4*s12^4*s13 - 6*s12^3*s13^2)*s23^2 -
                 2*s12^3*s13*s23^3)) + p3q^3*(p1q*p2q^2*
                ((2*s12^4*s13 - 12*s12^3*s13^2 + 6*s12^2*s13^3)*s23^2 +
                 (-4*s12^3*s13 + 4*s12^2*s13^2)*s23^3) + p1q^2*p2q*
                ((2*s12^4*s13 - 10*s12^3*s13^2 + 4*s12^2*s13^3)*s23^2 +
                 (-14*s12^3*s13 + 4*s12^2*s13^2)*s23^3 + 4*s12^2*s13*s23^4) +
               p1q^3*(-2*s12^3*s13^2*s23^2 + (-6*s12^3*s13 + 4*s12^2*s13^2)*
                  s23^3 + 6*s12^2*s13*s23^4)) + p3q*(p1q*p2q^4*
                ((6*s12^2*s13^3 - 4*s12*s13^4)*s23^2 + (4*s12^2*s13^2 -
                   4*s12*s13^3)*s23^3) + p1q^2*p2q^3*((10*s12^2*s13^3 -
                   6*s12*s13^4)*s23^2 + (8*s12^2*s13^2 + 2*s12*s13^3)*s23^3 +
                 (4*s12^2*s13 + 8*s12*s13^2)*s23^4) + p1q^4*p2q*
                ((4*s12^2*s13^2 + 4*s12*s13^3)*s23^3 + (6*s12^2*s13 -
                   2*s12*s13^2)*s23^4 - 6*s12*s13*s23^5) + p1q^3*p2q^2*
                ((4*s12^2*s13^3 - 2*s12*s13^4)*s23^2 + (8*s12^2*s13^2 +
                   10*s12*s13^3)*s23^3 + (10*s12^2*s13 + 8*s12*s13^2)*s23^4 -
                 4*s12*s13*s23^5) + p1q^5*(-2*s12*s13^2*s23^4 - 2*s12*s13*
                  s23^5)) + p3q^2*(p1q*p2q^3*((-6*s12^3*s13^2 + 12*s12^2*
                    s13^3 - 2*s12*s13^4)*s23^2 + (-2*s12^3*s13 + 8*s12^2*
                    s13^2 - 2*s12*s13^3)*s23^3) + p1q^2*p2q^2*
                ((-8*s12^3*s13^2 + 14*s12^2*s13^3 - 2*s12*s13^4)*s23^2 +
                 (-8*s12^3*s13 + 12*s12^2*s13^2 + 2*s12*s13^3)*s23^3 +
                 (8*s12^2*s13 + 4*s12*s13^2)*s23^4) + p1q^4*
                (4*s12^2*s13^2*s23^3 + (6*s12^2*s13 - 2*s12*s13^2)*s23^4 -
                 2*s12*s13*s23^5) + p1q^3*p2q*((-2*s12^3*s13^2 + 4*s12^2*
                    s13^3)*s23^2 + (-6*s12^3*s13 + 12*s12^2*s13^2 +
                   4*s12*s13^3)*s23^3 + (16*s12^2*s13 + 2*s12*s13^2)*s23^4 -
                 2*s12*s13*s23^5))) + ((p2q^5*(-18*s12*s13^3 - 18*s13^4 -
                18*s13^3*s23) + p1q*p3q^4*((9*s12^3 + 9*s12^2*s13)*s23 +
                9*s12^2*s23^2) + p1q*p2q^4*(-18*s12*s13^3 - 18*s13^4 +
                (36*s12*s13^2 + 18*s13^3)*s23 + 36*s13^2*s23^2) +
              p1q^3*p2q^2*((-9*s12^2 - 45*s12*s13 - 36*s13^2)*s23^2 +
                (-9*s12 - 36*s13)*s23^3) + p1q^2*p2q^3*((9*s12^2*s13 +
                  54*s12*s13^2 + 45*s13^3)*s23 + (-9*s12*s13 + 27*s13^2)*
                 s23^2 - 18*s13*s23^3) + p1q^4*p2q*((9*s12 + 9*s13)*s23^3 +
                9*s23^4) + p3q*(p2q^4*(36*s12^2*s13^2 + 18*s12*s13^3 -
                  18*s13^4 + 54*s12*s13^2*s23 + 18*s13^2*s23^2) +
                p1q*p2q^3*(36*s12^2*s13^2 + 36*s12*s13^3 + (-18*s12^2*s13 +
                    81*s12*s13^2 + 63*s13^3)*s23 + (-45*s12*s13 + 36*s13^2)*
                   s23^2 - 27*s13*s23^3) + p1q^2*p2q^2*((27*s12^3 +
                    36*s12^2*s13 + 18*s12*s13^2 + 9*s13^3)*s23 +
                  (45*s12^2 - 45*s12*s13 - 63*s13^2)*s23^2 +
                  (27*s12 - 63*s13)*s23^3 + 9*s23^4) + p1q^4*
                 ((9*s12 + 9*s13)*s23^3 + 9*s23^4) + p1q^3*p2q*
                 ((-9*s12^2 - 27*s12*s13 - 18*s13^2)*s23^2 + (18*s12 + 9*s13)*
                   s23^3 + 27*s23^4)) + p3q^3*(p1q^2*((9*s12^3 + 9*s12^2*s13)*
                   s23 + (-9*s12^2 - 18*s12*s13)*s23^2 - 18*s12*s23^3) +
                p2q^2*(-18*s12^3*s13 - 18*s12^2*s13^2 + 18*s12^3*s23 +
                  (36*s12^2 + 18*s12*s13)*s23^2 + 18*s12*s23^3) +
                p1q*p2q*((27*s12^3 + 45*s12^2*s13 + 18*s12*s13^2)*s23 +
                  (72*s12^2 + 99*s12*s13 + 36*s13^2)*s23^2 +
                  (81*s12 + 72*s13)*s23^3 + 36*s23^4)) +
              p3q^2*(p2q^3*(-18*s12^3*s13 + 18*s12^2*s13^2 + 36*s12*s13^3 -
                  54*s12^2*s13*s23 + (-54*s12*s13 - 18*s13^2)*s23^2 -
                  18*s13*s23^3) + p1q^3*((-18*s12^2 - 18*s12*s13)*s23^2 +
                  (-9*s12 + 9*s13)*s23^3 + 9*s23^4) + p1q*p2q^2*
                 (-18*s12^3*s13 - 18*s12^2*s13^2 + (54*s12^3 + 18*s12^2*s13 -
                    45*s12*s13^2 - 27*s13^3)*s23 + (117*s12^2 - 72*s13^2)*
                   s23^2 + (81*s12 - 27*s13)*s23^3 + 18*s23^4) +
                p1q^2*p2q*((18*s12^3 + 36*s12^2*s13 + 18*s12*s13^2)*s23 +
                  (36*s12^2 + 54*s12*s13 + 18*s13^2)*s23^2 +
                  (63*s12 + 63*s13)*s23^3 + 45*s23^4)))*
             Log(p3q/(p1q + p2q + p3q)))/(2*p1q*p3q^4*s12^2*s13*s23^2 +
             2*p1q*p2q^4*s13^3*s23^2 + 2*p1q^4*p2q*s13*s23^4 +
             p1q^2*p2q^3*(2*s13^3*s23^2 - 4*s13^2*s23^3) +
             p1q^3*p2q^2*(-4*s13^2*s23^3 + 2*s13*s23^4) +
             p3q^3*(p1q*p2q*(4*s12^2*s13 - 4*s12*s13^2)*s23^2 + p1q^2*
                (2*s12^2*s13*s23^2 - 4*s12*s13*s23^3)) +
             p3q^2*(p1q*p2q^2*(2*s12^2*s13 - 8*s12*s13^2 + 2*s13^3)*s23^2 +
               p1q^2*p2q*((2*s12^2*s13 - 4*s12*s13^2)*s23^2 +
                 (-8*s12*s13 - 4*s13^2)*s23^3) + p1q^3*(-4*s12*s13*s23^3 +
                 2*s13*s23^4)) + p3q*(p1q*p2q^3*(-4*s12*s13^2 + 4*s13^3)*
                s23^2 + 2*p1q^4*s13*s23^4 + p1q^2*p2q^2*
                ((-4*s12*s13^2 + 2*s13^3)*s23^2 + (-4*s12*s13 - 8*s13^2)*
                  s23^3) + p1q^3*p2q*((-4*s12*s13 - 4*s13^2)*s23^3 +
                 4*s13*s23^4))) + ((p2q^5*(-18*s12^2*s13^3 - 18*s12*s13^4 -
                18*s12*s13^3*s23) + p1q*p3q^4*((9*s12^4 + 9*s12^3*s13)*s23 +
                (10*s12^3 + s12^2*s13)*s23^2 + s12^2*s23^3) +
              p1q*p2q^4*(-18*s12^2*s13^3 - 18*s12*s13^4 + (27*s12^2*s13^2 +
                  9*s12*s13^3)*s23 + (29*s12*s13^2 + 2*s13^3)*s23^2 +
                2*s13^2*s23^3) + p1q^3*p2q^2*((-9*s12^3 - 45*s12^2*s13 -
                  36*s12*s13^2)*s23^2 + (-10*s12^2 - 40*s12*s13 - 3*s13^2)*
                 s23^3 + (-s12 - 3*s13)*s23^4) + p1q^2*p2q^3*(
                (27*s12^3*s13 + 72*s12^2*s13^2 + 45*s12*s13^3)*s23 +
                (19*s12^2*s13 + 39*s12*s13^2 + 2*s13^3)*s23^2 - 10*s12*s13*
                 s23^3 - 2*s13*s23^4) + p1q^4*p2q*((9*s12^2 + 9*s12*s13)*
                 s23^3 + (10*s12 + s13)*s23^4 + s23^5) +
              p3q^3*(p2q^2*(-18*s12^4*s13 - 18*s12^3*s13^2 - 18*s12^3*s13*
                   s23 + (2*s12^2*s13 + 2*s12*s13^2)*s23^2 + 2*s12*s13*
                   s23^3) + p1q^2*((9*s12^4 + 9*s12^3*s13)*s23 +
                  (-8*s12^3 - 17*s12^2*s13)*s23^2 + (-19*s12^2 - 2*s12*s13)*
                   s23^3 - 2*s12*s23^4) + p1q*p2q*((36*s12^4 + 36*s12^3*s13)*
                   s23 + (58*s12^3 + 21*s12^2*s13 - s12*s13^2)*s23^2 +
                  (24*s12^2 + s12*s13)*s23^3 + 2*s12*s23^4)) +
              p3q^2*(p2q^3*(-18*s12^4*s13 + 18*s12^3*s13^2 + 36*s12^2*s13^3 +
                  (-18*s12^3*s13 + 36*s12^2*s13^2)*s23 + (2*s12^2*s13 -
                    2*s13^3)*s23^2 + (2*s12*s13 - 2*s13^2)*s23^3) +
                p1q*p2q^2*(-18*s12^4*s13 - 18*s12^3*s13^2 + (27*s12^4 -
                    27*s12^3*s13 - 45*s12^2*s13^2 - 9*s12*s13^3)*s23 +
                  (48*s12^3 - 35*s12^2*s13 - 29*s12*s13^2)*s23^2 +
                  (23*s12^2 - 18*s12*s13)*s23^3 + 2*s12*s23^4) +
                p1q^2*p2q*((18*s12^4 + 18*s12^3*s13)*s23 + (-25*s12^3 -
                    80*s12^2*s13 - 37*s12*s13^2)*s23^2 + (-66*s12^2 -
                    63*s12*s13 - 3*s13^2)*s23^3 + (-25*s12 - 5*s13)*s23^4 -
                  2*s23^5) + p1q^3*((-18*s12^3 - 18*s12^2*s13)*s23^2 +
                  (-11*s12^2 + 7*s12*s13)*s23^3 + (8*s12 + s13)*s23^4 +
                  s23^5)) + p3q*(p2q^4*(36*s12^3*s13^2 + 18*s12^2*s13^3 -
                  18*s12*s13^4 + (36*s12^2*s13^2 - 18*s12*s13^3)*s23 +
                  (-2*s12*s13^2 - 2*s13^3)*s23^2 - 2*s13^2*s23^3) +
                p1q*p2q^3*(36*s12^3*s13^2 + 36*s12^2*s13^3 + (18*s12^3*s13 +
                    126*s12^2*s13^2 + 72*s12*s13^3)*s23 + (35*s12^2*s13 +
                    91*s12*s13^2 + 2*s13^3)*s23^2 + (17*s12*s13 + 2*s13^2)*
                   s23^3) + p1q^2*p2q^2*((9*s12^4 + 18*s12^3*s13 + 36*s12^2*
                     s13^2 + 27*s12*s13^3)*s23 + (-17*s12^3 - 80*s12^2*s13 -
                    34*s12*s13^2 + 2*s13^3)*s23^2 + (-47*s12^2 - 89*s12*s13 -
                    3*s13^2)*s23^3 + (-23*s12 - 7*s13)*s23^4 - 2*s23^5) +
                p1q^3*p2q*((-27*s12^3 - 63*s12^2*s13 - 36*s12*s13^2)*s23^2 +
                  (-21*s12^2 - 33*s12*s13 - 3*s13^2)*s23^3 + (7*s12 - 2*s13)*
                   s23^4 + s23^5) + p1q^4*((9*s12^2 + 9*s12*s13)*s23^3 +
                  (10*s12 + s13)*s23^4 + s23^5)))*Log((p1q + p3q)/(p1q +
                p2q + p3q)))/(2*p1q*p3q^4*s12^3*s13*s23^2 +
             2*p1q*p2q^4*s12*s13^3*s23^2 + 2*p1q^4*p2q*s12*s13*s23^4 +
             p1q^2*p2q^3*(2*s12*s13^3*s23^2 - 4*s12*s13^2*s23^3) +
             p1q^3*p2q^2*(-4*s12*s13^2*s23^3 + 2*s12*s13*s23^4) +
             p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*s23^2 + p1q^2*
                (2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
             p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*
                s23^2 + p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
                 (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) + p1q^3*
                (-4*s12^2*s13*s23^3 + 2*s12*s13*s23^4)) +
             p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 + 2*p1q^4*
                s12*s13*s23^4 + p1q^2*p2q^2*((-4*s12^2*s13^2 + 2*s12*s13^3)*
                  s23^2 + (-4*s12^2*s13 - 8*s12*s13^2)*s23^3) + p1q^3*p2q*
                ((-4*s12^2*s13 - 4*s12*s13^2)*s23^3 + 4*s12*s13*s23^4))) +
           ((p2q^6*(-18*s12^2*s13^3 - 36*s12*s13^4 - 18*s13^5 +
                (-36*s12*s13^3 - 36*s13^4)*s23 - 18*s13^3*s23^2) +
              p1q*p3q^5*((9*s12^4 + 18*s12^3*s13 + 9*s12^2*s13^2)*s23 +
                (18*s12^3 + 18*s12^2*s13)*s23^2 + 9*s12^2*s23^3) +
              p1q*p2q^5*(-18*s12^2*s13^3 - 36*s12*s13^4 - 18*s13^5 +
                (81*s12^2*s13^2 + 126*s12*s13^3 + 45*s13^4)*s23 +
                (135*s12*s13^2 + 117*s13^3)*s23^2 + 54*s13^2*s23^3) +
              p1q^2*p2q^4*((-27*s12^3*s13 + 9*s12^2*s13^2 + 99*s12*s13^3 +
                  63*s13^4)*s23 + (-117*s12^2*s13 - 117*s12*s13^2)*s23^2 +
                (-144*s12*s13 - 117*s13^2)*s23^3 - 54*s13*s23^4) +
              p1q^4*p2q^2*((9*s12^2 + 36*s12*s13 + 27*s13^2)*s23^3 +
                (18*s12 + 36*s13)*s23^4 + 9*s23^5) + p1q^3*p2q^3*(
                (9*s12^3 - 18*s12^2*s13 - 99*s12*s13^2 - 72*s13^3)*s23^2 +
                (36*s12^2 + 9*s12*s13 - 63*s13^2)*s23^3 + (45*s12 + 27*s13)*
                 s23^4 + 18*s23^5) + p3q^4*(p2q^2*(-18*s12^4*s13 -
                  36*s12^3*s13^2 - 18*s12^2*s13^3 + (-36*s12^3*s13 -
                    36*s12^2*s13^2)*s23 + (-36*s12^2*s13 - 18*s12*s13^2)*
                   s23^2 - 18*s12*s13*s23^3) + p1q^2*((9*s12^4 + 18*s12^3*
                     s13 + 9*s12^2*s13^2)*s23 + (-18*s12^2*s13 - 18*s12*
                     s13^2)*s23^2 + (-27*s12^2 - 36*s12*s13)*s23^3 -
                  18*s12*s23^4) + p1q*p2q*((9*s12^4 - 36*s12^3*s13 -
                    99*s12^2*s13^2 - 54*s12*s13^3)*s23 + (-135*s12^2*s13 -
                    171*s12*s13^2 - 36*s13^3)*s23^2 + (-27*s12^2 - 135*s12*
                     s13 - 72*s13^2)*s23^3 + (-18*s12 - 36*s13)*s23^4)) +
              p3q^3*(p2q^3*(-36*s12^4*s13 - 36*s12^3*s13^2 + 36*s12^2*s13^3 +
                  36*s12*s13^4 + (-72*s12^3*s13 + 72*s12*s13^3)*s23 +
                  (-72*s12^2*s13 + 18*s12*s13^2 + 18*s13^3)*s23^2 +
                  (-36*s12*s13 + 18*s13^2)*s23^3) + p1q*p2q^2*
                 (-18*s12^4*s13 - 36*s12^3*s13^2 - 18*s12^2*s13^3 +
                  (-9*s12^4 - 72*s12^3*s13 - 36*s12^2*s13^2 + 72*s12*s13^3 +
                    45*s13^4)*s23 + (-54*s12^3 - 243*s12^2*s13 - 126*s12*
                     s13^2 + 45*s13^3)*s23^2 + (-81*s12^2 - 261*s12*s13 -
                    72*s13^2)*s23^3 + (-36*s12 - 72*s13)*s23^4) +
                p1q^3*((-18*s12^3 - 36*s12^2*s13 - 18*s12*s13^2)*s23^2 +
                  (-27*s12^2 - 18*s12*s13 + 9*s13^2)*s23^3 + 18*s13*s23^4 +
                  9*s23^5) + p1q^2*p2q*((9*s12^4 - 36*s12^3*s13 - 99*s12^2*
                     s13^2 - 54*s12*s13^3)*s23 + (-27*s12^3 - 171*s12^2*s13 -
                    198*s12*s13^2 - 54*s13^3)*s23^2 + (-63*s12^2 - 162*s12*
                     s13 - 99*s13^2)*s23^3 + (-9*s12 - 27*s13)*s23^4 +
                  18*s23^5)) + p3q^2*(p2q^4*(-18*s12^4*s13 + 36*s12^3*s13^2 +
                  108*s12^2*s13^3 + 36*s12*s13^4 - 18*s13^5 +
                  (-36*s12^3*s13 + 108*s12^2*s13^2 + 108*s12*s13^3 -
                    36*s13^4)*s23 + (-36*s12^2*s13 + 90*s12*s13^2 + 18*s13^3)*
                   s23^2 + (-18*s12*s13 + 36*s13^2)*s23^3) + p1q*p2q^3*
                 (-18*s12^4*s13 + 54*s12^2*s13^3 + 36*s12*s13^4 +
                  (-9*s12^4 - 18*s12^3*s13 + 180*s12^2*s13^2 + 270*s12*
                     s13^3 + 81*s13^4)*s23 + (-36*s12^3 - 153*s12^2*s13 +
                    108*s12*s13^2 + 171*s13^3)*s23^2 + (-45*s12^2 -
                    225*s12*s13 + 18*s13^2)*s23^3 + (-18*s12 - 72*s13)*
                   s23^4) + p1q^4*((9*s12^2 + 18*s12*s13 + 9*s13^2)*s23^3 +
                  (18*s12 + 18*s13)*s23^4 + 9*s23^5) + p1q^2*p2q^2*
                 ((-9*s12^4 - 27*s12^3*s13 - 18*s12^2*s13^2 + 9*s12*s13^3 +
                    9*s13^4)*s23 + (-54*s12^3 - 279*s12^2*s13 - 279*s12*
                     s13^2 - 54*s13^3)*s23^2 + (-45*s12^2 - 324*s12*s13 -
                    171*s13^2)*s23^3 + (36*s12 - 72*s13)*s23^4 + 36*s23^5) +
                p1q^3*p2q*((-27*s12^3 - 36*s12^2*s13 - 27*s12*s13^2 -
                    18*s13^3)*s23^2 + (-18*s12^2 - 9*s12*s13 - 27*s13^2)*
                   s23^3 + (45*s12 + 27*s13)*s23^4 + 36*s23^5)) +
              p3q*(p2q^5*(36*s12^3*s13^2 + 36*s12^2*s13^3 - 36*s12*s13^4 -
                  36*s13^5 + (72*s12^2*s13^2 - 72*s13^4)*s23 +
                  (54*s12*s13^2 - 18*s13^3)*s23^2 + 18*s13^2*s23^3) +
                p1q*p2q^4*(36*s12^3*s13^2 + 54*s12^2*s13^3 - 18*s13^5 +
                  (189*s12^2*s13^2 + 270*s12*s13^3 + 81*s13^4)*s23 +
                  (-63*s12^2*s13 + 198*s12*s13^2 + 207*s13^3)*s23^2 +
                  (-99*s12*s13 + 72*s13^2)*s23^3 - 36*s13*s23^4) +
                p1q^2*p2q^3*((-9*s12^4 - 36*s12^3*s13 - 9*s12^2*s13^2 +
                    54*s12*s13^3 + 36*s13^4)*s23 + (-27*s12^3 - 279*s12^2*
                     s13 - 288*s12*s13^2 - 36*s13^3)*s23^2 + (-9*s12^2 -
                    342*s12*s13 - 189*s13^2)*s23^3 + (27*s12 - 99*s13)*
                   s23^4 + 18*s23^5) + p1q^4*p2q*((18*s12^2 + 18*s12*s13)*
                   s23^3 + (36*s12 + 18*s13)*s23^4 + 18*s23^5) +
                p1q^3*p2q^2*((-90*s12^2*s13 - 108*s12*s13^2 - 18*s13^3)*
                   s23^2 + (45*s12^2 - 54*s12*s13 - 27*s13^2)*s23^3 +
                  (90*s12 + 36*s13)*s23^4 + 45*s23^5)))*
             Log((p2q + p3q)/(p1q + p2q + p3q)))/
            (p1q*p3q^5*(2*s12^3*s13 + 2*s12^2*s13^2)*s23^2 +
             p1q*p2q^5*(2*s12*s13^3 + 2*s13^4)*s23^2 - 2*p1q^5*p2q*s13*
              s23^5 + p1q^2*p2q^4*((2*s12*s13^3 + 2*s13^4)*s23^2 +
               (-4*s12*s13^2 - 6*s13^3)*s23^3) + p1q^3*p2q^3*
              ((-4*s12*s13^2 - 6*s13^3)*s23^3 + (2*s12*s13 + 6*s13^2)*
                s23^4) + p1q^4*p2q^2*((2*s12*s13 + 6*s13^2)*s23^4 - 2*s13*
                s23^5) + p3q^4*(p1q*p2q*(6*s12^3*s13 + 2*s12^2*s13^2 -
                 4*s12*s13^3)*s23^2 + p1q^2*((2*s12^3*s13 + 2*s12^2*s13^2)*
                  s23^2 + (-6*s12^2*s13 - 4*s12*s13^2)*s23^3)) +
             p3q^3*(p1q*p2q^2*(6*s12^3*s13 - 6*s12^2*s13^2 - 10*s12*s13^3 +
                 2*s13^4)*s23^2 + p1q^2*p2q*((4*s12^3*s13 - 4*s12*s13^3)*
                  s23^2 + (-16*s12^2*s13 - 12*s12*s13^2 - 4*s13^3)*s23^3) +
               p1q^3*((-6*s12^2*s13 - 4*s12*s13^2)*s23^3 + (6*s12*s13 +
                   2*s13^2)*s23^4)) + p3q*(p1q*p2q^4*(-4*s12^2*s13^2 +
                 2*s12*s13^3 + 6*s13^4)*s23^2 - 2*p1q^5*s13*s23^5 + p1q^2*
                p2q^3*((-4*s12^2*s13^2 + 4*s13^4)*s23^2 + (-4*s12^2*s13 -
                   12*s12*s13^2 - 16*s13^3)*s23^3) + p1q^3*p2q^2*
                ((-4*s12^2*s13 - 8*s12*s13^2 - 10*s13^3)*s23^3 +
                 (10*s12*s13 + 14*s13^2)*s23^4) + p1q^4*p2q*
                ((8*s12*s13 + 8*s13^2)*s23^4 - 4*s13*s23^5)) +
             p3q^2*(p1q*p2q^3*(2*s12^3*s13 - 10*s12^2*s13^2 - 6*s12*s13^3 +
                 6*s13^4)*s23^2 + p1q^2*p2q^2*((2*s12^3*s13 - 6*s12^2*s13^2 -
                   6*s12*s13^3 + 2*s13^4)*s23^2 + (-14*s12^2*s13 -
                   16*s12*s13^2 - 14*s13^3)*s23^3) + p1q^3*p2q*
                ((-10*s12^2*s13 - 8*s12*s13^2 - 4*s13^3)*s23^3 +
                 (14*s12*s13 + 10*s13^2)*s23^4) + p1q^4*
                ((6*s12*s13 + 2*s13^2)*s23^4 - 2*s13*s23^5))) +
           ((p2q^2*(18*s12^2*s13 + 18*s12*s13^2 + 18*s12*s13*s23) +
              p1q*p2q*((-9*s12^2 - 9*s12*s13)*s23 + (-10*s12 - s13)*s23^2 -
                s23^3) + p1q*p3q*((-9*s12^2 - 9*s12*s13)*s23 +
                (-10*s12 - s13)*s23^2 - s23^3))*Log(-s12 - s13 - s23))/
            (p1q*p2q*s12*s13*s23^2 + p1q*p3q*s12*s13*s23^2) +
           ((p1q*p3q^4*(-s12^4 - s12^3*s13 - s12^3*s23) + p1q*p2q^4*(
                s12^2*s13^2 + 2*s12*s13^3 + s13^4 + (2*s12*s13^2 + 2*s13^3)*
                 s23 + s13^2*s23^2) + p1q^2*p2q^3*(s12^3*s13 + 4*s12^2*
                 s13^2 + 6*s12*s13^3 + 3*s13^4 + (s12^2*s13 + 4*s12*s13^2 +
                  4*s13^3)*s23 + (-2*s12*s13 - s13^2)*s23^2 - 2*s13*s23^3) +
              p1q^3*p2q^2*(s12^3*s13 + 3*s12^2*s13^2 + 4*s12*s13^3 +
                2*s13^4 + (-s12^3 - 3*s12^2*s13 - 5*s12*s13^2 - 2*s13^3)*
                 s23 + (-2*s12^2 - 9*s12*s13 - 9*s13^2)*s23^2 - 4*s13*s23^3 +
                s23^4) + p1q^5*((s12^2 + 3*s12*s13 + 2*s13^2)*s23^2 +
                (3*s12 + 4*s13)*s23^3 + 2*s23^4) + p1q^4*p2q*(
                (-s12^3 - 4*s12^2*s13 - 7*s12*s13^2 - 4*s13^3)*s23 +
                (-s12^2 - 4*s12*s13 - 5*s13^2)*s23^2 + (3*s12 + 2*s13)*
                 s23^3 + 3*s23^4) + p3q^3*(p2q^2*(2*s12^3*s13 + 2*s12^2*
                   s13^2 + 2*s12^2*s13*s23) + p1q^2*(2*s12^3*s13 +
                  2*s12^2*s13^2 + (4*s12^3 + 6*s12^2*s13)*s23 + 4*s12^2*
                   s23^2) + p1q*p2q*(2*s12^4 + 7*s12^3*s13 + 5*s12^2*s13^2 +
                  (6*s12^3 + 9*s12^2*s13)*s23 + 4*s12^2*s23^2)) +
              p3q^2*(p2q^3*(-4*s12^2*s13^2 - 4*s12*s13^3 + (-2*s12^2*s13 -
                    6*s12*s13^2)*s23 - 2*s12*s13*s23^2) + p1q^2*p2q*
                 (4*s12^4 + 9*s12^3*s13 + s12^2*s13^2 - 4*s12*s13^3 +
                  (8*s12^3 + 2*s12^2*s13 - 11*s12*s13^2)*s23 +
                  (-2*s12^2 - 13*s12*s13)*s23^2 - 6*s12*s23^3) +
                p1q^3*(s12^4 + 3*s12^3*s13 + 2*s12^2*s13^2 +
                  (3*s12^3 - 4*s12*s13^2)*s23 + (-3*s12^2 - 9*s12*s13)*
                   s23^2 - 5*s12*s23^3) + p1q*p2q^2*(-s12^4 - 6*s12^2*s13^2 -
                  7*s12*s13^3 + (-5*s12^3 - 12*s12^2*s13 - 16*s12*s13^2)*
                   s23 + (-8*s12^2 - 13*s12*s13)*s23^2 - 4*s12*s23^3)) +
              p3q*(p2q^4*(2*s12*s13^3 + 2*s13^4 + (2*s12*s13^2 + 4*s13^3)*
                   s23 + 2*s13^2*s23^2) + p1q^2*p2q^2*(-s12^4 - 4*s12^3*s13 -
                  11*s12^2*s13^2 - 6*s12*s13^3 + 2*s13^4 + (-7*s12^3 -
                    24*s12^2*s13 - 26*s12*s13^2 - s13^3)*s23 +
                  (-13*s12^2 - 27*s12*s13 - 8*s13^2)*s23^2 + (-7*s12 - 5*s13)*
                   s23^3) + p1q*p2q^3*(-4*s12^2*s13^2 - s12*s13^3 + 3*s13^4 +
                  (-5*s12^2*s13 - 8*s12*s13^2 + 4*s13^3)*s23 +
                  (-7*s12*s13 - s13^2)*s23^2 - 2*s13*s23^3) + p1q^3*p2q*
                 (s12^4 - 5*s12^2*s13^2 - 4*s12*s13^3 + (-3*s12^3 -
                    17*s12^2*s13 - 20*s12*s13^2 - 4*s13^3)*s23 +
                  (-13*s12^2 - 23*s12*s13 - 6*s13^2)*s23^2 - 7*s12*s23^3 +
                  2*s23^4) + p1q^4*((-2*s12^3 - 6*s12^2*s13 - 4*s12*s13^2)*
                   s23 + (-6*s12^2 - 6*s12*s13 + 2*s13^2)*s23^2 +
                  (-2*s12 + 4*s13)*s23^3 + 2*s23^4)))*
             Log(s12/(s12 + s13 + s23)))/(2*p1q*p3q^4*s12^4*s13 +
             p1q*p2q^4*(-2*s12*s13^4 - 2*s12*s13^3*s23) + p1q^2*p2q^3*
              (-4*s12*s13^4 + 4*s12*s13^2*s23^2) + p1q^4*p2q*(4*s12*s13^3*
                s23 - 4*s12*s13*s23^3) + p1q^5*(-2*s12*s13^2*s23^2 - 2*s12*
                s13*s23^3) + p1q^3*p2q^2*(-2*s12*s13^4 + 6*s12*s13^3*s23 + 6*
                s12*s13^2*s23^2 - 2*s12*s13*s23^3) +
             p3q^3*(p1q^2*(2*s12^4*s13 - 2*s12^3*s13^2 - 6*s12^3*s13*s23) +
               p1q*p2q*(2*s12^4*s13 - 6*s12^3*s13^2 - 2*s12^3*s13*s23)) +
             p3q^2*(p1q*p2q^2*(-6*s12^3*s13^2 + 6*s12^2*s13^3 +
                 (-2*s12^3*s13 + 4*s12^2*s13^2)*s23) + p1q^2*p2q*
                (-8*s12^3*s13^2 + 4*s12^2*s13^3 + (-8*s12^3*s13 + 4*s12^2*
                    s13^2)*s23 + 4*s12^2*s13*s23^2) + p1q^3*(-2*s12^3*s13^2 +
                 (-6*s12^3*s13 + 4*s12^2*s13^2)*s23 + 6*s12^2*s13*s23^2)) +
             p3q*(p1q*p2q^3*(6*s12^2*s13^3 - 2*s12*s13^4 + (4*s12^2*s13^2 -
                   2*s12*s13^3)*s23) + p1q^2*p2q^2*(10*s12^2*s13^3 -
                 2*s12*s13^4 + (8*s12^2*s13^2 + 2*s12*s13^3)*s23 +
                 (4*s12^2*s13 + 4*s12*s13^2)*s23^2) + p1q^4*
                (4*s12^2*s13^2*s23 + (6*s12^2*s13 - 2*s12*s13^2)*s23^2 -
                 2*s12*s13*s23^3) + p1q^3*p2q*(4*s12^2*s13^3 +
                 (8*s12^2*s13^2 + 4*s12*s13^3)*s23 + (10*s12^2*s13 +
                   2*s12*s13^2)*s23^2 - 2*s12*s13*s23^3))) +
           ((p2q^5*(-18*s12^2*s13^3 - 18*s12*s13^4 - 18*s12*s13^3*s23) +
              p1q*p2q^4*(-18*s12^2*s13^3 - 18*s12*s13^4 + (63*s12^2*s13^2 +
                  45*s12*s13^3)*s23 + 63*s12*s13^2*s23^2) + p1q*p3q^4*(
                (9*s12^4 + 9*s12^3*s13)*s23 + (10*s12^3 + s12^2*s13)*s23^2 +
                s12^2*s23^3) + p1q^2*p2q^3*((-27*s12^3*s13 + 18*s12^2*s13^2 +
                  45*s12*s13^3)*s23 + (-91*s12^2*s13 - 19*s12*s13^2)*s23^2 +
                (-66*s12*s13 - 2*s13^2)*s23^3 - 2*s13*s23^4) +
              p1q^4*p2q*((9*s12^2 + 9*s12*s13)*s23^3 + (10*s12 + s13)*s23^4 +
                s23^5) + p1q^3*p2q^2*((9*s12^3 - 27*s12^2*s13 - 36*s12*s13^2)*
                 s23^2 + (28*s12^2 - 18*s12*s13 - s13^2)*s23^3 +
                (21*s12 + s13)*s23^4 + 2*s23^5) + p3q^3*(p2q^2*
                 (-18*s12^4*s13 - 18*s12^3*s13^2 - 18*s12^3*s13*s23 +
                  (-2*s12^2*s13 - 2*s12*s13^2)*s23^2 - 2*s12*s13*s23^3) +
                p1q*p2q*((-36*s12^3*s13 - 36*s12^2*s13^2)*s23 +
                  (-18*s12^3 - 57*s12^2*s13 - 3*s12*s13^2)*s23^2 +
                  (-20*s12^2 - 5*s12*s13)*s23^3 - 2*s12*s23^4) +
                p1q^2*((9*s12^4 + 9*s12^3*s13)*s23 + (-8*s12^3 - 17*s12^2*
                     s13)*s23^2 + (-19*s12^2 - 2*s12*s13)*s23^3 -
                  2*s12*s23^4)) + p3q^2*(p2q^3*(-18*s12^4*s13 + 18*s12^3*
                   s13^2 + 36*s12^2*s13^3 + (-18*s12^3*s13 + 36*s12^2*s13^2)*
                   s23 + (-2*s12^2*s13 + 2*s13^3)*s23^2 + (-2*s12*s13 +
                    2*s13^2)*s23^3) + p1q*p2q^2*(-18*s12^4*s13 - 18*s12^3*
                   s13^2 + (-9*s12^4 + 9*s12^3*s13 + 63*s12^2*s13^2 +
                    27*s12*s13^3)*s23 + (-28*s12^3 + 29*s12^2*s13 +
                    41*s12*s13^2 + 2*s13^3)*s23^2 + (-21*s12^2 + 10*s12*s13 +
                    2*s13^2)*s23^3 - 2*s12*s23^4) + p1q^3*
                 ((-18*s12^3 - 18*s12^2*s13)*s23^2 + (-11*s12^2 + 7*s12*s13)*
                   s23^3 + (8*s12 + s13)*s23^4 + s23^5) + p1q^2*p2q*
                 ((-36*s12^3*s13 - 36*s12^2*s13^2)*s23 + (-27*s12^3 -
                    66*s12^2*s13 - 3*s12*s13^2)*s23^2 + (-12*s12^2 +
                    11*s12*s13 - s13^2)*s23^3 + (17*s12 + s13)*s23^4 +
                  2*s23^5)) + p3q*(p2q^4*(36*s12^3*s13^2 + 18*s12^2*s13^3 -
                  18*s12*s13^4 + (36*s12^2*s13^2 - 18*s12*s13^3)*s23 +
                  (2*s12*s13^2 + 2*s13^3)*s23^2 + 2*s13^2*s23^3) +
                p1q*p2q^3*(36*s12^3*s13^2 + 36*s12^2*s13^3 + (18*s12^3*s13 +
                    90*s12^2*s13^2 + 36*s12*s13^3)*s23 + (-3*s12^2*s13 +
                    17*s12*s13^2 + 2*s13^3)*s23^2 + (-21*s12*s13 + 2*s13^2)*
                   s23^3) + p1q^4*((9*s12^2 + 9*s12*s13)*s23^3 +
                  (10*s12 + s13)*s23^4 + s23^5) + p1q^2*p2q^2*
                 ((-9*s12^4 + 18*s12^3*s13 + 18*s12^2*s13^2 - 9*s12*s13^3)*
                   s23 + (-19*s12^3 - 32*s12^2*s13 - 58*s12*s13^2)*s23^2 +
                  (7*s12^2 - 35*s12*s13 - 3*s13^2)*s23^3 + (19*s12 - s13)*
                   s23^4 + 2*s23^5) + p1q^3*p2q*((-9*s12^3 - 9*s12^2*s13)*
                   s23^2 + (17*s12^2 + 25*s12*s13 - s13^2)*s23^3 +
                  (29*s12 + 2*s13)*s23^4 + 3*s23^5)))*
             Log(s13/(s12 + s13 + s23)))/(2*p1q*p3q^4*s12^3*s13*s23^2 +
             2*p1q*p2q^4*s12*s13^3*s23^2 + 2*p1q^4*p2q*s12*s13*s23^4 +
             p1q^2*p2q^3*(2*s12*s13^3*s23^2 - 4*s12*s13^2*s23^3) +
             p1q^3*p2q^2*(-4*s12*s13^2*s23^3 + 2*s12*s13*s23^4) +
             p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*s23^2 + p1q^2*
                (2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
             p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*
                s23^2 + p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
                 (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) + p1q^3*
                (-4*s12^2*s13*s23^3 + 2*s12*s13*s23^4)) +
             p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 + 2*p1q^4*
                s12*s13*s23^4 + p1q^2*p2q^2*((-4*s12^2*s13^2 + 2*s12*s13^3)*
                  s23^2 + (-4*s12^2*s13 - 8*s12*s13^2)*s23^3) + p1q^3*p2q*
                ((-4*s12^2*s13 - 4*s12*s13^2)*s23^3 + 4*s12*s13*s23^4))) +
           ((p2q^6*(36*s12^2*s13^3 + 72*s12*s13^4 + 36*s13^5 +
                (54*s12*s13^3 + 54*s13^4)*s23 + 18*s13^3*s23^2) +
              p1q*p3q^5*((-18*s12^4 - 36*s12^3*s13 - 18*s12^2*s13^2)*s23 +
                (-27*s12^3 - 27*s12^2*s13)*s23^2 - 9*s12^2*s23^3) +
              p1q*p2q^5*(36*s12^2*s13^3 + 72*s12*s13^4 + 36*s13^5 +
                (-117*s12^2*s13^2 - 198*s12*s13^3 - 81*s13^4)*s23 +
                (-171*s12*s13^2 - 171*s13^3)*s23^2 - 54*s13^2*s23^3) +
              p1q^2*p2q^4*((18*s12^3*s13 - 72*s12^2*s13^2 - 216*s12*s13^3 -
                  126*s13^4)*s23 + (126*s12^2*s13 + 135*s12*s13^2 - 9*s13^3)*
                 s23^2 + (162*s12*s13 + 171*s13^2)*s23^3 + 54*s13*s23^4) +
              p1q^3*p2q^3*((81*s12^2*s13 + 234*s12*s13^2 + 153*s13^3)*s23^2 +
                (-27*s12^2 + 27*s12*s13 + 126*s13^2)*s23^3 +
                (-45*s12 - 45*s13)*s23^4 - 18*s23^5) + p1q^4*p2q^2*(
                (-27*s12^2 - 99*s12*s13 - 72*s13^2)*s23^3 +
                (-36*s12 - 81*s13)*s23^4 - 9*s23^5) + p1q^5*p2q*(
                (9*s12 + 9*s13)*s23^4 + 9*s23^5) + p3q^4*(p2q^2*
                 (36*s12^4*s13 + 72*s12^3*s13^2 + 36*s12^2*s13^3 +
                  (-18*s12^4 + 18*s12^3*s13 + 36*s12^2*s13^2)*s23 +
                  (-36*s12^3 - 18*s12^2*s13)*s23^2 - 18*s12^2*s23^3) +
                p1q*p2q*((-45*s12^4 - 54*s12^3*s13 + 27*s12^2*s13^2 +
                    36*s12*s13^3)*s23 + (-81*s12^3 - 45*s12^2*s13 +
                    36*s12*s13^2)*s23^2 + (-54*s12^2 - 18*s12*s13)*s23^3 -
                  18*s12*s23^4) + p1q^2*((-18*s12^4 - 36*s12^3*s13 -
                    18*s12^2*s13^2)*s23 + (18*s12^3 + 54*s12^2*s13 +
                    36*s12*s13^2)*s23^2 + (54*s12^2 + 54*s12*s13)*s23^3 +
                  18*s12*s23^4)) + p3q^2*(p2q^4*(36*s12^4*s13 - 72*s12^3*
                   s13^2 - 216*s12^2*s13^3 - 72*s12*s13^4 + 36*s13^5 +
                  (90*s12^3*s13 - 108*s12^2*s13^2 - 162*s12*s13^3 + 36*s13^4)*
                   s23 + (90*s12^2*s13 - 36*s12*s13^2 - 18*s13^3)*s23^2 +
                  (36*s12*s13 - 18*s13^2)*s23^3) + p1q^4*
                 ((-36*s12^2 - 54*s12*s13 - 18*s13^2)*s23^3 +
                  (-36*s12 - 18*s13)*s23^4) + p1q*p2q^3*(36*s12^4*s13 -
                  108*s12^2*s13^3 - 72*s12*s13^4 + (-45*s12^4 - 54*s12^3*
                     s13 - 198*s12^2*s13^2 - 306*s12*s13^3 - 117*s13^4)*s23 +
                  (-81*s12^3 + 27*s12^2*s13 - 27*s12*s13^2 - 135*s13^3)*
                   s23^2 + (-36*s12^2 + 144*s12*s13 + 18*s13^2)*s23^3 +
                  36*s13*s23^4) + p1q^2*p2q^2*((-36*s12^4 - 108*s12^3*s13 -
                    108*s12^2*s13^2 - 54*s12*s13^3 - 18*s13^4)*s23 +
                  (27*s12^3 + 207*s12^2*s13 + 270*s12*s13^2 + 72*s13^3)*
                   s23^2 + (72*s12^2 + 234*s12*s13 + 99*s13^2)*s23^3 +
                  (-9*s12 - 9*s13)*s23^4 - 18*s23^5) + p1q^3*p2q*
                 ((72*s12^3 + 144*s12^2*s13 + 108*s12*s13^2 + 36*s13^3)*
                   s23^2 + (45*s12^2 + 36*s12*s13 + 27*s13^2)*s23^3 -
                  18*s12*s23^4 + 9*s23^5)) + p3q*(p2q^5*(-72*s12^3*s13^2 -
                  72*s12^2*s13^3 + 72*s12*s13^4 + 72*s13^5 +
                  (-126*s12^2*s13^2 - 36*s12*s13^3 + 90*s13^4)*s23 -
                  72*s12*s13^2*s23^2 - 18*s13^2*s23^3) + p1q*p2q^4*
                 (-72*s12^3*s13^2 - 108*s12^2*s13^3 + 36*s13^5 +
                  (18*s12^3*s13 - 252*s12^2*s13^2 - 450*s12*s13^3 -
                    180*s13^4)*s23 + (108*s12^2*s13 - 171*s12*s13^2 -
                    279*s13^3)*s23^2 + (126*s12*s13 - 27*s13^2)*s23^3 +
                  36*s13*s23^4) + p1q^3*p2q^2*((45*s12^3 + 216*s12^2*s13 +
                    252*s12*s13^2 + 81*s13^3)*s23^2 + (-9*s12^2 + 27*s12*
                     s13 - 9*s13^2)*s23^3 + (-90*s12 - 126*s13)*s23^4 -
                  36*s23^5) + p1q^2*p2q^3*((-18*s12^4 - 36*s12^3*s13 -
                    72*s12^2*s13^2 - 144*s12*s13^3 - 90*s13^4)*s23 +
                  (-18*s12^3 + 270*s12^2*s13 + 459*s12*s13^2 + 135*s13^3)*
                   s23^2 + (-18*s12^2 + 351*s12*s13 + 306*s13^2)*s23^3 +
                  (-36*s12 + 63*s13)*s23^4 - 18*s23^5) + p1q^4*p2q*
                 ((-45*s12^2 - 81*s12*s13 - 36*s13^2)*s23^3 +
                  (-36*s12 - 27*s13)*s23^4 + 9*s23^5) + p1q^5*
                 ((9*s12 + 9*s13)*s23^4 + 9*s23^5)) + p3q^3*(
                p2q^3*(72*s12^4*s13 + 72*s12^3*s13^2 - 72*s12^2*s13^3 -
                  72*s12*s13^4 + (-18*s12^4 + 108*s12^3*s13 + 54*s12^2*
                     s13^2 - 72*s12*s13^3)*s23 + (-36*s12^3 + 72*s12^2*s13 +
                    36*s12*s13^2)*s23^2 + (-18*s12^2 + 36*s12*s13)*s23^3) +
                p1q*p2q^2*(36*s12^4*s13 + 72*s12^3*s13^2 + 36*s12^2*s13^3 +
                  (-72*s12^4 - 90*s12^3*s13 - 18*s12^2*s13^2 - 18*s12*s13^3 -
                    18*s13^4)*s23 + (-117*s12^3 - 45*s12^2*s13 + 63*s12*
                     s13^2 - 9*s13^3)*s23^2 + (-45*s12^2 + 72*s12*s13 +
                    27*s13^2)*s23^3 + 18*s13*s23^4) + p1q^3*
                 ((45*s12^3 + 81*s12^2*s13 + 36*s12*s13^2)*s23^2 +
                  (27*s12^2 - 18*s13^2)*s23^3 + (-27*s12 - 27*s13)*s23^4 -
                  9*s23^5) + p1q^2*p2q*((-36*s12^4 - 36*s12^3*s13 +
                    36*s12^2*s13^2 + 36*s12*s13^3)*s23 + (27*s12^3 +
                    153*s12^2*s13 + 162*s12*s13^2 + 36*s13^3)*s23^2 +
                  (90*s12^2 + 153*s12*s13 + 72*s13^2)*s23^3 +
                  (45*s12 + 54*s13)*s23^4 + 18*s23^5)))*
             Log(s23/(s12 + s13 + s23)))/(p1q*p3q^5*(2*s12^3*s13 + 2*s12^2*
                s13^2)*s23^2 + p1q*p2q^5*(2*s12*s13^3 + 2*s13^4)*s23^2 -
             2*p1q^5*p2q*s13*s23^5 + p1q^2*p2q^4*((2*s12*s13^3 + 2*s13^4)*
                s23^2 + (-4*s12*s13^2 - 6*s13^3)*s23^3) + p1q^3*p2q^3*
              ((-4*s12*s13^2 - 6*s13^3)*s23^3 + (2*s12*s13 + 6*s13^2)*
                s23^4) + p1q^4*p2q^2*((2*s12*s13 + 6*s13^2)*s23^4 - 2*s13*
                s23^5) + p3q^4*(p1q*p2q*(6*s12^3*s13 + 2*s12^2*s13^2 -
                 4*s12*s13^3)*s23^2 + p1q^2*((2*s12^3*s13 + 2*s12^2*s13^2)*
                  s23^2 + (-6*s12^2*s13 - 4*s12*s13^2)*s23^3)) +
             p3q^3*(p1q*p2q^2*(6*s12^3*s13 - 6*s12^2*s13^2 - 10*s12*s13^3 +
                 2*s13^4)*s23^2 + p1q^2*p2q*((4*s12^3*s13 - 4*s12*s13^3)*
                  s23^2 + (-16*s12^2*s13 - 12*s12*s13^2 - 4*s13^3)*s23^3) +
               p1q^3*((-6*s12^2*s13 - 4*s12*s13^2)*s23^3 + (6*s12*s13 +
                   2*s13^2)*s23^4)) + p3q*(p1q*p2q^4*(-4*s12^2*s13^2 +
                 2*s12*s13^3 + 6*s13^4)*s23^2 - 2*p1q^5*s13*s23^5 + p1q^2*
                p2q^3*((-4*s12^2*s13^2 + 4*s13^4)*s23^2 + (-4*s12^2*s13 -
                   12*s12*s13^2 - 16*s13^3)*s23^3) + p1q^3*p2q^2*
                ((-4*s12^2*s13 - 8*s12*s13^2 - 10*s13^3)*s23^3 +
                 (10*s12*s13 + 14*s13^2)*s23^4) + p1q^4*p2q*
                ((8*s12*s13 + 8*s13^2)*s23^4 - 4*s13*s23^5)) +
             p3q^2*(p1q*p2q^3*(2*s12^3*s13 - 10*s12^2*s13^2 - 6*s12*s13^3 +
                 6*s13^4)*s23^2 + p1q^2*p2q^2*((2*s12^3*s13 - 6*s12^2*s13^2 -
                   6*s12*s13^3 + 2*s13^4)*s23^2 + (-14*s12^2*s13 -
                   16*s12*s13^2 - 14*s13^3)*s23^3) + p1q^3*p2q*
                ((-10*s12^2*s13 - 8*s12*s13^2 - 4*s13^3)*s23^3 +
                 (14*s12*s13 + 10*s13^2)*s23^4) + p1q^4*
                ((6*s12*s13 + 2*s13^2)*s23^4 - 2*s13*s23^5)))) +
         nl*((p1q^2*((-54*s12^3*s13 - 108*s12^2*s13^2 - 54*s12*s13^3)*s23 +
               (-162*s12^2*s13 - 162*s12*s13^2)*s23^2 - 108*s12*s13*s23^3) +
             p3q^2*((-54*s12^3*s13 - 108*s12^2*s13^2 - 54*s12*s13^3)*s23 +
               (-162*s12^2*s13 - 162*s12*s13^2)*s23^2 - 108*s12*s13*s23^3) +
             p2q^2*(720*s12^4*s13 + 2268*s12^3*s13^2 + 2376*s12^2*s13^3 + 828*
                s12*s13^4 + (972*s12^3*s13 + 2628*s12^2*s13^2 + 2016*s12*
                  s13^3 + 360*s13^4)*s23 + (144*s12^2*s13 + 720*s12*s13^2 +
                 360*s13^3)*s23^2 - 108*s12*s13*s23^3) +
             p1q*p2q*(-108*s12^3*s13^2 - 108*s12^2*s13^3 + (-72*s12^4 -
                 270*s12^3*s13 - 540*s12^2*s13^2 - 126*s12*s13^3)*s23 +
               (-26*s12^3 - 141*s12^2*s13 - 231*s12*s13^2 - 8*s13^3)*s23^2 +
               (100*s12^2 + 119*s12*s13 + 19*s13^2)*s23^3 + (54*s12 + 54*s13)*
                s23^4) + p3q*(p2q*(-108*s12^4*s13 - 216*s12^3*s13^2 -
                 108*s12^2*s13^3 + (-378*s12^3*s13 - 432*s12^2*s13^2 -
                   54*s12*s13^3)*s23 + (-486*s12^2*s13 - 270*s12*s13^2)*
                  s23^2 - 216*s12*s13*s23^3) + p1q*(108*s12^4*s13 +
                 108*s12^3*s13^2 + (-72*s12^4 - 324*s12^2*s13^2 - 180*s12*
                    s13^3)*s23 + (-26*s12^3 + 21*s12^2*s13 - 285*s12*s13^2 -
                   8*s13^3)*s23^2 + (100*s12^2 + 119*s12*s13 + 19*s13^2)*
                  s23^3 + (54*s12 + 54*s13)*s23^4)))/
            (p1q*p2q*(54*s12^3*s13 + 108*s12^2*s13^2 + 54*s12*s13^3)*s23^2 +
             p1q*p3q*(54*s12^3*s13 + 108*s12^2*s13^2 + 54*s12*s13^3)*s23^2) +
           ((p2q^2*(-72*s12^2*s13 - 72*s12*s13^2 + (-108*s12*s13 - 36*s13^2)*
                 s23 - 36*s13*s23^2) + p1q*p2q*((18*s12^2 + 18*s12*s13)*s23 +
                (20*s12 + 2*s13)*s23^2 + 2*s23^3) + p1q*p3q*(
                (18*s12^2 + 18*s12*s13)*s23 + (20*s12 + 2*s13)*s23^2 +
                2*s23^3))*Log(-s12 - s13 - s23))/(9*p1q*p2q*s12*s13*s23^2 +
             9*p1q*p3q*s12*s13*s23^2) +
           ((p1q^2*((-4*s12^3*s13 - 8*s12^2*s13^2 - 4*s12*s13^3)*s23^2 +
                (-8*s12^2*s13 - 8*s12*s13^2)*s23^3 - 4*s12*s13*s23^4) +
              p3q^2*((-4*s12^3*s13 - 8*s12^2*s13^2 - 4*s12*s13^3)*s23^2 +
                (-8*s12^2*s13 - 8*s12*s13^2)*s23^3 - 4*s12*s13*s23^4) +
              p2q^2*(-16*s12^5*s13 - 64*s12^4*s13^2 - 96*s12^3*s13^3 -
                64*s12^2*s13^4 - 16*s12*s13^5 + (-30*s12^4*s13 - 86*s12^3*
                   s13^2 - 86*s12^2*s13^3 - 34*s12*s13^4 - 4*s13^5)*s23 +
                (-20*s12^3*s13 - 28*s12^2*s13^2 - 12*s12*s13^3 - 4*s13^4)*
                 s23^2 + (-10*s12^2*s13 - 2*s12*s13^2)*s23^3 - 4*s12*s13*
                 s23^4) + p1q*p2q*((2*s12^5 + 12*s12^4*s13 + 18*s12^3*s13^2 +
                  16*s12^2*s13^3 + 8*s12*s13^4)*s23 + (5*s12^4 + 18*s12^3*
                   s13 + 13*s12^2*s13^2 + 10*s12*s13^3 + 2*s13^4)*s23^2 +
                (6*s12^3 + 11*s12^2*s13 + 3*s12*s13^2 + 2*s13^3)*s23^3 +
                (5*s12^2 + 7*s12*s13 + 2*s13^2)*s23^4 + (2*s12 + 2*s13)*
                 s23^5) + p3q*(p2q*((-6*s12^4*s13 - 10*s12^3*s13^2 -
                    2*s12^2*s13^3 + 2*s12*s13^4)*s23 + (-20*s12^3*s13 -
                    24*s12^2*s13^2 - 4*s12*s13^3)*s23^2 + (-22*s12^2*s13 -
                    14*s12*s13^2)*s23^3 - 8*s12*s13*s23^4) +
                p1q*((2*s12^5 + 18*s12^4*s13 + 28*s12^3*s13^2 + 18*s12^2*
                     s13^3 + 6*s12*s13^4)*s23 + (5*s12^4 + 30*s12^3*s13 +
                    21*s12^2*s13^2 + 6*s12*s13^3 + 2*s13^4)*s23^2 +
                  (6*s12^3 + 17*s12^2*s13 + s12*s13^2 + 2*s13^3)*s23^3 +
                  (5*s12^2 + 7*s12*s13 + 2*s13^2)*s23^4 + (2*s12 + 2*s13)*
                   s23^5)))*Log(s23/(s12 + s13 + s23)))/
            (p1q*p2q*(2*s12^4*s13 + 6*s12^3*s13^2 + 6*s12^2*s13^3 + 2*s12*
                s13^4)*s23^2 + p1q*p3q*(2*s12^4*s13 + 6*s12^3*s13^2 + 6*s12^2*
                s13^3 + 2*s12*s13^4)*s23^2)) +
         Log((p2q + p3q)/(p1q + p2q + p3q))*
          (((p2q^6*(18*s12^3*s13^2 + 36*s12^2*s13^3 + 18*s12*s13^4 +
                (36*s12^2*s13^2 + 36*s12*s13^3)*s23 + 18*s12*s13^2*s23^2) +
              p1q*p2q^5*(18*s12^3*s13^2 + 36*s12^2*s13^3 + 18*s12*s13^4 +
                (-72*s12^3*s13 - 108*s12^2*s13^2 - 36*s12*s13^3)*s23 +
                (-144*s12^2*s13 - 153*s12*s13^2 - 27*s13^3)*s23^2 +
                (-72*s12*s13 - 27*s13^2)*s23^3) + p1q^2*p2q^4*(
                (36*s12^4 + 27*s12^3*s13 - 54*s12^2*s13^2 - 45*s12*s13^3)*
                 s23 + (126*s12^3 + 135*s12^2*s13 - 9*s12*s13^2 - 18*s13^3)*
                 s23^2 + (144*s12^2 + 162*s12*s13 + 36*s13^2)*s23^3 +
                (54*s12 + 54*s13)*s23^4) + p1q^3*p2q^3*((9*s12^3 +
                  54*s12^2*s13 + 45*s12*s13^2)*s23^2 + (-9*s12^2 +
                  63*s12*s13 + 36*s13^2)*s23^3 + (-45*s12 + 9*s13)*s23^4 -
                27*s23^5) + p1q^4*p2q^2*((-18*s12^2 - 18*s12*s13)*s23^3 +
                (-36*s12 - 18*s13)*s23^4 - 18*s23^5) + p3q^4*(
                p2q^2*(18*s12^5 + 36*s12^4*s13 + 18*s12^3*s13^2 +
                  (36*s12^4 + 36*s12^3*s13)*s23 + (18*s12^3 - 18*s12^2*s13 -
                    18*s12*s13^2)*s23^2 - 18*s12*s13*s23^3) + p1q*p2q*
                 ((18*s12^4 + 36*s12^3*s13 + 18*s12^2*s13^2)*s23 +
                  (36*s12^3 + 63*s12^2*s13 + 27*s12*s13^2)*s23^2 +
                  (18*s12^2 + 27*s12*s13)*s23^3)) + p3q^3*(p2q^3*(36*s12^5 +
                  36*s12^4*s13 - 36*s12^3*s13^2 - 36*s12^2*s13^3 +
                  (72*s12^4 - 72*s12^2*s13^2)*s23 + (36*s12^3 - 72*s12^2*
                     s13 - 18*s12*s13^2 + 18*s13^3)*s23^2 + (-36*s12*s13 +
                    18*s13^2)*s23^3) + p1q^2*p2q*((27*s12^4 + 54*s12^3*s13 +
                    27*s12^2*s13^2)*s23 + (27*s12^3 + 63*s12^2*s13 +
                    36*s12*s13^2)*s23^2 + (-27*s12^2 - 9*s13^2)*s23^3 +
                  (-27*s12 - 9*s13)*s23^4) + p1q*p2q^2*(18*s12^5 +
                  36*s12^4*s13 + 18*s12^3*s13^2 + (-36*s12^3*s13 - 36*s12^2*
                     s13^2)*s23 + (-54*s12^3 - 117*s12^2*s13 - 36*s12*s13^2 +
                    9*s13^3)*s23^2 + (-36*s12^2 - 63*s12*s13 - 9*s13^2)*
                   s23^3 - 18*s13*s23^4)) + p3q^2*(p2q^4*(18*s12^5 -
                  36*s12^4*s13 - 108*s12^3*s13^2 - 36*s12^2*s13^3 +
                  18*s12*s13^4 + (36*s12^4 - 108*s12^3*s13 - 108*s12^2*
                     s13^2 + 36*s12*s13^3)*s23 + (18*s12^3 - 90*s12^2*s13 +
                    36*s12*s13^2 + 36*s13^3)*s23^2 + (-18*s12*s13 + 36*s13^2)*
                   s23^3) + p1q^2*p2q^2*((-36*s12^4 - 63*s12^3*s13 -
                    18*s12^2*s13^2 + 9*s12*s13^3)*s23 + (-36*s12^3 -
                    45*s12^2*s13 + 27*s12*s13^2 + 36*s13^3)*s23^2 +
                  (36*s12^2 - 18*s12*s13)*s23^3 + (36*s12 - 36*s13)*s23^4) +
                p1q*p2q^3*(18*s12^5 - 54*s12^3*s13^2 - 36*s12^2*s13^3 +
                  (-18*s12^4 - 162*s12^3*s13 - 180*s12^2*s13^2 - 54*s12*
                     s13^3 - 18*s13^4)*s23 + (-54*s12^3 - 225*s12^2*s13 -
                    108*s12*s13^2 + 9*s13^3)*s23^2 + (18*s12^2 - 99*s12*s13 -
                    9*s13^2)*s23^3 + (36*s12 - 36*s13)*s23^4) + p1q^3*p2q*
                 ((-45*s12^3 - 54*s12^2*s13 - 9*s12*s13^2)*s23^2 +
                  (-81*s12^2 - 63*s12*s13 - 18*s13^2)*s23^3 +
                  (-27*s12 - 9*s13)*s23^4 + 9*s23^5)) +
              p3q*(p2q^5*(-36*s12^4*s13 - 36*s12^3*s13^2 + 36*s12^2*s13^3 +
                  36*s12*s13^4 + (-72*s12^3*s13 + 72*s12*s13^3)*s23 +
                  (-36*s12^2*s13 + 54*s12*s13^2 + 18*s13^3)*s23^2 +
                  18*s13^2*s23^3) + p1q*p2q^4*(-36*s12^4*s13 - 54*s12^3*
                   s13^2 + 18*s12*s13^4 + (-162*s12^3*s13 - 234*s12^2*s13^2 -
                    90*s12*s13^3 - 18*s13^4)*s23 + (36*s12^3 - 189*s12^2*
                     s13 - 198*s12*s13^2 - 27*s13^3)*s23^2 + (72*s12^2 -
                    81*s12*s13 - 27*s13^2)*s23^3 + (36*s12 - 18*s13)*s23^4) +
                p1q^2*p2q^3*((9*s12^4 + 18*s12^3*s13 + 9*s12^2*s13^2)*s23 +
                  (135*s12^3 + 207*s12^2*s13 + 126*s12*s13^2 + 54*s13^3)*
                   s23^2 + (243*s12^2 + 216*s12*s13 + 81*s13^2)*s23^3 +
                  (117*s12 + 27*s13)*s23^4) + p1q^3*p2q^2*
                 ((36*s12^3 - 36*s12*s13^2)*s23^2 + (54*s12^2 - 72*s12*s13 -
                    54*s13^2)*s23^3 - 72*s13*s23^4 - 18*s23^5) +
                p1q^4*p2q*((18*s12^2 + 18*s12*s13)*s23^3 + (36*s12 + 18*s13)*
                   s23^4 + 18*s23^5)))*Log(s12/(s12 + s13 + s23)))/
            (p1q*p3q^5*(2*s12^4 + 2*s12^3*s13)*s23^2 + p1q*p2q^5*
              (2*s12^2*s13^2 + 2*s12*s13^3)*s23^2 - 2*p1q^5*p2q*s12*s23^5 +
             p1q^2*p2q^4*((2*s12^2*s13^2 + 2*s12*s13^3)*s23^2 +
               (-4*s12^2*s13 - 6*s12*s13^2)*s23^3) + p1q^3*p2q^3*
              ((-4*s12^2*s13 - 6*s12*s13^2)*s23^3 + (2*s12^2 + 6*s12*s13)*
                s23^4) + p1q^4*p2q^2*((2*s12^2 + 6*s12*s13)*s23^4 - 2*s12*
                s23^5) + p3q^4*(p1q*p2q*(6*s12^4 + 2*s12^3*s13 -
                 4*s12^2*s13^2)*s23^2 + p1q^2*((2*s12^4 + 2*s12^3*s13)*
                  s23^2 + (-6*s12^3 - 4*s12^2*s13)*s23^3)) +
             p3q^3*(p1q*p2q^2*(6*s12^4 - 6*s12^3*s13 - 10*s12^2*s13^2 +
                 2*s12*s13^3)*s23^2 + p1q^2*p2q*((4*s12^4 - 4*s12^2*s13^2)*
                  s23^2 + (-16*s12^3 - 12*s12^2*s13 - 4*s12*s13^2)*s23^3) +
               p1q^3*((-6*s12^3 - 4*s12^2*s13)*s23^3 + (6*s12^2 + 2*s12*s13)*
                  s23^4)) + p3q*(p1q*p2q^4*(-4*s12^3*s13 + 2*s12^2*s13^2 +
                 6*s12*s13^3)*s23^2 - 2*p1q^5*s12*s23^5 + p1q^2*p2q^3*
                ((-4*s12^3*s13 + 4*s12*s13^3)*s23^2 + (-4*s12^3 - 12*s12^2*
                    s13 - 16*s12*s13^2)*s23^3) + p1q^3*p2q^2*
                ((-4*s12^3 - 8*s12^2*s13 - 10*s12*s13^2)*s23^3 +
                 (10*s12^2 + 14*s12*s13)*s23^4) + p1q^4*p2q*
                ((8*s12^2 + 8*s12*s13)*s23^4 - 4*s12*s23^5)) +
             p3q^2*(p1q*p2q^3*(2*s12^4 - 10*s12^3*s13 - 6*s12^2*s13^2 +
                 6*s12*s13^3)*s23^2 + p1q^2*p2q^2*((2*s12^4 - 6*s12^3*s13 -
                   6*s12^2*s13^2 + 2*s12*s13^3)*s23^2 + (-14*s12^3 -
                   16*s12^2*s13 - 14*s12*s13^2)*s23^3) + p1q^3*p2q*
                ((-10*s12^3 - 8*s12^2*s13 - 4*s12*s13^2)*s23^3 +
                 (14*s12^2 + 10*s12*s13)*s23^4) + p1q^4*
                ((6*s12^2 + 2*s12*s13)*s23^4 - 2*s12*s23^5))) +
           ((p2q^6*(18*s12^2*s13^3 + 36*s12*s13^4 + 18*s13^5 +
                (36*s12*s13^3 + 36*s13^4)*s23 + 18*s13^3*s23^2) +
              p1q*p3q^5*((-9*s12^4 - 18*s12^3*s13 - 9*s12^2*s13^2)*s23 +
                (-18*s12^3 - 18*s12^2*s13)*s23^2 - 9*s12^2*s23^3) +
              p1q*p2q^5*(18*s12^2*s13^3 + 36*s12*s13^4 + 18*s13^5 +
                (-81*s12^2*s13^2 - 126*s12*s13^3 - 45*s13^4)*s23 +
                (-135*s12*s13^2 - 117*s13^3)*s23^2 - 54*s13^2*s23^3) +
              p1q^2*p2q^4*((27*s12^3*s13 - 9*s12^2*s13^2 - 99*s12*s13^3 -
                  63*s13^4)*s23 + (117*s12^2*s13 + 117*s12*s13^2)*s23^2 +
                (144*s12*s13 + 117*s13^2)*s23^3 + 54*s13*s23^4) +
              p1q^3*p2q^3*((-9*s12^3 + 18*s12^2*s13 + 99*s12*s13^2 +
                  72*s13^3)*s23^2 + (-36*s12^2 - 9*s12*s13 + 63*s13^2)*
                 s23^3 + (-45*s12 - 27*s13)*s23^4 - 18*s23^5) +
              p1q^4*p2q^2*((-9*s12^2 - 36*s12*s13 - 27*s13^2)*s23^3 +
                (-18*s12 - 36*s13)*s23^4 - 9*s23^5) + p3q^4*(
                p2q^2*(18*s12^4*s13 + 36*s12^3*s13^2 + 18*s12^2*s13^3 +
                  (36*s12^3*s13 + 36*s12^2*s13^2)*s23 + (36*s12^2*s13 +
                    18*s12*s13^2)*s23^2 + 18*s12*s13*s23^3) +
                p1q^2*((-9*s12^4 - 18*s12^3*s13 - 9*s12^2*s13^2)*s23 +
                  (18*s12^2*s13 + 18*s12*s13^2)*s23^2 + (27*s12^2 +
                    36*s12*s13)*s23^3 + 18*s12*s23^4) + p1q*p2q*
                 ((-9*s12^4 + 36*s12^3*s13 + 99*s12^2*s13^2 + 54*s12*s13^3)*
                   s23 + (135*s12^2*s13 + 171*s12*s13^2 + 36*s13^3)*s23^2 +
                  (27*s12^2 + 135*s12*s13 + 72*s13^2)*s23^3 +
                  (18*s12 + 36*s13)*s23^4)) + p3q*(p2q^5*(-36*s12^3*s13^2 -
                  36*s12^2*s13^3 + 36*s12*s13^4 + 36*s13^5 +
                  (-72*s12^2*s13^2 + 72*s13^4)*s23 + (-54*s12*s13^2 +
                    18*s13^3)*s23^2 - 18*s13^2*s23^3) + p1q*p2q^4*
                 (-36*s12^3*s13^2 - 54*s12^2*s13^3 + 18*s13^5 +
                  (-189*s12^2*s13^2 - 270*s12*s13^3 - 81*s13^4)*s23 +
                  (63*s12^2*s13 - 198*s12*s13^2 - 207*s13^3)*s23^2 +
                  (99*s12*s13 - 72*s13^2)*s23^3 + 36*s13*s23^4) +
                p1q^3*p2q^2*((90*s12^2*s13 + 108*s12*s13^2 + 18*s13^3)*
                   s23^2 + (-45*s12^2 + 54*s12*s13 + 27*s13^2)*s23^3 +
                  (-90*s12 - 36*s13)*s23^4 - 45*s23^5) + p1q^4*p2q*
                 ((-18*s12^2 - 18*s12*s13)*s23^3 + (-36*s12 - 18*s13)*s23^4 -
                  18*s23^5) + p1q^2*p2q^3*((9*s12^4 + 36*s12^3*s13 +
                    9*s12^2*s13^2 - 54*s12*s13^3 - 36*s13^4)*s23 +
                  (27*s12^3 + 279*s12^2*s13 + 288*s12*s13^2 + 36*s13^3)*
                   s23^2 + (9*s12^2 + 342*s12*s13 + 189*s13^2)*s23^3 +
                  (-27*s12 + 99*s13)*s23^4 - 18*s23^5)) +
              p3q^2*(p2q^4*(18*s12^4*s13 - 36*s12^3*s13^2 - 108*s12^2*s13^3 -
                  36*s12*s13^4 + 18*s13^5 + (36*s12^3*s13 - 108*s12^2*s13^2 -
                    108*s12*s13^3 + 36*s13^4)*s23 + (36*s12^2*s13 -
                    90*s12*s13^2 - 18*s13^3)*s23^2 + (18*s12*s13 - 36*s13^2)*
                   s23^3) + p1q*p2q^3*(18*s12^4*s13 - 54*s12^2*s13^3 -
                  36*s12*s13^4 + (9*s12^4 + 18*s12^3*s13 - 180*s12^2*s13^2 -
                    270*s12*s13^3 - 81*s13^4)*s23 + (36*s12^3 + 153*s12^2*
                     s13 - 108*s12*s13^2 - 171*s13^3)*s23^2 +
                  (45*s12^2 + 225*s12*s13 - 18*s13^2)*s23^3 +
                  (18*s12 + 72*s13)*s23^4) + p1q^3*p2q*((27*s12^3 +
                    36*s12^2*s13 + 27*s12*s13^2 + 18*s13^3)*s23^2 +
                  (18*s12^2 + 9*s12*s13 + 27*s13^2)*s23^3 + (-45*s12 -
                    27*s13)*s23^4 - 36*s23^5) + p1q^2*p2q^2*
                 ((9*s12^4 + 27*s12^3*s13 + 18*s12^2*s13^2 - 9*s12*s13^3 -
                    9*s13^4)*s23 + (54*s12^3 + 279*s12^2*s13 + 279*s12*
                     s13^2 + 54*s13^3)*s23^2 + (45*s12^2 + 324*s12*s13 +
                    171*s13^2)*s23^3 + (-36*s12 + 72*s13)*s23^4 - 36*s23^5) +
                p1q^4*((-9*s12^2 - 18*s12*s13 - 9*s13^2)*s23^3 +
                  (-18*s12 - 18*s13)*s23^4 - 9*s23^5)) +
              p3q^3*(p2q^3*(36*s12^4*s13 + 36*s12^3*s13^2 - 36*s12^2*s13^3 -
                  36*s12*s13^4 + (72*s12^3*s13 - 72*s12*s13^3)*s23 +
                  (72*s12^2*s13 - 18*s12*s13^2 - 18*s13^3)*s23^2 +
                  (36*s12*s13 - 18*s13^2)*s23^3) + p1q*p2q^2*(18*s12^4*s13 +
                  36*s12^3*s13^2 + 18*s12^2*s13^3 + (9*s12^4 + 72*s12^3*s13 +
                    36*s12^2*s13^2 - 72*s12*s13^3 - 45*s13^4)*s23 +
                  (54*s12^3 + 243*s12^2*s13 + 126*s12*s13^2 - 45*s13^3)*
                   s23^2 + (81*s12^2 + 261*s12*s13 + 72*s13^2)*s23^3 +
                  (36*s12 + 72*s13)*s23^4) + p1q^2*p2q*((-9*s12^4 +
                    36*s12^3*s13 + 99*s12^2*s13^2 + 54*s12*s13^3)*s23 +
                  (27*s12^3 + 171*s12^2*s13 + 198*s12*s13^2 + 54*s13^3)*
                   s23^2 + (63*s12^2 + 162*s12*s13 + 99*s13^2)*s23^3 +
                  (9*s12 + 27*s13)*s23^4 - 18*s23^5) + p1q^3*
                 ((18*s12^3 + 36*s12^2*s13 + 18*s12*s13^2)*s23^2 +
                  (27*s12^2 + 18*s12*s13 - 9*s13^2)*s23^3 - 18*s13*s23^4 -
                  9*s23^5)))*Log(s13/(s12 + s13 + s23)))/
            (p1q*p3q^5*(2*s12^3*s13 + 2*s12^2*s13^2)*s23^2 +
             p1q*p2q^5*(2*s12*s13^3 + 2*s13^4)*s23^2 - 2*p1q^5*p2q*s13*
              s23^5 + p1q^2*p2q^4*((2*s12*s13^3 + 2*s13^4)*s23^2 +
               (-4*s12*s13^2 - 6*s13^3)*s23^3) + p1q^3*p2q^3*
              ((-4*s12*s13^2 - 6*s13^3)*s23^3 + (2*s12*s13 + 6*s13^2)*
                s23^4) + p1q^4*p2q^2*((2*s12*s13 + 6*s13^2)*s23^4 - 2*s13*
                s23^5) + p3q^4*(p1q*p2q*(6*s12^3*s13 + 2*s12^2*s13^2 -
                 4*s12*s13^3)*s23^2 + p1q^2*((2*s12^3*s13 + 2*s12^2*s13^2)*
                  s23^2 + (-6*s12^2*s13 - 4*s12*s13^2)*s23^3)) +
             p3q^3*(p1q*p2q^2*(6*s12^3*s13 - 6*s12^2*s13^2 - 10*s12*s13^3 +
                 2*s13^4)*s23^2 + p1q^2*p2q*((4*s12^3*s13 - 4*s12*s13^3)*
                  s23^2 + (-16*s12^2*s13 - 12*s12*s13^2 - 4*s13^3)*s23^3) +
               p1q^3*((-6*s12^2*s13 - 4*s12*s13^2)*s23^3 + (6*s12*s13 +
                   2*s13^2)*s23^4)) + p3q*(p1q*p2q^4*(-4*s12^2*s13^2 +
                 2*s12*s13^3 + 6*s13^4)*s23^2 - 2*p1q^5*s13*s23^5 + p1q^2*
                p2q^3*((-4*s12^2*s13^2 + 4*s13^4)*s23^2 + (-4*s12^2*s13 -
                   12*s12*s13^2 - 16*s13^3)*s23^3) + p1q^3*p2q^2*
                ((-4*s12^2*s13 - 8*s12*s13^2 - 10*s13^3)*s23^3 +
                 (10*s12*s13 + 14*s13^2)*s23^4) + p1q^4*p2q*
                ((8*s12*s13 + 8*s13^2)*s23^4 - 4*s13*s23^5)) +
             p3q^2*(p1q*p2q^3*(2*s12^3*s13 - 10*s12^2*s13^2 - 6*s12*s13^3 +
                 6*s13^4)*s23^2 + p1q^2*p2q^2*((2*s12^3*s13 - 6*s12^2*s13^2 -
                   6*s12*s13^3 + 2*s13^4)*s23^2 + (-14*s12^2*s13 -
                   16*s12*s13^2 - 14*s13^3)*s23^3) + p1q^3*p2q*
                ((-10*s12^2*s13 - 8*s12*s13^2 - 4*s13^3)*s23^3 +
                 (14*s12*s13 + 10*s13^2)*s23^4) + p1q^4*
                ((6*s12*s13 + 2*s13^2)*s23^4 - 2*s13*s23^5))) +
           ((p1q*p3q^4*((-9*s12^4 - 9*s12^3*s13)*s23 - 9*s12^3*s23^2) +
              p2q^5*(36*s12^2*s13^3 + 36*s12*s13^4 + (54*s12*s13^3 +
                  18*s13^4)*s23 + 18*s13^3*s23^2) + p1q*p2q^4*(36*s12^2*
                 s13^3 + 36*s12*s13^4 + (-36*s12^2*s13^2 + 27*s12*s13^3 +
                  27*s13^4)*s23 + (-36*s12*s13^2 + 27*s13^3)*s23^2) +
              p1q^4*p2q*((-9*s12^2 - 9*s12*s13)*s23^3 - 9*s12*s23^4) +
              p1q^2*p2q^3*((-45*s12^3*s13 - 135*s12^2*s13^2 - 90*s12*s13^3)*
                 s23 + (-81*s12^2*s13 - 162*s12*s13^2 - 36*s13^3)*s23^2 +
                (-54*s12*s13 - 54*s13^2)*s23^3 - 18*s13*s23^4) +
              p1q^3*p2q^2*((9*s12^3 + 54*s12^2*s13 + 45*s12*s13^2)*s23^2 +
                (9*s12^2 + 54*s12*s13 + 9*s13^2)*s23^3 + 9*s13*s23^4) +
              p3q^3*(p1q^2*((-9*s12^4 - 9*s12^3*s13)*s23 + (9*s12^3 +
                    18*s12^2*s13)*s23^2 + 18*s12^2*s23^3) + p2q^2*
                 (36*s12^4*s13 + 36*s12^3*s13^2 + (-18*s12^4 + 54*s12^3*s13 +
                    36*s12^2*s13^2)*s23 + (-36*s12^3 + 36*s12^2*s13 +
                    18*s12*s13^2)*s23^2 + (-18*s12^2 + 18*s12*s13)*s23^3) +
                p1q*p2q*((-27*s12^4 - 54*s12^3*s13 - 27*s12^2*s13^2)*s23 +
                  (-72*s12^3 - 117*s12^2*s13 - 45*s12*s13^2)*s23^2 +
                  (-81*s12^2 - 81*s12*s13)*s23^3 - 36*s12*s23^4)) +
              p3q^2*(p2q^3*(36*s12^4*s13 - 36*s12^3*s13^2 - 72*s12^2*s13^3 +
                  (90*s12^3*s13 - 90*s12^2*s13^2 - 72*s12*s13^3)*s23 +
                  (72*s12^2*s13 - 72*s12*s13^2 - 18*s13^3)*s23^2 +
                  (18*s12*s13 - 18*s13^2)*s23^3) + p1q^3*
                 ((18*s12^3 + 18*s12^2*s13)*s23^2 + (9*s12^2 - 9*s12*s13)*
                   s23^3 - 9*s12*s23^4) + p1q*p2q^2*(36*s12^4*s13 +
                  36*s12^3*s13^2 + (-54*s12^4 + 9*s12^3*s13 + 36*s12^2*
                     s13^2 + 9*s12*s13^3)*s23 + (-117*s12^3 - 18*s12^2*s13 -
                    27*s13^3)*s23^2 + (-81*s12^2 - 18*s12*s13 - 45*s13^2)*
                   s23^3 + (-18*s12 - 18*s13)*s23^4) + p1q^2*p2q*
                 ((-18*s12^4 - 45*s12^3*s13 - 27*s12^2*s13^2)*s23 +
                  (-36*s12^3 - 63*s12^2*s13 - 18*s12*s13^2)*s23^2 +
                  (-63*s12^2 - 54*s12*s13 + 9*s13^2)*s23^3 +
                  (-45*s12 + 9*s13)*s23^4)) + p3q*(p2q^4*(-72*s12^3*s13^2 -
                  36*s12^2*s13^3 + 36*s12*s13^4 + (-126*s12^2*s13^2 +
                    18*s12*s13^3 + 36*s13^4)*s23 + (-54*s12*s13^2 + 36*s13^3)*
                   s23^2) + p1q^4*((-9*s12^2 - 9*s12*s13)*s23^3 -
                  9*s12*s23^4) + p1q^2*p2q^2*((-27*s12^4 - 63*s12^3*s13 -
                    72*s12^2*s13^2 - 36*s12*s13^3)*s23 + (-45*s12^3 -
                    18*s12^2*s13 - 36*s12*s13^2 - 36*s13^3)*s23^2 +
                  (-27*s12^2 + 18*s12*s13 - 45*s13^2)*s23^3 +
                  (-9*s12 - 9*s13)*s23^4) + p1q*p2q^3*(-72*s12^3*s13^2 -
                  72*s12^2*s13^3 + (-54*s12^3*s13 - 297*s12^2*s13^2 -
                    144*s12*s13^3 + 27*s13^4)*s23 + (-135*s12^2*s13 -
                    297*s12*s13^2 - 18*s13^3)*s23^2 + (-117*s12*s13 -
                    81*s13^2)*s23^3 - 36*s13*s23^4) + p1q^3*p2q*
                 ((9*s12^3 + 36*s12^2*s13 + 27*s12*s13^2)*s23^2 +
                  (-18*s12^2 + 9*s12*s13 + 9*s13^2)*s23^3 + (-27*s12 + 9*s13)*
                   s23^4)))*Log((s12 + s13)/(s12 + s13 + s23)))/
            (2*p1q*p3q^4*s12^3*s13*s23^2 + 2*p1q*p2q^4*s12*s13^3*s23^2 +
             2*p1q^4*p2q*s12*s13*s23^4 + p1q^2*p2q^3*(2*s12*s13^3*s23^2 - 4*
                s12*s13^2*s23^3) + p1q^3*p2q^2*(-4*s12*s13^2*s23^3 + 2*s12*
                s13*s23^4) + p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*
                s23^2 + p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
             p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*
                s23^2 + p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
                 (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) + p1q^3*
                (-4*s12^2*s13*s23^3 + 2*s12*s13*s23^4)) +
             p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 + 2*p1q^4*
                s12*s13*s23^4 + p1q^2*p2q^2*((-4*s12^2*s13^2 + 2*s12*s13^3)*
                  s23^2 + (-4*s12^2*s13 - 8*s12*s13^2)*s23^3) + p1q^3*p2q*
                ((-4*s12^2*s13 - 4*s12*s13^2)*s23^3 + 4*s12*s13*s23^4))) +
           ((p2q^6*(-72*s12^3*s13^3 - 144*s12^2*s13^4 - 72*s12*s13^5 +
                (-126*s12^2*s13^3 - 144*s12*s13^4 - 18*s13^5)*s23 +
                (-54*s12*s13^3 - 18*s13^4)*s23^2) + p1q*p3q^5*(
                (18*s12^5 + 36*s12^4*s13 + 18*s12^3*s13^2)*s23 +
                (27*s12^4 + 27*s12^3*s13)*s23^2 + 9*s12^3*s23^3) +
              p1q*p2q^5*(-72*s12^3*s13^3 - 144*s12^2*s13^4 - 72*s12*s13^5 +
                (189*s12^3*s13^2 + 279*s12^2*s13^3 + 63*s12*s13^4 - 27*s13^5)*
                 s23 + (315*s12^2*s13^2 + 333*s12*s13^3 + 18*s13^4)*s23^2 +
                (126*s12*s13^2 + 45*s13^3)*s23^3) + p1q^2*p2q^4*(
                (-18*s12^4*s13 + 162*s12^3*s13^2 + 414*s12^2*s13^3 +
                  234*s12*s13^4)*s23 + (-162*s12^3*s13 - 45*s12^2*s13^2 +
                  234*s12*s13^3 + 81*s13^4)*s23^2 + (-234*s12^2*s13 -
                  207*s12*s13^2 + 45*s13^3)*s23^3 + (-90*s12*s13 - 36*s13^2)*
                 s23^4) + p1q^5*p2q*((-9*s12^2 - 9*s12*s13)*s23^4 -
                9*s12*s23^5) + p1q^3*p2q^3*((-135*s12^3*s13 - 387*s12^2*
                   s13^2 - 252*s12*s13^3)*s23^2 + (27*s12^3 - 126*s12^2*s13 -
                  351*s12*s13^2 - 81*s13^3)*s23^3 + (45*s12^2 + 9*s12*s13 -
                  72*s13^2)*s23^4 + (18*s12 + 9*s13)*s23^5) +
              p1q^4*p2q^2*((27*s12^3 + 126*s12^2*s13 + 99*s12*s13^2)*s23^3 +
                (36*s12^2 + 135*s12*s13 + 27*s13^2)*s23^4 + (9*s12 + 27*s13)*
                 s23^5) + p3q^4*(p2q^2*(-72*s12^5*s13 - 144*s12^4*s13^2 -
                  72*s12^3*s13^3 + (18*s12^5 - 108*s12^4*s13 - 162*s12^3*
                     s13^2 - 36*s12^2*s13^3)*s23 + (36*s12^4 - 54*s12^3*s13 -
                    54*s12^2*s13^2)*s23^2 + (18*s12^3 - 18*s12^2*s13)*
                   s23^3) + p1q^2*((18*s12^5 + 36*s12^4*s13 + 18*s12^3*s13^2)*
                   s23 + (-18*s12^4 - 54*s12^3*s13 - 36*s12^2*s13^2)*s23^2 +
                  (-54*s12^3 - 54*s12^2*s13)*s23^3 - 18*s12^2*s23^4) +
                p1q*p2q*((45*s12^5 + 45*s12^4*s13 - 45*s12^3*s13^2 -
                    45*s12^2*s13^3)*s23 + (81*s12^4 + 27*s12^3*s13 -
                    72*s12^2*s13^2 - 18*s12*s13^3)*s23^2 + (54*s12^3 +
                    9*s12^2*s13 - 18*s12*s13^2)*s23^3 + 18*s12^2*s23^4)) +
              p3q^3*(p2q^3*(-144*s12^5*s13 - 144*s12^4*s13^2 + 144*s12^3*
                   s13^3 + 144*s12^2*s13^4 + (18*s12^5 - 270*s12^4*s13 -
                    90*s12^3*s13^2 + 270*s12^2*s13^3 + 72*s12*s13^4)*s23 +
                  (36*s12^4 - 180*s12^3*s13 + 36*s12^2*s13^2 + 108*s12*s13^3)*
                   s23^2 + (18*s12^3 - 54*s12^2*s13 + 36*s12*s13^2)*s23^3) +
                p1q*p2q^2*(-72*s12^5*s13 - 144*s12^4*s13^2 - 72*s12^3*s13^3 +
                  (72*s12^5 + 90*s12^4*s13 + 72*s12^3*s13^2 + 90*s12^2*
                     s13^3 + 36*s12*s13^4)*s23 + (117*s12^4 + 189*s12^3*s13 +
                    207*s12^2*s13^2 + 153*s12*s13^3 + 18*s13^4)*s23^2 +
                  (45*s12^3 + 72*s12^2*s13 + 153*s12*s13^2 + 54*s13^3)*
                   s23^3 + (18*s12*s13 + 36*s13^2)*s23^4) + p1q^2*p2q*
                 ((36*s12^5 + 18*s12^4*s13 - 72*s12^3*s13^2 - 54*s12^2*s13^3)*
                   s23 + (-27*s12^4 - 180*s12^3*s13 - 225*s12^2*s13^2 -
                    72*s12*s13^3)*s23^2 + (-90*s12^3 - 153*s12^2*s13 -
                    99*s12*s13^2)*s23^3 + (-45*s12^2 - 45*s12*s13)*s23^4 -
                  18*s12*s23^5) + p1q^3*((-45*s12^4 - 81*s12^3*s13 -
                    36*s12^2*s13^2)*s23^2 + (-27*s12^3 + 18*s12*s13^2)*
                   s23^3 + (27*s12^2 + 27*s12*s13)*s23^4 + 9*s12*s23^5)) +
              p3q^2*(p2q^4*(-72*s12^5*s13 + 144*s12^4*s13^2 + 432*s12^3*
                   s13^3 + 144*s12^2*s13^4 - 72*s12*s13^5 + (-162*s12^4*s13 +
                    342*s12^3*s13^2 + 486*s12^2*s13^3 - 54*s12*s13^4 -
                    36*s13^5)*s23 + (-126*s12^3*s13 + 234*s12^2*s13^2 +
                    90*s12*s13^3 - 54*s13^4)*s23^2 + (-36*s12^2*s13 +
                    54*s12*s13^2 - 18*s13^3)*s23^3) + p1q^4*
                 ((36*s12^3 + 54*s12^2*s13 + 18*s12*s13^2)*s23^3 +
                  (36*s12^2 + 18*s12*s13)*s23^4) + p1q*p2q^3*(-72*s12^5*s13 +
                  216*s12^3*s13^3 + 144*s12^2*s13^4 + (45*s12^5 + 135*s12^4*
                     s13 + 612*s12^3*s13^2 + 774*s12^2*s13^3 + 243*s12*
                     s13^4 - 9*s13^5)*s23 + (81*s12^4 + 261*s12^3*s13 +
                    693*s12^2*s13^2 + 549*s12*s13^3 + 36*s13^4)*s23^2 +
                  (36*s12^3 + 45*s12^2*s13 + 306*s12*s13^2 + 117*s13^3)*
                   s23^3 + (-18*s12*s13 + 72*s13^2)*s23^4) + p1q^3*p2q*
                 ((-72*s12^4 - 117*s12^3*s13 - 81*s12^2*s13^2 - 36*s12*s13^3)*
                   s23^2 + (-45*s12^3 + 18*s12^2*s13 + 9*s12*s13^2 + 9*s13^3)*
                   s23^3 + (18*s12^2 + 27*s12*s13 + 9*s13^2)*s23^4 -
                  9*s12*s23^5) + p1q^2*p2q^2*((36*s12^5 + 198*s12^4*s13 +
                    288*s12^3*s13^2 + 162*s12^2*s13^3 + 36*s12*s13^4)*s23 +
                  (-27*s12^4 - 72*s12^3*s13 - 63*s12^2*s13^2 + 18*s12*s13^3)*
                   s23^2 + (-72*s12^3 - 252*s12^2*s13 - 81*s12*s13^2 +
                    9*s13^3)*s23^3 + (9*s12^2 - 72*s12*s13 - 9*s13^2)*s23^4 +
                  (18*s12 - 18*s13)*s23^5)) + p3q*(p2q^5*(144*s12^4*s13^2 +
                  144*s12^3*s13^3 - 144*s12^2*s13^4 - 144*s12*s13^5 +
                  (270*s12^3*s13^2 + 54*s12^2*s13^3 - 270*s12*s13^4 -
                    54*s13^5)*s23 + (144*s12^2*s13^2 - 72*s12*s13^3 -
                    72*s13^4)*s23^2 + (18*s12*s13^2 - 18*s13^3)*s23^3) +
                p1q*p2q^4*(144*s12^4*s13^2 + 216*s12^3*s13^3 - 72*s12*s13^5 +
                  (54*s12^4*s13 + 666*s12^3*s13^2 + 918*s12^2*s13^3 +
                    270*s12*s13^4 - 36*s13^5)*s23 + (36*s12^3*s13 +
                    729*s12^2*s13^2 + 747*s12*s13^3 + 54*s13^4)*s23^2 +
                  (-54*s12^2*s13 + 297*s12*s13^2 + 144*s13^3)*s23^3 +
                  (-36*s12*s13 + 54*s13^2)*s23^4) + p1q^5*
                 ((-9*s12^2 - 9*s12*s13)*s23^4 - 9*s12*s23^5) + p1q^2*p2q^3*
                 ((18*s12^5 + 90*s12^4*s13 + 216*s12^3*s13^2 + 306*s12^2*
                     s13^3 + 162*s12*s13^4)*s23 + (18*s12^4 - 324*s12^3*s13 -
                    495*s12^2*s13^2 - 36*s12*s13^3 + 45*s13^4)*s23^2 +
                  (18*s12^3 - 657*s12^2*s13 - 567*s12*s13^2)*s23^3 +
                  (36*s12^2 - 297*s12*s13 - 81*s13^2)*s23^4 +
                  (18*s12 - 36*s13)*s23^5) + p1q^4*p2q*((45*s12^3 +
                    72*s12^2*s13 + 27*s12*s13^2)*s23^3 + (36*s12^2 +
                    9*s12*s13 - 9*s13^2)*s23^4 + (-9*s12 - 9*s13)*s23^5) +
                p1q^3*p2q^2*((-45*s12^4 - 297*s12^3*s13 - 342*s12^2*s13^2 -
                    90*s12*s13^3)*s23^2 + (9*s12^3 - 180*s12^2*s13 -
                    72*s12*s13^2)*s23^3 + (90*s12^2 + 63*s12*s13 + 9*s13^2)*
                   s23^4 + (36*s12 + 9*s13)*s23^5)))*Log(s23/(s12 + s13 +
                s23)))/(p1q*p3q^5*(2*s12^4*s13 + 2*s12^3*s13^2)*s23^2 +
             p1q*p2q^5*(2*s12^2*s13^3 + 2*s12*s13^4)*s23^2 -
             2*p1q^5*p2q*s12*s13*s23^5 + p1q^2*p2q^4*((2*s12^2*s13^3 +
                 2*s12*s13^4)*s23^2 + (-4*s12^2*s13^2 - 6*s12*s13^3)*s23^3) +
             p1q^3*p2q^3*((-4*s12^2*s13^2 - 6*s12*s13^3)*s23^3 +
               (2*s12^2*s13 + 6*s12*s13^2)*s23^4) + p1q^4*p2q^2*
              ((2*s12^2*s13 + 6*s12*s13^2)*s23^4 - 2*s12*s13*s23^5) +
             p3q^4*(p1q*p2q*(6*s12^4*s13 + 2*s12^3*s13^2 - 4*s12^2*s13^3)*
                s23^2 + p1q^2*((2*s12^4*s13 + 2*s12^3*s13^2)*s23^2 +
                 (-6*s12^3*s13 - 4*s12^2*s13^2)*s23^3)) +
             p3q^3*(p1q*p2q^2*(6*s12^4*s13 - 6*s12^3*s13^2 - 10*s12^2*s13^3 +
                 2*s12*s13^4)*s23^2 + p1q^2*p2q*((4*s12^4*s13 - 4*s12^2*
                    s13^3)*s23^2 + (-16*s12^3*s13 - 12*s12^2*s13^2 -
                   4*s12*s13^3)*s23^3) + p1q^3*((-6*s12^3*s13 - 4*s12^2*
                    s13^2)*s23^3 + (6*s12^2*s13 + 2*s12*s13^2)*s23^4)) +
             p3q*(p1q*p2q^4*(-4*s12^3*s13^2 + 2*s12^2*s13^3 + 6*s12*s13^4)*
                s23^2 - 2*p1q^5*s12*s13*s23^5 + p1q^2*p2q^3*
                ((-4*s12^3*s13^2 + 4*s12*s13^4)*s23^2 + (-4*s12^3*s13 -
                   12*s12^2*s13^2 - 16*s12*s13^3)*s23^3) + p1q^3*p2q^2*
                ((-4*s12^3*s13 - 8*s12^2*s13^2 - 10*s12*s13^3)*s23^3 +
                 (10*s12^2*s13 + 14*s12*s13^2)*s23^4) + p1q^4*p2q*
                ((8*s12^2*s13 + 8*s12*s13^2)*s23^4 - 4*s12*s13*s23^5)) +
             p3q^2*(p1q*p2q^3*(2*s12^4*s13 - 10*s12^3*s13^2 - 6*s12^2*s13^3 +
                 6*s12*s13^4)*s23^2 + p1q^2*p2q^2*((2*s12^4*s13 - 6*s12^3*
                    s13^2 - 6*s12^2*s13^3 + 2*s12*s13^4)*s23^2 +
                 (-14*s12^3*s13 - 16*s12^2*s13^2 - 14*s12*s13^3)*s23^3) +
               p1q^3*p2q*((-10*s12^3*s13 - 8*s12^2*s13^2 - 4*s12*s13^3)*
                  s23^3 + (14*s12^2*s13 + 10*s12*s13^2)*s23^4) + p1q^4*
                ((6*s12^2*s13 + 2*s12*s13^2)*s23^4 - 2*s12*s13*s23^5)))) +
         Log((p1q + p3q)/(p1q + p2q + p3q))*
          (((p1q*p2q^3*(s12*s13^2 + s13^3 + s13^2*s23) + p1q^2*p2q^2*(
                -(s12^2*s13) + s13^3 + (-(s12*s13) + s13^2)*s23) +
              p1q^3*p2q*(-2*s12^3 - 4*s12^2*s13 - 2*s12*s13^2 +
                (-5*s12^2 - 6*s12*s13 - s13^2)*s23 + (-4*s12 - 2*s13)*s23^2 -
                s23^3) + p3q^2*(p2q^2*(-2*s12^2*s13 - 2*s12*s13^2 -
                  2*s12*s13*s23) + p1q*p2q*(-4*s12^3 - 5*s12^2*s13 -
                  s12*s13^2 + (-8*s12^2 - 5*s12*s13)*s23 - 4*s12*s23^2)) +
              p3q*(p2q^3*(2*s12*s13^2 + 2*s13^3 + 2*s13^2*s23) +
                p1q^2*p2q*(-5*s12^3 - 8*s12^2*s13 - 3*s12*s13^2 +
                  (-10*s12^2 - 9*s12*s13 - s13^2)*s23 + (-5*s12 - s13)*
                   s23^2) + p1q*p2q^2*(-(s12^2*s13) + s13^3 +
                  (-3*s12*s13 - s13^2)*s23 - 2*s13*s23^2)))*
             Log(s12/(s12 + s13 + s23)))/(2*p1q*p3q^3*s12^3*s13 +
             2*p1q*p2q^3*s12*s13^3 + 2*p1q^4*s12*s13*s23^2 +
             p1q^2*p2q^2*(2*s12*s13^3 - 4*s12*s13^2*s23) +
             p1q^3*p2q*(-4*s12*s13^2*s23 + 2*s12*s13*s23^2) +
             p3q^2*(p1q*p2q*(2*s12^3*s13 - 4*s12^2*s13^2) + p1q^2*
                (2*s12^3*s13 - 4*s12^2*s13*s23)) +
             p3q*(p1q*p2q^2*(-4*s12^2*s13^2 + 2*s12*s13^3) + p1q^2*p2q*
                (-4*s12^2*s13^2 + (-4*s12^2*s13 - 4*s12*s13^2)*s23) + p1q^3*
                (-4*s12^2*s13*s23 + 2*s12*s13*s23^2))) +
           ((p2q^5*(-18*s12^2*s13^3 - 18*s12*s13^4 - 18*s12*s13^3*s23) +
              p1q*p3q^4*((9*s12^4 + 9*s12^3*s13)*s23 + (10*s12^3 + s12^2*s13)*
                 s23^2 + s12^2*s23^3) + p1q*p2q^4*(-18*s12^2*s13^3 -
                18*s12*s13^4 + (27*s12^2*s13^2 + 9*s12*s13^3)*s23 +
                (29*s12*s13^2 + 2*s13^3)*s23^2 + 2*s13^2*s23^3) +
              p1q^3*p2q^2*((-9*s12^3 - 45*s12^2*s13 - 36*s12*s13^2)*s23^2 +
                (-10*s12^2 - 40*s12*s13 - 3*s13^2)*s23^3 + (-s12 - 3*s13)*
                 s23^4) + p1q^2*p2q^3*((27*s12^3*s13 + 72*s12^2*s13^2 +
                  45*s12*s13^3)*s23 + (19*s12^2*s13 + 39*s12*s13^2 + 2*s13^3)*
                 s23^2 - 10*s12*s13*s23^3 - 2*s13*s23^4) + p1q^4*p2q*(
                (9*s12^2 + 9*s12*s13)*s23^3 + (10*s12 + s13)*s23^4 + s23^5) +
              p3q^3*(p2q^2*(-18*s12^4*s13 - 18*s12^3*s13^2 - 18*s12^3*s13*
                   s23 + (2*s12^2*s13 + 2*s12*s13^2)*s23^2 + 2*s12*s13*
                   s23^3) + p1q^2*((9*s12^4 + 9*s12^3*s13)*s23 +
                  (-8*s12^3 - 17*s12^2*s13)*s23^2 + (-19*s12^2 - 2*s12*s13)*
                   s23^3 - 2*s12*s23^4) + p1q*p2q*((36*s12^4 + 36*s12^3*s13)*
                   s23 + (58*s12^3 + 21*s12^2*s13 - s12*s13^2)*s23^2 +
                  (24*s12^2 + s12*s13)*s23^3 + 2*s12*s23^4)) +
              p3q^2*(p2q^3*(-18*s12^4*s13 + 18*s12^3*s13^2 + 36*s12^2*s13^3 +
                  (-18*s12^3*s13 + 36*s12^2*s13^2)*s23 + (2*s12^2*s13 -
                    2*s13^3)*s23^2 + (2*s12*s13 - 2*s13^2)*s23^3) +
                p1q*p2q^2*(-18*s12^4*s13 - 18*s12^3*s13^2 + (27*s12^4 -
                    27*s12^3*s13 - 45*s12^2*s13^2 - 9*s12*s13^3)*s23 +
                  (48*s12^3 - 35*s12^2*s13 - 29*s12*s13^2)*s23^2 +
                  (23*s12^2 - 18*s12*s13)*s23^3 + 2*s12*s23^4) +
                p1q^2*p2q*((18*s12^4 + 18*s12^3*s13)*s23 + (-25*s12^3 -
                    80*s12^2*s13 - 37*s12*s13^2)*s23^2 + (-66*s12^2 -
                    63*s12*s13 - 3*s13^2)*s23^3 + (-25*s12 - 5*s13)*s23^4 -
                  2*s23^5) + p1q^3*((-18*s12^3 - 18*s12^2*s13)*s23^2 +
                  (-11*s12^2 + 7*s12*s13)*s23^3 + (8*s12 + s13)*s23^4 +
                  s23^5)) + p3q*(p2q^4*(36*s12^3*s13^2 + 18*s12^2*s13^3 -
                  18*s12*s13^4 + (36*s12^2*s13^2 - 18*s12*s13^3)*s23 +
                  (-2*s12*s13^2 - 2*s13^3)*s23^2 - 2*s13^2*s23^3) +
                p1q*p2q^3*(36*s12^3*s13^2 + 36*s12^2*s13^3 + (18*s12^3*s13 +
                    126*s12^2*s13^2 + 72*s12*s13^3)*s23 + (35*s12^2*s13 +
                    91*s12*s13^2 + 2*s13^3)*s23^2 + (17*s12*s13 + 2*s13^2)*
                   s23^3) + p1q^2*p2q^2*((9*s12^4 + 18*s12^3*s13 + 36*s12^2*
                     s13^2 + 27*s12*s13^3)*s23 + (-17*s12^3 - 80*s12^2*s13 -
                    34*s12*s13^2 + 2*s13^3)*s23^2 + (-47*s12^2 - 89*s12*s13 -
                    3*s13^2)*s23^3 + (-23*s12 - 7*s13)*s23^4 - 2*s23^5) +
                p1q^3*p2q*((-27*s12^3 - 63*s12^2*s13 - 36*s12*s13^2)*s23^2 +
                  (-21*s12^2 - 33*s12*s13 - 3*s13^2)*s23^3 + (7*s12 - 2*s13)*
                   s23^4 + s23^5) + p1q^4*((9*s12^2 + 9*s12*s13)*s23^3 +
                  (10*s12 + s13)*s23^4 + s23^5)))*Log(s13/(s12 + s13 + s23)))/
            (2*p1q*p3q^4*s12^3*s13*s23^2 + 2*p1q*p2q^4*s12*s13^3*s23^2 +
             2*p1q^4*p2q*s12*s13*s23^4 + p1q^2*p2q^3*(2*s12*s13^3*s23^2 - 4*
                s12*s13^2*s23^3) + p1q^3*p2q^2*(-4*s12*s13^2*s23^3 + 2*s12*
                s13*s23^4) + p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*
                s23^2 + p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
             p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*
                s23^2 + p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
                 (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) + p1q^3*
                (-4*s12^2*s13*s23^3 + 2*s12*s13*s23^4)) +
             p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 + 2*p1q^4*
                s12*s13*s23^4 + p1q^2*p2q^2*((-4*s12^2*s13^2 + 2*s12*s13^3)*
                  s23^2 + (-4*s12^2*s13 - 8*s12*s13^2)*s23^3) + p1q^3*p2q*
                ((-4*s12^2*s13 - 4*s12*s13^2)*s23^3 + 4*s12*s13*s23^4))) +
           ((p1q*p2q^4*(9*s12*s13^2 + 9*s13^3 + 9*s13^2*s23) +
              p1q^2*p2q^3*(-18*s12^2*s13 - 18*s12*s13^2 + (-27*s12*s13 -
                  9*s13^2)*s23 - 9*s13*s23^2) + p3q*(p2q^4*(18*s12*s13^2 +
                  18*s13^3 + 18*s13^2*s23) + p1q*p2q^3*(-36*s12^2*s13 -
                  45*s12*s13^2 - 9*s13^3 + (-81*s12*s13 - 54*s13^2)*s23 -
                  45*s13*s23^2) + p1q^3*p2q*((18*s12^2 + 36*s12*s13 +
                    18*s13^2)*s23 + (36*s12 + 36*s13)*s23^2 + 18*s23^3) +
                p1q^2*p2q^2*(18*s12^3 + 18*s12^2*s13 - 18*s12*s13^2 -
                  18*s13^3 + (63*s12^2 + 36*s12*s13 - 27*s13^2)*s23 +
                  (72*s12 + 18*s13)*s23^2 + 27*s23^3)) +
              p3q^3*(p2q^2*(18*s12^3 + 18*s12^2*s13 + (36*s12^2 + 18*s12*s13)*
                   s23 + 18*s12*s23^2) + p1q*p2q*(-9*s12^3 + 9*s12^2*s13 +
                  18*s12*s13^2 + (18*s12^2 + 81*s12*s13 + 36*s13^2)*s23 +
                  (63*s12 + 72*s13)*s23^2 + 36*s23^3)) +
              p3q^2*(p2q^3*(-36*s12^2*s13 - 36*s12*s13^2 + (-54*s12*s13 -
                    18*s13^2)*s23 - 18*s13*s23^2) + p1q*p2q^2*(27*s12^3 +
                  45*s12^2*s13 - 18*s13^3 + (72*s12^2 + 36*s12*s13 -
                    45*s13^2)*s23 + (63*s12 - 9*s13)*s23^2 + 18*s23^3) +
                p1q^2*p2q*(18*s12^2*s13 + 18*s12*s13^2 + (63*s12^2 +
                    135*s12*s13 + 54*s13^2)*s23 + (126*s12 + 117*s13)*s23^2 +
                  63*s23^3)))*Log(s23/(s12 + s13 + s23)))/
            (2*p1q*p3q^4*s12^2*s13*s23 + 2*p1q*p2q^4*s13^3*s23 +
             2*p1q^4*p2q*s13*s23^3 + p1q^2*p2q^3*(2*s13^3*s23 - 4*s13^2*
                s23^2) + p1q^3*p2q^2*(-4*s13^2*s23^2 + 2*s13*s23^3) +
             p3q^3*(p1q*p2q*(4*s12^2*s13 - 4*s12*s13^2)*s23 + p1q^2*
                (2*s12^2*s13*s23 - 4*s12*s13*s23^2)) +
             p3q^2*(p1q*p2q^2*(2*s12^2*s13 - 8*s12*s13^2 + 2*s13^3)*s23 +
               p1q^2*p2q*((2*s12^2*s13 - 4*s12*s13^2)*s23 + (-8*s12*s13 -
                   4*s13^2)*s23^2) + p1q^3*(-4*s12*s13*s23^2 +
                 2*s13*s23^3)) + p3q*(p1q*p2q^3*(-4*s12*s13^2 + 4*s13^3)*
                s23 + 2*p1q^4*s13*s23^3 + p1q^2*p2q^2*((-4*s12*s13^2 +
                   2*s13^3)*s23 + (-4*s12*s13 - 8*s13^2)*s23^2) + p1q^3*p2q*
                ((-4*s12*s13 - 4*s13^2)*s23^2 + 4*s13*s23^3))) +
           ((p2q^5*(18*s12^2*s13^3 + 18*s12*s13^4 + 18*s12*s13^3*s23) +
              p1q*p3q^4*((-9*s12^4 - 9*s12^3*s13)*s23 + (-10*s12^3 -
                  s12^2*s13)*s23^2 - s12^2*s23^3) + p1q*p2q^4*(18*s12^2*
                 s13^3 + 18*s12*s13^4 + (-36*s12^2*s13^2 - 18*s12*s13^3)*
                 s23 + (-39*s12*s13^2 - 3*s13^3)*s23^2 - 3*s13^2*s23^3) +
              p1q^2*p2q^3*((-9*s12^3*s13 - 54*s12^2*s13^2 - 45*s12*s13^3)*
                 s23 + (9*s12^2*s13 - 30*s12*s13^2 - 3*s13^3)*s23^2 +
                (20*s12*s13 - s13^2)*s23^3 + 2*s13*s23^4) + p1q^4*p2q*(
                (-9*s12^2 - 9*s12*s13)*s23^3 + (-10*s12 - s13)*s23^4 -
                s23^5) + p1q^3*p2q^2*((11*s12^3 + 49*s12^2*s13 +
                  38*s12*s13^2)*s23^2 + (15*s12^2 + 46*s12*s13 + 4*s13^2)*
                 s23^3 + (5*s12 + 5*s13)*s23^4 + s23^5) +
              p3q^3*(p2q^2*(18*s12^4*s13 + 18*s12^3*s13^2 - 18*s12^4*s23 +
                  (-36*s12^3 - 18*s12^2*s13)*s23^2 - 18*s12^2*s23^3) +
                p1q*p2q*((-27*s12^4 - 45*s12^3*s13 - 18*s12^2*s13^2)*s23 +
                  (-72*s12^3 - 97*s12^2*s13 - 34*s12*s13^2)*s23^2 +
                  (-79*s12^2 - 68*s12*s13)*s23^3 - 34*s12*s23^4) +
                p1q^2*((-9*s12^4 - 9*s12^3*s13)*s23 + (8*s12^3 + 17*s12^2*
                     s13)*s23^2 + (19*s12^2 + 2*s12*s13)*s23^3 +
                  2*s12*s23^4)) + p3q^2*(p2q^3*(18*s12^4*s13 - 18*s12^3*
                   s13^2 - 36*s12^2*s13^3 + 54*s12^3*s13*s23 +
                  (54*s12^2*s13 + 18*s12*s13^2)*s23^2 + 18*s12*s13*s23^3) +
                p1q*p2q^2*(18*s12^4*s13 + 18*s12^3*s13^2 + (-54*s12^4 -
                    18*s12^3*s13 + 45*s12^2*s13^2 + 27*s12*s13^3)*s23 +
                  (-116*s12^3 + 5*s12^2*s13 + 75*s12*s13^2 - s13^3)*s23^2 +
                  (-78*s12^2 + 35*s12*s13 + s13^2)*s23^3 + (-16*s12 + 2*s13)*
                   s23^4) + p1q^3*((18*s12^3 + 18*s12^2*s13)*s23^2 +
                  (11*s12^2 - 7*s12*s13)*s23^3 + (-8*s12 - s13)*s23^4 -
                  s23^5) + p1q^2*p2q*((-18*s12^4 - 36*s12^3*s13 - 18*s12^2*
                     s13^2)*s23 + (-33*s12^3 - 47*s12^2*s13 - 14*s12*s13^2)*
                   s23^2 + (-50*s12^2 - 45*s12*s13 + 4*s13^2)*s23^3 +
                  (-33*s12 + 6*s13)*s23^4 + 2*s23^5)) +
              p3q*(p2q^4*(-36*s12^3*s13^2 - 18*s12^2*s13^3 + 18*s12*s13^4 -
                  54*s12^2*s13^2*s23 - 18*s12*s13^2*s23^2) + p1q*p2q^3*
                 (-36*s12^3*s13^2 - 36*s12^2*s13^3 + (18*s12^3*s13 -
                    81*s12^2*s13^2 - 63*s12*s13^3)*s23 + (47*s12^2*s13 -
                    38*s12*s13^2 - 4*s13^3)*s23^2 + (31*s12*s13 - 2*s13^2)*
                   s23^3 + 2*s13*s23^4) + p1q^3*p2q*((11*s12^3 + 31*s12^2*
                     s13 + 20*s12*s13^2)*s23^2 + (-10*s12^2 + 3*s12*s13 +
                    4*s13^2)*s23^3 + (-21*s12 + 4*s13)*s23^4) +
                p1q^4*((-9*s12^2 - 9*s12*s13)*s23^3 + (-10*s12 - s13)*s23^4 -
                  s23^5) + p1q^2*p2q^2*((-27*s12^4 - 36*s12^3*s13 -
                    18*s12^2*s13^2 - 9*s12*s13^3)*s23 + (-41*s12^3 +
                    53*s12^2*s13 + 64*s12*s13^2 - 3*s13^3)*s23^2 +
                  (-15*s12^2 + 81*s12*s13 + 3*s13^2)*s23^3 + (s12 + 8*s13)*
                   s23^4 + 2*s23^5)))*Log((s12 + s23)/(s12 + s13 + s23)))/
            (2*p1q*p3q^4*s12^3*s13*s23^2 + 2*p1q*p2q^4*s12*s13^3*s23^2 +
             2*p1q^4*p2q*s12*s13*s23^4 + p1q^2*p2q^3*(2*s12*s13^3*s23^2 - 4*
                s12*s13^2*s23^3) + p1q^3*p2q^2*(-4*s12*s13^2*s23^3 + 2*s12*
                s13*s23^4) + p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*
                s23^2 + p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
             p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*
                s23^2 + p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
                 (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) + p1q^3*
                (-4*s12^2*s13*s23^3 + 2*s12*s13*s23^4)) +
             p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 + 2*p1q^4*
                s12*s13*s23^4 + p1q^2*p2q^2*((-4*s12^2*s13^2 + 2*s12*s13^3)*
                  s23^2 + (-4*s12^2*s13 - 8*s12*s13^2)*s23^3) + p1q^3*p2q*
                ((-4*s12^2*s13 - 4*s12*s13^2)*s23^3 + 4*s12*s13*s23^4)))) +
         Log(s13/(s12 + s13 + s23))*
          ((p2q^2*(99*s12^3*s13 - 99*s12*s13^3 + (243*s12^2*s13 - 45*s13^3)*
                s23 + 189*s12*s13*s23^2 + 45*s13*s23^3) +
             p1q*p2q*(-81*s12^4 + 18*s12^3*s13 + 99*s12^2*s13^2 +
               (-259*s12^3 + 65*s12^2*s13 + 144*s12*s13^2)*s23 +
               (-315*s12^2 + 52*s12*s13 + 45*s13^2)*s23^2 + (-177*s12 +
                 5*s13)*s23^3 - 40*s23^4) + p3q*(p2q*(99*s12^3*s13 +
                 99*s12^2*s13^2 + (243*s12^2*s13 + 144*s12*s13^2)*s23 +
                 (189*s12*s13 + 45*s13^2)*s23^2 + 45*s13*s23^3) + p1q*
                (-81*s12^4 - 81*s12^3*s13 + (-259*s12^3 - 178*s12^2*s13)*
                  s23 + (-315*s12^2 - 137*s12*s13)*s23^2 + (-177*s12 -
                   40*s13)*s23^3 - 40*s23^4)))/(p1q*p2q*(9*s12^3*s13*s23 + 9*
                s12^2*s13*s23^2) + p1q*p3q*(9*s12^3*s13*s23 + 9*s12^2*s13*
                s23^2)) + ((p2q^5*(324*s12^5*s13^3 + 648*s12^4*s13^4 +
                324*s12^3*s13^5 + (495*s12^4*s13^3 + 675*s12^3*s13^4 +
                  27*s12^2*s13^5 - 153*s12*s13^6)*s23 + (414*s12^3*s13^3 +
                  576*s12^2*s13^4 - 90*s12*s13^5 - 90*s13^6)*s23^2 +
                (333*s12^2*s13^3 + 333*s12*s13^4)*s23^3 + (90*s12*s13^3 +
                  90*s13^4)*s23^4) + p1q*p2q^4*((-558*s12^5*s13^2 -
                  1449*s12^4*s13^3 - 738*s12^3*s13^4 + 153*s12^2*s13^5)*s23 +
                (-971*s12^4*s13^2 - 1987*s12^3*s13^3 + 172*s12^2*s13^4 +
                  702*s12*s13^5)*s23^2 + (-1142*s12^3*s13^2 - 2114*s12^2*
                   s13^3 + 360*s12*s13^4 + 360*s13^5)*s23^3 +
                (-989*s12^2*s13^2 - 1312*s12*s13^3 + 10*s13^4)*s23^4 +
                (-260*s12*s13^2 - 350*s13^3)*s23^5) + p1q^2*p2q^3*(
                (225*s12^5*s13 + 1188*s12^4*s13^2 + 504*s12^3*s13^3 -
                  459*s12^2*s13^4)*s23^2 + (538*s12^4*s13 + 2335*s12^3*
                   s13^2 - 588*s12^2*s13^3 - 1188*s12*s13^4)*s23^3 +
                (1042*s12^3*s13 + 2976*s12^2*s13^2 - 540*s12*s13^3 -
                  540*s13^4)*s23^4 + (979*s12^2*s13 + 1948*s12*s13^2 -
                  30*s13^3)*s23^5 + (250*s12*s13 + 510*s13^2)*s23^6) +
              p1q^3*p2q^2*((9*s12^5 - 540*s12^4*s13 - 90*s12^3*s13^2 +
                  459*s12^2*s13^3)*s23^3 + (-62*s12^4 - 1409*s12^3*s13 +
                  552*s12^2*s13^2 + 882*s12*s13^3)*s23^4 + (-314*s12^3 -
                  1914*s12^2*s13 + 360*s12*s13^2 + 360*s13^3)*s23^5 +
                (-323*s12^2 - 1292*s12*s13 + 30*s13^2)*s23^6 +
                (-80*s12 - 330*s13)*s23^7) + p1q^4*p2q*((153*s12^4 -
                  153*s12^2*s13^2)*s23^4 + (386*s12^3 - 163*s12^2*s13 -
                  243*s12*s13^2)*s23^5 + (476*s12^2 - 90*s12*s13 - 90*s13^2)*
                 s23^6 + (323*s12 - 10*s13)*s23^7 + 80*s23^8) +
              p3q^4*(p2q*((153*s12^6*s13 + 306*s12^5*s13^2 + 153*s12^4*s13^3)*
                   s23 + (396*s12^5*s13 + 639*s12^4*s13^2 + 243*s12^3*s13^3)*
                   s23^2 + (333*s12^4*s13 + 423*s12^3*s13^2 + 90*s12^2*s13^3)*
                   s23^3 + (90*s12^3*s13 + 90*s12^2*s13^2)*s23^4) +
                p1q*((-72*s12^7 - 144*s12^6*s13 - 72*s12^5*s13^2)*s23 +
                  (-224*s12^6 - 457*s12^5*s13 - 233*s12^4*s13^2)*s23^2 +
                  (-395*s12^5 - 719*s12^4*s13 - 243*s12^3*s13^2)*s23^3 +
                  (-323*s12^4 - 403*s12^3*s13 - 80*s12^2*s13^2)*s23^4 +
                  (-80*s12^3 - 80*s12^2*s13)*s23^5)) + p3q^3*(
                p2q^2*(324*s12^7*s13 + 648*s12^6*s13^2 + 324*s12^5*s13^3 +
                  (648*s12^6*s13 + 675*s12^5*s13^2 - 432*s12^4*s13^3 -
                    459*s12^3*s13^4)*s23 + (648*s12^5*s13 + 261*s12^4*s13^2 -
                    1125*s12^3*s13^3 - 576*s12^2*s13^4)*s23^2 +
                  (504*s12^4*s13 + 90*s12^3*s13^2 - 756*s12^2*s13^3 -
                    180*s12*s13^4)*s23^3 + (180*s12^3*s13 - 180*s12*s13^3)*
                   s23^4) + p1q*p2q*((-144*s12^7 - 153*s12^6*s13 + 126*s12^5*
                     s13^2 + 135*s12^4*s13^3)*s23 + (-610*s12^6 - 1258*s12^5*
                     s13 - 569*s12^4*s13^2 + 79*s12^3*s13^3)*s23^2 +
                  (-1114*s12^5 - 2394*s12^4*s13 - 794*s12^3*s13^2 +
                    90*s12^2*s13^3)*s23^3 + (-808*s12^4 - 1393*s12^3*s13 -
                    200*s12^2*s13^2 - 20*s12*s13^3)*s23^4 + (-160*s12^3 -
                    270*s12^2*s13 - 20*s12*s13^2)*s23^5) + p1q^2*
                 ((297*s12^6 + 441*s12^5*s13 + 144*s12^4*s13^2)*s23^2 +
                  (834*s12^5 + 1147*s12^4*s13 + 466*s12^3*s13^2)*s23^3 +
                  (1266*s12^4 + 1681*s12^3*s13 + 486*s12^2*s13^2)*s23^4 +
                  (969*s12^3 + 886*s12^2*s13 + 160*s12*s13^2)*s23^5 +
                  (240*s12^2 + 160*s12*s13)*s23^6)) + p3q^2*(
                p2q^3*(324*s12^7*s13 - 972*s12^5*s13^3 - 648*s12^4*s13^4 +
                  (495*s12^6*s13 - 621*s12^5*s13^2 - 1782*s12^4*s13^3 -
                    207*s12^3*s13^4 + 459*s12^2*s13^5)*s23 + (252*s12^5*s13 -
                    1044*s12^4*s13^2 - 1962*s12^3*s13^3 + 243*s12^2*s13^4 +
                    423*s12*s13^5)*s23^2 + (171*s12^4*s13 - 837*s12^3*s13^2 -
                    1179*s12^2*s13^3 + 243*s12*s13^4 + 90*s13^5)*s23^3 +
                  (90*s12^3*s13 - 270*s12^2*s13^2 - 270*s12*s13^3 + 90*s13^4)*
                   s23^4) + p1q*p2q^2*((-72*s12^7 - 837*s12^6*s13 -
                    1188*s12^5*s13^2 - 639*s12^4*s13^3 - 216*s12^3*s13^4)*
                   s23 + (-386*s12^6 - 1928*s12^5*s13 - 1167*s12^4*s13^2 -
                    830*s12^3*s13^3 - 719*s12^2*s13^4)*s23^2 +
                  (-719*s12^5 - 1974*s12^4*s13 - 678*s12^3*s13^2 - 1511*s12^2*
                     s13^3 - 729*s12*s13^4)*s23^3 + (-485*s12^4 - 1010*s12^3*
                     s13 - 393*s12^2*s13^2 - 1109*s12*s13^3 - 260*s13^4)*
                   s23^4 + (-80*s12^3 - 210*s12^2*s13 - 120*s12*s13^2 -
                    260*s13^3)*s23^5) + p1q^2*p2q*((360*s12^6 + 27*s12^5*
                     s13 - 657*s12^4*s13^2 - 324*s12^3*s13^3)*s23^2 +
                  (1282*s12^5 + 1008*s12^4*s13 + 228*s12^3*s13^2 + 133*s12^2*
                     s13^3)*s23^3 + (2299*s12^4 + 3227*s12^3*s13 + 2113*s12^2*
                     s13^2 + 549*s12*s13^3)*s23^4 + (1777*s12^3 + 2421*s12^2*
                     s13 + 1389*s12*s13^2 + 250*s13^3)*s23^5 +
                  (400*s12^2 + 590*s12*s13 + 250*s13^2)*s23^6) +
                p1q^3*((-378*s12^5 - 450*s12^4*s13 - 72*s12^3*s13^2)*s23^3 +
                  (-996*s12^4 - 923*s12^3*s13 - 233*s12^2*s13^2)*s23^4 +
                  (-1347*s12^3 - 1205*s12^2*s13 - 243*s12*s13^2)*s23^5 +
                  (-969*s12^2 - 563*s12*s13 - 80*s13^2)*s23^6 +
                  (-240*s12 - 80*s13)*s23^7)) + p3q*(p2q^4*(-648*s12^6*
                   s13^2 - 972*s12^5*s13^3 + 324*s12^3*s13^5 +
                  (-990*s12^5*s13^2 - 702*s12^4*s13^3 + 927*s12^3*s13^4 +
                    486*s12^2*s13^5 - 153*s12*s13^6)*s23 +
                  (-666*s12^4*s13^2 - 180*s12^3*s13^3 + 1395*s12^2*s13^4 +
                    333*s12*s13^5 - 90*s13^6)*s23^2 + (-504*s12^3*s13^2 +
                    756*s12*s13^4 + 90*s13^5)*s23^3 + (-180*s12^2*s13^2 +
                    180*s13^4)*s23^4) + p1q*p2q^3*((-666*s12^6*s13 -
                    1458*s12^5*s13^2 - 1737*s12^4*s13^3 - 792*s12^3*s13^4 +
                    153*s12^2*s13^5)*s23 + (-1271*s12^5*s13 - 2063*s12^4*
                     s13^2 - 3139*s12^3*s13^3 - 826*s12^2*s13^4 + 549*s12*
                     s13^5)*s23^2 + (-929*s12^4*s13 - 1962*s12^3*s13^2 -
                    4111*s12^2*s13^3 - 792*s12*s13^4 + 270*s13^5)*s23^3 +
                  (-344*s12^3*s13 - 1352*s12^2*s13^2 - 2581*s12*s13^3 -
                    340*s13^4)*s23^4 + (-20*s12^2*s13 - 360*s12*s13^2 -
                    610*s13^3)*s23^5) + p1q^2*p2q^2*((63*s12^6 + 774*s12^5*
                     s13 + 1170*s12^4*s13^2 + 153*s12^3*s13^3 - 306*s12^2*
                     s13^4)*s23^2 + (448*s12^5 + 2127*s12^4*s13 + 2502*s12^3*
                     s13^2 + 67*s12^2*s13^3 - 639*s12*s13^4)*s23^3 +
                  (1033*s12^4 + 3443*s12^3*s13 + 4513*s12^2*s13^2 +
                    828*s12*s13^3 - 270*s13^4)*s23^4 + (808*s12^3 +
                    2604*s12^2*s13 + 3177*s12*s13^2 + 490*s13^3)*s23^5 +
                  (160*s12^2 + 680*s12*s13 + 760*s13^2)*s23^6) +
                p1q^3*p2q*((-369*s12^5 - 360*s12^4*s13 + 162*s12^3*s13^2 +
                    153*s12^2*s13^3)*s23^3 + (-1058*s12^4 - 1036*s12^3*s13 +
                    40*s12^2*s13^2 + 243*s12*s13^3)*s23^4 + (-1661*s12^3 -
                    2273*s12^2*s13 - 612*s12*s13^2 + 90*s13^3)*s23^5 +
                  (-1292*s12^2 - 1675*s12*s13 - 320*s13^2)*s23^6 +
                  (-320*s12 - 410*s13)*s23^7) + p1q^4*((153*s12^4 +
                    153*s12^3*s13)*s23^4 + (386*s12^3 + 233*s12^2*s13)*
                   s23^5 + (476*s12^2 + 243*s12*s13)*s23^6 +
                  (323*s12 + 80*s13)*s23^7 + 80*s23^8)))*
             Log(s23/(s12 + s13 + s23)))/(p1q*p3q^4*(18*s12^6*s13 + 18*s12^5*
                s13^2)*s23^2 + p1q*p2q^4*(18*s12^4*s13^3 + 18*s12^3*s13^4)*
              s23^2 + p1q^2*p2q^3*(-36*s12^4*s13^2 - 54*s12^3*s13^3)*s23^3 +
             p1q^3*p2q^2*(18*s12^4*s13 + 54*s12^3*s13^2)*s23^4 -
             18*p1q^4*p2q*s12^3*s13*s23^5 + p3q^3*(p1q*p2q*(36*s12^6*s13 -
                 36*s12^4*s13^3)*s23^2 + p1q^2*(-54*s12^5*s13 - 36*s12^4*
                  s13^2)*s23^3) + p3q^2*(p1q*p2q^2*(18*s12^6*s13 -
                 54*s12^5*s13^2 - 54*s12^4*s13^3 + 18*s12^3*s13^4)*s23^2 +
               p1q^2*p2q*(-90*s12^5*s13 - 72*s12^4*s13^2 - 36*s12^3*s13^3)*
                s23^3 + p1q^3*(54*s12^4*s13 + 18*s12^3*s13^2)*s23^4) +
             p3q*(p1q*p2q^3*(-36*s12^5*s13^2 + 36*s12^3*s13^4)*s23^2 + p1q^2*
                p2q^2*(-36*s12^5*s13 - 72*s12^4*s13^2 - 90*s12^3*s13^3)*
                s23^3 + p1q^3*p2q*(72*s12^4*s13 + 72*s12^3*s13^2)*s23^4 - 18*
                p1q^4*s12^3*s13*s23^5)) +
           ((p2q^5*(-162*s12^4*s13^3 - 162*s12^3*s13^4 + (-495*s12^3*s13^3 -
                  180*s12^2*s13^4 + 153*s12*s13^5)*s23 + (-576*s12^2*s13^3 +
                  90*s13^5)*s23^2 - 333*s12*s13^3*s23^3 - 90*s13^3*s23^4) +
              p1q*p2q^4*(-162*s12^4*s13^3 - 162*s12^3*s13^4 +
                (234*s12^4*s13^2 - 414*s12^3*s13^3 - 333*s12^2*s13^4 +
                  153*s12*s13^5)*s23 + (1160*s12^3*s13^2 - 352*s12^2*s13^3 -
                  549*s12*s13^4 + 90*s13^5)*s23^2 + (1655*s12^2*s13^2 -
                  423*s12*s13^3 - 270*s13^4)*s23^3 + (989*s12*s13^2 -
                  100*s13^3)*s23^4 + 260*s13^2*s23^5) + p1q^2*p2q^3*(
                (81*s12^5*s13 + 396*s12^4*s13^2 + 162*s12^3*s13^3 -
                  153*s12^2*s13^4)*s23 + (99*s12^4*s13 + 1565*s12^3*s13^2 +
                  530*s12^2*s13^3 - 549*s12*s13^4)*s23^2 + (-799*s12^3*s13 +
                  1783*s12^2*s13^2 + 549*s12*s13^3 - 270*s13^4)*s23^3 +
                (-1546*s12^2*s13 + 1169*s12*s13^2 + 260*s13^3)*s23^4 +
                (-979*s12*s13 + 280*s13^2)*s23^5 - 250*s13*s23^6) +
              p1q^3*p2q^2*((-99*s12^5 - 261*s12^4*s13 + 144*s12^3*s13^2 +
                  306*s12^2*s13^3)*s23^2 + (-225*s12^4 - 1276*s12^3*s13 -
                  43*s12^2*s13^2 + 639*s12*s13^3)*s23^3 + (98*s12^3 -
                  1736*s12^2*s13 - 63*s12*s13^2 + 270*s13^3)*s23^4 +
                (467*s12^2 - 1069*s12*s13 - 70*s13^2)*s23^5 +
                (323*s12 - 260*s13)*s23^6 + 80*s23^7) + p1q^4*p2q*(
                (-9*s12^4 - 162*s12^3*s13 - 153*s12^2*s13^2)*s23^3 +
                (233*s12^3 - 154*s12^2*s13 - 243*s12*s13^2)*s23^4 +
                (485*s12^2 - 90*s12*s13 - 90*s13^2)*s23^5 +
                (323*s12 - 10*s13)*s23^6 + 80*s23^7) + p3q^4*(
                p2q*((-153*s12^5*s13 - 153*s12^4*s13^2)*s23 +
                  (-396*s12^4*s13 - 243*s12^3*s13^2)*s23^2 +
                  (-333*s12^3*s13 - 90*s12^2*s13^2)*s23^3 - 90*s12^2*s13*
                   s23^4) + p1q*((-9*s12^6 - 9*s12^5*s13)*s23 +
                  (233*s12^5 + 242*s12^4*s13)*s23^2 + (485*s12^4 + 243*s12^3*
                     s13)*s23^3 + (323*s12^3 + 80*s12^2*s13)*s23^4 +
                  80*s12^2*s23^5)) + p3q^3*(p2q^2*(-162*s12^6*s13 -
                  162*s12^5*s13^2 + (162*s12^6 - 486*s12^5*s13 - 27*s12^4*
                     s13^2 + 459*s12^3*s13^3)*s23 + (324*s12^5 - 810*s12^4*
                     s13 + 549*s12^3*s13^2 + 576*s12^2*s13^3)*s23^2 +
                  (162*s12^4 - 666*s12^3*s13 + 576*s12^2*s13^2 + 180*s12*
                     s13^3)*s23^3 + (-180*s12^2*s13 + 180*s12*s13^2)*s23^4) +
                p1q*p2q*((63*s12^6 + 99*s12^5*s13 + 36*s12^4*s13^2)*s23 +
                  (934*s12^5 + 567*s12^4*s13 - 340*s12^3*s13^2)*s23^2 +
                  (1663*s12^4 + 272*s12^3*s13 - 180*s12^2*s13^2)*s23^3 +
                  (952*s12^3 + 20*s12*s13^2)*s23^4 + (160*s12^2 + 20*s12*s13)*
                   s23^5) + p1q^2*((-9*s12^6 - 9*s12^5*s13)*s23 +
                  (251*s12^5 + 260*s12^4*s13)*s23^2 + (19*s12^4 - 241*s12^3*
                     s13)*s23^3 + (-647*s12^3 - 406*s12^2*s13)*s23^4 +
                  (-566*s12^2 - 160*s12*s13)*s23^5 - 160*s12*s23^6)) +
              p3q^2*(p2q^3*(-162*s12^6*s13 + 162*s12^5*s13^2 + 324*s12^4*
                   s13^3 + (-819*s12^5*s13 + 792*s12^4*s13^2 + 666*s12^3*
                     s13^3 - 459*s12^2*s13^4)*s23 + (-1062*s12^4*s13 +
                    1782*s12^3*s13^2 + 180*s12^2*s13^3 - 423*s12*s13^4)*
                   s23^2 + (-495*s12^3*s13 + 1332*s12^2*s13^2 - 153*s12*
                     s13^3 - 90*s13^4)*s23^3 + (-90*s12^2*s13 + 360*s12*
                     s13^2 - 90*s13^3)*s23^4) + p1q*p2q^2*(-162*s12^6*s13 -
                  162*s12^5*s13^2 + (396*s12^6 - 54*s12^5*s13 + 144*s12^4*
                     s13^2 + 432*s12^3*s13^3)*s23 + (1187*s12^5 - 384*s12^4*
                     s13 + 849*s12^3*s13^2 + 1304*s12^2*s13^3)*s23^2 +
                  (1178*s12^4 - 698*s12^3*s13 + 2015*s12^2*s13^2 + 909*s12*
                     s13^3)*s23^3 + (467*s12^3 - 78*s12^2*s13 + 1209*s12*
                     s13^2 + 260*s13^3)*s23^4 + (80*s12^2 + 40*s12*s13 +
                    260*s13^2)*s23^5) + p1q^2*p2q*((72*s12^6 + 261*s12^5*
                     s13 + 189*s12^4*s13^2)*s23 + (800*s12^5 + 1126*s12^4*
                     s13 + 209*s12^3*s13^2)*s23^2 + (354*s12^4 - 424*s12^3*
                     s13 - 259*s12^2*s13^2)*s23^3 + (-1284*s12^3 - 1698*s12^2*
                     s13 - 529*s12*s13^2)*s23^4 + (-1230*s12^2 - 1099*s12*
                     s13 - 250*s13^2)*s23^5 + (-320*s12 - 250*s13)*s23^6) +
                p1q^3*((18*s12^5 + 18*s12^4*s13)*s23^2 + (-475*s12^4 -
                    493*s12^3*s13)*s23^3 + (-737*s12^3 - 244*s12^2*s13)*
                   s23^4 + (-161*s12^2 + 83*s12*s13)*s23^5 +
                  (163*s12 + 80*s13)*s23^6 + 80*s23^7)) +
              p3q*(p2q^4*(324*s12^5*s13^2 + 162*s12^4*s13^3 - 162*s12^3*
                   s13^4 + (1152*s12^4*s13^2 - 126*s12^3*s13^3 - 639*s12^2*
                     s13^4 + 153*s12*s13^5)*s23 + (1314*s12^3*s13^2 -
                    972*s12^2*s13^3 - 423*s12*s13^4 + 90*s13^5)*s23^2 +
                  (666*s12^2*s13^2 - 666*s12*s13^3 - 90*s13^4)*s23^3 +
                  (180*s12*s13^2 - 180*s13^3)*s23^4) + p1q*p2q^3*
                 (324*s12^5*s13^2 + 324*s12^4*s13^3 + (18*s12^5*s13 +
                    1701*s12^4*s13^2 + 747*s12^3*s13^3 - 612*s12^2*s13^4)*
                   s23 + (-43*s12^4*s13 + 3438*s12^3*s13^2 + 556*s12^2*
                     s13^3 - 972*s12*s13^4)*s23^2 + (-79*s12^3*s13 +
                    3760*s12^2*s13^2 + 306*s12*s13^3 - 360*s13^4)*s23^3 +
                  (2*s12^2*s13 + 2178*s12*s13^2 + 160*s13^3)*s23^4 +
                  (20*s12*s13 + 520*s13^2)*s23^5) + p1q^2*p2q^2*
                 ((243*s12^6 + 504*s12^5*s13 + 558*s12^4*s13^2 + 297*s12^3*
                     s13^3)*s23 + (549*s12^5 + 749*s12^4*s13 + 1531*s12^3*
                     s13^2 + 1052*s12^2*s13^3)*s23^2 + (-151*s12^4 -
                    1261*s12^3*s13 + 1434*s12^2*s13^2 + 1368*s12*s13^3)*
                   s23^3 + (-961*s12^3 - 2748*s12^2*s13 + 640*s12*s13^2 +
                    530*s13^3)*s23^4 + (-664*s12^2 - 1918*s12*s13 + 30*s13^2)*
                   s23^5 + (-160*s12 - 500*s13)*s23^6) + p1q^4*
                 ((-9*s12^4 - 9*s12^3*s13)*s23^3 + (233*s12^3 + 242*s12^2*
                     s13)*s23^4 + (485*s12^2 + 243*s12*s13)*s23^5 +
                  (323*s12 + 80*s13)*s23^6 + 80*s23^7) + p1q^3*p2q*
                 ((81*s12^5 + 387*s12^4*s13 + 306*s12^3*s13^2)*s23^2 +
                  (-376*s12^4 - 473*s12^3*s13 - 322*s12^2*s13^2)*s23^3 +
                  (-477*s12^3 - 1134*s12^2*s13 - 792*s12*s13^2)*s23^4 +
                  (306*s12^2 - 806*s12*s13 - 340*s13^2)*s23^5 +
                  (486*s12 - 180*s13)*s23^6 + 160*s23^7)))*
             Log((s12 + s23)/(s12 + s13 + s23)))/(18*p1q*p3q^4*s12^5*s13*
              s23^2 + 18*p1q*p2q^4*s12^3*s13^3*s23^2 + 18*p1q^4*p2q*s12^3*s13*
              s23^4 + p1q^2*p2q^3*(18*s12^3*s13^3*s23^2 - 36*s12^3*s13^2*
                s23^3) + p1q^3*p2q^2*(-36*s12^3*s13^2*s23^3 + 18*s12^3*s13*
                s23^4) + p3q^3*(p1q*p2q*(36*s12^5*s13 - 36*s12^4*s13^2)*
                s23^2 + p1q^2*(18*s12^5*s13*s23^2 - 36*s12^4*s13*s23^3)) +
             p3q^2*(p1q*p2q^2*(18*s12^5*s13 - 72*s12^4*s13^2 + 18*s12^3*
                  s13^3)*s23^2 + p1q^2*p2q*((18*s12^5*s13 - 36*s12^4*s13^2)*
                  s23^2 + (-72*s12^4*s13 - 36*s12^3*s13^2)*s23^3) + p1q^3*
                (-36*s12^4*s13*s23^3 + 18*s12^3*s13*s23^4)) +
             p3q*(p1q*p2q^3*(-36*s12^4*s13^2 + 36*s12^3*s13^3)*s23^2 + 18*
                p1q^4*s12^3*s13*s23^4 + p1q^2*p2q^2*((-36*s12^4*s13^2 +
                   18*s12^3*s13^3)*s23^2 + (-36*s12^4*s13 - 72*s12^3*s13^2)*
                  s23^3) + p1q^3*p2q*((-36*s12^4*s13 - 36*s12^3*s13^2)*
                  s23^3 + 36*s12^3*s13*s23^4)))) +
         Log((p1q + p2q)/(p1q + p2q + p3q))*
          (((p1q*p3q^5*((s12^4 + s12^3*s13)*s23^2 + s12^3*s23^3) +
              p2q^6*(18*s12^2*s13^4 + 18*s12*s13^5 + (36*s12^2*s13^3 +
                  90*s12*s13^4 + 36*s13^5)*s23 + (72*s12*s13^3 + 72*s13^4)*
                 s23^2 + 36*s13^3*s23^3) + p1q*p2q^5*(36*s12^2*s13^4 +
                36*s12*s13^5 + (36*s12^2*s13^3 + 144*s12*s13^4 + 72*s13^5)*
                 s23 + (-73*s12^2*s13^2 - 38*s12*s13^3 + 71*s13^4)*s23^2 +
                (-146*s12*s13^2 - 74*s13^3)*s23^3 - 73*s13^2*s23^4) +
              p1q^2*p2q^4*(18*s12^2*s13^4 + 18*s12*s13^5 + (-18*s12^3*s13^2 -
                  63*s12^2*s13^3 + 9*s12*s13^4 + 36*s13^5)*s23 +
                (-(s12^3*s13) - 166*s12^2*s13^2 - 303*s12*s13^3 - 75*s13^4)*
                 s23^2 + (35*s12^2*s13 - 220*s12*s13^2 - 220*s13^3)*s23^3 +
                (74*s12*s13 - 71*s13^2)*s23^4 + 38*s13*s23^5) +
              p1q^4*p2q^2*((18*s12^3*s13 + 45*s12^2*s13^2 + 27*s12*s13^3)*
                 s23^2 + (s12^3 + 76*s12^2*s13 + 124*s12*s13^2 + 40*s13^3)*
                 s23^3 + (s12^2 + 94*s12*s13 + 77*s13^2)*s23^4 +
                (-3*s12 + 34*s13)*s23^5 - 3*s23^6) + p1q^5*p2q*(
                (-s12^2 - 3*s12*s13 - 2*s13^2)*s23^4 + (-3*s12 - 4*s13)*
                 s23^5 - 2*s23^6) + p1q^3*p2q^3*((-18*s12^3*s13^2 -
                  63*s12^2*s13^3 - 45*s12*s13^4)*s23 + (17*s12^3*s13 -
                  48*s12^2*s13^2 - 166*s12*s13^3 - 74*s13^4)*s23^2 +
                (s12^3 + 111*s12^2*s13 + 50*s12*s13^2 - 70*s13^3)*s23^3 +
                (2*s12^2 + 171*s12*s13 + 81*s13^2)*s23^4 + 76*s13*s23^5 -
                s23^6) + p3q^4*(p2q^2*(-18*s12^5*s13 - 18*s12^4*s13^2 +
                  (-36*s12^4*s13 - 18*s12^3*s13^2)*s23 + (-20*s12^3*s13 -
                    2*s12^2*s13^2)*s23^2 - 2*s12^2*s13*s23^3) +
                p1q^2*((-2*s12^3*s13 - 2*s12^2*s13^2)*s23^2 +
                  (-4*s12^3 - 6*s12^2*s13)*s23^3 - 4*s12^2*s23^4) +
                p1q*p2q*((18*s12^4*s13 + 18*s12^3*s13^2)*s23 +
                  (-s12^4 + 30*s12^3*s13 + 13*s12^2*s13^2)*s23^2 +
                  (-5*s12^3 + 9*s12^2*s13)*s23^3 - 4*s12^2*s23^4)) +
              p3q^3*(p2q^3*(-18*s12^5*s13 + 36*s12^4*s13^2 + 54*s12^3*s13^3 +
                  (144*s12^3*s13^2 + 72*s12^2*s13^3)*s23 + (52*s12^3*s13 +
                    110*s12^2*s13^2 + 4*s12*s13^3)*s23^2 + (36*s12^2*s13 +
                    6*s12*s13^2)*s23^3 + 2*s12*s13*s23^4) + p1q*p2q^2*
                 (-18*s12^5*s13 + 18*s12^3*s13^3 + (18*s12^4*s13 + 72*s12^3*
                     s13^2 + 18*s12^2*s13^3)*s23 + (-s12^4 + 65*s12^3*s13 +
                    55*s12^2*s13^2 + 7*s12*s13^3)*s23^2 + (-s12^3 +
                    21*s12^2*s13 - 2*s12*s13^2)*s23^3 + (4*s12^2 - 5*s12*s13)*
                   s23^4 + 4*s12*s23^5) + p1q^3*((-s12^4 - 3*s12^3*s13 -
                    2*s12^2*s13^2)*s23^2 + (-3*s12^3 + 4*s12*s13^2)*s23^3 +
                  (3*s12^2 + 9*s12*s13)*s23^4 + 5*s12*s23^5) + p1q^2*p2q*
                 ((27*s12^4*s13 + 9*s12^3*s13^2 - 18*s12^2*s13^3)*s23 +
                  (-4*s12^4 + 16*s12^3*s13 - 48*s12^2*s13^2 - 23*s12*s13^3)*
                   s23^2 + (-12*s12^3 - 35*s12^2*s13 - 43*s12*s13^2)*s23^3 +
                  (-2*s12^2 - 14*s12*s13)*s23^4 + 6*s12*s23^5)) +
              p3q*(p2q^5*(-54*s12^3*s13^3 - 36*s12^2*s13^4 + 18*s12*s13^5 +
                  (-72*s12^3*s13^2 - 180*s12^2*s13^3 + 36*s13^5)*s23 +
                  (-144*s12^2*s13^2 - 92*s12*s13^3 + 70*s13^4)*s23^2 +
                  (-74*s12*s13^2 + 32*s13^3)*s23^3 - 2*s13^2*s23^4) +
                p1q*p2q^4*(-90*s12^3*s13^3 - 72*s12^2*s13^4 + 18*s12*s13^5 +
                  (-144*s12^3*s13^2 - 414*s12^2*s13^3 - 108*s12*s13^4 +
                    54*s13^5)*s23 + (-72*s12^3*s13 - 483*s12^2*s13^2 -
                    487*s12*s13^3 + 14*s13^4)*s23^2 + (-139*s12^2*s13 -
                    426*s12*s13^2 - 132*s13^3)*s23^3 + (-65*s12*s13 -
                    90*s13^2)*s23^4 + 2*s13*s23^5) + p1q^2*p2q^3*
                 (-36*s12^3*s13^3 - 36*s12^2*s13^4 + (18*s12^4*s13 -
                    36*s12^3*s13^2 - 207*s12^2*s13^3 - 99*s12*s13^4 +
                    18*s13^5)*s23 + (s12^4 - 51*s12^3*s13 - 299*s12^2*s13^2 -
                    396*s12*s13^3 - 86*s13^4)*s23^2 + (7*s12^3 - 85*s12^2*
                     s13 - 257*s12*s13^2 - 165*s13^3)*s23^3 +
                  (13*s12^2 + 47*s12*s13)*s23^4 + (7*s12 + 61*s13)*s23^5) +
                p1q^4*p2q*((9*s12^2*s13^2 + 9*s12*s13^3)*s23^2 +
                  (3*s12^3 + 28*s12^2*s13 + 56*s12*s13^2 + 22*s13^3)*s23^3 +
                  (7*s12^2 + 46*s12*s13 + 39*s13^2)*s23^4 + (-s12 + 12*s13)*
                   s23^5 - 5*s23^6) + p1q^3*p2q^2*((-18*s12^4*s13 -
                    45*s12^3*s13^2 - 36*s12^2*s13^3 - 9*s12*s13^4)*s23 +
                  (-s12^4 - 82*s12^3*s13 - 115*s12^2*s13^2 - 72*s12*s13^3 -
                    38*s13^4)*s23^2 + (4*s12^3 - 25*s12^2*s13 + 43*s12*
                     s13^2 - 3*s13^3)*s23^3 + (15*s12^2 + 113*s12*s13 +
                    105*s13^2)*s23^4 + (7*s12 + 67*s13)*s23^5 - 3*s23^6) +
                p1q^5*((-s12^2 - 3*s12*s13 - 2*s13^2)*s23^4 +
                  (-3*s12 - 4*s13)*s23^5 - 2*s23^6)) + p3q^2*(
                p2q^4*(54*s12^4*s13^2 - 54*s12^2*s13^4 + (36*s12^4*s13 +
                    90*s12^3*s13^2 - 144*s12^2*s13^3 - 90*s12*s13^4)*s23 +
                  (72*s12^3*s13 - 32*s12^2*s13^2 - 160*s12*s13^3 - 2*s13^4)*
                   s23^2 + (38*s12^2*s13 - 68*s12*s13^2 - 4*s13^3)*s23^3 +
                  (2*s12*s13 - 2*s13^2)*s23^4) + p1q*p2q^3*(72*s12^4*s13^2 +
                  36*s12^3*s13^3 - 36*s12^2*s13^4 + (108*s12^4*s13 +
                    252*s12^3*s13^2 - 54*s12^2*s13^3 - 90*s12*s13^4)*s23 +
                  (s12^4 + 162*s12^3*s13 + 64*s12^2*s13^2 - 172*s12*s13^3 -
                    21*s13^4)*s23^2 + (5*s12^3 + 17*s12^2*s13 - 120*s12*
                     s13^2 - 40*s13^3)*s23^3 + (8*s12^2 - 34*s12*s13 -
                    17*s13^2)*s23^4 + (4*s12 + 2*s13)*s23^5) + p1q^2*p2q^2*
                 (18*s12^4*s13^2 + 18*s12^3*s13^3 + (27*s12^4*s13 +
                    27*s12^3*s13^2 - 18*s12^2*s13^3)*s23 + (-3*s12^4 -
                    50*s12^3*s13 - 125*s12^2*s13^2 - 44*s12*s13^3 - 11*s13^4)*
                   s23^2 + (-s12^3 - 131*s12^2*s13 - 80*s12*s13^2 + s13^3)*
                   s23^3 + (15*s12^2 - 23*s12*s13 + 35*s13^2)*s23^4 +
                  (13*s12 + 23*s13)*s23^5) + p1q^4*((2*s12^3 + 6*s12^2*s13 +
                    4*s12*s13^2)*s23^3 + (6*s12^2 + 6*s12*s13 - 2*s13^2)*
                   s23^4 + (2*s12 - 4*s13)*s23^5 - 2*s23^6) + p1q^3*p2q*
                 ((-27*s12^3*s13^2 - 27*s12^2*s13^3)*s23 + (-2*s12^4 -
                    48*s12^3*s13 - 105*s12^2*s13^2 - 32*s12*s13^3)*s23^2 +
                  (-64*s12^2*s13 - 39*s12*s13^2 + 13*s13^3)*s23^3 +
                  (16*s12^2 + 5*s12*s13 + 24*s13^2)*s23^4 + (12*s12 + 9*s13)*
                   s23^5 - 2*s23^6)))*Log(p3q/(p1q + p2q + p3q)))/
            (2*p1q*p3q^5*s12^4*s13*s23^2 + p1q*p2q^5*(-2*s12*s13^4*s23^2 - 2*
                s12*s13^3*s23^3) + p1q^2*p2q^4*(-4*s12*s13^4*s23^2 + 4*s12*
                s13^2*s23^4) + p1q^4*p2q^2*(4*s12*s13^3*s23^3 - 4*s12*s13*
                s23^5) + p1q^5*p2q*(-2*s12*s13^2*s23^4 - 2*s12*s13*s23^5) +
             p1q^3*p2q^3*(-2*s12*s13^4*s23^2 + 6*s12*s13^3*s23^3 + 6*s12*
                s13^2*s23^4 - 2*s12*s13*s23^5) +
             p3q^4*(p1q^2*((2*s12^4*s13 - 2*s12^3*s13^2)*s23^2 - 6*s12^3*s13*
                  s23^3) + p1q*p2q*((4*s12^4*s13 - 6*s12^3*s13^2)*s23^2 -
                 2*s12^3*s13*s23^3)) + p3q^3*(p1q*p2q^2*
                ((2*s12^4*s13 - 12*s12^3*s13^2 + 6*s12^2*s13^3)*s23^2 +
                 (-4*s12^3*s13 + 4*s12^2*s13^2)*s23^3) + p1q^2*p2q*
                ((2*s12^4*s13 - 10*s12^3*s13^2 + 4*s12^2*s13^3)*s23^2 +
                 (-14*s12^3*s13 + 4*s12^2*s13^2)*s23^3 + 4*s12^2*s13*s23^4) +
               p1q^3*(-2*s12^3*s13^2*s23^2 + (-6*s12^3*s13 + 4*s12^2*s13^2)*
                  s23^3 + 6*s12^2*s13*s23^4)) + p3q*(p1q*p2q^4*
                ((6*s12^2*s13^3 - 4*s12*s13^4)*s23^2 + (4*s12^2*s13^2 -
                   4*s12*s13^3)*s23^3) + p1q^2*p2q^3*((10*s12^2*s13^3 -
                   6*s12*s13^4)*s23^2 + (8*s12^2*s13^2 + 2*s12*s13^3)*s23^3 +
                 (4*s12^2*s13 + 8*s12*s13^2)*s23^4) + p1q^4*p2q*
                ((4*s12^2*s13^2 + 4*s12*s13^3)*s23^3 + (6*s12^2*s13 -
                   2*s12*s13^2)*s23^4 - 6*s12*s13*s23^5) + p1q^3*p2q^2*
                ((4*s12^2*s13^3 - 2*s12*s13^4)*s23^2 + (8*s12^2*s13^2 +
                   10*s12*s13^3)*s23^3 + (10*s12^2*s13 + 8*s12*s13^2)*s23^4 -
                 4*s12*s13*s23^5) + p1q^5*(-2*s12*s13^2*s23^4 - 2*s12*s13*
                  s23^5)) + p3q^2*(p1q*p2q^3*((-6*s12^3*s13^2 + 12*s12^2*
                    s13^3 - 2*s12*s13^4)*s23^2 + (-2*s12^3*s13 + 8*s12^2*
                    s13^2 - 2*s12*s13^3)*s23^3) + p1q^2*p2q^2*
                ((-8*s12^3*s13^2 + 14*s12^2*s13^3 - 2*s12*s13^4)*s23^2 +
                 (-8*s12^3*s13 + 12*s12^2*s13^2 + 2*s12*s13^3)*s23^3 +
                 (8*s12^2*s13 + 4*s12*s13^2)*s23^4) + p1q^4*
                (4*s12^2*s13^2*s23^3 + (6*s12^2*s13 - 2*s12*s13^2)*s23^4 -
                 2*s12*s13*s23^5) + p1q^3*p2q*((-2*s12^3*s13^2 + 4*s12^2*
                    s13^3)*s23^2 + (-6*s12^3*s13 + 12*s12^2*s13^2 +
                   4*s12*s13^3)*s23^3 + (16*s12^2*s13 + 2*s12*s13^2)*s23^4 -
                 2*s12*s13*s23^5))) + ((p1q*p3q^5*((s12^4 + s12^3*s13)*
                 s23^2 + s12^3*s23^3) + p2q^6*(18*s12^2*s13^4 +
                18*s12*s13^5 + (36*s12^2*s13^3 + 90*s12*s13^4 + 36*s13^5)*
                 s23 + (72*s12*s13^3 + 72*s13^4)*s23^2 + 36*s13^3*s23^3) +
              p1q*p2q^5*(36*s12^2*s13^4 + 36*s12*s13^5 + (36*s12^2*s13^3 +
                  144*s12*s13^4 + 72*s13^5)*s23 + (-73*s12^2*s13^2 -
                  38*s12*s13^3 + 71*s13^4)*s23^2 + (-146*s12*s13^2 -
                  74*s13^3)*s23^3 - 73*s13^2*s23^4) + p1q^2*p2q^4*(
                18*s12^2*s13^4 + 18*s12*s13^5 + (-18*s12^3*s13^2 -
                  63*s12^2*s13^3 + 9*s12*s13^4 + 36*s13^5)*s23 +
                (-(s12^3*s13) - 166*s12^2*s13^2 - 303*s12*s13^3 - 75*s13^4)*
                 s23^2 + (35*s12^2*s13 - 220*s12*s13^2 - 220*s13^3)*s23^3 +
                (74*s12*s13 - 71*s13^2)*s23^4 + 38*s13*s23^5) +
              p1q^4*p2q^2*((18*s12^3*s13 + 45*s12^2*s13^2 + 27*s12*s13^3)*
                 s23^2 + (s12^3 + 76*s12^2*s13 + 124*s12*s13^2 + 40*s13^3)*
                 s23^3 + (s12^2 + 94*s12*s13 + 77*s13^2)*s23^4 +
                (-3*s12 + 34*s13)*s23^5 - 3*s23^6) + p1q^5*p2q*(
                (-s12^2 - 3*s12*s13 - 2*s13^2)*s23^4 + (-3*s12 - 4*s13)*
                 s23^5 - 2*s23^6) + p1q^3*p2q^3*((-18*s12^3*s13^2 -
                  63*s12^2*s13^3 - 45*s12*s13^4)*s23 + (17*s12^3*s13 -
                  48*s12^2*s13^2 - 166*s12*s13^3 - 74*s13^4)*s23^2 +
                (s12^3 + 111*s12^2*s13 + 50*s12*s13^2 - 70*s13^3)*s23^3 +
                (2*s12^2 + 171*s12*s13 + 81*s13^2)*s23^4 + 76*s13*s23^5 -
                s23^6) + p3q^4*(p2q^2*(-18*s12^5*s13 - 18*s12^4*s13^2 +
                  (-36*s12^4*s13 - 18*s12^3*s13^2)*s23 + (-20*s12^3*s13 -
                    2*s12^2*s13^2)*s23^2 - 2*s12^2*s13*s23^3) +
                p1q^2*((-2*s12^3*s13 - 2*s12^2*s13^2)*s23^2 +
                  (-4*s12^3 - 6*s12^2*s13)*s23^3 - 4*s12^2*s23^4) +
                p1q*p2q*((18*s12^4*s13 + 18*s12^3*s13^2)*s23 +
                  (-s12^4 + 30*s12^3*s13 + 13*s12^2*s13^2)*s23^2 +
                  (-5*s12^3 + 9*s12^2*s13)*s23^3 - 4*s12^2*s23^4)) +
              p3q^3*(p2q^3*(-18*s12^5*s13 + 36*s12^4*s13^2 + 54*s12^3*s13^3 +
                  (144*s12^3*s13^2 + 72*s12^2*s13^3)*s23 + (52*s12^3*s13 +
                    110*s12^2*s13^2 + 4*s12*s13^3)*s23^2 + (36*s12^2*s13 +
                    6*s12*s13^2)*s23^3 + 2*s12*s13*s23^4) + p1q*p2q^2*
                 (-18*s12^5*s13 + 18*s12^3*s13^3 + (18*s12^4*s13 + 72*s12^3*
                     s13^2 + 18*s12^2*s13^3)*s23 + (-s12^4 + 65*s12^3*s13 +
                    55*s12^2*s13^2 + 7*s12*s13^3)*s23^2 + (-s12^3 +
                    21*s12^2*s13 - 2*s12*s13^2)*s23^3 + (4*s12^2 - 5*s12*s13)*
                   s23^4 + 4*s12*s23^5) + p1q^3*((-s12^4 - 3*s12^3*s13 -
                    2*s12^2*s13^2)*s23^2 + (-3*s12^3 + 4*s12*s13^2)*s23^3 +
                  (3*s12^2 + 9*s12*s13)*s23^4 + 5*s12*s23^5) + p1q^2*p2q*
                 ((27*s12^4*s13 + 9*s12^3*s13^2 - 18*s12^2*s13^3)*s23 +
                  (-4*s12^4 + 16*s12^3*s13 - 48*s12^2*s13^2 - 23*s12*s13^3)*
                   s23^2 + (-12*s12^3 - 35*s12^2*s13 - 43*s12*s13^2)*s23^3 +
                  (-2*s12^2 - 14*s12*s13)*s23^4 + 6*s12*s23^5)) +
              p3q*(p2q^5*(-54*s12^3*s13^3 - 36*s12^2*s13^4 + 18*s12*s13^5 +
                  (-72*s12^3*s13^2 - 180*s12^2*s13^3 + 36*s13^5)*s23 +
                  (-144*s12^2*s13^2 - 92*s12*s13^3 + 70*s13^4)*s23^2 +
                  (-74*s12*s13^2 + 32*s13^3)*s23^3 - 2*s13^2*s23^4) +
                p1q*p2q^4*(-90*s12^3*s13^3 - 72*s12^2*s13^4 + 18*s12*s13^5 +
                  (-144*s12^3*s13^2 - 414*s12^2*s13^3 - 108*s12*s13^4 +
                    54*s13^5)*s23 + (-72*s12^3*s13 - 483*s12^2*s13^2 -
                    487*s12*s13^3 + 14*s13^4)*s23^2 + (-139*s12^2*s13 -
                    426*s12*s13^2 - 132*s13^3)*s23^3 + (-65*s12*s13 -
                    90*s13^2)*s23^4 + 2*s13*s23^5) + p1q^2*p2q^3*
                 (-36*s12^3*s13^3 - 36*s12^2*s13^4 + (18*s12^4*s13 -
                    36*s12^3*s13^2 - 207*s12^2*s13^3 - 99*s12*s13^4 +
                    18*s13^5)*s23 + (s12^4 - 51*s12^3*s13 - 299*s12^2*s13^2 -
                    396*s12*s13^3 - 86*s13^4)*s23^2 + (7*s12^3 - 85*s12^2*
                     s13 - 257*s12*s13^2 - 165*s13^3)*s23^3 +
                  (13*s12^2 + 47*s12*s13)*s23^4 + (7*s12 + 61*s13)*s23^5) +
                p1q^4*p2q*((9*s12^2*s13^2 + 9*s12*s13^3)*s23^2 +
                  (3*s12^3 + 28*s12^2*s13 + 56*s12*s13^2 + 22*s13^3)*s23^3 +
                  (7*s12^2 + 46*s12*s13 + 39*s13^2)*s23^4 + (-s12 + 12*s13)*
                   s23^5 - 5*s23^6) + p1q^3*p2q^2*((-18*s12^4*s13 -
                    45*s12^3*s13^2 - 36*s12^2*s13^3 - 9*s12*s13^4)*s23 +
                  (-s12^4 - 82*s12^3*s13 - 115*s12^2*s13^2 - 72*s12*s13^3 -
                    38*s13^4)*s23^2 + (4*s12^3 - 25*s12^2*s13 + 43*s12*
                     s13^2 - 3*s13^3)*s23^3 + (15*s12^2 + 113*s12*s13 +
                    105*s13^2)*s23^4 + (7*s12 + 67*s13)*s23^5 - 3*s23^6) +
                p1q^5*((-s12^2 - 3*s12*s13 - 2*s13^2)*s23^4 +
                  (-3*s12 - 4*s13)*s23^5 - 2*s23^6)) + p3q^2*(
                p2q^4*(54*s12^4*s13^2 - 54*s12^2*s13^4 + (36*s12^4*s13 +
                    90*s12^3*s13^2 - 144*s12^2*s13^3 - 90*s12*s13^4)*s23 +
                  (72*s12^3*s13 - 32*s12^2*s13^2 - 160*s12*s13^3 - 2*s13^4)*
                   s23^2 + (38*s12^2*s13 - 68*s12*s13^2 - 4*s13^3)*s23^3 +
                  (2*s12*s13 - 2*s13^2)*s23^4) + p1q*p2q^3*(72*s12^4*s13^2 +
                  36*s12^3*s13^3 - 36*s12^2*s13^4 + (108*s12^4*s13 +
                    252*s12^3*s13^2 - 54*s12^2*s13^3 - 90*s12*s13^4)*s23 +
                  (s12^4 + 162*s12^3*s13 + 64*s12^2*s13^2 - 172*s12*s13^3 -
                    21*s13^4)*s23^2 + (5*s12^3 + 17*s12^2*s13 - 120*s12*
                     s13^2 - 40*s13^3)*s23^3 + (8*s12^2 - 34*s12*s13 -
                    17*s13^2)*s23^4 + (4*s12 + 2*s13)*s23^5) + p1q^2*p2q^2*
                 (18*s12^4*s13^2 + 18*s12^3*s13^3 + (27*s12^4*s13 +
                    27*s12^3*s13^2 - 18*s12^2*s13^3)*s23 + (-3*s12^4 -
                    50*s12^3*s13 - 125*s12^2*s13^2 - 44*s12*s13^3 - 11*s13^4)*
                   s23^2 + (-s12^3 - 131*s12^2*s13 - 80*s12*s13^2 + s13^3)*
                   s23^3 + (15*s12^2 - 23*s12*s13 + 35*s13^2)*s23^4 +
                  (13*s12 + 23*s13)*s23^5) + p1q^4*((2*s12^3 + 6*s12^2*s13 +
                    4*s12*s13^2)*s23^3 + (6*s12^2 + 6*s12*s13 - 2*s13^2)*
                   s23^4 + (2*s12 - 4*s13)*s23^5 - 2*s23^6) + p1q^3*p2q*
                 ((-27*s12^3*s13^2 - 27*s12^2*s13^3)*s23 + (-2*s12^4 -
                    48*s12^3*s13 - 105*s12^2*s13^2 - 32*s12*s13^3)*s23^2 +
                  (-64*s12^2*s13 - 39*s12*s13^2 + 13*s13^3)*s23^3 +
                  (16*s12^2 + 5*s12*s13 + 24*s13^2)*s23^4 + (12*s12 + 9*s13)*
                   s23^5 - 2*s23^6)))*Log(s12/(s12 + s13 + s23)))/
            (2*p1q*p3q^5*s12^4*s13*s23^2 + p1q*p2q^5*(-2*s12*s13^4*s23^2 - 2*
                s12*s13^3*s23^3) + p1q^2*p2q^4*(-4*s12*s13^4*s23^2 + 4*s12*
                s13^2*s23^4) + p1q^4*p2q^2*(4*s12*s13^3*s23^3 - 4*s12*s13*
                s23^5) + p1q^5*p2q*(-2*s12*s13^2*s23^4 - 2*s12*s13*s23^5) +
             p1q^3*p2q^3*(-2*s12*s13^4*s23^2 + 6*s12*s13^3*s23^3 + 6*s12*
                s13^2*s23^4 - 2*s12*s13*s23^5) +
             p3q^4*(p1q^2*((2*s12^4*s13 - 2*s12^3*s13^2)*s23^2 - 6*s12^3*s13*
                  s23^3) + p1q*p2q*((4*s12^4*s13 - 6*s12^3*s13^2)*s23^2 -
                 2*s12^3*s13*s23^3)) + p3q^3*(p1q*p2q^2*
                ((2*s12^4*s13 - 12*s12^3*s13^2 + 6*s12^2*s13^3)*s23^2 +
                 (-4*s12^3*s13 + 4*s12^2*s13^2)*s23^3) + p1q^2*p2q*
                ((2*s12^4*s13 - 10*s12^3*s13^2 + 4*s12^2*s13^3)*s23^2 +
                 (-14*s12^3*s13 + 4*s12^2*s13^2)*s23^3 + 4*s12^2*s13*s23^4) +
               p1q^3*(-2*s12^3*s13^2*s23^2 + (-6*s12^3*s13 + 4*s12^2*s13^2)*
                  s23^3 + 6*s12^2*s13*s23^4)) + p3q*(p1q*p2q^4*
                ((6*s12^2*s13^3 - 4*s12*s13^4)*s23^2 + (4*s12^2*s13^2 -
                   4*s12*s13^3)*s23^3) + p1q^2*p2q^3*((10*s12^2*s13^3 -
                   6*s12*s13^4)*s23^2 + (8*s12^2*s13^2 + 2*s12*s13^3)*s23^3 +
                 (4*s12^2*s13 + 8*s12*s13^2)*s23^4) + p1q^4*p2q*
                ((4*s12^2*s13^2 + 4*s12*s13^3)*s23^3 + (6*s12^2*s13 -
                   2*s12*s13^2)*s23^4 - 6*s12*s13*s23^5) + p1q^3*p2q^2*
                ((4*s12^2*s13^3 - 2*s12*s13^4)*s23^2 + (8*s12^2*s13^2 +
                   10*s12*s13^3)*s23^3 + (10*s12^2*s13 + 8*s12*s13^2)*s23^4 -
                 4*s12*s13*s23^5) + p1q^5*(-2*s12*s13^2*s23^4 - 2*s12*s13*
                  s23^5)) + p3q^2*(p1q*p2q^3*((-6*s12^3*s13^2 + 12*s12^2*
                    s13^3 - 2*s12*s13^4)*s23^2 + (-2*s12^3*s13 + 8*s12^2*
                    s13^2 - 2*s12*s13^3)*s23^3) + p1q^2*p2q^2*
                ((-8*s12^3*s13^2 + 14*s12^2*s13^3 - 2*s12*s13^4)*s23^2 +
                 (-8*s12^3*s13 + 12*s12^2*s13^2 + 2*s12*s13^3)*s23^3 +
                 (8*s12^2*s13 + 4*s12*s13^2)*s23^4) + p1q^4*
                (4*s12^2*s13^2*s23^3 + (6*s12^2*s13 - 2*s12*s13^2)*s23^4 -
                 2*s12*s13*s23^5) + p1q^3*p2q*((-2*s12^3*s13^2 + 4*s12^2*
                    s13^3)*s23^2 + (-6*s12^3*s13 + 12*s12^2*s13^2 +
                   4*s12*s13^3)*s23^3 + (16*s12^2*s13 + 2*s12*s13^2)*s23^4 -
                 2*s12*s13*s23^5))) + ((p1q^2*p2q^3*(s12^3*s13 +
                4*s12^2*s13^2 - 3*s13^4 + (s12^2*s13 - 6*s13^3)*s23 -
                3*s13^2*s23^2) + p1q*p2q^4*(s12^2*s13^2 - s12*s13^3 -
                2*s13^4 + (-(s12*s13^2) - 4*s13^3)*s23 - 2*s13^2*s23^2) +
              p1q^5*((s12^2 + 2*s12*s13 + s13^2)*s23^2 + (2*s12 + 2*s13)*
                 s23^3 + s23^4) + p1q^3*p2q^2*(3*s12^3*s13 + 7*s12^2*s13^2 +
                3*s12*s13^3 - s13^4 + (s12^3 + 7*s12^2*s13 + 6*s12*s13^2 -
                  2*s13^3)*s23 + (4*s12^2 + 8*s12*s13 + s13^2)*s23^2 +
                (5*s12 + 4*s13)*s23^3 + 2*s23^4) + p1q^4*p2q*(2*s12^3*s13 +
                4*s12^2*s13^2 + 2*s12*s13^3 + (s12^3 + 6*s12^2*s13 +
                  5*s12*s13^2)*s23 + (5*s12^2 + 10*s12*s13 + 3*s13^2)*s23^2 +
                (7*s12 + 6*s13)*s23^3 + 3*s23^4) + p3q^3*(p2q^2*
                 (2*s12^3*s13 + 2*s12^2*s13^2 + 2*s12^2*s13*s23) +
                p1q^2*(s12^4 + 2*s12^3*s13 + s12^2*s13^2 + (2*s12^3 +
                    2*s12^2*s13)*s23 + s12^2*s23^2) + p1q*p2q*(s12^4 +
                  3*s12^3*s13 + 2*s12^2*s13^2 + (2*s12^3 + 3*s12^2*s13)*s23 +
                  s12^2*s23^2)) + p3q^2*(p2q^3*(-4*s12^2*s13^2 -
                  4*s12*s13^3 + (-2*s12^2*s13 - 6*s12*s13^2)*s23 -
                  2*s12*s13*s23^2) + p1q^2*p2q*(s12^3*s13 - s12^2*s13^2 -
                  2*s12*s13^3 + (-4*s12^3 - 8*s12^2*s13 - 7*s12*s13^2)*s23 +
                  (-8*s12^2 - 9*s12*s13)*s23^2 - 4*s12*s23^3) + p1q*p2q^2*
                 (-s12^4 - s12^3*s13 - 4*s12^2*s13^2 - 4*s12*s13^3 +
                  (-4*s12^3 - 10*s12^2*s13 - 11*s12*s13^2)*s23 +
                  (-5*s12^2 - 9*s12*s13)*s23^2 - 2*s12*s23^3) +
                p1q^3*(s12^4 + 2*s12^3*s13 + s12^2*s13^2 + (-2*s12^2*s13 -
                    2*s12*s13^2)*s23 + (-3*s12^2 - 4*s12*s13)*s23^2 -
                  2*s12*s23^3)) + p3q*(p2q^4*(2*s12*s13^3 + 2*s13^4 +
                  (2*s12*s13^2 + 4*s13^3)*s23 + 2*s13^2*s23^2) +
                p1q*p2q^3*(s12^2*s13^2 + 3*s12*s13^3 + 2*s13^4 +
                  (-3*s12^2*s13 + 4*s13^3)*s23 + (-3*s12*s13 + 2*s13^2)*
                   s23^2) + p1q^4*((-2*s12^3 - 4*s12^2*s13 - 2*s12*s13^2)*
                   s23 + (-3*s12^2 - 2*s12*s13 + s13^2)*s23^2 + 2*s13*s23^3 +
                  s23^4) + p1q^2*p2q^2*(-s12^4 + 2*s12^2*s13^2 +
                  2*s12*s13^3 + s13^4 + (-3*s12^3 - 4*s12^2*s13 + 3*s13^3)*
                   s23 + (-s12^2 + s12*s13 + 5*s13^2)*s23^2 + (3*s12 + 5*s13)*
                   s23^3 + 2*s23^4) + p1q^3*p2q*(-s12^4 + s12^2*s13^2 +
                  (-5*s12^3 - 5*s12^2*s13 - 2*s12*s13^2)*s23 +
                  (-4*s12^2 + s12*s13 + 3*s13^2)*s23^2 + (3*s12 + 6*s13)*
                   s23^3 + 3*s23^4)))*Log(s13/(s12 + s13 + s23)))/
            (2*p1q*p3q^4*s12^4*s13 + p1q*p2q^4*(-2*s12*s13^4 - 2*s12*s13^3*
                s23) + p1q^2*p2q^3*(-4*s12*s13^4 + 4*s12*s13^2*s23^2) +
             p1q^4*p2q*(4*s12*s13^3*s23 - 4*s12*s13*s23^3) +
             p1q^5*(-2*s12*s13^2*s23^2 - 2*s12*s13*s23^3) +
             p1q^3*p2q^2*(-2*s12*s13^4 + 6*s12*s13^3*s23 + 6*s12*s13^2*
                s23^2 - 2*s12*s13*s23^3) + p3q^3*(p1q^2*(2*s12^4*s13 -
                 2*s12^3*s13^2 - 6*s12^3*s13*s23) + p1q*p2q*(2*s12^4*s13 -
                 6*s12^3*s13^2 - 2*s12^3*s13*s23)) +
             p3q^2*(p1q*p2q^2*(-6*s12^3*s13^2 + 6*s12^2*s13^3 +
                 (-2*s12^3*s13 + 4*s12^2*s13^2)*s23) + p1q^2*p2q*
                (-8*s12^3*s13^2 + 4*s12^2*s13^3 + (-8*s12^3*s13 + 4*s12^2*
                    s13^2)*s23 + 4*s12^2*s13*s23^2) + p1q^3*(-2*s12^3*s13^2 +
                 (-6*s12^3*s13 + 4*s12^2*s13^2)*s23 + 6*s12^2*s13*s23^2)) +
             p3q*(p1q*p2q^3*(6*s12^2*s13^3 - 2*s12*s13^4 + (4*s12^2*s13^2 -
                   2*s12*s13^3)*s23) + p1q^2*p2q^2*(10*s12^2*s13^3 -
                 2*s12*s13^4 + (8*s12^2*s13^2 + 2*s12*s13^3)*s23 +
                 (4*s12^2*s13 + 4*s12*s13^2)*s23^2) + p1q^4*
                (4*s12^2*s13^2*s23 + (6*s12^2*s13 - 2*s12*s13^2)*s23^2 -
                 2*s12*s13*s23^3) + p1q^3*p2q*(4*s12^2*s13^3 +
                 (8*s12^2*s13^2 + 4*s12*s13^3)*s23 + (10*s12^2*s13 +
                   2*s12*s13^2)*s23^2 - 2*s12*s13*s23^3))) +
           ((p2q^6*(-18*s12^2*s13^2 - 36*s12*s13^3 - 18*s13^4 +
                (-36*s12*s13^2 - 36*s13^3)*s23 - 18*s13^2*s23^2) +
              p1q*p2q^5*(-27*s12*s13^3 - 27*s13^4 + (72*s12^2*s13 +
                  117*s12*s13^2 + 18*s13^3)*s23 + (144*s12*s13 + 117*s13^2)*
                 s23^2 + 72*s13*s23^3) + p1q^3*p2q^3*(-18*s12^3*s13 -
                18*s12^2*s13^2 + (-54*s12^3 - 117*s12^2*s13 - 9*s12*s13^2 +
                  36*s13^3)*s23 + (-189*s12^2 - 225*s12*s13 - 9*s13^2)*
                 s23^2 + (-216*s12 - 126*s13)*s23^3 - 81*s23^4) +
              p1q^2*p2q^4*(-18*s12^3*s13 + 9*s12*s13^3 - 9*s13^4 +
                (-36*s12^3 - 9*s12^2*s13 + 162*s12*s13^2 + 90*s13^3)*s23 +
                (-126*s12^2 + 9*s12*s13 + 153*s13^2)*s23^2 - 144*s12*s23^3 -
                54*s23^4) + p1q^4*p2q^2*((-18*s12^3 - 36*s12^2*s13 -
                  18*s12*s13^2)*s23 + (-63*s12^2 - 90*s12*s13 - 27*s13^2)*
                 s23^2 + (-72*s12 - 54*s13)*s23^3 - 27*s23^4) +
              p3q^4*(p2q^2*(-18*s12^4 - 18*s12^3*s13 + (-36*s12^3 -
                    18*s12^2*s13)*s23 - 18*s12^2*s23^2) + p1q*p2q*
                 (-9*s12^4 - 9*s12^3*s13 + (-18*s12^3 - 9*s12^2*s13)*s23 -
                  9*s12^2*s23^2)) + p3q^3*(p1q^2*p2q*(-18*s12^4 -
                  9*s12^3*s13 + 9*s12^2*s13^2 + (-27*s12^3 + 18*s12^2*s13 +
                    18*s12*s13^2)*s23 + 27*s12*s13*s23^2 + 9*s12*s23^3) +
                p2q^3*(-18*s12^4 + 18*s12^3*s13 + 36*s12^2*s13^2 +
                  (-18*s12^3 + 72*s12^2*s13 + 36*s12*s13^2)*s23 +
                  (18*s12^2 + 54*s12*s13)*s23^2 + 18*s12*s23^3) +
                p1q*p2q^2*(-27*s12^4 + 27*s12^2*s13^2 + (-9*s12^3 +
                    81*s12^2*s13 + 36*s12*s13^2)*s23 + (63*s12^2 +
                    81*s12*s13)*s23^2 + 45*s12*s23^3)) +
              p3q^2*(p1q^3*p2q*(18*s12^3*s13 + 18*s12^2*s13^2 +
                  (27*s12^3 + 81*s12^2*s13 + 36*s12*s13^2)*s23 +
                  (54*s12^2 + 63*s12*s13)*s23^2 + 27*s12*s23^3) +
                p2q^4*(-18*s12^4 - 18*s12*s13^3 + (-36*s12^3 - 36*s12*s13^2 -
                    18*s13^3)*s23 + (-18*s12^2 - 18*s12*s13 - 36*s13^2)*
                   s23^2 - 18*s13*s23^3) + p1q^2*p2q^2*(18*s12^4 +
                  63*s12^3*s13 + 27*s12^2*s13^2 - 18*s12*s13^3 +
                  (126*s12^3 + 189*s12^2*s13 - 18*s13^3)*s23 +
                  (171*s12^2 + 54*s12*s13 - 63*s13^2)*s23^2 +
                  (36*s12 - 72*s13)*s23^3 - 27*s23^4) + p1q*p2q^3*
                 (27*s12^3*s13 - 27*s12*s13^3 + (81*s12^3 + 108*s12^2*s13 -
                    54*s12*s13^2 - 27*s13^3)*s23 + (144*s12^2 + 18*s12*s13 -
                    72*s13^2)*s23^2 + (45*s12 - 63*s13)*s23^3 - 18*s23^4)) +
              p3q*(p2q^5*(36*s12^3*s13 + 54*s12^2*s13^2 + 18*s12*s13^3 +
                  (72*s12^2*s13 + 54*s12*s13^2)*s23 + 36*s12*s13*s23^2) +
                p1q^2*p2q^3*(18*s12^4 - 18*s12^3*s13 - 54*s12^2*s13^2 -
                  9*s12*s13^3 + 9*s13^4 + (45*s12^3 - 72*s12^2*s13 -
                    36*s12*s13^2 + 54*s13^3)*s23 + (-63*s12^2 - 216*s12*s13 -
                    18*s13^2)*s23^2 + (-189*s12 - 162*s13)*s23^3 -
                  99*s23^4) + p1q^3*p2q^2*(18*s12^4 + 18*s12^3*s13 -
                  18*s12^2*s13^2 - 18*s12*s13^3 + (45*s12^3 - 45*s12*s13^2)*
                   s23 + (-27*s12^2 - 144*s12*s13 - 63*s13^2)*s23^2 +
                  (-117*s12 - 126*s13)*s23^3 - 63*s23^4) + p1q*p2q^4*
                 (27*s12^2*s13^2 + 36*s12*s13^3 + 9*s13^4 + (18*s12^2*s13 +
                    99*s12*s13^2 + 63*s13^3)*s23 + (-36*s12^2 - 9*s12*s13 +
                    63*s13^2)*s23^2 + (-72*s12 - 27*s13)*s23^3 - 36*s23^4) +
                p1q^4*p2q*((-9*s12^2 - 18*s12*s13 - 9*s13^2)*s23^2 +
                  (-18*s12 - 18*s13)*s23^3 - 9*s23^4)))*
             Log(s23/(s12 + s13 + s23)))/(2*p1q*p3q^5*s12^4*s23 +
             p1q*p2q^5*(-2*s12*s13^3*s23 - 2*s12*s13^2*s23^2) +
             p1q^2*p2q^4*(-4*s12*s13^3*s23 + 4*s12*s13*s23^3) +
             p1q^4*p2q^2*(4*s12*s13^2*s23^2 - 4*s12*s23^4) +
             p1q^5*p2q*(-2*s12*s13*s23^3 - 2*s12*s23^4) + p1q^3*p2q^3*
              (-2*s12*s13^3*s23 + 6*s12*s13^2*s23^2 + 6*s12*s13*s23^3 - 2*s12*
                s23^4) + p3q^4*(p1q^2*((2*s12^4 - 2*s12^3*s13)*s23 -
                 6*s12^3*s23^2) + p1q*p2q*((4*s12^4 - 6*s12^3*s13)*s23 -
                 2*s12^3*s23^2)) + p3q^3*(p1q*p2q^2*((2*s12^4 - 12*s12^3*
                    s13 + 6*s12^2*s13^2)*s23 + (-4*s12^3 + 4*s12^2*s13)*
                  s23^2) + p1q^2*p2q*((2*s12^4 - 10*s12^3*s13 + 4*s12^2*
                    s13^2)*s23 + (-14*s12^3 + 4*s12^2*s13)*s23^2 +
                 4*s12^2*s23^3) + p1q^3*(-2*s12^3*s13*s23 +
                 (-6*s12^3 + 4*s12^2*s13)*s23^2 + 6*s12^2*s23^3)) +
             p3q*(p1q*p2q^4*((6*s12^2*s13^2 - 4*s12*s13^3)*s23 +
                 (4*s12^2*s13 - 4*s12*s13^2)*s23^2) + p1q^2*p2q^3*
                ((10*s12^2*s13^2 - 6*s12*s13^3)*s23 + (8*s12^2*s13 +
                   2*s12*s13^2)*s23^2 + (4*s12^2 + 8*s12*s13)*s23^3) + p1q^4*
                p2q*((4*s12^2*s13 + 4*s12*s13^2)*s23^2 + (6*s12^2 -
                   2*s12*s13)*s23^3 - 6*s12*s23^4) + p1q^3*p2q^2*
                ((4*s12^2*s13^2 - 2*s12*s13^3)*s23 + (8*s12^2*s13 +
                   10*s12*s13^2)*s23^2 + (10*s12^2 + 8*s12*s13)*s23^3 -
                 4*s12*s23^4) + p1q^5*(-2*s12*s13*s23^3 - 2*s12*s23^4)) +
             p3q^2*(p1q*p2q^3*((-6*s12^3*s13 + 12*s12^2*s13^2 - 2*s12*s13^3)*
                  s23 + (-2*s12^3 + 8*s12^2*s13 - 2*s12*s13^2)*s23^2) + p1q^2*
                p2q^2*((-8*s12^3*s13 + 14*s12^2*s13^2 - 2*s12*s13^3)*s23 +
                 (-8*s12^3 + 12*s12^2*s13 + 2*s12*s13^2)*s23^2 +
                 (8*s12^2 + 4*s12*s13)*s23^3) + p1q^4*(4*s12^2*s13*s23^2 +
                 (6*s12^2 - 2*s12*s13)*s23^3 - 2*s12*s23^4) + p1q^3*p2q*
                ((-2*s12^3*s13 + 4*s12^2*s13^2)*s23 + (-6*s12^3 + 12*s12^2*
                    s13 + 4*s12*s13^2)*s23^2 + (16*s12^2 + 2*s12*s13)*s23^3 -
                 2*s12*s23^4))) + ((p2q^5*(18*s12^2*s13^3 + 18*s12*s13^4 +
                (36*s12*s13^3 + 18*s13^4)*s23 + 18*s13^3*s23^2) +
              p1q*p3q^4*((-s12^3 - s12^2*s13)*s23^2 - s12^2*s23^3) +
              p1q*p2q^4*(18*s12^2*s13^3 + 18*s12*s13^4 + (45*s12*s13^3 +
                  27*s13^4)*s23 + (-3*s12*s13^2 + 24*s13^3)*s23^2 -
                3*s13^2*s23^3) + p1q^2*p2q^3*((-36*s12^3*s13 - 81*s12^2*
                   s13^2 - 45*s12*s13^3)*s23 + (-90*s12^2*s13 - 138*s12*
                   s13^2 - 39*s13^3)*s23^2 + (-70*s12*s13 - 55*s13^2)*s23^3 -
                16*s13*s23^4) + p1q^4*p2q*((-s12 - s13)*s23^4 - s23^5) +
              p1q^3*p2q^2*((2*s12^3 + 13*s12^2*s13 + 11*s12*s13^2)*s23^2 +
                (6*s12^2 + 28*s12*s13 + 13*s13^2)*s23^3 + (5*s12 + 14*s13)*
                 s23^4 + s23^5) + p3q^3*(p2q^2*(18*s12^4*s13 + 18*s12^3*
                   s13^2 + (54*s12^3*s13 + 36*s12^2*s13^2)*s23 +
                  (54*s12^2*s13 + 18*s12*s13^2)*s23^2 + 18*s12*s13*s23^3) +
                p1q*p2q*((-9*s12^3*s13 - 9*s12^2*s13^2)*s23 +
                  (-16*s12^2*s13 - 7*s12*s13^2)*s23^2 + (2*s12^2 - 5*s12*s13)*
                   s23^3 + 2*s12*s23^4) + p1q^2*((-s12^3 - s12^2*s13)*s23^2 +
                  (s12^2 + 2*s12*s13)*s23^3 + 2*s12*s23^4)) +
              p3q*(p2q^4*(-36*s12^3*s13^2 - 18*s12^2*s13^3 + 18*s12*s13^4 +
                  (-72*s12^2*s13^2 + 18*s12*s13^3 + 36*s13^4)*s23 +
                  (-36*s12*s13^2 + 36*s13^3)*s23^2) + p1q*p2q^3*
                 (-36*s12^3*s13^2 - 36*s12^2*s13^3 + (-72*s12^3*s13 -
                    216*s12^2*s13^2 - 81*s12*s13^3 + 27*s13^4)*s23 +
                  (-178*s12^2*s13 - 263*s12*s13^2 - 22*s13^3)*s23^2 +
                  (-140*s12*s13 - 83*s13^2)*s23^3 - 34*s13*s23^4) +
                p1q^3*p2q*((2*s12^3 + 13*s12^2*s13 + 11*s12*s13^2)*s23^2 +
                  (8*s12^2 + 30*s12*s13 + 13*s13^2)*s23^3 + (6*s12 + 13*s13)*
                   s23^4) + p1q^4*((-s12 - s13)*s23^4 - s23^5) +
                p1q^2*p2q^2*((-27*s12^3*s13 - 54*s12^2*s13^2 - 27*s12*s13^3)*
                   s23 + (4*s12^3 - 55*s12^2*s13 - 98*s12*s13^2 - 39*s13^3)*
                   s23^2 + (12*s12^2 - 27*s12*s13 - 42*s13^2)*s23^3 +
                  (10*s12 - s13)*s23^4 + 2*s23^5)) + p3q^2*(p2q^3*
                 (18*s12^4*s13 - 18*s12^3*s13^2 - 36*s12^2*s13^3 +
                  (36*s12^3*s13 - 90*s12^2*s13^2 - 72*s12*s13^3)*s23 +
                  (18*s12^2*s13 - 90*s12*s13^2 - 18*s13^3)*s23^2 -
                  18*s13^2*s23^3) + p1q*p2q^2*(18*s12^4*s13 + 18*s12^3*
                   s13^2 + (27*s12^3*s13 - 9*s12^2*s13^2 - 18*s12*s13^3)*
                   s23 + (s12^3 - 13*s12^2*s13 - 69*s12*s13^2 - 28*s13^3)*
                   s23^2 + (3*s12^2 - 37*s12*s13 - 44*s13^2)*s23^3 +
                  (2*s12 - 16*s13)*s23^4) + p1q^3*((2*s12^2 + 2*s12*s13)*
                   s23^3 + (s12 - s13)*s23^4 - s23^5) + p1q^2*p2q*
                 ((-9*s12^3*s13 - 9*s12^2*s13^2)*s23 + (3*s12^3 - 2*s12^2*
                     s13 + 4*s12*s13^2)*s23^2 + (13*s12^2 + 27*s12*s13 +
                    13*s13^2)*s23^3 + (12*s12 + 15*s13)*s23^4 + 2*s23^5)))*
             Log((s13 + s23)/(s12 + s13 + s23)))/(2*p1q*p3q^4*s12^3*s13*
              s23^2 + 2*p1q*p2q^4*s12*s13^3*s23^2 + 2*p1q^4*p2q*s12*s13*
              s23^4 + p1q^2*p2q^3*(2*s12*s13^3*s23^2 - 4*s12*s13^2*s23^3) +
             p1q^3*p2q^2*(-4*s12*s13^2*s23^3 + 2*s12*s13*s23^4) +
             p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*s23^2 + p1q^2*
                (2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
             p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*
                s23^2 + p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
                 (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) + p1q^3*
                (-4*s12^2*s13*s23^3 + 2*s12*s13*s23^4)) +
             p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 + 2*p1q^4*
                s12*s13*s23^4 + p1q^2*p2q^2*((-4*s12^2*s13^2 + 2*s12*s13^3)*
                  s23^2 + (-4*s12^2*s13 - 8*s12*s13^2)*s23^3) + p1q^3*p2q*
                ((-4*s12^2*s13 - 4*s12*s13^2)*s23^3 + 4*s12*s13*s23^4)))) +
         Log(s12/(s12 + s13 + s23))*
          ((p2q^2*(-135*s12^3*s13^2 - 270*s12^2*s13^3 - 135*s12*s13^4 +
               (-90*s12^3*s13 - 450*s12^2*s13^2 - 360*s12*s13^3)*s23 +
               (-180*s12^2*s13 - 315*s12*s13^2)*s23^2 - 90*s12*s13*s23^3) +
             p1q^2*((135*s12^3*s13 + 270*s12^2*s13^2 + 135*s12*s13^3)*s23 +
               (90*s12^3 + 450*s12^2*s13 + 360*s12*s13^2)*s23^2 +
               (180*s12^2 + 315*s12*s13)*s23^3 + 90*s12*s23^4) +
             p3q^2*((135*s12^3*s13 + 270*s12^2*s13^2 + 135*s12*s13^3)*s23 +
               (90*s12^3 + 450*s12^2*s13 + 360*s12*s13^2)*s23^2 +
               (180*s12^2 + 315*s12*s13)*s23^3 + 90*s12*s23^4) +
             p1q*p2q*(135*s12^3*s13^2 - 63*s12^2*s13^3 - 198*s12*s13^4 +
               (-30*s12^3*s13 - 48*s12^2*s13^2 - 369*s12*s13^3 - 18*s13^4)*
                s23 + (-80*s12^3 - 350*s12^2*s13 - 429*s12*s13^2 - 54*s13^3)*
                s23^2 + (-240*s12^2 - 538*s12*s13 - 174*s13^2)*s23^3 +
               (-240*s12 - 218*s13)*s23^4 - 80*s23^5) +
             p3q*(p2q*(135*s12^4*s13 + 270*s12^3*s13^2 - 63*s12^2*s13^3 -
                 198*s12*s13^4 + (90*s12^4 + 585*s12^3*s13 + 342*s12^2*
                    s13^2 - 351*s12*s13^3)*s23 + (270*s12^3 + 675*s12^2*s13 -
                   18*s12*s13^2)*s23^2 + (270*s12^2 + 225*s12*s13)*s23^3 +
                 90*s12*s23^4) + p1q*(-135*s12^4*s13 - 135*s12^3*s13^2 +
                 (-90*s12^4 - 345*s12^3*s13 + 150*s12^2*s13^2 + 252*s12*
                    s13^3 - 18*s13^4)*s23 + (-170*s12^3 - 125*s12^2*s13 +
                   309*s12*s13^2 - 54*s13^3)*s23^2 + (-150*s12^2 -
                   133*s12*s13 - 174*s13^2)*s23^3 + (-150*s12 - 218*s13)*
                  s23^4 - 80*s23^5)))/(p1q*p2q*(18*s12*s13^4*s23 + 36*s12*
                s13^3*s23^2 + 18*s12*s13^2*s23^3) + p1q*p3q*(18*s12*s13^4*
                s23 + 36*s12*s13^3*s23^2 + 18*s12*s13^2*s23^3)) +
           ((p3q^3*(-3*s12^4 - 3*s12^3*s13 - 3*s12^3*s23) +
              p2q^3*(-(s12^2*s13^2) + 3*s12*s13^3 + 4*s13^4 +
                (3*s12*s13^2 + 8*s13^3)*s23 + 4*s13^2*s23^2) +
              p1q*p2q^2*(-(s12^3*s13) - 4*s12^2*s13^2 + 3*s13^4 +
                (-2*s12^2*s13 - 7*s12*s13^2)*s23 + (-7*s12*s13 - 9*s13^2)*
                 s23^2 - 6*s13*s23^3) + p1q^2*p2q*(-2*s12^3*s13 -
                4*s12^2*s13^2 - 2*s12*s13^3 + (-s12^3 - 5*s12^2*s13 -
                  9*s12*s13^2 - 5*s13^3)*s23 + (-3*s12^2 - 7*s12*s13 -
                  8*s13^2)*s23^2 - s13*s23^3 + 2*s23^4) +
              p1q^3*((-s12^2 + s12*s13 + 2*s13^2)*s23^2 + (s12 + 4*s13)*
                 s23^3 + 2*s23^4) + p3q^2*(p2q*(s12^4 + 9*s12^3*s13 +
                  8*s12^2*s13^2 + (5*s12^3 + 12*s12^2*s13)*s23 + 4*s12^2*
                   s23^2) + p1q*(-s12^4 + s12^3*s13 + 2*s12^2*s13^2 +
                  (7*s12^3 + 10*s12^2*s13)*s23 + 8*s12^2*s23^2)) +
              p3q*(p2q^2*(-9*s12^2*s13^2 - 9*s12*s13^3 + (-4*s12^2*s13 -
                    13*s12*s13^2)*s23 - 4*s12*s13*s23^2) + p1q^2*
                 ((2*s12^3 - 2*s12^2*s13 - 4*s12*s13^2)*s23 +
                  (-5*s12^2 - 11*s12*s13)*s23^2 - 7*s12*s23^3) +
                p1q*p2q*(s12^4 + s12^3*s13 - 5*s12^2*s13^2 - 5*s12*s13^3 +
                  (2*s12^3 - 4*s12^2*s13 - 10*s12*s13^2)*s23 +
                  (-5*s12^2 - 11*s12*s13)*s23^2 - 6*s12*s23^3)))*
             Log(s13/(s12 + s13 + s23)))/(2*p3q^3*s12^4*s13 +
             p2q^3*(-2*s12*s13^4 - 2*s12*s13^3*s23) + p1q*p2q^2*
              (-2*s12*s13^4 + 2*s12*s13^3*s23 + 4*s12*s13^2*s23^2) +
             p1q^3*(-2*s12*s13^2*s23^2 - 2*s12*s13*s23^3) +
             p1q^2*p2q*(4*s12*s13^3*s23 + 2*s12*s13^2*s23^2 - 2*s12*s13*
                s23^3) + p3q^2*(p1q*(-2*s12^3*s13^2 - 6*s12^3*s13*s23) + p2q*
                (-6*s12^3*s13^2 - 2*s12^3*s13*s23)) +
             p3q*(p2q^2*(6*s12^2*s13^3 + 4*s12^2*s13^2*s23) + p1q*p2q*
                (4*s12^2*s13^3 + 4*s12^2*s13^2*s23 + 4*s12^2*s13*s23^2) +
               p1q^2*(4*s12^2*s13^2*s23 + 6*s12^2*s13*s23^2))) +
           ((p3q^6*((90*s12^7 + 270*s12^6*s13 + 270*s12^5*s13^2 +
                  90*s12^4*s13^3)*s23^2 + (180*s12^6 + 360*s12^5*s13 +
                  180*s12^4*s13^2)*s23^3 + (90*s12^5 + 90*s12^4*s13)*s23^4) +
              p2q^6*(-324*s12^3*s13^6 - 648*s12^2*s13^7 - 324*s12*s13^8 +
                (90*s12^4*s13^4 + 108*s12^3*s13^5 - 360*s12^2*s13^6 -
                  522*s12*s13^7 - 144*s13^8)*s23 + (90*s12^4*s13^3 +
                  450*s12^3*s13^4 + 486*s12^2*s13^5 - 288*s13^7)*s23^2 +
                (180*s12^3*s13^3 + 450*s12^2*s13^4 + 288*s12*s13^5 -
                  144*s13^6)*s23^3 + (90*s12^2*s13^3 + 90*s12*s13^4)*s23^4) +
              p1q*p2q^5*(-324*s12^3*s13^6 - 648*s12^2*s13^7 - 324*s12*s13^8 +
                (495*s12^3*s13^5 + 1170*s12^2*s13^6 + 531*s12*s13^7 -
                  144*s13^8)*s23 + (-100*s12^4*s13^3 - 47*s12^3*s13^4 +
                  753*s12^2*s13^5 + 1319*s12*s13^6 - 29*s13^7)*s23^2 +
                (-100*s12^4*s13^2 - 500*s12^3*s13^3 - 827*s12^2*s13^4 -
                  116*s12*s13^5 + 374*s13^6)*s23^3 + (-120*s12^3*s13^2 -
                  350*s12^2*s13^3 - 530*s12*s13^4 + 339*s13^5)*s23^4 +
                (60*s12^2*s13^2 + 130*s12*s13^3 + 160*s13^4)*s23^5 +
                (80*s12*s13^2 + 80*s13^3)*s23^6) + p1q^2*p2q^4*(
                (72*s12^4*s13^4 + 873*s12^3*s13^5 + 2016*s12^2*s13^6 +
                  1215*s12*s13^7)*s23 + (224*s12^4*s13^3 + 412*s12^3*s13^4 -
                  138*s12^2*s13^5 + 500*s12*s13^6 + 340*s13^7)*s23^2 +
                (-80*s12^4*s13^2 - 126*s12^3*s13^3 - 1099*s12^2*s13^4 -
                  1816*s12*s13^5 + 524*s13^6)*s23^3 + (-70*s12^4*s13 -
                  370*s12^3*s13^2 - 348*s12^2*s13^3 - 879*s12*s13^4 +
                  108*s13^5)*s23^4 + (-300*s12^3*s13 - 740*s12^2*s13^2 -
                  308*s12*s13^3 - 236*s13^4)*s23^5 + (-390*s12^2*s13 -
                  690*s12*s13^2 - 400*s13^3)*s23^6 + (-160*s12*s13 -
                  240*s13^2)*s23^7) + p1q^6*((90*s12^3*s13 + 180*s12^2*
                   s13^2 + 90*s12*s13^3)*s23^5 + (90*s12^3 + 360*s12^2*s13 +
                  270*s12*s13^2)*s23^6 + (180*s12^2 + 270*s12*s13)*s23^7 +
                90*s12*s23^8) + p1q^3*p2q^3*((252*s12^4*s13^3 - 144*s12^3*
                   s13^4 - 2106*s12^2*s13^5 - 1710*s12*s13^6)*s23^2 +
                (110*s12^4*s13^2 + 338*s12^3*s13^3 - 263*s12^2*s13^4 -
                  1871*s12*s13^5 - 318*s13^6)*s23^3 + (100*s12^4*s13 +
                  763*s12^3*s13^2 + 1626*s12^2*s13^3 + 1047*s12*s13^4 -
                  525*s13^5)*s23^4 + (80*s12^4 + 440*s12^3*s13 + 1083*s12^2*
                   s13^2 + 1238*s12*s13^3 - 336*s13^4)*s23^5 +
                (240*s12^3 + 730*s12^2*s13 + 580*s12*s13^2 - 129*s13^3)*
                 s23^6 + (240*s12^2 + 630*s12*s13 + 240*s13^2)*s23^7 +
                (80*s12 + 240*s13)*s23^8) + p1q^5*p2q*((-90*s12^4*s13 -
                  360*s12^3*s13^2 - 783*s12^2*s13^3 - 513*s12*s13^4)*s23^4 +
                (-90*s12^4 - 530*s12^3*s13 - 1313*s12^2*s13^2 - 1276*s12*
                   s13^3 - 70*s13^4)*s23^5 + (-170*s12^3 - 680*s12^2*s13 -
                  1013*s12*s13^2 - 140*s13^3)*s23^6 + (-150*s12^2 -
                  400*s12*s13 - 150*s13^2)*s23^7 + (-150*s12 - 160*s13)*
                 s23^8 - 80*s23^9) + p1q^4*p2q^2*((90*s12^4*s13^2 +
                  351*s12^3*s13^3 + 1503*s12^2*s13^4 + 1242*s12*s13^5)*
                 s23^3 + (80*s12^4*s13 + 653*s12^3*s13^2 + 1480*s12^2*s13^3 +
                  2170*s12*s13^4 + 192*s13^5)*s23^4 + (-10*s12^4 +
                  120*s12^3*s13 + 390*s12^2*s13^2 + 715*s12*s13^3 +
                  314*s13^4)*s23^5 + (-20*s12^3 + 80*s12^2*s13 +
                  67*s12*s13^2 + 292*s13^3)*s23^6 + (-90*s12^2 + 120*s12*
                   s13 + 330*s13^2)*s23^7 + (-160*s12 + 80*s13)*s23^8 -
                80*s23^9) + p3q^5*(p1q*((-90*s12^8 - 180*s12^7*s13 -
                    180*s12^6*s13^2 - 180*s12^5*s13^3 - 90*s12^4*s13^4)*s23 +
                  (-170*s12^7 - 160*s12^6*s13 - 150*s12^5*s13^2 - 320*s12^4*
                     s13^3 - 160*s12^3*s13^4)*s23^2 + (-510*s12^6 -
                    1210*s12^5*s13 - 1220*s12^4*s13^2 - 520*s12^3*s13^3)*
                   s23^3 + (-870*s12^5 - 1580*s12^4*s13 - 710*s12^3*s13^2)*
                   s23^4 + (-440*s12^4 - 350*s12^3*s13)*s23^5) +
                p2q*((90*s12^8 + 270*s12^7*s13 + 117*s12^6*s13^2 - 216*s12^5*
                     s13^3 - 153*s12^4*s13^4)*s23 + (360*s12^7 + 540*s12^6*
                     s13 - 423*s12^5*s13^2 - 873*s12^4*s13^3 - 270*s12^3*
                     s13^4)*s23^2 + (360*s12^6 - 90*s12^5*s13 - 1080*s12^4*
                     s13^2 - 630*s12^3*s13^3)*s23^3 + (-450*s12^4*s13 -
                    450*s12^3*s13^2)*s23^4 + (-90*s12^4 - 90*s12^3*s13)*
                   s23^5)) + p3q^4*(p2q^2*(324*s12^6*s13^3 + 648*s12^5*
                   s13^4 + 324*s12^4*s13^5 + (90*s12^8 - 90*s12^7*s13 -
                    963*s12^6*s13^2 - 369*s12^5*s13^3 + 1179*s12^4*s13^4 +
                    765*s12^3*s13^5)*s23 + (180*s12^7 - 990*s12^6*s13 -
                    2520*s12^5*s13^2 - 324*s12^4*s13^3 + 1620*s12^3*s13^4 +
                    432*s12^2*s13^5)*s23^2 + (-90*s12^6 - 1710*s12^5*s13 -
                    1467*s12^4*s13^2 + 873*s12^3*s13^3 + 882*s12^2*s13^4)*
                   s23^3 + (-360*s12^5 - 810*s12^4*s13 + 180*s12^3*s13^2 +
                    630*s12^2*s13^3)*s23^4 + (-180*s12^4 + 180*s12^2*s13^2)*
                   s23^5) + p1q*p2q*((-90*s12^8 + 90*s12^7*s13 + 27*s12^6*
                     s13^2 - 153*s12^5*s13^3 + 423*s12^4*s13^4 + 423*s12^3*
                     s13^5)*s23 + (-520*s12^7 - 800*s12^6*s13 - 711*s12^5*
                     s13^2 + 341*s12^4*s13^3 + 1081*s12^3*s13^4 + 309*s12^2*
                     s13^5)*s23^2 + (-1570*s12^6 - 2620*s12^5*s13 -
                    478*s12^4*s13^2 + 1239*s12^3*s13^3 + 739*s12^2*s13^4)*
                   s23^3 + (-1590*s12^5 - 870*s12^4*s13 + 1570*s12^3*s13^2 +
                    1030*s12^2*s13^3)*s23^4 + (-100*s12^4 + 1120*s12^3*s13 +
                    860*s12^2*s13^2)*s23^5 + (350*s12^3 + 260*s12^2*s13)*
                   s23^6) + p1q^2*((90*s12^7*s13 + 180*s12^6*s13^2 +
                    180*s12^5*s13^3 + 180*s12^4*s13^4 + 90*s12^3*s13^5)*s23 +
                  (450*s12^7 + 1070*s12^6*s13 + 970*s12^5*s13^2 + 600*s12^4*
                     s13^3 + 320*s12^3*s13^4 + 70*s12^2*s13^5)*s23^2 +
                  (860*s12^6 + 890*s12^5*s13 + 560*s12^4*s13^2 + 810*s12^3*
                     s13^3 + 460*s12^2*s13^4)*s23^3 + (1230*s12^5 +
                    2140*s12^4*s13 + 2160*s12^3*s13^2 + 920*s12^2*s13^3)*
                   s23^4 + (1680*s12^4 + 2740*s12^3*s13 + 1040*s12^2*s13^2)*
                   s23^5 + (860*s12^3 + 510*s12^2*s13)*s23^6)) +
              p3q^3*(p2q^3*(324*s12^6*s13^3 - 324*s12^5*s13^4 - 1620*s12^4*
                   s13^5 - 972*s12^3*s13^6 + (-360*s12^7*s13 - 540*s12^6*
                     s13^2 + 1305*s12^5*s13^3 + 927*s12^4*s13^4 - 1773*s12^3*
                     s13^5 - 1215*s12^2*s13^6)*s23 + (-90*s12^7 - 990*s12^6*
                     s13 + 333*s12^5*s13^2 + 3609*s12^4*s13^3 + 1611*s12^3*
                     s13^4 - 1827*s12^2*s13^5 - 414*s12*s13^6)*s23^2 +
                  (-270*s12^6 - 540*s12^5*s13 + 2223*s12^4*s13^2 + 2835*s12^3*
                     s13^3 - 90*s12^2*s13^4 - 756*s12*s13^5)*s23^3 +
                  (-270*s12^5 + 360*s12^4*s13 + 1530*s12^3*s13^2 + 630*s12^2*
                     s13^3 - 432*s12*s13^4)*s23^4 + (-90*s12^4 + 270*s12^3*
                     s13 + 270*s12^2*s13^2 - 90*s12*s13^3)*s23^5) +
                p1q*p2q^2*(-324*s12^5*s13^4 - 648*s12^4*s13^5 - 324*s12^3*
                   s13^6 + (270*s12^7*s13 - 63*s12^6*s13^2 - 810*s12^5*
                     s13^3 - 747*s12^4*s13^4 - 990*s12^3*s13^5 - 720*s12^2*
                     s13^6)*s23 + (-260*s12^7 + 320*s12^6*s13 + 1569*s12^5*
                     s13^2 + 1666*s12^4*s13^3 + 599*s12^3*s13^4 - 1026*s12^2*
                     s13^5 - 300*s12*s13^6)*s23^2 + (-530*s12^6 + 1650*s12^5*
                     s13 + 4643*s12^4*s13^2 + 2196*s12^3*s13^3 + 139*s12^2*
                     s13^4 - 359*s12*s13^5)*s23^3 + (330*s12^5 + 3780*s12^4*
                     s13 + 3651*s12^3*s13^2 + 874*s12^2*s13^3 - 29*s12*s13^4)*
                   s23^4 + (1210*s12^4 + 2540*s12^3*s13 + 1020*s12^2*s13^2 +
                    50*s12*s13^3)*s23^5 + (610*s12^3 + 360*s12^2*s13 +
                    20*s12*s13^2)*s23^6) + p1q^3*((-360*s12^6*s13 -
                    720*s12^5*s13^2 - 720*s12^4*s13^3 - 540*s12^3*s13^4 -
                    180*s12^2*s13^5)*s23^2 + (-900*s12^6 - 2490*s12^5*s13 -
                    2110*s12^4*s13^2 - 1000*s12^3*s13^3 - 440*s12^2*s13^4 -
                    140*s12*s13^5)*s23^3 + (-1740*s12^5 - 1980*s12^4*s13 -
                    810*s12^3*s13^2 - 800*s12^2*s13^3 - 440*s12*s13^4)*
                   s23^4 + (-1620*s12^4 - 1860*s12^3*s13 - 1890*s12^2*s13^2 -
                    640*s12*s13^3)*s23^5 + (-1620*s12^3 - 2340*s12^2*s13 -
                    670*s12*s13^2)*s23^6 + (-840*s12^2 - 330*s12*s13)*
                   s23^7) + p1q^2*p2q*((90*s12^7*s13 - 90*s12^6*s13^2 -
                    117*s12^5*s13^3 + 216*s12^4*s13^4 - 27*s12^3*s13^5 -
                    180*s12^2*s13^6)*s23 + (360*s12^7 + 250*s12^6*s13 +
                    232*s12^5*s13^2 + 835*s12^4*s13^3 + 25*s12^3*s13^4 -
                    608*s12^2*s13^5 - 140*s12*s13^6)*s23^2 + (1190*s12^6 +
                    1390*s12^5*s13 + 1594*s12^4*s13^2 + 393*s12^3*s13^3 -
                    156*s12^2*s13^4 - 19*s12*s13^5)*s23^3 + (2700*s12^5 +
                    4860*s12^4*s13 + 3092*s12^3*s13^2 + 621*s12^2*s13^3 +
                    91*s12*s13^4)*s23^4 + (2760*s12^4 + 3150*s12^3*s13 +
                    510*s12^2*s13^2 - 190*s12*s13^3)*s23^5 + (380*s12^3 -
                    730*s12^2*s13 - 410*s12*s13^2)*s23^6 + (-510*s12^2 -
                    250*s12*s13)*s23^7)) + p3q^2*(p2q^4*(-972*s12^5*s13^4 -
                  972*s12^4*s13^5 + 972*s12^3*s13^6 + 972*s12^2*s13^7 +
                  (540*s12^6*s13^2 + 1098*s12^5*s13^3 - 1161*s12^4*s13^4 -
                    1737*s12^3*s13^5 + 729*s12^2*s13^6 + 747*s12*s13^7)*s23 +
                  (270*s12^6*s13 + 1890*s12^5*s13^2 + 1350*s12^4*s13^3 -
                    2268*s12^3*s13^4 - 2196*s12^2*s13^5 + 936*s12*s13^6 +
                    162*s13^7)*s23^2 + (720*s12^5*s13 + 1800*s12^4*s13^2 -
                    468*s12^3*s13^3 - 2115*s12^2*s13^4 - 243*s12*s13^5 +
                    324*s13^6)*s23^3 + (630*s12^4*s13 + 450*s12^3*s13^2 -
                    630*s12^2*s13^3 - 612*s12*s13^4 + 162*s13^5)*s23^4 +
                  (180*s12^3*s13 - 180*s12*s13^3)*s23^5) + p1q*p2q^3*
                 (-324*s12^5*s13^4 + 972*s12^3*s13^6 + 648*s12^2*s13^7 +
                  (-270*s12^6*s13^2 - 585*s12^5*s13^3 - 459*s12^4*s13^4 -
                    684*s12^3*s13^5 - 9*s12^2*s13^6 + 531*s12*s13^7)*s23 +
                  (420*s12^6*s13 + 873*s12^5*s13^2 - 241*s12^4*s13^3 -
                    1400*s12^3*s13^4 - 3324*s12^2*s13^5 - 523*s12*s13^6 +
                    151*s13^7)*s23^2 + (260*s12^6 + 1640*s12^5*s13 +
                    1357*s12^4*s13^2 - 1797*s12^3*s13^3 - 2577*s12^2*s13^4 -
                    2040*s12*s13^5 + 140*s13^6)*s23^3 + (780*s12^5 +
                    1870*s12^4*s13 + 154*s12^3*s13^2 - 522*s12^2*s13^3 -
                    696*s12*s13^4 - 93*s13^5)*s23^4 + (780*s12^4 + 770*s12^3*
                     s13 + 420*s12^2*s13^2 + 500*s12*s13^3 - 2*s13^4)*s23^5 +
                  (260*s12^3 + 120*s12^2*s13 + 210*s12*s13^2 + 80*s13^3)*
                   s23^6) + p1q^2*p2q^2*((-270*s12^6*s13^2 - 189*s12^5*
                     s13^3 + 738*s12^4*s13^4 + 567*s12^3*s13^5 + 90*s12*
                     s13^7)*s23 + (-460*s12^6*s13 - 241*s12^5*s13^2 +
                    1759*s12^4*s13^3 + 2049*s12^3*s13^4 - 871*s12^2*s13^5 -
                    824*s12*s13^6 + 70*s13^7)*s23^2 + (240*s12^6 - 290*s12^5*
                     s13 - 839*s12^4*s13^2 - 27*s12^3*s13^3 + 643*s12^2*
                     s13^4 - 737*s12*s13^5 - 81*s13^6)*s23^3 +
                  (500*s12^5 - 330*s12^4*s13 - 1579*s12^3*s13^2 + 695*s12^2*
                     s13^3 + 711*s12*s13^4 - 292*s13^5)*s23^4 +
                  (-480*s12^4 - 2310*s12^3*s13 - 1331*s12^2*s13^2 -
                    106*s12*s13^3 - 221*s13^4)*s23^5 + (-1500*s12^3 -
                    2490*s12^2*s13 - 1320*s12*s13^2 - 240*s13^3)*s23^6 +
                  (-760*s12^2 - 680*s12*s13 - 160*s13^2)*s23^7) +
                p1q^3*p2q*((-270*s12^6*s13 - 180*s12^5*s13^2 - 549*s12^4*
                     s13^3 - 1206*s12^3*s13^4 - 747*s12^2*s13^5 - 180*s12*
                     s13^6)*s23^2 + (-540*s12^6 - 1300*s12^5*s13 - 1818*s12^4*
                     s13^2 - 2387*s12^3*s13^3 - 592*s12^2*s13^4 - 15*s12*
                     s13^5 - 140*s13^6)*s23^3 + (-1350*s12^5 - 2140*s12^4*
                     s13 - 2456*s12^3*s13^2 - 865*s12^2*s13^3 - 102*s12*
                     s13^4 - 210*s13^5)*s23^4 + (-2280*s12^4 - 4420*s12^3*
                     s13 - 3208*s12^2*s13^2 - 1327*s12*s13^3 - 160*s13^4)*
                   s23^5 + (-2340*s12^3 - 3490*s12^2*s13 - 1490*s12*s13^2 -
                    170*s13^3)*s23^6 + (-540*s12^2 - 100*s12*s13)*s23^7 +
                  (330*s12 + 80*s13)*s23^8) + p1q^4*((540*s12^5*s13 +
                    1080*s12^4*s13^2 + 990*s12^3*s13^3 + 540*s12^2*s13^4 +
                    90*s12*s13^5)*s23^3 + (900*s12^5 + 2850*s12^4*s13 +
                    2300*s12^3*s13^2 + 920*s12^2*s13^3 + 280*s12*s13^4 +
                    70*s13^5)*s23^4 + (1760*s12^4 + 2200*s12^3*s13 +
                    540*s12^2*s13^2 + 450*s12*s13^3 + 140*s13^4)*s23^5 +
                  (1230*s12^3 + 790*s12^2*s13 + 830*s12*s13^2 + 150*s13^3)*
                   s23^6 + (780*s12^2 + 980*s12*s13 + 160*s13^2)*s23^7 +
                  (410*s12 + 80*s13)*s23^8)) + p3q*(p2q^5*(972*s12^4*s13^5 +
                  1620*s12^3*s13^6 + 324*s12^2*s13^7 - 324*s12*s13^8 +
                  (-360*s12^5*s13^3 - 666*s12^4*s13^4 + 909*s12^3*s13^5 +
                    1584*s12^2*s13^6 + 225*s12*s13^7 - 144*s13^8)*s23 +
                  (-270*s12^5*s13^2 - 1530*s12^4*s13^3 - 1539*s12^3*s13^4 +
                    549*s12^2*s13^5 + 1350*s12*s13^6 - 126*s13^7)*s23^2 +
                  (-630*s12^4*s13^2 - 1620*s12^3*s13^3 - 693*s12^2*s13^4 +
                    801*s12*s13^5 + 180*s13^6)*s23^3 + (-450*s12^3*s13^2 -
                    540*s12^2*s13^3 - 90*s12*s13^4 + 162*s13^5)*s23^4 +
                  (-90*s12^2*s13^2 - 90*s12*s13^3)*s23^5) + p1q*p2q^4*
                 (648*s12^4*s13^5 + 972*s12^3*s13^6 - 324*s12*s13^8 +
                  (90*s12^5*s13^3 + 153*s12^4*s13^4 + 252*s12^3*s13^5 +
                    1233*s12^2*s13^6 + 900*s12*s13^7 - 144*s13^8)*s23 +
                  (-60*s12^5*s13^2 + 22*s12^4*s13^3 + 185*s12^3*s13^4 -
                    714*s12^2*s13^5 + 1267*s12*s13^6 + 140*s13^7)*s23^2 +
                  (-160*s12^5*s13 - 610*s12^4*s13^2 - 322*s12^3*s13^3 -
                    356*s12^2*s13^4 - 681*s12*s13^5 + 550*s13^6)*s23^3 +
                  (-300*s12^4*s13 - 410*s12^3*s13^2 + 670*s12^2*s13^3 -
                    90*s12*s13^4 + 264*s13^5)*s23^4 + (-120*s12^3*s13 +
                    410*s12^2*s13^2 + 904*s12*s13^3 + 158*s13^4)*s23^5 +
                  (20*s12^2*s13 + 270*s12*s13^2 + 160*s13^3)*s23^6) +
                p1q^2*p2q^3*((108*s12^5*s13^3 + 612*s12^4*s13^4 + 1071*s12^3*
                     s13^5 + 1710*s12^2*s13^6 + 1143*s12*s13^7)*s23 +
                  (200*s12^5*s13^2 + 1073*s12^4*s13^3 + 1901*s12^3*s13^4 +
                    74*s12^2*s13^5 + 446*s12*s13^6 + 428*s13^7)*s23^2 +
                  (-160*s12^5*s13 - 576*s12^4*s13^2 - 240*s12^3*s13^3 +
                    493*s12^2*s13^4 - 860*s12*s13^5 + 443*s13^6)*s23^3 +
                  (-250*s12^5 - 1050*s12^4*s13 - 1333*s12^3*s13^2 +
                    430*s12^2*s13^3 + 893*s12*s13^4 - 238*s13^5)*s23^4 +
                  (-750*s12^4 - 1940*s12^3*s13 - 1397*s12^2*s13^2 +
                    136*s12*s13^3 - 493*s13^4)*s23^5 + (-750*s12^3 -
                    1640*s12^2*s13 - 1510*s12*s13^2 - 640*s13^3)*s23^6 +
                  (-250*s12^2 - 590*s12*s13 - 400*s13^2)*s23^7) +
                p1q^3*p2q^2*((180*s12^5*s13^2 + 198*s12^4*s13^3 - 1359*s12^3*
                     s13^4 - 2790*s12^2*s13^5 - 1413*s12*s13^6)*s23^2 +
                  (110*s12^5*s13 - 309*s12^4*s13^2 - 1553*s12^3*s13^3 -
                    2134*s12^2*s13^4 - 1692*s12*s13^5 - 494*s13^6)*s23^3 +
                  (-60*s12^5 - 60*s12^4*s13 - 37*s12^3*s13^2 - 185*s12^2*
                     s13^3 + 35*s12*s13^4 - 789*s13^5)*s23^4 +
                  (-130*s12^4 - 410*s12^3*s13 - 451*s12^2*s13^2 - 979*s12*
                     s13^3 - 496*s13^4)*s23^5 + (330*s12^3 + 120*s12^2*s13 -
                    1023*s12*s13^2 - 281*s13^3)*s23^6 + (810*s12^2 +
                    680*s12*s13 + 240*s13^2)*s23^7 + (410*s12 + 320*s13)*
                   s23^8) + p1q^5*((-360*s12^4*s13 - 720*s12^3*s13^2 -
                    540*s12^2*s13^3 - 180*s12*s13^4)*s23^4 + (-450*s12^4 -
                    1610*s12^3*s13 - 1250*s12^2*s13^2 - 340*s12*s13^3 -
                    70*s13^4)*s23^5 + (-890*s12^3 - 1220*s12^2*s13 -
                    140*s12*s13^2 - 140*s13^3)*s23^6 + (-510*s12^2 -
                    130*s12*s13 - 150*s13^2)*s23^7 + (-150*s12 - 160*s13)*
                   s23^8 - 80*s23^9) + p1q^4*p2q*((270*s12^5*s13 + 630*s12^4*
                     s13^2 + 1449*s12^3*s13^3 + 1863*s12^2*s13^4 + 774*s12*
                     s13^5)*s23^3 + (360*s12^5 + 1490*s12^4*s13 + 2872*s12^3*
                     s13^2 + 3021*s12^2*s13^3 + 1334*s12*s13^4 + 280*s13^5)*
                   s23^4 + (760*s12^4 + 1960*s12^3*s13 + 2469*s12^2*s13^2 +
                    607*s12*s13^3 + 490*s13^4)*s23^5 + (940*s12^3 +
                    2040*s12^2*s13 + 1167*s12*s13^2 + 460*s13^3)*s23^6 +
                  (960*s12^2 + 1460*s12*s13 + 490*s13^2)*s23^7 +
                  (340*s12 + 160*s13)*s23^8 - 80*s23^9)))*
             Log(s23/(s12 + s13 + s23)))/(p1q*p3q^5*(18*s12^5*s13^3 + 18*
                s12^4*s13^4)*s23^2 + p1q*p2q^5*((-18*s12^2*s13^6 -
                 18*s12*s13^7)*s23^2 + (-18*s12^2*s13^5 - 18*s12*s13^6)*
                s23^3) + p1q^2*p2q^4*((-18*s12^2*s13^6 - 18*s12*s13^7)*
                s23^2 + (18*s12^2*s13^5 + 36*s12*s13^6)*s23^3 +
               (36*s12^2*s13^4 + 54*s12*s13^5)*s23^4) + p1q^3*p2q^3*
              ((36*s12^2*s13^5 + 54*s12*s13^6)*s23^3 + 18*s12^2*s13^4*s23^4 +
               (-18*s12^2*s13^3 - 54*s12*s13^4)*s23^5) +
             p1q^5*p2q*(18*s12*s13^4*s23^5 + 18*s12*s13^3*s23^6) +
             p1q^4*p2q^2*((-18*s12^2*s13^4 - 54*s12*s13^5)*s23^4 +
               (-18*s12^2*s13^3 - 36*s12*s13^4)*s23^5 + 18*s12*s13^3*s23^6) +
             p3q^4*(p1q^2*((-18*s12^4*s13^4 - 18*s12^3*s13^5)*s23^2 +
                 (-72*s12^4*s13^3 - 54*s12^3*s13^4)*s23^3) + p1q*p2q*
                ((36*s12^5*s13^3 - 18*s12^4*s13^4 - 54*s12^3*s13^5)*s23^2 +
                 (-18*s12^4*s13^3 - 18*s12^3*s13^4)*s23^3)) +
             p3q^3*(p1q*p2q^2*((18*s12^5*s13^3 - 90*s12^4*s13^4 - 54*s12^3*
                    s13^5 + 54*s12^2*s13^6)*s23^2 + (-36*s12^4*s13^3 +
                   36*s12^2*s13^5)*s23^3) + p1q^2*p2q*((-36*s12^4*s13^4 +
                   36*s12^2*s13^6)*s23^2 + (-126*s12^4*s13^3 - 18*s12^3*
                    s13^4 + 36*s12^2*s13^5)*s23^3 + (54*s12^3*s13^3 +
                   36*s12^2*s13^4)*s23^4) + p1q^3*((54*s12^3*s13^4 +
                   36*s12^2*s13^5)*s23^3 + (108*s12^3*s13^3 + 54*s12^2*s13^4)*
                  s23^4)) + p3q^2*(p1q*p2q^3*((-54*s12^4*s13^4 + 54*s12^3*
                    s13^5 + 90*s12^2*s13^6 - 18*s12*s13^7)*s23^2 +
                 (-18*s12^4*s13^3 + 54*s12^3*s13^4 + 54*s12^2*s13^5 -
                   18*s12*s13^6)*s23^3) + p1q^2*p2q^2*((-18*s12^4*s13^4 +
                   54*s12^3*s13^5 + 54*s12^2*s13^6 - 18*s12*s13^7)*s23^2 +
                 (-54*s12^4*s13^3 + 72*s12^3*s13^4 + 36*s12^2*s13^5 +
                   18*s12*s13^6)*s23^3 + (90*s12^3*s13^3 + 72*s12^2*s13^4 +
                   36*s12*s13^5)*s23^4) + p1q^4*((-54*s12^2*s13^4 -
                   18*s12*s13^5)*s23^4 + (-72*s12^2*s13^3 - 18*s12*s13^4)*
                  s23^5) + p1q^3*p2q*((90*s12^3*s13^4 + 72*s12^2*s13^5 +
                   36*s12*s13^6)*s23^3 + (162*s12^3*s13^3 + 90*s12^2*s13^4 +
                   18*s12*s13^5)*s23^4 + (-54*s12^2*s13^3 - 18*s12*s13^4)*
                  s23^5)) + p3q*(p1q*p2q^4*((54*s12^3*s13^5 + 18*s12^2*
                    s13^6 - 36*s12*s13^7)*s23^2 + (36*s12^3*s13^4 -
                   36*s12*s13^6)*s23^3) + p1q^2*p2q^3*((36*s12^3*s13^5 -
                   36*s12*s13^7)*s23^2 + (36*s12^3*s13^4 + 18*s12^2*s13^5 +
                   54*s12*s13^6)*s23^3 + (36*s12^3*s13^3 + 72*s12^2*s13^4 +
                   90*s12*s13^5)*s23^4) + p1q^3*p2q^2*((36*s12^3*s13^4 +
                   72*s12^2*s13^5 + 90*s12*s13^6)*s23^3 + (54*s12^3*s13^3 +
                   54*s12^2*s13^4 + 18*s12*s13^5)*s23^4 + (-72*s12^2*s13^3 -
                   72*s12*s13^4)*s23^5) + p1q^5*(18*s12*s13^4*s23^5 +
                 18*s12*s13^3*s23^6) + p1q^4*p2q*((-72*s12^2*s13^4 -
                   72*s12*s13^5)*s23^4 + (-90*s12^2*s13^3 - 54*s12*s13^4)*
                  s23^5 + 18*s12*s13^3*s23^6))) +
           ((p2q^5*(-162*s12^2*s13^5 - 162*s12*s13^6 + (90*s12^3*s13^3 +
                  180*s12^2*s13^4 - 54*s12*s13^5 + 18*s13^6)*s23 +
                (180*s12^2*s13^3 + 180*s12*s13^4 + 18*s13^5)*s23^2 +
                90*s12*s13^3*s23^3) + p3q^5*((-90*s12^5 - 180*s12^4*s13 -
                  90*s12^3*s13^2)*s23^2 + (-180*s12^4 - 180*s12^3*s13)*
                 s23^3 - 90*s12^3*s23^4) + p1q*p2q^4*(-162*s12^2*s13^5 -
                162*s12*s13^6 + (333*s12^2*s13^4 + 108*s12*s13^5 - 63*s13^6)*
                 s23 + (-100*s12^3*s13^2 - 190*s12^2*s13^3 - 20*s12*s13^4 -
                  326*s13^5)*s23^2 + (-120*s12^2*s13^2 - 110*s12*s13^3 -
                  263*s13^4)*s23^3 + (60*s12*s13^2 + 80*s13^3)*s23^4 +
                80*s13^2*s23^5) + p1q^5*((-90*s12^3 - 180*s12^2*s13 -
                  90*s12*s13^2)*s23^4 + (-180*s12^2 - 180*s12*s13)*s23^5 -
                90*s12*s23^6) + p1q^2*p2q^3*((234*s12^3*s13^3 + 882*s12^2*
                   s13^4 + 648*s12*s13^5)*s23 + (-10*s12^3*s13^2 -
                  46*s12^2*s13^3 + 439*s12*s13^4 + 61*s13^5)*s23^2 +
                (-70*s12^3*s13 - 100*s12^2*s13^2 - 106*s12*s13^3 + 245*s13^4)*
                 s23^3 + (-300*s12^2*s13 - 170*s12*s13^2 + 264*s13^3)*s23^4 +
                (-390*s12*s13 - 80*s13^2)*s23^5 - 160*s13*s23^6) +
              p1q^3*p2q^2*((72*s12^3*s13^2 - 603*s12^2*s13^3 - 675*s12*s13^4)*
                 s23^2 + (20*s12^3*s13 + 479*s12^2*s13^2 - 365*s12*s13^3 -
                  77*s13^4)*s23^3 + (80*s12^3 + 50*s12^2*s13 + 398*s12*
                   s13^2 - 16*s13^3)*s23^4 + (240*s12^2 - 50*s12*s13 -
                  99*s13^2)*s23^5 + (240*s12 - 80*s13)*s23^6 + 80*s23^7) +
              p1q^4*p2q*((90*s12^3*s13 + 513*s12^2*s13^2 + 423*s12*s13^3)*
                 s23^3 + (-10*s12^3 + 170*s12^2*s13 + 592*s12*s13^2 +
                  79*s13^3)*s23^4 + (60*s12^2 + 160*s12*s13 + 79*s13^2)*
                 s23^5 + (150*s12 + 80*s13)*s23^6 + 80*s23^7) +
              p3q^4*(p2q*((-90*s12^6 - 180*s12^5*s13 + 63*s12^4*s13^2 +
                    153*s12^3*s13^3)*s23 + (-360*s12^5 - 270*s12^4*s13 +
                    423*s12^3*s13^2 + 180*s12^2*s13^3)*s23^2 +
                  (-450*s12^4 + 90*s12^3*s13 + 360*s12^2*s13^2)*s23^3 +
                  (-180*s12^3 + 180*s12^2*s13)*s23^4) +
                p1q*((90*s12^6 + 90*s12^5*s13 + 90*s12^4*s13^2 + 90*s12^3*
                     s13^3)*s23 + (80*s12^5 - 280*s12^4*s13 - 101*s12^3*
                     s13^2 + 79*s12^2*s13^3)*s23^2 + (150*s12^4 + 70*s12^3*
                     s13 + 259*s12^2*s13^2)*s23^3 + (420*s12^3 + 440*s12^2*
                     s13)*s23^4 + 260*s12^2*s23^5)) + p3q^3*(
                p2q^2*(-162*s12^4*s13^3 - 162*s12^3*s13^4 + (-90*s12^6 +
                    90*s12^5*s13 + 603*s12^4*s13^2 - 189*s12^3*s13^3 -
                    450*s12^2*s13^4)*s23 + (-270*s12^5 + 630*s12^4*s13 +
                    1143*s12^3*s13^2 - 612*s12^2*s13^3 - 252*s12*s13^4)*
                   s23^2 + (-270*s12^4 + 900*s12^3*s13 + 360*s12^2*s13^2 -
                    342*s12*s13^3)*s23^3 + (-90*s12^3 + 360*s12^2*s13 -
                    90*s12*s13^2)*s23^4) + p1q*p2q*((-360*s12^5*s13 +
                    126*s12^4*s13^2 + 387*s12^3*s13^3 - 99*s12^2*s13^4)*s23 +
                  (160*s12^5 - 180*s12^4*s13 + 880*s12^3*s13^2 + 198*s12^2*
                     s13^3 - 77*s12*s13^4)*s23^2 + (840*s12^4 + 1100*s12^3*
                     s13 + 936*s12^2*s13^2 + 85*s12*s13^3)*s23^3 +
                  (1200*s12^3 + 940*s12^2*s13 + 182*s12*s13^2)*s23^4 +
                  (520*s12^2 + 20*s12*s13)*s23^5) + p1q^2*
                 ((90*s12^6 + 90*s12^5*s13 + 90*s12^4*s13^2 + 90*s12^3*s13^3)*
                   s23 + (-100*s12^5 - 460*s12^4*s13 - 281*s12^3*s13^2 -
                    101*s12^2*s13^3)*s23^2 + (-190*s12^4 + 270*s12^3*s13 +
                    281*s12^2*s13^2 - 158*s12*s13^3)*s23^3 + (30*s12^3 +
                    480*s12^2*s13 - 248*s12*s13^2)*s23^4 + (-220*s12^2 -
                    340*s12*s13)*s23^5 - 250*s12*s23^6)) +
              p3q^2*(p2q^3*(-162*s12^4*s13^3 + 162*s12^3*s13^4 + 324*s12^2*
                   s13^5 + (270*s12^5*s13 + 270*s12^4*s13^2 - 720*s12^3*
                     s13^3 + 207*s12^2*s13^4 + 441*s12*s13^5)*s23 +
                  (720*s12^4*s13 - 1098*s12^2*s13^3 + 513*s12*s13^4 +
                    162*s13^5)*s23^2 + (630*s12^3*s13 - 450*s12^2*s13^2 -
                    270*s12*s13^3 + 162*s13^4)*s23^3 + (180*s12^2*s13 -
                    180*s12*s13^2)*s23^4) + p1q*p2q^2*(-162*s12^4*s13^3 -
                  162*s12^3*s13^4 + (783*s12^4*s13^2 - 252*s12^3*s13^3 -
                    621*s12^2*s13^4 + 252*s12*s13^5)*s23 + (260*s12^5 +
                    570*s12^4*s13 + 1198*s12^3*s13^2 - 1777*s12^2*s13^3 -
                    435*s12*s13^4 + 322*s13^5)*s23^2 + (780*s12^4 +
                    910*s12^3*s13 + 327*s12^2*s13^2 - 723*s12*s13^3 +
                    466*s13^4)*s23^3 + (780*s12^3 + 380*s12^2*s13 +
                    262*s12*s13^2 + 224*s13^3)*s23^4 + (260*s12^2 +
                    40*s12*s13 + 80*s13^2)*s23^5) + p1q^2*p2q*
                 ((-270*s12^5*s13 - 27*s12^4*s13^2 + 144*s12^3*s13^3 -
                    99*s12^2*s13^4)*s23 + (-10*s12^5 - 170*s12^4*s13 -
                    36*s12^3*s13^2 - 844*s12^2*s13^3 - 356*s12*s13^4)*s23^2 +
                  (10*s12^4 + 460*s12^3*s13 + 264*s12^2*s13^2 - 290*s12*
                     s13^3 - 257*s13^4)*s23^3 + (-450*s12^3 - 350*s12^2*s13 +
                    95*s12*s13^2 - 275*s13^3)*s23^4 + (-970*s12^2 -
                    870*s12*s13 - 178*s13^2)*s23^5 + (-500*s12 - 160*s13)*
                   s23^6) + p1q^3*((-270*s12^5 - 360*s12^4*s13 - 270*s12^3*
                     s13^2 - 180*s12^2*s13^3)*s23^2 + (-250*s12^4 +
                    470*s12^3*s13 + 292*s12^2*s13^2 - 68*s12*s13^3)*s23^3 +
                  (50*s12^3 + 300*s12^2*s13 - 259*s12*s13^2 + 79*s13^3)*
                   s23^4 + (-150*s12^2 - 450*s12*s13 + 79*s13^2)*s23^5 +
                  (-100*s12 + 80*s13)*s23^6 + 80*s23^7)) +
              p3q*(p2q^4*(324*s12^3*s13^4 + 162*s12^2*s13^5 - 162*s12*s13^6 +
                  (-270*s12^4*s13^2 - 450*s12^3*s13^3 + 351*s12^2*s13^4 -
                    99*s12*s13^5 - 144*s13^6)*s23 + (-630*s12^3*s13^2 -
                    450*s12^2*s13^3 + 297*s12*s13^4 - 144*s13^5)*s23^2 -
                  450*s12^2*s13^2*s23^3 - 90*s12*s13^2*s23^4) + p1q*p2q^3*
                 (324*s12^3*s13^4 + 324*s12^2*s13^5 + (-198*s12^3*s13^3 +
                    1224*s12^2*s13^4 + 855*s12*s13^5 - 243*s13^6)*s23 +
                  (-160*s12^4*s13 - 540*s12^3*s13^2 - 790*s12^2*s13^3 +
                    1107*s12*s13^4 - 22*s13^5)*s23^2 + (-300*s12^3*s13 -
                    560*s12^2*s13^2 + 54*s12*s13^3 + 527*s13^4)*s23^3 +
                  (-120*s12^2*s13 + 140*s12*s13^2 + 466*s13^3)*s23^4 +
                  (20*s12*s13 + 160*s13^2)*s23^5) + p1q^2*p2q^2*
                 ((270*s12^4*s13^2 + 27*s12^3*s13^3 + 90*s12^2*s13^4 +
                    333*s12*s13^5)*s23 + (20*s12^4*s13 + 118*s12^3*s13^2 -
                    1869*s12^2*s13^3 - 700*s12*s13^4 + 421*s13^5)*s23^2 +
                  (-250*s12^4 - 510*s12^3*s13 - 81*s12^2*s13^2 - 1156*s12*
                     s13^3 + 348*s13^4)*s23^3 + (-750*s12^3 - 1130*s12^2*
                     s13 + 83*s12*s13^2 - 11*s13^3)*s23^4 + (-750*s12^2 -
                    920*s12*s13 - 258*s13^2)*s23^5 + (-250*s12 - 320*s13)*
                   s23^6) + p1q^4*((270*s12^4 + 450*s12^3*s13 + 270*s12^2*
                     s13^2 + 90*s12*s13^3)*s23^3 + (440*s12^3 + 80*s12^2*
                     s13 - 101*s12*s13^2 + 79*s13^3)*s23^4 + (150*s12^2 -
                    290*s12*s13 + 79*s13^2)*s23^5 + (60*s12 + 80*s13)*s23^6 +
                  80*s23^7) + p1q^3*p2q*((180*s12^4*s13 - 144*s12^3*s13^2 -
                    603*s12^2*s13^3 - 279*s12*s13^4)*s23^2 + (20*s12^4 +
                    400*s12^3*s13 + 708*s12^2*s13^2 + 296*s12*s13^3 -
                    257*s13^4)*s23^3 + (-140*s12^3 - 100*s12^2*s13 +
                    832*s12*s13^2 - 117*s13^3)*s23^4 + (-180*s12^2 -
                    320*s12*s13 - 20*s13^2)*s23^5 + 140*s12*s23^6 +
                  160*s23^7)))*Log((s13 + s23)/(s12 + s13 + s23)))/
            (18*p1q*p3q^4*s12^3*s13^3*s23^2 + 18*p1q*p2q^4*s12*s13^5*s23^2 +
             18*p1q^4*p2q*s12*s13^3*s23^4 + p1q^2*p2q^3*(18*s12*s13^5*s23^2 -
               36*s12*s13^4*s23^3) + p1q^3*p2q^2*(-36*s12*s13^4*s23^3 + 18*
                s12*s13^3*s23^4) + p3q^3*(p1q*p2q*(36*s12^3*s13^3 -
                 36*s12^2*s13^4)*s23^2 + p1q^2*(18*s12^3*s13^3*s23^2 -
                 36*s12^2*s13^3*s23^3)) + p3q^2*(p1q*p2q^2*(18*s12^3*s13^3 -
                 72*s12^2*s13^4 + 18*s12*s13^5)*s23^2 + p1q^2*p2q*
                ((18*s12^3*s13^3 - 36*s12^2*s13^4)*s23^2 + (-72*s12^2*s13^3 -
                   36*s12*s13^4)*s23^3) + p1q^3*(-36*s12^2*s13^3*s23^3 +
                 18*s12*s13^3*s23^4)) + p3q*(p1q*p2q^3*(-36*s12^2*s13^4 +
                 36*s12*s13^5)*s23^2 + 18*p1q^4*s12*s13^3*s23^4 + p1q^2*p2q^2*
                ((-36*s12^2*s13^4 + 18*s12*s13^5)*s23^2 + (-36*s12^2*s13^3 -
                   72*s12*s13^4)*s23^3) + p1q^3*p2q*((-36*s12^2*s13^3 -
                   36*s12*s13^4)*s23^3 + 36*s12*s13^3*s23^4)))) +
         ((p2q^5*(-18*s12^2*s13^3 - 18*s12*s13^4 + (-36*s12*s13^3 - 18*s13^4)*
               s23 - 18*s13^3*s23^2) + p1q*p3q^4*((-s12^3 - s12^2*s13)*s23^
                2 - s12^2*s23^3) + p1q*p2q^4*(-18*s12^2*s13^3 -
              18*s12*s13^4 + (-45*s12*s13^3 - 27*s13^4)*s23 +
              (-3*s12*s13^2 - 30*s13^3)*s23^2 - 3*s13^2*s23^3) +
            p1q^2*p2q^3*((36*s12^3*s13 + 81*s12^2*s13^2 + 45*s12*s13^3)*s23 +
              (90*s12^2*s13 + 132*s12*s13^2 + 33*s13^3)*s23^2 +
              (74*s12*s13 + 53*s13^2)*s23^3 + 20*s13*s23^4) +
            p1q^4*p2q*((-s12 - s13)*s23^4 - s23^5) + p1q^3*p2q^2*
             ((2*s12^3 - 5*s12^2*s13 - 7*s12*s13^2)*s23^2 + (6*s12^2 -
                8*s12*s13 - 5*s13^2)*s23^3 + (5*s12 - 4*s13)*s23^4 + s23^5) +
            p3q^3*(p2q^2*(-18*s12^4*s13 - 18*s12^3*s13^2 + (-54*s12^3*s13 -
                  36*s12^2*s13^2)*s23 + (-54*s12^2*s13 - 18*s12*s13^2)*
                 s23^2 - 18*s12*s13*s23^3) + p1q^2*((-s12^3 - s12^2*s13)*
                 s23^2 + (s12^2 + 2*s12*s13)*s23^3 + 2*s12*s23^4) +
              p1q*p2q*((9*s12^3*s13 + 9*s12^2*s13^2)*s23 + (20*s12^2*s13 +
                  11*s12*s13^2)*s23^2 + (2*s12^2 + 13*s12*s13)*s23^3 +
                2*s12*s23^4)) + p3q^2*(p2q^3*(-18*s12^4*s13 + 18*s12^3*
                 s13^2 + 36*s12^2*s13^3 + (-36*s12^3*s13 + 90*s12^2*s13^2 +
                  72*s12*s13^3)*s23 + (-18*s12^2*s13 + 90*s12*s13^2 +
                  18*s13^3)*s23^2 + 18*s13^2*s23^3) + p1q*p2q^2*(
                -18*s12^4*s13 - 18*s12^3*s13^2 + (-27*s12^3*s13 +
                  9*s12^2*s13^2 + 18*s12*s13^3)*s23 + (s12^3 + 23*s12^2*s13 +
                  75*s12*s13^2 + 26*s13^3)*s23^2 + (3*s12^2 + 53*s12*s13 +
                  46*s13^2)*s23^3 + (2*s12 + 20*s13)*s23^4) +
              p1q^3*((2*s12^2 + 2*s12*s13)*s23^3 + (s12 - s13)*s23^4 -
                s23^5) + p1q^2*p2q*((9*s12^3*s13 + 9*s12^2*s13^2)*s23 +
                (3*s12^3 + 16*s12^2*s13 + 4*s12*s13^2)*s23^2 +
                (13*s12^2 + 9*s12*s13 - 5*s13^2)*s23^3 + (12*s12 - 3*s13)*
                 s23^4 + 2*s23^5)) + p3q*(p2q^4*(36*s12^3*s13^2 +
                18*s12^2*s13^3 - 18*s12*s13^4 + (72*s12^2*s13^2 -
                  18*s12*s13^3 - 36*s13^4)*s23 + (36*s12*s13^2 - 36*s13^3)*
                 s23^2) + p1q^3*p2q*((2*s12^3 - 5*s12^2*s13 - 7*s12*s13^2)*
                 s23^2 + (8*s12^2 - 6*s12*s13 - 5*s13^2)*s23^3 +
                (6*s12 - 5*s13)*s23^4) + p1q*p2q^3*(36*s12^3*s13^2 +
                36*s12^2*s13^3 + (72*s12^3*s13 + 216*s12^2*s13^2 +
                  81*s12*s13^3 - 27*s13^4)*s23 + (182*s12^2*s13 +
                  259*s12*s13^2 + 14*s13^3)*s23^2 + (148*s12*s13 + 79*s13^2)*
                 s23^3 + 38*s13*s23^4) + p1q^4*((-s12 - s13)*s23^4 - s23^5) +
              p1q^2*p2q^2*((27*s12^3*s13 + 54*s12^2*s13^2 + 27*s12*s13^3)*
                 s23 + (4*s12^3 + 71*s12^2*s13 + 100*s12*s13^2 + 33*s13^3)*
                 s23^2 + (12*s12^2 + 63*s12*s13 + 48*s13^2)*s23^3 +
                (10*s12 + 17*s13)*s23^4 + 2*s23^5)))*PolyLog(2,
            p1q/(p1q + p2q)))/(2*p1q*p3q^4*s12^3*s13*s23^2 +
           2*p1q*p2q^4*s12*s13^3*s23^2 + 2*p1q^4*p2q*s12*s13*s23^4 +
           p1q^2*p2q^3*(2*s12*s13^3*s23^2 - 4*s12*s13^2*s23^3) +
           p1q^3*p2q^2*(-4*s12*s13^2*s23^3 + 2*s12*s13*s23^4) +
           p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
             p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
           p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*
              s23^2 + p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
               (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) + p1q^3*(-4*s12^2*s13*
                s23^3 + 2*s12*s13*s23^4)) +
           p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
             2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*((-4*s12^2*s13^2 +
                 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*s13^2)*s23^3) +
             p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*s23^3 + 4*s12*s13*
                s23^4))) + ((p2q^5*(-18*s12^2*s13^3 - 18*s12*s13^4 -
              18*s12*s13^3*s23) + p1q*p3q^4*((9*s12^4 + 9*s12^3*s13)*s23 +
              (8*s12^3 - s12^2*s13)*s23^2 - s12^2*s23^3) +
            p1q*p2q^4*(-18*s12^2*s13^3 - 18*s12*s13^4 + (36*s12^2*s13^2 +
                18*s12*s13^3)*s23 + (33*s12*s13^2 - 3*s13^3)*s23^2 -
              3*s13^2*s23^3) + p1q^2*p2q^3*((9*s12^3*s13 + 54*s12^2*s13^2 +
                45*s12*s13^3)*s23 + (-9*s12^2*s13 + 24*s12*s13^2 - 3*s13^3)*
               s23^2 + (-16*s12*s13 - s13^2)*s23^3 + 2*s13*s23^4) +
            p1q^4*p2q*((9*s12^2 + 9*s12*s13)*s23^3 + (8*s12 - s13)*s23^4 -
              s23^5) + p1q^3*p2q^2*((-7*s12^3 - 41*s12^2*s13 - 34*s12*s13^2)*
               s23^2 + (-3*s12^2 - 26*s12*s13 + 4*s13^2)*s23^3 +
              (5*s12 + 5*s13)*s23^4 + s23^5) + p3q^3*(p2q^2*(-18*s12^4*s13 -
                18*s12^3*s13^2 + 18*s12^4*s23 + (36*s12^3 + 18*s12^2*s13)*
                 s23^2 + 18*s12^2*s23^3) + p1q^2*((9*s12^4 + 9*s12^3*s13)*
                 s23 + (-10*s12^3 - 19*s12^2*s13)*s23^2 + (-17*s12^2 +
                  2*s12*s13)*s23^3 + 2*s12*s23^4) + p1q*p2q*(
                (27*s12^4 + 45*s12^3*s13 + 18*s12^2*s13^2)*s23 +
                (72*s12^3 + 101*s12^2*s13 + 38*s12*s13^2)*s23^2 +
                (83*s12^2 + 76*s12*s13)*s23^3 + 38*s12*s23^4)) +
            p3q^2*(p2q^3*(-18*s12^4*s13 + 18*s12^3*s13^2 + 36*s12^2*s13^3 -
                54*s12^3*s13*s23 + (-54*s12^2*s13 - 18*s12*s13^2)*s23^2 -
                18*s12*s13*s23^3) + p1q*p2q^2*(-18*s12^4*s13 - 18*s12^3*
                 s13^2 + (54*s12^4 + 18*s12^3*s13 - 45*s12^2*s13^2 -
                  27*s12*s13^3)*s23 + (118*s12^3 + 5*s12^2*s13 -
                  69*s12*s13^2 - s13^3)*s23^2 + (84*s12^2 - 19*s12*s13 +
                  s13^2)*s23^3 + (20*s12 + 2*s13)*s23^4) +
              p1q^3*((-18*s12^3 - 18*s12^2*s13)*s23^2 + (-7*s12^2 +
                  11*s12*s13)*s23^3 + (10*s12 - s13)*s23^4 - s23^5) +
              p1q^2*p2q*((18*s12^4 + 36*s12^3*s13 + 18*s12^2*s13^2)*s23 +
                (39*s12^3 + 61*s12^2*s13 + 22*s12*s13^2)*s23^2 +
                (76*s12^2 + 81*s12*s13 + 4*s13^2)*s23^3 + (57*s12 + 6*s13)*
                 s23^4 + 2*s23^5)) + p3q*(p2q^4*(36*s12^3*s13^2 +
                18*s12^2*s13^3 - 18*s12*s13^4 + 54*s12^2*s13^2*s23 +
                18*s12*s13^2*s23^2) + p1q*p2q^3*(36*s12^3*s13^2 +
                36*s12^2*s13^3 + (-18*s12^3*s13 + 81*s12^2*s13^2 +
                  63*s12*s13^3)*s23 + (-43*s12^2*s13 + 34*s12*s13^2 -
                  4*s13^3)*s23^2 + (-23*s12*s13 - 2*s13^2)*s23^3 +
                2*s13*s23^4) + p1q^3*p2q*((-7*s12^3 - 23*s12^2*s13 -
                  16*s12*s13^2)*s23^2 + (26*s12^2 + 21*s12*s13 + 4*s13^2)*
                 s23^3 + (33*s12 + 4*s13)*s23^4) + p1q^4*(
                (9*s12^2 + 9*s12*s13)*s23^3 + (8*s12 - s13)*s23^4 - s23^5) +
              p1q^2*p2q^2*((27*s12^4 + 36*s12^3*s13 + 18*s12^2*s13^2 +
                  9*s12*s13^3)*s23 + (49*s12^3 - 37*s12^2*s13 - 62*s12*
                   s13^2 - 3*s13^3)*s23^2 + (39*s12^2 - 45*s12*s13 + 3*s13^2)*
                 s23^3 + (19*s12 + 8*s13)*s23^4 + 2*s23^5)))*
           PolyLog(2, p1q/(p1q + p3q)))/(2*p1q*p3q^4*s12^3*s13*s23^2 +
           2*p1q*p2q^4*s12*s13^3*s23^2 + 2*p1q^4*p2q*s12*s13*s23^4 +
           p1q^2*p2q^3*(2*s12*s13^3*s23^2 - 4*s12*s13^2*s23^3) +
           p1q^3*p2q^2*(-4*s12*s13^2*s23^3 + 2*s12*s13*s23^4) +
           p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
             p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
           p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*
              s23^2 + p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
               (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) + p1q^3*(-4*s12^2*s13*
                s23^3 + 2*s12*s13*s23^4)) +
           p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
             2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*((-4*s12^2*s13^2 +
                 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*s13^2)*s23^3) +
             p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*s23^3 + 4*s12*s13*
                s23^4))) + ((p1q*p3q^4*(9*s12^4 + 9*s12^3*s13 +
              9*s12^3*s23) + p2q^5*(18*s12*s13^3 + 18*s13^4 + 18*s13^3*s23) +
            p1q*p2q^4*(36*s12^2*s13^2 + 63*s12*s13^3 + 27*s13^4 +
              (36*s12*s13^2 + 27*s13^3)*s23) + p1q^4*p2q*
             ((9*s12^2 + 9*s12*s13)*s23^2 + 9*s12*s23^3) +
            p1q^2*p2q^3*(-27*s12^3*s13 - 27*s12^2*s13^2 + (-99*s12^2*s13 -
                108*s12*s13^2 - 36*s13^3)*s23 + (-90*s12*s13 - 54*s13^2)*s23^
                2 - 18*s13*s23^3) + p1q^3*p2q^2*((-9*s12^3 - 36*s12^2*s13 -
                27*s12*s13^2)*s23 + (-9*s12^2 - 18*s12*s13 + 9*s13^2)*s23^2 +
              9*s13*s23^3) + p3q^3*(p1q^2*(9*s12^4 + 9*s12^3*s13 +
                (-9*s12^3 - 18*s12^2*s13)*s23 - 18*s12^2*s23^2) +
              p2q^2*(18*s12^4 + 54*s12^3*s13 + 36*s12^2*s13^2 +
                (36*s12^3 + 72*s12^2*s13 + 18*s12*s13^2)*s23 +
                (18*s12^2 + 18*s12*s13)*s23^2) + p1q*p2q*(27*s12^4 +
                36*s12^3*s13 + 9*s12^2*s13^2 + (72*s12^3 + 81*s12^2*s13 +
                  27*s12*s13^2)*s23 + (81*s12^2 + 63*s12*s13)*s23^2 +
                36*s12*s23^3)) + p3q*(p2q^4*(-18*s12^2*s13^2 + 18*s12*s13^3 +
                36*s13^4 + (-18*s12*s13^2 + 36*s13^3)*s23) +
              p1q^4*((9*s12^2 + 9*s12*s13)*s23^2 + 9*s12*s23^3) +
              p1q^2*p2q^2*(27*s12^4 + 9*s12^3*s13 - 36*s12^2*s13^2 -
                18*s12*s13^3 + (45*s12^3 - 108*s12^2*s13 - 162*s12*s13^2 -
                  36*s13^3)*s23 + (27*s12^2 - 108*s12*s13 - 45*s13^2)*s23^2 +
                (9*s12 - 9*s13)*s23^3) + p1q*p2q^3*(-90*s12^3*s13 -
                135*s12^2*s13^2 - 18*s12*s13^3 + 27*s13^4 +
                (-225*s12^2*s13 - 225*s12*s13^2 - 18*s13^3)*s23 +
                (-171*s12*s13 - 81*s13^2)*s23^2 - 36*s13*s23^3) +
              p1q^3*p2q*((-9*s12^3 - 18*s12^2*s13 - 9*s12*s13^2)*s23 +
                (18*s12^2 + 27*s12*s13 + 9*s13^2)*s23^2 + (27*s12 + 9*s13)*
                 s23^3)) + p3q^2*(p2q^3*(-18*s12^3*s13 - 90*s12^2*s13^2 -
                72*s12*s13^3 + (-36*s12^2*s13 - 108*s12*s13^2 - 18*s13^3)*
                 s23 + (-18*s12*s13 - 18*s13^2)*s23^2) +
              p1q^3*((-18*s12^3 - 18*s12^2*s13)*s23 + (-9*s12^2 + 9*s12*s13)*
                 s23^2 + 9*s12*s23^3) + p1q*p2q^2*(54*s12^4 + 45*s12^3*s13 -
                54*s12^2*s13^2 - 45*s12*s13^3 + (117*s12^3 - 18*s12^2*s13 -
                  144*s12*s13^2 - 27*s13^3)*s23 + (81*s12^2 - 72*s12*s13 -
                  45*s13^2)*s23^2 + (18*s12 - 18*s13)*s23^3) +
              p1q^2*p2q*(18*s12^4 + 27*s12^3*s13 + 9*s12^2*s13^2 +
                (36*s12^3 + 45*s12^2*s13 + 18*s12*s13^2)*s23 +
                (63*s12^2 + 72*s12*s13 + 9*s13^2)*s23^2 + (45*s12 + 9*s13)*
                 s23^3)))*PolyLog(2, p2q/(p2q + p3q)))/
          (2*p1q*p3q^4*s12^3*s13*s23 + 2*p1q*p2q^4*s12*s13^3*s23 +
           2*p1q^4*p2q*s12*s13*s23^3 + p1q^2*p2q^3*(2*s12*s13^3*s23 -
             4*s12*s13^2*s23^2) + p1q^3*p2q^2*(-4*s12*s13^2*s23^2 +
             2*s12*s13*s23^3) + p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*
              s23 + p1q^2*(2*s12^3*s13*s23 - 4*s12^2*s13*s23^2)) +
           p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*s23 +
             p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23 + (-8*s12^2*s13 -
                 4*s12*s13^2)*s23^2) + p1q^3*(-4*s12^2*s13*s23^2 + 2*s12*s13*
                s23^3)) + p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23 +
             2*p1q^4*s12*s13*s23^3 + p1q^2*p2q^2*((-4*s12^2*s13^2 +
                 2*s12*s13^3)*s23 + (-4*s12^2*s13 - 8*s12*s13^2)*s23^2) +
             p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*s23^2 + 4*s12*s13*
                s23^3))) + ((p2q^5*(-162*s12^2*s13^5 - 162*s12*s13^6 +
              (90*s12^3*s13^3 + 180*s12^2*s13^4 - 54*s12*s13^5 + 18*s13^6)*
               s23 + (180*s12^2*s13^3 + 180*s12*s13^4 + 18*s13^5)*s23^2 +
              90*s12*s13^3*s23^3) + p3q^5*((-90*s12^5 - 180*s12^4*s13 -
                90*s12^3*s13^2)*s23^2 + (-180*s12^4 - 180*s12^3*s13)*s23^3 -
              90*s12^3*s23^4) + p1q*p2q^4*(-162*s12^2*s13^5 - 162*s12*s13^6 +
              (333*s12^2*s13^4 + 108*s12*s13^5 - 63*s13^6)*s23 +
              (-100*s12^3*s13^2 - 190*s12^2*s13^3 - 20*s12*s13^4 - 326*s13^5)*
               s23^2 + (-120*s12^2*s13^2 - 110*s12*s13^3 - 263*s13^4)*s23^3 +
              (60*s12*s13^2 + 80*s13^3)*s23^4 + 80*s13^2*s23^5) +
            p1q^5*((-90*s12^3 - 180*s12^2*s13 - 90*s12*s13^2)*s23^4 +
              (-180*s12^2 - 180*s12*s13)*s23^5 - 90*s12*s23^6) +
            p1q^2*p2q^3*((234*s12^3*s13^3 + 882*s12^2*s13^4 + 648*s12*s13^5)*
               s23 + (-10*s12^3*s13^2 - 46*s12^2*s13^3 + 439*s12*s13^4 +
                61*s13^5)*s23^2 + (-70*s12^3*s13 - 100*s12^2*s13^2 -
                106*s12*s13^3 + 245*s13^4)*s23^3 + (-300*s12^2*s13 -
                170*s12*s13^2 + 264*s13^3)*s23^4 + (-390*s12*s13 - 80*s13^2)*
               s23^5 - 160*s13*s23^6) + p1q^3*p2q^2*((72*s12^3*s13^2 -
                603*s12^2*s13^3 - 675*s12*s13^4)*s23^2 + (20*s12^3*s13 +
                479*s12^2*s13^2 - 365*s12*s13^3 - 77*s13^4)*s23^3 +
              (80*s12^3 + 50*s12^2*s13 + 398*s12*s13^2 - 16*s13^3)*s23^4 +
              (240*s12^2 - 50*s12*s13 - 99*s13^2)*s23^5 + (240*s12 - 80*s13)*
               s23^6 + 80*s23^7) + p1q^4*p2q*((90*s12^3*s13 + 513*s12^2*
                 s13^2 + 423*s12*s13^3)*s23^3 + (-10*s12^3 + 170*s12^2*s13 +
                592*s12*s13^2 + 79*s13^3)*s23^4 + (60*s12^2 + 160*s12*s13 +
                79*s13^2)*s23^5 + (150*s12 + 80*s13)*s23^6 + 80*s23^7) +
            p3q^4*(p2q*((-90*s12^6 - 180*s12^5*s13 + 63*s12^4*s13^2 +
                  153*s12^3*s13^3)*s23 + (-360*s12^5 - 270*s12^4*s13 +
                  423*s12^3*s13^2 + 180*s12^2*s13^3)*s23^2 +
                (-450*s12^4 + 90*s12^3*s13 + 360*s12^2*s13^2)*s23^3 +
                (-180*s12^3 + 180*s12^2*s13)*s23^4) +
              p1q*((90*s12^6 + 90*s12^5*s13 + 90*s12^4*s13^2 + 90*s12^3*
                   s13^3)*s23 + (80*s12^5 - 280*s12^4*s13 - 101*s12^3*s13^2 +
                  79*s12^2*s13^3)*s23^2 + (150*s12^4 + 70*s12^3*s13 +
                  259*s12^2*s13^2)*s23^3 + (420*s12^3 + 440*s12^2*s13)*
                 s23^4 + 260*s12^2*s23^5)) + p3q^3*(p2q^2*(-162*s12^4*s13^3 -
                162*s12^3*s13^4 + (-90*s12^6 + 90*s12^5*s13 + 603*s12^4*
                   s13^2 - 189*s12^3*s13^3 - 450*s12^2*s13^4)*s23 +
                (-270*s12^5 + 630*s12^4*s13 + 1143*s12^3*s13^2 - 612*s12^2*
                   s13^3 - 252*s12*s13^4)*s23^2 + (-270*s12^4 + 900*s12^3*
                   s13 + 360*s12^2*s13^2 - 342*s12*s13^3)*s23^3 +
                (-90*s12^3 + 360*s12^2*s13 - 90*s12*s13^2)*s23^4) +
              p1q*p2q*((-360*s12^5*s13 + 126*s12^4*s13^2 + 387*s12^3*s13^3 -
                  99*s12^2*s13^4)*s23 + (160*s12^5 - 180*s12^4*s13 +
                  880*s12^3*s13^2 + 198*s12^2*s13^3 - 77*s12*s13^4)*s23^2 +
                (840*s12^4 + 1100*s12^3*s13 + 936*s12^2*s13^2 + 85*s12*s13^3)*
                 s23^3 + (1200*s12^3 + 940*s12^2*s13 + 182*s12*s13^2)*s23^4 +
                (520*s12^2 + 20*s12*s13)*s23^5) + p1q^2*((90*s12^6 +
                  90*s12^5*s13 + 90*s12^4*s13^2 + 90*s12^3*s13^3)*s23 +
                (-100*s12^5 - 460*s12^4*s13 - 281*s12^3*s13^2 - 101*s12^2*
                   s13^3)*s23^2 + (-190*s12^4 + 270*s12^3*s13 + 281*s12^2*
                   s13^2 - 158*s12*s13^3)*s23^3 + (30*s12^3 + 480*s12^2*s13 -
                  248*s12*s13^2)*s23^4 + (-220*s12^2 - 340*s12*s13)*s23^5 -
                250*s12*s23^6)) + p3q^2*(p2q^3*(-162*s12^4*s13^3 +
                162*s12^3*s13^4 + 324*s12^2*s13^5 + (270*s12^5*s13 +
                  270*s12^4*s13^2 - 720*s12^3*s13^3 + 207*s12^2*s13^4 +
                  441*s12*s13^5)*s23 + (720*s12^4*s13 - 1098*s12^2*s13^3 +
                  513*s12*s13^4 + 162*s13^5)*s23^2 + (630*s12^3*s13 -
                  450*s12^2*s13^2 - 270*s12*s13^3 + 162*s13^4)*s23^3 +
                (180*s12^2*s13 - 180*s12*s13^2)*s23^4) + p1q*p2q^2*(
                -162*s12^4*s13^3 - 162*s12^3*s13^4 + (783*s12^4*s13^2 -
                  252*s12^3*s13^3 - 621*s12^2*s13^4 + 252*s12*s13^5)*s23 +
                (260*s12^5 + 570*s12^4*s13 + 1198*s12^3*s13^2 - 1777*s12^2*
                   s13^3 - 435*s12*s13^4 + 322*s13^5)*s23^2 +
                (780*s12^4 + 910*s12^3*s13 + 327*s12^2*s13^2 - 723*s12*
                   s13^3 + 466*s13^4)*s23^3 + (780*s12^3 + 380*s12^2*s13 +
                  262*s12*s13^2 + 224*s13^3)*s23^4 + (260*s12^2 +
                  40*s12*s13 + 80*s13^2)*s23^5) + p1q^2*p2q*(
                (-270*s12^5*s13 - 27*s12^4*s13^2 + 144*s12^3*s13^3 -
                  99*s12^2*s13^4)*s23 + (-10*s12^5 - 170*s12^4*s13 -
                  36*s12^3*s13^2 - 844*s12^2*s13^3 - 356*s12*s13^4)*s23^2 +
                (10*s12^4 + 460*s12^3*s13 + 264*s12^2*s13^2 - 290*s12*s13^3 -
                  257*s13^4)*s23^3 + (-450*s12^3 - 350*s12^2*s13 +
                  95*s12*s13^2 - 275*s13^3)*s23^4 + (-970*s12^2 -
                  870*s12*s13 - 178*s13^2)*s23^5 + (-500*s12 - 160*s13)*
                 s23^6) + p1q^3*((-270*s12^5 - 360*s12^4*s13 - 270*s12^3*
                   s13^2 - 180*s12^2*s13^3)*s23^2 + (-250*s12^4 + 470*s12^3*
                   s13 + 292*s12^2*s13^2 - 68*s12*s13^3)*s23^3 +
                (50*s12^3 + 300*s12^2*s13 - 259*s12*s13^2 + 79*s13^3)*s23^4 +
                (-150*s12^2 - 450*s12*s13 + 79*s13^2)*s23^5 +
                (-100*s12 + 80*s13)*s23^6 + 80*s23^7)) +
            p3q*(p2q^4*(324*s12^3*s13^4 + 162*s12^2*s13^5 - 162*s12*s13^6 +
                (-270*s12^4*s13^2 - 450*s12^3*s13^3 + 351*s12^2*s13^4 -
                  99*s12*s13^5 - 144*s13^6)*s23 + (-630*s12^3*s13^2 -
                  450*s12^2*s13^3 + 297*s12*s13^4 - 144*s13^5)*s23^2 -
                450*s12^2*s13^2*s23^3 - 90*s12*s13^2*s23^4) +
              p1q*p2q^3*(324*s12^3*s13^4 + 324*s12^2*s13^5 +
                (-198*s12^3*s13^3 + 1224*s12^2*s13^4 + 855*s12*s13^5 -
                  243*s13^6)*s23 + (-160*s12^4*s13 - 540*s12^3*s13^2 -
                  790*s12^2*s13^3 + 1107*s12*s13^4 - 22*s13^5)*s23^2 +
                (-300*s12^3*s13 - 560*s12^2*s13^2 + 54*s12*s13^3 + 527*s13^4)*
                 s23^3 + (-120*s12^2*s13 + 140*s12*s13^2 + 466*s13^3)*s23^4 +
                (20*s12*s13 + 160*s13^2)*s23^5) + p1q^2*p2q^2*(
                (270*s12^4*s13^2 + 27*s12^3*s13^3 + 90*s12^2*s13^4 +
                  333*s12*s13^5)*s23 + (20*s12^4*s13 + 118*s12^3*s13^2 -
                  1869*s12^2*s13^3 - 700*s12*s13^4 + 421*s13^5)*s23^2 +
                (-250*s12^4 - 510*s12^3*s13 - 81*s12^2*s13^2 - 1156*s12*
                   s13^3 + 348*s13^4)*s23^3 + (-750*s12^3 - 1130*s12^2*s13 +
                  83*s12*s13^2 - 11*s13^3)*s23^4 + (-750*s12^2 - 920*s12*
                   s13 - 258*s13^2)*s23^5 + (-250*s12 - 320*s13)*s23^6) +
              p1q^4*((270*s12^4 + 450*s12^3*s13 + 270*s12^2*s13^2 +
                  90*s12*s13^3)*s23^3 + (440*s12^3 + 80*s12^2*s13 -
                  101*s12*s13^2 + 79*s13^3)*s23^4 + (150*s12^2 - 290*s12*
                   s13 + 79*s13^2)*s23^5 + (60*s12 + 80*s13)*s23^6 +
                80*s23^7) + p1q^3*p2q*((180*s12^4*s13 - 144*s12^3*s13^2 -
                  603*s12^2*s13^3 - 279*s12*s13^4)*s23^2 +
                (20*s12^4 + 400*s12^3*s13 + 708*s12^2*s13^2 + 296*s12*s13^3 -
                  257*s13^4)*s23^3 + (-140*s12^3 - 100*s12^2*s13 +
                  832*s12*s13^2 - 117*s13^3)*s23^4 + (-180*s12^2 -
                  320*s12*s13 - 20*s13^2)*s23^5 + 140*s12*s23^6 +
                160*s23^7)))*PolyLog(2, s12/(s12 + s13 + s23)))/
          (18*p1q*p3q^4*s12^3*s13^3*s23^2 + 18*p1q*p2q^4*s12*s13^5*s23^2 +
           18*p1q^4*p2q*s12*s13^3*s23^4 + p1q^2*p2q^3*(18*s12*s13^5*s23^2 -
             36*s12*s13^4*s23^3) + p1q^3*p2q^2*(-36*s12*s13^4*s23^3 +
             18*s12*s13^3*s23^4) + p3q^3*(p1q*p2q*(36*s12^3*s13^3 - 36*s12^2*
                s13^4)*s23^2 + p1q^2*(18*s12^3*s13^3*s23^2 - 36*s12^2*s13^3*
                s23^3)) + p3q^2*(p1q*p2q^2*(18*s12^3*s13^3 - 72*s12^2*s13^4 +
               18*s12*s13^5)*s23^2 + p1q^2*p2q*((18*s12^3*s13^3 -
                 36*s12^2*s13^4)*s23^2 + (-72*s12^2*s13^3 - 36*s12*s13^4)*
                s23^3) + p1q^3*(-36*s12^2*s13^3*s23^3 + 18*s12*s13^3*
                s23^4)) + p3q*(p1q*p2q^3*(-36*s12^2*s13^4 + 36*s12*s13^5)*
              s23^2 + 18*p1q^4*s12*s13^3*s23^4 + p1q^2*p2q^2*
              ((-36*s12^2*s13^4 + 18*s12*s13^5)*s23^2 + (-36*s12^2*s13^3 -
                 72*s12*s13^4)*s23^3) + p1q^3*p2q*((-36*s12^2*s13^3 -
                 36*s12*s13^4)*s23^3 + 36*s12*s13^3*s23^4))) +
         ((p2q^5*(-162*s12^4*s13^3 - 162*s12^3*s13^4 + (-495*s12^3*s13^3 -
                180*s12^2*s13^4 + 153*s12*s13^5)*s23 + (-576*s12^2*s13^3 +
                90*s13^5)*s23^2 - 333*s12*s13^3*s23^3 - 90*s13^3*s23^4) +
            p1q*p2q^4*(-162*s12^4*s13^3 - 162*s12^3*s13^4 +
              (234*s12^4*s13^2 - 414*s12^3*s13^3 - 333*s12^2*s13^4 +
                153*s12*s13^5)*s23 + (1160*s12^3*s13^2 - 352*s12^2*s13^3 -
                549*s12*s13^4 + 90*s13^5)*s23^2 + (1655*s12^2*s13^2 -
                423*s12*s13^3 - 270*s13^4)*s23^3 + (989*s12*s13^2 -
                100*s13^3)*s23^4 + 260*s13^2*s23^5) + p1q^2*p2q^3*
             ((81*s12^5*s13 + 396*s12^4*s13^2 + 162*s12^3*s13^3 -
                153*s12^2*s13^4)*s23 + (99*s12^4*s13 + 1565*s12^3*s13^2 +
                530*s12^2*s13^3 - 549*s12*s13^4)*s23^2 + (-799*s12^3*s13 +
                1783*s12^2*s13^2 + 549*s12*s13^3 - 270*s13^4)*s23^3 +
              (-1546*s12^2*s13 + 1169*s12*s13^2 + 260*s13^3)*s23^4 +
              (-979*s12*s13 + 280*s13^2)*s23^5 - 250*s13*s23^6) +
            p1q^3*p2q^2*((-99*s12^5 - 261*s12^4*s13 + 144*s12^3*s13^2 +
                306*s12^2*s13^3)*s23^2 + (-225*s12^4 - 1276*s12^3*s13 -
                43*s12^2*s13^2 + 639*s12*s13^3)*s23^3 + (98*s12^3 -
                1736*s12^2*s13 - 63*s12*s13^2 + 270*s13^3)*s23^4 +
              (467*s12^2 - 1069*s12*s13 - 70*s13^2)*s23^5 + (323*s12 -
                260*s13)*s23^6 + 80*s23^7) + p1q^4*p2q*
             ((-9*s12^4 - 162*s12^3*s13 - 153*s12^2*s13^2)*s23^3 +
              (233*s12^3 - 154*s12^2*s13 - 243*s12*s13^2)*s23^4 +
              (485*s12^2 - 90*s12*s13 - 90*s13^2)*s23^5 + (323*s12 - 10*s13)*
               s23^6 + 80*s23^7) + p3q^4*(p2q*((-153*s12^5*s13 - 153*s12^4*
                   s13^2)*s23 + (-396*s12^4*s13 - 243*s12^3*s13^2)*s23^2 +
                (-333*s12^3*s13 - 90*s12^2*s13^2)*s23^3 - 90*s12^2*s13*
                 s23^4) + p1q*((-9*s12^6 - 9*s12^5*s13)*s23 +
                (233*s12^5 + 242*s12^4*s13)*s23^2 + (485*s12^4 + 243*s12^3*
                   s13)*s23^3 + (323*s12^3 + 80*s12^2*s13)*s23^4 +
                80*s12^2*s23^5)) + p3q^3*(p2q^2*(-162*s12^6*s13 -
                162*s12^5*s13^2 + (162*s12^6 - 486*s12^5*s13 - 27*s12^4*
                   s13^2 + 459*s12^3*s13^3)*s23 + (324*s12^5 - 810*s12^4*
                   s13 + 549*s12^3*s13^2 + 576*s12^2*s13^3)*s23^2 +
                (162*s12^4 - 666*s12^3*s13 + 576*s12^2*s13^2 + 180*s12*s13^3)*
                 s23^3 + (-180*s12^2*s13 + 180*s12*s13^2)*s23^4) +
              p1q*p2q*((63*s12^6 + 99*s12^5*s13 + 36*s12^4*s13^2)*s23 +
                (934*s12^5 + 567*s12^4*s13 - 340*s12^3*s13^2)*s23^2 +
                (1663*s12^4 + 272*s12^3*s13 - 180*s12^2*s13^2)*s23^3 +
                (952*s12^3 + 20*s12*s13^2)*s23^4 + (160*s12^2 + 20*s12*s13)*
                 s23^5) + p1q^2*((-9*s12^6 - 9*s12^5*s13)*s23 +
                (251*s12^5 + 260*s12^4*s13)*s23^2 + (19*s12^4 - 241*s12^3*
                   s13)*s23^3 + (-647*s12^3 - 406*s12^2*s13)*s23^4 +
                (-566*s12^2 - 160*s12*s13)*s23^5 - 160*s12*s23^6)) +
            p3q^2*(p2q^3*(-162*s12^6*s13 + 162*s12^5*s13^2 + 324*s12^4*
                 s13^3 + (-819*s12^5*s13 + 792*s12^4*s13^2 + 666*s12^3*
                   s13^3 - 459*s12^2*s13^4)*s23 + (-1062*s12^4*s13 +
                  1782*s12^3*s13^2 + 180*s12^2*s13^3 - 423*s12*s13^4)*s23^2 +
                (-495*s12^3*s13 + 1332*s12^2*s13^2 - 153*s12*s13^3 -
                  90*s13^4)*s23^3 + (-90*s12^2*s13 + 360*s12*s13^2 -
                  90*s13^3)*s23^4) + p1q*p2q^2*(-162*s12^6*s13 -
                162*s12^5*s13^2 + (396*s12^6 - 54*s12^5*s13 + 144*s12^4*
                   s13^2 + 432*s12^3*s13^3)*s23 + (1187*s12^5 - 384*s12^4*
                   s13 + 849*s12^3*s13^2 + 1304*s12^2*s13^3)*s23^2 +
                (1178*s12^4 - 698*s12^3*s13 + 2015*s12^2*s13^2 + 909*s12*
                   s13^3)*s23^3 + (467*s12^3 - 78*s12^2*s13 + 1209*s12*
                   s13^2 + 260*s13^3)*s23^4 + (80*s12^2 + 40*s12*s13 +
                  260*s13^2)*s23^5) + p1q^2*p2q*((72*s12^6 + 261*s12^5*s13 +
                  189*s12^4*s13^2)*s23 + (800*s12^5 + 1126*s12^4*s13 +
                  209*s12^3*s13^2)*s23^2 + (354*s12^4 - 424*s12^3*s13 -
                  259*s12^2*s13^2)*s23^3 + (-1284*s12^3 - 1698*s12^2*s13 -
                  529*s12*s13^2)*s23^4 + (-1230*s12^2 - 1099*s12*s13 -
                  250*s13^2)*s23^5 + (-320*s12 - 250*s13)*s23^6) +
              p1q^3*((18*s12^5 + 18*s12^4*s13)*s23^2 + (-475*s12^4 -
                  493*s12^3*s13)*s23^3 + (-737*s12^3 - 244*s12^2*s13)*s23^4 +
                (-161*s12^2 + 83*s12*s13)*s23^5 + (163*s12 + 80*s13)*s23^6 +
                80*s23^7)) + p3q*(p2q^4*(324*s12^5*s13^2 + 162*s12^4*s13^3 -
                162*s12^3*s13^4 + (1152*s12^4*s13^2 - 126*s12^3*s13^3 -
                  639*s12^2*s13^4 + 153*s12*s13^5)*s23 + (1314*s12^3*s13^2 -
                  972*s12^2*s13^3 - 423*s12*s13^4 + 90*s13^5)*s23^2 +
                (666*s12^2*s13^2 - 666*s12*s13^3 - 90*s13^4)*s23^3 +
                (180*s12*s13^2 - 180*s13^3)*s23^4) + p1q*p2q^3*(324*s12^5*
                 s13^2 + 324*s12^4*s13^3 + (18*s12^5*s13 + 1701*s12^4*s13^2 +
                  747*s12^3*s13^3 - 612*s12^2*s13^4)*s23 + (-43*s12^4*s13 +
                  3438*s12^3*s13^2 + 556*s12^2*s13^3 - 972*s12*s13^4)*s23^2 +
                (-79*s12^3*s13 + 3760*s12^2*s13^2 + 306*s12*s13^3 -
                  360*s13^4)*s23^3 + (2*s12^2*s13 + 2178*s12*s13^2 +
                  160*s13^3)*s23^4 + (20*s12*s13 + 520*s13^2)*s23^5) +
              p1q^2*p2q^2*((243*s12^6 + 504*s12^5*s13 + 558*s12^4*s13^2 +
                  297*s12^3*s13^3)*s23 + (549*s12^5 + 749*s12^4*s13 +
                  1531*s12^3*s13^2 + 1052*s12^2*s13^3)*s23^2 +
                (-151*s12^4 - 1261*s12^3*s13 + 1434*s12^2*s13^2 +
                  1368*s12*s13^3)*s23^3 + (-961*s12^3 - 2748*s12^2*s13 +
                  640*s12*s13^2 + 530*s13^3)*s23^4 + (-664*s12^2 -
                  1918*s12*s13 + 30*s13^2)*s23^5 + (-160*s12 - 500*s13)*
                 s23^6) + p1q^4*((-9*s12^4 - 9*s12^3*s13)*s23^3 +
                (233*s12^3 + 242*s12^2*s13)*s23^4 + (485*s12^2 + 243*s12*s13)*
                 s23^5 + (323*s12 + 80*s13)*s23^6 + 80*s23^7) +
              p1q^3*p2q*((81*s12^5 + 387*s12^4*s13 + 306*s12^3*s13^2)*s23^2 +
                (-376*s12^4 - 473*s12^3*s13 - 322*s12^2*s13^2)*s23^3 +
                (-477*s12^3 - 1134*s12^2*s13 - 792*s12*s13^2)*s23^4 +
                (306*s12^2 - 806*s12*s13 - 340*s13^2)*s23^5 +
                (486*s12 - 180*s13)*s23^6 + 160*s23^7)))*
           PolyLog(2, s13/(s12 + s13 + s23)))/(18*p1q*p3q^4*s12^5*s13*s23^2 +
           18*p1q*p2q^4*s12^3*s13^3*s23^2 + 18*p1q^4*p2q*s12^3*s13*s23^4 +
           p1q^2*p2q^3*(18*s12^3*s13^3*s23^2 - 36*s12^3*s13^2*s23^3) +
           p1q^3*p2q^2*(-36*s12^3*s13^2*s23^3 + 18*s12^3*s13*s23^4) +
           p3q^3*(p1q*p2q*(36*s12^5*s13 - 36*s12^4*s13^2)*s23^2 +
             p1q^2*(18*s12^5*s13*s23^2 - 36*s12^4*s13*s23^3)) +
           p3q^2*(p1q*p2q^2*(18*s12^5*s13 - 72*s12^4*s13^2 + 18*s12^3*s13^3)*
              s23^2 + p1q^2*p2q*((18*s12^5*s13 - 36*s12^4*s13^2)*s23^2 +
               (-72*s12^4*s13 - 36*s12^3*s13^2)*s23^3) +
             p1q^3*(-36*s12^4*s13*s23^3 + 18*s12^3*s13*s23^4)) +
           p3q*(p1q*p2q^3*(-36*s12^4*s13^2 + 36*s12^3*s13^3)*s23^2 +
             18*p1q^4*s12^3*s13*s23^4 + p1q^2*p2q^2*((-36*s12^4*s13^2 +
                 18*s12^3*s13^3)*s23^2 + (-36*s12^4*s13 - 72*s12^3*s13^2)*
                s23^3) + p1q^3*p2q*((-36*s12^4*s13 - 36*s12^3*s13^2)*s23^3 +
               36*s12^3*s13*s23^4))) +
         ((p3q^5*((-90*s12^7 - 180*s12^6*s13 - 90*s12^5*s13^2)*s23^2 +
              (-180*s12^6 - 180*s12^5*s13)*s23^3 - 90*s12^5*s23^4) +
            p2q^5*(-324*s12^4*s13^5 - 324*s12^3*s13^6 + (90*s12^5*s13^3 +
                180*s12^4*s13^4 - 549*s12^3*s13^5 - 162*s12^2*s13^6 +
                153*s12*s13^7)*s23 + (180*s12^4*s13^3 + 180*s12^3*s13^4 -
                558*s12^2*s13^5 + 90*s13^7)*s23^2 + (90*s12^3*s13^3 -
                333*s12*s13^5)*s23^3 - 90*s13^5*s23^4) +
            p1q*p2q^4*(-324*s12^4*s13^5 - 324*s12^3*s13^6 +
              (567*s12^4*s13^4 - 306*s12^3*s13^5 - 396*s12^2*s13^6 +
                153*s12*s13^7)*s23 + (-100*s12^5*s13^2 - 190*s12^4*s13^3 +
                1086*s12^3*s13^4 - 732*s12^2*s13^5 - 549*s12*s13^6 +
                90*s13^7)*s23^2 + (-120*s12^4*s13^2 - 110*s12^3*s13^3 +
                1338*s12^2*s13^4 - 423*s12*s13^5 - 270*s13^6)*s23^3 +
              (60*s12^3*s13^2 + 80*s12^2*s13^3 + 989*s12*s13^4 - 100*s13^5)*
               s23^4 + (80*s12^2*s13^2 + 260*s13^4)*s23^5) +
            p1q^5*((-90*s12^5 - 180*s12^4*s13 - 90*s12^3*s13^2)*s23^4 +
              (-180*s12^4 - 180*s12^3*s13)*s23^5 - 90*s12^3*s23^6) +
            p1q^2*p2q^3*((315*s12^5*s13^3 + 1278*s12^4*s13^4 + 810*s12^3*
                 s13^5 - 153*s12^2*s13^6)*s23 + (-10*s12^5*s13^2 +
                53*s12^4*s13^3 + 1950*s12^3*s13^4 + 537*s12^2*s13^5 -
                549*s12*s13^6)*s23^2 + (-70*s12^5*s13 - 100*s12^4*s13^2 -
                869*s12^3*s13^3 + 2010*s12^2*s13^4 + 549*s12*s13^5 -
                270*s13^6)*s23^3 + (-300*s12^4*s13 - 170*s12^3*s13^2 -
                1246*s12^2*s13^3 + 1169*s12*s13^4 + 260*s13^5)*s23^4 +
              (-390*s12^3*s13 - 80*s12^2*s13^2 - 979*s12*s13^3 + 280*s13^4)*
               s23^5 + (-160*s12^2*s13 - 250*s13^3)*s23^6) +
            p1q^3*p2q^2*((9*s12^5*s13^2 - 792*s12^4*s13^3 - 495*s12^3*s13^4 +
                306*s12^2*s13^5)*s23^2 + (20*s12^5*s13 + 362*s12^4*s13^2 -
                1461*s12^3*s13^3 - 48*s12^2*s13^4 + 639*s12*s13^5)*s23^3 +
              (80*s12^5 + 50*s12^4*s13 + 586*s12^3*s13^2 - 1662*s12^2*s13^3 -
                63*s12*s13^4 + 270*s13^5)*s23^4 + (240*s12^4 - 50*s12^3*s13 +
                386*s12^2*s13^2 - 1069*s12*s13^3 - 70*s13^4)*s23^5 +
              (240*s12^3 - 80*s12^2*s13 + 323*s12*s13^2 - 260*s13^3)*s23^6 +
              (80*s12^2 + 80*s13^2)*s23^7) + p1q^4*p2q*
             ((90*s12^5*s13 + 504*s12^4*s13^2 + 261*s12^3*s13^3 -
                153*s12^2*s13^4)*s23^3 + (-10*s12^5 + 170*s12^4*s13 +
                807*s12^3*s13^2 - 93*s12^2*s13^3 - 243*s12*s13^4)*s23^4 +
              (60*s12^4 + 160*s12^3*s13 + 546*s12^2*s13^2 - 90*s12*s13^3 -
                90*s13^4)*s23^5 + (150*s12^3 + 80*s12^2*s13 + 323*s12*s13^2 -
                10*s13^3)*s23^6 + (80*s12^2 + 80*s13^2)*s23^7) +
            p3q^4*(p2q*((-90*s12^8 - 180*s12^7*s13 + 63*s12^6*s13^2 -
                  153*s12^4*s13^4)*s23 + (-360*s12^7 - 270*s12^6*s13 +
                  423*s12^5*s13^2 - 216*s12^4*s13^3 - 243*s12^3*s13^4)*
                 s23^2 + (-450*s12^6 + 90*s12^5*s13 + 360*s12^4*s13^2 -
                  333*s12^3*s13^3 - 90*s12^2*s13^4)*s23^3 +
                (-180*s12^5 + 180*s12^4*s13 - 90*s12^2*s13^3)*s23^4) +
              p1q*((90*s12^8 + 90*s12^7*s13 + 81*s12^6*s13^2 + 81*s12^5*
                   s13^3)*s23 + (80*s12^7 - 280*s12^6*s13 + 114*s12^5*s13^2 +
                  303*s12^4*s13^3)*s23^2 + (150*s12^6 + 70*s12^5*s13 +
                  726*s12^4*s13^2 + 243*s12^3*s13^3)*s23^3 +
                (420*s12^5 + 440*s12^4*s13 + 323*s12^3*s13^2 + 80*s12^2*
                   s13^3)*s23^4 + (260*s12^4 + 80*s12^2*s13^2)*s23^5)) +
            p3q^3*(p2q^2*(-324*s12^6*s13^3 - 324*s12^5*s13^4 +
                (-90*s12^8 + 90*s12^7*s13 + 765*s12^6*s13^2 - 675*s12^5*
                   s13^3 - 477*s12^4*s13^4 + 459*s12^3*s13^5)*s23 +
                (-270*s12^7 + 630*s12^6*s13 + 1467*s12^5*s13^2 - 1422*s12^4*
                   s13^3 + 297*s12^3*s13^4 + 576*s12^2*s13^5)*s23^2 +
                (-270*s12^6 + 900*s12^5*s13 + 522*s12^4*s13^2 - 1008*s12^3*
                   s13^3 + 576*s12^2*s13^4 + 180*s12*s13^5)*s23^3 +
                (-90*s12^5 + 360*s12^4*s13 - 90*s12^3*s13^2 - 180*s12^2*
                   s13^3 + 180*s12*s13^4)*s23^4) + p1q*p2q*(
                (-360*s12^7*s13 + 189*s12^6*s13^2 + 486*s12^5*s13^3 -
                  63*s12^4*s13^4)*s23 + (160*s12^7 - 180*s12^6*s13 +
                  1814*s12^5*s13^2 + 801*s12^4*s13^3 - 381*s12^3*s13^4)*
                 s23^2 + (840*s12^6 + 1100*s12^5*s13 + 2635*s12^4*s13^2 +
                  429*s12^3*s13^3 - 180*s12^2*s13^4)*s23^3 +
                (1200*s12^5 + 940*s12^4*s13 + 1170*s12^3*s13^2 +
                  20*s12*s13^4)*s23^4 + (520*s12^4 + 20*s12^3*s13 +
                  160*s12^2*s13^2 + 20*s12*s13^3)*s23^5) +
              p1q^2*((90*s12^8 + 90*s12^7*s13 + 81*s12^6*s13^2 + 81*s12^5*
                   s13^3)*s23 + (-100*s12^7 - 460*s12^6*s13 - 48*s12^5*
                   s13^2 + 141*s12^4*s13^3)*s23^2 + (-190*s12^6 + 270*s12^5*
                   s13 + 318*s12^4*s13^2 - 363*s12^3*s13^3)*s23^3 +
                (30*s12^5 + 480*s12^4*s13 - 859*s12^3*s13^2 - 406*s12^2*
                   s13^3)*s23^4 + (-220*s12^4 - 340*s12^3*s13 - 566*s12^2*
                   s13^2 - 160*s12*s13^3)*s23^5 + (-250*s12^3 - 160*s12*
                   s13^2)*s23^6)) + p3q^2*(p2q^3*(-324*s12^6*s13^3 +
                324*s12^5*s13^4 + 648*s12^4*s13^5 + (270*s12^7*s13 +
                  270*s12^6*s13^2 - 1539*s12^5*s13^3 + 999*s12^4*s13^4 +
                  1107*s12^3*s13^5 - 459*s12^2*s13^6)*s23 +
                (720*s12^6*s13 - 2160*s12^4*s13^3 + 2295*s12^3*s13^4 +
                  342*s12^2*s13^5 - 423*s12*s13^6)*s23^2 + (630*s12^5*s13 -
                  450*s12^4*s13^2 - 765*s12^3*s13^3 + 1494*s12^2*s13^4 -
                  153*s12*s13^5 - 90*s13^6)*s23^3 + (180*s12^4*s13 -
                  180*s12^3*s13^2 - 90*s12^2*s13^3 + 360*s12*s13^4 -
                  90*s13^5)*s23^4) + p1q*p2q^2*(-324*s12^6*s13^3 -
                324*s12^5*s13^4 + (1179*s12^6*s13^2 - 306*s12^5*s13^3 -
                  477*s12^4*s13^4 + 684*s12^3*s13^5)*s23 +
                (260*s12^7 + 570*s12^6*s13 + 2403*s12^5*s13^2 - 2071*s12^4*
                   s13^3 + 468*s12^3*s13^4 + 1608*s12^2*s13^5)*s23^2 +
                (780*s12^6 + 910*s12^5*s13 + 1559*s12^4*s13^2 - 1277*s12^3*
                   s13^3 + 2499*s12^2*s13^4 + 909*s12*s13^5)*s23^3 +
                (780*s12^5 + 380*s12^4*s13 + 765*s12^3*s13^2 + 182*s12^2*
                   s13^3 + 1209*s12*s13^4 + 260*s13^5)*s23^4 +
                (260*s12^4 + 40*s12^3*s13 + 160*s12^2*s13^2 + 40*s12*s13^3 +
                  260*s13^4)*s23^5) + p1q^2*p2q*((-270*s12^7*s13 +
                  45*s12^6*s13^2 + 405*s12^5*s13^3 + 90*s12^4*s13^4)*s23 +
                (-10*s12^7 - 170*s12^6*s13 + 818*s12^5*s13^2 + 408*s12^4*
                   s13^3 - 75*s12^3*s13^4)*s23^2 + (10*s12^6 + 460*s12^5*
                   s13 + 852*s12^4*s13^2 - 390*s12^3*s13^3 - 444*s12^2*s13^4)*
                 s23^3 + (-450*s12^5 - 350*s12^4*s13 - 973*s12^3*s13^2 -
                  1865*s12^2*s13^3 - 529*s12*s13^4)*s23^4 +
                (-970*s12^4 - 870*s12^3*s13 - 1372*s12^2*s13^2 - 1099*s12*
                   s13^3 - 250*s13^4)*s23^5 + (-500*s12^3 - 160*s12^2*s13 -
                  320*s12*s13^2 - 250*s13^3)*s23^6) + p1q^3*(
                (-270*s12^7 - 360*s12^6*s13 - 252*s12^5*s13^2 - 162*s12^4*
                   s13^3)*s23^2 + (-250*s12^6 + 470*s12^5*s13 - 147*s12^4*
                   s13^2 - 525*s12^3*s13^3)*s23^3 + (50*s12^5 + 300*s12^4*
                   s13 - 978*s12^3*s13^2 - 183*s12^2*s13^3)*s23^4 +
                (-150*s12^4 - 450*s12^3*s13 - 100*s12^2*s13^2 + 83*s12*s13^3)*
                 s23^5 + (-100*s12^3 + 80*s12^2*s13 + 163*s12*s13^2 +
                  80*s13^3)*s23^6 + (80*s12^2 + 80*s13^2)*s23^7)) +
            p3q*(p2q^4*(648*s12^5*s13^4 + 324*s12^4*s13^5 - 324*s12^3*s13^6 +
                (-270*s12^6*s13^2 - 450*s12^5*s13^3 + 1503*s12^4*s13^4 -
                  225*s12^3*s13^5 - 783*s12^2*s13^6 + 153*s12*s13^7)*s23 +
                (-630*s12^5*s13^2 - 450*s12^4*s13^3 + 1611*s12^3*s13^4 -
                  1116*s12^2*s13^5 - 423*s12*s13^6 + 90*s13^7)*s23^2 +
                (-450*s12^4*s13^2 + 666*s12^2*s13^4 - 666*s12*s13^5 -
                  90*s13^6)*s23^3 + (-90*s12^3*s13^2 + 180*s12*s13^4 -
                  180*s13^5)*s23^4) + p1q*p2q^3*(648*s12^5*s13^4 +
                648*s12^4*s13^5 + (-180*s12^5*s13^3 + 2925*s12^4*s13^4 +
                  1602*s12^3*s13^5 - 855*s12^2*s13^6)*s23 +
                (-160*s12^6*s13 - 540*s12^5*s13^2 - 797*s12^4*s13^3 +
                  4509*s12^3*s13^4 + 462*s12^2*s13^5 - 972*s12*s13^6)*s23^2 +
                (-300*s12^5*s13 - 560*s12^4*s13^2 + 47*s12^3*s13^3 +
                  4251*s12^2*s13^4 + 306*s12*s13^5 - 360*s13^6)*s23^3 +
                (-120*s12^4*s13 + 140*s12^3*s13^2 + 504*s12^2*s13^3 +
                  2178*s12*s13^4 + 160*s13^5)*s23^4 + (20*s12^3*s13 +
                  160*s12^2*s13^2 + 20*s12*s13^3 + 520*s13^4)*s23^5) +
              p1q^2*p2q^2*((513*s12^6*s13^2 + 531*s12^5*s13^3 + 648*s12^4*
                   s13^4 + 630*s12^3*s13^5)*s23 + (20*s12^6*s13 + 739*s12^5*
                   s13^2 - 976*s12^4*s13^3 + 849*s12^3*s13^4 + 1419*s12^2*
                   s13^5)*s23^2 + (-250*s12^6 - 510*s12^5*s13 - 16*s12^4*
                   s13^2 - 2093*s12^3*s13^3 + 1836*s12^2*s13^4 + 1368*s12*
                   s13^5)*s23^3 + (-750*s12^5 - 1130*s12^4*s13 - 698*s12^3*
                   s13^2 - 2615*s12^2*s13^3 + 640*s12*s13^4 + 530*s13^5)*
                 s23^4 + (-750*s12^4 - 920*s12^3*s13 - 886*s12^2*s13^2 -
                  1918*s12*s13^3 + 30*s13^4)*s23^5 + (-250*s12^3 -
                  320*s12^2*s13 - 160*s12*s13^2 - 500*s13^3)*s23^6) +
              p1q^4*((270*s12^6 + 450*s12^5*s13 + 261*s12^4*s13^2 +
                  81*s12^3*s13^3)*s23^3 + (440*s12^5 + 80*s12^4*s13 +
                  114*s12^3*s13^2 + 303*s12^2*s13^3)*s23^4 +
                (150*s12^4 - 290*s12^3*s13 + 546*s12^2*s13^2 + 243*s12*s13^3)*
                 s23^5 + (60*s12^3 + 80*s12^2*s13 + 323*s12*s13^2 + 80*s13^3)*
                 s23^6 + (80*s12^2 + 80*s13^2)*s23^7) + p1q^3*p2q*(
                (180*s12^6*s13 - 27*s12^5*s13^2 - 144*s12^4*s13^3 +
                  63*s12^3*s13^4)*s23^2 + (20*s12^6 + 400*s12^5*s13 +
                  476*s12^4*s13^2 + 39*s12^3*s13^3 - 507*s12^2*s13^4)*s23^3 +
                (-140*s12^5 - 100*s12^4*s13 + 463*s12^3*s13^2 - 1179*s12^2*
                   s13^3 - 792*s12*s13^4)*s23^4 + (-180*s12^4 - 320*s12^3*
                   s13 + 286*s12^2*s13^2 - 806*s12*s13^3 - 340*s13^4)*s23^5 +
                (140*s12^3 + 486*s12*s13^2 - 180*s13^3)*s23^6 +
                (160*s12^2 + 160*s13^2)*s23^7)))*PolyLog(2,
            s23/(s12 + s13 + s23)))/(18*p1q*p3q^4*s12^5*s13^3*s23^2 +
           18*p1q*p2q^4*s12^3*s13^5*s23^2 + 18*p1q^4*p2q*s12^3*s13^3*s23^4 +
           p1q^2*p2q^3*(18*s12^3*s13^5*s23^2 - 36*s12^3*s13^4*s23^3) +
           p1q^3*p2q^2*(-36*s12^3*s13^4*s23^3 + 18*s12^3*s13^3*s23^4) +
           p3q^3*(p1q*p2q*(36*s12^5*s13^3 - 36*s12^4*s13^4)*s23^2 +
             p1q^2*(18*s12^5*s13^3*s23^2 - 36*s12^4*s13^3*s23^3)) +
           p3q^2*(p1q*p2q^2*(18*s12^5*s13^3 - 72*s12^4*s13^4 + 18*s12^3*
                s13^5)*s23^2 + p1q^2*p2q*((18*s12^5*s13^3 - 36*s12^4*s13^4)*
                s23^2 + (-72*s12^4*s13^3 - 36*s12^3*s13^4)*s23^3) +
             p1q^3*(-36*s12^4*s13^3*s23^3 + 18*s12^3*s13^3*s23^4)) +
           p3q*(p1q*p2q^3*(-36*s12^4*s13^4 + 36*s12^3*s13^5)*s23^2 +
             18*p1q^4*s12^3*s13^3*s23^4 + p1q^2*p2q^2*((-36*s12^4*s13^4 +
                 18*s12^3*s13^5)*s23^2 + (-36*s12^4*s13^3 - 72*s12^3*s13^4)*
                s23^3) + p1q^3*p2q*((-36*s12^4*s13^3 - 36*s12^3*s13^4)*
                s23^3 + 36*s12^3*s13^3*s23^4))) +
         ((p1q*p3q^4*((-9*s12^4 - 9*s12^3*s13)*s23 - 9*s12^3*s23^2) +
            p2q^5*(36*s12^2*s13^3 + 36*s12*s13^4 + (54*s12*s13^3 + 18*s13^4)*
               s23 + 18*s13^3*s23^2) + p1q*p2q^4*(36*s12^2*s13^3 +
              36*s12*s13^4 + (-36*s12^2*s13^2 + 27*s12*s13^3 + 27*s13^4)*
               s23 + (-36*s12*s13^2 + 27*s13^3)*s23^2) +
            p1q^4*p2q*((-9*s12^2 - 9*s12*s13)*s23^3 - 9*s12*s23^4) +
            p1q^2*p2q^3*((-45*s12^3*s13 - 135*s12^2*s13^2 - 90*s12*s13^3)*
               s23 + (-81*s12^2*s13 - 162*s12*s13^2 - 36*s13^3)*s23^2 +
              (-54*s12*s13 - 54*s13^2)*s23^3 - 18*s13*s23^4) +
            p1q^3*p2q^2*((9*s12^3 + 54*s12^2*s13 + 45*s12*s13^2)*s23^2 +
              (9*s12^2 + 54*s12*s13 + 9*s13^2)*s23^3 + 9*s13*s23^4) +
            p3q^3*(p1q^2*((-9*s12^4 - 9*s12^3*s13)*s23 + (9*s12^3 +
                  18*s12^2*s13)*s23^2 + 18*s12^2*s23^3) +
              p2q^2*(36*s12^4*s13 + 36*s12^3*s13^2 + (-18*s12^4 +
                  54*s12^3*s13 + 36*s12^2*s13^2)*s23 + (-36*s12^3 +
                  36*s12^2*s13 + 18*s12*s13^2)*s23^2 + (-18*s12^2 +
                  18*s12*s13)*s23^3) + p1q*p2q*((-27*s12^4 - 54*s12^3*s13 -
                  27*s12^2*s13^2)*s23 + (-72*s12^3 - 117*s12^2*s13 -
                  45*s12*s13^2)*s23^2 + (-81*s12^2 - 81*s12*s13)*s23^3 -
                36*s12*s23^4)) + p3q^2*(p2q^3*(36*s12^4*s13 - 36*s12^3*
                 s13^2 - 72*s12^2*s13^3 + (90*s12^3*s13 - 90*s12^2*s13^2 -
                  72*s12*s13^3)*s23 + (72*s12^2*s13 - 72*s12*s13^2 -
                  18*s13^3)*s23^2 + (18*s12*s13 - 18*s13^2)*s23^3) +
              p1q^3*((18*s12^3 + 18*s12^2*s13)*s23^2 + (9*s12^2 - 9*s12*s13)*
                 s23^3 - 9*s12*s23^4) + p1q*p2q^2*(36*s12^4*s13 +
                36*s12^3*s13^2 + (-54*s12^4 + 9*s12^3*s13 + 36*s12^2*s13^2 +
                  9*s12*s13^3)*s23 + (-117*s12^3 - 18*s12^2*s13 - 27*s13^3)*
                 s23^2 + (-81*s12^2 - 18*s12*s13 - 45*s13^2)*s23^3 +
                (-18*s12 - 18*s13)*s23^4) + p1q^2*p2q*((-18*s12^4 -
                  45*s12^3*s13 - 27*s12^2*s13^2)*s23 + (-36*s12^3 -
                  63*s12^2*s13 - 18*s12*s13^2)*s23^2 + (-63*s12^2 -
                  54*s12*s13 + 9*s13^2)*s23^3 + (-45*s12 + 9*s13)*s23^4)) +
            p3q*(p2q^4*(-72*s12^3*s13^2 - 36*s12^2*s13^3 + 36*s12*s13^4 +
                (-126*s12^2*s13^2 + 18*s12*s13^3 + 36*s13^4)*s23 +
                (-54*s12*s13^2 + 36*s13^3)*s23^2) + p1q^4*(
                (-9*s12^2 - 9*s12*s13)*s23^3 - 9*s12*s23^4) +
              p1q^2*p2q^2*((-27*s12^4 - 63*s12^3*s13 - 72*s12^2*s13^2 -
                  36*s12*s13^3)*s23 + (-45*s12^3 - 18*s12^2*s13 -
                  36*s12*s13^2 - 36*s13^3)*s23^2 + (-27*s12^2 + 18*s12*s13 -
                  45*s13^2)*s23^3 + (-9*s12 - 9*s13)*s23^4) +
              p1q*p2q^3*(-72*s12^3*s13^2 - 72*s12^2*s13^3 +
                (-54*s12^3*s13 - 297*s12^2*s13^2 - 144*s12*s13^3 + 27*s13^4)*
                 s23 + (-135*s12^2*s13 - 297*s12*s13^2 - 18*s13^3)*s23^2 +
                (-117*s12*s13 - 81*s13^2)*s23^3 - 36*s13*s23^4) +
              p1q^3*p2q*((9*s12^3 + 36*s12^2*s13 + 27*s12*s13^2)*s23^2 +
                (-18*s12^2 + 9*s12*s13 + 9*s13^2)*s23^3 + (-27*s12 + 9*s13)*
                 s23^4)))*PolyLog(2, -((-(p2q*s12) - p3q*s12 - p2q*s13 - p3q*
                s13 + p1q*s23)/((p2q + p3q)*(s12 + s13)))))/
          (2*p1q*p3q^4*s12^3*s13*s23^2 + 2*p1q*p2q^4*s12*s13^3*s23^2 +
           2*p1q^4*p2q*s12*s13*s23^4 + p1q^2*p2q^3*(2*s12*s13^3*s23^2 -
             4*s12*s13^2*s23^3) + p1q^3*p2q^2*(-4*s12*s13^2*s23^3 +
             2*s12*s13*s23^4) + p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*
              s23^2 + p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
           p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*
              s23^2 + p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
               (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) + p1q^3*(-4*s12^2*s13*
                s23^3 + 2*s12*s13*s23^4)) +
           p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
             2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*((-4*s12^2*s13^2 +
                 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*s13^2)*s23^3) +
             p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*s23^3 + 4*s12*s13*
                s23^4))) + ((p1q*p3q^4*((9*s12^4 + 9*s12^3*s13)*s23 +
              9*s12^3*s23^2) + p2q^5*(-36*s12^2*s13^3 - 36*s12*s13^4 +
              (-54*s12*s13^3 - 18*s13^4)*s23 - 18*s13^3*s23^2) +
            p1q*p2q^4*(-36*s12^2*s13^3 - 36*s12*s13^4 + (36*s12^2*s13^2 -
                27*s12*s13^3 - 27*s13^4)*s23 + (36*s12*s13^2 - 27*s13^3)*s23^
                2) + p1q^4*p2q*((9*s12^2 + 9*s12*s13)*s23^3 + 9*s12*s23^4) +
            p1q^3*p2q^2*((-9*s12^3 - 54*s12^2*s13 - 45*s12*s13^2)*s23^2 +
              (-9*s12^2 - 54*s12*s13 - 9*s13^2)*s23^3 - 9*s13*s23^4) +
            p1q^2*p2q^3*((45*s12^3*s13 + 135*s12^2*s13^2 + 90*s12*s13^3)*
               s23 + (81*s12^2*s13 + 162*s12*s13^2 + 36*s13^3)*s23^2 +
              (54*s12*s13 + 54*s13^2)*s23^3 + 18*s13*s23^4) +
            p3q^3*(p1q^2*((9*s12^4 + 9*s12^3*s13)*s23 + (-9*s12^3 -
                  18*s12^2*s13)*s23^2 - 18*s12^2*s23^3) +
              p2q^2*(-36*s12^4*s13 - 36*s12^3*s13^2 + (18*s12^4 -
                  54*s12^3*s13 - 36*s12^2*s13^2)*s23 + (36*s12^3 -
                  36*s12^2*s13 - 18*s12*s13^2)*s23^2 + (18*s12^2 -
                  18*s12*s13)*s23^3) + p1q*p2q*((27*s12^4 + 54*s12^3*s13 +
                  27*s12^2*s13^2)*s23 + (72*s12^3 + 117*s12^2*s13 +
                  45*s12*s13^2)*s23^2 + (81*s12^2 + 81*s12*s13)*s23^3 +
                36*s12*s23^4)) + p3q*(p2q^4*(72*s12^3*s13^2 + 36*s12^2*
                 s13^3 - 36*s12*s13^4 + (126*s12^2*s13^2 - 18*s12*s13^3 -
                  36*s13^4)*s23 + (54*s12*s13^2 - 36*s13^3)*s23^2) +
              p1q^4*((9*s12^2 + 9*s12*s13)*s23^3 + 9*s12*s23^4) +
              p1q^3*p2q*((-9*s12^3 - 36*s12^2*s13 - 27*s12*s13^2)*s23^2 +
                (18*s12^2 - 9*s12*s13 - 9*s13^2)*s23^3 + (27*s12 - 9*s13)*
                 s23^4) + p1q*p2q^3*(72*s12^3*s13^2 + 72*s12^2*s13^3 +
                (54*s12^3*s13 + 297*s12^2*s13^2 + 144*s12*s13^3 - 27*s13^4)*
                 s23 + (135*s12^2*s13 + 297*s12*s13^2 + 18*s13^3)*s23^2 +
                (117*s12*s13 + 81*s13^2)*s23^3 + 36*s13*s23^4) +
              p1q^2*p2q^2*((27*s12^4 + 63*s12^3*s13 + 72*s12^2*s13^2 +
                  36*s12*s13^3)*s23 + (45*s12^3 + 18*s12^2*s13 +
                  36*s12*s13^2 + 36*s13^3)*s23^2 + (27*s12^2 - 18*s12*s13 +
                  45*s13^2)*s23^3 + (9*s12 + 9*s13)*s23^4)) +
            p3q^2*(p2q^3*(-36*s12^4*s13 + 36*s12^3*s13^2 + 72*s12^2*s13^3 +
                (-90*s12^3*s13 + 90*s12^2*s13^2 + 72*s12*s13^3)*s23 +
                (-72*s12^2*s13 + 72*s12*s13^2 + 18*s13^3)*s23^2 +
                (-18*s12*s13 + 18*s13^2)*s23^3) + p1q^3*((-18*s12^3 -
                  18*s12^2*s13)*s23^2 + (-9*s12^2 + 9*s12*s13)*s23^3 +
                9*s12*s23^4) + p1q^2*p2q*((18*s12^4 + 45*s12^3*s13 +
                  27*s12^2*s13^2)*s23 + (36*s12^3 + 63*s12^2*s13 +
                  18*s12*s13^2)*s23^2 + (63*s12^2 + 54*s12*s13 - 9*s13^2)*
                 s23^3 + (45*s12 - 9*s13)*s23^4) + p1q*p2q^2*(-36*s12^4*s13 -
                36*s12^3*s13^2 + (54*s12^4 - 9*s12^3*s13 - 36*s12^2*s13^2 -
                  9*s12*s13^3)*s23 + (117*s12^3 + 18*s12^2*s13 + 27*s13^3)*
                 s23^2 + (81*s12^2 + 18*s12*s13 + 45*s13^2)*s23^3 +
                (18*s12 + 18*s13)*s23^4)))*PolyLog(2,
            -((-(p2q*s12) - p3q*s12 - p2q*s13 - p3q*s13 + p1q*s23)/
              ((p1q + p2q + p3q)*(s12 + s13)))))/
          (2*p1q*p3q^4*s12^3*s13*s23^2 + 2*p1q*p2q^4*s12*s13^3*s23^2 +
           2*p1q^4*p2q*s12*s13*s23^4 + p1q^2*p2q^3*(2*s12*s13^3*s23^2 -
             4*s12*s13^2*s23^3) + p1q^3*p2q^2*(-4*s12*s13^2*s23^3 +
             2*s12*s13*s23^4) + p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*
              s23^2 + p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
           p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*
              s23^2 + p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
               (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) + p1q^3*(-4*s12^2*s13*
                s23^3 + 2*s12*s13*s23^4)) +
           p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
             2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*((-4*s12^2*s13^2 +
                 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*s13^2)*s23^3) +
             p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*s23^3 + 4*s12*s13*
                s23^4))) + ((p2q^5*(18*s12^2*s13^3 + 18*s12*s13^4 +
              (36*s12*s13^3 + 18*s13^4)*s23 + 18*s13^3*s23^2) +
            p1q*p3q^4*((-s12^3 - s12^2*s13)*s23^2 - s12^2*s23^3) +
            p1q*p2q^4*(18*s12^2*s13^3 + 18*s12*s13^4 + (45*s12*s13^3 +
                27*s13^4)*s23 + (-3*s12*s13^2 + 24*s13^3)*s23^2 -
              3*s13^2*s23^3) + p1q^2*p2q^3*((-36*s12^3*s13 - 81*s12^2*s13^2 -
                45*s12*s13^3)*s23 + (-90*s12^2*s13 - 138*s12*s13^2 -
                39*s13^3)*s23^2 + (-70*s12*s13 - 55*s13^2)*s23^3 -
              16*s13*s23^4) + p1q^4*p2q*((-s12 - s13)*s23^4 - s23^5) +
            p1q^3*p2q^2*((2*s12^3 + 13*s12^2*s13 + 11*s12*s13^2)*s23^2 +
              (6*s12^2 + 28*s12*s13 + 13*s13^2)*s23^3 + (5*s12 + 14*s13)*s23^
                4 + s23^5) + p3q^3*(p2q^2*(18*s12^4*s13 + 18*s12^3*s13^2 +
                (54*s12^3*s13 + 36*s12^2*s13^2)*s23 + (54*s12^2*s13 +
                  18*s12*s13^2)*s23^2 + 18*s12*s13*s23^3) +
              p1q*p2q*((-9*s12^3*s13 - 9*s12^2*s13^2)*s23 +
                (-16*s12^2*s13 - 7*s12*s13^2)*s23^2 + (2*s12^2 - 5*s12*s13)*
                 s23^3 + 2*s12*s23^4) + p1q^2*((-s12^3 - s12^2*s13)*s23^2 +
                (s12^2 + 2*s12*s13)*s23^3 + 2*s12*s23^4)) +
            p3q*(p2q^4*(-36*s12^3*s13^2 - 18*s12^2*s13^3 + 18*s12*s13^4 +
                (-72*s12^2*s13^2 + 18*s12*s13^3 + 36*s13^4)*s23 +
                (-36*s12*s13^2 + 36*s13^3)*s23^2) + p1q*p2q^3*(-36*s12^3*
                 s13^2 - 36*s12^2*s13^3 + (-72*s12^3*s13 - 216*s12^2*s13^2 -
                  81*s12*s13^3 + 27*s13^4)*s23 + (-178*s12^2*s13 -
                  263*s12*s13^2 - 22*s13^3)*s23^2 + (-140*s12*s13 - 83*s13^2)*
                 s23^3 - 34*s13*s23^4) + p1q^3*p2q*((2*s12^3 + 13*s12^2*s13 +
                  11*s12*s13^2)*s23^2 + (8*s12^2 + 30*s12*s13 + 13*s13^2)*
                 s23^3 + (6*s12 + 13*s13)*s23^4) + p1q^4*((-s12 - s13)*
                 s23^4 - s23^5) + p1q^2*p2q^2*((-27*s12^3*s13 - 54*s12^2*
                   s13^2 - 27*s12*s13^3)*s23 + (4*s12^3 - 55*s12^2*s13 -
                  98*s12*s13^2 - 39*s13^3)*s23^2 + (12*s12^2 - 27*s12*s13 -
                  42*s13^2)*s23^3 + (10*s12 - s13)*s23^4 + 2*s23^5)) +
            p3q^2*(p2q^3*(18*s12^4*s13 - 18*s12^3*s13^2 - 36*s12^2*s13^3 +
                (36*s12^3*s13 - 90*s12^2*s13^2 - 72*s12*s13^3)*s23 +
                (18*s12^2*s13 - 90*s12*s13^2 - 18*s13^3)*s23^2 -
                18*s13^2*s23^3) + p1q*p2q^2*(18*s12^4*s13 + 18*s12^3*s13^2 +
                (27*s12^3*s13 - 9*s12^2*s13^2 - 18*s12*s13^3)*s23 +
                (s12^3 - 13*s12^2*s13 - 69*s12*s13^2 - 28*s13^3)*s23^2 +
                (3*s12^2 - 37*s12*s13 - 44*s13^2)*s23^3 + (2*s12 - 16*s13)*
                 s23^4) + p1q^3*((2*s12^2 + 2*s12*s13)*s23^3 + (s12 - s13)*
                 s23^4 - s23^5) + p1q^2*p2q*((-9*s12^3*s13 - 9*s12^2*s13^2)*
                 s23 + (3*s12^3 - 2*s12^2*s13 + 4*s12*s13^2)*s23^2 +
                (13*s12^2 + 27*s12*s13 + 13*s13^2)*s23^3 + (12*s12 + 15*s13)*
                 s23^4 + 2*s23^5)))*PolyLog(2, -((p3q*s12 - p1q*s13 - p2q*
                s13 - p1q*s23 - p2q*s23)/((p1q + p2q)*(s13 + s23)))))/
          (2*p1q*p3q^4*s12^3*s13*s23^2 + 2*p1q*p2q^4*s12*s13^3*s23^2 +
           2*p1q^4*p2q*s12*s13*s23^4 + p1q^2*p2q^3*(2*s12*s13^3*s23^2 -
             4*s12*s13^2*s23^3) + p1q^3*p2q^2*(-4*s12*s13^2*s23^3 +
             2*s12*s13*s23^4) + p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*
              s23^2 + p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
           p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*
              s23^2 + p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
               (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) + p1q^3*(-4*s12^2*s13*
                s23^3 + 2*s12*s13*s23^4)) +
           p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
             2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*((-4*s12^2*s13^2 +
                 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*s13^2)*s23^3) +
             p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*s23^3 + 4*s12*s13*
                s23^4))) + ((p2q^5*(-18*s12^2*s13^3 - 18*s12*s13^4 +
              (-36*s12*s13^3 - 18*s13^4)*s23 - 18*s13^3*s23^2) +
            p1q*p3q^4*((s12^3 + s12^2*s13)*s23^2 + s12^2*s23^3) +
            p1q*p2q^4*(-18*s12^2*s13^3 - 18*s12*s13^4 + (-45*s12*s13^3 -
                27*s13^4)*s23 + (3*s12*s13^2 - 24*s13^3)*s23^2 +
              3*s13^2*s23^3) + p1q^2*p2q^3*((36*s12^3*s13 + 81*s12^2*s13^2 +
                45*s12*s13^3)*s23 + (90*s12^2*s13 + 138*s12*s13^2 + 39*s13^3)*
               s23^2 + (70*s12*s13 + 55*s13^2)*s23^3 + 16*s13*s23^4) +
            p1q^3*p2q^2*((-2*s12^3 - 13*s12^2*s13 - 11*s12*s13^2)*s23^2 +
              (-6*s12^2 - 28*s12*s13 - 13*s13^2)*s23^3 + (-5*s12 - 14*s13)*
               s23^4 - s23^5) + p1q^4*p2q*((s12 + s13)*s23^4 + s23^5) +
            p3q^3*(p2q^2*(-18*s12^4*s13 - 18*s12^3*s13^2 + (-54*s12^3*s13 -
                  36*s12^2*s13^2)*s23 + (-54*s12^2*s13 - 18*s12*s13^2)*
                 s23^2 - 18*s12*s13*s23^3) + p1q^2*((s12^3 + s12^2*s13)*
                 s23^2 + (-s12^2 - 2*s12*s13)*s23^3 - 2*s12*s23^4) +
              p1q*p2q*((9*s12^3*s13 + 9*s12^2*s13^2)*s23 + (16*s12^2*s13 +
                  7*s12*s13^2)*s23^2 + (-2*s12^2 + 5*s12*s13)*s23^3 -
                2*s12*s23^4)) + p3q^2*(p2q^3*(-18*s12^4*s13 + 18*s12^3*
                 s13^2 + 36*s12^2*s13^3 + (-36*s12^3*s13 + 90*s12^2*s13^2 +
                  72*s12*s13^3)*s23 + (-18*s12^2*s13 + 90*s12*s13^2 +
                  18*s13^3)*s23^2 + 18*s13^2*s23^3) + p1q*p2q^2*(
                -18*s12^4*s13 - 18*s12^3*s13^2 + (-27*s12^3*s13 +
                  9*s12^2*s13^2 + 18*s12*s13^3)*s23 + (-s12^3 + 13*s12^2*
                   s13 + 69*s12*s13^2 + 28*s13^3)*s23^2 + (-3*s12^2 +
                  37*s12*s13 + 44*s13^2)*s23^3 + (-2*s12 + 16*s13)*s23^4) +
              p1q^2*p2q*((9*s12^3*s13 + 9*s12^2*s13^2)*s23 +
                (-3*s12^3 + 2*s12^2*s13 - 4*s12*s13^2)*s23^2 +
                (-13*s12^2 - 27*s12*s13 - 13*s13^2)*s23^3 +
                (-12*s12 - 15*s13)*s23^4 - 2*s23^5) + p1q^3*(
                (-2*s12^2 - 2*s12*s13)*s23^3 + (-s12 + s13)*s23^4 + s23^5)) +
            p3q*(p2q^4*(36*s12^3*s13^2 + 18*s12^2*s13^3 - 18*s12*s13^4 +
                (72*s12^2*s13^2 - 18*s12*s13^3 - 36*s13^4)*s23 +
                (36*s12*s13^2 - 36*s13^3)*s23^2) + p1q^3*p2q*(
                (-2*s12^3 - 13*s12^2*s13 - 11*s12*s13^2)*s23^2 +
                (-8*s12^2 - 30*s12*s13 - 13*s13^2)*s23^3 + (-6*s12 - 13*s13)*
                 s23^4) + p1q*p2q^3*(36*s12^3*s13^2 + 36*s12^2*s13^3 +
                (72*s12^3*s13 + 216*s12^2*s13^2 + 81*s12*s13^3 - 27*s13^4)*
                 s23 + (178*s12^2*s13 + 263*s12*s13^2 + 22*s13^3)*s23^2 +
                (140*s12*s13 + 83*s13^2)*s23^3 + 34*s13*s23^4) +
              p1q^2*p2q^2*((27*s12^3*s13 + 54*s12^2*s13^2 + 27*s12*s13^3)*
                 s23 + (-4*s12^3 + 55*s12^2*s13 + 98*s12*s13^2 + 39*s13^3)*
                 s23^2 + (-12*s12^2 + 27*s12*s13 + 42*s13^2)*s23^3 +
                (-10*s12 + s13)*s23^4 - 2*s23^5) + p1q^4*((s12 + s13)*s23^4 +
                s23^5)))*PolyLog(2, -((p3q*s12 - p1q*s13 - p2q*s13 - p1q*
                s23 - p2q*s23)/((p1q + p2q + p3q)*(s13 + s23)))))/
          (2*p1q*p3q^4*s12^3*s13*s23^2 + 2*p1q*p2q^4*s12*s13^3*s23^2 +
           2*p1q^4*p2q*s12*s13*s23^4 + p1q^2*p2q^3*(2*s12*s13^3*s23^2 -
             4*s12*s13^2*s23^3) + p1q^3*p2q^2*(-4*s12*s13^2*s23^3 +
             2*s12*s13*s23^4) + p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*
              s23^2 + p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
           p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*
              s23^2 + p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
               (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) + p1q^3*(-4*s12^2*s13*
                s23^3 + 2*s12*s13*s23^4)) +
           p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
             2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*((-4*s12^2*s13^2 +
                 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*s13^2)*s23^3) +
             p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*s23^3 + 4*s12*s13*
                s23^4))) + ((p2q^5*(18*s12^2*s13^3 + 18*s12*s13^4 +
              18*s12*s13^3*s23) + p1q*p3q^4*((-9*s12^4 - 9*s12^3*s13)*s23 +
              (-10*s12^3 - s12^2*s13)*s23^2 - s12^2*s23^3) +
            p1q*p2q^4*(18*s12^2*s13^3 + 18*s12*s13^4 + (-36*s12^2*s13^2 -
                18*s12*s13^3)*s23 + (-39*s12*s13^2 - 3*s13^3)*s23^2 -
              3*s13^2*s23^3) + p1q^2*p2q^3*((-9*s12^3*s13 - 54*s12^2*s13^2 -
                45*s12*s13^3)*s23 + (9*s12^2*s13 - 30*s12*s13^2 - 3*s13^3)*
               s23^2 + (20*s12*s13 - s13^2)*s23^3 + 2*s13*s23^4) +
            p1q^4*p2q*((-9*s12^2 - 9*s12*s13)*s23^3 + (-10*s12 - s13)*s23^4 -
              s23^5) + p1q^3*p2q^2*((11*s12^3 + 49*s12^2*s13 + 38*s12*s13^2)*
               s23^2 + (15*s12^2 + 46*s12*s13 + 4*s13^2)*s23^3 +
              (5*s12 + 5*s13)*s23^4 + s23^5) + p3q^3*(p2q^2*(18*s12^4*s13 +
                18*s12^3*s13^2 - 18*s12^4*s23 + (-36*s12^3 - 18*s12^2*s13)*
                 s23^2 - 18*s12^2*s23^3) + p1q*p2q*((-27*s12^4 - 45*s12^3*
                   s13 - 18*s12^2*s13^2)*s23 + (-72*s12^3 - 97*s12^2*s13 -
                  34*s12*s13^2)*s23^2 + (-79*s12^2 - 68*s12*s13)*s23^3 -
                34*s12*s23^4) + p1q^2*((-9*s12^4 - 9*s12^3*s13)*s23 +
                (8*s12^3 + 17*s12^2*s13)*s23^2 + (19*s12^2 + 2*s12*s13)*
                 s23^3 + 2*s12*s23^4)) + p3q^2*(p2q^3*(18*s12^4*s13 -
                18*s12^3*s13^2 - 36*s12^2*s13^3 + 54*s12^3*s13*s23 +
                (54*s12^2*s13 + 18*s12*s13^2)*s23^2 + 18*s12*s13*s23^3) +
              p1q*p2q^2*(18*s12^4*s13 + 18*s12^3*s13^2 + (-54*s12^4 -
                  18*s12^3*s13 + 45*s12^2*s13^2 + 27*s12*s13^3)*s23 +
                (-116*s12^3 + 5*s12^2*s13 + 75*s12*s13^2 - s13^3)*s23^2 +
                (-78*s12^2 + 35*s12*s13 + s13^2)*s23^3 + (-16*s12 + 2*s13)*
                 s23^4) + p1q^3*((18*s12^3 + 18*s12^2*s13)*s23^2 +
                (11*s12^2 - 7*s12*s13)*s23^3 + (-8*s12 - s13)*s23^4 -
                s23^5) + p1q^2*p2q*((-18*s12^4 - 36*s12^3*s13 - 18*s12^2*
                   s13^2)*s23 + (-33*s12^3 - 47*s12^2*s13 - 14*s12*s13^2)*
                 s23^2 + (-50*s12^2 - 45*s12*s13 + 4*s13^2)*s23^3 +
                (-33*s12 + 6*s13)*s23^4 + 2*s23^5)) +
            p3q*(p2q^4*(-36*s12^3*s13^2 - 18*s12^2*s13^3 + 18*s12*s13^4 -
                54*s12^2*s13^2*s23 - 18*s12*s13^2*s23^2) + p1q*p2q^3*(
                -36*s12^3*s13^2 - 36*s12^2*s13^3 + (18*s12^3*s13 -
                  81*s12^2*s13^2 - 63*s12*s13^3)*s23 + (47*s12^2*s13 -
                  38*s12*s13^2 - 4*s13^3)*s23^2 + (31*s12*s13 - 2*s13^2)*
                 s23^3 + 2*s13*s23^4) + p1q^3*p2q*((11*s12^3 + 31*s12^2*s13 +
                  20*s12*s13^2)*s23^2 + (-10*s12^2 + 3*s12*s13 + 4*s13^2)*
                 s23^3 + (-21*s12 + 4*s13)*s23^4) + p1q^4*(
                (-9*s12^2 - 9*s12*s13)*s23^3 + (-10*s12 - s13)*s23^4 -
                s23^5) + p1q^2*p2q^2*((-27*s12^4 - 36*s12^3*s13 -
                  18*s12^2*s13^2 - 9*s12*s13^3)*s23 + (-41*s12^3 +
                  53*s12^2*s13 + 64*s12*s13^2 - 3*s13^3)*s23^2 +
                (-15*s12^2 + 81*s12*s13 + 3*s13^2)*s23^3 + (s12 + 8*s13)*
                 s23^4 + 2*s23^5)))*PolyLog(2, -((-(p1q*s12) - p3q*s12 + p2q*
                s13 - p1q*s23 - p3q*s23)/((p1q + p3q)*(s12 + s23)))))/
          (2*p1q*p3q^4*s12^3*s13*s23^2 + 2*p1q*p2q^4*s12*s13^3*s23^2 +
           2*p1q^4*p2q*s12*s13*s23^4 + p1q^2*p2q^3*(2*s12*s13^3*s23^2 -
             4*s12*s13^2*s23^3) + p1q^3*p2q^2*(-4*s12*s13^2*s23^3 +
             2*s12*s13*s23^4) + p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*
              s23^2 + p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
           p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*
              s23^2 + p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
               (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) + p1q^3*(-4*s12^2*s13*
                s23^3 + 2*s12*s13*s23^4)) +
           p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
             2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*((-4*s12^2*s13^2 +
                 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*s13^2)*s23^3) +
             p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*s23^3 + 4*s12*s13*
                s23^4))) + ((p2q^5*(-18*s12^2*s13^3 - 18*s12*s13^4 -
              18*s12*s13^3*s23) + p1q*p3q^4*((9*s12^4 + 9*s12^3*s13)*s23 +
              (10*s12^3 + s12^2*s13)*s23^2 + s12^2*s23^3) +
            p1q*p2q^4*(-18*s12^2*s13^3 - 18*s12*s13^4 + (36*s12^2*s13^2 +
                18*s12*s13^3)*s23 + (39*s12*s13^2 + 3*s13^3)*s23^2 +
              3*s13^2*s23^3) + p1q^2*p2q^3*((9*s12^3*s13 + 54*s12^2*s13^2 +
                45*s12*s13^3)*s23 + (-9*s12^2*s13 + 30*s12*s13^2 + 3*s13^3)*
               s23^2 + (-20*s12*s13 + s13^2)*s23^3 - 2*s13*s23^4) +
            p1q^3*p2q^2*((-11*s12^3 - 49*s12^2*s13 - 38*s12*s13^2)*s23^2 +
              (-15*s12^2 - 46*s12*s13 - 4*s13^2)*s23^3 + (-5*s12 - 5*s13)*s23^
                4 - s23^5) + p1q^4*p2q*((9*s12^2 + 9*s12*s13)*s23^3 +
              (10*s12 + s13)*s23^4 + s23^5) + p3q^3*(p2q^2*(-18*s12^4*s13 -
                18*s12^3*s13^2 + 18*s12^4*s23 + (36*s12^3 + 18*s12^2*s13)*
                 s23^2 + 18*s12^2*s23^3) + p1q^2*((9*s12^4 + 9*s12^3*s13)*
                 s23 + (-8*s12^3 - 17*s12^2*s13)*s23^2 + (-19*s12^2 -
                  2*s12*s13)*s23^3 - 2*s12*s23^4) + p1q*p2q*(
                (27*s12^4 + 45*s12^3*s13 + 18*s12^2*s13^2)*s23 +
                (72*s12^3 + 97*s12^2*s13 + 34*s12*s13^2)*s23^2 +
                (79*s12^2 + 68*s12*s13)*s23^3 + 34*s12*s23^4)) +
            p3q^2*(p2q^3*(-18*s12^4*s13 + 18*s12^3*s13^2 + 36*s12^2*s13^3 -
                54*s12^3*s13*s23 + (-54*s12^2*s13 - 18*s12*s13^2)*s23^2 -
                18*s12*s13*s23^3) + p1q*p2q^2*(-18*s12^4*s13 - 18*s12^3*
                 s13^2 + (54*s12^4 + 18*s12^3*s13 - 45*s12^2*s13^2 -
                  27*s12*s13^3)*s23 + (116*s12^3 - 5*s12^2*s13 -
                  75*s12*s13^2 + s13^3)*s23^2 + (78*s12^2 - 35*s12*s13 -
                  s13^2)*s23^3 + (16*s12 - 2*s13)*s23^4) + p1q^2*p2q*(
                (18*s12^4 + 36*s12^3*s13 + 18*s12^2*s13^2)*s23 +
                (33*s12^3 + 47*s12^2*s13 + 14*s12*s13^2)*s23^2 +
                (50*s12^2 + 45*s12*s13 - 4*s13^2)*s23^3 + (33*s12 - 6*s13)*
                 s23^4 - 2*s23^5) + p1q^3*((-18*s12^3 - 18*s12^2*s13)*s23^2 +
                (-11*s12^2 + 7*s12*s13)*s23^3 + (8*s12 + s13)*s23^4 +
                s23^5)) + p3q*(p2q^4*(36*s12^3*s13^2 + 18*s12^2*s13^3 -
                18*s12*s13^4 + 54*s12^2*s13^2*s23 + 18*s12*s13^2*s23^2) +
              p1q^3*p2q*((-11*s12^3 - 31*s12^2*s13 - 20*s12*s13^2)*s23^2 +
                (10*s12^2 - 3*s12*s13 - 4*s13^2)*s23^3 + (21*s12 - 4*s13)*
                 s23^4) + p1q*p2q^3*(36*s12^3*s13^2 + 36*s12^2*s13^3 +
                (-18*s12^3*s13 + 81*s12^2*s13^2 + 63*s12*s13^3)*s23 +
                (-47*s12^2*s13 + 38*s12*s13^2 + 4*s13^3)*s23^2 +
                (-31*s12*s13 + 2*s13^2)*s23^3 - 2*s13*s23^4) +
              p1q^2*p2q^2*((27*s12^4 + 36*s12^3*s13 + 18*s12^2*s13^2 +
                  9*s12*s13^3)*s23 + (41*s12^3 - 53*s12^2*s13 - 64*s12*
                   s13^2 + 3*s13^3)*s23^2 + (15*s12^2 - 81*s12*s13 - 3*s13^2)*
                 s23^3 + (-s12 - 8*s13)*s23^4 - 2*s23^5) +
              p1q^4*((9*s12^2 + 9*s12*s13)*s23^3 + (10*s12 + s13)*s23^4 +
                s23^5)))*PolyLog(2, -((-(p1q*s12) - p3q*s12 + p2q*s13 - p1q*
                s23 - p3q*s23)/((p1q + p2q + p3q)*(s12 + s23)))))/
          (2*p1q*p3q^4*s12^3*s13*s23^2 + 2*p1q*p2q^4*s12*s13^3*s23^2 +
           2*p1q^4*p2q*s12*s13*s23^4 + p1q^2*p2q^3*(2*s12*s13^3*s23^2 -
             4*s12*s13^2*s23^3) + p1q^3*p2q^2*(-4*s12*s13^2*s23^3 +
             2*s12*s13*s23^4) + p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*
              s23^2 + p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
           p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*
              s23^2 + p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
               (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) + p1q^3*(-4*s12^2*s13*
                s23^3 + 2*s12*s13*s23^4)) +
           p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
             2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*((-4*s12^2*s13^2 +
                 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*s13^2)*s23^3) +
             p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*s23^3 + 4*s12*s13*
                s23^4)))) + p2.E0conj*
        ((p2q^2*(-6336*s12^4*s13^2 - 19224*s12^3*s13^3 - 19440*s12^2*s13^4 -
             6552*s12*s13^5 + (-6471*s12^4*s13 - 29070*s12^3*s13^2 - 42588*
                s12^2*s13^3 - 23202*s12*s13^4 - 3213*s13^5)*s23 +
             (-45*s12^4 - 9711*s12^3*s13 - 26253*s12^2*s13^2 - 23445*s12*
                s13^3 - 6426*s13^4)*s23^2 + (-45*s12^3 - 3195*s12^2*s13 -
               6795*s12*s13^2 - 3213*s13^3)*s23^3) +
           p3q^2*(216*s12^4*s13^2 + 432*s12^3*s13^3 + 216*s12^2*s13^4 +
             (90*s12^5 + 531*s12^4*s13 + 1422*s12^3*s13^2 + 1008*s12^2*
                s13^3 + 72*s12*s13^4 + 45*s13^5)*s23 +
             (135*s12^4 + 945*s12^3*s13 + 1251*s12^2*s13^2 + 99*s12*s13^3 +
               90*s13^4)*s23^2 + (45*s12^3 + 459*s12^2*s13 + 27*s12*s13^2 +
               45*s13^3)*s23^3) + p1q^2*((-45*s12^4*s13 - 90*s12^3*s13^2 + 90*
                s12*s13^4 + 45*s13^5)*s23 + (45*s12^4 + 135*s12^3*s13 + 225*
                s12^2*s13^2 + 225*s12*s13^3 + 90*s13^4)*s23^2 +
             (45*s12^3 + 135*s12^2*s13 + 135*s12*s13^2 + 45*s13^3)*s23^3) +
           p1q*p2q*(216*s12^3*s13^3 + 432*s12^2*s13^4 + 216*s12*s13^5 +
             (594*s12^4*s13 + 2952*s12^3*s13^2 + 6156*s12^2*s13^3 + 4968*s12*
                s13^4 + 1170*s13^5)*s23 + (424*s12^4 + 2918*s12^3*s13 + 7772*
                s12^2*s13^2 + 8702*s12*s13^3 + 2560*s13^4)*s23^2 +
             (432*s12^3 + 2046*s12^2*s13 + 4372*s12*s13^2 + 1894*s13^3)*
              s23^3 + (-72*s12^2 + 352*s12*s13 + 424*s13^2)*s23^4) +
           p3q*(p2q*(-6120*s12^4*s13^2 - 18792*s12^3*s13^3 - 19224*s12^2*
                s13^4 - 6552*s12*s13^5 + (90*s12^5 - 7524*s12^4*s13 -
                 30816*s12^3*s13^2 - 41580*s12^2*s13^3 - 19962*s12*s13^4 -
                 1584*s13^5)*s23 + (-1494*s12^4 - 13518*s12^3*s13 -
                 26586*s12^2*s13^2 - 18594*s12*s13^3 - 3168*s13^4)*s23^2 +
               (-1584*s12^3 - 4320*s12^2*s13 - 5184*s12*s13^2 - 1584*s13^3)*
                s23^3) + p1q*(-216*s12^4*s13^2 - 432*s12^3*s13^3 - 216*s12^2*
                s13^4 + (-90*s12^5 + 1512*s12^4*s13 + 4140*s12^3*s13^2 +
                 3744*s12^2*s13^3 + 702*s12*s13^4 - 504*s13^5)*s23 +
               (1828*s12^4 + 6518*s12^3*s13 + 7196*s12^2*s13^2 +
                 2582*s12*s13^3 - 788*s13^4)*s23^2 + (1926*s12^3 +
                 3144*s12^2*s13 + 2302*s12*s13^2 + 220*s13^3)*s23^3 +
               (-72*s12^2 + 352*s12*s13 + 424*s13^2)*s23^4)))/
          (p1q*p2q*((36*s12^3*s13^2 + 72*s12^2*s13^3 + 36*s12*s13^4)*s23^2 +
             (36*s12^3*s13 + 72*s12^2*s13^2 + 36*s12*s13^3)*s23^3) +
           p1q*p3q*((36*s12^3*s13^2 + 72*s12^2*s13^3 + 36*s12*s13^4)*s23^2 +
             (36*s12^3*s13 + 72*s12^2*s13^2 + 36*s12*s13^3)*s23^3)) +
         (Pi^2*(p3q^5*((180*s12^8 + 360*s12^7*s13 + 27*s12^6*s13^2 +
                153*s12^4*s13^4)*s23 + (360*s12^7 + 270*s12^6*s13 -
                243*s12^5*s13^2 + 243*s12^4*s13^3 + 90*s12^3*s13^4)*s23^2 +
              (180*s12^6 - 90*s12^5*s13 + 90*s12^3*s13^3)*s23^3) +
            p2q^5*(2916*s12^4*s13^5 + 2916*s12^3*s13^6 + (-180*s12^5*s13^3 -
                207*s12^4*s13^4 + 4338*s12^3*s13^5 + 1143*s12^2*s13^6 -
                306*s12*s13^7)*s23 + (-270*s12^4*s13^3 - 117*s12^3*s13^4 +
                1539*s12^2*s13^5 - 396*s12*s13^6 - 180*s13^7)*s23^2 +
              (-90*s12^3*s13^3 + 90*s12*s13^5 - 180*s13^6)*s23^3) +
            p1q*p2q^4*(2916*s12^4*s13^5 + 2916*s12^3*s13^6 +
              (-6309*s12^4*s13^4 - 2268*s12^3*s13^5 + 1125*s12^2*s13^6)*s23 +
              (200*s12^5*s13^2 + 184*s12^4*s13^3 - 9865*s12^3*s13^4 -
                1387*s12^2*s13^5 + 1028*s12*s13^6)*s23^2 + (220*s12^4*s13^2 +
                164*s12^3*s13^3 - 3720*s12^2*s13^4 + 1208*s12*s13^5 +
                520*s13^6)*s23^3 + (20*s12^3*s13^2 + 160*s12^2*s13^3 -
                340*s12*s13^4 + 520*s13^5)*s23^4) + p1q^2*p2q^3*
             ((18*s12^5*s13^3 - 6273*s12^4*s13^4 - 6768*s12^3*s13^5 -
                171*s12^2*s13^6 + 306*s12*s13^7)*s23 + (20*s12^5*s13^2 +
                4180*s12^4*s13^3 - 5059*s12^3*s13^4 - 3457*s12^2*s13^5 +
                416*s12*s13^6 + 180*s13^7)*s23^2 + (140*s12^5*s13 +
                293*s12^4*s13^2 + 7204*s12^3*s13^3 - 1279*s12^2*s13^4 -
                1388*s12*s13^5 + 160*s13^6)*s23^3 + (370*s12^4*s13 +
                43*s12^3*s13^2 + 3019*s12^2*s13^3 - 1388*s12*s13^4 -
                520*s13^5)*s23^4 + (230*s12^3*s13 - 320*s12^2*s13^2 +
                410*s12*s13^3 - 500*s13^4)*s23^5) +
            p1q^5*((153*s12^4*s13^2 - 153*s12^2*s13^4)*s23^3 +
              (180*s12^5 + 450*s12^4*s13 + 423*s12^3*s13^2 - 549*s12^2*
                 s13^3 - 396*s12*s13^4)*s23^4 + (360*s12^4 + 450*s12^3*s13 -
                576*s12*s13^3 - 180*s13^4)*s23^5 + (180*s12^3 - 180*s13^3)*
               s23^6) + p1q^4*p2q*((-306*s12^4*s13^3 + 306*s12^2*s13^5)*s23^
                2 + (-180*s12^5*s13 - 1161*s12^4*s13^2 - 1746*s12^3*s13^3 +
                945*s12^2*s13^4 + 1098*s12*s13^5)*s23^3 + (20*s12^5 -
                230*s12^4*s13 - 1693*s12^3*s13^2 - 1171*s12^2*s13^3 +
                1568*s12*s13^4 + 540*s13^5)*s23^4 + (40*s12^4 + 110*s12^3*
                 s13 - 642*s12^2*s13^2 - 250*s12*s13^3 + 520*s13^4)*s23^5 +
              (20*s12^3 + 160*s12^2*s13 - 160*s12*s13^2 - 20*s13^3)*s23^6) +
            p1q^3*p2q^2*((153*s12^4*s13^4 - 153*s12^2*s13^6)*s23 +
              (-54*s12^5*s13^2 + 3996*s12^4*s13^3 + 5139*s12^3*s13^4 -
                225*s12^2*s13^5 - 1008*s12*s13^6)*s23^2 + (-40*s12^5*s13 -
                1025*s12^4*s13^2 + 5546*s12^3*s13^3 + 3503*s12^2*s13^4 -
                1408*s12*s13^5 - 540*s13^6)*s23^3 + (-160*s12^5 -
                310*s12^4*s13 - 2039*s12^3*s13^2 + 2165*s12^2*s13^3 +
                916*s12*s13^4 - 500*s13^5)*s23^4 + (-320*s12^4 -
                110*s12^3*s13 - 998*s12^2*s13^2 + 736*s12*s13^3 + 200*s13^4)*
               s23^5 + (-160*s12^3 + 160*s12^2*s13 - 160*s12*s13^2 +
                160*s13^3)*s23^6) + p3q^4*(p2q*(2916*s12^6*s13^3 +
                2916*s12^5*s13^4 + (360*s12^8 + 180*s12^7*s13 - 225*s12^6*
                   s13^2 + 4284*s12^5*s13^3 + 801*s12^4*s13^4 - 612*s12^3*
                   s13^5)*s23 + (720*s12^7 - 450*s12^6*s13 - 495*s12^5*
                   s13^2 + 1863*s12^4*s13^3 - 702*s12^3*s13^4 - 360*s12^2*
                   s13^5)*s23^2 + (360*s12^6 - 630*s12^5*s13 + 180*s12^4*
                   s13^2 + 270*s12^3*s13^3 - 360*s12^2*s13^4)*s23^3) +
              p1q*((-1449*s12^6*s13^2 - 1296*s12^5*s13^3 + 153*s12^4*s13^4)*
                 s23 + (-520*s12^7 - 950*s12^6*s13 - 2575*s12^5*s13^2 -
                  433*s12^4*s13^3 + 110*s12^3*s13^4)*s23^2 +
                (-1040*s12^6 - 610*s12^5*s13 - 516*s12^4*s13^2 - 70*s12^3*
                   s13^3 - 20*s12^2*s13^4)*s23^3 + (-520*s12^5 + 340*s12^4*
                   s13 - 160*s12^3*s13^2 - 20*s12^2*s13^3)*s23^4)) +
            p3q^3*(p2q^2*(5832*s12^6*s13^3 - 5832*s12^4*s13^5 +
                (180*s12^8 - 720*s12^7*s13 - 639*s12^6*s13^2 + 8046*s12^5*
                   s13^3 - 6858*s12^4*s13^4 - 2214*s12^3*s13^5 + 765*s12^2*
                   s13^6)*s23 + (360*s12^7 - 1710*s12^6*s13 - 9*s12^5*s13^2 +
                  2853*s12^4*s13^3 - 3699*s12^3*s13^4 + 315*s12^2*s13^5 +
                  450*s12*s13^6)*s23^2 + (180*s12^6 - 990*s12^5*s13 +
                  720*s12^4*s13^2 + 180*s12^3*s13^3 - 900*s12^2*s13^4 +
                  450*s12*s13^5)*s23^3) + p1q*p2q*(2916*s12^6*s13^3 +
                2916*s12^5*s13^4 + (-1602*s12^6*s13^2 - 990*s12^5*s13^3 -
                  2934*s12^4*s13^4 - 630*s12^3*s13^5)*s23 +
                (-1040*s12^7 - 1580*s12^6*s13 - 4996*s12^5*s13^2 -
                  4590*s12^4*s13^3 - 588*s12^3*s13^4 - 526*s12^2*s13^5)*
                 s23^2 + (-2080*s12^6 - 760*s12^5*s13 - 2494*s12^4*s13^2 +
                  208*s12^3*s13^3 - 566*s12^2*s13^4 - 140*s12*s13^5)*s23^3 +
                (-1040*s12^5 + 820*s12^4*s13 - 460*s12^3*s13^2 + 100*s12^2*
                   s13^3 - 140*s12*s13^4)*s23^4) + p1q^2*((-180*s12^8 -
                  360*s12^7*s13 - 1323*s12^6*s13^2 - 1296*s12^5*s13^3 -
                  153*s12^4*s13^4)*s23 + (-340*s12^7 - 50*s12^6*s13 +
                  863*s12^5*s13^2 + 845*s12^4*s13^3 - 718*s12^3*s13^4)*
                 s23^2 + (360*s12^6 + 1290*s12^5*s13 + 3527*s12^4*s13^2 -
                  86*s12^3*s13^3 - 699*s12^2*s13^4)*s23^3 +
                (1020*s12^5 + 570*s12^4*s13 + 1241*s12^3*s13^2 - 609*s12^2*
                   s13^3 - 230*s12*s13^4)*s23^4 + (500*s12^4 - 410*s12^3*
                   s13 + 320*s12^2*s13^2 - 230*s12*s13^3)*s23^5)) +
            p3q^2*(p2q^3*(2916*s12^6*s13^3 - 8748*s12^5*s13^4 - 8748*s12^4*
                 s13^5 + 2916*s12^3*s13^6 + (-540*s12^7*s13 + 153*s12^6*
                   s13^2 + 4356*s12^5*s13^3 - 15714*s12^4*s13^4 + 450*s12^3*
                   s13^5 + 2025*s12^2*s13^6 - 306*s12*s13^7)*s23 +
                (-990*s12^6*s13 + 1143*s12^5*s13^2 + 1467*s12^4*s13^3 -
                  5697*s12^3*s13^4 + 2601*s12^2*s13^5 + 504*s12*s13^6 -
                  180*s13^7)*s23^2 + (-450*s12^5*s13 + 900*s12^4*s13^2 -
                  180*s12^3*s13^3 - 720*s12^2*s13^4 + 990*s12*s13^5 -
                  180*s13^6)*s23^3) + p1q*p2q^2*(2916*s12^6*s13^3 -
                2916*s12^5*s13^4 - 5832*s12^4*s13^5 + (-1125*s12^6*s13^2 -
                  6192*s12^5*s13^3 - 22680*s12^4*s13^4 - 8388*s12^3*s13^5 +
                  477*s12^2*s13^6)*s23 + (-520*s12^7 - 310*s12^6*s13 -
                  3363*s12^5*s13^2 - 12881*s12^4*s13^3 - 14611*s12^3*s13^4 -
                  1791*s12^2*s13^5 + 1028*s12*s13^6)*s23^2 +
                (-1040*s12^6 + 310*s12^5*s13 - 2248*s12^4*s13^2 - 2450*s12^3*
                   s13^3 - 3496*s12^2*s13^4 + 928*s12*s13^5 + 520*s13^6)*
                 s23^3 + (-520*s12^5 + 620*s12^4*s13 - 420*s12^3*s13^2 +
                  420*s12^2*s13^3 - 620*s12*s13^4 + 520*s13^5)*s23^4) +
              p1q^2*p2q*((540*s12^7*s13 + 117*s12^6*s13^2 - 5256*s12^5*
                   s13^3 - 5193*s12^4*s13^4 - 360*s12^3*s13^5)*s23 +
                (20*s12^7 + 1170*s12^6*s13 + 603*s12^5*s13^2 - 125*s12^4*
                   s13^3 + 3316*s12^3*s13^4 - 616*s12^2*s13^5)*s23^2 +
                (1040*s12^6 + 2530*s12^5*s13 + 3895*s12^4*s13^2 + 7970*s12^3*
                   s13^3 - 615*s12^2*s13^4 - 1098*s12*s13^5)*s23^3 +
                (2020*s12^5 + 1310*s12^4*s13 + 2309*s12^3*s13^2 + 1369*s12^2*
                   s13^3 - 1648*s12*s13^4 - 500*s13^5)*s23^4 +
                (1000*s12^4 - 590*s12^3*s13 + 320*s12^2*s13^2 - 50*s12*
                   s13^3 - 500*s13^4)*s23^5) + p1q^3*((153*s12^6*s13^2 -
                  153*s12^4*s13^4)*s23 + (540*s12^7 + 1170*s12^6*s13 +
                  2889*s12^5*s13^2 + 1521*s12^4*s13^3 - 432*s12^3*s13^4)*
                 s23^2 + (1040*s12^6 + 550*s12^5*s13 + 1901*s12^4*s13^2 +
                  398*s12^3*s13^3 + 455*s12^2*s13^4)*s23^3 +
                (300*s12^5 - 1170*s12^4*s13 - 337*s12^3*s13^2 + 589*s12^2*
                   s13^3 + 456*s12*s13^4)*s23^4 + (-360*s12^4 - 390*s12^3*
                   s13 - 322*s12^2*s13^2 + 456*s12*s13^3 + 160*s13^4)*s23^5 +
                (-160*s12^3 + 160*s12^2*s13 - 160*s12*s13^2 + 160*s13^3)*
                 s23^6)) + p3q*(p2q^4*(-5832*s12^5*s13^4 + 5832*s12^3*s13^6 +
                (540*s12^6*s13^2 + 414*s12^5*s13^3 - 8415*s12^4*s13^4 +
                  6390*s12^3*s13^5 + 2403*s12^2*s13^6 - 612*s12*s13^7)*s23 +
                (900*s12^5*s13^2 - 36*s12^4*s13^3 - 2907*s12^3*s13^4 +
                  3465*s12^2*s13^5 - 342*s12*s13^6 - 360*s13^7)*s23^2 +
                (360*s12^4*s13^2 - 270*s12^3*s13^3 - 180*s12^2*s13^4 +
                  630*s12*s13^5 - 360*s13^6)*s23^3) + p1q*p2q^3*(
                -5832*s12^5*s13^4 - 2916*s12^4*s13^5 + 2916*s12^3*s13^6 +
                (-4230*s12^5*s13^3 - 24930*s12^4*s13^4 - 10998*s12^3*s13^5 +
                  954*s12^2*s13^6)*s23 + (320*s12^6*s13 + 554*s12^5*s13^2 -
                  6596*s12^4*s13^3 - 23778*s12^3*s13^4 - 3300*s12^2*s13^5 +
                  2056*s12*s13^6)*s23^2 + (460*s12^5*s13 + 274*s12^4*s13^2 -
                  2240*s12^3*s13^3 - 6670*s12^2*s13^4 + 2276*s12*s13^5 +
                  1040*s13^6)*s23^3 + (140*s12^4*s13 - 100*s12^3*s13^2 +
                  460*s12^2*s13^3 - 820*s12*s13^4 + 1040*s13^5)*s23^4) +
              p1q^2*p2q^2*((-1026*s12^6*s13^2 - 6444*s12^5*s13^3 -
                  11277*s12^4*s13^4 - 6300*s12^3*s13^5 - 441*s12^2*s13^6)*
                 s23 + (-40*s12^6*s13 - 1230*s12^5*s13^2 + 1626*s12^4*s13^3 -
                  1061*s12^3*s13^4 - 3281*s12^2*s13^5 - 430*s12*s13^6)*
                 s23^2 + (500*s12^6 + 1020*s12^5*s13 + 2101*s12^4*s13^2 +
                  13640*s12^3*s13^3 - 79*s12^2*s13^4 - 2846*s12*s13^5 -
                  20*s13^6)*s23^3 + (1000*s12^5 + 1110*s12^4*s13 +
                  1435*s12^3*s13^2 + 4997*s12^2*s13^3 - 2806*s12*s13^4 -
                  1020*s13^5)*s23^4 + (500*s12^4 + 50*s12^3*s13 - 320*s12^2*
                   s13^2 + 590*s12*s13^3 - 1000*s13^4)*s23^5) +
              p1q^4*((-306*s12^5*s13^2 + 306*s12^3*s13^4)*s23^2 +
                (-540*s12^6 - 1260*s12^5*s13 - 1989*s12^4*s13^2 + 324*s12^3*
                   s13^3 + 981*s12^2*s13^4)*s23^3 + (-1060*s12^5 -
                  950*s12^4*s13 - 1315*s12^3*s13^2 + 629*s12^2*s13^3 +
                  290*s12*s13^4)*s23^4 + (-500*s12^4 + 470*s12^3*s13 -
                  642*s12^2*s13^2 + 110*s12*s13^3 - 20*s13^4)*s23^5 +
                (20*s12^3 + 160*s12^2*s13 - 160*s12*s13^2 - 20*s13^3)*
                 s23^6) + p1q^3*p2q*((-306*s12^5*s13^3 + 306*s12^3*s13^5)*
                 s23 + (-360*s12^6*s13 + 324*s12^5*s13^2 + 6138*s12^4*s13^3 +
                  5886*s12^3*s13^4 - 180*s12^2*s13^5)*s23^2 +
                (-40*s12^6 - 1020*s12^5*s13 - 348*s12^4*s13^2 + 7762*s12^3*
                   s13^3 + 2374*s12^2*s13^4 + 140*s12*s13^5)*s23^3 +
                (-400*s12^5 - 1480*s12^4*s13 - 2232*s12^3*s13^2 + 2286*s12^2*
                   s13^3 + 1372*s12*s13^4 + 40*s13^5)*s23^4 +
                (-680*s12^4 - 500*s12^3*s13 - 1320*s12^2*s13^2 + 1192*s12*
                   s13^3 + 360*s13^4)*s23^5 + (-320*s12^3 + 320*s12^2*s13 -
                  320*s12*s13^2 + 320*s13^3)*s23^6))))/
          (216*p1q*p3q^4*s12^5*s13^3*s23^2 + 216*p1q*p2q^4*s12^3*s13^5*
            s23^2 + 216*p1q^4*p2q*s12^3*s13^3*s23^4 + p1q^2*p2q^3*
            (216*s12^3*s13^5*s23^2 - 432*s12^3*s13^4*s23^3) +
           p1q^3*p2q^2*(-432*s12^3*s13^4*s23^3 + 216*s12^3*s13^3*s23^4) +
           p3q^3*(p1q*p2q*(432*s12^5*s13^3 - 432*s12^4*s13^4)*s23^2 +
             p1q^2*(216*s12^5*s13^3*s23^2 - 432*s12^4*s13^3*s23^3)) +
           p3q^2*(p1q*p2q^2*(216*s12^5*s13^3 - 864*s12^4*s13^4 + 216*s12^3*
                s13^5)*s23^2 + p1q^2*p2q*((216*s12^5*s13^3 - 432*s12^4*s13^4)*
                s23^2 + (-864*s12^4*s13^3 - 432*s12^3*s13^4)*s23^3) +
             p1q^3*(-432*s12^4*s13^3*s23^3 + 216*s12^3*s13^3*s23^4)) +
           p3q*(p1q*p2q^3*(-432*s12^4*s13^4 + 432*s12^3*s13^5)*s23^2 +
             216*p1q^4*s12^3*s13^3*s23^4 + p1q^2*p2q^2*((-432*s12^4*s13^4 +
                 216*s12^3*s13^5)*s23^2 + (-432*s12^4*s13^3 - 864*s12^3*
                  s13^4)*s23^3) + p1q^3*p2q*((-432*s12^4*s13^3 - 432*s12^3*
                  s13^4)*s23^3 + 432*s12^3*s13^3*s23^4))) +
         ((p1q*p2q*((-9*s12^2 - 18*s12*s13 - 9*s13^2)*s23 + (-9*s12 - 9*s13)*
               s23^2) + p2q^2*(72*s12^2*s13 + 72*s12*s13^2 + (108*s12*s13 +
                36*s13^2)*s23 + 36*s13*s23^2) +
            p3q*(p1q*((-27*s12^2 - 18*s12*s13 + 9*s13^2)*s23 +
                (-27*s12 + 9*s13)*s23^2) + p2q*(72*s12^2*s13 + 72*s12*s13^2 +
                (18*s12^2 + 108*s12*s13 + 18*s13^2)*s23 + (18*s12 + 18*s13)*
                 s23^2)))*Log(p1q/(p1q + p2q + p3q))^2)/
          (4*p1q*p2q*s12*s13*s23^2 + 4*p1q*p3q*s12*s13*s23^2) +
         ((p2q^2*(36*s12^2*s13 + 36*s12*s13^2 + 36*s12*s13*s23) +
            p1q*p2q*((-9*s12^2 - 9*s12*s13)*s23 + (-11*s12 - 2*s13)*s23^2 -
              2*s23^3) + p3q*(p2q*(36*s12^2*s13 + 36*s12*s13^2 +
                (18*s12^2 + 54*s12*s13)*s23 + 18*s12*s23^2) +
              p1q*((-27*s12^2 - 27*s12*s13)*s23 + (-29*s12 - 2*s13)*s23^2 -
                2*s23^3)))*Log(p2q/(p1q + p2q + p3q))^2)/
          (4*p1q*p2q*s12*s13*s23^2 + 4*p1q*p3q*s12*s13*s23^2) +
         ((p3q^6*(9*s12^4*s13 + 9*s12^3*s13^2 + (s12^4 + 10*s12^3*s13)*s23 +
              s12^3*s23^2) + p2q^6*(-27*s12^2*s13^3 - 63*s12*s13^4 -
              36*s13^5 + (-64*s12*s13^3 - 73*s13^4)*s23 + (-(s12*s13^2) -
                38*s13^3)*s23^2 - s13^2*s23^3) + p1q*p2q^5*(18*s12^2*s13^3 -
              9*s12*s13^4 - 27*s13^5 + (93*s12^2*s13^2 + 185*s12*s13^3 +
                47*s13^4)*s23 + (204*s12*s13^2 + 185*s13^3)*s23^2 +
              (2*s12*s13 + 113*s13^2)*s23^3 + 2*s13*s23^4) +
            p1q^6*((9*s12^2*s13 + 18*s12*s13^2 + 9*s13^3)*s23^2 +
              (18*s12*s13 + 18*s13^2)*s23^3 + 9*s13*s23^4) +
            p1q^2*p2q^4*(-36*s12^3*s13^2 + 18*s12^2*s13^3 + 81*s12*s13^4 +
              27*s13^5 + (-70*s12^3*s13 - 152*s12^2*s13^2 + 96*s12*s13^3 +
                115*s13^4)*s23 + (-207*s12^2*s13 - 164*s12*s13^2 + 107*s13^3)*
               s23^2 + (-212*s12*s13 - 56*s13^2)*s23^3 + (-s12 - 76*s13)*s23^
                4 - s23^5) + p1q^3*p2q^3*(-36*s12^3*s13^2 - 18*s12^2*s13^3 +
              45*s12*s13^4 + 27*s13^5 + (-106*s12^3*s13 - 371*s12^2*s13^2 -
                279*s12*s13^3 - 41*s13^4)*s23 + (-2*s12^3 - 262*s12^2*s13 -
                493*s12*s13^2 - 178*s13^3)*s23^2 + (-3*s12^2 - 217*s12*s13 -
                172*s13^2)*s23^3 - 61*s13*s23^4 + s23^5) +
            p1q^5*p2q*((-18*s12^2*s13^2 - 36*s12*s13^3 - 18*s13^4)*s23 +
              (54*s12^2*s13 + 63*s12*s13^2 + 9*s13^3)*s23^2 +
              (3*s12^2 + 97*s12*s13 + 67*s13^2)*s23^3 + (6*s12 + 43*s13)*s23^
                4 + 3*s23^5) + p1q^4*p2q^2*(9*s12^2*s13^3 + 18*s12*s13^4 +
              9*s13^5 + (-36*s12^3*s13 - 144*s12^2*s13^2 - 162*s12*s13^3 -
                54*s13^4)*s23 + (-2*s12^3 - 10*s12^2*s13 - 79*s12*s13^2 -
                62*s13^3)*s23^2 + (76*s12*s13 + 47*s13^2)*s23^3 +
              (7*s12 + 51*s13)*s23^4 + 5*s23^5) +
            p3q^5*(p1q*(9*s12^4*s13 + 9*s12^3*s13^2 + (s12^4 - 17*s12^3*s13 -
                  27*s12^2*s13^2)*s23 + (-2*s12^3 - 30*s12^2*s13)*s23^2 -
                3*s12^2*s23^3) + p2q*(-18*s12^3*s13^2 - 18*s12^2*s13^3 +
                (-s12^4 - 4*s12^3*s13 - 21*s12^2*s13^2)*s23 +
                (-2*s12^3 - 4*s12^2*s13)*s23^2 - s12^2*s23^3)) +
            p3q^4*(p2q^2*(-18*s12^4*s13 - 18*s12^3*s13^2 + 9*s12^2*s13^3 +
                9*s12*s13^4 + (-s12^4 - 16*s12^3*s13 + 6*s12^2*s13^2 +
                  12*s12*s13^3)*s23 + (6*s12^2*s13 + 5*s12*s13^2)*s23^2 +
                (s12^2 + 2*s12*s13)*s23^3) + p1q*p2q*(-9*s12^3*s13^2 -
                9*s12^2*s13^3 + (s12^4 - 13*s12^3*s13 - 23*s12^2*s13^2)*s23 +
                (2*s12^3 - 11*s12^2*s13 + 2*s12*s13^2)*s23^2 +
                (3*s12^2 + 4*s12*s13)*s23^3 + 2*s12*s23^4) +
              p1q^2*(9*s12^3*s13^2 + 9*s12^2*s13^3 + (3*s12^4 - 38*s12^3*
                   s13 - 32*s12^2*s13^2)*s23 + (3*s12^3 - 14*s12^2*s13 +
                  27*s12*s13^2)*s23^2 + (3*s12^2 + 30*s12*s13)*s23^3 +
                3*s12*s23^4)) + p3q^3*(p2q^3*(-36*s12^4*s13 - 36*s12^3*
                 s13^2 + (s12^4 - 68*s12^3*s13 - 36*s12^2*s13^2 -
                  4*s12*s13^3 - s13^4)*s23 + (2*s12^3 - 34*s12^2*s13 -
                  6*s12*s13^2 - 2*s13^3)*s23^2 + (s12^2 - 2*s12*s13 - s13^2)*
                 s23^3) + p1q*p2q^2*(-27*s12^4*s13 - 81*s12^3*s13^2 -
                63*s12^2*s13^3 - 9*s12*s13^4 + (-s12^4 - 31*s12^3*s13 -
                  100*s12^2*s13^2 - 61*s12*s13^3 - 9*s13^4)*s23 +
                (-2*s12^3 - 10*s12^2*s13 - 48*s12*s13^2 - 8*s13^3)*s23^2 +
                (-3*s12^2 - 6*s12*s13 + 3*s13^2)*s23^3 + (-2*s12 + 2*s13)*
                 s23^4) + p1q^2*p2q*(18*s12^4*s13 + 18*s12^3*s13^2 -
                18*s12^2*s13^3 - 18*s12*s13^4 + (9*s12^4 + 2*s12^3*s13 -
                  67*s12^2*s13^2 - 60*s12*s13^3)*s23 + (12*s12^3 +
                  2*s12^2*s13 + 18*s13^3)*s23^2 + (22*s12*s13 + 19*s13^2)*
                 s23^3 - 4*s12*s23^4 - s23^5) + p1q^3*(9*s12^4*s13 +
                27*s12^3*s13^2 + 18*s12^2*s13^3 + (3*s12^4 + 7*s12^3*s13 +
                  13*s12^2*s13^2)*s23 + (47*s12^2*s13 + 55*s12*s13^2)*s23^2 +
                (-6*s12^2 + 43*s12*s13 - 9*s13^2)*s23^3 + (-4*s12 - 10*s13)*
                 s23^4 - s23^5)) + p3q^2*(p2q^4*(-27*s12^4*s13 +
                9*s12^3*s13^2 + 90*s12^2*s13^3 + 54*s12*s13^4 +
                (-66*s12^3*s13 + 66*s12^2*s13^2 + 124*s12*s13^3 + s13^4)*
                 s23 + (-s12^3 - 42*s12^2*s13 + 68*s12*s13^2 + 2*s13^3)*
                 s23^2 + (-s12^2 - 2*s12*s13 + s13^2)*s23^3) +
              p1q*p2q^3*(18*s12^4*s13 + 45*s12^3*s13^2 + 135*s12^2*s13^3 +
                117*s12*s13^4 + 9*s13^5 + (-s12^4 + 89*s12^3*s13 +
                  250*s12^2*s13^2 + 315*s12*s13^3 + 65*s13^4)*s23 +
                (-6*s12^3 + 125*s12^2*s13 + 278*s12*s13^2 + 125*s13^3)*
                 s23^2 + (-7*s12^2 + 54*s12*s13 + 67*s13^2)*s23^3 +
                (-2*s12 - 2*s13)*s23^4) + p1q^2*p2q^2*(90*s12^4*s13 +
                117*s12^3*s13^2 + 63*s12^2*s13^3 + 45*s12*s13^4 + 9*s13^5 +
                (4*s12^4 + 194*s12^3*s13 + 202*s12^2*s13^2 + 194*s12*s13^3 +
                  92*s13^4)*s23 + (-3*s12^3 + 115*s12^2*s13 + 233*s12*s13^2 +
                  219*s13^3)*s23^2 + (-18*s12^2 + 10*s12*s13 + 135*s13^2)*
                 s23^3 - 10*s12*s23^4 + s23^5) + p1q^4*(9*s12^4*s13 +
                18*s12^3*s13^2 + 9*s12^2*s13^3 + (-18*s12^2*s13^2 -
                  18*s12*s13^3)*s23 + (-6*s12^3 - 5*s12^2*s13 - 17*s12*
                   s13^2 - 9*s13^3)*s23^2 + (-9*s12^2 - 16*s12*s13 -
                  32*s13^2)*s23^3 + (-s12 - 21*s13)*s23^4 + 2*s23^5) +
              p1q^3*p2q*(54*s12^4*s13 + 99*s12^3*s13^2 + 45*s12^2*s13^3 +
                (5*s12^4 + 45*s12^3*s13 + 9*s12^2*s13^2 + 14*s12*s13^3 +
                  36*s13^4)*s23 + (-6*s12^3 + s12^2*s13 + 79*s12*s13^2 +
                  111*s13^3)*s23^2 + (-22*s12^2 + s12*s13 + 61*s13^2)*s23^3 +
                (-8*s12 - 11*s13)*s23^4 + 3*s23^5)) +
            p3q*(p2q^5*(54*s12^3*s13^2 + 90*s12^2*s13^3 - 36*s13^5 +
                (129*s12^2*s13^2 + 76*s12*s13^3 - 71*s13^4)*s23 +
                (2*s12^2*s13 + 78*s12*s13^2 - 34*s13^3)*s23^2 +
                (2*s12*s13 + s13^2)*s23^3) + p1q*p2q^4*(-36*s12^3*s13^2 -
                9*s12^2*s13^3 - 27*s12*s13^4 - 54*s13^5 + (16*s12^3*s13 +
                  123*s12^2*s13^2 + 237*s12*s13^3 + 13*s13^4)*s23 +
                (46*s12^2*s13 + 316*s12*s13^2 + 210*s13^3)*s23^2 +
                (2*s12^2 + 30*s12*s13 + 141*s13^2)*s23^3 + (2*s12 - 2*s13)*
                 s23^4) + p1q^2*p2q^3*(36*s12^4*s13 - 108*s12^3*s13^2 -
                216*s12^2*s13^3 - 108*s12*s13^4 - 36*s13^5 +
                (-2*s12^4 + 12*s12^3*s13 - 203*s12^2*s13^2 - 10*s12*s13^3 +
                  63*s13^4)*s23 + (-12*s12^3 - 108*s12^2*s13 + 60*s12*s13^2 +
                  272*s13^3)*s23^2 + (-15*s12^2 - 122*s12*s13 + 132*s13^2)*
                 s23^3 + (-4*s12 - 40*s13)*s23^4 + s23^5) +
              p1q^5*((-18*s12^3*s13 - 36*s12^2*s13^2 - 18*s12*s13^3)*s23 +
                (-27*s12^2*s13 - 27*s12*s13^2)*s23^2 + (3*s12^2 -
                  11*s12*s13 - 5*s13^2)*s23^3 + (6*s12 - 2*s13)*s23^4 +
                3*s23^5) + p1q^3*p2q^2*(36*s12^4*s13 - 36*s12^3*s13^2 -
                153*s12^2*s13^3 - 99*s12*s13^4 - 18*s13^5 +
                (2*s12^4 - 86*s12^3*s13 - 393*s12^2*s13^2 - 247*s12*s13^3 +
                  13*s13^4)*s23 + (-8*s12^3 - 281*s12^2*s13 - 235*s12*s13^2 +
                  140*s13^3)*s23^2 + (-19*s12^2 - 187*s12*s13 + 78*s13^2)*
                 s23^3 + (-4*s12 - 26*s13)*s23^4 + 5*s23^5) +
              p1q^4*p2q*(-18*s12^3*s13^2 - 36*s12^2*s13^3 - 18*s12*s13^4 +
                (-108*s12^3*s13 - 234*s12^2*s13^2 - 108*s12*s13^3 + 18*s13^4)*
                 s23 + (-8*s12^3 - 168*s12^2*s13 - 114*s12*s13^2 + 64*s13^3)*
                 s23^2 + (-9*s12^2 - 66*s12*s13 + 33*s13^2)*s23^3 +
                (6*s12 - 6*s13)*s23^4 + 7*s23^5)))*
           Log((p1q + p2q)/(p1q + p2q + p3q))^2)/(4*p1q*p3q^5*s12^4*s13*s23 +
           p1q*p2q^5*(-4*s12*s13^4*s23 - 4*s12*s13^3*s23^2) +
           p1q^2*p2q^4*(-8*s12*s13^4*s23 + 8*s12*s13^2*s23^3) +
           p1q^4*p2q^2*(8*s12*s13^3*s23^2 - 8*s12*s13*s23^4) +
           p1q^5*p2q*(-4*s12*s13^2*s23^3 - 4*s12*s13*s23^4) +
           p1q^3*p2q^3*(-4*s12*s13^4*s23 + 12*s12*s13^3*s23^2 +
             12*s12*s13^2*s23^3 - 4*s12*s13*s23^4) +
           p3q^4*(p1q^2*((4*s12^4*s13 - 4*s12^3*s13^2)*s23 - 12*s12^3*s13*
                s23^2) + p1q*p2q*((8*s12^4*s13 - 12*s12^3*s13^2)*s23 - 4*
                s12^3*s13*s23^2)) + p3q^3*(p1q*p2q^2*((4*s12^4*s13 -
                 24*s12^3*s13^2 + 12*s12^2*s13^3)*s23 + (-8*s12^3*s13 +
                 8*s12^2*s13^2)*s23^2) + p1q^2*p2q*((4*s12^4*s13 -
                 20*s12^3*s13^2 + 8*s12^2*s13^3)*s23 + (-28*s12^3*s13 +
                 8*s12^2*s13^2)*s23^2 + 8*s12^2*s13*s23^3) +
             p1q^3*(-4*s12^3*s13^2*s23 + (-12*s12^3*s13 + 8*s12^2*s13^2)*
                s23^2 + 12*s12^2*s13*s23^3)) +
           p3q*(p1q*p2q^4*((12*s12^2*s13^3 - 8*s12*s13^4)*s23 +
               (8*s12^2*s13^2 - 8*s12*s13^3)*s23^2) + p1q^2*p2q^3*
              ((20*s12^2*s13^3 - 12*s12*s13^4)*s23 + (16*s12^2*s13^2 +
                 4*s12*s13^3)*s23^2 + (8*s12^2*s13 + 16*s12*s13^2)*s23^3) +
             p1q^4*p2q*((8*s12^2*s13^2 + 8*s12*s13^3)*s23^2 + (12*s12^2*s13 -
                 4*s12*s13^2)*s23^3 - 12*s12*s13*s23^4) + p1q^3*p2q^2*
              ((8*s12^2*s13^3 - 4*s12*s13^4)*s23 + (16*s12^2*s13^2 +
                 20*s12*s13^3)*s23^2 + (20*s12^2*s13 + 16*s12*s13^2)*s23^3 -
               8*s12*s13*s23^4) + p1q^5*(-4*s12*s13^2*s23^3 - 4*s12*s13*
                s23^4)) + p3q^2*(p1q*p2q^3*((-12*s12^3*s13^2 + 24*s12^2*
                  s13^3 - 4*s12*s13^4)*s23 + (-4*s12^3*s13 + 16*s12^2*s13^2 -
                 4*s12*s13^3)*s23^2) + p1q^2*p2q^2*((-16*s12^3*s13^2 +
                 28*s12^2*s13^3 - 4*s12*s13^4)*s23 + (-16*s12^3*s13 +
                 24*s12^2*s13^2 + 4*s12*s13^3)*s23^2 + (16*s12^2*s13 +
                 8*s12*s13^2)*s23^3) + p1q^4*(8*s12^2*s13^2*s23^2 +
               (12*s12^2*s13 - 4*s12*s13^2)*s23^3 - 4*s12*s13*s23^4) +
             p1q^3*p2q*((-4*s12^3*s13^2 + 8*s12^2*s13^3)*s23 +
               (-12*s12^3*s13 + 24*s12^2*s13^2 + 8*s12*s13^3)*s23^2 +
               (32*s12^2*s13 + 4*s12*s13^2)*s23^3 - 4*s12*s13*s23^4))) +
         ((p2q^2*(36*s12^2*s13 + 36*s12*s13^2 + (72*s12*s13 + 36*s13^2)*s23 +
              36*s13*s23^2) + p1q*p2q*((-9*s12*s13 - 9*s13^2)*s23 +
              (-2*s12 - 11*s13)*s23^2 - 2*s23^3) +
            p3q*(p2q*(36*s12^2*s13 + 36*s12*s13^2 + (54*s12*s13 + 18*s13^2)*
                 s23 + 18*s13*s23^2) + p1q*((9*s12*s13 + 9*s13^2)*s23 +
                (-2*s12 + 7*s13)*s23^2 - 2*s23^3)))*
           Log(p3q/(p1q + p2q + p3q))^2)/(4*p1q*p2q*s12*s13*s23^2 +
           4*p1q*p3q*s12*s13*s23^2) +
         ((p2q^6*(9*s12^2*s13^3 + 9*s12*s13^4 + (10*s12*s13^3 + s13^4)*s23 +
              s13^3*s23^2) + p3q^6*(9*s12^4*s13 + 9*s12^3*s13^2 +
              (-s12^4 + 8*s12^3*s13)*s23 + (-2*s12^3 - s12^2*s13)*s23^2 -
              s12^2*s23^3) + p1q*p2q^5*(9*s12^2*s13^3 + 9*s12*s13^4 +
              (-27*s12^2*s13^2 - 13*s12*s13^3 + 5*s13^4)*s23 +
              (-30*s12*s13^2 + 2*s13^3)*s23^2 - 3*s13^2*s23^3) +
            p1q^6*((9*s12^3 + 18*s12^2*s13 + 9*s12*s13^2)*s23^2 +
              (18*s12^2 + 18*s12*s13)*s23^3 + 9*s12*s23^4) +
            p1q^2*p2q^4*(45*s12^3*s13^2 + 81*s12^2*s13^3 + 36*s12*s13^4 +
              (16*s12^2*s13^2 + 12*s12*s13^3 + 5*s13^4)*s23 +
              (27*s12^2*s13 - 14*s12*s13^2 - 7*s13^3)*s23^2 +
              (30*s12*s13 - 9*s13^2)*s23^3 + 3*s13*s23^4) +
            p1q^5*p2q*((-18*s12^3*s13 - 36*s12^2*s13^2 - 18*s12*s13^3)*s23 +
              (-27*s12^2*s13 - 27*s12*s13^2)*s23^2 + (-13*s12^2 -
                23*s12*s13 - s13^2)*s23^3 + (-18*s12 - 6*s13)*s23^4 -
              5*s23^5) + p1q^4*p2q^2*(9*s12^3*s13^2 + 18*s12^2*s13^3 +
              9*s12*s13^4 + (18*s12^3*s13 + 18*s12^2*s13^2)*s23 +
              (11*s12^3 + 93*s12^2*s13 + 57*s12*s13^2 + 2*s13^3)*s23^2 +
              (4*s12^2 + 72*s12*s13 + 17*s13^2)*s23^3 + (-9*s12 + 13*s13)*s23^
                4 - 2*s23^5) + p1q^3*p2q^3*(-36*s12^4*s13 - 54*s12^3*s13^2 -
              9*s12^2*s13^3 + 9*s12*s13^4 + (-92*s12^3*s13 - 161*s12^2*
                 s13^2 - 79*s12*s13^3 - s13^4)*s23 + (-29*s12^2*s13 -
                75*s12*s13^2 - 16*s13^3)*s23^2 + (-9*s12^2 + 27*s12*s13 -
                6*s13^2)*s23^3 + (-10*s12 + 8*s13)*s23^4 - s23^5) +
            p3q^5*(p2q*(36*s12^5 + 72*s12^4*s13 + 18*s12^3*s13^2 -
                18*s12^2*s13^3 + (73*s12^4 + 76*s12^3*s13 - 15*s12^2*s13^2)*
                 s23 + (38*s12^3 + 6*s12^2*s13 + 2*s12*s13^2)*s23^2 +
                (s12^2 + 2*s12*s13)*s23^3) + p1q*(9*s12^5 + 63*s12^4*s13 +
                54*s12^3*s13^2 + (39*s12^4 + 101*s12^3*s13 + 17*s12^2*s13^2)*
                 s23 + (61*s12^3 + 48*s12^2*s13)*s23^2 + (33*s12^2 +
                  2*s12*s13)*s23^3 + 2*s12*s23^4)) +
            p3q^4*(p2q^2*(36*s12^5 - 18*s12^4*s13 - 126*s12^3*s13^2 -
                63*s12^2*s13^3 + 9*s12*s13^4 + (73*s12^4 - 92*s12^3*s13 -
                  150*s12^2*s13^2 + 6*s12*s13^3)*s23 + (38*s12^3 -
                  76*s12^2*s13 - 6*s12*s13^2 - s13^3)*s23^2 +
                (s12^2 - 2*s12*s13 - s13^2)*s23^3) + p1q*p2q*(54*s12^5 +
                117*s12^4*s13 - 45*s12^3*s13^2 - 108*s12^2*s13^3 +
                (73*s12^4 - 15*s12^3*s13 - 257*s12^2*s13^2 - 52*s12*s13^3)*
                 s23 + (6*s12^3 - 136*s12^2*s13 - 78*s12*s13^2)*s23^2 +
                (-15*s12^2 - 26*s12*s13 + 2*s13^2)*s23^3 + (-2*s12 + 2*s13)*
                 s23^4) + p1q^2*(27*s12^5 + 117*s12^4*s13 + 90*s12^3*s13^2 +
                (99*s12^4 + 160*s12^3*s13 - 2*s12^2*s13^2)*s23 +
                (127*s12^3 + 28*s12^2*s13 - 25*s12*s13^2)*s23^2 +
                (32*s12^2 - 48*s12*s13)*s23^3 + (-24*s12 - s13)*s23^4 -
                s23^5)) + p3q*(p2q^5*(-18*s12^3*s13^2 - 18*s12^2*s13^3 +
                (-21*s12^2*s13^2 - 4*s12*s13^3 - s13^4)*s23 +
                (-4*s12*s13^2 - 2*s13^3)*s23^2 - s13^2*s23^3) +
              p1q*p2q^4*(63*s12^3*s13^2 + 135*s12^2*s13^3 + 72*s12*s13^4 +
                (77*s12^2*s13^2 + 99*s12*s13^3 + 13*s13^4)*s23 +
                (2*s12^2*s13 + 13*s12*s13^2 + 10*s13^3)*s23^2 +
                (4*s12*s13 - s13^2)*s23^3 + 2*s13*s23^4) + p1q^4*p2q*(
                -18*s12^4*s13 - 36*s12^3*s13^2 - 18*s12^2*s13^3 +
                (18*s12^4 - 36*s12^3*s13 - 90*s12^2*s13^2 - 36*s12*s13^3)*
                 s23 + (64*s12^3 + 76*s12^2*s13 + 32*s12*s13^2 + 2*s13^3)*
                 s23^2 + (13*s12^2 + 46*s12*s13 + 15*s13^2)*s23^3 -
                46*s12*s23^4 - 13*s23^5) + p1q^5*((-18*s12^4 - 36*s12^3*s13 -
                  18*s12^2*s13^2)*s23 + (-27*s12^3 - 9*s12^2*s13 +
                  18*s12*s13^2)*s23^2 + (-13*s12^2 + 13*s12*s13 - s13^2)*
                 s23^3 + (-9*s12 - 6*s13)*s23^4 - 5*s23^5) + p1q^2*p2q^3*(
                -126*s12^4*s13 - 198*s12^3*s13^2 - 18*s12^2*s13^3 +
                54*s12*s13^4 + (-360*s12^3*s13 - 521*s12^2*s13^2 -
                  154*s12*s13^3 + 7*s13^4)*s23 + (18*s12^3 - 256*s12^2*s13 -
                  288*s12*s13^2 - 26*s13^3)*s23^2 + (19*s12^2 - 34*s12*s13 -
                  28*s13^2)*s23^3 + 4*s13*s23^4 - s23^5) + p1q^3*p2q^2*(
                36*s12^5 + 36*s12^4*s13 - 27*s12^3*s13^2 - 9*s12^2*s13^3 +
                18*s12*s13^4 + (124*s12^4 + 88*s12^3*s13 - 143*s12^2*s13^2 -
                  99*s12*s13^3 - s13^4)*s23 + (227*s12^3 + 315*s12^2*s13 +
                  45*s12*s13^2 - 16*s13^3)*s23^2 + (169*s12^2 + 239*s12*s13 +
                  18*s13^2)*s23^3 + (29*s12 + 32*s13)*s23^4 - s23^5)) +
            p3q^3*(p2q^3*(-72*s12^4*s13 - 72*s12^3*s13^2 + 36*s12^2*s13^3 +
                36*s12*s13^4 + (-s12^4 - 148*s12^3*s13 - 36*s12^2*s13^2 +
                  76*s12*s13^3 + s13^4)*s23 + (-2*s12^3 - 78*s12^2*s13 +
                  38*s12*s13^2 + 2*s13^3)*s23^2 + (-s12^2 - 2*s12*s13 +
                  s13^2)*s23^3) + p1q*p2q^2*(81*s12^5 + 45*s12^4*s13 -
                189*s12^3*s13^2 - 99*s12^2*s13^3 + 54*s12*s13^4 +
                (133*s12^4 - 169*s12^3*s13 - 422*s12^2*s13^2 - 31*s12*s13^3 -
                  s13^4)*s23 + (45*s12^3 - 254*s12^2*s13 - 159*s12*s13^2 -
                  14*s13^3)*s23^2 + (-9*s12^2 - 66*s12*s13 - 15*s13^2)*
                 s23^3 + (-2*s12 - 2*s13)*s23^4) + p1q^3*(27*s12^5 +
                81*s12^4*s13 + 54*s12^3*s13^2 + (59*s12^4 + 13*s12^3*s13 -
                  73*s12^2*s13^2)*s23 + (18*s12^3 - 137*s12^2*s13 -
                  50*s12*s13^2)*s23^2 + (-88*s12^2 - 125*s12*s13 - s13^2)*
                 s23^3 + (-81*s12 - 8*s13)*s23^4 - 7*s23^5) +
              p1q^2*p2q*(36*s12^5 + 72*s12^4*s13 - 108*s12^3*s13^2 -
                144*s12^2*s13^3 + (111*s12^4 - 6*s12^3*s13 - 333*s12^2*
                   s13^2 - 72*s12*s13^3)*s23 + (248*s12^3 + 124*s12^2*s13 -
                  6*s12*s13^2 - 2*s13^3)*s23^2 + (228*s12^2 + 134*s12*s13 +
                  9*s13^2)*s23^3 + (56*s12 + 12*s13)*s23^4 + s23^5)) +
            p3q^2*(p2q^4*(9*s12^4*s13 + 45*s12^3*s13^2 + 54*s12^2*s13^3 +
                18*s12*s13^4 + (12*s12^3*s13 + 78*s12^2*s13^2 + 56*s12*
                   s13^3 - s13^4)*s23 + (5*s12^2*s13 + 42*s12*s13^2)*s23^2 +
                (2*s12*s13 + s13^2)*s23^3) + p1q*p2q^3*(-153*s12^4*s13 -
                243*s12^3*s13^2 - 9*s12^2*s13^3 + 81*s12*s13^4 +
                (-9*s12^4 - 377*s12^3*s13 - 368*s12^2*s13^2 + 25*s12*s13^3 +
                  7*s13^4)*s23 + (-8*s12^3 - 284*s12^2*s13 - 146*s12*s13^2 -
                  6*s13^3)*s23^2 + (3*s12^2 - 70*s12*s13 - 15*s13^2)*s23^3 +
                (2*s12 - 2*s13)*s23^4) + p1q^4*(9*s12^5 + 18*s12^4*s13 +
                9*s12^3*s13^2 + (-18*s12^4 - 90*s12^3*s13 - 72*s12^2*s13^2)*
                 s23 + (-82*s12^3 - 143*s12^2*s13 - 16*s12*s13^2)*s23^2 +
                (-117*s12^2 - 80*s12*s13 - 2*s13^2)*s23^3 +
                (-73*s12 - 13*s13)*s23^4 - 11*s23^5) + p1q^3*p2q*(18*s12^5 +
                9*s12^4*s13 - 81*s12^3*s13^2 - 72*s12^2*s13^3 +
                (129*s12^4 + 67*s12^3*s13 - 145*s12^2*s13^2 - 38*s12*s13^3)*
                 s23 + (344*s12^3 + 369*s12^2*s13 + 133*s12*s13^2)*s23^2 +
                (270*s12^2 + 231*s12*s13 + 23*s13^2)*s23^3 +
                (30*s12 + 16*s13)*s23^4 - 7*s23^5) + p1q^2*p2q^2*(81*s12^5 +
                81*s12^4*s13 - 117*s12^3*s13^2 - 63*s12^2*s13^3 +
                54*s12*s13^4 + (192*s12^4 - 58*s12^3*s13 - 472*s12^2*s13^2 -
                  130*s12*s13^3 + 2*s13^4)*s23 + (247*s12^3 - 7*s12^2*s13 -
                  183*s12*s13^2 - 21*s13^3)*s23^2 + (179*s12^2 + 82*s12*s13 -
                  10*s13^2)*s23^3 + (44*s12 + 14*s13)*s23^4 + s23^5)))*
           Log((p1q + p3q)/(p1q + p2q + p3q))^2)/(-4*p1q*p2q^5*s12*s13^4*
            s23 + p1q*p3q^5*(4*s12^4*s13*s23 + 4*s12^3*s13*s23^2) +
           p1q^2*p2q^4*((4*s12^2*s13^3 - 4*s12*s13^4)*s23 +
             12*s12*s13^3*s23^2) + p1q^3*p2q^3*(4*s12^2*s13^3*s23 +
             (-8*s12^2*s13^2 + 12*s12*s13^3)*s23^2 - 12*s12*s13^2*s23^3) +
           p1q^5*p2q*(4*s12^2*s13*s23^3 + 4*s12*s13*s23^4) +
           p1q^4*p2q^2*(-8*s12^2*s13^2*s23^2 + (4*s12^2*s13 - 12*s12*s13^2)*
              s23^3 + 4*s12*s13*s23^4) + p3q^4*
            (p1q*p2q*((8*s12^4*s13 - 12*s12^3*s13^2)*s23 + (8*s12^3*s13 -
                 8*s12^2*s13^2)*s23^2) + p1q^2*(8*s12^4*s13*s23 - 8*s12^2*s13*
                s23^3)) + p3q^3*(p1q*p2q^2*((4*s12^4*s13 - 24*s12^3*s13^2 +
                 12*s12^2*s13^3)*s23 + (4*s12^3*s13 - 16*s12^2*s13^2 +
                 4*s12*s13^3)*s23^2) + p1q^2*p2q*((12*s12^4*s13 -
                 20*s12^3*s13^2)*s23 + (-4*s12^3*s13 - 16*s12^2*s13^2)*
                s23^2 + (-16*s12^2*s13 - 8*s12*s13^2)*s23^3) +
             p1q^3*(4*s12^4*s13*s23 - 12*s12^3*s13*s23^2 - 12*s12^2*s13*
                s23^3 + 4*s12*s13*s23^4)) +
           p3q^2*(p1q*p2q^3*((-12*s12^3*s13^2 + 24*s12^2*s13^3 - 4*s12*s13^4)*
                s23 + (-8*s12^2*s13^2 + 8*s12*s13^3)*s23^2) +
             p1q^2*p2q^2*((4*s12^4*s13 - 28*s12^3*s13^2 + 16*s12^2*s13^3)*
                s23 + (-4*s12^3*s13 - 24*s12^2*s13^2 + 16*s12*s13^3)*s23^2 +
               (-8*s12^2*s13 - 16*s12*s13^2)*s23^3) +
             p1q^4*(-8*s12^3*s13*s23^2 + 8*s12*s13*s23^4) +
             p1q^3*p2q*((4*s12^4*s13 - 8*s12^3*s13^2)*s23 + (-20*s12^3*s13 -
                 16*s12^2*s13^2)*s23^2 + (-16*s12^2*s13 - 20*s12*s13^2)*
                s23^3 + 8*s12*s13*s23^4)) +
           p3q*(p1q*p2q^4*((12*s12^2*s13^3 - 8*s12*s13^4)*s23 + 4*s12*s13^3*
                s23^2) + p1q^2*p2q^3*((-8*s12^3*s13^2 + 20*s12^2*s13^3 -
                 4*s12*s13^4)*s23 + (-8*s12^2*s13^2 + 28*s12*s13^3)*s23^2 - 8*
                s12*s13^2*s23^3) + p1q^5*(4*s12^2*s13*s23^3 + 4*s12*s13*
                s23^4) + p1q^3*p2q^2*((-8*s12^3*s13^2 + 4*s12^2*s13^3)*s23 +
               (-8*s12^3*s13 - 24*s12^2*s13^2 + 12*s12*s13^3)*s23^2 +
               (-4*s12^2*s13 - 32*s12*s13^2)*s23^3 + 4*s12*s13*s23^4) +
             p1q^4*p2q*((-8*s12^3*s13 - 8*s12^2*s13^2)*s23^2 + (4*s12^2*s13 -
                 12*s12*s13^2)*s23^3 + 12*s12*s13*s23^4))) +
         ((p3q^6*((9*s12^4 - 9*s12^2*s13^2)*s23^2 + (9*s12^3 - 9*s12^2*s13)*
               s23^3) + p2q^6*(108*s12^3*s13^3 + 216*s12^2*s13^4 +
              108*s12*s13^5 + (216*s12^2*s13^3 + 252*s12*s13^4 + 36*s13^5)*
               s23 + (9*s12^2*s13^2 + 108*s12*s13^3 + 27*s13^4)*s23^2 +
              (9*s12*s13^2 - 9*s13^3)*s23^3) + p1q*p2q^5*(108*s12^3*s13^3 +
              216*s12^2*s13^4 + 108*s12*s13^5 + (-279*s12^3*s13^2 -
                423*s12^2*s13^3 - 81*s12*s13^4 + 63*s13^5)*s23 +
              (-513*s12^2*s13^2 - 612*s12*s13^3 - 63*s13^4)*s23^2 +
              (-18*s12^2*s13 - 234*s12*s13^2 - 108*s13^3)*s23^3 +
              (-18*s12*s13 + 18*s13^2)*s23^4) + p1q^4*p2q^2*
             ((18*s12^3*s13 + 180*s12^2*s13^2 + 126*s12*s13^3 - 36*s13^4)*s23^
                2 + (-198*s12^2*s13 + 18*s12*s13^2 + 36*s13^3)*s23^3 +
              (-9*s12^2 - 342*s12*s13 - 45*s13^2)*s23^4 + (-9*s12 - 117*s13)*
               s23^5) + p1q^3*p2q^3*((-9*s12^3*s13^2 - 81*s12^2*s13^3 -
                63*s12*s13^4 + 9*s13^5)*s23 + (-18*s12^4 + 90*s12^3*s13 +
                657*s12^2*s13^2 + 450*s12*s13^3 - 27*s13^4)*s23^2 +
              (-63*s12^3 + 81*s12^2*s13 + 873*s12*s13^2 + 261*s13^3)*s23^3 +
              (-63*s12^2 - 54*s12*s13 + 243*s13^2)*s23^4 + (-18*s12 - 54*s13)*
               s23^5) + p1q^6*((18*s12^2 - 18*s13^2)*s23^4 +
              (18*s12 - 18*s13)*s23^5) + p1q^2*p2q^4*
             ((54*s12^4*s13 - 162*s12^3*s13^2 - 666*s12^2*s13^3 -
                450*s12*s13^4)*s23 + (270*s12^3*s13 + 135*s12^2*s13^2 -
                558*s12*s13^3 - 243*s13^4)*s23^2 + (360*s12^2*s13 +
                423*s12*s13^2 - 99*s13^3)*s23^3 + (9*s12^2 + 144*s12*s13 +
                135*s13^2)*s23^4 + (9*s12 - 9*s13)*s23^5) +
            p1q^5*p2q*((-9*s12^3 - 117*s12^2*s13 - 63*s12*s13^2 + 45*s13^3)*
               s23^3 + (-9*s12^2 - 144*s12*s13 + 9*s13^2)*s23^4 -
              36*s13*s23^5) + p3q^5*(p2q*(108*s12^5*s13 + 216*s12^4*s13^2 +
                108*s12^3*s13^3 + (216*s12^4*s13 + 252*s12^3*s13^2 +
                  36*s12^2*s13^3)*s23 + (90*s12^3*s13 + 36*s12^2*s13^2 +
                  18*s12*s13^3)*s23^2 + (-18*s12^2*s13 + 18*s12*s13^2)*
                 s23^3) + p1q*((-27*s12^5 + 81*s12^4*s13 + 171*s12^3*s13^2 +
                  63*s12^2*s13^3)*s23 + (27*s12^4 + 180*s12^3*s13 +
                  81*s12^2*s13^2)*s23^2 + (36*s12^3 + 18*s12^2*s13 +
                  18*s12*s13^2)*s23^3 + (-18*s12^2 + 18*s12*s13)*s23^4)) +
            p3q*(p2q^5*(-216*s12^4*s13^2 - 108*s12^3*s13^3 + 432*s12^2*
                 s13^4 + 324*s12*s13^5 + (-432*s12^3*s13^2 + 144*s12^2*
                   s13^3 + 684*s12*s13^4 + 108*s13^5)*s23 +
                (-18*s12^3*s13 - 216*s12^2*s13^2 + 270*s12*s13^3 + 108*s13^4)*
                 s23^2 + (-18*s12^2*s13 + 18*s12*s13^2)*s23^3) +
              p1q*p2q^4*(-216*s12^4*s13^2 - 216*s12^3*s13^3 + 216*s12^2*
                 s13^4 + 216*s12*s13^5 + (-162*s12^4*s13 - 1359*s12^3*s13^2 -
                  1791*s12^2*s13^3 - 513*s12*s13^4 + 81*s13^5)*s23 +
                (-306*s12^3*s13 - 1791*s12^2*s13^2 - 1746*s12*s13^3 -
                  189*s13^4)*s23^2 + (-18*s12^3 - 144*s12^2*s13 -
                  648*s12*s13^2 - 270*s13^3)*s23^3 + (-18*s12^2 + 18*s12*s13)*
                 s23^4) + p1q^2*p2q^3*((18*s12^5 - 18*s12^4*s13 - 234*s12^3*
                   s13^2 - 738*s12^2*s13^3 - 540*s12*s13^4)*s23 +
                (54*s12^4 + 720*s12^3*s13 + 1008*s12^2*s13^2 - 288*s12*
                   s13^3 - 234*s13^4)*s23^2 + (36*s12^3 + 1332*s12^2*s13 +
                  1386*s12*s13^2 + 54*s13^3)*s23^3 + (612*s12*s13 +
                  288*s13^2)*s23^4) + p1q^3*p2q^2*((18*s12^4*s13 +
                  153*s12^3*s13^2 + 189*s12^2*s13^3 + 63*s12*s13^4 + 9*s13^5)*
                 s23 + (-36*s12^4 + 594*s12^3*s13 + 1197*s12^2*s13^2 +
                  450*s12*s13^3 - 45*s13^4)*s23^2 + (-99*s12^3 + 639*s12^2*
                   s13 + 765*s12*s13^2 + 171*s13^3)*s23^3 +
                (-117*s12^2 - 90*s12*s13 + 99*s13^2)*s23^4 +
                (-54*s12 - 126*s13)*s23^5) + p1q^4*p2q*((18*s12^4 +
                  144*s12^3*s13 - 144*s12*s13^3 - 18*s13^4)*s23^2 +
                (-18*s12^3 - 36*s12^2*s13 - 162*s12*s13^2 + 72*s13^3)*s23^3 +
                (-18*s12^2 - 180*s12*s13 + 18*s13^2)*s23^4 +
                (18*s12 - 72*s13)*s23^5) + p1q^5*((-45*s12^3 + 63*s12^2*s13 +
                  117*s12*s13^2 + 9*s13^3)*s23^3 + (27*s12^2 + 144*s12*s13 -
                  27*s13^2)*s23^4 + (72*s12 - 36*s13)*s23^5)) +
            p3q^3*(p2q^3*(324*s12^5*s13 - 864*s12^3*s13^3 - 432*s12^2*s13^4 +
                108*s12*s13^5 + (648*s12^4*s13 - 540*s12^3*s13^2 -
                  1188*s12^2*s13^3 + 36*s12*s13^4 + 36*s13^5)*s23 +
                (360*s12^3*s13 - 540*s12^2*s13^2 - 144*s12*s13^3 + 36*s13^4)*
                 s23^2 + (36*s12^2*s13 - 36*s12*s13^2)*s23^3) +
              p1q*p2q^2*(216*s12^5*s13 + 216*s12^4*s13^2 - 216*s12^3*s13^3 -
                216*s12^2*s13^4 + (27*s12^5 - 171*s12^4*s13 - 1476*s12^3*
                   s13^2 - 1584*s12^2*s13^3 - 279*s12*s13^4 + 27*s13^5)*s23 +
                (45*s12^4 - 954*s12^3*s13 - 2034*s12^2*s13^2 - 774*s12*
                   s13^3 - 27*s13^4)*s23^2 + (54*s12^3 - 558*s12^2*s13 -
                  450*s12*s13^2 - 54*s13^3)*s23^3 + (36*s12^2 - 36*s12*s13)*
                 s23^4) + p1q^2*p2q*((-18*s12^5 - 90*s12^4*s13 - 378*s12^3*
                   s13^2 - 306*s12^2*s13^3)*s23 + (72*s12^4 - 144*s12^3*s13 -
                  468*s12^2*s13^2)*s23^2 + (18*s12^3 - 126*s12^2*s13 +
                  216*s12*s13^2 + 108*s13^3)*s23^3 + (-72*s12^2 +
                  108*s12*s13 + 108*s13^2)*s23^4) + p1q^3*(
                (-9*s12^5 + 63*s12^4*s13 + 81*s12^3*s13^2 + 9*s12^2*s13^3)*
                 s23 + (135*s12^4 - 162*s12^3*s13 - 459*s12^2*s13^2 -
                  90*s12*s13^3)*s23^2 + (-81*s12^3 - 495*s12^2*s13 +
                  27*s12*s13^2 + 9*s13^3)*s23^3 + (-171*s12^2 + 144*s12*s13 -
                  9*s13^2)*s23^4 + (54*s12 - 18*s13)*s23^5)) +
            p3q^4*(p2q^2*(324*s12^5*s13 + 432*s12^4*s13^2 - 108*s12^3*s13^3 -
                216*s12^2*s13^4 + (648*s12^4*s13 + 324*s12^3*s13^2 -
                  396*s12^2*s13^3 - 72*s12*s13^4)*s23 + (-18*s12^4 +
                  324*s12^3*s13 - 81*s12^2*s13^2 - 72*s12*s13^3 - 9*s13^4)*
                 s23^2 + (-18*s12^3 + 18*s12^2*s13 + 9*s12*s13^2 - 9*s13^3)*
                 s23^3) + p1q*p2q*(108*s12^5*s13 + 216*s12^4*s13^2 +
                108*s12^3*s13^3 + (-9*s12^5 + 153*s12^4*s13 - 117*s12^3*
                   s13^2 - 369*s12^2*s13^3 - 90*s12*s13^4)*s23 +
                (45*s12^4 - 126*s12^3*s13 - 621*s12^2*s13^2 - 198*s12*s13^3)*
                 s23^2 + (54*s12^3 - 252*s12^2*s13 - 108*s12*s13^2 +
                  18*s13^3)*s23^3 + (-18*s12*s13 + 18*s13^2)*s23^4) +
              p1q^2*((-36*s12^5 + 144*s12^4*s13 + 252*s12^3*s13^2 +
                  72*s12^2*s13^3)*s23 + (117*s12^4 + 144*s12^3*s13 -
                  189*s12^2*s13^2 - 72*s12*s13^3)*s23^2 + (45*s12^3 -
                  297*s12^2*s13 - 72*s12*s13^2)*s23^3 + (-99*s12^2 - 9*s13^2)*
                 s23^4 + (9*s12 - 9*s13)*s23^5)) +
            p3q^2*(p2q^4*(108*s12^5*s13 - 432*s12^4*s13^2 - 864*s12^3*s13^3 +
                324*s12*s13^5 + (216*s12^4*s13 - 1044*s12^3*s13^2 -
                  828*s12^2*s13^3 + 540*s12*s13^4 + 108*s13^5)*s23 +
                (9*s12^4 + 108*s12^3*s13 - 639*s12^2*s13^2 + 108*s12*s13^3 +
                  126*s13^4)*s23^2 + (9*s12^3 - 9*s12^2*s13 - 18*s12*s13^2 +
                  18*s13^3)*s23^3) + p1q*p2q^3*(108*s12^5*s13 - 216*s12^4*
                 s13^2 - 648*s12^3*s13^3 - 216*s12^2*s13^4 + 108*s12*s13^5 +
                (9*s12^5 - 405*s12^4*s13 - 2268*s12^3*s13^2 - 2520*s12^2*
                   s13^3 - 621*s12*s13^4 + 45*s13^5)*s23 +
                (27*s12^4 - 954*s12^3*s13 - 2610*s12^2*s13^2 - 1710*s12*
                   s13^3 - 153*s13^4)*s23^2 + (18*s12^3 - 414*s12^2*s13 -
                  738*s12*s13^2 - 234*s13^3)*s23^3 + (36*s12*s13 - 36*s13^2)*
                 s23^4) + p1q^3*p2q*((-9*s12^5 - 63*s12^4*s13 - 189*s12^3*
                   s13^2 - 153*s12^2*s13^3 - 18*s12*s13^4)*s23 +
                (45*s12^4 + 54*s12^3*s13 - 279*s12^2*s13^2 - 234*s12*s13^3 -
                  18*s13^4)*s23^2 + (-45*s12^3 - 45*s12^2*s13 - 81*s12*
                   s13^2 + 99*s13^3)*s23^3 + (-81*s12^2 - 36*s12*s13 +
                  63*s13^2)*s23^4 + (18*s12 - 54*s13)*s23^5) +
              p1q^4*((36*s12^4 - 126*s12^3*s13 - 180*s12^2*s13^2 -
                  18*s12*s13^3)*s23^2 + (-144*s12^3 - 108*s12^2*s13 +
                  234*s12*s13^2 + 18*s13^3)*s23^3 + (-81*s12^2 + 306*s12*
                   s13 - 9*s13^2)*s23^4 + (99*s12 - 27*s13)*s23^5) +
              p1q^2*p2q^2*((36*s12^5 - 306*s12^4*s13 - 702*s12^3*s13^2 -
                  450*s12^2*s13^3 - 90*s12*s13^4)*s23 + (81*s12^4 +
                  270*s12^3*s13 + 486*s12^2*s13^2 + 90*s12*s13^3 - 99*s13^4)*
                 s23^2 + (81*s12^3 + 1143*s12^2*s13 + 1035*s12*s13^2 +
                  117*s13^3)*s23^3 + (18*s12^2 + 540*s12*s13 + 234*s13^2)*
                 s23^4 + (-18*s12 + 18*s13)*s23^5)))*
           Log((p2q + p3q)/(p1q + p2q + p3q))^2)/
          (p1q*p3q^5*(4*s12^4*s13 + 4*s12^3*s13^2)*s23^2 +
           p1q*p2q^5*(4*s12^2*s13^3 + 4*s12*s13^4)*s23^2 -
           4*p1q^5*p2q*s12*s13*s23^5 + p1q^2*p2q^4*
            ((4*s12^2*s13^3 + 4*s12*s13^4)*s23^2 + (-8*s12^2*s13^2 - 12*s12*
                s13^3)*s23^3) + p1q^3*p2q^3*((-8*s12^2*s13^2 - 12*s12*s13^3)*
              s23^3 + (4*s12^2*s13 + 12*s12*s13^2)*s23^4) +
           p1q^4*p2q^2*((4*s12^2*s13 + 12*s12*s13^2)*s23^4 -
             4*s12*s13*s23^5) + p3q^4*(p1q*p2q*(12*s12^4*s13 + 4*s12^3*
                s13^2 - 8*s12^2*s13^3)*s23^2 + p1q^2*((4*s12^4*s13 +
                 4*s12^3*s13^2)*s23^2 + (-12*s12^3*s13 - 8*s12^2*s13^2)*
                s23^3)) + p3q^3*(p1q*p2q^2*(12*s12^4*s13 - 12*s12^3*s13^2 -
               20*s12^2*s13^3 + 4*s12*s13^4)*s23^2 + p1q^2*p2q*
              ((8*s12^4*s13 - 8*s12^2*s13^3)*s23^2 + (-32*s12^3*s13 -
                 24*s12^2*s13^2 - 8*s12*s13^3)*s23^3) +
             p1q^3*((-12*s12^3*s13 - 8*s12^2*s13^2)*s23^3 + (12*s12^2*s13 +
                 4*s12*s13^2)*s23^4)) + p3q*(p1q*p2q^4*(-8*s12^3*s13^2 + 4*
                s12^2*s13^3 + 12*s12*s13^4)*s23^2 - 4*p1q^5*s12*s13*s23^5 +
             p1q^2*p2q^3*((-8*s12^3*s13^2 + 8*s12*s13^4)*s23^2 +
               (-8*s12^3*s13 - 24*s12^2*s13^2 - 32*s12*s13^3)*s23^3) +
             p1q^3*p2q^2*((-8*s12^3*s13 - 16*s12^2*s13^2 - 20*s12*s13^3)*
                s23^3 + (20*s12^2*s13 + 28*s12*s13^2)*s23^4) +
             p1q^4*p2q*((16*s12^2*s13 + 16*s12*s13^2)*s23^4 - 8*s12*s13*
                s23^5)) + p3q^2*(p1q*p2q^3*(4*s12^4*s13 - 20*s12^3*s13^2 - 12*
                s12^2*s13^3 + 12*s12*s13^4)*s23^2 + p1q^2*p2q^2*
              ((4*s12^4*s13 - 12*s12^3*s13^2 - 12*s12^2*s13^3 + 4*s12*s13^4)*
                s23^2 + (-28*s12^3*s13 - 32*s12^2*s13^2 - 28*s12*s13^3)*
                s23^3) + p1q^3*p2q*((-20*s12^3*s13 - 16*s12^2*s13^2 -
                 8*s12*s13^3)*s23^3 + (28*s12^2*s13 + 20*s12*s13^2)*s23^4) +
             p1q^4*((12*s12^2*s13 + 4*s12*s13^2)*s23^4 - 4*s12*s13*s23^5))) +
         ((p2q^2*(144*s12^2*s13 + 144*s12*s13^2 + (216*s12*s13 + 72*s13^2)*
               s23 + 72*s13*s23^2) + p1q*p2q*((-18*s12^2 - 36*s12*s13 -
                18*s13^2)*s23 + (-22*s12 - 22*s13)*s23^2 - 4*s23^3) +
            p3q*(p2q*(144*s12^2*s13 + 144*s12*s13^2 + (36*s12^2 +
                  216*s12*s13 + 36*s13^2)*s23 + (36*s12 + 36*s13)*s23^2) +
              p1q*((-54*s12^2 - 36*s12*s13 + 18*s13^2)*s23 +
                (-58*s12 + 14*s13)*s23^2 - 4*s23^3)))*Log(-s12 - s13 - s23)^
            2)/(9*p1q*p2q*s12*s13*s23^2 + 9*p1q*p3q*s12*s13*s23^2) +
         ((p2q^2*(36*s12^2*s13 + 36*s12*s13^2 + (72*s12*s13 + 36*s13^2)*s23 +
              36*s13*s23^2) + p1q*p2q*((-9*s12*s13 - 9*s13^2)*s23 +
              (-2*s12 - 11*s13)*s23^2 - 2*s23^3) +
            p3q*(p2q*(36*s12^2*s13 + 36*s12*s13^2 + (54*s12*s13 + 18*s13^2)*
                 s23 + 18*s13*s23^2) + p1q*((9*s12*s13 + 9*s13^2)*s23 +
                (-2*s12 + 7*s13)*s23^2 - 2*s23^3)))*
           Log(s12/(s12 + s13 + s23))^2)/(4*p1q*p2q*s12*s13*s23^2 +
           4*p1q*p3q*s12*s13*s23^2) +
         ((p2q^2*(36*s12^2*s13 + 36*s12*s13^2 + 36*s12*s13*s23) +
            p1q*p2q*((-9*s12^2 - 9*s12*s13)*s23 + (-11*s12 - 2*s13)*s23^2 -
              2*s23^3) + p3q*(p2q*(36*s12^2*s13 + 36*s12*s13^2 +
                (18*s12^2 + 54*s12*s13)*s23 + 18*s12*s23^2) +
              p1q*((-27*s12^2 - 27*s12*s13)*s23 + (-29*s12 - 2*s13)*s23^2 -
                2*s23^3)))*Log(s13/(s12 + s13 + s23))^2)/
          (4*p1q*p2q*s12*s13*s23^2 + 4*p1q*p3q*s12*s13*s23^2) +
         ((p3q^2*((180*s12^7 + 531*s12^6*s13 + 837*s12^5*s13^2 +
                882*s12^4*s13^3 + 666*s12^3*s13^4 + 459*s12^2*s13^5 +
                189*s12*s13^6)*s23 + (360*s12^6 + 801*s12^5*s13 +
                1170*s12^4*s13^2 + 792*s12^3*s13^3 + 342*s12^2*s13^4 +
                279*s12*s13^5)*s23^2 + (180*s12^5 + 270*s12^4*s13 +
                414*s12^3*s13^2 - 18*s12^2*s13^3 + 90*s12*s13^4)*s23^3) +
            p2q^2*(3024*s12^6*s13^2 + 12096*s12^5*s13^3 + 18144*s12^4*s13^4 +
              12096*s12^3*s13^5 + 3024*s12^2*s13^6 + (-369*s12^6*s13 +
                4545*s12^5*s13^2 + 15930*s12^4*s13^3 + 17262*s12^3*s13^4 +
                6759*s12^2*s13^5 + 513*s12*s13^6)*s23 + (-459*s12^5*s13 +
                1818*s12^4*s13^2 + 4572*s12^3*s13^3 + 2538*s12^2*s13^4 +
                63*s12*s13^5 - 180*s13^6)*s23^2 + (-90*s12^4*s13 +
                18*s12^3*s13^2 - 414*s12^2*s13^3 - 270*s12*s13^4 - 180*s13^5)*
               s23^3) + p1q^2*((-189*s12^6*s13 - 567*s12^5*s13^2 -
                378*s12^4*s13^3 + 378*s12^3*s13^4 + 567*s12^2*s13^5 +
                189*s12*s13^6)*s23 + (180*s12^6 + 621*s12^5*s13 +
                450*s12^4*s13^2 - 576*s12^3*s13^3 - 918*s12^2*s13^4 -
                333*s12*s13^5)*s23^2 + (360*s12^5 + 1170*s12^4*s13 +
                558*s12^3*s13^2 - 1134*s12^2*s13^3 - 1062*s12*s13^4 -
                180*s13^5)*s23^3 + (180*s12^4 + 360*s12^3*s13 -
                360*s12*s13^3 - 180*s13^4)*s23^4) +
            p1q*p2q*((198*s12^6*s13 - 1278*s12^5*s13^2 - 4176*s12^4*s13^3 -
                3312*s12^3*s13^4 - 198*s12^2*s13^5 + 414*s12*s13^6)*s23 +
              (-160*s12^6 - 602*s12^5*s13 - 3602*s12^4*s13^2 - 4618*s12^3*
                 s13^3 - 1154*s12^2*s13^4 + 484*s12*s13^5 + 180*s13^6)*s23^
                2 + (-320*s12^5 - 1368*s12^4*s13 - 2054*s12^3*s13^2 +
                136*s12^2*s13^3 + 618*s12*s13^4 + 340*s13^5)*s23^3 +
              (-160*s12^4 - 568*s12^3*s13 + 568*s12*s13^3 + 160*s13^4)*s23^
                4) + p3q*(p2q*(3024*s12^6*s13^2 + 12096*s12^5*s13^3 +
                18144*s12^4*s13^4 + 12096*s12^3*s13^5 + 3024*s12^2*s13^6 +
                (180*s12^7 + 918*s12^6*s13 + 7650*s12^5*s13^2 + 18324*s12^4*
                   s13^3 + 16416*s12^3*s13^4 + 4950*s12^2*s13^5 -
                  54*s12*s13^6)*s23 + (360*s12^6 + 1098*s12^5*s13 +
                  4500*s12^4*s13^2 + 5364*s12^3*s13^3 + 1368*s12^2*s13^4 -
                  414*s12*s13^5 - 180*s13^6)*s23^2 + (180*s12^5 + 180*s12^4*
                   s13 + 432*s12^3*s13^2 - 432*s12^2*s13^3 - 180*s12*s13^4 -
                  180*s13^5)*s23^3) + p1q*((-180*s12^7 - 1458*s12^6*s13 -
                  4374*s12^5*s13^2 - 5760*s12^4*s13^3 - 3348*s12^3*s13^4 -
                  702*s12^2*s13^5 - 18*s12*s13^6)*s23 + (-520*s12^6 -
                  2618*s12^5*s13 - 5978*s12^4*s13^2 - 5374*s12^3*s13^3 -
                  1982*s12^2*s13^4 - 488*s12*s13^5)*s23^2 +
                (-500*s12^5 - 1728*s12^4*s13 - 2450*s12^3*s13^2 - 260*s12^2*
                   s13^3 + 258*s12*s13^4 + 160*s13^5)*s23^3 +
                (-160*s12^4 - 568*s12^3*s13 + 568*s12*s13^3 + 160*s13^4)*
                 s23^4)))*Log(s23/(s12 + s13 + s23)))/
          (p1q*p2q*(36*s12^5*s13^2 + 108*s12^4*s13^3 + 108*s12^3*s13^4 +
             36*s12^2*s13^5)*s23^2 + p1q*p3q*(36*s12^5*s13^2 +
             108*s12^4*s13^3 + 108*s12^3*s13^4 + 36*s12^2*s13^5)*s23^2) +
         ((p3q^5*((-180*s12^8 - 360*s12^7*s13 - 27*s12^6*s13^2 -
                153*s12^4*s13^4)*s23 + (-360*s12^7 - 270*s12^6*s13 +
                243*s12^5*s13^2 - 243*s12^4*s13^3 - 90*s12^3*s13^4)*s23^2 +
              (-180*s12^6 + 90*s12^5*s13 - 90*s12^3*s13^3)*s23^3) +
            p2q^5*(-648*s12^4*s13^5 - 648*s12^3*s13^6 + (180*s12^5*s13^3 +
                207*s12^4*s13^4 - 1098*s12^3*s13^5 - 171*s12^2*s13^6 +
                306*s12*s13^7)*s23 + (270*s12^4*s13^3 + 117*s12^3*s13^4 -
                567*s12^2*s13^5 + 396*s12*s13^6 + 180*s13^7)*s23^2 +
              (90*s12^3*s13^3 - 90*s12*s13^5 + 180*s13^6)*s23^3) +
            p1q*p2q^4*(-648*s12^4*s13^5 - 648*s12^3*s13^6 +
              (1125*s12^4*s13^4 - 477*s12^2*s13^6)*s23 + (-200*s12^5*s13^2 -
                184*s12^4*s13^3 + 2377*s12^3*s13^4 - 269*s12^2*s13^5 -
                1028*s12*s13^6)*s23^2 + (-220*s12^4*s13^2 - 164*s12^3*s13^3 +
                1416*s12^2*s13^4 - 1208*s12*s13^5 - 520*s13^6)*s23^3 +
              (-20*s12^3*s13^2 - 160*s12^2*s13^3 + 340*s12*s13^4 - 520*s13^5)*
               s23^4) + p1q^2*p2q^3*((630*s12^5*s13^3 + 2547*s12^4*s13^4 +
                2232*s12^3*s13^5 + 9*s12^2*s13^6 - 306*s12*s13^7)*s23 +
              (-20*s12^5*s13^2 + 338*s12^4*s13^3 + 3367*s12^3*s13^4 +
                2107*s12^2*s13^5 - 416*s12*s13^6 - 180*s13^7)*s23^2 +
              (-140*s12^5*s13 - 293*s12^4*s13^2 - 1930*s12^3*s13^3 +
                1495*s12^2*s13^4 + 1388*s12*s13^5 - 160*s13^6)*s23^3 +
              (-370*s12^4*s13 - 43*s12^3*s13^2 - 1615*s12^2*s13^3 +
                1388*s12*s13^4 + 520*s13^5)*s23^4 + (-230*s12^3*s13 +
                320*s12^2*s13^2 - 410*s12*s13^3 + 500*s13^4)*s23^5) +
            p1q^3*p2q^2*((-153*s12^4*s13^4 + 153*s12^2*s13^6)*s23 +
              (18*s12^5*s13^2 - 1332*s12^4*s13^3 - 1971*s12^3*s13^4 +
                693*s12^2*s13^5 + 1008*s12*s13^6)*s23^2 + (40*s12^5*s13 +
                611*s12^4*s13^2 - 2648*s12^3*s13^3 - 2459*s12^2*s13^4 +
                1408*s12*s13^5 + 540*s13^6)*s23^3 + (160*s12^5 +
                310*s12^4*s13 + 1589*s12^3*s13^2 - 1661*s12^2*s13^3 -
                916*s12*s13^4 + 500*s13^5)*s23^4 + (320*s12^4 + 110*s12^3*
                 s13 + 926*s12^2*s13^2 - 736*s12*s13^3 - 200*s13^4)*s23^5 +
              (160*s12^3 - 160*s12^2*s13 + 160*s12*s13^2 - 160*s13^3)*s23^
                6) + p1q^4*p2q*((306*s12^4*s13^3 - 306*s12^2*s13^5)*s23^2 +
              (180*s12^5*s13 + 855*s12^4*s13^2 + 1134*s12^3*s13^3 -
                1251*s12^2*s13^4 - 1098*s12*s13^5)*s23^3 + (-20*s12^5 +
                230*s12^4*s13 + 1351*s12^3*s13^2 + 829*s12^2*s13^3 -
                1568*s12*s13^4 - 540*s13^5)*s23^4 + (-40*s12^4 -
                110*s12^3*s13 + 606*s12^2*s13^2 + 250*s12*s13^3 - 520*s13^4)*
               s23^5 + (-20*s12^3 - 160*s12^2*s13 + 160*s12*s13^2 + 20*s13^3)*
               s23^6) + p1q^5*((-153*s12^4*s13^2 + 153*s12^2*s13^4)*s23^3 +
              (-180*s12^5 - 450*s12^4*s13 - 423*s12^3*s13^2 + 549*s12^2*
                 s13^3 + 396*s12*s13^4)*s23^4 + (-360*s12^4 - 450*s12^3*s13 +
                576*s12*s13^3 + 180*s13^4)*s23^5 + (-180*s12^3 + 180*s13^3)*
               s23^6) + p3q^4*(p2q*(-648*s12^6*s13^3 - 648*s12^5*s13^4 +
                (-360*s12^8 - 180*s12^7*s13 + 873*s12^6*s13^2 - 1044*s12^5*
                   s13^3 - 477*s12^4*s13^4 + 612*s12^3*s13^5)*s23 +
                (-720*s12^7 + 450*s12^6*s13 + 1143*s12^5*s13^2 - 1539*s12^4*
                   s13^3 + 702*s12^3*s13^4 + 360*s12^2*s13^5)*s23^2 +
                (-360*s12^6 + 630*s12^5*s13 - 180*s12^4*s13^2 - 270*s12^3*
                   s13^3 + 360*s12^2*s13^4)*s23^3) + p1q*((477*s12^6*s13^2 +
                  648*s12^5*s13^3 + 171*s12^4*s13^4)*s23 +
                (520*s12^7 + 950*s12^6*s13 + 1531*s12^5*s13^2 + 685*s12^4*
                   s13^3 - 110*s12^3*s13^4)*s23^2 + (1040*s12^6 + 610*s12^5*
                   s13 + 444*s12^4*s13^2 + 70*s12^3*s13^3 + 20*s12^2*s13^4)*
                 s23^3 + (520*s12^5 - 340*s12^4*s13 + 160*s12^3*s13^2 +
                  20*s12^2*s13^3)*s23^4)) + p3q^3*(p2q^2*(-1296*s12^6*s13^3 +
                1296*s12^4*s13^5 + (-180*s12^8 + 720*s12^7*s13 + 1287*s12^6*
                   s13^2 - 2862*s12^5*s13^3 + 1674*s12^4*s13^4 + 1566*s12^3*
                   s13^5 - 765*s12^2*s13^6)*s23 + (-360*s12^7 + 1710*s12^6*
                   s13 + 657*s12^5*s13^2 - 2853*s12^4*s13^3 + 3051*s12^3*
                   s13^4 - 315*s12^2*s13^5 - 450*s12*s13^6)*s23^2 +
                (-180*s12^6 + 990*s12^5*s13 - 720*s12^4*s13^2 - 180*s12^3*
                   s13^3 + 900*s12^2*s13^4 - 450*s12*s13^5)*s23^3) +
              p1q*p2q*(-648*s12^6*s13^3 - 648*s12^5*s13^4 +
                (954*s12^6*s13^2 + 342*s12^5*s13^3 + 342*s12^4*s13^4 +
                  306*s12^3*s13^5)*s23 + (1040*s12^7 + 1580*s12^6*s13 +
                  2908*s12^5*s13^2 + 342*s12^4*s13^3 - 276*s12^3*s13^4 +
                  526*s12^2*s13^5)*s23^2 + (2080*s12^6 + 760*s12^5*s13 +
                  1054*s12^4*s13^2 - 748*s12^3*s13^3 + 566*s12^2*s13^4 +
                  140*s12*s13^5)*s23^3 + (1040*s12^5 - 820*s12^4*s13 +
                  460*s12^3*s13^2 - 100*s12^2*s13^3 + 140*s12*s13^4)*s23^4) +
              p1q^2*((180*s12^8 + 360*s12^7*s13 + 351*s12^6*s13^2 +
                  648*s12^5*s13^3 + 477*s12^4*s13^4)*s23 +
                (340*s12^7 + 50*s12^6*s13 + 19*s12^5*s13^2 + 667*s12^4*
                   s13^3 + 52*s12^3*s13^4)*s23^2 + (-360*s12^6 - 1290*s12^5*
                   s13 - 1565*s12^4*s13^2 - 472*s12^3*s13^3 + 699*s12^2*
                   s13^4)*s23^3 + (-1020*s12^5 - 570*s12^4*s13 - 1133*s12^3*
                   s13^2 + 609*s12^2*s13^3 + 230*s12*s13^4)*s23^4 +
                (-500*s12^4 + 410*s12^3*s13 - 320*s12^2*s13^2 + 230*s12*
                   s13^3)*s23^5)) + p3q^2*(p2q^3*(-648*s12^6*s13^3 +
                1944*s12^5*s13^4 + 1944*s12^4*s13^5 - 648*s12^3*s13^6 +
                (540*s12^7*s13 - 153*s12^6*s13^2 - 2412*s12^5*s13^3 +
                  4374*s12^4*s13^4 + 198*s12^3*s13^5 - 1701*s12^2*s13^6 +
                  306*s12*s13^7)*s23 + (990*s12^6*s13 - 1143*s12^5*s13^2 -
                  1791*s12^4*s13^3 + 3753*s12^3*s13^4 - 2277*s12^2*s13^5 -
                  504*s12*s13^6 + 180*s13^7)*s23^2 + (450*s12^5*s13 -
                  900*s12^4*s13^2 + 180*s12^3*s13^3 + 720*s12^2*s13^4 -
                  990*s12*s13^5 + 180*s13^6)*s23^3) + p1q*p2q^2*(
                -648*s12^6*s13^3 + 648*s12^5*s13^4 + 1296*s12^4*s13^5 +
                (801*s12^6*s13^2 + 1008*s12^5*s13^3 + 4860*s12^4*s13^4 +
                  2232*s12^3*s13^5 - 477*s12^2*s13^6)*s23 +
                (520*s12^7 + 310*s12^6*s13 + 1671*s12^5*s13^2 + 713*s12^4*
                   s13^3 + 3451*s12^3*s13^4 + 459*s12^2*s13^5 - 1028*s12*
                   s13^6)*s23^2 + (1040*s12^6 - 310*s12^5*s13 + 880*s12^4*
                   s13^2 - 1222*s12^3*s13^3 + 2164*s12^2*s13^4 - 928*s12*
                   s13^5 - 520*s13^6)*s23^3 + (520*s12^5 - 620*s12^4*s13 +
                  420*s12^3*s13^2 - 420*s12^2*s13^3 + 620*s12*s13^4 -
                  520*s13^5)*s23^4) + p1q^2*p2q*((-540*s12^7*s13 -
                  441*s12^6*s13^2 + 2178*s12^5*s13^3 + 2277*s12^4*s13^4 +
                  198*s12^3*s13^5)*s23 + (-20*s12^7 - 1170*s12^6*s13 +
                  225*s12^5*s13^2 + 2303*s12^4*s13^3 - 328*s12^3*s13^4 -
                  14*s12^2*s13^5)*s23^2 + (-1040*s12^6 - 2530*s12^5*s13 -
                  1915*s12^4*s13^2 - 2894*s12^3*s13^3 + 453*s12^2*s13^4 +
                  1098*s12*s13^5)*s23^3 + (-2020*s12^5 - 1310*s12^4*s13 -
                  1481*s12^3*s13^2 - 901*s12^2*s13^3 + 1648*s12*s13^4 +
                  500*s13^5)*s23^4 + (-1000*s12^4 + 590*s12^3*s13 -
                  320*s12^2*s13^2 + 50*s12*s13^3 + 500*s13^4)*s23^5) +
              p1q^3*((-153*s12^6*s13^2 + 153*s12^4*s13^4)*s23 +
                (-540*s12^7 - 1170*s12^6*s13 - 963*s12^5*s13^2 - 261*s12^4*
                   s13^3 - 234*s12^3*s13^4)*s23^2 + (-1040*s12^6 -
                  550*s12^5*s13 - 821*s12^4*s13^2 - 1568*s12^3*s13^3 -
                  113*s12^2*s13^4)*s23^3 + (-300*s12^5 + 1170*s12^4*s13 -
                  545*s12^3*s13^2 - 283*s12^2*s13^3 - 456*s12*s13^4)*s23^4 +
                (360*s12^4 + 390*s12^3*s13 + 286*s12^2*s13^2 - 456*s12*
                   s13^3 - 160*s13^4)*s23^5 + (160*s12^3 - 160*s12^2*s13 +
                  160*s12*s13^2 - 160*s13^3)*s23^6)) +
            p3q*(p2q^4*(1296*s12^5*s13^4 - 1296*s12^3*s13^6 +
                (-540*s12^6*s13^2 - 414*s12^5*s13^3 + 2583*s12^4*s13^4 -
                  1854*s12^3*s13^5 - 1107*s12^2*s13^6 + 612*s12*s13^7)*s23 +
                (-900*s12^5*s13^2 + 36*s12^4*s13^3 + 1611*s12^3*s13^4 -
                  2169*s12^2*s13^5 + 342*s12*s13^6 + 360*s13^7)*s23^2 +
                (-360*s12^4*s13^2 + 270*s12^3*s13^3 + 180*s12^2*s13^4 -
                  630*s12*s13^5 + 360*s13^6)*s23^3) + p1q*p2q^3*(
                1296*s12^5*s13^4 + 648*s12^4*s13^5 - 648*s12^3*s13^6 +
                (666*s12^5*s13^3 + 5814*s12^4*s13^4 + 2574*s12^3*s13^5 -
                  630*s12^2*s13^6)*s23 + (-320*s12^6*s13 - 554*s12^5*s13^2 +
                  224*s12^4*s13^3 + 6642*s12^3*s13^4 + 312*s12^2*s13^5 -
                  2056*s12*s13^6)*s23^2 + (-460*s12^5*s13 - 274*s12^4*s13^2 -
                  568*s12^3*s13^3 + 3358*s12^2*s13^4 - 2276*s12*s13^5 -
                  1040*s13^6)*s23^3 + (-140*s12^4*s13 + 100*s12^3*s13^2 -
                  460*s12^2*s13^3 + 820*s12*s13^4 - 1040*s13^5)*s23^4) +
              p1q^2*p2q^2*((1026*s12^6*s13^2 + 2718*s12^5*s13^3 + 3015*s12^4*
                   s13^4 + 2250*s12^3*s13^5 + 927*s12^2*s13^6)*s23 +
                (40*s12^6*s13 + 1824*s12^5*s13^2 - 6*s12^4*s13^3 +
                  431*s12^3*s13^4 + 2921*s12^2*s13^5 + 430*s12*s13^6)*s23^2 +
                (-500*s12^6 - 1020*s12^5*s13 - 787*s12^4*s13^2 - 6620*s12^3*
                   s13^3 + 781*s12^2*s13^4 + 2846*s12*s13^5 + 20*s13^6)*
                 s23^3 + (-1000*s12^5 - 1110*s12^4*s13 - 715*s12^3*s13^2 -
                  3449*s12^2*s13^3 + 2806*s12*s13^4 + 1020*s13^5)*s23^4 +
                (-500*s12^4 - 50*s12^3*s13 + 320*s12^2*s13^2 - 590*s12*
                   s13^3 + 1000*s13^4)*s23^5) + p1q^3*p2q*((306*s12^5*s13^3 -
                  306*s12^3*s13^5)*s23 + (360*s12^6*s13 + 270*s12^5*s13^2 -
                  918*s12^4*s13^3 - 2088*s12^3*s13^4 - 648*s12^2*s13^5)*
                 s23^2 + (40*s12^6 + 1020*s12^5*s13 + 366*s12^4*s13^2 -
                  3442*s12^3*s13^3 - 2932*s12^2*s13^4 - 140*s12*s13^5)*
                 s23^3 + (400*s12^5 + 1480*s12^4*s13 + 1548*s12^3*s13^2 -
                  2124*s12^2*s13^3 - 1372*s12*s13^4 - 40*s13^5)*s23^4 +
                (680*s12^4 + 500*s12^3*s13 + 1212*s12^2*s13^2 - 1192*s12*
                   s13^3 - 360*s13^4)*s23^5 + (320*s12^3 - 320*s12^2*s13 +
                  320*s12*s13^2 - 320*s13^3)*s23^6) + p1q^4*(
                (306*s12^5*s13^2 - 306*s12^3*s13^4)*s23^2 +
                (540*s12^6 + 1260*s12^5*s13 + 1035*s12^4*s13^2 - 936*s12^3*
                   s13^3 - 639*s12^2*s13^4)*s23^3 + (1060*s12^5 + 950*s12^4*
                   s13 + 325*s12^3*s13^2 - 323*s12^2*s13^3 - 290*s12*s13^4)*
                 s23^4 + (500*s12^4 - 470*s12^3*s13 + 606*s12^2*s13^2 -
                  110*s12*s13^3 + 20*s13^4)*s23^5 + (-20*s12^3 - 160*s12^2*
                   s13 + 160*s12*s13^2 + 20*s13^3)*s23^6)))*
           Log((s12 + s13)/(s12 + s13 + s23))*Log(s23/(s12 + s13 + s23)))/
          (36*p1q*p3q^4*s12^5*s13^3*s23^2 + 36*p1q*p2q^4*s12^3*s13^5*s23^2 +
           36*p1q^4*p2q*s12^3*s13^3*s23^4 + p1q^2*p2q^3*
            (36*s12^3*s13^5*s23^2 - 72*s12^3*s13^4*s23^3) +
           p1q^3*p2q^2*(-72*s12^3*s13^4*s23^3 + 36*s12^3*s13^3*s23^4) +
           p3q^3*(p1q*p2q*(72*s12^5*s13^3 - 72*s12^4*s13^4)*s23^2 +
             p1q^2*(36*s12^5*s13^3*s23^2 - 72*s12^4*s13^3*s23^3)) +
           p3q^2*(p1q*p2q^2*(36*s12^5*s13^3 - 144*s12^4*s13^4 + 36*s12^3*
                s13^5)*s23^2 + p1q^2*p2q*((36*s12^5*s13^3 - 72*s12^4*s13^4)*
                s23^2 + (-144*s12^4*s13^3 - 72*s12^3*s13^4)*s23^3) +
             p1q^3*(-72*s12^4*s13^3*s23^3 + 36*s12^3*s13^3*s23^4)) +
           p3q*(p1q*p2q^3*(-72*s12^4*s13^4 + 72*s12^3*s13^5)*s23^2 +
             36*p1q^4*s12^3*s13^3*s23^4 + p1q^2*p2q^2*((-72*s12^4*s13^4 +
                 36*s12^3*s13^5)*s23^2 + (-72*s12^4*s13^3 - 144*s12^3*s13^4)*
                s23^3) + p1q^3*p2q*((-72*s12^4*s13^3 - 72*s12^3*s13^4)*
                s23^3 + 72*s12^3*s13^3*s23^4))) +
         ((p2q^2*(-72*s12^2*s13 - 72*s12*s13^2 + (-108*s12*s13 - 36*s13^2)*
               s23 - 36*s13*s23^2) + p1q*p2q*((9*s12^2 + 18*s12*s13 +
                9*s13^2)*s23 + (29*s12 + 29*s13)*s23^2 + 20*s23^3) +
            p3q*(p2q*(-72*s12^2*s13 - 72*s12*s13^2 + (-18*s12^2 -
                  108*s12*s13 - 18*s13^2)*s23 + (-18*s12 - 18*s13)*s23^2) +
              p1q*((27*s12^2 + 18*s12*s13 - 9*s13^2)*s23 + (47*s12 + 11*s13)*
                 s23^2 + 20*s23^3)))*Log(s23/(s12 + s13 + s23))^2)/
          (36*p1q*p2q*s12*s13*s23^2 + 36*p1q*p3q*s12*s13*s23^2) +
         Log(-s12 - s13 - s23)*((p2q^2*(504*s12^2*s13 + 504*s12*s13^2 +
               (756*s12*s13 + 252*s13^2)*s23 + 252*s13*s23^2) +
             p1q*p2q*((-87*s12^2 - 126*s12*s13 - 39*s13^2)*s23 + (-101*s12 -
                 53*s13)*s23^2 - 14*s23^3) + p3q*(p2q*(504*s12^2*s13 +
                 504*s12*s13^2 + (126*s12^2 + 756*s12*s13 + 126*s13^2)*s23 +
                 (126*s12 + 126*s13)*s23^2) + p1q*((-213*s12^2 - 126*s12*
                    s13 + 87*s13^2)*s23 + (-227*s12 + 73*s13)*s23^2 -
                 14*s23^3)))/(6*p1q*p2q*s12*s13*s23^2 + 6*p1q*p3q*s12*s13*
              s23^2) + ((p2q^2*(36*s12^2*s13 + 36*s12*s13^2 +
                (72*s12*s13 + 36*s13^2)*s23 + 36*s13*s23^2) +
              p1q*p2q*((-9*s12*s13 - 9*s13^2)*s23 + (-2*s12 - 11*s13)*s23^2 -
                2*s23^3) + p3q*(p2q*(36*s12^2*s13 + 36*s12*s13^2 +
                  (54*s12*s13 + 18*s13^2)*s23 + 18*s13*s23^2) +
                p1q*((9*s12*s13 + 9*s13^2)*s23 + (-2*s12 + 7*s13)*s23^2 -
                  2*s23^3)))*Log(s12/(s12 + s13 + s23)))/
            (2*p1q*p2q*s12*s13*s23^2 + 2*p1q*p3q*s12*s13*s23^2) +
           ((p2q^2*(36*s12^2*s13 + 36*s12*s13^2 + 36*s12*s13*s23) +
              p1q*p2q*((-9*s12^2 - 9*s12*s13)*s23 + (-11*s12 - 2*s13)*s23^2 -
                2*s23^3) + p3q*(p2q*(36*s12^2*s13 + 36*s12*s13^2 +
                  (18*s12^2 + 54*s12*s13)*s23 + 18*s12*s23^2) +
                p1q*((-27*s12^2 - 27*s12*s13)*s23 + (-29*s12 - 2*s13)*s23^2 -
                  2*s23^3)))*Log(s13/(s12 + s13 + s23)))/
            (2*p1q*p2q*s12*s13*s23^2 + 2*p1q*p3q*s12*s13*s23^2) +
           ((p2q^2*(-72*s12^2*s13 - 72*s12*s13^2 + (-108*s12*s13 - 36*s13^2)*
                 s23 - 36*s13*s23^2) + p1q*p2q*((9*s12^2 + 18*s12*s13 +
                  9*s13^2)*s23 + (29*s12 + 29*s13)*s23^2 + 20*s23^3) +
              p3q*(p2q*(-72*s12^2*s13 - 72*s12*s13^2 + (-18*s12^2 -
                    108*s12*s13 - 18*s13^2)*s23 + (-18*s12 - 18*s13)*s23^2) +
                p1q*((27*s12^2 + 18*s12*s13 - 9*s13^2)*s23 +
                  (47*s12 + 11*s13)*s23^2 + 20*s23^3)))*
             Log(s23/(s12 + s13 + s23)))/(18*p1q*p2q*s12*s13*s23^2 +
             18*p1q*p3q*s12*s13*s23^2)) + Log(p1q/(p1q + p2q + p3q))*
          ((-9*s12^2 + 9*s13^2 + (-9*s12 + 9*s13)*s23)/(2*s12*s13*s23) +
           ((p2q*p3q^4*(-18*s12^4 - 18*s12^3*s13 + (-36*s12^3 - 18*s12^2*s13)*
                 s23 - 18*s12^2*s23^2) + p2q^5*(-18*s12^2*s13^2 -
                18*s12*s13^3 + (-36*s12*s13^2 - 18*s13^3)*s23 -
                18*s13^2*s23^2) + p1q*p2q^4*(-18*s12^2*s13^2 - 18*s12*s13^3 +
                (18*s12^2*s13 - 18*s12*s13^2 - 18*s13^3)*s23 + 36*s12*s13*
                 s23^2 + 18*s13*s23^3) + p1q^2*p2q^3*((36*s12^3 +
                  99*s12^2*s13 + 72*s12*s13^2 + 9*s13^3)*s23 +
                (72*s12^2 + 144*s12*s13 + 54*s13^2)*s23^2 + (36*s12 + 45*s13)*
                 s23^3) + p1q^3*p2q^2*((-27*s12^2 - 36*s12*s13 - 9*s13^2)*
                 s23^2 + (-54*s12 - 36*s13)*s23^3 - 27*s23^4) +
              p3q^3*(p2q^2*(-36*s12^4 + 36*s12^2*s13^2 + (-72*s12^3 +
                    36*s12^2*s13 + 36*s12*s13^2)*s23 + (-36*s12^2 +
                    36*s12*s13)*s23^2) + p1q*p2q*(-18*s12^4 - 18*s12^3*s13 +
                  (36*s12^2*s13 + 18*s12*s13^2)*s23 + (54*s12^2 + 54*s12*s13)*
                   s23^2 + 36*s12*s23^3)) + p3q*(p2q^4*(36*s12^3*s13 -
                  36*s12*s13^3 + (72*s12^2*s13 - 36*s12*s13^2 - 36*s13^3)*
                   s23 + (36*s12*s13 - 36*s13^2)*s23^2) + p1q*p2q^3*
                 (36*s12^3*s13 + 18*s12^2*s13^2 - 18*s12*s13^3 +
                  (54*s12^3 + 198*s12^2*s13 + 72*s12*s13^2 - 18*s13^3)*s23 +
                  (108*s12^2 + 198*s12*s13 + 18*s13^2)*s23^2 +
                  (54*s12 + 36*s13)*s23^3) + p1q^2*p2q^2*
                 ((45*s12^3 + 99*s12^2*s13 + 63*s12*s13^2 + 9*s13^3)*s23 +
                  (54*s12^2 + 90*s12*s13 + 36*s13^2)*s23^2 +
                  (-27*s12 - 9*s13)*s23^3 - 36*s23^4) + p1q^3*p2q*
                 ((-27*s12^2 - 36*s12*s13 - 9*s13^2)*s23^2 +
                  (-54*s12 - 36*s13)*s23^3 - 27*s23^4)) +
              p3q^2*(p2q^3*(-18*s12^4 + 54*s12^3*s13 + 54*s12^2*s13^2 -
                  18*s12*s13^3 + (-36*s12^3 + 126*s12^2*s13 + 36*s12*s13^2 -
                    18*s13^3)*s23 + (-18*s12^2 + 72*s12*s13 - 18*s13^2)*
                   s23^2) + p1q*p2q^2*(-18*s12^4 + 18*s12^3*s13 +
                  36*s12^2*s13^2 + (36*s12^3 + 162*s12^2*s13 + 54*s12*s13^2 -
                    18*s13^3)*s23 + (126*s12^2 + 144*s12*s13 - 18*s13^2)*
                   s23^2 + 72*s12*s23^3) + p1q^2*p2q*((45*s12^3 + 72*s12^2*
                     s13 + 27*s12*s13^2)*s23 + (72*s12^2 + 54*s12*s13)*
                   s23^2 + (9*s12 - 18*s13)*s23^3 - 18*s23^4)))*
             Log(p2q/(p1q + p2q + p3q)))/(2*p1q*p3q^4*s12^3*s23^2 +
             2*p1q*p2q^4*s12*s13^2*s23^2 + 2*p1q^4*p2q*s12*s23^4 +
             p1q^2*p2q^3*(2*s12*s13^2*s23^2 - 4*s12*s13*s23^3) +
             p1q^3*p2q^2*(-4*s12*s13*s23^3 + 2*s12*s23^4) +
             p3q^3*(p1q*p2q*(4*s12^3 - 4*s12^2*s13)*s23^2 + p1q^2*
                (2*s12^3*s23^2 - 4*s12^2*s23^3)) + p3q^2*(p1q*p2q^2*
                (2*s12^3 - 8*s12^2*s13 + 2*s12*s13^2)*s23^2 + p1q^2*p2q*
                ((2*s12^3 - 4*s12^2*s13)*s23^2 + (-8*s12^2 - 4*s12*s13)*
                  s23^3) + p1q^3*(-4*s12^2*s23^3 + 2*s12*s23^4)) +
             p3q*(p1q*p2q^3*(-4*s12^2*s13 + 4*s12*s13^2)*s23^2 + 2*p1q^4*s12*
                s23^4 + p1q^2*p2q^2*((-4*s12^2*s13 + 2*s12*s13^2)*s23^2 +
                 (-4*s12^2 - 8*s12*s13)*s23^3) + p1q^3*p2q*
                ((-4*s12^2 - 4*s12*s13)*s23^3 + 4*s12*s23^4))) +
           ((p3q^6*(-9*s12^4 - 9*s12^3*s13 - 9*s12^3*s23) +
              p2q^6*(27*s12^2*s13^2 + 63*s12*s13^3 + 36*s13^4 +
                (63*s12*s13^2 + 72*s13^3)*s23 + 36*s13^2*s23^2) +
              p1q*p2q^5*(-18*s12^2*s13^2 + 9*s12*s13^3 + 27*s13^4 +
                (-90*s12^2*s13 - 180*s12*s13^2 - 45*s13^3)*s23 +
                (-198*s12*s13 - 180*s13^2)*s23^2 - 108*s13*s23^3) +
              p1q^4*p2q^2*(-9*s12^2*s13^2 - 18*s12*s13^3 - 9*s13^4 +
                (36*s12^3 + 144*s12^2*s13 + 162*s12*s13^2 + 54*s13^3)*s23 +
                (63*s12*s13 + 54*s13^2)*s23^2 + (-81*s12 - 54*s13)*s23^3 -
                45*s23^4) + p1q^5*p2q*((18*s12^2*s13 + 36*s12*s13^2 +
                  18*s13^3)*s23 + (-54*s12^2 - 63*s12*s13 - 9*s13^2)*s23^2 +
                (-90*s12 - 63*s13)*s23^3 - 36*s23^4) + p1q^6*(
                (-9*s12^2 - 18*s12*s13 - 9*s13^2)*s23^2 + (-18*s12 - 18*s13)*
                 s23^3 - 9*s23^4) + p1q^3*p2q^3*(36*s12^3*s13 +
                18*s12^2*s13^2 - 45*s12*s13^3 - 27*s13^4 +
                (108*s12^3 + 378*s12^2*s13 + 288*s12*s13^2 + 45*s13^3)*s23 +
                (252*s12^2 + 477*s12*s13 + 171*s13^2)*s23^2 +
                (198*s12 + 153*s13)*s23^3 + 54*s23^4) + p1q^2*p2q^4*(
                36*s12^3*s13 - 18*s12^2*s13^2 - 81*s12*s13^3 - 27*s13^4 +
                (72*s12^3 + 162*s12^2*s13 - 81*s12*s13^2 - 108*s13^3)*s23 +
                (207*s12^2 + 171*s12*s13 - 99*s13^2)*s23^2 +
                (207*s12 + 54*s13)*s23^3 + 72*s23^4) + p3q^5*(
                p2q*(18*s12^3*s13 + 18*s12^2*s13^2 + 18*s12^2*s13*s23) +
                p1q*(-9*s12^4 - 9*s12^3*s13 + (18*s12^3 + 27*s12^2*s13)*s23 +
                  27*s12^2*s23^2)) + p3q^4*(p2q^2*(18*s12^4 + 18*s12^3*s13 -
                  9*s12^2*s13^2 - 9*s12*s13^3 + (18*s12^3 - 9*s12*s13^2)*
                   s23) + p1q*p2q*(9*s12^3*s13 + 9*s12^2*s13^2 +
                  (18*s12^3 + 27*s12^2*s13)*s23 + 18*s12^2*s23^2) +
                p1q^2*(-9*s12^3*s13 - 9*s12^2*s13^2 + (45*s12^3 + 36*s12^2*
                     s13)*s23 + (18*s12^2 - 27*s12*s13)*s23^2 - 27*s12*
                   s23^3)) + p3q^3*(p2q^3*(36*s12^4 + 36*s12^3*s13 +
                  (72*s12^3 + 36*s12^2*s13)*s23 + 36*s12^2*s23^2) +
                p1q*p2q^2*(27*s12^4 + 81*s12^3*s13 + 63*s12^2*s13^2 +
                  9*s12*s13^3 + (36*s12^3 + 99*s12^2*s13 + 54*s12*s13^2 +
                    9*s13^3)*s23 + (9*s12^2 + 36*s12*s13 + 9*s13^2)*s23^2) +
                p1q^2*p2q*(-18*s12^4 - 18*s12^3*s13 + 18*s12^2*s13^2 +
                  18*s12*s13^3 + (18*s12^3 + 72*s12^2*s13 + 54*s12*s13^2)*
                   s23 + (-18*s12*s13 - 18*s13^2)*s23^2 + (-36*s12 - 18*s13)*
                   s23^3) + p1q^3*(-9*s12^4 - 27*s12^3*s13 - 18*s12^2*s13^2 -
                  9*s12^2*s13*s23 + (-54*s12^2 - 63*s12*s13)*s23^2 +
                  (-54*s12 + 9*s13)*s23^3 + 9*s23^4)) +
              p3q^2*(p2q^4*(27*s12^4 - 9*s12^3*s13 - 90*s12^2*s13^2 -
                  54*s12*s13^3 + (63*s12^3 - 72*s12^2*s13 - 126*s12*s13^2)*
                   s23 + (36*s12^2 - 72*s12*s13)*s23^2) + p1q^2*p2q^2*
                 (-90*s12^4 - 117*s12^3*s13 - 63*s12^2*s13^2 - 45*s12*s13^3 -
                  9*s13^4 + (-189*s12^3 - 216*s12^2*s13 - 207*s12*s13^2 -
                    90*s13^3)*s23 + (-153*s12^2 - 288*s12*s13 - 225*s13^2)*
                   s23^2 + (-54*s12 - 144*s13)*s23^3) + p1q*p2q^3*
                 (-18*s12^4 - 45*s12^3*s13 - 135*s12^2*s13^2 - 117*s12*
                   s13^3 - 9*s13^4 + (-90*s12^3 - 261*s12^2*s13 - 324*s12*
                     s13^2 - 63*s13^3)*s23 + (-144*s12^2 - 306*s12*s13 -
                    126*s13^2)*s23^2 + (-72*s12 - 72*s13)*s23^3) +
                p1q^3*p2q*(-54*s12^4 - 99*s12^3*s13 - 45*s12^2*s13^2 +
                  (-36*s12^3 - 9*s12^2*s13 - 18*s12*s13^2 - 36*s13^3)*s23 +
                  (-36*s12^2 - 117*s12*s13 - 117*s13^2)*s23^2 +
                  (-36*s12 - 63*s13)*s23^3 + 18*s23^4) + p1q^4*(-9*s12^4 -
                  18*s12^3*s13 - 9*s12^2*s13^2 + (18*s12^2*s13 + 18*s12*
                     s13^2)*s23 + (-9*s12^2 + 9*s12*s13 + 9*s13^2)*s23^2 +
                  (9*s12 + 36*s13)*s23^3 + 27*s23^4)) +
              p3q*(p2q^5*(-54*s12^3*s13 - 90*s12^2*s13^2 + 36*s13^4 +
                  (-126*s12^2*s13 - 72*s12*s13^2 + 72*s13^3)*s23 +
                  (-72*s12*s13 + 36*s13^2)*s23^2) + p1q*p2q^4*(36*s12^3*s13 +
                  9*s12^2*s13^2 + 27*s12*s13^3 + 54*s13^4 + (-18*s12^3 -
                    126*s12^2*s13 - 234*s12*s13^2 - 9*s13^3)*s23 +
                  (-54*s12^2 - 324*s12*s13 - 207*s13^2)*s23^2 +
                  (-36*s12 - 144*s13)*s23^3) + p1q^5*((18*s12^3 + 36*s12^2*
                     s13 + 18*s12*s13^2)*s23 + (27*s12^2 + 27*s12*s13)*
                   s23^2 + (18*s12 + 9*s13)*s23^3 + 9*s23^4) + p1q^4*p2q*
                 (18*s12^3*s13 + 36*s12^2*s13^2 + 18*s12*s13^3 +
                  (108*s12^3 + 234*s12^2*s13 + 108*s12*s13^2 - 18*s13^3)*
                   s23 + (144*s12^2 + 90*s12*s13 - 72*s13^2)*s23^2 +
                  (54*s12 - 36*s13)*s23^3 + 18*s23^4) + p1q^3*p2q^2*
                 (-36*s12^4 + 36*s12^3*s13 + 153*s12^2*s13^2 + 99*s12*s13^3 +
                  18*s13^4 + (90*s12^3 + 396*s12^2*s13 + 252*s12*s13^2 -
                    9*s13^3)*s23 + (243*s12^2 + 189*s12*s13 - 153*s13^2)*
                   s23^2 + (144*s12 - 99*s13)*s23^3 + 27*s23^4) +
                p1q^2*p2q^3*(-36*s12^4 + 108*s12^3*s13 + 216*s12^2*s13^2 +
                  108*s12*s13^3 + 36*s13^4 + (-18*s12^3 + 198*s12^2*s13 +
                    18*s12*s13^2 - 54*s13^3)*s23 + (72*s12^2 - 90*s12*s13 -
                    270*s13^2)*s23^2 + (90*s12 - 144*s13)*s23^3 + 36*s23^4)))*
             Log((p1q + p2q)/(p1q + p2q + p3q)))/(4*p1q*p3q^5*s12^4*s23 +
             p1q*p2q^5*(-4*s12*s13^3*s23 - 4*s12*s13^2*s23^2) +
             p1q^2*p2q^4*(-8*s12*s13^3*s23 + 8*s12*s13*s23^3) +
             p1q^4*p2q^2*(8*s12*s13^2*s23^2 - 8*s12*s23^4) +
             p1q^5*p2q*(-4*s12*s13*s23^3 - 4*s12*s23^4) + p1q^3*p2q^3*
              (-4*s12*s13^3*s23 + 12*s12*s13^2*s23^2 + 12*s12*s13*s23^3 - 4*
                s12*s23^4) + p3q^4*(p1q^2*((4*s12^4 - 4*s12^3*s13)*s23 -
                 12*s12^3*s23^2) + p1q*p2q*((8*s12^4 - 12*s12^3*s13)*s23 -
                 4*s12^3*s23^2)) + p3q^3*(p1q*p2q^2*((4*s12^4 - 24*s12^3*
                    s13 + 12*s12^2*s13^2)*s23 + (-8*s12^3 + 8*s12^2*s13)*
                  s23^2) + p1q^2*p2q*((4*s12^4 - 20*s12^3*s13 + 8*s12^2*
                    s13^2)*s23 + (-28*s12^3 + 8*s12^2*s13)*s23^2 +
                 8*s12^2*s23^3) + p1q^3*(-4*s12^3*s13*s23 + (-12*s12^3 +
                   8*s12^2*s13)*s23^2 + 12*s12^2*s23^3)) +
             p3q*(p1q*p2q^4*((12*s12^2*s13^2 - 8*s12*s13^3)*s23 +
                 (8*s12^2*s13 - 8*s12*s13^2)*s23^2) + p1q^2*p2q^3*
                ((20*s12^2*s13^2 - 12*s12*s13^3)*s23 + (16*s12^2*s13 +
                   4*s12*s13^2)*s23^2 + (8*s12^2 + 16*s12*s13)*s23^3) + p1q^4*
                p2q*((8*s12^2*s13 + 8*s12*s13^2)*s23^2 + (12*s12^2 -
                   4*s12*s13)*s23^3 - 12*s12*s23^4) + p1q^3*p2q^2*
                ((8*s12^2*s13^2 - 4*s12*s13^3)*s23 + (16*s12^2*s13 +
                   20*s12*s13^2)*s23^2 + (20*s12^2 + 16*s12*s13)*s23^3 -
                 8*s12*s23^4) + p1q^5*(-4*s12*s13*s23^3 - 4*s12*s23^4)) +
             p3q^2*(p1q*p2q^3*((-12*s12^3*s13 + 24*s12^2*s13^2 - 4*s12*s13^3)*
                  s23 + (-4*s12^3 + 16*s12^2*s13 - 4*s12*s13^2)*s23^2) +
               p1q^2*p2q^2*((-16*s12^3*s13 + 28*s12^2*s13^2 - 4*s12*s13^3)*
                  s23 + (-16*s12^3 + 24*s12^2*s13 + 4*s12*s13^2)*s23^2 +
                 (16*s12^2 + 8*s12*s13)*s23^3) + p1q^4*(8*s12^2*s13*s23^2 +
                 (12*s12^2 - 4*s12*s13)*s23^3 - 4*s12*s23^4) + p1q^3*p2q*
                ((-4*s12^3*s13 + 8*s12^2*s13^2)*s23 + (-12*s12^3 +
                   24*s12^2*s13 + 8*s12*s13^2)*s23^2 + (32*s12^2 + 4*s12*s13)*
                  s23^3 - 4*s12*s23^4))) +
           ((p2q^5*(-18*s12*s13^3 - 18*s13^4 - 18*s13^3*s23) +
              p1q*p2q^4*(-18*s12*s13^3 - 18*s13^4 + (36*s12*s13^2 + 18*s13^3)*
                 s23 + 36*s13^2*s23^2) + p1q^3*p2q^2*((-9*s12^2 -
                  45*s12*s13 - 36*s13^2)*s23^2 + (-9*s12 - 36*s13)*s23^3) +
              p1q^2*p2q^3*((9*s12^2*s13 + 54*s12*s13^2 + 45*s13^3)*s23 +
                (-9*s12*s13 + 27*s13^2)*s23^2 - 18*s13*s23^3) +
              p1q^4*p2q*((9*s12 + 9*s13)*s23^3 + 9*s23^4) +
              p3q^4*(p2q*(-18*s12^3*s13 - 18*s12^2*s13^2 - 18*s12^2*s13*
                   s23) + p1q*((18*s12^3 + 36*s12^2*s13 + 18*s12*s13^2)*s23 +
                  (36*s12^2 + 36*s12*s13)*s23^2 + 18*s12*s23^3)) +
              p3q^3*(p2q^2*(-36*s12^3*s13 + 36*s12*s13^3 + (-36*s12^2*s13 +
                    36*s12*s13^2)*s23) + p1q*p2q*(-18*s12^3*s13 -
                  18*s12^2*s13^2 + (36*s12^3 + 36*s12^2*s13 - 18*s13^3)*s23 +
                  (72*s12^2 + 36*s12*s13 - 36*s13^2)*s23^2 +
                  (36*s12 - 18*s13)*s23^3) + p1q^2*((18*s12^3 + 36*s12^2*
                     s13 + 18*s12*s13^2)*s23 + (9*s12^2 - 9*s12*s13 -
                    18*s13^2)*s23^2 + (-27*s12 - 36*s13)*s23^3 - 18*s23^4)) +
              p3q^2*(p2q^3*(-18*s12^3*s13 + 54*s12^2*s13^2 + 54*s12*s13^3 -
                  18*s13^4 + (-18*s12^2*s13 + 72*s12*s13^2 - 18*s13^3)*s23) +
                p1q*p2q^2*(-18*s12^3*s13 + 18*s12^2*s13^2 + 36*s12*s13^3 +
                  (36*s12^3 + 54*s12^2*s13 + 108*s12*s13^2 + 36*s13^3)*s23 +
                  (72*s12^2 + 72*s12*s13 + 36*s13^2)*s23^2 + 36*s12*s23^3) +
                p1q^2*p2q*((27*s12^3 + 72*s12^2*s13 + 63*s12*s13^2 +
                    18*s13^3)*s23 + (36*s12^2 + 45*s12*s13 + 9*s13^2)*s23^2 +
                  (9*s12 - 9*s13)*s23^3) + p1q^3*((-27*s12^2 - 45*s12*s13 -
                    18*s13^2)*s23^2 + (-36*s12 - 27*s13)*s23^3 - 9*s23^4)) +
              p3q*(p2q^4*(36*s12^2*s13^2 - 36*s13^4 + (36*s12*s13^2 -
                    36*s13^3)*s23) + p1q*p2q^3*(36*s12^2*s13^2 +
                  18*s12*s13^3 - 18*s13^4 + (108*s12*s13^2 + 54*s13^3)*s23 +
                  72*s13^2*s23^2) + p1q^2*p2q^2*((27*s12^3 + 63*s12^2*s13 +
                    81*s12*s13^2 + 45*s13^3)*s23 + (45*s12^2 + 9*s12*s13)*
                   s23^2 + (18*s12 - 45*s13)*s23^3) + p1q^3*p2q*
                 ((-18*s12^2 - 54*s12*s13 - 36*s13^2)*s23^2 +
                  (-9*s12 - 27*s13)*s23^3 + 9*s23^4) + p1q^4*
                 ((9*s12 + 9*s13)*s23^3 + 9*s23^4)))*Log(p3q/(p1q + p2q +
                p3q)))/(2*p1q*p3q^4*s12^2*s13*s23^2 + 2*p1q*p2q^4*s13^3*
              s23^2 + 2*p1q^4*p2q*s13*s23^4 + p1q^2*p2q^3*(2*s13^3*s23^2 - 4*
                s13^2*s23^3) + p1q^3*p2q^2*(-4*s13^2*s23^3 + 2*s13*s23^4) +
             p3q^3*(p1q*p2q*(4*s12^2*s13 - 4*s12*s13^2)*s23^2 + p1q^2*
                (2*s12^2*s13*s23^2 - 4*s12*s13*s23^3)) +
             p3q^2*(p1q*p2q^2*(2*s12^2*s13 - 8*s12*s13^2 + 2*s13^3)*s23^2 +
               p1q^2*p2q*((2*s12^2*s13 - 4*s12*s13^2)*s23^2 +
                 (-8*s12*s13 - 4*s13^2)*s23^3) + p1q^3*(-4*s12*s13*s23^3 +
                 2*s13*s23^4)) + p3q*(p1q*p2q^3*(-4*s12*s13^2 + 4*s13^3)*
                s23^2 + 2*p1q^4*s13*s23^4 + p1q^2*p2q^2*
                ((-4*s12*s13^2 + 2*s13^3)*s23^2 + (-4*s12*s13 - 8*s13^2)*
                  s23^3) + p1q^3*p2q*((-4*s12*s13 - 4*s13^2)*s23^3 +
                 4*s13*s23^4))) + ((p3q^6*(-9*s12^3*s13 - 9*s12^2*s13^2 -
                9*s12^2*s13*s23) + p2q^6*(-9*s12*s13^3 - 9*s13^4 -
                9*s13^3*s23) + p1q*p2q^5*(-9*s12*s13^3 - 9*s13^4 +
                (27*s12*s13^2 + 18*s13^3)*s23 + 27*s13^2*s23^2) +
              p1q^2*p2q^4*(-45*s12^2*s13^2 - 81*s12*s13^3 - 36*s13^4 +
                (-18*s12*s13^2 - 9*s13^3)*s23 - 27*s12*s13*s23^2 -
                27*s13*s23^3) + p1q^6*((-9*s12^2 - 18*s12*s13 - 9*s13^2)*
                 s23^2 + (-18*s12 - 18*s13)*s23^3 - 9*s23^4) +
              p1q^3*p2q^3*(36*s12^3*s13 + 54*s12^2*s13^2 + 9*s12*s13^3 -
                9*s13^4 + (90*s12^2*s13 + 153*s12*s13^2 + 72*s13^3)*s23 +
                (27*s12*s13 + 54*s13^2)*s23^2 + (9*s12 - 18*s13)*s23^3 +
                9*s23^4) + p1q^4*p2q^2*(-9*s12^2*s13^2 - 18*s12*s13^3 -
                9*s13^4 + (-18*s12^2*s13 - 18*s12*s13^2)*s23 +
                (-9*s12^2 - 81*s12*s13 - 45*s13^2)*s23^2 - 45*s13*s23^3 +
                9*s23^4) + p1q^5*p2q*((18*s12^2*s13 + 36*s12*s13^2 +
                  18*s13^3)*s23 + (27*s12*s13 + 27*s13^2)*s23^2 +
                (9*s12 + 18*s13)*s23^3 + 9*s23^4) + p3q^5*(p2q*(-36*s12^4 -
                  72*s12^3*s13 - 18*s12^2*s13^2 + 18*s12*s13^3 +
                  (-72*s12^3 - 72*s12^2*s13 + 18*s12*s13^2)*s23 -
                  36*s12^2*s23^2) + p1q*(-9*s12^4 - 63*s12^3*s13 -
                  54*s12^2*s13^2 + (-45*s12^3 - 108*s12^2*s13 - 18*s12*s13^2)*
                   s23 + (-72*s12^2 - 54*s12*s13)*s23^2 - 36*s12*s23^3)) +
              p3q*(p2q^5*(18*s12^2*s13^2 + 18*s12*s13^3 + 18*s12*s13^2*s23) +
                p1q*p2q^4*(-63*s12^2*s13^2 - 135*s12*s13^3 - 72*s13^4 +
                  (-81*s12*s13^2 - 90*s13^3)*s23 - 18*s13^2*s23^2) +
                p1q^5*((18*s12^3 + 36*s12^2*s13 + 18*s12*s13^2)*s23 +
                  (27*s12^2 + 9*s12*s13 - 18*s13^2)*s23^2 + (9*s12 - 18*s13)*
                   s23^3) + p1q^2*p2q^3*(126*s12^3*s13 + 198*s12^2*s13^2 +
                  18*s12*s13^3 - 54*s13^4 + (360*s12^2*s13 + 504*s12*s13^2 +
                    144*s13^3)*s23 + (-18*s12^2 + 252*s12*s13 + 234*s13^2)*
                   s23^2 + (-18*s12 + 36*s13)*s23^3) + p1q^3*p2q^2*
                 (-36*s12^4 - 36*s12^3*s13 + 27*s12^2*s13^2 + 9*s12*s13^3 -
                  18*s13^4 + (-126*s12^3 - 90*s12^2*s13 + 135*s12*s13^2 +
                    90*s13^3)*s23 + (-225*s12^2 - 297*s12*s13 - 54*s13^2)*
                   s23^2 + (-153*s12 - 180*s13)*s23^3 - 18*s23^4) +
                p1q^4*p2q*(18*s12^3*s13 + 36*s12^2*s13^2 + 18*s12*s13^3 +
                  (-18*s12^3 + 36*s12^2*s13 + 90*s12*s13^2 + 36*s13^3)*s23 +
                  (-54*s12^2 - 54*s12*s13 - 18*s13^2)*s23^2 - 18*s13*s23^3 +
                  36*s23^4)) + p3q^4*(p2q^2*(-36*s12^4 + 18*s12^3*s13 +
                  126*s12^2*s13^2 + 63*s12*s13^3 - 9*s13^4 + (-72*s12^3 +
                    90*s12^2*s13 + 144*s12*s13^2 - 9*s13^3)*s23 +
                  (-36*s12^2 + 72*s12*s13)*s23^2) + p1q*p2q*(-54*s12^4 -
                  117*s12^3*s13 + 45*s12^2*s13^2 + 108*s12*s13^3 +
                  (-81*s12^3 + 18*s12^2*s13 + 270*s12*s13^2 + 54*s13^3)*s23 +
                  (-27*s12^2 + 144*s12*s13 + 90*s13^2)*s23^2 + 36*s13*
                   s23^3) + p1q^2*(-27*s12^4 - 117*s12^3*s13 - 90*s12^2*
                   s13^2 + (-108*s12^3 - 171*s12^2*s13)*s23 +
                  (-135*s12^2 - 27*s12*s13 + 27*s13^2)*s23^2 +
                  (-18*s12 + 63*s13)*s23^3 + 36*s23^4)) +
              p3q^2*(p2q^4*(-9*s12^3*s13 - 45*s12^2*s13^2 - 54*s12*s13^3 -
                  18*s13^4 + (-9*s12^2*s13 - 72*s12*s13^2 - 54*s13^3)*s23 -
                  36*s13^2*s23^2) + p1q*p2q^3*(153*s12^3*s13 + 243*s12^2*
                   s13^2 + 9*s12*s13^3 - 81*s13^4 + (9*s12^3 + 378*s12^2*
                     s13 + 351*s12*s13^2 - 36*s13^3)*s23 + (9*s12^2 +
                    288*s12*s13 + 117*s13^2)*s23^2 + 72*s13*s23^3) +
                p1q^2*p2q^2*(-81*s12^4 - 81*s12^3*s13 + 117*s12^2*s13^2 +
                  63*s12*s13^3 - 54*s13^4 + (-198*s12^3 + 63*s12^2*s13 +
                    468*s12*s13^2 + 117*s13^3)*s23 + (-261*s12^2 +
                    18*s12*s13 + 153*s13^2)*s23^2 + (-180*s12 - 54*s13)*
                   s23^3 - 36*s23^4) + p1q^3*p2q*(-18*s12^4 - 9*s12^3*s13 +
                  81*s12^2*s13^2 + 72*s12*s13^3 + (-135*s12^3 - 72*s12^2*
                     s13 + 144*s12*s13^2 + 36*s13^3)*s23 + (-333*s12^2 -
                    333*s12*s13 - 117*s13^2)*s23^2 + (-225*s12 - 162*s13)*
                   s23^3 - 9*s23^4) + p1q^4*(-9*s12^4 - 18*s12^3*s13 -
                  9*s12^2*s13^2 + (18*s12^3 + 90*s12^2*s13 + 72*s12*s13^2)*
                   s23 + (90*s12^2 + 153*s12*s13 + 18*s13^2)*s23^2 +
                  (126*s12 + 81*s13)*s23^3 + 63*s23^4)) +
              p3q^3*(p2q^3*(72*s12^3*s13 + 72*s12^2*s13^2 - 36*s12*s13^3 -
                  36*s13^4 + (144*s12^2*s13 + 36*s12*s13^2 - 72*s13^3)*s23 +
                  (72*s12*s13 - 36*s13^2)*s23^2) + p1q*p2q^2*(-81*s12^4 -
                  45*s12^3*s13 + 189*s12^2*s13^2 + 99*s12*s13^3 - 54*s13^4 +
                  (-135*s12^3 + 180*s12^2*s13 + 423*s12*s13^2 + 18*s13^3)*
                   s23 + (-54*s12^2 + 270*s12*s13 + 144*s13^2)*s23^2 +
                  72*s13*s23^3) + p1q^2*p2q*(-36*s12^4 - 72*s12^3*s13 +
                  108*s12^2*s13^2 + 144*s12*s13^3 + (-126*s12^3 + 342*s12*
                     s13^2 + 72*s13^3)*s23 + (-270*s12^2 - 108*s12*s13 +
                    18*s13^2)*s23^2 + (-216*s12 - 90*s13)*s23^3 - 36*s23^4) +
                p1q^3*(-27*s12^4 - 81*s12^3*s13 - 54*s12^2*s13^2 +
                  (-63*s12^3 - 18*s12^2*s13 + 72*s12*s13^2)*s23 +
                  (-9*s12^2 + 153*s12*s13 + 54*s13^2)*s23^2 +
                  (117*s12 + 144*s13)*s23^3 + 90*s23^4)))*
             Log((p1q + p3q)/(p1q + p2q + p3q)))/(-4*p1q*p2q^5*s13^4*s23 +
             p1q*p3q^5*(4*s12^3*s13*s23 + 4*s12^2*s13*s23^2) +
             p1q^2*p2q^4*((4*s12*s13^3 - 4*s13^4)*s23 + 12*s13^3*s23^2) +
             p1q^3*p2q^3*(4*s12*s13^3*s23 + (-8*s12*s13^2 + 12*s13^3)*s23^2 -
               12*s13^2*s23^3) + p1q^5*p2q*(4*s12*s13*s23^3 + 4*s13*s23^4) +
             p1q^4*p2q^2*(-8*s12*s13^2*s23^2 + (4*s12*s13 - 12*s13^2)*s23^3 +
               4*s13*s23^4) + p3q^4*(p1q*p2q*((8*s12^3*s13 - 12*s12^2*s13^2)*
                  s23 + (8*s12^2*s13 - 8*s12*s13^2)*s23^2) + p1q^2*
                (8*s12^3*s13*s23 - 8*s12*s13*s23^3)) +
             p3q^3*(p1q*p2q^2*((4*s12^3*s13 - 24*s12^2*s13^2 + 12*s12*s13^3)*
                  s23 + (4*s12^2*s13 - 16*s12*s13^2 + 4*s13^3)*s23^2) + p1q^2*
                p2q*((12*s12^3*s13 - 20*s12^2*s13^2)*s23 + (-4*s12^2*s13 -
                   16*s12*s13^2)*s23^2 + (-16*s12*s13 - 8*s13^2)*s23^3) +
               p1q^3*(4*s12^3*s13*s23 - 12*s12^2*s13*s23^2 - 12*s12*s13*
                  s23^3 + 4*s13*s23^4)) + p3q^2*(p1q*p2q^3*
                ((-12*s12^2*s13^2 + 24*s12*s13^3 - 4*s13^4)*s23 +
                 (-8*s12*s13^2 + 8*s13^3)*s23^2) + p1q^2*p2q^2*
                ((4*s12^3*s13 - 28*s12^2*s13^2 + 16*s12*s13^3)*s23 +
                 (-4*s12^2*s13 - 24*s12*s13^2 + 16*s13^3)*s23^2 +
                 (-8*s12*s13 - 16*s13^2)*s23^3) + p1q^4*(-8*s12^2*s13*s23^2 +
                 8*s13*s23^4) + p1q^3*p2q*((4*s12^3*s13 - 8*s12^2*s13^2)*
                  s23 + (-20*s12^2*s13 - 16*s12*s13^2)*s23^2 +
                 (-16*s12*s13 - 20*s13^2)*s23^3 + 8*s13*s23^4)) +
             p3q*(p1q*p2q^4*((12*s12*s13^3 - 8*s13^4)*s23 + 4*s13^3*s23^2) +
               p1q^2*p2q^3*((-8*s12^2*s13^2 + 20*s12*s13^3 - 4*s13^4)*s23 +
                 (-8*s12*s13^2 + 28*s13^3)*s23^2 - 8*s13^2*s23^3) + p1q^5*
                (4*s12*s13*s23^3 + 4*s13*s23^4) + p1q^3*p2q^2*
                ((-8*s12^2*s13^2 + 4*s12*s13^3)*s23 + (-8*s12^2*s13 -
                   24*s12*s13^2 + 12*s13^3)*s23^2 + (-4*s12*s13 - 32*s13^2)*
                  s23^3 + 4*s13*s23^4) + p1q^4*p2q*((-8*s12^2*s13 -
                   8*s12*s13^2)*s23^2 + (4*s12*s13 - 12*s13^2)*s23^3 +
                 12*s13*s23^4))) + ((p3q^6*((-9*s12^4 + 9*s12^2*s13^2)*
                 s23^2 + (-9*s12^3 + 9*s12^2*s13)*s23^3) +
              p2q^6*(-144*s12^3*s13^3 - 288*s12^2*s13^4 - 144*s12*s13^5 +
                (-252*s12^2*s13^3 - 288*s12*s13^4 - 36*s13^5)*s23 +
                (-9*s12^2*s13^2 - 108*s12*s13^3 - 27*s13^4)*s23^2 +
                (-9*s12*s13^2 + 9*s13^3)*s23^3) + p1q*p2q^5*(-144*s12^3*
                 s13^3 - 288*s12^2*s13^4 - 144*s12*s13^5 + (351*s12^3*s13^2 +
                  567*s12^2*s13^3 + 153*s12*s13^4 - 63*s13^5)*s23 +
                (585*s12^2*s13^2 + 720*s12*s13^3 + 63*s13^4)*s23^2 +
                (18*s12^2*s13 + 234*s12*s13^2 + 108*s13^3)*s23^3 +
                (18*s12*s13 - 18*s13^2)*s23^4) + p1q^2*p2q^4*(
                (-36*s12^4*s13 + 288*s12^3*s13^2 + 900*s12^2*s13^3 +
                  576*s12*s13^4)*s23 + (-288*s12^3*s13 - 171*s12^2*s13^2 +
                  576*s12*s13^3 + 243*s13^4)*s23^2 + (-396*s12^2*s13 -
                  531*s12*s13^2 + 99*s13^3)*s23^3 + (-9*s12^2 - 144*s12*s13 -
                  135*s13^2)*s23^4 + (-9*s12 + 9*s13)*s23^5) +
              p1q^6*((-18*s12^2 + 18*s13^2)*s23^4 + (-18*s12 + 18*s13)*
                 s23^5) + p1q^5*p2q*((9*s12^3 + 117*s12^2*s13 + 63*s12*
                   s13^2 - 45*s13^3)*s23^3 + (-9*s12^2 + 126*s12*s13 -
                  9*s13^2)*s23^4 + (-18*s12 + 36*s13)*s23^5) +
              p1q^3*p2q^3*((9*s12^3*s13^2 + 81*s12^2*s13^3 + 63*s12*s13^4 -
                  9*s13^5)*s23 + (-216*s12^3*s13 - 927*s12^2*s13^2 -
                  612*s12*s13^3 + 27*s13^4)*s23^2 + (45*s12^3 - 153*s12^2*
                   s13 - 999*s12*s13^2 - 261*s13^3)*s23^3 +
                (63*s12^2 + 90*s12*s13 - 243*s13^2)*s23^4 + (18*s12 + 54*s13)*
                 s23^5) + p1q^4*p2q^2*((-18*s12^3*s13 - 180*s12^2*s13^2 -
                  126*s12*s13^3 + 36*s13^4)*s23^2 + (36*s12^3 + 324*s12^2*
                   s13 + 72*s12*s13^2 - 36*s13^3)*s23^3 + (45*s12^2 +
                  432*s12*s13 + 45*s13^2)*s23^4 + (9*s12 + 117*s13)*s23^5) +
              p3q^5*(p2q*(-144*s12^5*s13 - 288*s12^4*s13^2 - 144*s12^3*
                   s13^3 + (-252*s12^4*s13 - 288*s12^3*s13^2 - 36*s12^2*
                     s13^3)*s23 + (-90*s12^3*s13 - 36*s12^2*s13^2 -
                    18*s12*s13^3)*s23^2 + (18*s12^2*s13 - 18*s12*s13^2)*
                   s23^3) + p1q*((63*s12^5 + 27*s12^4*s13 - 63*s12^3*s13^2 -
                    27*s12^2*s13^3)*s23 + (45*s12^4 - 36*s12^3*s13 -
                    9*s12^2*s13^2)*s23^2 + (18*s12^2*s13 - 18*s12*s13^2)*
                   s23^3 + (18*s12^2 - 18*s12*s13)*s23^4)) +
              p3q^4*(p2q^2*(-432*s12^5*s13 - 576*s12^4*s13^2 + 144*s12^3*
                   s13^3 + 288*s12^2*s13^4 + (-756*s12^4*s13 - 360*s12^3*
                     s13^2 + 468*s12^2*s13^3 + 72*s12*s13^4)*s23 +
                  (18*s12^4 - 324*s12^3*s13 + 81*s12^2*s13^2 + 72*s12*s13^3 +
                    9*s13^4)*s23^2 + (18*s12^3 - 18*s12^2*s13 - 9*s12*s13^2 +
                    9*s13^3)*s23^3) + p1q*p2q*(-144*s12^5*s13 - 288*s12^4*
                   s13^2 - 144*s12^3*s13^3 + (117*s12^5 + 135*s12^4*s13 +
                    333*s12^3*s13^2 + 369*s12^2*s13^3 + 54*s12*s13^4)*s23 +
                  (171*s12^4 + 522*s12^3*s13 + 693*s12^2*s13^2 + 126*s12*
                     s13^3)*s23^2 + (54*s12^3 + 324*s12^2*s13 + 72*s12*
                     s13^2 - 18*s13^3)*s23^3 + (18*s12*s13 - 18*s13^2)*
                   s23^4) + p1q^2*((72*s12^5 - 36*s12^4*s13 - 144*s12^3*
                     s13^2 - 36*s12^2*s13^3)*s23 + (-135*s12^4 - 216*s12^3*
                     s13 + 99*s12^2*s13^2 + 36*s12*s13^3)*s23^2 +
                  (-171*s12^3 + 99*s12^2*s13)*s23^3 + (27*s12^2 - 36*s12*
                     s13 + 9*s13^2)*s23^4 + (-9*s12 + 9*s13)*s23^5)) +
              p3q^3*(p2q^3*(-432*s12^5*s13 + 1152*s12^3*s13^3 + 576*s12^2*
                   s13^4 - 144*s12*s13^5 + (-756*s12^4*s13 + 648*s12^3*
                     s13^2 + 1368*s12^2*s13^3 - 72*s12*s13^4 - 36*s13^5)*
                   s23 + (-360*s12^3*s13 + 540*s12^2*s13^2 + 144*s12*s13^3 -
                    36*s13^4)*s23^2 + (-36*s12^2*s13 + 36*s12*s13^2)*s23^3) +
                p1q*p2q^2*(-288*s12^5*s13 - 288*s12^4*s13^2 + 288*s12^3*
                   s13^3 + 288*s12^2*s13^4 + (117*s12^5 + 567*s12^4*s13 +
                    1872*s12^3*s13^2 + 1764*s12^2*s13^3 + 315*s12*s13^4 -
                    27*s13^5)*s23 + (243*s12^4 + 1530*s12^3*s13 + 2178*s12^2*
                     s13^2 + 774*s12*s13^3 + 27*s13^4)*s23^2 +
                  (90*s12^3 + 666*s12^2*s13 + 414*s12*s13^2 + 54*s13^3)*
                   s23^3 + (-36*s12^2 + 36*s12*s13)*s23^4) + p1q^2*p2q*
                 ((108*s12^5 + 432*s12^4*s13 + 792*s12^3*s13^2 + 504*s12^2*
                     s13^3 + 36*s12*s13^4)*s23 + (-54*s12^4 + 234*s12^3*s13 +
                    522*s12^2*s13^2 + 18*s12*s13^3)*s23^2 + (-198*s12^3 -
                    72*s12^2*s13 - 234*s12*s13^2 - 108*s13^3)*s23^3 +
                  (-36*s12^2 - 108*s12*s13 - 108*s13^2)*s23^4) +
                p1q^3*((9*s12^5 - 63*s12^4*s13 - 81*s12^3*s13^2 - 9*s12^2*
                     s13^3)*s23 + (-225*s12^4 - 54*s12^3*s13 + 297*s12^2*
                     s13^2 + 54*s12*s13^3)*s23^2 + (-9*s12^3 + 387*s12^2*
                     s13 - 45*s12*s13^2 - 9*s13^3)*s23^3 + (207*s12^2 -
                    90*s12*s13 + 9*s13^2)*s23^4 + (-18*s12 + 18*s13)*
                   s23^5)) + p3q^2*(p2q^4*(-144*s12^5*s13 + 576*s12^4*s13^2 +
                  1152*s12^3*s13^3 - 432*s12*s13^5 + (-252*s12^4*s13 +
                    1224*s12^3*s13^2 + 936*s12^2*s13^3 - 648*s12*s13^4 -
                    108*s13^5)*s23 + (-9*s12^4 - 108*s12^3*s13 + 639*s12^2*
                     s13^2 - 108*s12*s13^3 - 126*s13^4)*s23^2 +
                  (-9*s12^3 + 9*s12^2*s13 + 18*s12*s13^2 - 18*s13^3)*s23^3) +
                p1q*p2q^3*(-144*s12^5*s13 + 288*s12^4*s13^2 + 864*s12^3*
                   s13^3 + 288*s12^2*s13^4 - 144*s12*s13^5 + (63*s12^5 +
                    621*s12^4*s13 + 2700*s12^3*s13^2 + 3024*s12^2*s13^3 +
                    837*s12*s13^4 - 45*s13^5)*s23 + (117*s12^4 + 1278*s12^3*
                     s13 + 2826*s12^2*s13^2 + 1962*s12*s13^3 + 153*s13^4)*
                   s23^2 + (54*s12^3 + 486*s12^2*s13 + 738*s12*s13^2 +
                    234*s13^3)*s23^3 + (-36*s12*s13 + 36*s13^2)*s23^4) +
                p1q^2*p2q^2*((72*s12^5 + 720*s12^4*s13 + 1224*s12^3*s13^2 +
                    792*s12^2*s13^3 + 216*s12*s13^4)*s23 + (9*s12^4 -
                    108*s12^3*s13 - 576*s12^2*s13^2 - 144*s12*s13^3 +
                    99*s13^4)*s23^2 + (-171*s12^3 - 1341*s12^2*s13 -
                    1215*s12*s13^2 - 117*s13^3)*s23^3 + (-90*s12^2 -
                    540*s12*s13 - 234*s13^2)*s23^4 + (18*s12 - 18*s13)*
                   s23^5) + p1q^4*((-36*s12^4 + 126*s12^3*s13 + 180*s12^2*
                     s13^2 + 18*s12*s13^3)*s23^2 + (216*s12^3 + 234*s12^2*
                     s13 - 180*s12*s13^2 - 18*s13^3)*s23^3 + (171*s12^2 -
                    234*s12*s13 + 9*s13^2)*s23^4 + (-81*s12 + 27*s13)*
                   s23^5) + p1q^3*p2q*((9*s12^5 + 63*s12^4*s13 + 189*s12^3*
                     s13^2 + 153*s12^2*s13^3 + 18*s12*s13^4)*s23 +
                  (-189*s12^4 - 486*s12^3*s13 - 153*s12^2*s13^2 + 90*s12*
                     s13^3 + 18*s13^4)*s23^2 + (-117*s12^3 - 243*s12^2*s13 -
                    45*s12*s13^2 - 99*s13^3)*s23^3 + (63*s12^2 + 54*s12*s13 -
                    63*s13^2)*s23^4 + (-18*s12 + 54*s13)*s23^5)) +
              p3q*(p2q^5*(288*s12^4*s13^2 + 144*s12^3*s13^3 - 576*s12^2*
                   s13^4 - 432*s12*s13^5 + (504*s12^3*s13^2 - 180*s12^2*
                     s13^3 - 792*s12*s13^4 - 108*s13^5)*s23 +
                  (18*s12^3*s13 + 216*s12^2*s13^2 - 270*s12*s13^3 -
                    108*s13^4)*s23^2 + (18*s12^2*s13 - 18*s12*s13^2)*s23^3) +
                p1q*p2q^4*(288*s12^4*s13^2 + 288*s12^3*s13^3 - 288*s12^2*
                   s13^4 - 288*s12*s13^5 + (162*s12^4*s13 + 1575*s12^3*
                     s13^2 + 2223*s12^2*s13^3 + 729*s12*s13^4 - 81*s13^5)*
                   s23 + (306*s12^3*s13 + 1935*s12^2*s13^2 + 2034*s12*s13^3 +
                    189*s13^4)*s23^2 + (18*s12^3 + 144*s12^2*s13 + 648*s12*
                     s13^2 + 270*s13^3)*s23^3 + (18*s12^2 - 18*s12*s13)*
                   s23^4) + p1q^2*p2q^3*((36*s12^5 + 216*s12^4*s13 +
                    576*s12^3*s13^2 + 1152*s12^2*s13^3 + 756*s12*s13^4)*s23 +
                  (36*s12^4 - 630*s12^3*s13 - 1170*s12^2*s13^2 + 234*s12*
                     s13^3 + 234*s13^4)*s23^2 + (-1422*s12^2*s13 - 1656*s12*
                     s13^2 - 54*s13^3)*s23^3 + (-612*s12*s13 - 288*s13^2)*
                   s23^4) + p1q^5*((45*s12^3 - 63*s12^2*s13 - 117*s12*s13^2 -
                    9*s13^3)*s23^3 + (-45*s12^2 - 162*s12*s13 + 27*s13^2)*
                   s23^4 + (-90*s12 + 36*s13)*s23^5) + p1q^4*p2q*
                 ((-18*s12^4 - 144*s12^3*s13 + 144*s12*s13^3 + 18*s13^4)*
                   s23^2 + (90*s12^3 + 216*s12^2*s13 + 270*s12*s13^2 -
                    72*s13^3)*s23^3 + (72*s12^2 + 270*s12*s13 - 18*s13^2)*
                   s23^4 + (-36*s12 + 72*s13)*s23^5) + p1q^3*p2q^2*
                 ((-18*s12^4*s13 - 153*s12^3*s13^2 - 189*s12^2*s13^3 -
                    63*s12*s13^4 - 9*s13^5)*s23 + (-72*s12^4 - 972*s12^3*
                     s13 - 1701*s12^2*s13^2 - 684*s12*s13^3 + 45*s13^4)*
                   s23^2 + (-27*s12^3 - 819*s12^2*s13 - 891*s12*s13^2 -
                    171*s13^3)*s23^3 + (99*s12^2 + 198*s12*s13 - 99*s13^2)*
                   s23^4 + (54*s12 + 126*s13)*s23^5)))*
             Log((p2q + p3q)/(p1q + p2q + p3q)))/
            (p1q*p3q^5*(4*s12^4*s13 + 4*s12^3*s13^2)*s23^2 +
             p1q*p2q^5*(4*s12^2*s13^3 + 4*s12*s13^4)*s23^2 -
             4*p1q^5*p2q*s12*s13*s23^5 + p1q^2*p2q^4*((4*s12^2*s13^3 +
                 4*s12*s13^4)*s23^2 + (-8*s12^2*s13^2 - 12*s12*s13^3)*
                s23^3) + p1q^3*p2q^3*((-8*s12^2*s13^2 - 12*s12*s13^3)*s23^3 +
               (4*s12^2*s13 + 12*s12*s13^2)*s23^4) + p1q^4*p2q^2*
              ((4*s12^2*s13 + 12*s12*s13^2)*s23^4 - 4*s12*s13*s23^5) +
             p3q^4*(p1q*p2q*(12*s12^4*s13 + 4*s12^3*s13^2 - 8*s12^2*s13^3)*
                s23^2 + p1q^2*((4*s12^4*s13 + 4*s12^3*s13^2)*s23^2 +
                 (-12*s12^3*s13 - 8*s12^2*s13^2)*s23^3)) +
             p3q^3*(p1q*p2q^2*(12*s12^4*s13 - 12*s12^3*s13^2 - 20*s12^2*
                  s13^3 + 4*s12*s13^4)*s23^2 + p1q^2*p2q*
                ((8*s12^4*s13 - 8*s12^2*s13^3)*s23^2 + (-32*s12^3*s13 -
                   24*s12^2*s13^2 - 8*s12*s13^3)*s23^3) + p1q^3*
                ((-12*s12^3*s13 - 8*s12^2*s13^2)*s23^3 + (12*s12^2*s13 +
                   4*s12*s13^2)*s23^4)) + p3q*(p1q*p2q^4*(-8*s12^3*s13^2 +
                 4*s12^2*s13^3 + 12*s12*s13^4)*s23^2 - 4*p1q^5*s12*s13*
                s23^5 + p1q^2*p2q^3*((-8*s12^3*s13^2 + 8*s12*s13^4)*s23^2 +
                 (-8*s12^3*s13 - 24*s12^2*s13^2 - 32*s12*s13^3)*s23^3) +
               p1q^3*p2q^2*((-8*s12^3*s13 - 16*s12^2*s13^2 - 20*s12*s13^3)*
                  s23^3 + (20*s12^2*s13 + 28*s12*s13^2)*s23^4) + p1q^4*p2q*
                ((16*s12^2*s13 + 16*s12*s13^2)*s23^4 - 8*s12*s13*s23^5)) +
             p3q^2*(p1q*p2q^3*(4*s12^4*s13 - 20*s12^3*s13^2 - 12*s12^2*
                  s13^3 + 12*s12*s13^4)*s23^2 + p1q^2*p2q^2*
                ((4*s12^4*s13 - 12*s12^3*s13^2 - 12*s12^2*s13^3 +
                   4*s12*s13^4)*s23^2 + (-28*s12^3*s13 - 32*s12^2*s13^2 -
                   28*s12*s13^3)*s23^3) + p1q^3*p2q*((-20*s12^3*s13 -
                   16*s12^2*s13^2 - 8*s12*s13^3)*s23^3 + (28*s12^2*s13 +
                   20*s12*s13^2)*s23^4) + p1q^4*((12*s12^2*s13 + 4*s12*s13^2)*
                  s23^4 - 4*s12*s13*s23^5))) +
           ((p1q*p2q*((-9*s12^2 - 18*s12*s13 - 9*s13^2)*s23 +
                (-9*s12 - 9*s13)*s23^2) + p2q^2*(72*s12^2*s13 +
                72*s12*s13^2 + (108*s12*s13 + 36*s13^2)*s23 + 36*s13*s23^2) +
              p3q*(p1q*((-27*s12^2 - 18*s12*s13 + 9*s13^2)*s23 +
                  (-27*s12 + 9*s13)*s23^2) + p2q*(72*s12^2*s13 +
                  72*s12*s13^2 + (18*s12^2 + 108*s12*s13 + 18*s13^2)*s23 +
                  (18*s12 + 18*s13)*s23^2)))*Log(-s12 - s13 - s23))/
            (2*p1q*p2q*s12*s13*s23^2 + 2*p1q*p3q*s12*s13*s23^2) +
           ((p3q^6*((9*s12^4 + 9*s12^3*s13)*s23 + 9*s12^3*s23^2) +
              p2q^6*(-36*s12^2*s13^3 - 36*s12*s13^4 + (-63*s12^2*s13^2 -
                  171*s12*s13^3 - 72*s13^4)*s23 + (-135*s12*s13^2 -
                  144*s13^3)*s23^2 - 72*s13^2*s23^3) + p1q*p2q^5*(
                -72*s12^2*s13^3 - 72*s12*s13^4 + (-18*s12^2*s13^2 -
                  189*s12*s13^3 - 99*s13^4)*s23 + (126*s12^2*s13 +
                  144*s12*s13^2 - 63*s13^3)*s23^2 + (270*s12*s13 + 180*s13^2)*
                 s23^3 + 144*s13*s23^4) + p1q^3*p2q^3*((36*s12^3*s13 +
                  180*s12^2*s13^2 + 189*s12*s13^3 + 45*s13^4)*s23 +
                (-36*s12^3 - 90*s12^2*s13 + 72*s12*s13^2 + 63*s13^3)*s23^2 +
                (-162*s12^2 - 297*s12*s13 - 63*s13^2)*s23^3 +
                (-234*s12 - 189*s13)*s23^4 - 108*s23^5) + p1q^2*p2q^4*(
                -36*s12^2*s13^3 - 36*s12*s13^4 + (36*s12^3*s13 + 216*s12^2*
                   s13^2 + 153*s12*s13^3 + 9*s13^4)*s23 + (216*s12^2*s13 +
                  549*s12*s13^2 + 198*s13^3)*s23^2 + (-63*s12^2 +
                  261*s12*s13 + 333*s13^2)*s23^3 + (-135*s12 + 72*s13)*
                 s23^4 - 72*s23^5) + p1q^4*p2q^2*((9*s12^2*s13^2 +
                  18*s12*s13^3 + 9*s13^4)*s23 + (-36*s12^3 - 198*s12^2*s13 -
                  234*s12*s13^2 - 72*s13^3)*s23^2 + (-54*s12^2 - 243*s12*
                   s13 - 144*s13^2)*s23^3 + (-27*s12 - 72*s13)*s23^4 -
                9*s23^5) + p1q^6*((9*s12^2 + 18*s12*s13 + 9*s13^2)*s23^3 +
                (18*s12 + 18*s13)*s23^4 + 9*s23^5) + p1q^5*p2q*(
                (-18*s12^2*s13 - 36*s12*s13^2 - 18*s13^3)*s23^2 +
                (54*s12^2 + 63*s12*s13 + 9*s13^2)*s23^3 + (90*s12 + 63*s13)*
                 s23^4 + 36*s23^5) + p3q^5*(p2q*(36*s12^5 + 36*s12^4*s13 +
                  (72*s12^4 + 18*s12^3*s13 - 18*s12^2*s13^2)*s23 +
                  (36*s12^3 - 18*s12^2*s13)*s23^2) + p1q*
                 ((9*s12^4 + 9*s12^3*s13)*s23 + (-18*s12^3 - 27*s12^2*s13)*
                   s23^2 - 27*s12^2*s23^3)) + p3q^4*(p1q*p2q*(36*s12^5 -
                  36*s12^3*s13^2 + (-36*s12^4 - 189*s12^3*s13 - 81*s12^2*
                     s13^2)*s23 + (-198*s12^3 - 207*s12^2*s13)*s23^2 -
                  126*s12^2*s23^3) + p2q^2*(72*s12^5 - 36*s12^4*s13 -
                  108*s12^3*s13^2 + (90*s12^4 - 198*s12^3*s13 - 99*s12^2*
                     s13^2 + 9*s12*s13^3)*s23 + (-18*s12^3 - 144*s12^2*s13 +
                    9*s12*s13^2)*s23^2 - 36*s12^2*s23^3) + p1q^2*
                 ((9*s12^3*s13 + 9*s12^2*s13^2)*s23 + (-45*s12^3 - 36*s12^2*
                     s13)*s23^2 + (-18*s12^2 + 27*s12*s13)*s23^3 +
                  27*s12*s23^4)) + p3q^2*(p2q^4*(-108*s12^4*s13 + 108*s12^3*
                   s13^2 + 180*s12^2*s13^3 - 36*s12*s13^4 + (-63*s12^4 -
                    99*s12^3*s13 + 522*s12^2*s13^2 + 162*s12*s13^3 -
                    36*s13^4)*s23 + (-135*s12^3 + 216*s12^2*s13 + 414*s12*
                     s13^2 - 72*s13^3)*s23^2 + (-72*s12^2 + 216*s12*s13 -
                    36*s13^2)*s23^3) + p1q*p2q^3*(-144*s12^4*s13 +
                  108*s12^3*s13^2 + 216*s12^2*s13^3 - 36*s12*s13^4 +
                  (-162*s12^4 - 207*s12^3*s13 + 747*s12^2*s13^2 + 297*s12*
                     s13^3 - 63*s13^4)*s23 + (-126*s12^3 + 657*s12^2*s13 +
                    900*s12*s13^2 - 81*s13^3)*s23^2 + (252*s12^2 + 810*s12*
                     s13 + 54*s13^2)*s23^3 + (216*s12 + 72*s13)*s23^4) +
                p1q^3*p2q*((54*s12^4 + 189*s12^3*s13 + 189*s12^2*s13^2 +
                    54*s12*s13^3)*s23 + (180*s12^3 + 369*s12^2*s13 +
                    198*s12*s13^2 + 36*s13^3)*s23^2 + (288*s12^2 + 315*s12*
                     s13 + 81*s13^2)*s23^3 + (108*s12 - 9*s13)*s23^4 -
                  54*s23^5) + p1q^2*p2q^2*(-36*s12^4*s13 + 36*s12^3*s13^2 +
                  72*s12^2*s13^3 + (-36*s12^4 + 117*s12^3*s13 + 477*s12^2*
                     s13^2 + 189*s12*s13^3 - 27*s13^4)*s23 + (243*s12^3 +
                    900*s12^2*s13 + 693*s12*s13^2 + 18*s13^3)*s23^2 +
                  (603*s12^2 + 864*s12*s13 + 153*s13^2)*s23^3 +
                  (288*s12 + 72*s13)*s23^4 - 36*s23^5) + p1q^4*
                 ((9*s12^4 + 18*s12^3*s13 + 9*s12^2*s13^2)*s23 +
                  (-18*s12^2*s13 - 18*s12*s13^2)*s23^2 + (9*s12^2 -
                    9*s12*s13 - 9*s13^2)*s23^3 + (-9*s12 - 36*s13)*s23^4 -
                  27*s23^5)) + p3q*(p2q^5*(108*s12^3*s13^2 + 36*s12^2*s13^3 -
                  72*s12*s13^4 + (126*s12^3*s13 + 306*s12^2*s13^2 -
                    108*s12*s13^3 - 108*s13^4)*s23 + (270*s12^2*s13 +
                    108*s12*s13^2 - 216*s13^3)*s23^2 + (144*s12*s13 -
                    108*s13^2)*s23^3) + p1q*p2q^4*(180*s12^3*s13^2 +
                  72*s12^2*s13^3 - 108*s12*s13^4 + (180*s12^3*s13 +
                    603*s12^2*s13^2 - 27*s12*s13^3 - 162*s13^4)*s23 +
                  (126*s12^3 + 810*s12^2*s13 + 774*s12*s13^2 - 135*s13^3)*
                   s23^2 + (270*s12^2 + 864*s12*s13 + 243*s13^2)*s23^3 +
                  (144*s12 + 216*s13)*s23^4) + p1q^3*p2q^2*
                 ((36*s12^4 + 54*s12^3*s13 + 45*s12^2*s13^2 + 27*s12*s13^3)*
                   s23 + (54*s12^3 - 72*s12^2*s13 + 81*s13^3)*s23^2 +
                  (-81*s12^2 - 171*s12*s13 + 117*s13^2)*s23^3 +
                  (-252*s12 - 117*s13)*s23^4 - 153*s23^5) + p1q^2*p2q^3*
                 (72*s12^3*s13^2 + 36*s12^2*s13^3 - 36*s12*s13^4 +
                  (-36*s12^4 - 36*s12^3*s13 + 270*s12^2*s13^2 + 108*s12*
                     s13^3 - 54*s13^4)*s23 + (72*s12^3 + 432*s12^2*s13 +
                    720*s12*s13^2 + 144*s13^3)*s23^2 + (180*s12^2 +
                    630*s12*s13 + 432*s13^2)*s23^3 + (-36*s12 + 126*s13)*
                   s23^4 - 108*s23^5) + p1q^4*p2q*((-18*s12^3*s13 -
                    36*s12^2*s13^2 - 18*s12*s13^3)*s23 + (-108*s12^3 -
                    288*s12^2*s13 - 180*s12*s13^2)*s23^2 + (-198*s12^2 -
                    270*s12*s13 - 18*s13^2)*s23^3 + (-162*s12 - 90*s13)*
                   s23^4 - 72*s23^5) + p1q^5*((-18*s12^3 - 36*s12^2*s13 -
                    18*s12*s13^2)*s23^2 + (-27*s12^2 - 27*s12*s13)*s23^3 +
                  (-18*s12 - 9*s13)*s23^4 - 9*s23^5)) +
              p3q^3*(p2q^3*(36*s12^5 - 180*s12^4*s13 - 108*s12^3*s13^2 +
                  108*s12^2*s13^3 + (-36*s12^4 - 432*s12^3*s13 + 72*s12^2*
                     s13^2 + 108*s12*s13^3)*s23 + (-180*s12^3 - 180*s12^2*
                     s13 + 180*s12*s13^2)*s23^2 + (-108*s12^2 + 72*s12*s13)*
                   s23^3) + p1q*p2q^2*(36*s12^5 - 144*s12^4*s13 - 108*s12^3*
                   s13^2 + 72*s12^2*s13^3 + (-207*s12^4 - 585*s12^3*s13 +
                    45*s12^2*s13^2 + 135*s12*s13^3)*s23 + (-432*s12^3 -
                    207*s12^2*s13 + 270*s12*s13^2 - 9*s13^3)*s23^2 +
                  (-117*s12^2 + 216*s12*s13 - 9*s13^2)*s23^3 + 72*s12*
                   s23^4) + p1q^2*p2q*(-36*s12^4*s13 - 36*s12^3*s13^2 +
                  (-108*s12^4 - 162*s12^3*s13 + 18*s12*s13^3)*s23 +
                  (-162*s12^3 + 90*s12*s13^2)*s23^2 + (90*s12^2 + 234*s12*
                     s13 + 18*s13^2)*s23^3 + (144*s12 + 18*s13)*s23^4) +
                p1q^3*((9*s12^4 + 27*s12^3*s13 + 18*s12^2*s13^2)*s23 +
                  9*s12^2*s13*s23^2 + (54*s12^2 + 63*s12*s13)*s23^3 +
                  (54*s12 - 9*s13)*s23^4 - 9*s23^5)))*
             Log(s12/(s12 + s13 + s23)))/(4*p1q*p3q^5*s12^4*s23^2 +
             p1q*p2q^5*(-4*s12*s13^3*s23^2 - 4*s12*s13^2*s23^3) +
             p1q^2*p2q^4*(-8*s12*s13^3*s23^2 + 8*s12*s13*s23^4) +
             p1q^4*p2q^2*(8*s12*s13^2*s23^3 - 8*s12*s23^5) +
             p1q^5*p2q*(-4*s12*s13*s23^4 - 4*s12*s23^5) + p1q^3*p2q^3*
              (-4*s12*s13^3*s23^2 + 12*s12*s13^2*s23^3 + 12*s12*s13*s23^4 - 4*
                s12*s23^5) + p3q^4*(p1q^2*((4*s12^4 - 4*s12^3*s13)*s23^2 -
                 12*s12^3*s23^3) + p1q*p2q*((8*s12^4 - 12*s12^3*s13)*s23^2 -
                 4*s12^3*s23^3)) + p3q^3*(p1q*p2q^2*((4*s12^4 - 24*s12^3*
                    s13 + 12*s12^2*s13^2)*s23^2 + (-8*s12^3 + 8*s12^2*s13)*
                  s23^3) + p1q^2*p2q*((4*s12^4 - 20*s12^3*s13 + 8*s12^2*
                    s13^2)*s23^2 + (-28*s12^3 + 8*s12^2*s13)*s23^3 +
                 8*s12^2*s23^4) + p1q^3*(-4*s12^3*s13*s23^2 +
                 (-12*s12^3 + 8*s12^2*s13)*s23^3 + 12*s12^2*s23^4)) +
             p3q*(p1q*p2q^4*((12*s12^2*s13^2 - 8*s12*s13^3)*s23^2 +
                 (8*s12^2*s13 - 8*s12*s13^2)*s23^3) + p1q^2*p2q^3*
                ((20*s12^2*s13^2 - 12*s12*s13^3)*s23^2 + (16*s12^2*s13 +
                   4*s12*s13^2)*s23^3 + (8*s12^2 + 16*s12*s13)*s23^4) + p1q^4*
                p2q*((8*s12^2*s13 + 8*s12*s13^2)*s23^3 + (12*s12^2 -
                   4*s12*s13)*s23^4 - 12*s12*s23^5) + p1q^3*p2q^2*
                ((8*s12^2*s13^2 - 4*s12*s13^3)*s23^2 + (16*s12^2*s13 +
                   20*s12*s13^2)*s23^3 + (20*s12^2 + 16*s12*s13)*s23^4 -
                 8*s12*s23^5) + p1q^5*(-4*s12*s13*s23^4 - 4*s12*s23^5)) +
             p3q^2*(p1q*p2q^3*((-12*s12^3*s13 + 24*s12^2*s13^2 - 4*s12*s13^3)*
                  s23^2 + (-4*s12^3 + 16*s12^2*s13 - 4*s12*s13^2)*s23^3) +
               p1q^2*p2q^2*((-16*s12^3*s13 + 28*s12^2*s13^2 - 4*s12*s13^3)*
                  s23^2 + (-16*s12^3 + 24*s12^2*s13 + 4*s12*s13^2)*s23^3 +
                 (16*s12^2 + 8*s12*s13)*s23^4) + p1q^4*(8*s12^2*s13*s23^3 +
                 (12*s12^2 - 4*s12*s13)*s23^4 - 4*s12*s23^5) + p1q^3*p2q*
                ((-4*s12^3*s13 + 8*s12^2*s13^2)*s23^2 + (-12*s12^3 +
                   24*s12^2*s13 + 8*s12*s13^2)*s23^3 + (32*s12^2 + 4*s12*s13)*
                  s23^4 - 4*s12*s23^5))) +
           ((p3q^6*((9*s12^3*s13 + 9*s12^2*s13^2)*s23 + 9*s12^2*s13*s23^2) +
              p2q^6*(-36*s12*s13^4 - 36*s13^5 + (9*s12*s13^3 - 27*s13^4)*
                 s23 + 9*s13^3*s23^2) + p1q*p2q^5*(36*s12^2*s13^3 -
                36*s13^5 + (153*s12*s13^3 + 81*s13^4)*s23 +
                (-27*s12*s13^2 + 90*s13^3)*s23^2 - 27*s13^2*s23^3) +
              p1q^2*p2q^4*(36*s12^2*s13^3 + 36*s12*s13^4 + (-9*s12^2*s13^2 +
                  189*s12*s13^3 + 162*s13^4)*s23 + (-144*s12*s13^2 +
                  27*s13^3)*s23^2 + (27*s12*s13 - 108*s13^2)*s23^3 +
                27*s13*s23^4) + p1q^5*p2q*((-18*s12^2*s13 - 36*s12*s13^2 -
                  18*s13^3)*s23^2 + (-18*s12^2 - 45*s12*s13 - 27*s13^2)*
                 s23^3 + (-45*s12 - 36*s13)*s23^4 - 27*s23^5) +
              p1q^3*p2q^3*((-54*s12^3*s13 - 162*s12^2*s13^2 - 99*s12*s13^3 +
                  9*s13^4)*s23 + (-108*s12^2*s13 - 405*s12*s13^2 - 234*s13^3)*
                 s23^2 + (9*s12*s13 - 180*s13^2)*s23^3 + (-9*s12 + 54*s13)*
                 s23^4 - 9*s23^5) + p1q^4*p2q^2*((9*s12^2*s13^2 +
                  18*s12*s13^3 + 9*s13^4)*s23 + (18*s12^3 + 108*s12^2*s13 +
                  90*s12*s13^2)*s23^2 + (45*s12^2 + 261*s12*s13 + 135*s13^2)*
                 s23^3 + (18*s12 + 135*s13)*s23^4 - 9*s23^5) +
              p1q^6*((9*s12^2 + 18*s12*s13 + 9*s13^2)*s23^3 +
                (18*s12 + 18*s13)*s23^4 + 9*s23^5) + p3q^5*(
                p2q*(36*s12^4*s13 + 36*s12^3*s13^2 + (36*s12^4 + 144*s12^3*
                     s13 + 54*s12^2*s13^2 - 18*s12*s13^3)*s23 +
                  (72*s12^3 + 108*s12^2*s13 - 18*s12*s13^2)*s23^2 +
                  36*s12^2*s23^3) + p1q*((-27*s12^4 - 9*s12^3*s13 +
                    18*s12^2*s13^2)*s23 + (-63*s12^3 - 36*s12^2*s13 -
                    18*s12*s13^2)*s23^2 + (-36*s12^2 - 18*s12*s13)*s23^3)) +
              p3q^4*(p2q^2*(72*s12^4*s13 - 36*s12^3*s13^2 - 108*s12^2*s13^3 +
                  (36*s12^4 + 126*s12^3*s13 - 234*s12^2*s13^2 - 135*s12*
                     s13^3 + 9*s13^4)*s23 + (72*s12^3 - 18*s12^2*s13 -
                    216*s12*s13^2 + 9*s13^3)*s23^2 + (36*s12^2 - 72*s12*s13)*
                   s23^3) + p1q*p2q*(72*s12^4*s13 + 72*s12^3*s13^2 +
                  (-18*s12^4 + 189*s12^3*s13 + 99*s12^2*s13^2 - 36*s12*s13^3)*
                   s23 + (-135*s12^3 - 54*s12^2*s13 - 126*s12*s13^2 -
                    18*s13^3)*s23^2 + (-189*s12^2 - 144*s12*s13 - 18*s13^2)*
                   s23^3 - 72*s12*s23^4) + p1q^2*((-45*s12^4 - 27*s12^3*s13 +
                    18*s12^2*s13^2)*s23 + (-54*s12^3 - 27*s12^2*s13 -
                    36*s12*s13^2)*s23^2 + (63*s12^2 + 45*s12*s13 + 9*s13^2)*
                   s23^3 + (72*s12 + 9*s13)*s23^4)) +
              p3q*(p2q^5*(108*s12^2*s13^3 + 36*s12*s13^4 - 72*s13^5 +
                  (-18*s12^2*s13^2 + 126*s12*s13^3 - 36*s13^4)*s23 +
                  (-18*s12*s13^2 + 36*s13^3)*s23^2) + p1q*p2q^4*
                 (-72*s12^3*s13^2 + 108*s12^2*s13^3 + 144*s12*s13^4 -
                  36*s13^5 + (-153*s12^2*s13^2 + 423*s12*s13^3 + 288*s13^4)*
                   s23 + (-135*s12*s13^2 + 270*s13^3)*s23^2 - 54*s13^2*
                   s23^3) + p1q^2*p2q^3*(-72*s12^3*s13^2 - 36*s12^2*s13^3 +
                  36*s12*s13^4 + (-90*s12^3*s13 - 468*s12^2*s13^2 -
                    90*s12*s13^3 + 180*s13^4)*s23 + (-270*s12^2*s13 -
                    1008*s12*s13^2 - 342*s13^3)*s23^2 + (18*s12^2 -
                    162*s12*s13 - 522*s13^2)*s23^3 + 18*s12*s23^4) +
                p1q^4*p2q*((-18*s12^3*s13 - 36*s12^2*s13^2 - 18*s12*s13^3)*
                   s23 + (54*s12^3 + 72*s12^2*s13 - 18*s12*s13^2 - 36*s13^3)*
                   s23^2 + (90*s12^2 + 216*s12*s13 + 108*s13^2)*s23^3 +
                  (-36*s12 + 72*s13)*s23^4 - 72*s23^5) + p1q^5*
                 ((-18*s12^3 - 36*s12^2*s13 - 18*s12*s13^2)*s23^2 +
                  (-45*s12^2 - 27*s12*s13 + 18*s13^2)*s23^3 - 45*s12*s23^4 -
                  18*s23^5) + p1q^3*p2q^2*((-18*s12^4 - 90*s12^3*s13 -
                    189*s12^2*s13^2 - 99*s12*s13^3 + 18*s13^4)*s23 +
                  (-333*s12*s13^2 - 252*s13^3)*s23^2 + (135*s12^2 +
                    513*s12*s13 + 72*s13^2)*s23^3 + (135*s12 + 360*s13)*
                   s23^4 + 18*s23^5)) + p3q^3*(p2q^3*(36*s12^4*s13 -
                  180*s12^3*s13^2 - 108*s12^2*s13^3 + 108*s12*s13^4 +
                  (-396*s12^2*s13^2 + 36*s12*s13^3 + 72*s13^4)*s23 +
                  (-108*s12^2*s13 - 180*s12*s13^2 + 108*s13^3)*s23^2 +
                  (-72*s12*s13 + 36*s13^2)*s23^3) + p1q*p2q^2*
                 (108*s12^4*s13 - 72*s12^3*s13^2 - 180*s12^2*s13^3 +
                  (9*s12^4 + 189*s12^3*s13 - 441*s12^2*s13^2 - 315*s12*
                     s13^3 + 18*s13^4)*s23 + (-81*s12^3 - 216*s12^2*s13 -
                    711*s12*s13^2 - 162*s13^3)*s23^2 + (-162*s12^2 -
                    342*s12*s13 - 252*s13^2)*s23^3 + (-72*s12 - 72*s13)*
                   s23^4) + p1q^3*((-9*s12^4 + 9*s12^3*s13 + 18*s12^2*s13^2)*
                   s23 + (63*s12^3 + 54*s12^2*s13 - 36*s12*s13^2)*s23^2 +
                  (171*s12^2 + 81*s12*s13 + 18*s13^2)*s23^3 +
                  (63*s12 - 18*s13)*s23^4 - 36*s23^5) + p1q^2*p2q*
                 (36*s12^4*s13 + 36*s12^3*s13^2 + (-90*s12^4 - 72*s12^3*s13 -
                    126*s12^2*s13^2 - 108*s12*s13^3)*s23 + (-216*s12^3 -
                    360*s12^2*s13 - 432*s12*s13^2 - 108*s13^3)*s23^2 +
                  (-36*s12^2 - 54*s12*s13 - 36*s13^2)*s23^3 +
                  (126*s12 + 108*s13)*s23^4 + 36*s23^5)) +
              p3q^2*(p2q^4*(-108*s12^3*s13^2 + 108*s12^2*s13^3 + 180*s12*
                   s13^4 - 36*s13^5 + (9*s12^3*s13 - 135*s12^2*s13^2 +
                    270*s12*s13^3 + 54*s13^4)*s23 + (9*s12^2*s13 + 126*s13^3)*
                   s23^2 + 36*s13^2*s23^3) + p1q*p2q^3*(36*s12^4*s13 -
                  216*s12^3*s13^2 - 108*s12^2*s13^3 + 144*s12*s13^4 +
                  (-9*s12^3*s13 - 675*s12^2*s13^2 - 9*s12*s13^3 + 225*s13^4)*
                   s23 + (-9*s12^3 - 198*s12^2*s13 - 711*s12*s13^2 +
                    36*s13^3)*s23^2 + (-9*s12^2 - 216*s12*s13 - 261*s13^2)*
                   s23^3 - 72*s13*s23^4) + p1q^4*((9*s12^4 + 18*s12^3*s13 +
                    9*s12^2*s13^2)*s23 + (36*s12^3 - 36*s12*s13^2)*s23^2 +
                  (18*s12^2 - 27*s12*s13 + 18*s13^2)*s23^3 +
                  (-72*s12 - 45*s13)*s23^4 - 63*s23^5) + p1q^3*p2q*
                 ((-36*s12^4 - 135*s12^3*s13 - 207*s12^2*s13^2 - 108*s12*
                     s13^3)*s23 + (45*s12^3 - 108*s12^2*s13 - 306*s12*s13^2 -
                    108*s13^3)*s23^2 + (297*s12^2 + 351*s12*s13 + 117*s13^2)*
                   s23^3 + (207*s12 + 216*s13)*s23^4 - 9*s23^5) +
                p1q^2*p2q^2*(36*s12^4*s13 - 36*s12^3*s13^2 - 72*s12^2*s13^3 +
                  (-45*s12^4 - 63*s12^3*s13 - 387*s12^2*s13^2 - 171*s12*
                     s13^3 + 90*s13^4)*s23 + (-162*s12^3 - 387*s12^2*s13 -
                    828*s12*s13^2 - 261*s13^3)*s23^2 + (-81*s12^2 -
                    72*s12*s13 - 243*s13^2)*s23^3 + (72*s12 + 144*s13)*
                   s23^4 + 36*s23^5)))*Log(s13/(s12 + s13 + s23)))/
            (-4*p1q*p2q^5*s13^4*s23^2 + p1q*p3q^5*(4*s12^3*s13*s23^2 + 4*
                s12^2*s13*s23^3) + p1q^2*p2q^4*((4*s12*s13^3 - 4*s13^4)*
                s23^2 + 12*s13^3*s23^3) + p1q^3*p2q^3*(4*s12*s13^3*s23^2 +
               (-8*s12*s13^2 + 12*s13^3)*s23^3 - 12*s13^2*s23^4) +
             p1q^5*p2q*(4*s12*s13*s23^4 + 4*s13*s23^5) + p1q^4*p2q^2*
              (-8*s12*s13^2*s23^3 + (4*s12*s13 - 12*s13^2)*s23^4 + 4*s13*
                s23^5) + p3q^4*(p1q*p2q*((8*s12^3*s13 - 12*s12^2*s13^2)*
                  s23^2 + (8*s12^2*s13 - 8*s12*s13^2)*s23^3) + p1q^2*
                (8*s12^3*s13*s23^2 - 8*s12*s13*s23^4)) +
             p3q^3*(p1q*p2q^2*((4*s12^3*s13 - 24*s12^2*s13^2 + 12*s12*s13^3)*
                  s23^2 + (4*s12^2*s13 - 16*s12*s13^2 + 4*s13^3)*s23^3) +
               p1q^2*p2q*((12*s12^3*s13 - 20*s12^2*s13^2)*s23^2 +
                 (-4*s12^2*s13 - 16*s12*s13^2)*s23^3 + (-16*s12*s13 -
                   8*s13^2)*s23^4) + p1q^3*(4*s12^3*s13*s23^2 - 12*s12^2*s13*
                  s23^3 - 12*s12*s13*s23^4 + 4*s13*s23^5)) +
             p3q^2*(p1q*p2q^3*((-12*s12^2*s13^2 + 24*s12*s13^3 - 4*s13^4)*
                  s23^2 + (-8*s12*s13^2 + 8*s13^3)*s23^3) + p1q^2*p2q^2*
                ((4*s12^3*s13 - 28*s12^2*s13^2 + 16*s12*s13^3)*s23^2 +
                 (-4*s12^2*s13 - 24*s12*s13^2 + 16*s13^3)*s23^3 +
                 (-8*s12*s13 - 16*s13^2)*s23^4) + p1q^4*(-8*s12^2*s13*s23^3 +
                 8*s13*s23^5) + p1q^3*p2q*((4*s12^3*s13 - 8*s12^2*s13^2)*
                  s23^2 + (-20*s12^2*s13 - 16*s12*s13^2)*s23^3 +
                 (-16*s12*s13 - 20*s13^2)*s23^4 + 8*s13*s23^5)) +
             p3q*(p1q*p2q^4*((12*s12*s13^3 - 8*s13^4)*s23^2 + 4*s13^3*
                  s23^3) + p1q^2*p2q^3*((-8*s12^2*s13^2 + 20*s12*s13^3 -
                   4*s13^4)*s23^2 + (-8*s12*s13^2 + 28*s13^3)*s23^3 -
                 8*s13^2*s23^4) + p1q^5*(4*s12*s13*s23^4 + 4*s13*s23^5) +
               p1q^3*p2q^2*((-8*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
                 (-8*s12^2*s13 - 24*s12*s13^2 + 12*s13^3)*s23^3 +
                 (-4*s12*s13 - 32*s13^2)*s23^4 + 4*s13*s23^5) + p1q^4*p2q*
                ((-8*s12^2*s13 - 8*s12*s13^2)*s23^3 + (4*s12*s13 - 12*s13^2)*
                  s23^4 + 12*s13*s23^5))) +
           ((p3q^6*((9*s12^4 - 9*s12^2*s13^2)*s23 + (9*s12^3 - 9*s12^2*s13)*
                 s23^2) + p2q^6*(36*s12^2*s13^3 - 36*s13^5 +
                (9*s12^2*s13^2 + 36*s12*s13^3 - 45*s13^4)*s23 +
                (9*s12*s13^2 - 9*s13^3)*s23^2) + p1q*p2q^5*(-45*s12^3*s13^2 -
                9*s12^2*s13^3 + 45*s12*s13^4 + 9*s13^5 + (-135*s12^2*s13^2 +
                  36*s12*s13^3 + 99*s13^4)*s23 + (-18*s12^2*s13 -
                  90*s12*s13^2 + 108*s13^3)*s23^2 + (-18*s12*s13 + 18*s13^2)*
                 s23^3) + p1q^4*p2q^2*((18*s12^3*s13 + 180*s12^2*s13^2 +
                  126*s12*s13^3 - 36*s13^4)*s23 + (-18*s12^3 - 90*s12^2*s13 +
                  198*s12*s13^2 + 90*s13^3)*s23^2 + (-45*s12^2 - 180*s12*
                   s13 + 63*s13^2)*s23^3 + (-27*s12 - 63*s13)*s23^4) +
              p1q^6*((18*s12^2 - 18*s13^2)*s23^3 + (18*s12 - 18*s13)*s23^4) +
              p1q^2*p2q^4*(36*s12^4*s13 + 18*s12^3*s13^2 - 126*s12^2*s13^3 -
                90*s12*s13^4 + 18*s13^5 + (108*s12^3*s13 - 81*s12^2*s13^2 -
                  324*s12*s13^3 - 63*s13^4)*s23 + (144*s12^2*s13 -
                  135*s12*s13^2 - 153*s13^3)*s23^2 + (9*s12^2 + 72*s12*s13 -
                  81*s13^2)*s23^3 + (9*s12 - 9*s13)*s23^4) +
              p1q^5*p2q*((-9*s12^3 - 117*s12^2*s13 - 63*s12*s13^2 + 45*s13^3)*
                 s23^2 + (-9*s12^2 - 162*s12*s13 - 9*s13^2)*s23^3 -
                54*s13*s23^4) + p1q^3*p2q^3*(-9*s12^3*s13^2 - 81*s12^2*
                 s13^3 - 63*s12*s13^4 + 9*s13^5 + (36*s12^3*s13 + 225*s12^2*
                   s13^2 + 36*s12*s13^3 - 81*s13^4)*s23 + (-27*s12^3 +
                  135*s12^2*s13 + 459*s12*s13^2 + 45*s13^3)*s23^2 +
                (-45*s12^2 + 126*s12*s13 + 153*s13^2)*s23^3 +
                (-18*s12 + 18*s13)*s23^4) + p3q^5*(p2q*(-36*s12^5 +
                  36*s12^3*s13^2 + (-36*s12^4 + 18*s12^3*s13 + 18*s12*s13^3)*
                   s23 + (-18*s12^2*s13 + 18*s12*s13^2)*s23^2) +
                p1q*(-9*s12^5 + 63*s12^4*s13 + 81*s12^3*s13^2 + 9*s12^2*
                   s13^3 + (9*s12^4 + 72*s12^3*s13 - 9*s12^2*s13^2)*s23 +
                  (-18*s12^2*s13 + 18*s12*s13^2)*s23^2 + (-18*s12^2 +
                    18*s12*s13)*s23^3)) + p3q^3*(p2q^3*(-36*s12^5 +
                  216*s12^4*s13 - 72*s12^3*s13^2 - 216*s12^2*s13^3 +
                  108*s12*s13^4 + (-36*s12^4 + 288*s12^3*s13 - 324*s12^2*
                     s13^2 + 72*s12*s13^3)*s23 + (36*s12^2*s13 - 36*s12*
                     s13^2)*s23^2) + p1q*p2q^2*(-63*s12^5 + 135*s12^4*s13 -
                  180*s12^3*s13^2 - 288*s12^2*s13^3 + 99*s12*s13^4 +
                  9*s13^5 + (-9*s12^4 + 126*s12^3*s13 - 522*s12^2*s13^2 +
                    90*s12*s13^3 + 27*s13^4)*s23 + (90*s12^3 - 126*s12^2*
                     s13 - 54*s12*s13^2 + 18*s13^3)*s23^2 + (36*s12^2 -
                    36*s12*s13)*s23^3) + p1q^2*p2q*(-36*s12^5 + 36*s12^4*
                   s13 - 180*s12^3*s13^2 - 252*s12^2*s13^3 + (-90*s12^4 -
                    522*s12^3*s13 - 918*s12^2*s13^2 - 90*s12*s13^3 +
                    36*s13^4)*s23 + (-126*s12^3 - 648*s12^2*s13 - 90*s12*
                     s13^2 + 108*s13^3)*s23^2 + (-72*s12^2 - 36*s12*s13 +
                    72*s13^2)*s23^3) + p1q^3*(-9*s12^5 + 63*s12^4*s13 +
                  81*s12^3*s13^2 + 9*s12^2*s13^3 + (63*s12^4 - 162*s12^3*
                     s13 - 315*s12^2*s13^2 - 18*s12*s13^3)*s23 +
                  (9*s12^3 - 279*s12^2*s13 + 63*s12*s13^2 - 9*s13^3)*s23^2 +
                  (-45*s12^2 + 90*s12*s13 - 27*s13^2)*s23^3 +
                  (18*s12 - 18*s13)*s23^4)) + p3q^4*(p2q^2*(-72*s12^5 +
                  108*s12^4*s13 + 72*s12^3*s13^2 - 108*s12^2*s13^3 +
                  (-90*s12^4 + 180*s12^3*s13 - 81*s12^2*s13^2 - 9*s13^4)*
                   s23 + (-18*s12^3 + 18*s12^2*s13 + 9*s12*s13^2 - 9*s13^3)*
                   s23^2) + p1q*p2q*(-27*s12^5 + 171*s12^4*s13 + 45*s12^3*
                   s13^2 - 171*s12^2*s13^3 - 18*s12*s13^4 + (27*s12^4 +
                    126*s12^3*s13 - 279*s12^2*s13^2 - 18*s12*s13^3)*s23 +
                  (54*s12^3 - 144*s12^2*s13 + 18*s13^3)*s23^2 +
                  (-18*s12*s13 + 18*s13^2)*s23^3) + p1q^2*(-18*s12^5 +
                  126*s12^4*s13 + 162*s12^3*s13^2 + 18*s12^2*s13^3 +
                  (27*s12^4 + 36*s12^3*s13 - 135*s12^2*s13^2)*s23 +
                  (9*s12^3 - 153*s12^2*s13 + 36*s12*s13^2)*s23^2 +
                  (-27*s12^2 + 36*s12*s13 - 9*s13^2)*s23^3 + (9*s12 - 9*s13)*
                   s23^4)) + p3q*(p2q^5*(-108*s12^3*s13^2 + 72*s12^2*s13^3 +
                  108*s12*s13^4 - 72*s13^5 + (-18*s12^3*s13 - 108*s12^2*
                     s13^2 + 198*s12*s13^3 - 72*s13^4)*s23 + (-18*s12^2*s13 +
                    18*s12*s13^2)*s23^2) + p1q*p2q^4*(90*s12^4*s13 -
                  45*s12^3*s13^2 - 9*s12^2*s13^3 + 117*s12*s13^4 - 9*s13^5 +
                  (162*s12^3*s13 - 261*s12^2*s13^2 + 126*s12*s13^3 +
                    189*s13^4)*s23 + (-18*s12^3 + 72*s12^2*s13 - 180*s12*
                     s13^2 + 198*s13^3)*s23^2 + (-18*s12^2 + 18*s12*s13)*
                   s23^3) + p1q^2*p2q^3*(-36*s12^5 + 36*s12^4*s13 +
                  252*s12^3*s13^2 + 180*s12^2*s13^3 + (-72*s12^4 + 126*s12^3*
                     s13 + 54*s12^2*s13^2 - 234*s12*s13^3 - 18*s13^4)*s23 +
                  (-72*s12^3 + 234*s12^2*s13 - 144*s12*s13^2 - 126*s13^3)*
                   s23^2 + (-36*s12^2 + 180*s12*s13 - 108*s13^2)*s23^3) +
                p1q^3*p2q^2*(18*s12^4*s13 + 153*s12^3*s13^2 + 189*s12^2*
                   s13^3 + 63*s12*s13^4 + 9*s13^5 + (36*s12^4 + 180*s12^3*
                     s13 + 171*s12^2*s13^2 - 72*s12*s13^3 - 27*s13^4)*s23 +
                  (81*s12^3 + 369*s12^2*s13 + 171*s12*s13^2 + 27*s13^3)*
                   s23^2 + (27*s12^2 + 162*s12*s13 + 45*s13^2)*s23^3 +
                  (-18*s12 - 18*s13)*s23^4) + p1q^5*((-45*s12^3 + 63*s12^2*
                     s13 + 117*s12*s13^2 + 9*s13^3)*s23^2 + (-9*s12^2 +
                    126*s12*s13 - 9*s13^2)*s23^3 + (36*s12 - 18*s13)*s23^4) +
                p1q^4*p2q*((18*s12^4 + 144*s12^3*s13 - 144*s12*s13^3 -
                    18*s13^4)*s23 + (18*s12^3 + 252*s12^2*s13 + 54*s12*
                     s13^2 + 36*s13^3)*s23^2 + (90*s12*s13 + 18*s13^2)*
                   s23^3 - 36*s13*s23^4)) + p3q^2*(p2q^4*(108*s12^4*s13 -
                  216*s12^3*s13^2 - 72*s12^2*s13^3 + 216*s12*s13^4 -
                  36*s13^5 + (9*s12^4 + 108*s12^3*s13 - 351*s12^2*s13^2 +
                    252*s12*s13^3 - 18*s13^4)*s23 + (9*s12^3 - 9*s12^2*s13 -
                    18*s12*s13^2 + 18*s13^3)*s23^2) + p1q*p2q^3*(-45*s12^5 +
                  117*s12^4*s13 - 144*s12^3*s13^2 - 108*s12^2*s13^3 +
                  189*s12*s13^4 - 9*s13^5 + (-27*s12^4 + 234*s12^3*s13 -
                    378*s12^2*s13^2 + 198*s12*s13^3 + 117*s13^4)*s23 +
                  (18*s12^3 + 90*s12^2*s13 - 126*s12*s13^2 + 90*s13^3)*
                   s23^2 + (36*s12*s13 - 36*s13^2)*s23^3) + p1q^3*p2q*
                 (-9*s12^5 - 63*s12^4*s13 - 189*s12^3*s13^2 - 153*s12^2*
                   s13^3 - 18*s12*s13^4 + (27*s12^4 - 270*s12^3*s13 -
                    693*s12^2*s13^2 - 306*s12*s13^3 + 18*s13^4)*s23 +
                  (117*s12^3 + 27*s12^2*s13 - 81*s12*s13^2 + 45*s13^3)*
                   s23^2 + (135*s12^2 + 234*s12*s13 + 9*s13^2)*s23^3 +
                  (54*s12 - 18*s13)*s23^4) + p1q^4*((36*s12^4 - 126*s12^3*
                     s13 - 180*s12^2*s13^2 - 18*s12*s13^3)*s23 +
                  (-54*s12^3 - 72*s12^2*s13 + 162*s12*s13^2)*s23^2 +
                  (-63*s12^2 + 198*s12*s13 - 9*s13^2)*s23^3 +
                  (27*s12 - 9*s13)*s23^4) + p1q^2*p2q^2*(-54*s12^5 -
                  90*s12^4*s13 - 108*s12^3*s13^2 + 36*s12^2*s13^3 +
                  90*s12*s13^4 - 18*s13^5 + (-117*s12^4 - 396*s12^3*s13 -
                    648*s12^2*s13^2 - 144*s12*s13^3 + 9*s13^4)*s23 +
                  (-99*s12^3 - 297*s12^2*s13 - 243*s12*s13^2 + 27*s13^3)*
                   s23^2 + (-54*s12^2 + 36*s12*s13 + 18*s13^2)*s23^3 +
                  (-18*s12 + 18*s13)*s23^4)))*Log(s23/(s12 + s13 + s23)))/
            (p1q*p3q^5*(4*s12^4*s13 + 4*s12^3*s13^2)*s23 +
             p1q*p2q^5*(4*s12^2*s13^3 + 4*s12*s13^4)*s23 - 4*p1q^5*p2q*s12*
              s13*s23^4 + p1q^2*p2q^4*((4*s12^2*s13^3 + 4*s12*s13^4)*s23 +
               (-8*s12^2*s13^2 - 12*s12*s13^3)*s23^2) + p1q^3*p2q^3*
              ((-8*s12^2*s13^2 - 12*s12*s13^3)*s23^2 + (4*s12^2*s13 +
                 12*s12*s13^2)*s23^3) + p1q^4*p2q^2*((4*s12^2*s13 +
                 12*s12*s13^2)*s23^3 - 4*s12*s13*s23^4) +
             p3q^4*(p1q*p2q*(12*s12^4*s13 + 4*s12^3*s13^2 - 8*s12^2*s13^3)*
                s23 + p1q^2*((4*s12^4*s13 + 4*s12^3*s13^2)*s23 +
                 (-12*s12^3*s13 - 8*s12^2*s13^2)*s23^2)) +
             p3q^3*(p1q*p2q^2*(12*s12^4*s13 - 12*s12^3*s13^2 - 20*s12^2*
                  s13^3 + 4*s12*s13^4)*s23 + p1q^2*p2q*((8*s12^4*s13 -
                   8*s12^2*s13^3)*s23 + (-32*s12^3*s13 - 24*s12^2*s13^2 -
                   8*s12*s13^3)*s23^2) + p1q^3*((-12*s12^3*s13 - 8*s12^2*
                    s13^2)*s23^2 + (12*s12^2*s13 + 4*s12*s13^2)*s23^3)) +
             p3q*(p1q*p2q^4*(-8*s12^3*s13^2 + 4*s12^2*s13^3 + 12*s12*s13^4)*
                s23 - 4*p1q^5*s12*s13*s23^4 + p1q^2*p2q^3*
                ((-8*s12^3*s13^2 + 8*s12*s13^4)*s23 + (-8*s12^3*s13 -
                   24*s12^2*s13^2 - 32*s12*s13^3)*s23^2) + p1q^3*p2q^2*
                ((-8*s12^3*s13 - 16*s12^2*s13^2 - 20*s12*s13^3)*s23^2 +
                 (20*s12^2*s13 + 28*s12*s13^2)*s23^3) + p1q^4*p2q*
                ((16*s12^2*s13 + 16*s12*s13^2)*s23^3 - 8*s12*s13*s23^4)) +
             p3q^2*(p1q*p2q^3*(4*s12^4*s13 - 20*s12^3*s13^2 - 12*s12^2*
                  s13^3 + 12*s12*s13^4)*s23 + p1q^2*p2q^2*
                ((4*s12^4*s13 - 12*s12^3*s13^2 - 12*s12^2*s13^3 +
                   4*s12*s13^4)*s23 + (-28*s12^3*s13 - 32*s12^2*s13^2 -
                   28*s12*s13^3)*s23^2) + p1q^3*p2q*((-20*s12^3*s13 -
                   16*s12^2*s13^2 - 8*s12*s13^3)*s23^2 + (28*s12^2*s13 +
                   20*s12*s13^2)*s23^3) + p1q^4*((12*s12^2*s13 + 4*s12*s13^2)*
                  s23^3 - 4*s12*s13*s23^4)))) +
         nl*((p3q^2*(-108*s12^4*s13 - 216*s12^3*s13^2 - 108*s12^2*s13^3 +
               (-270*s12^3*s13 - 216*s12^2*s13^2 + 54*s12*s13^3)*s23 +
               (-162*s12^2*s13 + 54*s12*s13^2)*s23^2) +
             p2q^2*(720*s12^4*s13 + 2268*s12^3*s13^2 + 2376*s12^2*s13^3 + 828*
                s12*s13^4 + (1026*s12^3*s13 + 2736*s12^2*s13^2 +
                 2070*s12*s13^3 + 360*s13^4)*s23 + (306*s12^2*s13 +
                 882*s12*s13^2 + 360*s13^3)*s23^2) + p1q*p2q*
              (-108*s12^3*s13^2 - 216*s12^2*s13^3 - 108*s12*s13^4 +
               (-36*s12^4 - 144*s12^3*s13 - 756*s12^2*s13^2 - 792*s12*s13^3 -
                 144*s13^4)*s23 + (-2*s12^3 - 87*s12^2*s13 - 708*s12*s13^2 -
                 191*s13^3)*s23^2 + (34*s12^2 - 40*s12*s13 - 74*s13^2)*
                s23^3) + p3q*(p2q*(612*s12^4*s13 + 2052*s12^3*s13^2 +
                 2268*s12^2*s13^3 + 828*s12*s13^4 + (180*s12^4 + 1116*s12^3*
                    s13 + 2520*s12^2*s13^2 + 1764*s12*s13^3 + 180*s13^4)*
                  s23 + (180*s12^3 + 324*s12^2*s13 + 756*s12*s13^2 +
                   180*s13^3)*s23^2) + p1q*(108*s12^4*s13 + 216*s12^3*s13^2 +
                 108*s12^2*s13^3 + (-216*s12^4 - 288*s12^3*s13 - 324*s12^2*
                    s13^2 - 216*s12*s13^3 + 36*s13^4)*s23 + (-182*s12^3 -
                   159*s12^2*s13 - 420*s12*s13^2 - 11*s13^3)*s23^2 +
                 (34*s12^2 - 40*s12*s13 - 74*s13^2)*s23^3)))/
            (p1q*p2q*(54*s12^3*s13 + 108*s12^2*s13^2 + 54*s12*s13^3)*s23^2 +
             p1q*p3q*(54*s12^3*s13 + 108*s12^2*s13^2 + 54*s12*s13^3)*s23^2) +
           ((p2q^2*(-72*s12^2*s13 - 72*s12*s13^2 + (-108*s12*s13 - 36*s13^2)*
                 s23 - 36*s13*s23^2) + p1q*p2q*((9*s12^2 + 18*s12*s13 +
                  9*s13^2)*s23 + (11*s12 + 11*s13)*s23^2 + 2*s23^3) +
              p3q*(p2q*(-72*s12^2*s13 - 72*s12*s13^2 + (-18*s12^2 -
                    108*s12*s13 - 18*s13^2)*s23 + (-18*s12 - 18*s13)*s23^2) +
                p1q*((27*s12^2 + 18*s12*s13 - 9*s13^2)*s23 + (29*s12 - 7*s13)*
                   s23^2 + 2*s23^3)))*Log(-s12 - s13 - s23))/
            (9*p1q*p2q*s12*s13*s23^2 + 9*p1q*p3q*s12*s13*s23^2) +
           ((p1q^2*((s12^5 + 3*s12^4*s13 + 2*s12^3*s13^2 - 2*s12^2*s13^3 -
                  3*s12*s13^4 - s13^5)*s23 + (s12^4 + 2*s12^3*s13 -
                  2*s12*s13^3 - s13^4)*s23^2) + p3q^2*((s12^5 - 3*s12^4*s13 -
                  8*s12^3*s13^2 - 4*s12^2*s13^3 - s12*s13^4 - s13^5)*s23 +
                (s12^4 - 10*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3 - s13^4)*
                 s23^2 + (-6*s12^2*s13 + 2*s12*s13^2)*s23^3) +
              p2q^2*(-16*s12^5*s13 - 64*s12^4*s13^2 - 96*s12^3*s13^3 -
                64*s12^2*s13^4 - 16*s12*s13^5 + (s12^5 - 27*s12^4*s13 -
                  84*s12^3*s13^2 - 88*s12^2*s13^3 - 37*s12*s13^4 - 5*s13^5)*
                 s23 + (s12^4 - 14*s12^3*s13 - 20*s12^2*s13^2 - 10*s12*
                   s13^3 - 5*s13^4)*s23^2 + (-2*s12^2*s13 + 6*s12*s13^2)*
                 s23^3) + p1q*p2q*((10*s12^4*s13 + 22*s12^3*s13^2 +
                  14*s12^2*s13^3 + 2*s12*s13^4)*s23 + (s12^4 + 21*s12^3*s13 +
                  19*s12^2*s13^2 + 3*s12*s13^3 + 4*s13^4)*s23^2 +
                (3*s12^3 + 12*s12^2*s13 - 5*s12*s13^2 + 2*s13^3)*s23^3 +
                (2*s12^2 - 2*s13^2)*s23^4) + p3q*(p2q*(-16*s12^5*s13 -
                  64*s12^4*s13^2 - 96*s12^3*s13^3 - 64*s12^2*s13^4 -
                  16*s12*s13^5 + (-2*s12^5 - 42*s12^4*s13 - 100*s12^3*s13^2 -
                    84*s12^2*s13^3 - 26*s12*s13^4 - 2*s13^5)*s23 +
                  (-2*s12^4 - 32*s12^3*s13 - 28*s12^2*s13^2 - 2*s13^4)*
                   s23^2 + (-8*s12^2*s13 + 8*s12*s13^2)*s23^3) +
                p1q*((4*s12^5 + 22*s12^4*s13 + 34*s12^3*s13^2 + 18*s12^2*
                     s13^3 + 2*s12*s13^4)*s23 + (5*s12^4 + 33*s12^3*s13 +
                    31*s12^2*s13^2 + 7*s12*s13^3 + 4*s13^4)*s23^2 +
                  (3*s12^3 + 16*s12^2*s13 - s12*s13^2 + 2*s13^3)*s23^3 +
                  (2*s12^2 - 2*s13^2)*s23^4)))*Log(s23/(s12 + s13 + s23)))/
            (p1q*p2q*(2*s12^4*s13 + 6*s12^3*s13^2 + 6*s12^2*s13^3 + 2*s12*
                s13^4)*s23^2 + p1q*p3q*(2*s12^4*s13 + 6*s12^3*s13^2 + 6*s12^2*
                s13^3 + 2*s12*s13^4)*s23^2)) + Log(p3q/(p1q + p2q + p3q))*
          ((9*s12 + 9*s13 + 9*s23)/(2*s12*s23) +
           ((p2q^6*(-36*s12^2*s13^4 - 36*s12*s13^5 - 36*s12*s13^4*s23 +
                (-(s12*s13^3) - s13^4)*s23^2 - s13^3*s23^3) +
              p3q^6*((s12^4 + s12^3*s13)*s23^2 + (2*s12^3 + s12^2*s13)*
                 s23^3 + s12^2*s23^4) + p1q*p2q^5*(36*s12^3*s13^3 -
                36*s12*s13^5 + (144*s12^2*s13^3 + 72*s12*s13^4)*s23 +
                (103*s12*s13^3 - 5*s13^4)*s23^2 + (3*s12*s13^2 - 2*s13^3)*
                 s23^3 + 3*s13^2*s23^4) + p1q^2*p2q^4*(36*s12^3*s13^3 +
                36*s12^2*s13^4 + (-54*s12^3*s13^2 + 108*s12^2*s13^3 +
                  126*s12*s13^4)*s23 + (-160*s12^2*s13^2 + 15*s12*s13^3 -
                  5*s13^4)*s23^2 + (-94*s12*s13^2 + 7*s13^3)*s23^3 +
                (-3*s12*s13 + 9*s13^2)*s23^4 - 3*s13*s23^5) +
              p1q^3*p2q^3*((-18*s12^4*s13 - 108*s12^3*s13^2 - 90*s12^2*s13^3)*
                 s23 + (-16*s12^3*s13 - 244*s12^2*s13^2 - 155*s12*s13^3 +
                  s13^4)*s23^2 + (38*s12^2*s13 - 105*s12*s13^2 + 16*s13^3)*
                 s23^3 + (27*s12*s13 + 6*s13^2)*s23^4 + (s12 - 8*s13)*s23^5 +
                s23^6) + p1q^4*p2q^2*((18*s12^4 + 90*s12^3*s13 + 72*s12^2*
                   s13^2)*s23^2 + (34*s12^3 + 168*s12^2*s13 + 78*s12*s13^2 -
                  2*s13^3)*s23^3 + (14*s12^2 + 63*s12*s13 - 17*s13^2)*s23^4 -
                13*s13*s23^5 + 2*s23^6) + p1q^5*p2q*((-18*s12^3 -
                  18*s12^2*s13)*s23^3 + (-32*s12^2 - 13*s12*s13 + s13^2)*
                 s23^4 + (-9*s12 + 6*s13)*s23^5 + 5*s23^6) +
              p3q^5*(p2q*(36*s12^5*s13 + 36*s12^4*s13^2 + (72*s12^4*s13 +
                    36*s12^3*s13^2)*s23 + (-s12^4 + 32*s12^3*s13 - 3*s12^2*
                     s13^2)*s23^2 + (-2*s12^3 - 6*s12^2*s13 - 2*s12*s13^2)*
                   s23^3 + (-s12^2 - 2*s12*s13)*s23^4) +
                p1q*((-36*s12^5 - 72*s12^4*s13 - 36*s12^3*s13^2)*s23 +
                  (-102*s12^4 - 137*s12^3*s13 - 35*s12^2*s13^2)*s23^2 +
                  (-97*s12^3 - 66*s12^2*s13)*s23^3 + (-33*s12^2 - 2*s12*s13)*
                   s23^4 - 2*s12*s23^5)) + p3q^4*(p2q^2*(72*s12^5*s13 -
                  36*s12^4*s13^2 - 108*s12^3*s13^3 + (144*s12^4*s13 -
                    108*s12^3*s13^2 - 72*s12^2*s13^3)*s23 +
                  (-s12^4 + 74*s12^3*s13 - 66*s12^2*s13^2 + 3*s12*s13^3)*
                   s23^2 + (-2*s12^3 + 4*s12^2*s13 + 6*s12*s13^2 + s13^3)*
                   s23^3 + (-s12^2 + 2*s12*s13 + s13^2)*s23^4) +
                p1q*p2q*(72*s12^5*s13 + 72*s12^4*s13^2 + (-72*s12^5 +
                    72*s12^4*s13 + 144*s12^3*s13^2 + 72*s12^2*s13^3)*s23 +
                  (-208*s12^4 - 39*s12^3*s13 + 131*s12^2*s13^2 + 34*s12*
                     s13^3)*s23^2 + (-195*s12^3 - 8*s12^2*s13 + 60*s12*s13^2)*
                   s23^3 + (-57*s12^2 + 26*s12*s13 - 2*s13^2)*s23^4 +
                  (2*s12 - 2*s13)*s23^5) + p1q^2*((-72*s12^5 - 144*s12^4*
                     s13 - 72*s12^3*s13^2)*s23 + (-153*s12^4 - 187*s12^3*
                     s13 - 34*s12^2*s13^2)*s23^2 + (-64*s12^3 + 17*s12^2*
                     s13 + 34*s12*s13^2)*s23^3 + (40*s12^2 + 57*s12*s13)*
                   s23^4 + (24*s12 + s13)*s23^5 + s23^6)) +
              p3q^3*(p2q^3*(36*s12^5*s13 - 180*s12^4*s13^2 - 108*s12^3*
                   s13^3 + 108*s12^2*s13^4 + (72*s12^4*s13 - 324*s12^3*
                     s13^2 + 36*s12*s13^4)*s23 + (s12^4 + 40*s12^3*s13 -
                    144*s12^2*s13^2 + 32*s12*s13^3 - s13^4)*s23^2 +
                  (2*s12^3 + 6*s12^2*s13 - 2*s12*s13^2 - 2*s13^3)*s23^3 +
                  (s12^2 + 2*s12*s13 - s13^2)*s23^4) + p1q*p2q^2*
                 (108*s12^5*s13 - 72*s12^4*s13^2 - 180*s12^3*s13^3 +
                  (-72*s12^5 + 144*s12^4*s13 - 252*s12^3*s13^2 - 216*s12^2*
                     s13^3 - 36*s12*s13^4)*s23 + (-214*s12^4 - 47*s12^3*s13 -
                    289*s12^2*s13^2 - 131*s12*s13^3 + s13^4)*s23^2 +
                  (-207*s12^3 - 88*s12^2*s13 - 93*s12*s13^2 + 14*s13^3)*
                   s23^3 + (-63*s12^2 - 6*s12*s13 + 15*s13^2)*s23^4 +
                  (2*s12 + 2*s13)*s23^5) + p1q^2*p2q*(36*s12^5*s13 +
                  36*s12^4*s13^2 + (-126*s12^5 - 144*s12^4*s13 - 18*s12^3*
                     s13^2 + 36*s12^2*s13^3)*s23 + (-327*s12^4 - 354*s12^3*
                     s13 - 99*s12^2*s13^2 - 36*s12*s13^3)*s23^2 +
                  (-284*s12^3 - 178*s12^2*s13 - 30*s12*s13^2 + 2*s13^3)*
                   s23^3 + (-102*s12^2 - 26*s12*s13 - 9*s13^2)*s23^4 +
                  (-20*s12 - 12*s13)*s23^5 - s23^6) + p1q^3*
                 ((-36*s12^5 - 72*s12^4*s13 - 36*s12^3*s13^2)*s23 +
                  (4*s12^4 + 41*s12^3*s13 + 37*s12^2*s13^2)*s23^2 +
                  (153*s12^3 + 218*s12^2*s13 + 68*s12*s13^2)*s23^3 +
                  (151*s12^2 + 107*s12*s13 + s13^2)*s23^4 + (45*s12 + 8*s13)*
                   s23^5 + 7*s23^6)) + p3q^2*(p2q^4*(-108*s12^4*s13^2 +
                  108*s12^3*s13^3 + 180*s12^2*s13^4 - 36*s12*s13^5 +
                  (-180*s12^3*s13^2 + 216*s12^2*s13^3 + 36*s12*s13^4)*s23 +
                  (-3*s12^3*s13 - 78*s12^2*s13^2 + 70*s12*s13^3 + s13^4)*
                   s23^2 + (-5*s12^2*s13 - 6*s12*s13^2)*s23^3 +
                  (-2*s12*s13 - s13^2)*s23^4) + p1q*p2q^3*(36*s12^5*s13 -
                  216*s12^4*s13^2 - 108*s12^3*s13^3 + 144*s12^2*s13^4 +
                  (144*s12^4*s13 - 432*s12^3*s13^2 + 144*s12*s13^4)*s23 +
                  (179*s12^3*s13 - 343*s12^2*s13^2 + 11*s12*s13^3 - 7*s13^4)*
                   s23^2 + (-s12^3 + 68*s12^2*s13 - 115*s12*s13^2 + 6*s13^3)*
                   s23^3 + (-3*s12^2 - 2*s12*s13 + 15*s13^2)*s23^4 +
                  (-2*s12 + 2*s13)*s23^5) + p1q^2*p2q^2*(36*s12^5*s13 -
                  36*s12^4*s13^2 - 72*s12^3*s13^3 + (-126*s12^5 - 144*s12^4*
                     s13 - 270*s12^3*s13^2 - 108*s12^2*s13^3 + 36*s12*s13^4)*
                   s23 + (-354*s12^4 - 329*s12^3*s13 - 356*s12^2*s13^2 -
                    131*s12*s13^3 - 2*s13^4)*s23^2 + (-328*s12^3 - 65*s12^2*
                     s13 - 60*s12*s13^2 + 21*s13^3)*s23^3 + (-107*s12^2 +
                    62*s12*s13 + 10*s13^2)*s23^4 + (-8*s12 - 14*s13)*s23^5 -
                  s23^6) + p1q^3*p2q*((-54*s12^5 - 144*s12^4*s13 - 126*s12^3*
                     s13^2 - 36*s12^2*s13^3)*s23 + (-84*s12^4 - 175*s12^3*
                     s13 - 161*s12^2*s13^2 - 70*s12*s13^3)*s23^2 +
                  (-47*s12^3 - 18*s12^2*s13 - 16*s12*s13^2)*s23^3 +
                  (-63*s12^2 - 15*s12*s13 - 23*s13^2)*s23^4 +
                  (-39*s12 - 16*s13)*s23^5 + 7*s23^6) + p1q^4*
                 ((54*s12^4 + 90*s12^3*s13 + 36*s12^2*s13^2)*s23^2 +
                  (100*s12^3 + 116*s12^2*s13 + 34*s12*s13^2)*s23^3 +
                  (45*s12^2 + 35*s12*s13 + 2*s13^2)*s23^4 + (10*s12 + 13*s13)*
                   s23^5 + 11*s23^6)) + p3q*(p2q^5*(108*s12^3*s13^3 +
                  36*s12^2*s13^4 - 72*s12*s13^5 + (144*s12^2*s13^3 -
                    36*s12*s13^4)*s23 + (3*s12^2*s13^2 + 40*s12*s13^3 +
                    s13^4)*s23^2 + (4*s12*s13^2 + 2*s13^3)*s23^3 +
                  s13^2*s23^4) + p1q*p2q^4*(-72*s12^4*s13^2 + 108*s12^3*
                   s13^3 + 144*s12^2*s13^4 - 36*s12*s13^5 +
                  (-216*s12^3*s13^2 + 288*s12^2*s13^3 + 216*s12*s13^4)*s23 +
                  (-212*s12^2*s13^2 + 171*s12*s13^3 - 13*s13^4)*s23^2 +
                  (-2*s12^2*s13 - 67*s12*s13^2 - 10*s13^3)*s23^3 +
                  (-4*s12*s13 + s13^2)*s23^4 - 2*s13*s23^5) + p1q^3*p2q^2*
                 ((-54*s12^5 - 126*s12^4*s13 - 162*s12^3*s13^2 - 90*s12^2*
                     s13^3)*s23 + (-124*s12^4 - 88*s12^3*s13 - 190*s12^2*
                     s13^2 - 153*s12*s13^3 + s13^4)*s23^2 + (-92*s12^3 +
                    198*s12^2*s13 + 27*s12*s13^2 + 16*s13^3)*s23^3 +
                  (-34*s12^2 + 121*s12*s13 - 18*s13^2)*s23^4 +
                  (-11*s12 - 32*s13)*s23^5 + s23^6) + p1q^2*p2q^3*
                 (-72*s12^4*s13^2 - 36*s12^3*s13^3 + 36*s12^2*s13^4 +
                  (36*s12^4*s13 - 270*s12^3*s13^2 - 72*s12^2*s13^3 +
                    126*s12*s13^4)*s23 + (90*s12^3*s13 - 487*s12^2*s13^2 -
                    188*s12*s13^3 - 7*s13^4)*s23^2 + (94*s12^2*s13 -
                    234*s12*s13^2 + 26*s13^3)*s23^3 + (-s12^2 + 34*s12*s13 +
                    28*s13^2)*s23^4 - 4*s13*s23^5 + s23^6) +
                p1q^5*((-18*s12^3 - 18*s12^2*s13)*s23^3 + (-32*s12^2 -
                    13*s12*s13 + s13^2)*s23^4 + (-9*s12 + 6*s13)*s23^5 +
                  5*s23^6) + p1q^4*p2q*((36*s12^4 + 108*s12^3*s13 +
                    72*s12^2*s13^2)*s23^2 + (26*s12^3 + 140*s12^2*s13 +
                    76*s12*s13^2 - 2*s13^3)*s23^3 + (-49*s12^2 + 26*s12*s13 -
                    15*s13^2)*s23^4 - 26*s12*s23^5 + 13*s23^6)))*
             Log((p1q + p3q)/(p1q + p2q + p3q)))/(-4*p1q*p2q^5*s12*s13^4*
              s23^2 + p1q*p3q^5*(4*s12^4*s13*s23^2 + 4*s12^3*s13*s23^3) +
             p1q^2*p2q^4*((4*s12^2*s13^3 - 4*s12*s13^4)*s23^2 + 12*s12*s13^3*
                s23^3) + p1q^3*p2q^3*(4*s12^2*s13^3*s23^2 + (-8*s12^2*s13^2 +
                 12*s12*s13^3)*s23^3 - 12*s12*s13^2*s23^4) +
             p1q^5*p2q*(4*s12^2*s13*s23^4 + 4*s12*s13*s23^5) +
             p1q^4*p2q^2*(-8*s12^2*s13^2*s23^3 + (4*s12^2*s13 - 12*s12*s13^2)*
                s23^4 + 4*s12*s13*s23^5) + p3q^4*(p1q*p2q*
                ((8*s12^4*s13 - 12*s12^3*s13^2)*s23^2 + (8*s12^3*s13 -
                   8*s12^2*s13^2)*s23^3) + p1q^2*(8*s12^4*s13*s23^2 -
                 8*s12^2*s13*s23^4)) + p3q^3*(p1q*p2q^2*
                ((4*s12^4*s13 - 24*s12^3*s13^2 + 12*s12^2*s13^3)*s23^2 +
                 (4*s12^3*s13 - 16*s12^2*s13^2 + 4*s12*s13^3)*s23^3) + p1q^2*
                p2q*((12*s12^4*s13 - 20*s12^3*s13^2)*s23^2 +
                 (-4*s12^3*s13 - 16*s12^2*s13^2)*s23^3 + (-16*s12^2*s13 -
                   8*s12*s13^2)*s23^4) + p1q^3*(4*s12^4*s13*s23^2 -
                 12*s12^3*s13*s23^3 - 12*s12^2*s13*s23^4 + 4*s12*s13*
                  s23^5)) + p3q^2*(p1q*p2q^3*((-12*s12^3*s13^2 + 24*s12^2*
                    s13^3 - 4*s12*s13^4)*s23^2 + (-8*s12^2*s13^2 +
                   8*s12*s13^3)*s23^3) + p1q^2*p2q^2*((4*s12^4*s13 -
                   28*s12^3*s13^2 + 16*s12^2*s13^3)*s23^2 + (-4*s12^3*s13 -
                   24*s12^2*s13^2 + 16*s12*s13^3)*s23^3 + (-8*s12^2*s13 -
                   16*s12*s13^2)*s23^4) + p1q^4*(-8*s12^3*s13*s23^3 +
                 8*s12*s13*s23^5) + p1q^3*p2q*((4*s12^4*s13 - 8*s12^3*s13^2)*
                  s23^2 + (-20*s12^3*s13 - 16*s12^2*s13^2)*s23^3 +
                 (-16*s12^2*s13 - 20*s12*s13^2)*s23^4 + 8*s12*s13*s23^5)) +
             p3q*(p1q*p2q^4*((12*s12^2*s13^3 - 8*s12*s13^4)*s23^2 +
                 4*s12*s13^3*s23^3) + p1q^2*p2q^3*((-8*s12^3*s13^2 +
                   20*s12^2*s13^3 - 4*s12*s13^4)*s23^2 + (-8*s12^2*s13^2 +
                   28*s12*s13^3)*s23^3 - 8*s12*s13^2*s23^4) + p1q^5*
                (4*s12^2*s13*s23^4 + 4*s12*s13*s23^5) + p1q^3*p2q^2*
                ((-8*s12^3*s13^2 + 4*s12^2*s13^3)*s23^2 + (-8*s12^3*s13 -
                   24*s12^2*s13^2 + 12*s12*s13^3)*s23^3 + (-4*s12^2*s13 -
                   32*s12*s13^2)*s23^4 + 4*s12*s13*s23^5) + p1q^4*p2q*
                ((-8*s12^3*s13 - 8*s12^2*s13^2)*s23^3 + (4*s12^2*s13 -
                   12*s12*s13^2)*s23^4 + 12*s12*s13*s23^5))) +
           ((p3q^6*((9*s12^3*s13 + 9*s12^2*s13^2)*s23^2 + 9*s12^2*s13*
                 s23^3) + p2q^6*(-36*s12^3*s13^3 - 72*s12^2*s13^4 -
                36*s12*s13^5 + (-108*s12^2*s13^3 - 144*s12*s13^4 - 36*s13^5)*
                 s23 + (-63*s12*s13^3 - 27*s13^4)*s23^2 + 9*s13^3*s23^3) +
              p1q*p2q^5*(-36*s12^3*s13^3 - 72*s12^2*s13^4 - 36*s12*s13^5 +
                (72*s12^3*s13^2 + 45*s12^2*s13^3 - 90*s12*s13^4 - 63*s13^5)*
                 s23 + (216*s12^2*s13^2 + 279*s12*s13^3 + 63*s13^4)*s23^2 +
                (126*s12*s13^2 + 108*s13^3)*s23^3 - 18*s13^2*s23^4) +
              p1q^2*p2q^4*((-18*s12^4*s13 + 54*s12^3*s13^2 + 234*s12^2*
                   s13^3 + 162*s12*s13^4)*s23 + (-54*s12^3*s13 + 162*s12^2*
                   s13^2 + 531*s12*s13^3 + 243*s13^4)*s23^2 +
                (-108*s12^2*s13 - 90*s12*s13^2 + 99*s13^3)*s23^3 +
                (-63*s12*s13 - 135*s13^2)*s23^4 + 9*s13*s23^5) +
              p1q^6*((18*s12*s13 + 18*s13^2)*s23^4 + 18*s13*s23^5) +
              p1q^3*p2q^3*((27*s12^2*s13^3 + 18*s12*s13^4 - 9*s13^5)*s23 +
                (18*s12^4 + 18*s12^3*s13 - 180*s12^2*s13^2 - 117*s12*s13^3 +
                  27*s13^4)*s23^2 + (18*s12^3 - 99*s12^2*s13 - 576*s12*
                   s13^2 - 261*s13^3)*s23^3 + (-45*s12*s13 - 243*s13^2)*
                 s23^4 + 54*s13*s23^5) + p1q^4*p2q^2*((-54*s12^2*s13^2 -
                  18*s12*s13^3 + 36*s13^4)*s23^2 + (-36*s12^3 - 90*s12*
                   s13^2 - 36*s13^3)*s23^3 + (-36*s12^2 + 153*s12*s13 +
                  45*s13^2)*s23^4 + 117*s13*s23^5) + p1q^5*p2q*(
                (27*s12^2*s13 - 18*s12*s13^2 - 45*s13^3)*s23^3 +
                (18*s12^2 + 81*s12*s13 - 9*s13^2)*s23^4 + (18*s12 + 36*s13)*
                 s23^5) + p3q^5*(p2q*(-36*s12^5*s13 - 72*s12^4*s13^2 -
                  36*s12^3*s13^3 + (-108*s12^4*s13 - 144*s12^3*s13^2 -
                    36*s12^2*s13^3)*s23 + (-72*s12^3*s13 - 54*s12^2*s13^2 -
                    18*s12*s13^3)*s23^2 - 18*s12*s13^2*s23^3) +
                p1q*((-36*s12^5 - 171*s12^4*s13 - 198*s12^3*s13^2 -
                    63*s12^2*s13^3)*s23 + (-72*s12^4 - 189*s12^3*s13 -
                    81*s12^2*s13^2)*s23^2 + (-36*s12^3 - 36*s12^2*s13 -
                    18*s12*s13^2)*s23^3 - 18*s12*s13*s23^4)) +
              p3q^4*(p2q^2*(-108*s12^5*s13 - 144*s12^4*s13^2 + 36*s12^3*
                   s13^3 + 72*s12^2*s13^4 + (-324*s12^4*s13 - 216*s12^3*
                     s13^2 + 180*s12^2*s13^3 + 72*s12*s13^4)*s23 +
                  (-234*s12^3*s13 + 18*s12^2*s13^2 + 81*s12*s13^3 + 9*s13^4)*
                   s23^2 + (-18*s12^2*s13 + 9*s13^3)*s23^3) + p1q*p2q*
                 (-36*s12^5*s13 - 72*s12^4*s13^2 - 36*s12^3*s13^3 +
                  (-108*s12^5 - 297*s12^4*s13 + 279*s12^2*s13^3 + 90*s12*
                     s13^4)*s23 + (-216*s12^4 - 135*s12^3*s13 + 423*s12^2*
                     s13^2 + 198*s12*s13^3)*s23^2 + (-108*s12^3 + 126*s12^2*
                     s13 + 90*s12*s13^2 - 18*s13^3)*s23^3 - 18*s13^2*s23^4) +
                p1q^2*((-36*s12^5 - 216*s12^4*s13 - 252*s12^3*s13^2 -
                    72*s12^2*s13^3)*s23 + (18*s12^4 + 117*s12^3*s13 +
                    243*s12^2*s13^2 + 72*s12*s13^3)*s23^2 + (126*s12^3 +
                    315*s12^2*s13 + 72*s12*s13^2)*s23^3 + (72*s12^2 +
                    9*s12*s13 + 9*s13^2)*s23^4 + 9*s13*s23^5)) +
              p3q^3*(p2q^3*(-108*s12^5*s13 + 288*s12^3*s13^3 + 144*s12^2*
                   s13^4 - 36*s12*s13^5 + (-324*s12^4*s13 + 216*s12^3*s13^2 +
                    648*s12^2*s13^3 + 72*s12*s13^4 - 36*s13^5)*s23 +
                  (-216*s12^3*s13 + 360*s12^2*s13^2 + 180*s12*s13^3 -
                    36*s13^4)*s23^2 + 36*s12*s13^2*s23^3) + p1q*p2q^2*
                 (-72*s12^5*s13 - 72*s12^4*s13^2 + 72*s12^3*s13^3 +
                  72*s12^2*s13^4 + (-144*s12^5 - 153*s12^4*s13 + 648*s12^3*
                     s13^2 + 792*s12^2*s13^3 + 108*s12*s13^4 - 27*s13^5)*
                   s23 + (-288*s12^4 + 333*s12^3*s13 + 1359*s12^2*s13^2 +
                    549*s12*s13^3 + 27*s13^4)*s23^2 + (-144*s12^3 +
                    450*s12^2*s13 + 396*s12*s13^2 + 54*s13^3)*s23^3 +
                  36*s12*s13*s23^4) + p1q^2*p2q*((-90*s12^5 - 198*s12^4*s13 +
                    18*s12^3*s13^2 + 126*s12^2*s13^3)*s23 + (-18*s12^4 +
                    198*s12^3*s13 + 414*s12^2*s13^2 + 54*s12*s13^3)*s23^2 +
                  (180*s12^3 + 162*s12^2*s13 - 234*s12*s13^2 - 108*s13^3)*
                   s23^3 + (108*s12^2 - 180*s12*s13 - 108*s13^2)*s23^4) +
                p1q^3*((-45*s12^4*s13 - 54*s12^3*s13^2 - 9*s12^2*s13^3)*s23 +
                  (90*s12^4 + 423*s12^3*s13 + 459*s12^2*s13^2 + 90*s12*s13^3)*
                   s23^2 + (90*s12^3 + 243*s12^2*s13 - 54*s12*s13^2 -
                    9*s13^3)*s23^3 + (-36*s12^2 - 153*s12*s13 + 9*s13^2)*
                   s23^4 + (-36*s12 + 18*s13)*s23^5)) +
              p3q^2*(p2q^4*(-36*s12^5*s13 + 144*s12^4*s13^2 + 288*s12^3*
                   s13^3 - 108*s12*s13^5 + (-108*s12^4*s13 + 504*s12^3*
                     s13^2 + 504*s12^2*s13^3 - 216*s12*s13^4 - 108*s13^5)*
                   s23 + (-63*s12^3*s13 + 405*s12^2*s13^2 - 18*s12*s13^3 -
                    126*s13^4)*s23^2 + (9*s12^2*s13 - 18*s13^3)*s23^3) +
                p1q*p2q^3*(-36*s12^5*s13 + 72*s12^4*s13^2 + 216*s12^3*s13^3 +
                  72*s12^2*s13^4 - 36*s12*s13^5 + (-72*s12^5 + 117*s12^4*
                     s13 + 1080*s12^3*s13^2 + 1116*s12^2*s13^3 + 180*s12*
                     s13^4 - 45*s13^5)*s23 + (-144*s12^4 + 567*s12^3*s13 +
                    1665*s12^2*s13^2 + 963*s12*s13^3 + 153*s13^4)*s23^2 +
                  (-72*s12^3 + 414*s12^2*s13 + 540*s12*s13^2 + 234*s13^3)*
                   s23^3 + 36*s13^2*s23^4) + p1q^2*p2q^2*
                 ((-108*s12^5 - 54*s12^4*s13 + 198*s12^3*s13^2 + 126*s12^2*
                     s13^3 - 18*s12*s13^4)*s23 + (-90*s12^4 + 99*s12^3*s13 +
                    333*s12^2*s13^2 + 243*s12*s13^3 + 99*s13^4)*s23^2 +
                  (90*s12^3 - 333*s12^2*s13 - 486*s12*s13^2 - 117*s13^3)*
                   s23^3 + (72*s12^2 - 450*s12*s13 - 234*s13^2)*s23^4 -
                  18*s13*s23^5) + p1q^3*p2q*((27*s12^4*s13 + 108*s12^3*
                     s13^2 + 99*s12^2*s13^3 + 18*s12*s13^4)*s23 +
                  (144*s12^4 + 405*s12^3*s13 + 549*s12^2*s13^2 + 270*s12*
                     s13^3 + 18*s13^4)*s23^2 + (162*s12^3 + 27*s12^2*s13 -
                    108*s12*s13^2 - 99*s13^3)*s23^3 + (18*s12^2 - 171*s12*
                     s13 - 63*s13^2)*s23^4 + 54*s13*s23^5) +
                p1q^4*((108*s12^3*s13 + 126*s12^2*s13^2 + 18*s12*s13^3)*
                   s23^2 + (-72*s12^3 - 198*s12^2*s13 - 234*s12*s13^2 -
                    18*s13^3)*s23^3 + (-90*s12^2 - 225*s12*s13 + 9*s13^2)*
                   s23^4 + (-18*s12 + 27*s13)*s23^5)) +
              p3q*(p2q^5*(72*s12^4*s13^2 + 36*s12^3*s13^3 - 144*s12^2*s13^4 -
                  108*s12*s13^5 + (216*s12^3*s13^2 - 36*s12^2*s13^3 -
                    360*s12*s13^4 - 108*s13^5)*s23 + (126*s12^2*s13^2 -
                    162*s12*s13^3 - 108*s13^4)*s23^2 - 18*s12*s13^2*s23^3) +
                p1q*p2q^4*(72*s12^4*s13^2 + 72*s12^3*s13^3 - 72*s12^2*s13^4 -
                  72*s12*s13^5 + (144*s12^4*s13 + 702*s12^3*s13^2 +
                    711*s12^2*s13^3 + 72*s12*s13^4 - 81*s13^5)*s23 +
                  (288*s12^3*s13 + 1026*s12^2*s13^2 + 891*s12*s13^3 +
                    189*s13^4)*s23^2 + (126*s12^2*s13 + 378*s12*s13^2 +
                    270*s13^3)*s23^3 - 18*s12*s13*s23^4) + p1q^2*p2q^3*
                 ((-54*s12^5 - 90*s12^4*s13 - 18*s12^3*s13^2 + 162*s12^2*
                     s13^3 + 144*s12*s13^4)*s23 + (-90*s12^4 - 252*s12^3*
                     s13 - 108*s12^2*s13^2 + 432*s12*s13^3 + 234*s13^4)*
                   s23^2 + (-36*s12^3 - 576*s12^2*s13 - 630*s12*s13^2 -
                    54*s13^3)*s23^3 + (-396*s12*s13 - 288*s13^2)*s23^4) +
                p1q^3*p2q^2*((-54*s12^3*s13^2 - 81*s12^2*s13^3 - 36*s12*
                     s13^4 - 9*s13^5)*s23 + (108*s12^4 + 36*s12^3*s13 -
                    126*s12^2*s13^2 + 27*s12*s13^3 + 45*s13^4)*s23^2 +
                  (126*s12^3 - 351*s12^2*s13 - 522*s12*s13^2 - 171*s13^3)*
                   s23^3 + (18*s12^2 - 171*s12*s13 - 99*s13^2)*s23^4 +
                  126*s13*s23^5) + p1q^5*((-81*s12^2*s13 - 90*s12*s13^2 -
                    9*s13^3)*s23^3 + (18*s12^2 - 27*s12*s13 + 27*s13^2)*
                   s23^4 + (18*s12 + 36*s13)*s23^5) + p1q^4*p2q*
                 ((-54*s12^3*s13 + 18*s12^2*s13^2 + 90*s12*s13^3 + 18*s13^4)*
                   s23^2 + (-72*s12^3 - 288*s12^2*s13 - 180*s12*s13^2 -
                    72*s13^3)*s23^3 + (-54*s12^2 - 72*s12*s13 - 18*s13^2)*
                   s23^4 + (18*s12 + 72*s13)*s23^5)))*
             Log((p2q + p3q)/(p1q + p2q + p3q)))/
            (p1q*p3q^5*(4*s12^4*s13 + 4*s12^3*s13^2)*s23^2 +
             p1q*p2q^5*(4*s12^2*s13^3 + 4*s12*s13^4)*s23^2 -
             4*p1q^5*p2q*s12*s13*s23^5 + p1q^2*p2q^4*((4*s12^2*s13^3 +
                 4*s12*s13^4)*s23^2 + (-8*s12^2*s13^2 - 12*s12*s13^3)*
                s23^3) + p1q^3*p2q^3*((-8*s12^2*s13^2 - 12*s12*s13^3)*s23^3 +
               (4*s12^2*s13 + 12*s12*s13^2)*s23^4) + p1q^4*p2q^2*
              ((4*s12^2*s13 + 12*s12*s13^2)*s23^4 - 4*s12*s13*s23^5) +
             p3q^4*(p1q*p2q*(12*s12^4*s13 + 4*s12^3*s13^2 - 8*s12^2*s13^3)*
                s23^2 + p1q^2*((4*s12^4*s13 + 4*s12^3*s13^2)*s23^2 +
                 (-12*s12^3*s13 - 8*s12^2*s13^2)*s23^3)) +
             p3q^3*(p1q*p2q^2*(12*s12^4*s13 - 12*s12^3*s13^2 - 20*s12^2*
                  s13^3 + 4*s12*s13^4)*s23^2 + p1q^2*p2q*
                ((8*s12^4*s13 - 8*s12^2*s13^3)*s23^2 + (-32*s12^3*s13 -
                   24*s12^2*s13^2 - 8*s12*s13^3)*s23^3) + p1q^3*
                ((-12*s12^3*s13 - 8*s12^2*s13^2)*s23^3 + (12*s12^2*s13 +
                   4*s12*s13^2)*s23^4)) + p3q*(p1q*p2q^4*(-8*s12^3*s13^2 +
                 4*s12^2*s13^3 + 12*s12*s13^4)*s23^2 - 4*p1q^5*s12*s13*
                s23^5 + p1q^2*p2q^3*((-8*s12^3*s13^2 + 8*s12*s13^4)*s23^2 +
                 (-8*s12^3*s13 - 24*s12^2*s13^2 - 32*s12*s13^3)*s23^3) +
               p1q^3*p2q^2*((-8*s12^3*s13 - 16*s12^2*s13^2 - 20*s12*s13^3)*
                  s23^3 + (20*s12^2*s13 + 28*s12*s13^2)*s23^4) + p1q^4*p2q*
                ((16*s12^2*s13 + 16*s12*s13^2)*s23^4 - 8*s12*s13*s23^5)) +
             p3q^2*(p1q*p2q^3*(4*s12^4*s13 - 20*s12^3*s13^2 - 12*s12^2*
                  s13^3 + 12*s12*s13^4)*s23^2 + p1q^2*p2q^2*
                ((4*s12^4*s13 - 12*s12^3*s13^2 - 12*s12^2*s13^3 +
                   4*s12*s13^4)*s23^2 + (-28*s12^3*s13 - 32*s12^2*s13^2 -
                   28*s12*s13^3)*s23^3) + p1q^3*p2q*((-20*s12^3*s13 -
                   16*s12^2*s13^2 - 8*s12*s13^3)*s23^3 + (28*s12^2*s13 +
                   20*s12*s13^2)*s23^4) + p1q^4*((12*s12^2*s13 + 4*s12*s13^2)*
                  s23^4 - 4*s12*s13*s23^5))) +
           ((p2q^2*(36*s12^2*s13 + 36*s12*s13^2 + (72*s12*s13 + 36*s13^2)*
                 s23 + 36*s13*s23^2) + p1q*p2q*((-9*s12*s13 - 9*s13^2)*s23 +
                (-2*s12 - 11*s13)*s23^2 - 2*s23^3) + p3q*(p2q*(36*s12^2*s13 +
                  36*s12*s13^2 + (54*s12*s13 + 18*s13^2)*s23 + 18*s13*
                   s23^2) + p1q*((9*s12*s13 + 9*s13^2)*s23 + (-2*s12 + 7*s13)*
                   s23^2 - 2*s23^3)))*Log(-s12 - s13 - s23))/
            (2*p1q*p2q*s12*s13*s23^2 + 2*p1q*p3q*s12*s13*s23^2) +
           ((p3q^6*((9*s12^4*s13 + 9*s12^3*s13^2)*s23 + (s12^4 + 10*s12^3*
                   s13)*s23^2 + s12^3*s23^3) + p2q^6*(36*s12^2*s13^4 +
                36*s12*s13^5 + (9*s12^2*s13^3 + 45*s12*s13^4)*s23 +
                (8*s12*s13^3 - s13^4)*s23^2 + (-(s12*s13^2) - 2*s13^3)*
                 s23^3 - s13^2*s23^4) + p1q*p2q^5*(72*s12^2*s13^4 +
                72*s12*s13^5 + (-18*s12^2*s13^3 + 81*s12*s13^4 + 27*s13^5)*
                 s23 + (-15*s12^2*s13^2 - 17*s12*s13^3 + 43*s13^4)*s23^2 +
                (-16*s12*s13^2 + 15*s13^3)*s23^3 + (2*s12*s13 + s13^2)*
                 s23^4 + 2*s13*s23^5) + p1q^6*((9*s12^2*s13 + 18*s12*s13^2 +
                  9*s13^3)*s23^3 + (18*s12*s13 + 18*s13^2)*s23^4 +
                9*s13*s23^5) + p1q^3*p2q^3*((36*s12^3*s13^2 + 36*s12^2*
                   s13^3 + 27*s12*s13^4 + 27*s13^5)*s23 + (-34*s12^3*s13 -
                  83*s12^2*s13^2 - 157*s12*s13^3 - 45*s13^4)*s23^2 +
                (-2*s12^3 - 28*s12^2*s13 - 103*s12*s13^2 - 98*s13^3)*s23^3 +
                (-3*s12^2 + 29*s12*s13 - 4*s13^2)*s23^4 + (-4*s12 + 19*s13)*
                 s23^5 - 3*s23^6) + p1q^4*p2q^2*((9*s12^2*s13^3 +
                  18*s12*s13^4 + 9*s13^5)*s23 + (-36*s12^3*s13 - 126*s12^2*
                   s13^2 - 126*s12*s13^3 - 36*s13^4)*s23^2 +
                (-2*s12^3 + 8*s12^2*s13 - 35*s12*s13^2 - 36*s13^3)*s23^3 +
                (76*s12*s13 + 37*s13^2)*s23^4 + (-s12 + 25*s13)*s23^5 -
                3*s23^6) + p1q^2*p2q^4*(36*s12^2*s13^4 + 36*s12*s13^5 +
                (36*s12^3*s13^2 + 45*s12*s13^4 + 45*s13^5)*s23 +
                (2*s12^3*s13 + 10*s12^2*s13^2 - 92*s12*s13^3 + 17*s13^4)*
                 s23^2 + (9*s12^2*s13 - 56*s12*s13^2 - 63*s13^3)*s23^3 +
                (12*s12*s13 - 30*s13^2)*s23^4 + (-s12 + 4*s13)*s23^5 -
                s23^6) + p1q^5*p2q*((-18*s12^2*s13^2 - 36*s12*s13^3 -
                  18*s13^4)*s23^2 + (54*s12^2*s13 + 45*s12*s13^2 - 9*s13^3)*
                 s23^3 + (3*s12^2 + 75*s12*s13 + 27*s13^2)*s23^4 +
                (2*s12 + 17*s13)*s23^5 - s23^6) + p3q^5*(
                p1q*((-9*s12^4*s13 - 9*s12^3*s13^2)*s23 + (5*s12^4 -
                    31*s12^3*s13 - 27*s12^2*s13^2)*s23^2 + (2*s12^3 -
                    30*s12^2*s13)*s23^3 - 3*s12^2*s23^4) +
                p2q*(-36*s12^5*s13 - 36*s12^4*s13^2 + (-36*s12^4*s13 -
                    18*s12^3*s13^2 - 18*s12^2*s13^3)*s23 + (-s12^4 -
                    4*s12^3*s13 - 21*s12^2*s13^2)*s23^2 + (-2*s12^3 -
                    4*s12^2*s13)*s23^3 - s12^2*s23^4)) +
              p3q^4*(p2q^2*(-72*s12^5*s13 + 36*s12^4*s13^2 + 108*s12^3*
                   s13^3 + (-90*s12^4*s13 + 90*s12^3*s13^2 + 9*s12^2*s13^3 +
                    9*s12*s13^4)*s23 + (-s12^4 - 16*s12^3*s13 + 6*s12^2*
                     s13^2 + 12*s12*s13^3)*s23^2 + (6*s12^2*s13 +
                    5*s12*s13^2)*s23^3 + (s12^2 + 2*s12*s13)*s23^4) +
                p1q*p2q*(-36*s12^5*s13 + 36*s12^3*s13^3 + (72*s12^4*s13 +
                    153*s12^3*s13^2 + 9*s12^2*s13^3)*s23 + (9*s12^4 +
                    109*s12^3*s13 + s12^2*s13^2)*s23^2 + (6*s12^3 -
                    9*s12^2*s13 + 2*s12*s13^2)*s23^3 + (-s12^2 + 4*s12*s13)*
                   s23^4 + 2*s12*s23^5) + p1q^2*((-18*s12^4*s13 + 9*s12^3*
                     s13^2 + 27*s12^2*s13^3)*s23 + (7*s12^4 - 2*s12^3*s13 +
                    36*s12^2*s13^2)*s23^2 + (-5*s12^3 + 24*s12^2*s13 +
                    27*s12*s13^2)*s23^3 + (-9*s12^2 + 30*s12*s13)*s23^4 +
                  3*s12*s23^5)) + p3q^3*(p2q^3*(-36*s12^5*s13 + 180*s12^4*
                   s13^2 + 108*s12^3*s13^3 - 108*s12^2*s13^4 +
                  (-36*s12^4*s13 + 252*s12^3*s13^2 - 72*s12^2*s13^3)*s23 +
                  (s12^4 + 4*s12^3*s13 + 36*s12^2*s13^2 - 4*s12*s13^3 -
                    s13^4)*s23^2 + (2*s12^3 + 2*s12^2*s13 - 6*s12*s13^2 -
                    2*s13^3)*s23^3 + (s12^2 - 2*s12*s13 - s13^2)*s23^4) +
                p1q*p2q^2*(-36*s12^5*s13 + 144*s12^4*s13^2 + 108*s12^3*
                   s13^3 - 72*s12^2*s13^4 + (171*s12^4*s13 + 297*s12^3*
                     s13^2 - 153*s12^2*s13^3 + 9*s12*s13^4)*s23 +
                  (3*s12^4 + 219*s12^3*s13 - 40*s12^2*s13^2 + 41*s12*s13^3 -
                    9*s13^4)*s23^2 + (-6*s12^3 + 2*s12^2*s13 + 44*s12*s13^2 -
                    8*s13^3)*s23^3 + (-11*s12^2 + 2*s12*s13 + 3*s13^2)*
                   s23^4 + (-2*s12 + 2*s13)*s23^5) + p1q^2*p2q*
                 (36*s12^4*s13^2 + 36*s12^3*s13^3 + (126*s12^4*s13 +
                    90*s12^3*s13^2 - 90*s12^2*s13^3 - 18*s12*s13^4)*s23 +
                  (13*s12^4 - 14*s12^3*s13 - 259*s12^2*s13^2 - 52*s12*s13^3)*
                   s23^2 + (-12*s12^3 - 182*s12^2*s13 - 20*s12*s13^2 +
                    18*s13^3)*s23^3 + (-20*s12^2 + 2*s12*s13 + 19*s13^2)*
                   s23^4 + 4*s12*s23^5 - s23^6) + p1q^3*((9*s12^4*s13 +
                    45*s12^3*s13^2 + 36*s12^2*s13^3)*s23 + (3*s12^4 +
                    57*s12^3*s13 + 45*s12^2*s13^2 - 36*s12*s13^3)*s23^2 +
                  (-12*s12^3 + 39*s12^2*s13 - 27*s12*s13^2)*s23^3 +
                  (-6*s12^2 + 9*s12*s13 - 9*s13^2)*s23^4 + (8*s12 - 10*s13)*
                   s23^5 - s23^6)) + p3q^2*(p2q^4*(108*s12^4*s13^2 -
                  108*s12^3*s13^3 - 180*s12^2*s13^4 + 36*s12*s13^5 +
                  (9*s12^4*s13 + 117*s12^3*s13^2 - 234*s12^2*s13^3 +
                    18*s12*s13^4)*s23 + (6*s12^3*s13 - 6*s12^2*s13^2 -
                    20*s12*s13^3 + s13^4)*s23^2 + (-s12^3 - 6*s12^2*s13 -
                    4*s12*s13^2 + 2*s13^3)*s23^3 + (-s12^2 - 2*s12*s13 +
                    s13^2)*s23^4) + p1q*p2q^3*(144*s12^4*s13^2 - 108*s12^3*
                   s13^3 - 216*s12^2*s13^4 + 36*s12*s13^5 + (126*s12^4*s13 +
                    171*s12^3*s13^2 - 351*s12^2*s13^3 + 27*s12*s13^4 -
                    9*s13^5)*s23 + (-s12^4 + 131*s12^3*s13 + 10*s12^2*s13^2 +
                    65*s12*s13^3 - 47*s13^4)*s23^2 + (-10*s12^3 - s12^2*s13 +
                    98*s12*s13^2 - 45*s13^3)*s23^3 + (-11*s12^2 - 2*s12*s13 -
                    9*s13^2)*s23^4 + (-2*s12 - 2*s13)*s23^5) +
                p1q^4*((9*s12^4*s13 + 18*s12^3*s13^2 + 9*s12^2*s13^3)*s23 +
                  (-54*s12^2*s13^2 - 54*s12*s13^3)*s23^2 + (-6*s12^3 -
                    51*s12^2*s13 - 81*s12*s13^2 + 9*s13^3)*s23^3 +
                  (3*s12^2 - 36*s12*s13)*s23^4 + (7*s12 - 11*s13)*s23^5 -
                  2*s23^6) + p1q^3*p2q*((54*s12^4*s13 + 27*s12^3*s13^2 -
                    9*s12^2*s13^3 + 18*s12*s13^4)*s23 + (5*s12^4 - 85*s12^3*
                     s13 - 95*s12^2*s13^2 + 94*s12*s13^3)*s23^2 +
                  (-18*s12^3 - 81*s12^2*s13 + 227*s12*s13^2 + 65*s13^3)*
                   s23^3 + (-2*s12^2 + 115*s12*s13 + 73*s13^2)*s23^4 +
                  (20*s12 + 7*s13)*s23^5 - s23^6) + p1q^2*p2q^2*
                 (36*s12^4*s13^2 - 36*s12^3*s13^3 - 72*s12^2*s13^4 +
                  (180*s12^4*s13 - 27*s12^3*s13^2 - 369*s12^2*s13^3 -
                    63*s12*s13^4 - 9*s13^5)*s23 + (4*s12^4 + 16*s12^3*s13 -
                    362*s12^2*s13^2 - 52*s12*s13^3 - 56*s13^4)*s23^2 +
                  (-19*s12^3 - 199*s12^2*s13 + 73*s12*s13^2 - 15*s13^3)*
                   s23^3 + (-18*s12^2 + 4*s12*s13 + 39*s13^2)*s23^4 +
                  (6*s12 + 8*s13)*s23^5 + s23^6)) + p3q*(p2q^5*
                 (-108*s12^3*s13^3 - 36*s12^2*s13^4 + 72*s12*s13^5 +
                  (-18*s12^3*s13^2 - 126*s12^2*s13^3 + 72*s12*s13^4)*s23 +
                  (-15*s12^2*s13^2 + 4*s12*s13^3 + s13^4)*s23^2 +
                  (2*s12^2*s13 + 6*s12*s13^2 + 2*s13^3)*s23^3 +
                  (2*s12*s13 + s13^2)*s23^4) + p1q*p2q^4*(-180*s12^3*s13^3 -
                  72*s12^2*s13^4 + 108*s12*s13^5 + (-108*s12^3*s13^2 -
                    423*s12^2*s13^3 - 45*s12*s13^4 - 18*s13^5)*s23 +
                  (-20*s12^3*s13 - 153*s12^2*s13^2 - 209*s12*s13^3 -
                    67*s13^4)*s23^2 + (-18*s12^2*s13 - 32*s12*s13^2 -
                    58*s13^3)*s23^3 + (2*s12^2 + 2*s12*s13 - 11*s13^2)*
                   s23^4 + (2*s12 - 2*s13)*s23^5) + p1q^4*p2q*
                 ((-18*s12^3*s13^2 - 36*s12^2*s13^3 - 18*s12*s13^4)*s23 +
                  (-108*s12^3*s13 - 180*s12^2*s13^2 - 108*s12*s13^3 -
                    36*s13^4)*s23^2 + (-8*s12^3 - 88*s12^2*s13 - 26*s12*
                     s13^2 - 36*s13^3)*s23^3 + (3*s12^2 + 22*s12*s13 -
                    17*s13^2)*s23^4 + (6*s12 - 22*s13)*s23^5 - 5*s23^6) +
                p1q^3*p2q^2*((36*s12^4*s13 - 90*s12^3*s13^2 - 207*s12^2*
                     s13^3 - 63*s12*s13^4 + 18*s13^5)*s23 + (2*s12^4 -
                    158*s12^3*s13 - 421*s12^2*s13^2 - 189*s12*s13^3 +
                    9*s13^4)*s23^2 + (-8*s12^3 - 229*s12^2*s13 - 47*s12*
                     s13^2 + 66*s13^3)*s23^3 + (s12^2 - 9*s12*s13 + 78*s13^2)*
                   s23^4 + 8*s12*s23^5 - 3*s23^6) + p1q^5*
                 ((-18*s12^3*s13 - 36*s12^2*s13^2 - 18*s12*s13^3)*s23^2 +
                  (-27*s12^2*s13 - 9*s12*s13^2 + 18*s13^3)*s23^3 +
                  (3*s12^2 + 3*s12*s13 + 27*s13^2)*s23^4 + (2*s12 + 8*s13)*
                   s23^5 - s23^6) + p1q^2*p2q^3*(-72*s12^3*s13^3 -
                  36*s12^2*s13^4 + 36*s12*s13^5 + (-36*s12^4*s13 - 324*s12^3*
                     s13^2 - 576*s12^2*s13^3 - 180*s12*s13^4)*s23 +
                  (-2*s12^4 - 294*s12^3*s13 - 705*s12^2*s13^2 - 416*s12*
                     s13^3 - 39*s13^4)*s23^2 + (-12*s12^3 - 380*s12^2*s13 -
                    224*s12*s13^2 + 12*s13^3)*s23^3 + (-7*s12^2 - 100*s12*
                     s13 + 62*s13^2)*s23^4 + (4*s12 + 12*s13)*s23^5 +
                  s23^6)))*Log(s12/(s12 + s13 + s23)))/
            (4*p1q*p3q^5*s12^4*s13*s23^2 + p1q*p2q^5*(-4*s12*s13^4*s23^2 - 4*
                s12*s13^3*s23^3) + p1q^2*p2q^4*(-8*s12*s13^4*s23^2 + 8*s12*
                s13^2*s23^4) + p1q^4*p2q^2*(8*s12*s13^3*s23^3 - 8*s12*s13*
                s23^5) + p1q^5*p2q*(-4*s12*s13^2*s23^4 - 4*s12*s13*s23^5) +
             p1q^3*p2q^3*(-4*s12*s13^4*s23^2 + 12*s12*s13^3*s23^3 + 12*s12*
                s13^2*s23^4 - 4*s12*s13*s23^5) +
             p3q^4*(p1q^2*((4*s12^4*s13 - 4*s12^3*s13^2)*s23^2 - 12*s12^3*s13*
                  s23^3) + p1q*p2q*((8*s12^4*s13 - 12*s12^3*s13^2)*s23^2 -
                 4*s12^3*s13*s23^3)) + p3q^3*(p1q*p2q^2*
                ((4*s12^4*s13 - 24*s12^3*s13^2 + 12*s12^2*s13^3)*s23^2 +
                 (-8*s12^3*s13 + 8*s12^2*s13^2)*s23^3) + p1q^2*p2q*
                ((4*s12^4*s13 - 20*s12^3*s13^2 + 8*s12^2*s13^3)*s23^2 +
                 (-28*s12^3*s13 + 8*s12^2*s13^2)*s23^3 + 8*s12^2*s13*s23^4) +
               p1q^3*(-4*s12^3*s13^2*s23^2 + (-12*s12^3*s13 + 8*s12^2*s13^2)*
                  s23^3 + 12*s12^2*s13*s23^4)) + p3q*(p1q*p2q^4*
                ((12*s12^2*s13^3 - 8*s12*s13^4)*s23^2 + (8*s12^2*s13^2 -
                   8*s12*s13^3)*s23^3) + p1q^2*p2q^3*((20*s12^2*s13^3 -
                   12*s12*s13^4)*s23^2 + (16*s12^2*s13^2 + 4*s12*s13^3)*
                  s23^3 + (8*s12^2*s13 + 16*s12*s13^2)*s23^4) + p1q^4*p2q*
                ((8*s12^2*s13^2 + 8*s12*s13^3)*s23^3 + (12*s12^2*s13 -
                   4*s12*s13^2)*s23^4 - 12*s12*s13*s23^5) + p1q^3*p2q^2*
                ((8*s12^2*s13^3 - 4*s12*s13^4)*s23^2 + (16*s12^2*s13^2 +
                   20*s12*s13^3)*s23^3 + (20*s12^2*s13 + 16*s12*s13^2)*
                  s23^4 - 8*s12*s13*s23^5) + p1q^5*(-4*s12*s13^2*s23^4 -
                 4*s12*s13*s23^5)) + p3q^2*(p1q*p2q^3*((-12*s12^3*s13^2 +
                   24*s12^2*s13^3 - 4*s12*s13^4)*s23^2 + (-4*s12^3*s13 +
                   16*s12^2*s13^2 - 4*s12*s13^3)*s23^3) + p1q^2*p2q^2*
                ((-16*s12^3*s13^2 + 28*s12^2*s13^3 - 4*s12*s13^4)*s23^2 +
                 (-16*s12^3*s13 + 24*s12^2*s13^2 + 4*s12*s13^3)*s23^3 +
                 (16*s12^2*s13 + 8*s12*s13^2)*s23^4) + p1q^4*
                (8*s12^2*s13^2*s23^3 + (12*s12^2*s13 - 4*s12*s13^2)*s23^4 -
                 4*s12*s13*s23^5) + p1q^3*p2q*((-4*s12^3*s13^2 + 8*s12^2*
                    s13^3)*s23^2 + (-12*s12^3*s13 + 24*s12^2*s13^2 +
                   8*s12*s13^3)*s23^3 + (32*s12^2*s13 + 4*s12*s13^2)*s23^4 -
                 4*s12*s13*s23^5))) + ((p2q^5*(s12*s13^3 + s13^4 +
                s13^3*s23) + p3q^5*(-s12^4 - s12^3*s13 + (-2*s12^3 -
                  s12^2*s13)*s23 - s12^2*s23^2) + p1q*p2q^4*(5*s12*s13^3 +
                5*s13^4 + (-3*s12*s13^2 + 2*s13^3)*s23 - 3*s13^2*s23^2) +
              p1q^2*p2q^3*(-2*s12^2*s13^2 + 3*s12*s13^3 + 5*s13^4 +
                (-14*s12*s13^2 - 7*s13^3)*s23 + (3*s12*s13 - 9*s13^2)*s23^2 +
                3*s13*s23^3) + p1q^5*((-4*s12^2 - 5*s12*s13 - s13^2)*s23^2 +
                (-9*s12 - 6*s13)*s23^3 - 5*s23^4) + p1q^4*p2q*(
                (2*s12^3 + 12*s12^2*s13 + 12*s12*s13^2 + 2*s13^3)*s23 +
                (4*s12^2 + 27*s12*s13 + 17*s13^2)*s23^2 + 13*s13*s23^3 -
                2*s23^4) + p1q^3*p2q^2*(-2*s12^3*s13 - 8*s12^2*s13^2 -
                7*s12*s13^3 - s13^4 + (-2*s12^2*s13 - 21*s12*s13^2 -
                  16*s13^3)*s23 + (9*s12*s13 - 6*s13^2)*s23^2 +
                (-s12 + 8*s13)*s23^3 - s23^4) + p3q^4*(p2q*(2*s12^4 +
                  5*s12^3*s13 + 3*s12^2*s13^2 + (4*s12^3 + 7*s12^2*s13 +
                    2*s12*s13^2)*s23 + (2*s12^2 + 2*s12*s13)*s23^2) +
                p1q*(-6*s12^4 - 7*s12^3*s13 - s12^2*s13^2 + (-11*s12^3 -
                    6*s12^2*s13)*s23 + (-3*s12^2 + 2*s12*s13)*s23^2 +
                  2*s12*s23^3)) + p3q^3*(p2q^2*(-s12^4 - 7*s12^3*s13 -
                  9*s12^2*s13^2 - 3*s12*s13^3 + (-2*s12^3 - 11*s12^2*s13 -
                    8*s12*s13^2 - s13^3)*s23 + (-s12^2 - 4*s12*s13 - s13^2)*
                   s23^2) + p1q*p2q*(-2*s12^4 + 10*s12^3*s13 + 14*s12^2*
                   s13^2 + 2*s12*s13^3 + (-10*s12^3 + 14*s12^2*s13 +
                    12*s12*s13^2)*s23 + (-12*s12^2 + 8*s12*s13 + 2*s13^2)*
                   s23^2 + (-4*s12 + 2*s13)*s23^3) + p1q^2*(-9*s12^4 -
                  11*s12^3*s13 - 2*s12^2*s13^2 + (-8*s12^3 + s12^2*s13 +
                    2*s12*s13^2)*s23 + (14*s12^2 + 15*s12*s13)*s23^2 +
                  (12*s12 - s13)*s23^3 - s23^4)) + p3q*(p2q^4*
                 (-3*s12^2*s13^2 - 5*s12*s13^3 - 2*s13^4 + (-4*s12*s13^2 -
                    3*s13^3)*s23 - s13^2*s23^2) + p1q*p2q^3*(-4*s12^2*s13^2 +
                  4*s12*s13^3 + 8*s13^4 + (2*s12^2*s13 - 2*s12*s13^2 +
                    8*s13^3)*s23 + (4*s12*s13 + 2*s13^2)*s23^2 +
                  2*s13*s23^3) + p1q^3*p2q*(-2*s12^4 - 2*s12*s13^3 +
                  (2*s12^3 + 20*s12^2*s13 + 12*s12*s13^2)*s23 +
                  (16*s12^2 + 50*s12*s13 + 24*s13^2)*s23^2 +
                  (12*s12 + 24*s13)*s23^3) + p1q^4*((8*s12^3 + 10*s12^2*s13 +
                    2*s12*s13^2)*s23 + (9*s12^2 + s12*s13 - 2*s13^2)*s23^2 +
                  (-10*s12 - 13*s13)*s23^3 - 11*s23^4) + p1q^2*p2q^2*
                 (-15*s12^2*s13^2 - 13*s12*s13^3 + 2*s13^4 + (-4*s12^2*s13 -
                    40*s12*s13^2 - 19*s13^3)*s23 + (s12^2 - s12*s13 -
                    19*s13^2)*s23^2 + s13*s23^3 - s23^4)) +
              p3q^2*(p2q^3*(3*s12^3*s13 + 9*s12^2*s13^2 + 7*s12*s13^3 +
                  s13^4 + (5*s12^2*s13 + 10*s12*s13^2 + 3*s13^3)*s23 +
                  (2*s12*s13 + 2*s13^2)*s23^2) + p1q*p2q^2*(s12^3*s13 -
                  13*s12^2*s13^2 - 15*s12*s13^3 - s13^4 + (s12^3 + 2*s12^2*
                     s13 - 27*s12*s13^2 - 14*s13^3)*s23 + (3*s12^2 -
                    2*s12*s13 - 17*s13^2)*s23^2 + (2*s12 - 4*s13)*s23^3) +
                p1q^3*(-4*s12^4 - 5*s12^3*s13 - s12^2*s13^2 +
                  (9*s12^3 + 16*s12^2*s13 + 4*s12*s13^2)*s23 +
                  (29*s12^2 + 19*s12*s13 - s13^2)*s23^2 + (9*s12 - 8*s13)*
                   s23^3 - 7*s23^4) + p1q^2*p2q*(-6*s12^4 + 5*s12^3*s13 +
                  11*s12^2*s13^2 + (-14*s12^3 + 15*s12^2*s13 + 10*s12*s13^2 -
                    2*s13^3)*s23 + (-2*s12^2 + 29*s12*s13 + 9*s13^2)*s23^2 +
                  (8*s12 + 13*s13)*s23^3 + 2*s23^4)))*
             Log(s13/(s12 + s13 + s23)))/(-4*p1q*p2q^4*s12*s13^4 +
             p1q*p3q^4*(4*s12^4*s13 + 4*s12^3*s13*s23) + p1q^2*p2q^3*
              (4*s12^2*s13^3 - 4*s12*s13^4 + 12*s12*s13^3*s23) +
             p1q^3*p2q^2*(4*s12^2*s13^3 + (-8*s12^2*s13^2 + 12*s12*s13^3)*
                s23 - 12*s12*s13^2*s23^2) + p1q^5*(4*s12^2*s13*s23^2 + 4*s12*
                s13*s23^3) + p1q^4*p2q*(-8*s12^2*s13^2*s23 + (4*s12^2*s13 -
                 12*s12*s13^2)*s23^2 + 4*s12*s13*s23^3) +
             p3q^3*(p1q*p2q*(4*s12^4*s13 - 12*s12^3*s13^2 + (4*s12^3*s13 -
                   8*s12^2*s13^2)*s23) + p1q^2*(8*s12^4*s13 - 8*s12^2*s13*
                  s23^2)) + p3q^2*(p1q*p2q^2*(-12*s12^3*s13^2 + 12*s12^2*
                  s13^3 + (-8*s12^2*s13^2 + 4*s12*s13^3)*s23) + p1q^2*p2q*
                (4*s12^4*s13 - 20*s12^3*s13^2 + (-4*s12^3*s13 - 16*s12^2*
                    s13^2)*s23 + (-8*s12^2*s13 - 8*s12*s13^2)*s23^2) + p1q^3*
                (4*s12^4*s13 - 12*s12^3*s13*s23 - 12*s12^2*s13*s23^2 +
                 4*s12*s13*s23^3)) + p3q*(p1q*p2q^3*(12*s12^2*s13^3 -
                 4*s12*s13^4 + 4*s12*s13^3*s23) + p1q^2*p2q^2*
                (-8*s12^3*s13^2 + 16*s12^2*s13^3 + (-8*s12^2*s13^2 +
                   16*s12*s13^3)*s23 - 8*s12*s13^2*s23^2) + p1q^3*p2q*
                (-8*s12^3*s13^2 + (-8*s12^3*s13 - 16*s12^2*s13^2)*s23 +
                 (-4*s12^2*s13 - 20*s12*s13^2)*s23^2 + 4*s12*s13*s23^3) +
               p1q^4*(-8*s12^3*s13*s23 + 8*s12*s13*s23^3))) +
           ((p3q^6*((-9*s12^3 - 9*s12^2*s13)*s23^2 - 9*s12^2*s23^3) +
              p2q^6*(72*s12^3*s13^2 + 144*s12^2*s13^3 + 72*s12*s13^4 +
                (144*s12^2*s13^2 + 180*s12*s13^3 + 36*s13^4)*s23 +
                (63*s12*s13^2 + 27*s13^3)*s23^2 - 9*s13^2*s23^3) +
              p1q*p2q^5*(72*s12^3*s13^2 + 144*s12^2*s13^3 + 72*s12*s13^4 +
                (-144*s12^3*s13 - 189*s12^2*s13^2 + 18*s12*s13^3 + 63*s13^4)*
                 s23 + (-288*s12^2*s13 - 387*s12*s13^2 - 63*s13^3)*s23^2 +
                (-126*s12*s13 - 108*s13^2)*s23^3 + 18*s13*s23^4) +
              p1q^4*p2q^2*((54*s12^2*s13 + 18*s12*s13^2 - 36*s13^3)*s23^2 +
                (-126*s12^2 + 36*s13^2)*s23^3 + (-243*s12 - 45*s13)*s23^4 -
                117*s23^5) + p1q^3*p2q^3*((-27*s12^2*s13^2 - 18*s12*s13^3 +
                  9*s13^4)*s23 + (108*s12^3 + 450*s12^2*s13 + 279*s12*s13^2 -
                  27*s13^3)*s23^2 + (171*s12^2 + 702*s12*s13 + 261*s13^2)*
                 s23^3 + (9*s12 + 243*s13)*s23^4 - 54*s23^5) +
              p1q^5*p2q*((-27*s12^2 + 18*s12*s13 + 45*s13^2)*s23^3 +
                (-63*s12 + 9*s13)*s23^4 - 36*s23^5) + p1q^6*(
                (-18*s12 - 18*s13)*s23^4 - 18*s23^5) + p1q^2*p2q^4*(
                (-180*s12^3*s13 - 468*s12^2*s13^2 - 288*s12*s13^3)*s23 +
                (72*s12^3 - 126*s12^2*s13 - 549*s12*s13^2 - 243*s13^3)*
                 s23^2 + (144*s12^2 + 198*s12*s13 - 99*s13^2)*s23^3 +
                (63*s12 + 135*s13)*s23^4 - 9*s23^5) + p3q^5*(
                p2q*(72*s12^5 + 144*s12^4*s13 + 72*s12^3*s13^2 +
                  (144*s12^4 + 180*s12^3*s13 + 36*s12^2*s13^2)*s23 +
                  (72*s12^3 + 54*s12^2*s13 + 18*s12*s13^2)*s23^2 +
                  18*s12*s13*s23^3) + p1q*((63*s12^4 + 90*s12^3*s13 +
                    27*s12^2*s13^2)*s23 + (45*s12^3 + 9*s12^2*s13)*s23^2 +
                  18*s12*s13*s23^3 + 18*s12*s23^4)) +
              p3q*(p2q^5*(-144*s12^4*s13 - 72*s12^3*s13^2 + 288*s12^2*s13^3 +
                  216*s12*s13^4 + (-288*s12^3*s13 + 72*s12^2*s13^2 +
                    468*s12*s13^3 + 108*s13^4)*s23 + (-126*s12^2*s13 +
                    162*s12*s13^2 + 108*s13^3)*s23^2 + 18*s12*s13*s23^3) +
                p1q*p2q^4*(-144*s12^4*s13 - 144*s12^3*s13^2 + 144*s12^2*
                   s13^3 + 144*s12*s13^4 + (-144*s12^4 - 918*s12^3*s13 -
                    1143*s12^2*s13^2 - 288*s12*s13^3 + 81*s13^4)*s23 +
                  (-288*s12^3 - 1170*s12^2*s13 - 1179*s12*s13^2 - 189*s13^3)*
                   s23^2 + (-126*s12^2 - 378*s12*s13 - 270*s13^2)*s23^3 +
                  18*s12*s23^4) + p1q^2*p2q^3*((-108*s12^4 - 324*s12^3*s13 -
                    576*s12^2*s13^2 - 360*s12*s13^3)*s23 + (162*s12^3 +
                    270*s12^2*s13 - 378*s12*s13^2 - 234*s13^3)*s23^2 +
                  (666*s12^2 + 900*s12*s13 + 54*s13^2)*s23^3 +
                  (396*s12 + 288*s13)*s23^4) + p1q^3*p2q^2*
                 ((54*s12^3*s13 + 81*s12^2*s13^2 + 36*s12*s13^3 + 9*s13^4)*
                   s23 + (342*s12^3 + 630*s12^2*s13 + 207*s12*s13^2 -
                    45*s13^3)*s23^2 + (531*s12^2 + 648*s12*s13 + 171*s13^2)*
                   s23^3 + (63*s12 + 99*s13)*s23^4 - 126*s23^5) +
                p1q^4*p2q*((54*s12^3 - 18*s12^2*s13 - 90*s12*s13^2 -
                    18*s13^3)*s23^2 + (108*s12^2 + 72*s12*s13 + 72*s13^2)*
                   s23^3 + (-18*s12 + 18*s13)*s23^4 - 72*s23^5) +
                p1q^5*((81*s12^2 + 90*s12*s13 + 9*s13^2)*s23^3 +
                  (45*s12 - 27*s13)*s23^4 - 36*s23^5)) +
              p3q^3*(p2q^3*(216*s12^5 - 576*s12^3*s13^2 - 288*s12^2*s13^3 +
                  72*s12*s13^4 + (432*s12^4 - 324*s12^3*s13 - 828*s12^2*
                     s13^2 - 36*s12*s13^3 + 36*s13^4)*s23 + (216*s12^3 -
                    360*s12^2*s13 - 180*s12*s13^2 + 36*s13^3)*s23^2 -
                  36*s12*s13*s23^3) + p1q*p2q^2*(144*s12^5 + 144*s12^4*s13 -
                  144*s12^3*s13^2 - 144*s12^2*s13^3 + (-243*s12^4 -
                    1044*s12^3*s13 - 972*s12^2*s13^2 - 144*s12*s13^3 +
                    27*s13^4)*s23 + (-909*s12^3 - 1503*s12^2*s13 - 549*s12*
                     s13^2 - 27*s13^3)*s23^2 + (-558*s12^2 - 360*s12*s13 -
                    54*s13^2)*s23^3 - 36*s12*s23^4) + p1q^2*p2q*
                 ((-144*s12^4 - 432*s12^3*s13 - 324*s12^2*s13^2 - 36*s12*
                     s13^3)*s23 + (-288*s12^3 - 468*s12^2*s13 - 72*s12*s13^2)*
                   s23^2 + (36*s12^2 + 252*s12*s13 + 108*s13^2)*s23^3 +
                  (180*s12 + 108*s13)*s23^4) + p1q^3*((45*s12^4 + 54*s12^3*
                     s13 + 9*s12^2*s13^2)*s23 + (-207*s12^3 - 297*s12^2*s13 -
                    54*s12*s13^2)*s23^2 + (-135*s12^2 + 72*s12*s13 + 9*s13^2)*
                   s23^3 + (99*s12 - 9*s13)*s23^4 - 18*s23^5)) +
              p3q^4*(p2q^2*(216*s12^5 + 288*s12^4*s13 - 72*s12^3*s13^2 -
                  144*s12^2*s13^3 + (432*s12^4 + 252*s12^3*s13 - 252*s12^2*
                     s13^2 - 72*s12*s13^3)*s23 + (234*s12^3 - 18*s12^2*s13 -
                    81*s12*s13^2 - 9*s13^3)*s23^2 + (18*s12^2 - 9*s13^2)*
                   s23^3) + p1q*p2q*(72*s12^5 + 144*s12^4*s13 + 72*s12^3*
                   s13^2 + (9*s12^4 - 216*s12^3*s13 - 279*s12^2*s13^2 -
                    54*s12*s13^3)*s23 + (-261*s12^3 - 495*s12^2*s13 -
                    126*s12*s13^2)*s23^2 + (-198*s12^2 - 54*s12*s13 +
                    18*s13^2)*s23^3 + 18*s13*s23^4) + p1q^2*
                 ((108*s12^4 + 144*s12^3*s13 + 36*s12^2*s13^2)*s23 +
                  (-45*s12^3 - 153*s12^2*s13 - 36*s12*s13^2)*s23^2 -
                  117*s12^2*s23^3 + (27*s12 - 9*s13)*s23^4 - 9*s23^5)) +
              p3q^2*(p2q^4*(72*s12^5 - 288*s12^4*s13 - 576*s12^3*s13^2 +
                  216*s12*s13^4 + (144*s12^4 - 684*s12^3*s13 - 612*s12^2*
                     s13^2 + 324*s12*s13^3 + 108*s13^4)*s23 +
                  (63*s12^3 - 405*s12^2*s13 + 18*s12*s13^2 + 126*s13^3)*
                   s23^2 + (-9*s12^2 + 18*s13^2)*s23^3) + p1q*p2q^3*
                 (72*s12^5 - 144*s12^4*s13 - 432*s12^3*s13^2 - 144*s12^2*
                   s13^3 + 72*s12*s13^4 + (-333*s12^4 - 1512*s12^3*s13 -
                    1620*s12^2*s13^2 - 396*s12*s13^3 + 45*s13^4)*s23 +
                  (-891*s12^3 - 1881*s12^2*s13 - 1215*s12*s13^2 - 153*s13^3)*
                   s23^2 + (-486*s12^2 - 540*s12*s13 - 234*s13^2)*s23^3 -
                  36*s13*s23^4) + p1q^3*p2q*((-27*s12^4 - 108*s12^3*s13 -
                    99*s12^2*s13^2 - 18*s12*s13^3)*s23 + (27*s12^3 -
                    117*s12^2*s13 - 126*s12*s13^2 - 18*s13^3)*s23^2 +
                  (261*s12^2 + 234*s12*s13 + 99*s13^2)*s23^3 +
                  (153*s12 + 63*s13)*s23^4 - 54*s23^5) + p1q^4*
                 ((-108*s12^3 - 126*s12^2*s13 - 18*s12*s13^2)*s23^2 +
                  (72*s12^2 + 180*s12*s13 + 18*s13^2)*s23^3 +
                  (153*s12 - 9*s13)*s23^4 - 27*s23^5) + p1q^2*p2q^2*
                 ((-360*s12^4 - 720*s12^3*s13 - 468*s12^2*s13^2 - 108*s12*
                     s13^3)*s23 + (-261*s12^3 - 243*s12^2*s13 - 189*s12*
                     s13^2 - 99*s13^3)*s23^2 + (531*s12^2 + 666*s12*s13 +
                    117*s13^2)*s23^3 + (450*s12 + 234*s13)*s23^4 +
                  18*s23^5)))*Log(s23/(s12 + s13 + s23)))/
            (p1q*p3q^5*(4*s12^4 + 4*s12^3*s13)*s23^2 + p1q*p2q^5*
              (4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 - 4*p1q^5*p2q*s12*s23^5 +
             p1q^2*p2q^4*((4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
               (-8*s12^2*s13 - 12*s12*s13^2)*s23^3) + p1q^3*p2q^3*
              ((-8*s12^2*s13 - 12*s12*s13^2)*s23^3 + (4*s12^2 + 12*s12*s13)*
                s23^4) + p1q^4*p2q^2*((4*s12^2 + 12*s12*s13)*s23^4 - 4*s12*
                s23^5) + p3q^4*(p1q*p2q*(12*s12^4 + 4*s12^3*s13 -
                 8*s12^2*s13^2)*s23^2 + p1q^2*((4*s12^4 + 4*s12^3*s13)*
                  s23^2 + (-12*s12^3 - 8*s12^2*s13)*s23^3)) +
             p3q^3*(p1q*p2q^2*(12*s12^4 - 12*s12^3*s13 - 20*s12^2*s13^2 +
                 4*s12*s13^3)*s23^2 + p1q^2*p2q*((8*s12^4 - 8*s12^2*s13^2)*
                  s23^2 + (-32*s12^3 - 24*s12^2*s13 - 8*s12*s13^2)*s23^3) +
               p1q^3*((-12*s12^3 - 8*s12^2*s13)*s23^3 + (12*s12^2 +
                   4*s12*s13)*s23^4)) + p3q*(p1q*p2q^4*(-8*s12^3*s13 +
                 4*s12^2*s13^2 + 12*s12*s13^3)*s23^2 - 4*p1q^5*s12*s23^5 +
               p1q^2*p2q^3*((-8*s12^3*s13 + 8*s12*s13^3)*s23^2 +
                 (-8*s12^3 - 24*s12^2*s13 - 32*s12*s13^2)*s23^3) + p1q^3*
                p2q^2*((-8*s12^3 - 16*s12^2*s13 - 20*s12*s13^2)*s23^3 +
                 (20*s12^2 + 28*s12*s13)*s23^4) + p1q^4*p2q*
                ((16*s12^2 + 16*s12*s13)*s23^4 - 8*s12*s23^5)) +
             p3q^2*(p1q*p2q^3*(4*s12^4 - 20*s12^3*s13 - 12*s12^2*s13^2 +
                 12*s12*s13^3)*s23^2 + p1q^2*p2q^2*((4*s12^4 - 12*s12^3*s13 -
                   12*s12^2*s13^2 + 4*s12*s13^3)*s23^2 + (-28*s12^3 -
                   32*s12^2*s13 - 28*s12*s13^2)*s23^3) + p1q^3*p2q*
                ((-20*s12^3 - 16*s12^2*s13 - 8*s12*s13^2)*s23^3 +
                 (28*s12^2 + 20*s12*s13)*s23^4) + p1q^4*
                ((12*s12^2 + 4*s12*s13)*s23^4 - 4*s12*s23^5)))) +
         Log(p2q/(p1q + p2q + p3q))*((-9*s12 - 9*s13 - 9*s23)/(2*s13*s23) +
           ((p3q^6*((-s12^4 - s12^3*s13)*s23^2 - s12^3*s23^3) +
              p2q^6*(-36*s12^2*s13^4 - 36*s12*s13^5 + (-36*s12^2*s13^3 -
                  108*s12*s13^4 - 36*s13^5)*s23 + (-71*s12*s13^3 - 71*s13^4)*
                 s23^2 + (s12*s13^2 - 34*s13^3)*s23^3 + s13^2*s23^4) +
              p1q*p2q^5*(-72*s12^2*s13^4 - 72*s12*s13^5 + (-36*s12^2*s13^3 -
                  180*s12*s13^4 - 72*s13^5)*s23 + (33*s12^2*s13^2 -
                  41*s12*s13^3 - 110*s13^4)*s23^2 + (66*s12*s13^2 - 5*s13^3)*
                 s23^3 + (-2*s12*s13 + 31*s13^2)*s23^4 - 2*s13*s23^5) +
              p1q^4*p2q^2*((-54*s12^2*s13^2 - 72*s12*s13^3 - 18*s13^4)*
                 s23^2 + (2*s12^3 - 44*s12^2*s13 - 164*s12*s13^2 - 82*s13^3)*
                 s23^3 + (-103*s12*s13 - 119*s13^2)*s23^4 + (-7*s12 - 60*s13)*
                 s23^5 - 5*s23^6) + p1q^5*p2q*((-3*s12^2 - 7*s12*s13 -
                  4*s13^2)*s23^4 + (-6*s12 - 7*s13)*s23^5 - 3*s23^6) +
              p1q^3*p2q^3*((72*s12^3*s13^2 + 198*s12^2*s13^3 + 144*s12*
                   s13^4 + 18*s13^5)*s23 + (70*s12^3*s13 + 281*s12^2*s13^2 +
                  351*s12*s13^3 + 104*s13^4)*s23^2 + (2*s12^3 + 100*s12^2*
                   s13 + 196*s12*s13^2 + 115*s13^3)*s23^3 +
                (3*s12^2 - 17*s12*s13 - 17*s13^2)*s23^4 - 47*s13*s23^5 -
                s23^6) + p1q^2*p2q^4*(-36*s12^2*s13^4 - 36*s12*s13^5 +
                (72*s12^3*s13^2 + 198*s12^2*s13^3 + 72*s12*s13^4 - 18*s13^5)*
                 s23 + (70*s12^3*s13 + 368*s12^2*s13^2 + 453*s12*s13^3 +
                  83*s13^4)*s23^2 + (144*s12^2*s13 + 425*s12*s13^2 +
                  226*s13^3)*s23^3 + (77*s12*s13 + 128*s13^2)*s23^4 +
                (s12 + 4*s13)*s23^5 + s23^6) + p3q^5*(p2q*(36*s12^5*s13 +
                  36*s12^4*s13^2 + (72*s12^4*s13 + 36*s12^3*s13^2)*s23 +
                  (s12^4 + 40*s12^3*s13 + 3*s12^2*s13^2)*s23^2 +
                  (2*s12^3 + 4*s12^2*s13)*s23^3 + s12^2*s23^4) +
                p1q*((-s12^4 - s12^3*s13)*s23^2 + (2*s12^3 + 3*s12^2*s13)*
                   s23^3 + 3*s12^2*s23^4)) + p3q^4*(p2q^2*(72*s12^5*s13 -
                  36*s12^4*s13^2 - 108*s12^3*s13^3 + (108*s12^4*s13 -
                    180*s12^3*s13^2 - 108*s12^2*s13^3)*s23 +
                  (s12^4 - 2*s12^3*s13 - 150*s12^2*s13^2 - 3*s12*s13^3)*
                   s23^2 + (-42*s12^2*s13 - 5*s12*s13^2)*s23^3 +
                  (-s12^2 - 2*s12*s13)*s23^4) + p1q^2*((-3*s12^4 - 7*s12^3*
                     s13 - 4*s12^2*s13^2)*s23^2 + (-3*s12^3 - 4*s12^2*s13)*
                   s23^3 + (-3*s12^2 - 3*s12*s13)*s23^4 - 3*s12*s23^5) +
                p1q*p2q*(36*s12^5*s13 - 36*s12^3*s13^3 + (-36*s12^4*s13 -
                    180*s12^3*s13^2 - 72*s12^2*s13^3)*s23 +
                  (-s12^4 - 185*s12^3*s13 - 184*s12^2*s13^2)*s23^2 +
                  (-2*s12^3 - 115*s12^2*s13 - 2*s12*s13^2)*s23^3 +
                  (-3*s12^2 - 4*s12*s13)*s23^4 - 2*s12*s23^5)) +
              p3q*(p2q^5*(108*s12^3*s13^3 + 36*s12^2*s13^4 - 72*s12*s13^5 +
                  (72*s12^3*s13^2 + 216*s12^2*s13^3 - 108*s12*s13^4 -
                    72*s13^5)*s23 + (141*s12^2*s13^2 + 32*s12*s13^3 -
                    145*s13^4)*s23^2 + (-2*s12^2*s13 + 66*s12*s13^2 -
                    74*s13^3)*s23^3 + (-2*s12*s13 - s13^2)*s23^4) +
                p1q*p2q^4*(180*s12^3*s13^3 + 72*s12^2*s13^4 - 108*s12*s13^5 +
                  (216*s12^3*s13^2 + 612*s12^2*s13^3 - 108*s13^5)*s23 +
                  (110*s12^3*s13 + 687*s12^2*s13^2 + 537*s12*s13^3 -
                    148*s13^4)*s23^2 + (224*s12^2*s13 + 548*s12*s13^2 +
                    33*s13^3)*s23^3 + (-2*s12^2 + 114*s12*s13 + 75*s13^2)*
                   s23^4 + (-2*s12 + 2*s13)*s23^5) + p1q^4*p2q*
                 ((-54*s12^2*s13^2 - 72*s12*s13^3 - 18*s13^4)*s23^2 +
                  (8*s12^3 - 30*s12^2*s13 - 156*s12*s13^2 - 82*s13^3)*s23^3 +
                  (9*s12^2 - 96*s12*s13 - 123*s13^2)*s23^4 +
                  (-6*s12 - 66*s13)*s23^5 - 7*s23^6) + p1q^3*p2q^2*
                 ((90*s12^3*s13^2 + 198*s12^2*s13^3 + 126*s12*s13^4 +
                    18*s13^5)*s23 + (-2*s12^4 + 140*s12^3*s13 + 321*s12^2*
                     s13^2 + 247*s12*s13^3 + 68*s13^4)*s23^2 +
                  (8*s12^3 + 200*s12^2*s13 + 64*s12*s13^2 - 23*s13^3)*s23^3 +
                  (19*s12^2 - 65*s12*s13 - 195*s13^2)*s23^4 +
                  (4*s12 - 127*s13)*s23^5 - 5*s23^6) + p1q^5*
                 ((-3*s12^2 - 7*s12*s13 - 4*s13^2)*s23^4 + (-6*s12 - 7*s13)*
                   s23^5 - 3*s23^6) + p1q^2*p2q^3*(72*s12^3*s13^3 +
                  36*s12^2*s13^4 - 36*s12*s13^5 + (-72*s12^4*s13 + 72*s12^3*
                     s13^2 + 486*s12^2*s13^3 + 216*s12*s13^4 - 18*s13^5)*
                   s23 + (2*s12^4 + 60*s12^3*s13 + 635*s12^2*s13^2 +
                    730*s12*s13^3 + 81*s13^4)*s23^2 + (12*s12^3 + 288*s12^2*
                     s13 + 570*s12*s13^2 + 160*s13^3)*s23^3 +
                  (15*s12^2 + 86*s12*s13 - 6*s13^2)*s23^4 + (4*s12 - 68*s13)*
                   s23^5 - s23^6)) + p3q^2*(p2q^4*(-108*s12^4*s13^2 +
                  108*s12^3*s13^3 + 180*s12^2*s13^4 - 36*s12*s13^5 +
                  (-36*s12^4*s13 - 108*s12^3*s13^2 + 432*s12^2*s13^3 +
                    108*s12*s13^4 - 36*s13^5)*s23 + (-69*s12^3*s13 +
                    150*s12^2*s13^2 + 290*s12*s13^3 - 73*s13^4)*s23^2 +
                  (s12^3 - 30*s12^2*s13 + 148*s12*s13^2 - 38*s13^3)*s23^3 +
                  (s12^2 + 2*s12*s13 - s13^2)*s23^4) + p1q*p2q^3*
                 (-144*s12^4*s13^2 + 108*s12^3*s13^3 + 216*s12^2*s13^4 -
                  36*s12*s13^5 + (-180*s12^4*s13 - 252*s12^3*s13^2 +
                    612*s12^2*s13^3 + 180*s12*s13^4 - 72*s13^5)*s23 +
                  (s12^4 - 215*s12^3*s13 + 407*s12^2*s13^2 + 585*s12*s13^3 -
                    146*s13^4)*s23^2 + (6*s12^3 + 127*s12^2*s13 + 532*s12*
                     s13^2 - 71*s13^3)*s23^3 + (7*s12^2 + 162*s12*s13 +
                    5*s13^2)*s23^4 + (2*s12 + 2*s13)*s23^5) + p1q^3*p2q*
                 ((90*s12^3*s13^2 + 144*s12^2*s13^3 + 54*s12*s13^4)*s23 +
                  (-5*s12^4 + 135*s12^3*s13 + 360*s12^2*s13^2 + 184*s12*
                     s13^3)*s23^2 + (6*s12^3 + 287*s12^2*s13 + 236*s12*
                     s13^2 - 30*s13^3)*s23^3 + (22*s12^2 + 107*s12*s13 -
                    70*s13^2)*s23^4 + (8*s12 - 43*s13)*s23^5 - 3*s23^6) +
                p1q^4*((6*s12^3 + 14*s12^2*s13 + 8*s12*s13^2)*s23^3 +
                  (9*s12^2 + 7*s12*s13 - 4*s13^2)*s23^4 + (s12 - 6*s13)*
                   s23^5 - 2*s23^6) + p1q^2*p2q^2*(-36*s12^4*s13^2 +
                  36*s12^3*s13^3 + 72*s12^2*s13^4 + (-126*s12^4*s13 +
                    414*s12^2*s13^3 + 144*s12*s13^4 - 36*s13^5)*s23 +
                  (-4*s12^4 + 49*s12^3*s13 + 698*s12^2*s13^2 + 499*s12*
                     s13^3 - 74*s13^4)*s23^2 + (3*s12^3 + 488*s12^2*s13 +
                    631*s12*s13^2 - 66*s13^3)*s23^3 + (18*s12^2 + 278*s12*
                     s13 - 63*s13^2)*s23^4 + (10*s12 - 36*s13)*s23^5 -
                  s23^6)) + p3q^3*(p2q^3*(36*s12^5*s13 - 180*s12^4*s13^2 -
                  108*s12^3*s13^3 + 108*s12^2*s13^4 + (-396*s12^3*s13^2 +
                    72*s12^2*s13^3 + 108*s12*s13^4)*s23 + (-s12^4 -
                    112*s12^3*s13 - 144*s12^2*s13^2 + 184*s12*s13^3 + s13^4)*
                   s23^2 + (-2*s12^3 - 74*s12^2*s13 + 78*s12*s13^2 + 2*s13^3)*
                   s23^3 + (-s12^2 + 2*s12*s13 + s13^2)*s23^4) +
                p1q*p2q^2*(36*s12^5*s13 - 144*s12^4*s13^2 - 108*s12^3*s13^3 +
                  72*s12^2*s13^4 + (-180*s12^4*s13 - 504*s12^3*s13^2 +
                    108*s12^2*s13^3 + 144*s12*s13^4)*s23 +
                  (s12^4 - 401*s12^3*s13 - 107*s12^2*s13^2 + 331*s12*s13^3)*
                   s23^2 + (2*s12^3 - 107*s12^2*s13 + 264*s12*s13^2 - s13^3)*
                   s23^3 + (3*s12^2 + 78*s12*s13 - 3*s13^2)*s23^4 +
                  (2*s12 - 2*s13)*s23^5) + p1q^2*p2q*(-36*s12^4*s13^2 -
                  36*s12^3*s13^3 + (-126*s12^4*s13 - 180*s12^3*s13^2 +
                    18*s12^2*s13^3 + 36*s12*s13^4)*s23 + (-9*s12^4 -
                    164*s12^3*s13 + 67*s12^2*s13^2 + 150*s12*s13^3)*s23^2 +
                  (-12*s12^3 + 88*s12^2*s13 + 234*s12*s13^2)*s23^3 +
                  (122*s12*s13 - s13^2)*s23^4 + 4*s12*s23^5 + s23^6) +
                p1q^3*((-3*s12^4 - 7*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
                  (7*s12^2*s13 + 8*s12*s13^2)*s23^3 + (6*s12^2 + 11*s12*s13)*
                   s23^4 + (4*s12 + s13)*s23^5 + s23^6)))*
             Log((p1q + p2q)/(p1q + p2q + p3q)))/(4*p1q*p3q^5*s12^4*s13*
              s23^2 + p1q*p2q^5*(-4*s12*s13^4*s23^2 - 4*s12*s13^3*s23^3) +
             p1q^2*p2q^4*(-8*s12*s13^4*s23^2 + 8*s12*s13^2*s23^4) +
             p1q^4*p2q^2*(8*s12*s13^3*s23^3 - 8*s12*s13*s23^5) +
             p1q^5*p2q*(-4*s12*s13^2*s23^4 - 4*s12*s13*s23^5) +
             p1q^3*p2q^3*(-4*s12*s13^4*s23^2 + 12*s12*s13^3*s23^3 + 12*s12*
                s13^2*s23^4 - 4*s12*s13*s23^5) +
             p3q^4*(p1q^2*((4*s12^4*s13 - 4*s12^3*s13^2)*s23^2 - 12*s12^3*s13*
                  s23^3) + p1q*p2q*((8*s12^4*s13 - 12*s12^3*s13^2)*s23^2 -
                 4*s12^3*s13*s23^3)) + p3q^3*(p1q*p2q^2*
                ((4*s12^4*s13 - 24*s12^3*s13^2 + 12*s12^2*s13^3)*s23^2 +
                 (-8*s12^3*s13 + 8*s12^2*s13^2)*s23^3) + p1q^2*p2q*
                ((4*s12^4*s13 - 20*s12^3*s13^2 + 8*s12^2*s13^3)*s23^2 +
                 (-28*s12^3*s13 + 8*s12^2*s13^2)*s23^3 + 8*s12^2*s13*s23^4) +
               p1q^3*(-4*s12^3*s13^2*s23^2 + (-12*s12^3*s13 + 8*s12^2*s13^2)*
                  s23^3 + 12*s12^2*s13*s23^4)) + p3q*(p1q*p2q^4*
                ((12*s12^2*s13^3 - 8*s12*s13^4)*s23^2 + (8*s12^2*s13^2 -
                   8*s12*s13^3)*s23^3) + p1q^2*p2q^3*((20*s12^2*s13^3 -
                   12*s12*s13^4)*s23^2 + (16*s12^2*s13^2 + 4*s12*s13^3)*
                  s23^3 + (8*s12^2*s13 + 16*s12*s13^2)*s23^4) + p1q^4*p2q*
                ((8*s12^2*s13^2 + 8*s12*s13^3)*s23^3 + (12*s12^2*s13 -
                   4*s12*s13^2)*s23^4 - 12*s12*s13*s23^5) + p1q^3*p2q^2*
                ((8*s12^2*s13^3 - 4*s12*s13^4)*s23^2 + (16*s12^2*s13^2 +
                   20*s12*s13^3)*s23^3 + (20*s12^2*s13 + 16*s12*s13^2)*
                  s23^4 - 8*s12*s13*s23^5) + p1q^5*(-4*s12*s13^2*s23^4 -
                 4*s12*s13*s23^5)) + p3q^2*(p1q*p2q^3*((-12*s12^3*s13^2 +
                   24*s12^2*s13^3 - 4*s12*s13^4)*s23^2 + (-4*s12^3*s13 +
                   16*s12^2*s13^2 - 4*s12*s13^3)*s23^3) + p1q^2*p2q^2*
                ((-16*s12^3*s13^2 + 28*s12^2*s13^3 - 4*s12*s13^4)*s23^2 +
                 (-16*s12^3*s13 + 24*s12^2*s13^2 + 4*s12*s13^3)*s23^3 +
                 (16*s12^2*s13 + 8*s12*s13^2)*s23^4) + p1q^4*
                (8*s12^2*s13^2*s23^3 + (12*s12^2*s13 - 4*s12*s13^2)*s23^4 -
                 4*s12*s13*s23^5) + p1q^3*p2q*((-4*s12^3*s13^2 + 8*s12^2*
                    s13^3)*s23^2 + (-12*s12^3*s13 + 24*s12^2*s13^2 +
                   8*s12*s13^3)*s23^3 + (32*s12^2*s13 + 4*s12*s13^2)*s23^4 -
                 4*s12*s13*s23^5))) + ((p2q^5*(-18*s12*s13^3 - 18*s13^4 -
                18*s13^3*s23) + p1q*p2q^4*(-18*s12*s13^3 - 18*s13^4 +
                (36*s12*s13^2 + 18*s13^3)*s23 + 36*s13^2*s23^2) +
              p1q^3*p2q^2*((-9*s12^2 - 45*s12*s13 - 36*s13^2)*s23^2 +
                (-9*s12 - 36*s13)*s23^3) + p1q^2*p2q^3*((9*s12^2*s13 +
                  54*s12*s13^2 + 45*s13^3)*s23 + (-9*s12*s13 + 27*s13^2)*
                 s23^2 - 18*s13*s23^3) + p1q^4*p2q*((9*s12 + 9*s13)*s23^3 +
                9*s23^4) + p3q^4*(p2q*(-18*s12^3*s13 - 18*s12^2*s13^2 -
                  18*s12^2*s13*s23) + p1q*((18*s12^3 + 36*s12^2*s13 +
                    18*s12*s13^2)*s23 + (36*s12^2 + 36*s12*s13)*s23^2 +
                  18*s12*s23^3)) + p3q^3*(p2q^2*(-36*s12^3*s13 +
                  36*s12*s13^3 + (-36*s12^2*s13 + 36*s12*s13^2)*s23) +
                p1q*p2q*(-18*s12^3*s13 - 18*s12^2*s13^2 + (36*s12^3 +
                    36*s12^2*s13 - 18*s13^3)*s23 + (72*s12^2 + 36*s12*s13 -
                    36*s13^2)*s23^2 + (36*s12 - 18*s13)*s23^3) +
                p1q^2*((18*s12^3 + 36*s12^2*s13 + 18*s12*s13^2)*s23 +
                  (9*s12^2 - 9*s12*s13 - 18*s13^2)*s23^2 + (-27*s12 - 36*s13)*
                   s23^3 - 18*s23^4)) + p3q^2*(p2q^3*(-18*s12^3*s13 +
                  54*s12^2*s13^2 + 54*s12*s13^3 - 18*s13^4 + (-18*s12^2*s13 +
                    72*s12*s13^2 - 18*s13^3)*s23) + p1q*p2q^2*
                 (-18*s12^3*s13 + 18*s12^2*s13^2 + 36*s12*s13^3 +
                  (36*s12^3 + 54*s12^2*s13 + 108*s12*s13^2 + 36*s13^3)*s23 +
                  (72*s12^2 + 72*s12*s13 + 36*s13^2)*s23^2 + 36*s12*s23^3) +
                p1q^2*p2q*((27*s12^3 + 72*s12^2*s13 + 63*s12*s13^2 +
                    18*s13^3)*s23 + (36*s12^2 + 45*s12*s13 + 9*s13^2)*s23^2 +
                  (9*s12 - 9*s13)*s23^3) + p1q^3*((-27*s12^2 - 45*s12*s13 -
                    18*s13^2)*s23^2 + (-36*s12 - 27*s13)*s23^3 - 9*s23^4)) +
              p3q*(p2q^4*(36*s12^2*s13^2 - 36*s13^4 + (36*s12*s13^2 -
                    36*s13^3)*s23) + p1q*p2q^3*(36*s12^2*s13^2 +
                  18*s12*s13^3 - 18*s13^4 + (108*s12*s13^2 + 54*s13^3)*s23 +
                  72*s13^2*s23^2) + p1q^2*p2q^2*((27*s12^3 + 63*s12^2*s13 +
                    81*s12*s13^2 + 45*s13^3)*s23 + (45*s12^2 + 9*s12*s13)*
                   s23^2 + (18*s12 - 45*s13)*s23^3) + p1q^3*p2q*
                 ((-18*s12^2 - 54*s12*s13 - 36*s13^2)*s23^2 +
                  (-9*s12 - 27*s13)*s23^3 + 9*s23^4) + p1q^4*
                 ((9*s12 + 9*s13)*s23^3 + 9*s23^4)))*Log(p3q/(p1q + p2q +
                p3q)))/(2*p1q*p3q^4*s12^2*s13*s23^2 + 2*p1q*p2q^4*s13^3*
              s23^2 + 2*p1q^4*p2q*s13*s23^4 + p1q^2*p2q^3*(2*s13^3*s23^2 - 4*
                s13^2*s23^3) + p1q^3*p2q^2*(-4*s13^2*s23^3 + 2*s13*s23^4) +
             p3q^3*(p1q*p2q*(4*s12^2*s13 - 4*s12*s13^2)*s23^2 + p1q^2*
                (2*s12^2*s13*s23^2 - 4*s12*s13*s23^3)) +
             p3q^2*(p1q*p2q^2*(2*s12^2*s13 - 8*s12*s13^2 + 2*s13^3)*s23^2 +
               p1q^2*p2q*((2*s12^2*s13 - 4*s12*s13^2)*s23^2 +
                 (-8*s12*s13 - 4*s13^2)*s23^3) + p1q^3*(-4*s12*s13*s23^3 +
                 2*s13*s23^4)) + p3q*(p1q*p2q^3*(-4*s12*s13^2 + 4*s13^3)*
                s23^2 + 2*p1q^4*s13*s23^4 + p1q^2*p2q^2*
                ((-4*s12*s13^2 + 2*s13^3)*s23^2 + (-4*s12*s13 - 8*s13^2)*
                  s23^3) + p1q^3*p2q*((-4*s12*s13 - 4*s13^2)*s23^3 +
                 4*s13*s23^4))) + ((p2q^6*(36*s12^2*s13^4 + 36*s12*s13^5 +
                (-9*s12^2*s13^3 + 27*s12*s13^4)*s23 + (-10*s12*s13^3 - s13^4)*
                 s23^2 - s13^3*s23^3) + p3q^6*((-9*s12^4*s13 - 9*s12^3*s13^2)*
                 s23 + (s12^4 - 8*s12^3*s13)*s23^2 + (2*s12^3 + s12^2*s13)*
                 s23^3 + s12^2*s23^4) + p1q*p2q^5*(-36*s12^3*s13^3 +
                36*s12*s13^5 + (-153*s12^2*s13^3 - 81*s12*s13^4)*s23 +
                (27*s12^2*s13^2 - 95*s12*s13^3 - 5*s13^4)*s23^2 +
                (30*s12*s13^2 - 2*s13^3)*s23^3 + 3*s13^2*s23^4) +
              p1q^6*((-9*s12^3 - 18*s12^2*s13 - 9*s12*s13^2)*s23^3 +
                (-18*s12^2 - 18*s12*s13)*s23^4 - 9*s12*s23^5) +
              p1q^2*p2q^4*(-36*s12^3*s13^3 - 36*s12^2*s13^4 +
                (9*s12^3*s13^2 - 189*s12^2*s13^3 - 162*s12*s13^4)*s23 +
                (146*s12^2*s13^2 - 30*s12*s13^3 - 5*s13^4)*s23^2 +
                (-27*s12^2*s13 + 122*s12*s13^2 + 7*s13^3)*s23^3 +
                (-30*s12*s13 + 9*s13^2)*s23^4 - 3*s13*s23^5) +
              p1q^3*p2q^3*((54*s12^4*s13 + 162*s12^3*s13^2 + 99*s12^2*s13^3 -
                  9*s12*s13^4)*s23 + (110*s12^3*s13 + 413*s12^2*s13^2 +
                  241*s12*s13^3 + s13^4)*s23^2 + (-7*s12^2*s13 + 201*s12*
                   s13^2 + 16*s13^3)*s23^3 + (9*s12^2 - 63*s12*s13 + 6*s13^2)*
                 s23^4 + (10*s12 - 8*s13)*s23^5 + s23^6) + p1q^4*p2q^2*(
                (-9*s12^3*s13^2 - 18*s12^2*s13^3 - 9*s12*s13^4)*s23 +
                (-18*s12^4 - 108*s12^3*s13 - 90*s12^2*s13^2)*s23^2 +
                (-47*s12^3 - 273*s12^2*s13 - 147*s12*s13^2 - 2*s13^3)*s23^3 +
                (-22*s12^2 - 162*s12*s13 - 17*s13^2)*s23^4 + (9*s12 - 13*s13)*
                 s23^5 + 2*s23^6) + p1q^5*p2q*((18*s12^3*s13 + 36*s12^2*
                   s13^2 + 18*s12*s13^3)*s23^2 + (18*s12^3 + 45*s12^2*s13 +
                  27*s12*s13^2)*s23^3 + (49*s12^2 + 41*s12*s13 + s13^2)*
                 s23^4 + (36*s12 + 6*s13)*s23^5 + 5*s23^6) +
              p3q^5*(p2q*(-36*s12^5*s13 - 36*s12^4*s13^2 + (-36*s12^5 -
                    144*s12^4*s13 - 54*s12^3*s13^2 + 18*s12^2*s13^3)*s23 +
                  (-73*s12^4 - 112*s12^3*s13 + 15*s12^2*s13^2)*s23^2 +
                  (-38*s12^3 - 6*s12^2*s13 - 2*s12*s13^2)*s23^3 +
                  (-s12^2 - 2*s12*s13)*s23^4) + p1q*((27*s12^5 + 9*s12^4*
                     s13 - 18*s12^3*s13^2)*s23 + (69*s12^4 + 43*s12^3*s13 +
                    19*s12^2*s13^2)*s23^2 + (47*s12^3 + 24*s12^2*s13)*s23^3 +
                  (3*s12^2 - 2*s12*s13)*s23^4 - 2*s12*s23^5)) +
              p3q^4*(p2q^2*(-72*s12^5*s13 + 36*s12^4*s13^2 + 108*s12^3*
                   s13^3 + (-36*s12^5 - 126*s12^4*s13 + 234*s12^3*s13^2 +
                    135*s12^2*s13^3 - 9*s12*s13^4)*s23 + (-73*s12^4 +
                    20*s12^3*s13 + 222*s12^2*s13^2 - 6*s12*s13^3)*s23^2 +
                  (-38*s12^3 + 76*s12^2*s13 + 6*s12*s13^2 + s13^3)*s23^3 +
                  (-s12^2 + 2*s12*s13 + s13^2)*s23^4) + p1q*p2q*
                 (-72*s12^5*s13 - 72*s12^4*s13^2 + (18*s12^5 - 189*s12^4*
                     s13 - 99*s12^3*s13^2 + 36*s12^2*s13^3)*s23 +
                  (143*s12^4 + 51*s12^3*s13 + 113*s12^2*s13^2 + 16*s12*s13^3)*
                   s23^2 + (210*s12^3 + 136*s12^2*s13 + 6*s12*s13^2)*s23^3 +
                  (87*s12^2 - 10*s12*s13 - 2*s13^2)*s23^4 + (2*s12 - 2*s13)*
                   s23^5) + p1q^2*((45*s12^5 + 27*s12^4*s13 - 18*s12^3*s13^2)*
                   s23 + (63*s12^4 + 38*s12^3*s13 + 38*s12^2*s13^2)*s23^2 +
                  (-55*s12^3 - 46*s12^2*s13 - 11*s12*s13^2)*s23^3 +
                  (-86*s12^2 - 24*s12*s13)*s23^4 + (-12*s12 + s13)*s23^5 +
                  s23^6)) + p3q^3*(p2q^3*(-36*s12^5*s13 + 180*s12^4*s13^2 +
                  108*s12^3*s13^3 - 108*s12^2*s13^4 + (396*s12^3*s13^2 -
                    36*s12^2*s13^3 - 72*s12*s13^4)*s23 + (s12^4 + 112*s12^3*
                     s13 + 180*s12^2*s13^2 - 112*s12*s13^3 - s13^4)*s23^2 +
                  (2*s12^3 + 78*s12^2*s13 - 38*s12*s13^2 - 2*s13^3)*s23^3 +
                  (s12^2 + 2*s12*s13 - s13^2)*s23^4) + p1q*p2q^2*
                 (-108*s12^5*s13 + 72*s12^4*s13^2 + 180*s12^3*s13^3 +
                  (-9*s12^5 - 189*s12^4*s13 + 441*s12^3*s13^2 + 315*s12^2*
                     s13^3 - 18*s12*s13^4)*s23 + (83*s12^4 + 205*s12^3*s13 +
                    710*s12^2*s13^2 + 175*s12*s13^3 + s13^4)*s23^2 +
                  (171*s12^3 + 326*s12^2*s13 + 267*s12*s13^2 + 14*s13^3)*
                   s23^3 + (81*s12^2 + 66*s12*s13 + 15*s13^2)*s23^4 +
                  (2*s12 + 2*s13)*s23^5) + p1q^2*p2q*(-36*s12^5*s13 -
                  36*s12^4*s13^2 + (90*s12^5 + 72*s12^4*s13 + 126*s12^3*
                     s13^2 + 108*s12^2*s13^3)*s23 + (231*s12^4 + 366*s12^3*
                     s13 + 423*s12^2*s13^2 + 108*s12*s13^3)*s23^2 +
                  (58*s12^3 + 38*s12^2*s13 + 24*s12*s13^2 + 2*s13^3)*s23^3 +
                  (-138*s12^2 - 152*s12*s13 - 9*s13^2)*s23^4 +
                  (-56*s12 - 12*s13)*s23^5 - s23^6) + p1q^3*
                 ((9*s12^5 - 9*s12^4*s13 - 18*s12^3*s13^2)*s23 +
                  (-59*s12^4 - 49*s12^3*s13 + 37*s12^2*s13^2)*s23^2 +
                  (-180*s12^3 - 97*s12^2*s13 - 22*s12*s13^2)*s23^3 +
                  (-92*s12^2 - s12*s13 + s13^2)*s23^4 + (27*s12 + 8*s13)*
                   s23^5 + 7*s23^6)) + p3q^2*(p2q^4*(108*s12^4*s13^2 -
                  108*s12^3*s13^3 - 180*s12^2*s13^4 + 36*s12*s13^5 +
                  (-9*s12^4*s13 + 135*s12^3*s13^2 - 270*s12^2*s13^3 -
                    54*s12*s13^4)*s23 + (-12*s12^3*s13 - 6*s12^2*s13^2 -
                    128*s12*s13^3 + s13^4)*s23^2 + (-5*s12^2*s13 -
                    42*s12*s13^2)*s23^3 + (-2*s12*s13 - s13^2)*s23^4) +
                p1q*p2q^3*(-36*s12^5*s13 + 216*s12^4*s13^2 + 108*s12^3*
                   s13^3 - 144*s12^2*s13^4 + (9*s12^4*s13 + 675*s12^3*s13^2 +
                    9*s12^2*s13^3 - 225*s12*s13^4)*s23 + (9*s12^4 +
                    197*s12^3*s13 + 728*s12^2*s13^2 - 25*s12*s13^3 - 7*s13^4)*
                   s23^2 + (8*s12^3 + 212*s12^2*s13 + 290*s12*s13^2 +
                    6*s13^3)*s23^3 + (-3*s12^2 + 70*s12*s13 + 15*s13^2)*
                   s23^4 + (-2*s12 + 2*s13)*s23^5) + p1q^2*p2q^2*
                 (-36*s12^5*s13 + 36*s12^4*s13^2 + 72*s12^3*s13^3 +
                  (45*s12^5 + 63*s12^4*s13 + 387*s12^3*s13^2 + 171*s12^2*
                     s13^3 - 90*s12*s13^4)*s23 + (168*s12^4 + 382*s12^3*s13 +
                    832*s12^2*s13^2 + 274*s12*s13^3 - 2*s13^4)*s23^2 +
                  (95*s12^3 + 61*s12^2*s13 + 273*s12*s13^2 + 21*s13^3)*
                   s23^3 + (-71*s12^2 - 172*s12*s13 + 10*s13^2)*s23^4 +
                  (-44*s12 - 14*s13)*s23^5 - s23^6) + p1q^3*p2q*
                 ((36*s12^5 + 135*s12^4*s13 + 207*s12^3*s13^2 + 108*s12^2*
                     s13^3)*s23 + (-39*s12^4 + 113*s12^3*s13 + 307*s12^2*
                     s13^2 + 110*s12*s13^3)*s23^2 + (-308*s12^3 - 387*s12^2*
                     s13 - 133*s12*s13^2)*s23^3 + (-252*s12^2 - 285*s12*s13 -
                    23*s13^2)*s23^4 + (-12*s12 - 16*s13)*s23^5 + 7*s23^6) +
                p1q^4*((-9*s12^5 - 18*s12^4*s13 - 9*s12^3*s13^2)*s23 +
                  (-36*s12^4 + 36*s12^2*s13^2)*s23^2 + (-26*s12^3 +
                    17*s12^2*s13 - 20*s12*s13^2)*s23^3 + (63*s12^2 +
                    44*s12*s13 + 2*s13^2)*s23^4 + (73*s12 + 13*s13)*s23^5 +
                  11*s23^6)) + p3q*(p2q^5*(-108*s12^3*s13^3 - 36*s12^2*
                   s13^4 + 72*s12*s13^5 + (18*s12^3*s13^2 - 126*s12^2*s13^3 +
                    36*s12*s13^4)*s23 + (21*s12^2*s13^2 - 32*s12*s13^3 +
                    s13^4)*s23^2 + (4*s12*s13^2 + 2*s13^3)*s23^3 +
                  s13^2*s23^4) + p1q*p2q^4*(72*s12^4*s13^2 - 108*s12^3*
                   s13^3 - 144*s12^2*s13^4 + 36*s12*s13^5 +
                  (153*s12^3*s13^2 - 423*s12^2*s13^3 - 288*s12*s13^4)*s23 +
                  (139*s12^2*s13^2 - 279*s12*s13^3 - 13*s13^4)*s23^2 +
                  (-2*s12^2*s13 + 59*s12*s13^2 - 10*s13^3)*s23^3 +
                  (-4*s12*s13 + s13^2)*s23^4 - 2*s13*s23^5) + p1q^3*p2q^2*
                 ((18*s12^5 + 90*s12^4*s13 + 189*s12^3*s13^2 + 99*s12^2*
                     s13^3 - 18*s12*s13^4)*s23 + (2*s12^4 + 2*s12^3*s13 +
                    341*s12^2*s13^2 + 261*s12*s13^3 + s13^4)*s23^2 +
                  (-137*s12^3 - 531*s12^2*s13 - 63*s12*s13^2 + 16*s13^3)*
                   s23^3 + (-151*s12^2 - 419*s12*s13 - 18*s13^2)*s23^4 +
                  (-29*s12 - 32*s13)*s23^5 + s23^6) + p1q^2*p2q^3*
                 (72*s12^4*s13^2 + 36*s12^3*s13^3 - 36*s12^2*s13^4 +
                  (90*s12^4*s13 + 468*s12^3*s13^2 + 90*s12^2*s13^3 -
                    180*s12*s13^4)*s23 + (270*s12^3*s13 + 1025*s12^2*s13^2 +
                    352*s12*s13^3 - 7*s13^4)*s23^2 + (-18*s12^3 + 166*s12^2*
                     s13 + 576*s12*s13^2 + 26*s13^3)*s23^3 + (-19*s12^2 -
                    2*s12*s13 + 28*s13^2)*s23^4 - 4*s13*s23^5 + s23^6) +
                p1q^5*((18*s12^4 + 36*s12^3*s13 + 18*s12^2*s13^2)*s23^2 +
                  (45*s12^3 + 27*s12^2*s13 - 18*s12*s13^2)*s23^3 +
                  (49*s12^2 + 5*s12*s13 + s13^2)*s23^4 + (27*s12 + 6*s13)*
                   s23^5 + 5*s23^6) + p1q^4*p2q*((18*s12^4*s13 + 36*s12^3*
                     s13^2 + 18*s12^2*s13^3)*s23 + (-54*s12^4 - 72*s12^3*
                     s13 + 18*s12^2*s13^2 + 36*s12*s13^3)*s23^2 +
                  (-100*s12^3 - 238*s12^2*s13 - 122*s12*s13^2 - 2*s13^3)*
                   s23^3 + (23*s12^2 - 100*s12*s13 - 15*s13^2)*s23^4 +
                  82*s12*s23^5 + 13*s23^6)))*Log((p1q + p3q)/(p1q + p2q +
                p3q)))/(-4*p1q*p2q^5*s12*s13^4*s23^2 + p1q*p3q^5*
              (4*s12^4*s13*s23^2 + 4*s12^3*s13*s23^3) + p1q^2*p2q^4*
              ((4*s12^2*s13^3 - 4*s12*s13^4)*s23^2 + 12*s12*s13^3*s23^3) +
             p1q^3*p2q^3*(4*s12^2*s13^3*s23^2 + (-8*s12^2*s13^2 +
                 12*s12*s13^3)*s23^3 - 12*s12*s13^2*s23^4) +
             p1q^5*p2q*(4*s12^2*s13*s23^4 + 4*s12*s13*s23^5) +
             p1q^4*p2q^2*(-8*s12^2*s13^2*s23^3 + (4*s12^2*s13 - 12*s12*s13^2)*
                s23^4 + 4*s12*s13*s23^5) + p3q^4*(p1q*p2q*
                ((8*s12^4*s13 - 12*s12^3*s13^2)*s23^2 + (8*s12^3*s13 -
                   8*s12^2*s13^2)*s23^3) + p1q^2*(8*s12^4*s13*s23^2 -
                 8*s12^2*s13*s23^4)) + p3q^3*(p1q*p2q^2*
                ((4*s12^4*s13 - 24*s12^3*s13^2 + 12*s12^2*s13^3)*s23^2 +
                 (4*s12^3*s13 - 16*s12^2*s13^2 + 4*s12*s13^3)*s23^3) + p1q^2*
                p2q*((12*s12^4*s13 - 20*s12^3*s13^2)*s23^2 +
                 (-4*s12^3*s13 - 16*s12^2*s13^2)*s23^3 + (-16*s12^2*s13 -
                   8*s12*s13^2)*s23^4) + p1q^3*(4*s12^4*s13*s23^2 -
                 12*s12^3*s13*s23^3 - 12*s12^2*s13*s23^4 + 4*s12*s13*
                  s23^5)) + p3q^2*(p1q*p2q^3*((-12*s12^3*s13^2 + 24*s12^2*
                    s13^3 - 4*s12*s13^4)*s23^2 + (-8*s12^2*s13^2 +
                   8*s12*s13^3)*s23^3) + p1q^2*p2q^2*((4*s12^4*s13 -
                   28*s12^3*s13^2 + 16*s12^2*s13^3)*s23^2 + (-4*s12^3*s13 -
                   24*s12^2*s13^2 + 16*s12*s13^3)*s23^3 + (-8*s12^2*s13 -
                   16*s12*s13^2)*s23^4) + p1q^4*(-8*s12^3*s13*s23^3 +
                 8*s12*s13*s23^5) + p1q^3*p2q*((4*s12^4*s13 - 8*s12^3*s13^2)*
                  s23^2 + (-20*s12^3*s13 - 16*s12^2*s13^2)*s23^3 +
                 (-16*s12^2*s13 - 20*s12*s13^2)*s23^4 + 8*s12*s13*s23^5)) +
             p3q*(p1q*p2q^4*((12*s12^2*s13^3 - 8*s12*s13^4)*s23^2 +
                 4*s12*s13^3*s23^3) + p1q^2*p2q^3*((-8*s12^3*s13^2 +
                   20*s12^2*s13^3 - 4*s12*s13^4)*s23^2 + (-8*s12^2*s13^2 +
                   28*s12*s13^3)*s23^3 - 8*s12*s13^2*s23^4) + p1q^5*
                (4*s12^2*s13*s23^4 + 4*s12*s13*s23^5) + p1q^3*p2q^2*
                ((-8*s12^3*s13^2 + 4*s12^2*s13^3)*s23^2 + (-8*s12^3*s13 -
                   24*s12^2*s13^2 + 12*s12*s13^3)*s23^3 + (-4*s12^2*s13 -
                   32*s12*s13^2)*s23^4 + 4*s12*s13*s23^5) + p1q^4*p2q*
                ((-8*s12^3*s13 - 8*s12^2*s13^2)*s23^3 + (4*s12^2*s13 -
                   12*s12*s13^2)*s23^4 + 12*s12*s13*s23^5))) +
           ((p3q^6*((-9*s12^3 - 9*s12^2*s13)*s23^2 - 9*s12^2*s23^3) +
              p2q^6*(-36*s12^2*s13^3 - 72*s12*s13^4 - 36*s13^5 +
                (-72*s12*s13^3 - 72*s13^4)*s23 + (-9*s12*s13^2 - 45*s13^3)*
                 s23^2 - 9*s13^2*s23^3) + p1q*p2q^5*(-36*s12^2*s13^3 -
                72*s12*s13^4 - 36*s13^5 + (135*s12^2*s13^2 + 234*s12*s13^3 +
                  99*s13^4)*s23 + (225*s12*s13^2 + 225*s13^3)*s23^2 +
                (18*s12*s13 + 108*s13^2)*s23^3 + 18*s13*s23^4) +
              p1q^5*p2q*((9*s12^2 + 90*s12*s13 + 81*s13^2)*s23^3 +
                (9*s12 + 81*s13)*s23^4) + p1q^6*((-18*s12 - 18*s13)*s23^4 -
                18*s23^5) + p1q^2*p2q^4*((-54*s12^3*s13 - 18*s12^2*s13^2 +
                  198*s12*s13^3 + 162*s13^4)*s23 + (-198*s12^2*s13 -
                  261*s12*s13^2 + 9*s13^3)*s23^2 + (-216*s12*s13 - 225*s13^2)*
                 s23^3 + (-9*s12 - 81*s13)*s23^4 - 9*s23^5) +
              p1q^4*p2q^2*((-18*s12^2*s13 - 126*s12*s13^2 - 108*s13^3)*
                 s23^2 + (72*s12*s13 - 18*s13^2)*s23^3 + (9*s12 + 99*s13)*
                 s23^4 + 9*s23^5) + p1q^3*p2q^3*((9*s12^2*s13^2 +
                  54*s12*s13^3 + 45*s13^4)*s23 + (18*s12^3 + 18*s12^2*s13 -
                  207*s12*s13^2 - 171*s13^3)*s23^2 + (63*s12^2 + 90*s12*s13 -
                  171*s13^2)*s23^3 + (63*s12 + 63*s13)*s23^4 + 18*s23^5) +
              p3q^5*(p2q*(-36*s12^4*s13 - 72*s12^3*s13^2 - 36*s12^2*s13^3 +
                  (-72*s12^3*s13 - 72*s12^2*s13^2)*s23 + (-18*s12^2*s13 +
                    18*s12*s13^2)*s23^2 + 18*s12*s13*s23^3) +
                p1q*((27*s12^4 - 18*s12^3*s13 - 81*s12^2*s13^2 - 36*s12*
                     s13^3)*s23 + (-27*s12^3 - 135*s12^2*s13 - 72*s12*s13^2)*
                   s23^2 + (-36*s12^2 - 18*s12*s13)*s23^3 + 18*s12*s23^4)) +
              p3q^3*(p2q^3*(-108*s12^4*s13 + 288*s12^2*s13^3 + 144*s12*
                   s13^4 - 36*s13^5 + (-216*s12^3*s13 + 216*s12^2*s13^2 +
                    360*s12*s13^3 - 72*s13^4)*s23 + (-144*s12^2*s13 +
                    180*s12*s13^2 - 36*s13^3)*s23^2 - 36*s12*s13*s23^3) +
                p1q*p2q^2*(-72*s12^4*s13 - 72*s12^3*s13^2 + 72*s12^2*s13^3 +
                  72*s12*s13^4 + (-27*s12^4 - 72*s12^3*s13 + 432*s12^2*
                     s13^2 + 612*s12*s13^3 + 135*s13^4)*s23 +
                  (-45*s12^3 + 45*s12^2*s13 + 531*s12*s13^2 + 225*s13^3)*
                   s23^2 + (-54*s12^2 + 90*s13^2)*s23^3 - 36*s12*s23^4) +
                p1q^2*p2q*((18*s12^4 - 54*s12^3*s13 - 54*s12^2*s13^2 -
                    18*s12*s13^3 - 36*s13^4)*s23 + (-72*s12^3 - 144*s12^2*
                     s13 - 72*s13^3)*s23^2 + (-18*s12^2 + 162*s12*s13 +
                    36*s13^2)*s23^3 + (72*s12 + 72*s13)*s23^4) +
                p1q^3*((9*s12^4 - 18*s12^3*s13 - 27*s12^2*s13^2)*s23 +
                  (-135*s12^3 - 45*s12^2*s13 + 162*s12*s13^2 + 36*s13^3)*
                   s23^2 + (81*s12^2 + 360*s12*s13 + 45*s13^2)*s23^3 +
                  (171*s12 - 45*s13)*s23^4 - 54*s23^5)) +
              p3q^4*(p2q^2*(-108*s12^4*s13 - 144*s12^3*s13^2 + 36*s12^2*
                   s13^3 + 72*s12*s13^4 + (-216*s12^3*s13 - 72*s12^2*s13^2 +
                    144*s12*s13^3)*s23 + (18*s12^3 - 90*s12^2*s13 +
                    63*s12*s13^2 - 9*s13^3)*s23^2 + (18*s12^2 - 9*s13^2)*
                   s23^3) + p1q*p2q*(-36*s12^4*s13 - 72*s12^3*s13^2 -
                  36*s12^2*s13^3 + (9*s12^4 - 144*s12^3*s13 - 99*s12^2*
                     s13^2 + 90*s12*s13^3 + 36*s13^4)*s23 + (-45*s12^3 -
                    135*s12^2*s13 + 126*s12*s13^2 + 72*s13^3)*s23^2 +
                  (-54*s12^2 + 54*s12*s13 + 54*s13^2)*s23^3 + 18*s13*s23^4) +
                p1q^2*((36*s12^4 - 36*s12^3*s13 - 108*s12^2*s13^2 -
                    36*s12*s13^3)*s23 + (-117*s12^3 - 189*s12^2*s13 +
                    36*s12*s13^2 + 36*s13^3)*s23^2 + (-45*s12^2 + 180*s12*
                     s13 + 72*s13^2)*s23^3 + (99*s12 + 27*s13)*s23^4 -
                  9*s23^5)) + p3q^2*(p2q^4*(-36*s12^4*s13 + 144*s12^3*s13^2 +
                  288*s12^2*s13^3 - 108*s13^5 + (-72*s12^3*s13 + 360*s12^2*
                     s13^2 + 216*s12*s13^3 - 216*s13^4)*s23 +
                  (-9*s12^3 - 45*s12^2*s13 + 234*s12*s13^2 - 90*s13^3)*
                   s23^2 + (-9*s12^2 + 18*s13^2)*s23^3) + p1q*p2q^3*
                 (-36*s12^4*s13 + 72*s12^3*s13^2 + 216*s12^2*s13^3 +
                  72*s12*s13^4 - 36*s13^5 + (-9*s12^4 + 72*s12^3*s13 +
                    756*s12^2*s13^2 + 900*s12*s13^3 + 225*s13^4)*s23 +
                  (-27*s12^3 + 63*s12^2*s13 + 729*s12*s13^2 + 495*s13^3)*
                   s23^2 + (-18*s12^2 - 72*s12*s13 + 198*s13^2)*s23^3 -
                  36*s13*s23^4) + p1q^4*((-36*s12^3 + 18*s12^2*s13 +
                    54*s12*s13^2)*s23^2 + (144*s12^2 + 180*s12*s13 -
                    54*s13^2)*s23^3 + (81*s12 - 153*s13)*s23^4 - 99*s23^5) +
                p1q^3*p2q*((9*s12^4 + 36*s12^3*s13 + 81*s12^2*s13^2 +
                    54*s12*s13^3)*s23 + (-45*s12^3 - 27*s12^2*s13 +
                    162*s12*s13^2 + 108*s13^3)*s23^2 + (45*s12^2 + 306*s12*
                     s13 + 315*s13^2)*s23^3 + (81*s12 + 189*s13)*s23^4 -
                  18*s23^5) + p1q^2*p2q^2*((-36*s12^4 - 54*s12^3*s13 -
                    18*s12^2*s13^2 - 18*s12*s13^3 - 18*s13^4)*s23 +
                  (-81*s12^3 - 531*s12^2*s13 - 729*s12*s13^2 - 279*s13^3)*
                   s23^2 + (-81*s12^2 - 612*s12*s13 - 369*s13^2)*s23^3 +
                  (-18*s12 - 90*s13)*s23^4 + 18*s23^5)) +
              p3q*(p2q^5*(72*s12^3*s13^2 + 36*s12^2*s13^3 - 144*s12*s13^4 -
                  108*s13^5 + (144*s12^2*s13^2 - 72*s12*s13^3 - 216*s13^4)*
                   s23 + (18*s12^2*s13 + 90*s12*s13^2 - 108*s13^3)*s23^2 +
                  18*s12*s13*s23^3) + p1q*p2q^4*(72*s12^3*s13^2 +
                  72*s12^2*s13^3 - 72*s12*s13^4 - 72*s13^5 + (18*s12^3*s13 +
                    441*s12^2*s13^2 + 648*s12*s13^3 + 225*s13^4)*s23 +
                  (18*s12^2*s13 + 621*s12*s13^2 + 567*s13^3)*s23^2 +
                  (18*s12^2 + 18*s12*s13 + 270*s13^2)*s23^3 + 18*s12*s23^4) +
                p1q^2*p2q^3*((-18*s12^4 - 90*s12^3*s13 - 90*s12^2*s13^2 +
                    162*s12*s13^3 + 180*s13^4)*s23 + (-54*s12^3 - 558*s12^2*
                     s13 - 738*s12*s13^2 - 90*s13^3)*s23^2 + (-36*s12^2 -
                    666*s12*s13 - 486*s13^2)*s23^3 - 216*s13*s23^4) +
                p1q^5*((45*s12^2 + 18*s12*s13 - 27*s13^2)*s23^3 +
                  (-27*s12 - 99*s13)*s23^4 - 72*s23^5) + p1q^4*p2q*
                 ((-18*s12^3 - 90*s12^2*s13 - 18*s12*s13^2 + 54*s13^3)*
                   s23^2 + (18*s12^2 + 144*s12*s13 + 234*s13^2)*s23^3 +
                  (18*s12 + 162*s13)*s23^4 - 18*s23^5) + p1q^3*p2q^2*
                 ((-18*s12^3*s13 - 99*s12^2*s13^2 - 108*s12*s13^3 - 27*s13^4)*
                   s23 + (36*s12^3 - 252*s12^2*s13 - 567*s12*s13^2 -
                    243*s13^3)*s23^2 + (99*s12^2 - 108*s12*s13 - 117*s13^2)*
                   s23^3 + (117*s12 + 153*s13)*s23^4 + 54*s23^5)))*
             Log((p2q + p3q)/(p1q + p2q + p3q)))/
            (p1q*p3q^5*(4*s12^3*s13 + 4*s12^2*s13^2)*s23^2 +
             p1q*p2q^5*(4*s12*s13^3 + 4*s13^4)*s23^2 - 4*p1q^5*p2q*s13*
              s23^5 + p1q^2*p2q^4*((4*s12*s13^3 + 4*s13^4)*s23^2 +
               (-8*s12*s13^2 - 12*s13^3)*s23^3) + p1q^3*p2q^3*
              ((-8*s12*s13^2 - 12*s13^3)*s23^3 + (4*s12*s13 + 12*s13^2)*
                s23^4) + p1q^4*p2q^2*((4*s12*s13 + 12*s13^2)*s23^4 - 4*s13*
                s23^5) + p3q^4*(p1q*p2q*(12*s12^3*s13 + 4*s12^2*s13^2 -
                 8*s12*s13^3)*s23^2 + p1q^2*((4*s12^3*s13 + 4*s12^2*s13^2)*
                  s23^2 + (-12*s12^2*s13 - 8*s12*s13^2)*s23^3)) +
             p3q^3*(p1q*p2q^2*(12*s12^3*s13 - 12*s12^2*s13^2 - 20*s12*s13^3 +
                 4*s13^4)*s23^2 + p1q^2*p2q*((8*s12^3*s13 - 8*s12*s13^3)*
                  s23^2 + (-32*s12^2*s13 - 24*s12*s13^2 - 8*s13^3)*s23^3) +
               p1q^3*((-12*s12^2*s13 - 8*s12*s13^2)*s23^3 + (12*s12*s13 +
                   4*s13^2)*s23^4)) + p3q*(p1q*p2q^4*(-8*s12^2*s13^2 +
                 4*s12*s13^3 + 12*s13^4)*s23^2 - 4*p1q^5*s13*s23^5 + p1q^2*
                p2q^3*((-8*s12^2*s13^2 + 8*s13^4)*s23^2 + (-8*s12^2*s13 -
                   24*s12*s13^2 - 32*s13^3)*s23^3) + p1q^3*p2q^2*
                ((-8*s12^2*s13 - 16*s12*s13^2 - 20*s13^3)*s23^3 +
                 (20*s12*s13 + 28*s13^2)*s23^4) + p1q^4*p2q*
                ((16*s12*s13 + 16*s13^2)*s23^4 - 8*s13*s23^5)) +
             p3q^2*(p1q*p2q^3*(4*s12^3*s13 - 20*s12^2*s13^2 - 12*s12*s13^3 +
                 12*s13^4)*s23^2 + p1q^2*p2q^2*((4*s12^3*s13 - 12*s12^2*
                    s13^2 - 12*s12*s13^3 + 4*s13^4)*s23^2 + (-28*s12^2*s13 -
                   32*s12*s13^2 - 28*s13^3)*s23^3) + p1q^3*p2q*
                ((-20*s12^2*s13 - 16*s12*s13^2 - 8*s13^3)*s23^3 +
                 (28*s12*s13 + 20*s13^2)*s23^4) + p1q^4*
                ((12*s12*s13 + 4*s13^2)*s23^4 - 4*s13*s23^5))) +
           ((p2q^2*(36*s12^2*s13 + 36*s12*s13^2 + 36*s12*s13*s23) +
              p1q*p2q*((-9*s12^2 - 9*s12*s13)*s23 + (-11*s12 - 2*s13)*s23^2 -
                2*s23^3) + p3q*(p2q*(36*s12^2*s13 + 36*s12*s13^2 +
                  (18*s12^2 + 54*s12*s13)*s23 + 18*s12*s23^2) +
                p1q*((-27*s12^2 - 27*s12*s13)*s23 + (-29*s12 - 2*s13)*s23^2 -
                  2*s23^3)))*Log(-s12 - s13 - s23))/
            (2*p1q*p2q*s12*s13*s23^2 + 2*p1q*p3q*s12*s13*s23^2) +
           ((p3q^5*(s12^4 + s12^3*s13 + s12^3*s23) + p2q^5*(-(s12*s13^3) -
                s13^4 + (-(s12*s13^2) - 2*s13^3)*s23 - s13^2*s23^2) +
              p1q*p2q^4*(3*s12^2*s13^2 + 5*s12*s13^3 + 2*s13^4 +
                (6*s12*s13^2 + 5*s13^3)*s23 + (2*s12*s13 + 5*s13^2)*s23^2 +
                2*s13*s23^3) + p1q^2*p2q^3*(2*s12^3*s13 + 10*s12^2*s13^2 +
                15*s12*s13^3 + 7*s13^4 + (7*s12*s13^2 + 8*s13^3)*s23 +
                (-5*s12*s13 - 2*s13^2)*s23^2 + (-s12 - 4*s13)*s23^3 -
                s23^4) + p1q^3*p2q^2*(2*s12^3*s13 + 7*s12^2*s13^2 +
                9*s12*s13^3 + 4*s13^4 + (-2*s12^3 - 10*s12^2*s13 -
                  16*s12*s13^2 - 7*s13^3)*s23 + (-3*s12^2 - 19*s12*s13 -
                  19*s13^2)*s23^2 - 7*s13*s23^3 + s23^4) +
              p1q^5*((3*s12^2 + 7*s12*s13 + 4*s13^2)*s23^2 + (6*s12 + 7*s13)*
                 s23^3 + 3*s23^4) + p1q^4*p2q*((-2*s12^3 - 10*s12^2*s13 -
                  16*s12*s13^2 - 8*s13^3)*s23 + (-5*s12*s13 - 7*s13^2)*
                 s23^2 + (7*s12 + 6*s13)*s23^3 + 5*s23^4) +
              p3q^4*(p1q*(s12^4 + s12^3*s13 + (-2*s12^3 - 3*s12^2*s13)*s23 -
                  3*s12^2*s23^2) + p2q*(-2*s12^4 - 5*s12^3*s13 - 3*s12^2*
                   s13^2 + (-3*s12^3 - 4*s12^2*s13)*s23 - s12^2*s23^2)) +
              p3q^3*(p2q^2*(s12^4 + 7*s12^3*s13 + 9*s12^2*s13^2 +
                  3*s12*s13^3 + (3*s12^3 + 10*s12^2*s13 + 5*s12*s13^2)*s23 +
                  (2*s12^2 + 2*s12*s13)*s23^2) + p1q*p2q*(4*s12^3*s13 +
                  4*s12^2*s13^2 + (4*s12^3 + 10*s12^2*s13 + 2*s12*s13^2)*
                   s23 + (6*s12^2 + 4*s12*s13)*s23^2 + 2*s12*s23^3) +
                p1q^2*(3*s12^4 + 7*s12^3*s13 + 4*s12^2*s13^2 +
                  (3*s12^3 + 4*s12^2*s13)*s23 + (3*s12^2 + 3*s12*s13)*s23^2 +
                  3*s12*s23^3)) + p3q^2*(p2q^3*(-3*s12^3*s13 - 9*s12^2*
                   s13^2 - 7*s12*s13^3 - s13^4 + (-s12^3 - 8*s12^2*s13 -
                    11*s12*s13^2 - 2*s13^3)*s23 + (-s12^2 - 4*s12*s13 -
                    s13^2)*s23^2) + p1q*p2q^2*(-s12^4 + s12^3*s13 -
                  5*s12^2*s13^2 - 7*s12*s13^3 + (-6*s12^3 - 11*s12^2*s13 -
                    14*s12*s13^2 + s13^3)*s23 + (-9*s12^2 - 10*s12*s13 +
                    3*s13^2)*s23^2 + (-4*s12 + 2*s13)*s23^3) + p1q^2*p2q*
                 (6*s12^4 + 13*s12^3*s13 + s12^2*s13^2 - 6*s12*s13^3 +
                  (9*s12^3 - 2*s12^2*s13 - 18*s12*s13^2)*s23 +
                  (-3*s12^2 - 17*s12*s13 + s13^2)*s23^2 - 7*s12*s23^3 -
                  s23^4) + p1q^3*(3*s12^4 + 7*s12^3*s13 + 4*s12^2*s13^2 +
                  (-7*s12^2*s13 - 8*s12*s13^2)*s23 + (-6*s12^2 - 11*s12*s13)*
                   s23^2 + (-4*s12 - s13)*s23^3 - s23^4)) +
              p3q*(p2q^4*(3*s12^2*s13^2 + 5*s12*s13^3 + 2*s13^4 +
                  (2*s12^2*s13 + 7*s12*s13^2 + 4*s13^3)*s23 +
                  (2*s12*s13 + 2*s13^2)*s23^2) + p1q*p2q^3*(-2*s12^3*s13 -
                  6*s12^2*s13^2 - 2*s12*s13^3 + 2*s13^4 + (-8*s12^2*s13 -
                    14*s12*s13^2 - 2*s13^3)*s23 + (2*s12^2 - 8*s12*s13 -
                    8*s13^2)*s23^2 + (2*s12 - 4*s13)*s23^3) + p1q^2*p2q^2*
                 (-2*s12^4 - 8*s12^3*s13 - 15*s12^2*s13^2 - 7*s12*s13^3 +
                  2*s13^4 + (-12*s12^3 - 36*s12^2*s13 - 37*s12*s13^2 -
                    6*s13^3)*s23 + (-15*s12^2 - 27*s12*s13 - 10*s13^2)*
                   s23^2 - 3*s12*s23^3 + 2*s23^4) + p1q^4*
                 ((-6*s12^3 - 14*s12^2*s13 - 8*s12*s13^2)*s23 +
                  (-9*s12^2 - 7*s12*s13 + 4*s13^2)*s23^2 + (-s12 + 6*s13)*
                   s23^3 + 2*s23^4) + p1q^3*p2q*(2*s12^4 + 2*s12^3*s13 -
                  4*s12^2*s13^2 - 4*s12*s13^3 + (-6*s12^3 - 28*s12^2*s13 -
                    30*s12*s13^2 - 6*s13^3)*s23 + (-16*s12^2 - 24*s12*s13 -
                    2*s13^2)*s23^2 + (-4*s12 + 8*s13)*s23^3 + 4*s23^4)))*
             Log(s12/(s12 + s13 + s23)))/(4*p1q*p3q^4*s12^4*s13 +
             p1q*p2q^4*(-4*s12*s13^4 - 4*s12*s13^3*s23) + p1q^2*p2q^3*
              (-8*s12*s13^4 + 8*s12*s13^2*s23^2) + p1q^4*p2q*(8*s12*s13^3*
                s23 - 8*s12*s13*s23^3) + p1q^5*(-4*s12*s13^2*s23^2 - 4*s12*
                s13*s23^3) + p1q^3*p2q^2*(-4*s12*s13^4 + 12*s12*s13^3*s23 +
               12*s12*s13^2*s23^2 - 4*s12*s13*s23^3) +
             p3q^3*(p1q^2*(4*s12^4*s13 - 4*s12^3*s13^2 - 12*s12^3*s13*s23) +
               p1q*p2q*(4*s12^4*s13 - 12*s12^3*s13^2 - 4*s12^3*s13*s23)) +
             p3q^2*(p1q*p2q^2*(-12*s12^3*s13^2 + 12*s12^2*s13^3 +
                 (-4*s12^3*s13 + 8*s12^2*s13^2)*s23) + p1q^2*p2q*
                (-16*s12^3*s13^2 + 8*s12^2*s13^3 + (-16*s12^3*s13 +
                   8*s12^2*s13^2)*s23 + 8*s12^2*s13*s23^2) + p1q^3*
                (-4*s12^3*s13^2 + (-12*s12^3*s13 + 8*s12^2*s13^2)*s23 +
                 12*s12^2*s13*s23^2)) + p3q*(p1q*p2q^3*(12*s12^2*s13^3 -
                 4*s12*s13^4 + (8*s12^2*s13^2 - 4*s12*s13^3)*s23) + p1q^2*
                p2q^2*(20*s12^2*s13^3 - 4*s12*s13^4 + (16*s12^2*s13^2 +
                   4*s12*s13^3)*s23 + (8*s12^2*s13 + 8*s12*s13^2)*s23^2) +
               p1q^4*(8*s12^2*s13^2*s23 + (12*s12^2*s13 - 4*s12*s13^2)*
                  s23^2 - 4*s12*s13*s23^3) + p1q^3*p2q*(8*s12^2*s13^3 +
                 (16*s12^2*s13^2 + 8*s12*s13^3)*s23 + (20*s12^2*s13 +
                   4*s12*s13^2)*s23^2 - 4*s12*s13*s23^3))) +
           ((p2q^6*(36*s12^2*s13^4 + 36*s12*s13^5 + (9*s12^2*s13^3 +
                  45*s12*s13^4)*s23 + (10*s12*s13^3 + s13^4)*s23^2 +
                s13^3*s23^3) + p3q^6*((9*s12^4*s13 + 9*s12^3*s13^2)*s23 +
                (-s12^4 + 8*s12^3*s13)*s23^2 + (-2*s12^3 - s12^2*s13)*s23^3 -
                s12^2*s23^4) + p1q*p2q^5*(-36*s12^3*s13^3 + 36*s12*s13^5 +
                (-153*s12^2*s13^3 - 81*s12*s13^4)*s23 + (-27*s12^2*s13^2 -
                  143*s12*s13^3 + s13^4)*s23^2 + (-30*s12*s13^2 - 2*s13^3)*
                 s23^3 - 3*s13^2*s23^4) + p1q^6*((9*s12^3 + 18*s12^2*s13 +
                  9*s12*s13^2)*s23^3 + (18*s12^2 + 18*s12*s13)*s23^4 +
                9*s12*s23^5) + p1q^2*p2q^4*(-36*s12^3*s13^3 - 36*s12^2*
                 s13^4 + (153*s12^3*s13^2 + 45*s12^2*s13^3 - 72*s12*s13^4)*
                 s23 + (290*s12^2*s13^2 + 66*s12*s13^3 + s13^4)*s23^2 +
                (27*s12^2*s13 + 164*s12*s13^2 + s13^3)*s23^3 +
                (30*s12*s13 + 3*s13^2)*s23^4 + 3*s13*s23^5) +
              p1q^3*p2q^3*((-54*s12^4*s13 + 63*s12^2*s13^3 + 9*s12*s13^4)*
                 s23 + (-218*s12^3*s13 - 85*s12^2*s13^2 + 33*s12*s13^3 -
                  s13^4)*s23^2 + (-235*s12^2*s13 - 49*s12*s13^2 - 4*s13^3)*
                 s23^3 + (-9*s12^2 - 83*s12*s13 - 6*s13^2)*s23^4 +
                (-10*s12 - 4*s13)*s23^5 - s23^6) + p1q^5*p2q*(
                (-18*s12^3*s13 - 36*s12^2*s13^2 - 18*s12*s13^3)*s23^2 +
                (-27*s12^2*s13 - 27*s12*s13^2)*s23^3 + (-9*s12^2 -
                  19*s12*s13 - s13^2)*s23^4 + (-10*s12 - 2*s13)*s23^5 -
                s23^6) + p1q^4*p2q^2*((9*s12^3*s13^2 + 18*s12^2*s13^3 +
                  9*s12*s13^4)*s23 + (18*s12^4 - 18*s12^2*s13^2)*s23^2 +
                (65*s12^3 + 49*s12^2*s13 + 13*s12*s13^2 + 2*s13^3)*s23^3 +
                (62*s12^2 + 38*s12*s13 + 5*s13^2)*s23^4 + (17*s12 + 5*s13)*
                 s23^5 + 2*s23^6) + p3q^5*(p2q*(-36*s12^5*s13 - 36*s12^4*
                   s13^2 + (-36*s12^4*s13 - 18*s12^3*s13^2 - 18*s12^2*s13^3)*
                   s23 + (s12^4 + 4*s12^3*s13 - 15*s12^2*s13^2)*s23^2 +
                  (2*s12^3 + 6*s12^2*s13 + 2*s12*s13^2)*s23^3 +
                  (s12^2 + 2*s12*s13)*s23^4) + p1q*((27*s12^5 + 45*s12^4*
                     s13 + 18*s12^3*s13^2)*s23 + (43*s12^4 + 15*s12^3*s13 -
                    19*s12^2*s13^2)*s23^2 + (15*s12^3 - 20*s12^2*s13)*s23^3 +
                  (s12^2 + 2*s12*s13)*s23^4 + 2*s12*s23^5)) +
              p3q^4*(p2q^2*(-72*s12^5*s13 + 36*s12^4*s13^2 + 108*s12^3*
                   s13^3 + (-90*s12^4*s13 + 90*s12^3*s13^2 + 9*s12^2*s13^3 +
                    9*s12*s13^4)*s23 + (s12^4 - 20*s12^3*s13 - 6*s12^2*
                     s13^2 + 6*s12*s13^3)*s23^2 + (2*s12^3 - 4*s12^2*s13 -
                    6*s12*s13^2 - s13^3)*s23^3 + (s12^2 - 2*s12*s13 - s13^2)*
                   s23^4) + p1q*p2q*(-72*s12^5*s13 - 72*s12^4*s13^2 +
                  (-18*s12^5 - 117*s12^4*s13 - 63*s12^3*s13^2 - 36*s12^2*
                     s13^3)*s23 + (-63*s12^4 - 109*s12^3*s13 - 89*s12^2*
                     s13^2 - 16*s12*s13^3)*s23^2 + (-50*s12^3 - 40*s12^2*
                     s13 - 14*s12*s13^2)*s23^3 + (-7*s12^2 + 2*s12*s13 +
                    2*s13^2)*s23^4 + (-2*s12 + 2*s13)*s23^5) +
                p1q^2*((63*s12^5 + 81*s12^4*s13 + 18*s12^3*s13^2)*s23 +
                  (53*s12^4 - 30*s12^3*s13 - 38*s12^2*s13^2)*s23^2 +
                  (-45*s12^3 - 62*s12^2*s13 + 11*s12*s13^2)*s23^3 +
                  (-30*s12^2 + 16*s12*s13)*s23^4 + (4*s12 - s13)*s23^5 -
                  s23^6)) + p3q^3*(p2q^3*(-36*s12^5*s13 + 180*s12^4*s13^2 +
                  108*s12^3*s13^3 - 108*s12^2*s13^4 + (-36*s12^4*s13 +
                    252*s12^3*s13^2 - 72*s12^2*s13^3)*s23 +
                  (-s12^4 - 4*s12^3*s13 + 36*s12^2*s13^2 + 4*s12*s13^3 +
                    s13^4)*s23^2 + (-2*s12^3 - 6*s12^2*s13 + 2*s12*s13^2 +
                    2*s13^3)*s23^3 + (-s12^2 - 2*s12*s13 + s13^2)*s23^4) +
                p1q*p2q^2*(-108*s12^5*s13 + 72*s12^4*s13^2 + 180*s12^3*
                   s13^3 + (-9*s12^5 - 9*s12^4*s13 + 405*s12^3*s13^2 +
                    135*s12^2*s13^3 + 18*s12*s13^4)*s23 + (-43*s12^4 +
                    153*s12^3*s13 + 214*s12^2*s13^2 + 35*s12*s13^3 - s13^4)*
                   s23^2 + (-37*s12^3 + 70*s12^2*s13 + 3*s12*s13^2 -
                    10*s13^3)*s23^3 + (-5*s12^2 - 10*s12*s13 - 11*s13^2)*
                   s23^4 + (-2*s12 - 2*s13)*s23^5) + p1q^3*
                 ((45*s12^5 + 63*s12^4*s13 + 18*s12^3*s13^2)*s23 +
                  (-45*s12^4 - 109*s12^3*s13 - 37*s12^2*s13^2)*s23^2 +
                  (-152*s12^3 - 77*s12^2*s13 + 22*s12*s13^2)*s23^3 +
                  (-40*s12^2 + 43*s12*s13 - s13^2)*s23^4 + (19*s12 - 4*s13)*
                   s23^5 - 3*s23^6) + p1q^2*p2q*(-36*s12^5*s13 - 36*s12^4*
                   s13^2 + (-36*s12^5 - 144*s12^4*s13 - 180*s12^3*s13^2 -
                    108*s12^2*s13^3)*s23 + (-111*s12^4 - 374*s12^3*s13 -
                    443*s12^2*s13^2 - 108*s12*s13^3)*s23^2 + (-32*s12^3 -
                    294*s12^2*s13 - 220*s12*s13^2 - 2*s13^3)*s23^3 +
                  (46*s12^2 - 104*s12*s13 + s13^2)*s23^4 + (4*s12 + 4*s13)*
                   s23^5 + s23^6)) + p3q^2*(p2q^4*(108*s12^4*s13^2 -
                  108*s12^3*s13^3 - 180*s12^2*s13^4 + 36*s12*s13^5 +
                  (9*s12^4*s13 + 117*s12^3*s13^2 - 234*s12^2*s13^3 +
                    18*s12*s13^4)*s23 + (12*s12^3*s13 + 6*s12^2*s13^2 -
                    16*s12*s13^3 - s13^4)*s23^2 + (5*s12^2*s13 + 6*s12*s13^2)*
                   s23^3 + (2*s12*s13 + s13^2)*s23^4) + p1q*p2q^3*
                 (-36*s12^5*s13 + 216*s12^4*s13^2 + 108*s12^3*s13^3 -
                  144*s12^2*s13^4 + (9*s12^4*s13 + 423*s12^3*s13^2 -
                    135*s12^2*s13^3 - 117*s12*s13^4)*s23 + (-9*s12^4 +
                    61*s12^3*s13 + 184*s12^2*s13^2 - 81*s12*s13^3 + 3*s13^4)*
                   s23^2 + (-8*s12^3 + 20*s12^2*s13 + 22*s12*s13^2 - 2*s13^3)*
                   s23^3 + (3*s12^2 - 6*s12*s13 - 7*s13^2)*s23^4 +
                  (2*s12 - 2*s13)*s23^5) + p1q^4*((9*s12^5 + 18*s12^4*s13 +
                    9*s12^3*s13^2)*s23 + (-72*s12^4 - 108*s12^3*s13 -
                    36*s12^2*s13^2)*s23^2 + (-90*s12^3 - 25*s12^2*s13 +
                    20*s12*s13^2)*s23^3 + (37*s12^2 + 64*s12*s13 - 2*s13^2)*
                   s23^4 + (43*s12 - 5*s13)*s23^5 - 3*s23^6) + p1q^2*p2q^2*
                 (-36*s12^5*s13 + 36*s12^4*s13^2 + 72*s12^3*s13^3 +
                  (-27*s12^5 + 117*s12^4*s13 + 495*s12^3*s13^2 + 333*s12^2*
                     s13^3 + 90*s12*s13^4)*s23 + (-92*s12^4 + 134*s12^3*s13 +
                    488*s12^2*s13^2 + 318*s12*s13^3 + 2*s13^4)*s23^2 +
                  (-41*s12^3 + 27*s12^2*s13 + 203*s12*s13^2 - 5*s13^3)*
                   s23^3 + (23*s12^2 - 20*s12*s13 - 10*s13^2)*s23^4 -
                  2*s13*s23^5 + s23^6) + p1q^3*p2q*((-18*s12^5 - 81*s12^4*
                     s13 - 171*s12^3*s13^2 - 108*s12^2*s13^3)*s23 +
                  (-29*s12^4 - 387*s12^3*s13 - 531*s12^2*s13^2 - 110*s12*
                     s13^3)*s23^2 + (94*s12^3 - 395*s12^2*s13 - 297*s12*
                     s13^2)*s23^3 + (108*s12^2 - 181*s12*s13 + 3*s13^2)*
                   s23^4 + (4*s12 + 4*s13)*s23^5 + s23^6)) +
              p3q*(p2q^5*(-108*s12^3*s13^3 - 36*s12^2*s13^4 + 72*s12*s13^5 +
                  (-18*s12^3*s13^2 - 126*s12^2*s13^3 + 72*s12*s13^4)*s23 +
                  (-21*s12^2*s13^2 - 4*s12*s13^3 - s13^4)*s23^2 +
                  (-4*s12*s13^2 - 2*s13^3)*s23^3 - s13^2*s23^4) +
                p1q*p2q^4*(72*s12^4*s13^2 - 108*s12^3*s13^3 - 144*s12^2*
                   s13^4 + 36*s12*s13^5 + (153*s12^3*s13^2 - 315*s12^2*
                     s13^3 - 180*s12*s13^4)*s23 + (89*s12^2*s13^2 -
                    203*s12*s13^3 + 5*s13^4)*s23^2 + (2*s12^2*s13 +
                    11*s12*s13^2 + 6*s13^3)*s23^3 + (4*s12*s13 + 3*s13^2)*
                   s23^4 + 2*s13*s23^5) + p1q^4*p2q*((-18*s12^4*s13 -
                    36*s12^3*s13^2 - 18*s12^2*s13^3)*s23 + (18*s12^4 -
                    144*s12^3*s13 - 198*s12^2*s13^2 - 36*s12*s13^3)*s23^2 +
                  (74*s12^3 - 174*s12^2*s13 - 120*s12*s13^2 + 2*s13^3)*
                   s23^3 + (45*s12^2 - 96*s12*s13 + 3*s13^2)*s23^4 -
                  12*s12*s23^5 - s23^6) + p1q^5*((-18*s12^4 - 36*s12^3*s13 -
                    18*s12^2*s13^2)*s23^2 + (9*s12^3 + 27*s12^2*s13 +
                    18*s12*s13^2)*s23^3 + (63*s12^2 + 53*s12*s13 - s13^2)*
                   s23^4 + (35*s12 - 2*s13)*s23^5 - s23^6) + p1q^2*p2q^3*
                 (72*s12^4*s13^2 + 36*s12^3*s13^3 - 36*s12^2*s13^4 +
                  (18*s12^4*s13 + 306*s12^3*s13^2 + 90*s12^2*s13^3 -
                    90*s12*s13^4)*s23 + (-62*s12^3*s13 + 319*s12^2*s13^2 +
                    96*s12*s13^3 + 3*s13^4)*s23^2 + (18*s12^3 - 74*s12^2*
                     s13 + 166*s12*s13^2 - 2*s13^3)*s23^3 + (19*s12^2 -
                    14*s12*s13 - 8*s13^2)*s23^4 - 4*s13*s23^5 - s23^6) +
                p1q^3*p2q^2*((-18*s12^5 + 18*s12^4*s13 + 117*s12^3*s13^2 +
                    99*s12^2*s13^3 + 18*s12*s13^4)*s23 + (-38*s12^4 -
                    118*s12^3*s13 + 51*s12^2*s13^2 + 121*s12*s13^3 - s13^4)*
                   s23^2 + (39*s12^3 - 103*s12^2*s13 + 73*s12*s13^2 -
                    4*s13^3)*s23^3 + (67*s12^2 - 19*s12*s13 - 2*s13^2)*
                   s23^4 + (11*s12 + 4*s13)*s23^5 + 3*s23^6)))*
             Log(s13/(s12 + s13 + s23)))/(-4*p1q*p2q^5*s12*s13^4*s23^2 +
             p1q*p3q^5*(4*s12^4*s13*s23^2 + 4*s12^3*s13*s23^3) +
             p1q^2*p2q^4*((4*s12^2*s13^3 - 4*s12*s13^4)*s23^2 + 12*s12*s13^3*
                s23^3) + p1q^3*p2q^3*(4*s12^2*s13^3*s23^2 + (-8*s12^2*s13^2 +
                 12*s12*s13^3)*s23^3 - 12*s12*s13^2*s23^4) +
             p1q^5*p2q*(4*s12^2*s13*s23^4 + 4*s12*s13*s23^5) +
             p1q^4*p2q^2*(-8*s12^2*s13^2*s23^3 + (4*s12^2*s13 - 12*s12*s13^2)*
                s23^4 + 4*s12*s13*s23^5) + p3q^4*(p1q*p2q*
                ((8*s12^4*s13 - 12*s12^3*s13^2)*s23^2 + (8*s12^3*s13 -
                   8*s12^2*s13^2)*s23^3) + p1q^2*(8*s12^4*s13*s23^2 -
                 8*s12^2*s13*s23^4)) + p3q^3*(p1q*p2q^2*
                ((4*s12^4*s13 - 24*s12^3*s13^2 + 12*s12^2*s13^3)*s23^2 +
                 (4*s12^3*s13 - 16*s12^2*s13^2 + 4*s12*s13^3)*s23^3) + p1q^2*
                p2q*((12*s12^4*s13 - 20*s12^3*s13^2)*s23^2 +
                 (-4*s12^3*s13 - 16*s12^2*s13^2)*s23^3 + (-16*s12^2*s13 -
                   8*s12*s13^2)*s23^4) + p1q^3*(4*s12^4*s13*s23^2 -
                 12*s12^3*s13*s23^3 - 12*s12^2*s13*s23^4 + 4*s12*s13*
                  s23^5)) + p3q^2*(p1q*p2q^3*((-12*s12^3*s13^2 + 24*s12^2*
                    s13^3 - 4*s12*s13^4)*s23^2 + (-8*s12^2*s13^2 +
                   8*s12*s13^3)*s23^3) + p1q^2*p2q^2*((4*s12^4*s13 -
                   28*s12^3*s13^2 + 16*s12^2*s13^3)*s23^2 + (-4*s12^3*s13 -
                   24*s12^2*s13^2 + 16*s12*s13^3)*s23^3 + (-8*s12^2*s13 -
                   16*s12*s13^2)*s23^4) + p1q^4*(-8*s12^3*s13*s23^3 +
                 8*s12*s13*s23^5) + p1q^3*p2q*((4*s12^4*s13 - 8*s12^3*s13^2)*
                  s23^2 + (-20*s12^3*s13 - 16*s12^2*s13^2)*s23^3 +
                 (-16*s12^2*s13 - 20*s12*s13^2)*s23^4 + 8*s12*s13*s23^5)) +
             p3q*(p1q*p2q^4*((12*s12^2*s13^3 - 8*s12*s13^4)*s23^2 +
                 4*s12*s13^3*s23^3) + p1q^2*p2q^3*((-8*s12^3*s13^2 +
                   20*s12^2*s13^3 - 4*s12*s13^4)*s23^2 + (-8*s12^2*s13^2 +
                   28*s12*s13^3)*s23^3 - 8*s12*s13^2*s23^4) + p1q^5*
                (4*s12^2*s13*s23^4 + 4*s12*s13*s23^5) + p1q^3*p2q^2*
                ((-8*s12^3*s13^2 + 4*s12^2*s13^3)*s23^2 + (-8*s12^3*s13 -
                   24*s12^2*s13^2 + 12*s12*s13^3)*s23^3 + (-4*s12^2*s13 -
                   32*s12*s13^2)*s23^4 + 4*s12*s13*s23^5) + p1q^4*p2q*
                ((-8*s12^3*s13 - 8*s12^2*s13^2)*s23^3 + (4*s12^2*s13 -
                   12*s12*s13^2)*s23^4 + 12*s12*s13*s23^5))) +
           ((p3q^6*((9*s12^3 + 9*s12^2*s13)*s23^2 + 9*s12^2*s23^3) +
              p2q^6*(72*s12^2*s13^3 + 144*s12*s13^4 + 72*s13^5 +
                (108*s12*s13^3 + 108*s13^4)*s23 + (9*s12*s13^2 + 45*s13^3)*
                 s23^2 + 9*s13^2*s23^3) + p1q*p2q^5*(72*s12^2*s13^3 +
                144*s12*s13^4 + 72*s13^5 + (-207*s12^2*s13^2 - 378*s12*
                   s13^3 - 171*s13^4)*s23 + (-297*s12*s13^2 - 333*s13^3)*
                 s23^2 + (-18*s12*s13 - 108*s13^2)*s23^3 - 18*s13*s23^4) +
              p1q^3*p2q^3*((-9*s12^2*s13^2 - 54*s12*s13^3 - 45*s13^4)*s23 +
                (108*s12^2*s13 + 477*s12*s13^2 + 333*s13^3)*s23^2 +
                (-45*s12^2 - 18*s12*s13 + 297*s13^2)*s23^3 +
                (-63*s12 - 99*s13)*s23^4 - 18*s23^5) + p1q^4*p2q^2*(
                (18*s12^2*s13 + 126*s12*s13^2 + 108*s13^3)*s23^2 +
                (-36*s12^2 - 198*s12*s13 - 72*s13^2)*s23^3 +
                (-45*s12 - 189*s13)*s23^4 - 9*s23^5) + p1q^2*p2q^4*(
                (36*s12^3*s13 - 108*s12^2*s13^2 - 432*s12*s13^3 - 288*s13^4)*
                 s23 + (216*s12^2*s13 + 297*s12*s13^2 - 27*s13^3)*s23^2 +
                (252*s12*s13 + 333*s13^2)*s23^3 + (9*s12 + 81*s13)*s23^4 +
                9*s23^5) + p1q^5*p2q*((-9*s12^2 - 90*s12*s13 - 81*s13^2)*
                 s23^3 + (9*s12 - 63*s13)*s23^4 + 18*s23^5) +
              p1q^6*((18*s12 + 18*s13)*s23^4 + 18*s23^5) +
              p3q^5*(p2q*(72*s12^4*s13 + 144*s12^3*s13^2 + 72*s12^2*s13^3 +
                  (108*s12^3*s13 + 108*s12^2*s13^2)*s23 + (18*s12^2*s13 -
                    18*s12*s13^2)*s23^2 - 18*s12*s13*s23^3) +
                p1q*((-63*s12^4 - 90*s12^3*s13 - 27*s12^2*s13^2)*s23 +
                  (-45*s12^3 - 9*s12^2*s13)*s23^2 - 18*s12*s13*s23^3 -
                  18*s12*s23^4)) + p3q^4*(p2q^2*(216*s12^4*s13 + 288*s12^3*
                   s13^2 - 72*s12^2*s13^3 - 144*s12*s13^4 + (324*s12^3*s13 +
                    108*s12^2*s13^2 - 216*s12*s13^3)*s23 + (-18*s12^3 +
                    90*s12^2*s13 - 63*s12*s13^2 + 9*s13^3)*s23^2 +
                  (-18*s12^2 + 9*s13^2)*s23^3) + p1q*p2q*(72*s12^4*s13 +
                  144*s12^3*s13^2 + 72*s12^2*s13^3 + (-117*s12^4 - 144*s12^3*
                     s13 - 117*s12^2*s13^2 - 90*s12*s13^3)*s23 +
                  (-171*s12^3 - 261*s12^2*s13 - 198*s12*s13^2)*s23^2 +
                  (-54*s12^2 - 126*s12*s13 - 18*s13^2)*s23^3 - 18*s13*
                   s23^4) + p1q^2*((-72*s12^4 - 72*s12^3*s13)*s23 +
                  (135*s12^3 + 261*s12^2*s13 + 54*s12*s13^2)*s23^2 +
                  (171*s12^2 + 18*s12*s13)*s23^3 + (-27*s12 + 9*s13)*s23^4 +
                  9*s23^5)) + p3q^3*(p2q^3*(216*s12^4*s13 - 576*s12^2*s13^3 -
                  288*s12*s13^4 + 72*s13^5 + (324*s12^3*s13 - 324*s12^2*
                     s13^2 - 540*s12*s13^3 + 108*s13^4)*s23 +
                  (144*s12^2*s13 - 180*s12*s13^2 + 36*s13^3)*s23^2 +
                  36*s12*s13*s23^3) + p1q*p2q^2*(144*s12^4*s13 + 144*s12^3*
                   s13^2 - 144*s12^2*s13^3 - 144*s12*s13^4 + (-117*s12^4 -
                    324*s12^3*s13 - 828*s12^2*s13^2 - 792*s12*s13^3 -
                    171*s13^4)*s23 + (-243*s12^3 - 621*s12^2*s13 - 675*s12*
                     s13^2 - 225*s13^3)*s23^2 + (-90*s12^2 - 108*s12*s13 -
                    54*s13^2)*s23^3 + 36*s12*s23^4) + p1q^2*p2q*
                 ((-108*s12^4 - 288*s12^3*s13 - 360*s12^2*s13^2 - 180*s12*
                     s13^3)*s23 + (54*s12^3 + 54*s12^2*s13 - 54*s12*s13^2 +
                    54*s13^3)*s23^2 + (198*s12^2 + 36*s12*s13 - 18*s13^2)*
                   s23^3 + (36*s12 - 72*s13)*s23^4) + p1q^3*
                 ((-9*s12^4 + 18*s12^3*s13 + 27*s12^2*s13^2)*s23 +
                  (225*s12^3 + 261*s12^2*s13)*s23^2 + (9*s12^2 - 252*s12*
                     s13 - 27*s13^2)*s23^3 + (-207*s12 - 9*s13)*s23^4 +
                  18*s23^5)) + p3q^2*(p2q^4*(72*s12^4*s13 - 288*s12^3*s13^2 -
                  576*s12^2*s13^3 + 216*s13^5 + (108*s12^3*s13 - 540*s12^2*
                     s13^2 - 324*s12*s13^3 + 324*s13^4)*s23 +
                  (9*s12^3 + 45*s12^2*s13 - 234*s12*s13^2 + 90*s13^3)*s23^2 +
                  (9*s12^2 - 18*s13^2)*s23^3) + p1q*p2q^3*(72*s12^4*s13 -
                  144*s12^3*s13^2 - 432*s12^2*s13^3 - 144*s12*s13^4 +
                  72*s13^5 + (-63*s12^4 - 288*s12^3*s13 - 1188*s12^2*s13^2 -
                    1404*s12*s13^3 - 441*s13^4)*s23 + (-117*s12^3 -
                    387*s12^2*s13 - 945*s12*s13^2 - 747*s13^3)*s23^2 +
                  (-54*s12^2 - 198*s13^2)*s23^3 + 36*s13*s23^4) +
                p1q^2*p2q^2*((-72*s12^4 - 360*s12^3*s13 - 504*s12^2*s13^2 -
                    324*s12*s13^3 - 108*s13^4)*s23 + (-9*s12^3 + 369*s12^2*
                     s13 + 819*s12*s13^2 + 333*s13^3)*s23^2 +
                  (171*s12^2 + 810*s12*s13 + 549*s13^2)*s23^3 +
                  (90*s12 + 90*s13)*s23^4 - 18*s23^5) + p1q^3*p2q*
                 ((-9*s12^4 - 36*s12^3*s13 - 81*s12^2*s13^2 - 54*s12*s13^3)*
                   s23 + (189*s12^3 + 459*s12^2*s13 + 270*s12*s13^2 +
                    36*s13^3)*s23^2 + (117*s12^2 - 18*s12*s13 - 189*s13^2)*
                   s23^3 + (-63*s12 - 207*s13)*s23^4 + 18*s23^5) +
                p1q^4*((36*s12^3 - 18*s12^2*s13 - 54*s12*s13^2)*s23^2 +
                  (-216*s12^2 - 306*s12*s13)*s23^3 + (-171*s12 + 81*s13)*
                   s23^4 + 81*s23^5)) + p3q*(p2q^5*(-144*s12^3*s13^2 -
                  72*s12^2*s13^3 + 288*s12*s13^4 + 216*s13^5 +
                  (-216*s12^2*s13^2 + 108*s12*s13^3 + 324*s13^4)*s23 +
                  (-18*s12^2*s13 - 90*s12*s13^2 + 108*s13^3)*s23^2 -
                  18*s12*s13*s23^3) + p1q*p2q^4*(-144*s12^3*s13^2 -
                  144*s12^2*s13^3 + 144*s12*s13^4 + 144*s13^5 +
                  (-18*s12^3*s13 - 657*s12^2*s13^2 - 1080*s12*s13^3 -
                    441*s13^4)*s23 + (-18*s12^2*s13 - 765*s12*s13^2 -
                    855*s13^3)*s23^2 + (-18*s12^2 - 18*s12*s13 - 270*s13^2)*
                   s23^3 - 18*s12*s23^4) + p1q^2*p2q^3*((-36*s12^4 -
                    108*s12^3*s13 - 252*s12^2*s13^2 - 576*s12*s13^3 -
                    396*s13^4)*s23 + (-36*s12^3 + 468*s12^2*s13 + 900*s12*
                     s13^2 + 144*s13^3)*s23^2 + (756*s12*s13 + 756*s13^2)*
                   s23^3 + 216*s13*s23^4) + p1q^3*p2q^2*((18*s12^3*s13 +
                    99*s12^2*s13^2 + 108*s12*s13^3 + 27*s13^4)*s23 +
                  (72*s12^3 + 630*s12^2*s13 + 1071*s12*s13^2 + 477*s13^3)*
                   s23^2 + (27*s12^2 + 288*s12*s13 + 243*s13^2)*s23^3 +
                  (-99*s12 - 261*s13)*s23^4 - 54*s23^5) + p1q^4*p2q*
                 ((18*s12^3 + 90*s12^2*s13 + 18*s12*s13^2 - 54*s13^3)*s23^2 +
                  (-90*s12^2 - 324*s12*s13 - 342*s13^2)*s23^3 +
                  (-72*s12 - 252*s13)*s23^4 + 36*s23^5) + p1q^5*
                 ((-45*s12^2 - 18*s12*s13 + 27*s13^2)*s23^3 +
                  (45*s12 + 117*s13)*s23^4 + 90*s23^5)))*
             Log(s23/(s12 + s13 + s23)))/(p1q*p3q^5*(4*s12^3*s13 + 4*s12^2*
                s13^2)*s23^2 + p1q*p2q^5*(4*s12*s13^3 + 4*s13^4)*s23^2 -
             4*p1q^5*p2q*s13*s23^5 + p1q^2*p2q^4*((4*s12*s13^3 + 4*s13^4)*
                s23^2 + (-8*s12*s13^2 - 12*s13^3)*s23^3) +
             p1q^3*p2q^3*((-8*s12*s13^2 - 12*s13^3)*s23^3 + (4*s12*s13 +
                 12*s13^2)*s23^4) + p1q^4*p2q^2*((4*s12*s13 + 12*s13^2)*
                s23^4 - 4*s13*s23^5) + p3q^4*(p1q*p2q*(12*s12^3*s13 +
                 4*s12^2*s13^2 - 8*s12*s13^3)*s23^2 + p1q^2*
                ((4*s12^3*s13 + 4*s12^2*s13^2)*s23^2 + (-12*s12^2*s13 -
                   8*s12*s13^2)*s23^3)) + p3q^3*(p1q*p2q^2*(12*s12^3*s13 -
                 12*s12^2*s13^2 - 20*s12*s13^3 + 4*s13^4)*s23^2 + p1q^2*p2q*
                ((8*s12^3*s13 - 8*s12*s13^3)*s23^2 + (-32*s12^2*s13 -
                   24*s12*s13^2 - 8*s13^3)*s23^3) + p1q^3*
                ((-12*s12^2*s13 - 8*s12*s13^2)*s23^3 + (12*s12*s13 + 4*s13^2)*
                  s23^4)) + p3q*(p1q*p2q^4*(-8*s12^2*s13^2 + 4*s12*s13^3 +
                 12*s13^4)*s23^2 - 4*p1q^5*s13*s23^5 + p1q^2*p2q^3*
                ((-8*s12^2*s13^2 + 8*s13^4)*s23^2 + (-8*s12^2*s13 -
                   24*s12*s13^2 - 32*s13^3)*s23^3) + p1q^3*p2q^2*
                ((-8*s12^2*s13 - 16*s12*s13^2 - 20*s13^3)*s23^3 +
                 (20*s12*s13 + 28*s13^2)*s23^4) + p1q^4*p2q*
                ((16*s12*s13 + 16*s13^2)*s23^4 - 8*s13*s23^5)) +
             p3q^2*(p1q*p2q^3*(4*s12^3*s13 - 20*s12^2*s13^2 - 12*s12*s13^3 +
                 12*s13^4)*s23^2 + p1q^2*p2q^2*((4*s12^3*s13 - 12*s12^2*
                    s13^2 - 12*s12*s13^3 + 4*s13^4)*s23^2 + (-28*s12^2*s13 -
                   32*s12*s13^2 - 28*s13^3)*s23^3) + p1q^3*p2q*
                ((-20*s12^2*s13 - 16*s12*s13^2 - 8*s13^3)*s23^3 +
                 (28*s12*s13 + 20*s13^2)*s23^4) + p1q^4*
                ((12*s12*s13 + 4*s13^2)*s23^4 - 4*s13*s23^5)))) +
         Log((p2q + p3q)/(p1q + p2q + p3q))*
          (((p3q^6*((-9*s12^3 - 9*s12^2*s13)*s23^2 - 9*s12^2*s23^3) +
              p2q^6*(36*s12^3*s13^2 + 72*s12^2*s13^3 + 36*s12*s13^4 +
                (72*s12^2*s13^2 + 72*s12*s13^3)*s23 + (27*s12*s13^2 -
                  9*s13^3)*s23^2 - 9*s13^2*s23^3) + p1q*p2q^5*(36*s12^3*
                 s13^2 + 72*s12^2*s13^3 + 36*s12*s13^4 + (-108*s12^3*s13 -
                  153*s12^2*s13^2 - 18*s12*s13^3 + 27*s13^4)*s23 +
                (-216*s12^2*s13 - 243*s12*s13^2 - 27*s13^3)*s23^2 +
                (-90*s12*s13 - 36*s13^2)*s23^3 + 18*s13*s23^4) +
              p1q^4*p2q^2*((54*s12^2*s13 + 18*s12*s13^2 - 36*s13^3)*s23^2 +
                (-72*s12^2 + 72*s12*s13 + 54*s13^2)*s23^3 +
                (-135*s12 + 27*s13)*s23^4 - 63*s23^5) + p1q^3*p2q^3*(
                (-27*s12^2*s13^2 - 18*s12*s13^3 + 9*s13^4)*s23 +
                (-18*s12^3 + 126*s12^2*s13 + 45*s12*s13^2 - 63*s13^3)*s23^2 +
                (-81*s12^2 + 234*s12*s13 + 81*s13^2)*s23^3 +
                (-117*s12 + 99*s13)*s23^4 - 54*s23^5) + p1q^5*p2q*(
                (-27*s12^2 + 18*s12*s13 + 45*s13^2)*s23^3 + (-63*s12 + 9*s13)*
                 s23^4 - 36*s23^5) + p1q^6*((-18*s12 - 18*s13)*s23^4 -
                18*s23^5) + p1q^2*p2q^4*((72*s12^4 + 90*s12^3*s13 -
                  90*s12^2*s13^2 - 90*s12*s13^3 + 18*s13^4)*s23 +
                (216*s12^3 + 270*s12^2*s13 - 117*s12*s13^2 - 99*s13^3)*
                 s23^2 + (216*s12^2 + 288*s12*s13 - 9*s13^2)*s23^3 +
                (63*s12 + 99*s13)*s23^4 - 9*s23^5) + p3q^5*(
                p2q*(36*s12^5 + 72*s12^4*s13 + 36*s12^3*s13^2 +
                  (72*s12^4 + 72*s12^3*s13)*s23 + (36*s12^3 + 18*s12^2*s13 +
                    18*s12*s13^2)*s23^2 + 18*s12*s13*s23^3) +
                p1q*((63*s12^4 + 90*s12^3*s13 + 27*s12^2*s13^2)*s23 +
                  (45*s12^3 + 9*s12^2*s13)*s23^2 + 18*s12*s13*s23^3 +
                  18*s12*s23^4)) + p3q^3*(p2q^3*(108*s12^5 - 288*s12^3*
                   s13^2 - 144*s12^2*s13^3 + 36*s12*s13^4 + (216*s12^4 -
                    216*s12^3*s13 - 360*s12^2*s13^2 + 72*s12*s13^3)*s23 +
                  (108*s12^3 - 252*s12^2*s13)*s23^2 - 36*s12*s13*s23^3) +
                p1q*p2q^2*(72*s12^5 + 72*s12^4*s13 - 72*s12^3*s13^2 -
                  72*s12^2*s13^3 + (-99*s12^4 - 576*s12^3*s13 - 504*s12^2*
                     s13^2 - 36*s12*s13^3 - 9*s13^4)*s23 + (-405*s12^3 -
                    819*s12^2*s13 - 261*s12*s13^2 - 63*s13^3)*s23^2 +
                  (-270*s12^2 - 216*s12*s13 - 54*s13^2)*s23^3 - 36*s12*
                   s23^4) + p1q^2*p2q*((-18*s12^4 - 162*s12^3*s13 -
                    126*s12^2*s13^2 + 18*s12*s13^3)*s23 + (-144*s12^3 -
                    288*s12^2*s13)*s23^2 + (-54*s12^2 + 126*s12*s13 +
                    72*s13^2)*s23^3 + (72*s12 + 72*s13)*s23^4) +
                p1q^3*((45*s12^4 + 54*s12^3*s13 + 9*s12^2*s13^2)*s23 +
                  (-207*s12^3 - 297*s12^2*s13 - 54*s12*s13^2)*s23^2 +
                  (-135*s12^2 + 72*s12*s13 + 9*s13^2)*s23^3 +
                  (99*s12 - 9*s13)*s23^4 - 18*s23^5)) +
              p3q*(p2q^5*(-72*s12^4*s13 - 36*s12^3*s13^2 + 144*s12^2*s13^3 +
                  108*s12*s13^4 + (-144*s12^3*s13 + 72*s12^2*s13^2 +
                    216*s12*s13^3)*s23 + (-54*s12^2*s13 + 126*s12*s13^2)*
                   s23^2 + 18*s12*s13*s23^3) + p1q*p2q^4*(-72*s12^4*s13 -
                  72*s12^3*s13^2 + 72*s12^2*s13^3 + 72*s12*s13^4 +
                  (-36*s12^4 - 450*s12^3*s13 - 603*s12^2*s13^2 - 180*s12*
                     s13^3 + 9*s13^4)*s23 + (-72*s12^3 - 630*s12^2*s13 -
                    603*s12*s13^2 - 81*s13^3)*s23^2 + (-18*s12^2 - 234*s12*
                     s13 - 90*s13^2)*s23^3 + 18*s12*s23^4) + p1q^2*p2q^3*
                 ((54*s12^4 + 162*s12^3*s13 + 54*s12^2*s13^2 - 18*s12*s13^3 +
                    36*s13^4)*s23 + (306*s12^3 + 594*s12^2*s13 + 126*s12*
                     s13^2 - 18*s13^3)*s23^2 + (468*s12^2 + 594*s12*s13 +
                    90*s13^2)*s23^3 + (216*s12 + 144*s13)*s23^4) +
                p1q^3*p2q^2*((54*s12^3*s13 + 81*s12^2*s13^2 + 36*s12*s13^3 +
                    9*s13^4)*s23 + (144*s12^3 + 180*s12^2*s13 - 99*s12*
                     s13^2 - 99*s13^3)*s23^2 + (207*s12^2 + 108*s12*s13 -
                    45*s13^2)*s23^3 + (9*s12 + 9*s13)*s23^4 - 54*s23^5) +
                p1q^5*((81*s12^2 + 90*s12*s13 + 9*s13^2)*s23^3 +
                  (45*s12 - 27*s13)*s23^4 - 36*s23^5) + p1q^4*p2q*
                 ((54*s12^3 - 18*s12^2*s13 - 90*s12*s13^2 - 18*s13^3)*s23^2 +
                  (162*s12^2 + 144*s12*s13 + 90*s13^2)*s23^3 +
                  (90*s12 + 90*s13)*s23^4 - 18*s23^5)) +
              p3q^4*(p2q^2*(108*s12^5 + 144*s12^4*s13 - 36*s12^3*s13^2 -
                  72*s12^2*s13^3 + (216*s12^4 + 72*s12^3*s13 - 144*s12^2*
                     s13^2)*s23 + (126*s12^3 - 54*s12^2*s13 - 9*s12*s13^2 -
                    9*s13^3)*s23^2 + (18*s12^2 - 9*s13^2)*s23^3) +
                p1q*p2q*(36*s12^5 + 72*s12^4*s13 + 36*s12^3*s13^2 +
                  (45*s12^4 - 108*s12^3*s13 - 171*s12^2*s13^2 - 18*s12*s13^3)*
                   s23 + (-81*s12^3 - 243*s12^2*s13 - 18*s12*s13^2)*s23^2 +
                  (-90*s12^2 + 18*s12*s13 + 18*s13^2)*s23^3 + 18*s13*s23^4) +
                p1q^2*((108*s12^4 + 144*s12^3*s13 + 36*s12^2*s13^2)*s23 +
                  (-45*s12^3 - 153*s12^2*s13 - 36*s12*s13^2)*s23^2 -
                  117*s12^2*s23^3 + (27*s12 - 9*s13)*s23^4 - 9*s23^5)) +
              p3q^2*(p2q^4*(36*s12^5 - 144*s12^4*s13 - 288*s12^3*s13^2 +
                  108*s12*s13^4 + (72*s12^4 - 360*s12^3*s13 - 216*s12^2*
                     s13^2 + 216*s12*s13^3)*s23 + (27*s12^3 - 225*s12^2*s13 +
                    126*s12*s13^2 + 18*s13^3)*s23^2 + (-9*s12^2 + 18*s13^2)*
                   s23^3) + p1q*p2q^3*(36*s12^5 - 72*s12^4*s13 - 216*s12^3*
                   s13^2 - 72*s12^2*s13^3 + 36*s12*s13^4 + (-117*s12^4 -
                    720*s12^3*s13 - 756*s12^2*s13^2 - 180*s12*s13^3 -
                    27*s13^4)*s23 + (-351*s12^3 - 981*s12^2*s13 - 603*s12*
                     s13^2 - 117*s13^3)*s23^2 + (-198*s12^2 - 360*s12*s13 -
                    126*s13^2)*s23^3 - 36*s13*s23^4) + p1q^4*
                 ((-108*s12^3 - 126*s12^2*s13 - 18*s12*s13^2)*s23^2 +
                  (72*s12^2 + 180*s12*s13 + 18*s13^2)*s23^3 +
                  (153*s12 - 9*s13)*s23^4 - 27*s23^5) + p1q^3*p2q*
                 ((-27*s12^4 - 108*s12^3*s13 - 99*s12^2*s13^2 - 18*s12*s13^3)*
                   s23 + (-117*s12^3 - 387*s12^2*s13 - 270*s12*s13^2 -
                    36*s13^3)*s23^2 + (9*s12^2 - 54*s12*s13 + 27*s13^2)*
                   s23^3 + (81*s12 + 45*s13)*s23^4 - 18*s23^5) +
                p1q^2*p2q^2*((-144*s12^4 - 234*s12^3*s13 - 18*s12^2*s13^2 +
                    90*s12*s13^3 + 18*s13^4)*s23 + (-81*s12^3 - 27*s12^2*
                     s13 + 63*s12*s13^2 + 9*s13^3)*s23^2 + (243*s12^2 +
                    288*s12*s13 + 99*s13^2)*s23^3 + (198*s12 + 126*s13)*
                   s23^4 + 18*s23^5)))*Log(s12/(s12 + s13 + s23)))/
            (p1q*p3q^5*(4*s12^4 + 4*s12^3*s13)*s23^2 + p1q*p2q^5*
              (4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 - 4*p1q^5*p2q*s12*s23^5 +
             p1q^2*p2q^4*((4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
               (-8*s12^2*s13 - 12*s12*s13^2)*s23^3) + p1q^3*p2q^3*
              ((-8*s12^2*s13 - 12*s12*s13^2)*s23^3 + (4*s12^2 + 12*s12*s13)*
                s23^4) + p1q^4*p2q^2*((4*s12^2 + 12*s12*s13)*s23^4 - 4*s12*
                s23^5) + p3q^4*(p1q*p2q*(12*s12^4 + 4*s12^3*s13 -
                 8*s12^2*s13^2)*s23^2 + p1q^2*((4*s12^4 + 4*s12^3*s13)*
                  s23^2 + (-12*s12^3 - 8*s12^2*s13)*s23^3)) +
             p3q^3*(p1q*p2q^2*(12*s12^4 - 12*s12^3*s13 - 20*s12^2*s13^2 +
                 4*s12*s13^3)*s23^2 + p1q^2*p2q*((8*s12^4 - 8*s12^2*s13^2)*
                  s23^2 + (-32*s12^3 - 24*s12^2*s13 - 8*s12*s13^2)*s23^3) +
               p1q^3*((-12*s12^3 - 8*s12^2*s13)*s23^3 + (12*s12^2 +
                   4*s12*s13)*s23^4)) + p3q*(p1q*p2q^4*(-8*s12^3*s13 +
                 4*s12^2*s13^2 + 12*s12*s13^3)*s23^2 - 4*p1q^5*s12*s23^5 +
               p1q^2*p2q^3*((-8*s12^3*s13 + 8*s12*s13^3)*s23^2 +
                 (-8*s12^3 - 24*s12^2*s13 - 32*s12*s13^2)*s23^3) + p1q^3*
                p2q^2*((-8*s12^3 - 16*s12^2*s13 - 20*s12*s13^2)*s23^3 +
                 (20*s12^2 + 28*s12*s13)*s23^4) + p1q^4*p2q*
                ((16*s12^2 + 16*s12*s13)*s23^4 - 8*s12*s23^5)) +
             p3q^2*(p1q*p2q^3*(4*s12^4 - 20*s12^3*s13 - 12*s12^2*s13^2 +
                 12*s12*s13^3)*s23^2 + p1q^2*p2q^2*((4*s12^4 - 12*s12^3*s13 -
                   12*s12^2*s13^2 + 4*s12*s13^3)*s23^2 + (-28*s12^3 -
                   32*s12^2*s13 - 28*s12*s13^2)*s23^3) + p1q^3*p2q*
                ((-20*s12^3 - 16*s12^2*s13 - 8*s12*s13^2)*s23^3 +
                 (28*s12^2 + 20*s12*s13)*s23^4) + p1q^4*
                ((12*s12^2 + 4*s12*s13)*s23^4 - 4*s12*s23^5))) +
           ((p3q^6*((9*s12^3 + 9*s12^2*s13)*s23^2 + 9*s12^2*s23^3) +
              p2q^6*(36*s12^2*s13^3 + 72*s12*s13^4 + 36*s13^5 +
                (72*s12*s13^3 + 72*s13^4)*s23 + (9*s12*s13^2 + 45*s13^3)*
                 s23^2 + 9*s13^2*s23^3) + p1q^5*p2q*((-9*s12^2 - 90*s12*s13 -
                  81*s13^2)*s23^3 + (-9*s12 - 81*s13)*s23^4) +
              p1q*p2q^5*(36*s12^2*s13^3 + 72*s12*s13^4 + 36*s13^5 +
                (-135*s12^2*s13^2 - 234*s12*s13^3 - 99*s13^4)*s23 +
                (-225*s12*s13^2 - 225*s13^3)*s23^2 + (-18*s12*s13 -
                  108*s13^2)*s23^3 - 18*s13*s23^4) + p1q^3*p2q^3*(
                (-9*s12^2*s13^2 - 54*s12*s13^3 - 45*s13^4)*s23 +
                (-18*s12^3 - 18*s12^2*s13 + 207*s12*s13^2 + 171*s13^3)*
                 s23^2 + (-63*s12^2 - 90*s12*s13 + 171*s13^2)*s23^3 +
                (-63*s12 - 63*s13)*s23^4 - 18*s23^5) + p1q^4*p2q^2*(
                (18*s12^2*s13 + 126*s12*s13^2 + 108*s13^3)*s23^2 +
                (-72*s12*s13 + 18*s13^2)*s23^3 + (-9*s12 - 99*s13)*s23^4 -
                9*s23^5) + p1q^2*p2q^4*((54*s12^3*s13 + 18*s12^2*s13^2 -
                  198*s12*s13^3 - 162*s13^4)*s23 + (198*s12^2*s13 +
                  261*s12*s13^2 - 9*s13^3)*s23^2 + (216*s12*s13 + 225*s13^2)*
                 s23^3 + (9*s12 + 81*s13)*s23^4 + 9*s23^5) +
              p1q^6*((18*s12 + 18*s13)*s23^4 + 18*s23^5) +
              p3q^5*(p2q*(36*s12^4*s13 + 72*s12^3*s13^2 + 36*s12^2*s13^3 +
                  (72*s12^3*s13 + 72*s12^2*s13^2)*s23 + (18*s12^2*s13 -
                    18*s12*s13^2)*s23^2 - 18*s12*s13*s23^3) +
                p1q*((-27*s12^4 + 18*s12^3*s13 + 81*s12^2*s13^2 + 36*s12*
                     s13^3)*s23 + (27*s12^3 + 135*s12^2*s13 + 72*s12*s13^2)*
                   s23^2 + (36*s12^2 + 18*s12*s13)*s23^3 - 18*s12*s23^4)) +
              p3q^4*(p2q^2*(108*s12^4*s13 + 144*s12^3*s13^2 - 36*s12^2*
                   s13^3 - 72*s12*s13^4 + (216*s12^3*s13 + 72*s12^2*s13^2 -
                    144*s12*s13^3)*s23 + (-18*s12^3 + 90*s12^2*s13 -
                    63*s12*s13^2 + 9*s13^3)*s23^2 + (-18*s12^2 + 9*s13^2)*
                   s23^3) + p1q*p2q*(36*s12^4*s13 + 72*s12^3*s13^2 +
                  36*s12^2*s13^3 + (-9*s12^4 + 144*s12^3*s13 + 99*s12^2*
                     s13^2 - 90*s12*s13^3 - 36*s13^4)*s23 + (45*s12^3 +
                    135*s12^2*s13 - 126*s12*s13^2 - 72*s13^3)*s23^2 +
                  (54*s12^2 - 54*s12*s13 - 54*s13^2)*s23^3 - 18*s13*s23^4) +
                p1q^2*((-36*s12^4 + 36*s12^3*s13 + 108*s12^2*s13^2 +
                    36*s12*s13^3)*s23 + (117*s12^3 + 189*s12^2*s13 -
                    36*s12*s13^2 - 36*s13^3)*s23^2 + (45*s12^2 - 180*s12*
                     s13 - 72*s13^2)*s23^3 + (-99*s12 - 27*s13)*s23^4 +
                  9*s23^5)) + p3q^3*(p2q^3*(108*s12^4*s13 - 288*s12^2*s13^3 -
                  144*s12*s13^4 + 36*s13^5 + (216*s12^3*s13 - 216*s12^2*
                     s13^2 - 360*s12*s13^3 + 72*s13^4)*s23 + (144*s12^2*s13 -
                    180*s12*s13^2 + 36*s13^3)*s23^2 + 36*s12*s13*s23^3) +
                p1q*p2q^2*(72*s12^4*s13 + 72*s12^3*s13^2 - 72*s12^2*s13^3 -
                  72*s12*s13^4 + (27*s12^4 + 72*s12^3*s13 - 432*s12^2*s13^2 -
                    612*s12*s13^3 - 135*s13^4)*s23 + (45*s12^3 - 45*s12^2*
                     s13 - 531*s12*s13^2 - 225*s13^3)*s23^2 +
                  (54*s12^2 - 90*s13^2)*s23^3 + 36*s12*s23^4) + p1q^2*p2q*
                 ((-18*s12^4 + 54*s12^3*s13 + 54*s12^2*s13^2 + 18*s12*s13^3 +
                    36*s13^4)*s23 + (72*s12^3 + 144*s12^2*s13 + 72*s13^3)*
                   s23^2 + (18*s12^2 - 162*s12*s13 - 36*s13^2)*s23^3 +
                  (-72*s12 - 72*s13)*s23^4) + p1q^3*((-9*s12^4 + 18*s12^3*
                     s13 + 27*s12^2*s13^2)*s23 + (135*s12^3 + 45*s12^2*s13 -
                    162*s12*s13^2 - 36*s13^3)*s23^2 + (-81*s12^2 - 360*s12*
                     s13 - 45*s13^2)*s23^3 + (-171*s12 + 45*s13)*s23^4 +
                  54*s23^5)) + p3q*(p2q^5*(-72*s12^3*s13^2 - 36*s12^2*s13^3 +
                  144*s12*s13^4 + 108*s13^5 + (-144*s12^2*s13^2 + 72*s12*
                     s13^3 + 216*s13^4)*s23 + (-18*s12^2*s13 - 90*s12*s13^2 +
                    108*s13^3)*s23^2 - 18*s12*s13*s23^3) + p1q*p2q^4*
                 (-72*s12^3*s13^2 - 72*s12^2*s13^3 + 72*s12*s13^4 +
                  72*s13^5 + (-18*s12^3*s13 - 441*s12^2*s13^2 - 648*s12*
                     s13^3 - 225*s13^4)*s23 + (-18*s12^2*s13 - 621*s12*
                     s13^2 - 567*s13^3)*s23^2 + (-18*s12^2 - 18*s12*s13 -
                    270*s13^2)*s23^3 - 18*s12*s23^4) + p1q^2*p2q^3*
                 ((18*s12^4 + 90*s12^3*s13 + 90*s12^2*s13^2 - 162*s12*s13^3 -
                    180*s13^4)*s23 + (54*s12^3 + 558*s12^2*s13 + 738*s12*
                     s13^2 + 90*s13^3)*s23^2 + (36*s12^2 + 666*s12*s13 +
                    486*s13^2)*s23^3 + 216*s13*s23^4) + p1q^3*p2q^2*
                 ((18*s12^3*s13 + 99*s12^2*s13^2 + 108*s12*s13^3 + 27*s13^4)*
                   s23 + (-36*s12^3 + 252*s12^2*s13 + 567*s12*s13^2 +
                    243*s13^3)*s23^2 + (-99*s12^2 + 108*s12*s13 + 117*s13^2)*
                   s23^3 + (-117*s12 - 153*s13)*s23^4 - 54*s23^5) +
                p1q^4*p2q*((18*s12^3 + 90*s12^2*s13 + 18*s12*s13^2 -
                    54*s13^3)*s23^2 + (-18*s12^2 - 144*s12*s13 - 234*s13^2)*
                   s23^3 + (-18*s12 - 162*s13)*s23^4 + 18*s23^5) +
                p1q^5*((-45*s12^2 - 18*s12*s13 + 27*s13^2)*s23^3 +
                  (27*s12 + 99*s13)*s23^4 + 72*s23^5)) +
              p3q^2*(p2q^4*(36*s12^4*s13 - 144*s12^3*s13^2 - 288*s12^2*
                   s13^3 + 108*s13^5 + (72*s12^3*s13 - 360*s12^2*s13^2 -
                    216*s12*s13^3 + 216*s13^4)*s23 + (9*s12^3 + 45*s12^2*
                     s13 - 234*s12*s13^2 + 90*s13^3)*s23^2 +
                  (9*s12^2 - 18*s13^2)*s23^3) + p1q*p2q^3*(36*s12^4*s13 -
                  72*s12^3*s13^2 - 216*s12^2*s13^3 - 72*s12*s13^4 +
                  36*s13^5 + (9*s12^4 - 72*s12^3*s13 - 756*s12^2*s13^2 -
                    900*s12*s13^3 - 225*s13^4)*s23 + (27*s12^3 - 63*s12^2*
                     s13 - 729*s12*s13^2 - 495*s13^3)*s23^2 +
                  (18*s12^2 + 72*s12*s13 - 198*s13^2)*s23^3 + 36*s13*s23^4) +
                p1q^2*p2q^2*((36*s12^4 + 54*s12^3*s13 + 18*s12^2*s13^2 +
                    18*s12*s13^3 + 18*s13^4)*s23 + (81*s12^3 + 531*s12^2*
                     s13 + 729*s12*s13^2 + 279*s13^3)*s23^2 +
                  (81*s12^2 + 612*s12*s13 + 369*s13^2)*s23^3 +
                  (18*s12 + 90*s13)*s23^4 - 18*s23^5) + p1q^3*p2q*
                 ((-9*s12^4 - 36*s12^3*s13 - 81*s12^2*s13^2 - 54*s12*s13^3)*
                   s23 + (45*s12^3 + 27*s12^2*s13 - 162*s12*s13^2 -
                    108*s13^3)*s23^2 + (-45*s12^2 - 306*s12*s13 - 315*s13^2)*
                   s23^3 + (-81*s12 - 189*s13)*s23^4 + 18*s23^5) +
                p1q^4*((36*s12^3 - 18*s12^2*s13 - 54*s12*s13^2)*s23^2 +
                  (-144*s12^2 - 180*s12*s13 + 54*s13^2)*s23^3 +
                  (-81*s12 + 153*s13)*s23^4 + 99*s23^5)))*
             Log(s13/(s12 + s13 + s23)))/(p1q*p3q^5*(4*s12^3*s13 + 4*s12^2*
                s13^2)*s23^2 + p1q*p2q^5*(4*s12*s13^3 + 4*s13^4)*s23^2 -
             4*p1q^5*p2q*s13*s23^5 + p1q^2*p2q^4*((4*s12*s13^3 + 4*s13^4)*
                s23^2 + (-8*s12*s13^2 - 12*s13^3)*s23^3) +
             p1q^3*p2q^3*((-8*s12*s13^2 - 12*s13^3)*s23^3 + (4*s12*s13 +
                 12*s13^2)*s23^4) + p1q^4*p2q^2*((4*s12*s13 + 12*s13^2)*
                s23^4 - 4*s13*s23^5) + p3q^4*(p1q*p2q*(12*s12^3*s13 +
                 4*s12^2*s13^2 - 8*s12*s13^3)*s23^2 + p1q^2*
                ((4*s12^3*s13 + 4*s12^2*s13^2)*s23^2 + (-12*s12^2*s13 -
                   8*s12*s13^2)*s23^3)) + p3q^3*(p1q*p2q^2*(12*s12^3*s13 -
                 12*s12^2*s13^2 - 20*s12*s13^3 + 4*s13^4)*s23^2 + p1q^2*p2q*
                ((8*s12^3*s13 - 8*s12*s13^3)*s23^2 + (-32*s12^2*s13 -
                   24*s12*s13^2 - 8*s13^3)*s23^3) + p1q^3*
                ((-12*s12^2*s13 - 8*s12*s13^2)*s23^3 + (12*s12*s13 + 4*s13^2)*
                  s23^4)) + p3q*(p1q*p2q^4*(-8*s12^2*s13^2 + 4*s12*s13^3 +
                 12*s13^4)*s23^2 - 4*p1q^5*s13*s23^5 + p1q^2*p2q^3*
                ((-8*s12^2*s13^2 + 8*s13^4)*s23^2 + (-8*s12^2*s13 -
                   24*s12*s13^2 - 32*s13^3)*s23^3) + p1q^3*p2q^2*
                ((-8*s12^2*s13 - 16*s12*s13^2 - 20*s13^3)*s23^3 +
                 (20*s12*s13 + 28*s13^2)*s23^4) + p1q^4*p2q*
                ((16*s12*s13 + 16*s13^2)*s23^4 - 8*s13*s23^5)) +
             p3q^2*(p1q*p2q^3*(4*s12^3*s13 - 20*s12^2*s13^2 - 12*s12*s13^3 +
                 12*s13^4)*s23^2 + p1q^2*p2q^2*((4*s12^3*s13 - 12*s12^2*
                    s13^2 - 12*s12*s13^3 + 4*s13^4)*s23^2 + (-28*s12^2*s13 -
                   32*s12*s13^2 - 28*s13^3)*s23^3) + p1q^3*p2q*
                ((-20*s12^2*s13 - 16*s12*s13^2 - 8*s13^3)*s23^3 +
                 (28*s12*s13 + 20*s13^2)*s23^4) + p1q^4*
                ((12*s12*s13 + 4*s13^2)*s23^4 - 4*s13*s23^5))) +
           ((p2q^5*(36*s12^2*s13^3 + 36*s12*s13^4 + (54*s12*s13^3 + 18*s13^4)*
                 s23 + 18*s13^3*s23^2) + p1q*p2q^4*(36*s12^2*s13^3 +
                36*s12*s13^4 + (-54*s12^2*s13^2 + 18*s13^4)*s23 -
                72*s12*s13^2*s23^2 - 18*s13^2*s23^3) + p1q^2*p2q^3*(
                (-45*s12^3*s13 - 153*s12^2*s13^2 - 117*s12*s13^3 - 9*s13^4)*
                 s23 + (-63*s12^2*s13 - 171*s12*s13^2 - 54*s13^3)*s23^2 +
                (-18*s12*s13 - 45*s13^2)*s23^3) + p1q^4*p2q*(
                (-9*s12^2 - 9*s12*s13)*s23^3 - 9*s12*s23^4) +
              p1q^3*p2q^2*((9*s12^3 + 72*s12^2*s13 + 72*s12*s13^2 + 9*s13^3)*
                 s23^2 + (9*s12^2 + 90*s12*s13 + 36*s13^2)*s23^3 +
                27*s13*s23^4) + p3q^4*(p2q*(36*s12^4*s13 + 36*s12^3*s13^2 +
                  (54*s12^3*s13 + 18*s12^2*s13^2)*s23 + 18*s12^2*s13*s23^2) +
                p1q*((-18*s12^4 - 36*s12^3*s13 - 18*s12^2*s13^2)*s23 +
                  (-36*s12^3 - 36*s12^2*s13)*s23^2 - 18*s12^2*s23^3)) +
              p3q^3*(p2q^2*(72*s12^4*s13 - 72*s12^2*s13^3 + (108*s12^3*s13 -
                    72*s12^2*s13^2 - 36*s12*s13^3)*s23 + (36*s12^2*s13 -
                    36*s12*s13^2)*s23^2) + p1q*p2q*(36*s12^4*s13 +
                  36*s12^3*s13^2 + (-36*s12^4 - 36*s12^3*s13 - 36*s12^2*
                     s13^2)*s23 + (-72*s12^3 - 90*s12^2*s13 - 18*s12*s13^2)*
                   s23^2 + (-36*s12^2 - 18*s12*s13)*s23^3) +
                p1q^2*((-18*s12^4 - 36*s12^3*s13 - 18*s12^2*s13^2)*s23 +
                  (-9*s12^3 + 9*s12^2*s13 + 18*s12*s13^2)*s23^2 +
                  (27*s12^2 + 36*s12*s13)*s23^3 + 18*s12*s23^4)) +
              p3q^2*(p2q^3*(36*s12^4*s13 - 108*s12^3*s13^2 - 108*s12^2*
                   s13^3 + 36*s12*s13^4 + (54*s12^3*s13 - 198*s12^2*s13^2 -
                    18*s12*s13^3 + 18*s13^4)*s23 + (18*s12^2*s13 -
                    72*s12*s13^2 + 18*s13^3)*s23^2) + p1q*p2q^2*
                 (36*s12^4*s13 - 36*s12^3*s13^2 - 72*s12^2*s13^3 +
                  (-36*s12^4 - 90*s12^3*s13 - 270*s12^2*s13^2 - 90*s12*
                     s13^3 + 18*s13^4)*s23 + (-72*s12^3 - 198*s12^2*s13 -
                    180*s12*s13^2 + 18*s13^3)*s23^2 + (-36*s12^2 -
                    72*s12*s13)*s23^3) + p1q^3*((27*s12^3 + 45*s12^2*s13 +
                    18*s12*s13^2)*s23^2 + (36*s12^2 + 27*s12*s13)*s23^3 +
                  9*s12*s23^4) + p1q^2*p2q*((-27*s12^4 - 117*s12^3*s13 -
                    135*s12^2*s13^2 - 45*s12*s13^3)*s23 + (-36*s12^3 -
                    117*s12^2*s13 - 63*s12*s13^2)*s23^2 + (-9*s12^2 +
                    18*s13^2)*s23^3 + 18*s13*s23^4)) +
              p3q*(p2q^4*(-72*s12^3*s13^2 + 72*s12*s13^4 +
                  (-108*s12^2*s13^2 + 72*s12*s13^3 + 36*s13^4)*s23 +
                  (-36*s12*s13^2 + 36*s13^3)*s23^2) + p1q*p2q^3*
                 (-72*s12^3*s13^2 - 36*s12^2*s13^3 + 36*s12*s13^4 +
                  (-54*s12^3*s13 - 306*s12^2*s13^2 - 126*s12*s13^3 +
                    18*s13^4)*s23 + (-108*s12^2*s13 - 270*s12*s13^2 -
                    18*s13^3)*s23^2 + (-54*s12*s13 - 36*s13^2)*s23^3) +
                p1q^4*((-9*s12^2 - 9*s12*s13)*s23^3 - 9*s12*s23^4) +
                p1q^2*p2q^2*((-27*s12^4 - 108*s12^3*s13 - 180*s12^2*s13^2 -
                    108*s12*s13^3 - 9*s13^4)*s23 + (-45*s12^3 - 63*s12^2*
                     s13 - 90*s12*s13^2 - 36*s13^3)*s23^2 + (-18*s12^2 +
                    72*s12*s13 + 9*s13^2)*s23^3 + 36*s13*s23^4) +
                p1q^3*p2q*((18*s12^3 + 81*s12^2*s13 + 72*s12*s13^2 + 9*s13^3)*
                   s23^2 + (9*s12^2 + 81*s12*s13 + 36*s13^2)*s23^3 +
                  (-9*s12 + 27*s13)*s23^4)))*Log((s12 + s13)/(s12 + s13 +
                s23)))/(2*p1q*p3q^4*s12^3*s13*s23^2 + 2*p1q*p2q^4*s12*s13^3*
              s23^2 + 2*p1q^4*p2q*s12*s13*s23^4 + p1q^2*p2q^3*
              (2*s12*s13^3*s23^2 - 4*s12*s13^2*s23^3) + p1q^3*p2q^2*
              (-4*s12*s13^2*s23^3 + 2*s12*s13*s23^4) +
             p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*s23^2 + p1q^2*
                (2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
             p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*
                s23^2 + p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
                 (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) + p1q^3*
                (-4*s12^2*s13*s23^3 + 2*s12*s13*s23^4)) +
             p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 + 2*p1q^4*
                s12*s13*s23^4 + p1q^2*p2q^2*((-4*s12^2*s13^2 + 2*s12*s13^3)*
                  s23^2 + (-4*s12^2*s13 - 8*s12*s13^2)*s23^3) + p1q^3*p2q*
                ((-4*s12^2*s13 - 4*s12*s13^2)*s23^3 + 4*s12*s13*s23^4))) +
           ((p3q^6*((-9*s12^4 + 9*s12^2*s13^2)*s23^2 + (-9*s12^3 +
                  9*s12^2*s13)*s23^3) + p2q^6*(-144*s12^3*s13^3 -
                288*s12^2*s13^4 - 144*s12*s13^5 + (-252*s12^2*s13^3 -
                  288*s12*s13^4 - 36*s13^5)*s23 + (-9*s12^2*s13^2 -
                  108*s12*s13^3 - 27*s13^4)*s23^2 + (-9*s12*s13^2 + 9*s13^3)*
                 s23^3) + p1q*p2q^5*(-144*s12^3*s13^3 - 288*s12^2*s13^4 -
                144*s12*s13^5 + (351*s12^3*s13^2 + 567*s12^2*s13^3 +
                  153*s12*s13^4 - 63*s13^5)*s23 + (585*s12^2*s13^2 +
                  720*s12*s13^3 + 63*s13^4)*s23^2 + (18*s12^2*s13 +
                  234*s12*s13^2 + 108*s13^3)*s23^3 + (18*s12*s13 - 18*s13^2)*
                 s23^4) + p1q^2*p2q^4*((-36*s12^4*s13 + 288*s12^3*s13^2 +
                  900*s12^2*s13^3 + 576*s12*s13^4)*s23 + (-288*s12^3*s13 -
                  171*s12^2*s13^2 + 576*s12*s13^3 + 243*s13^4)*s23^2 +
                (-396*s12^2*s13 - 531*s12*s13^2 + 99*s13^3)*s23^3 +
                (-9*s12^2 - 144*s12*s13 - 135*s13^2)*s23^4 + (-9*s12 + 9*s13)*
                 s23^5) + p1q^6*((-18*s12^2 + 18*s13^2)*s23^4 +
                (-18*s12 + 18*s13)*s23^5) + p1q^5*p2q*((9*s12^3 + 117*s12^2*
                   s13 + 63*s12*s13^2 - 45*s13^3)*s23^3 + (-9*s12^2 +
                  126*s12*s13 - 9*s13^2)*s23^4 + (-18*s12 + 36*s13)*s23^5) +
              p1q^3*p2q^3*((9*s12^3*s13^2 + 81*s12^2*s13^3 + 63*s12*s13^4 -
                  9*s13^5)*s23 + (-216*s12^3*s13 - 927*s12^2*s13^2 -
                  612*s12*s13^3 + 27*s13^4)*s23^2 + (45*s12^3 - 153*s12^2*
                   s13 - 999*s12*s13^2 - 261*s13^3)*s23^3 +
                (63*s12^2 + 90*s12*s13 - 243*s13^2)*s23^4 + (18*s12 + 54*s13)*
                 s23^5) + p1q^4*p2q^2*((-18*s12^3*s13 - 180*s12^2*s13^2 -
                  126*s12*s13^3 + 36*s13^4)*s23^2 + (36*s12^3 + 324*s12^2*
                   s13 + 72*s12*s13^2 - 36*s13^3)*s23^3 + (45*s12^2 +
                  432*s12*s13 + 45*s13^2)*s23^4 + (9*s12 + 117*s13)*s23^5) +
              p3q^5*(p2q*(-144*s12^5*s13 - 288*s12^4*s13^2 - 144*s12^3*
                   s13^3 + (-252*s12^4*s13 - 288*s12^3*s13^2 - 36*s12^2*
                     s13^3)*s23 + (-90*s12^3*s13 - 36*s12^2*s13^2 -
                    18*s12*s13^3)*s23^2 + (18*s12^2*s13 - 18*s12*s13^2)*
                   s23^3) + p1q*((63*s12^5 + 27*s12^4*s13 - 63*s12^3*s13^2 -
                    27*s12^2*s13^3)*s23 + (45*s12^4 - 36*s12^3*s13 -
                    9*s12^2*s13^2)*s23^2 + (18*s12^2*s13 - 18*s12*s13^2)*
                   s23^3 + (18*s12^2 - 18*s12*s13)*s23^4)) +
              p3q^4*(p2q^2*(-432*s12^5*s13 - 576*s12^4*s13^2 + 144*s12^3*
                   s13^3 + 288*s12^2*s13^4 + (-756*s12^4*s13 - 360*s12^3*
                     s13^2 + 468*s12^2*s13^3 + 72*s12*s13^4)*s23 +
                  (18*s12^4 - 324*s12^3*s13 + 81*s12^2*s13^2 + 72*s12*s13^3 +
                    9*s13^4)*s23^2 + (18*s12^3 - 18*s12^2*s13 - 9*s12*s13^2 +
                    9*s13^3)*s23^3) + p1q*p2q*(-144*s12^5*s13 - 288*s12^4*
                   s13^2 - 144*s12^3*s13^3 + (117*s12^5 + 135*s12^4*s13 +
                    333*s12^3*s13^2 + 369*s12^2*s13^3 + 54*s12*s13^4)*s23 +
                  (171*s12^4 + 522*s12^3*s13 + 693*s12^2*s13^2 + 126*s12*
                     s13^3)*s23^2 + (54*s12^3 + 324*s12^2*s13 + 72*s12*
                     s13^2 - 18*s13^3)*s23^3 + (18*s12*s13 - 18*s13^2)*
                   s23^4) + p1q^2*((72*s12^5 - 36*s12^4*s13 - 144*s12^3*
                     s13^2 - 36*s12^2*s13^3)*s23 + (-135*s12^4 - 216*s12^3*
                     s13 + 99*s12^2*s13^2 + 36*s12*s13^3)*s23^2 +
                  (-171*s12^3 + 99*s12^2*s13)*s23^3 + (27*s12^2 - 36*s12*
                     s13 + 9*s13^2)*s23^4 + (-9*s12 + 9*s13)*s23^5)) +
              p3q^3*(p2q^3*(-432*s12^5*s13 + 1152*s12^3*s13^3 + 576*s12^2*
                   s13^4 - 144*s12*s13^5 + (-756*s12^4*s13 + 648*s12^3*
                     s13^2 + 1368*s12^2*s13^3 - 72*s12*s13^4 - 36*s13^5)*
                   s23 + (-360*s12^3*s13 + 540*s12^2*s13^2 + 144*s12*s13^3 -
                    36*s13^4)*s23^2 + (-36*s12^2*s13 + 36*s12*s13^2)*s23^3) +
                p1q*p2q^2*(-288*s12^5*s13 - 288*s12^4*s13^2 + 288*s12^3*
                   s13^3 + 288*s12^2*s13^4 + (117*s12^5 + 567*s12^4*s13 +
                    1872*s12^3*s13^2 + 1764*s12^2*s13^3 + 315*s12*s13^4 -
                    27*s13^5)*s23 + (243*s12^4 + 1530*s12^3*s13 + 2178*s12^2*
                     s13^2 + 774*s12*s13^3 + 27*s13^4)*s23^2 +
                  (90*s12^3 + 666*s12^2*s13 + 414*s12*s13^2 + 54*s13^3)*
                   s23^3 + (-36*s12^2 + 36*s12*s13)*s23^4) + p1q^2*p2q*
                 ((108*s12^5 + 432*s12^4*s13 + 792*s12^3*s13^2 + 504*s12^2*
                     s13^3 + 36*s12*s13^4)*s23 + (-54*s12^4 + 234*s12^3*s13 +
                    522*s12^2*s13^2 + 18*s12*s13^3)*s23^2 + (-198*s12^3 -
                    72*s12^2*s13 - 234*s12*s13^2 - 108*s13^3)*s23^3 +
                  (-36*s12^2 - 108*s12*s13 - 108*s13^2)*s23^4) +
                p1q^3*((9*s12^5 - 63*s12^4*s13 - 81*s12^3*s13^2 - 9*s12^2*
                     s13^3)*s23 + (-225*s12^4 - 54*s12^3*s13 + 297*s12^2*
                     s13^2 + 54*s12*s13^3)*s23^2 + (-9*s12^3 + 387*s12^2*
                     s13 - 45*s12*s13^2 - 9*s13^3)*s23^3 + (207*s12^2 -
                    90*s12*s13 + 9*s13^2)*s23^4 + (-18*s12 + 18*s13)*
                   s23^5)) + p3q^2*(p2q^4*(-144*s12^5*s13 + 576*s12^4*s13^2 +
                  1152*s12^3*s13^3 - 432*s12*s13^5 + (-252*s12^4*s13 +
                    1224*s12^3*s13^2 + 936*s12^2*s13^3 - 648*s12*s13^4 -
                    108*s13^5)*s23 + (-9*s12^4 - 108*s12^3*s13 + 639*s12^2*
                     s13^2 - 108*s12*s13^3 - 126*s13^4)*s23^2 +
                  (-9*s12^3 + 9*s12^2*s13 + 18*s12*s13^2 - 18*s13^3)*s23^3) +
                p1q*p2q^3*(-144*s12^5*s13 + 288*s12^4*s13^2 + 864*s12^3*
                   s13^3 + 288*s12^2*s13^4 - 144*s12*s13^5 + (63*s12^5 +
                    621*s12^4*s13 + 2700*s12^3*s13^2 + 3024*s12^2*s13^3 +
                    837*s12*s13^4 - 45*s13^5)*s23 + (117*s12^4 + 1278*s12^3*
                     s13 + 2826*s12^2*s13^2 + 1962*s12*s13^3 + 153*s13^4)*
                   s23^2 + (54*s12^3 + 486*s12^2*s13 + 738*s12*s13^2 +
                    234*s13^3)*s23^3 + (-36*s12*s13 + 36*s13^2)*s23^4) +
                p1q^2*p2q^2*((72*s12^5 + 720*s12^4*s13 + 1224*s12^3*s13^2 +
                    792*s12^2*s13^3 + 216*s12*s13^4)*s23 + (9*s12^4 -
                    108*s12^3*s13 - 576*s12^2*s13^2 - 144*s12*s13^3 +
                    99*s13^4)*s23^2 + (-171*s12^3 - 1341*s12^2*s13 -
                    1215*s12*s13^2 - 117*s13^3)*s23^3 + (-90*s12^2 -
                    540*s12*s13 - 234*s13^2)*s23^4 + (18*s12 - 18*s13)*
                   s23^5) + p1q^4*((-36*s12^4 + 126*s12^3*s13 + 180*s12^2*
                     s13^2 + 18*s12*s13^3)*s23^2 + (216*s12^3 + 234*s12^2*
                     s13 - 180*s12*s13^2 - 18*s13^3)*s23^3 + (171*s12^2 -
                    234*s12*s13 + 9*s13^2)*s23^4 + (-81*s12 + 27*s13)*
                   s23^5) + p1q^3*p2q*((9*s12^5 + 63*s12^4*s13 + 189*s12^3*
                     s13^2 + 153*s12^2*s13^3 + 18*s12*s13^4)*s23 +
                  (-189*s12^4 - 486*s12^3*s13 - 153*s12^2*s13^2 + 90*s12*
                     s13^3 + 18*s13^4)*s23^2 + (-117*s12^3 - 243*s12^2*s13 -
                    45*s12*s13^2 - 99*s13^3)*s23^3 + (63*s12^2 + 54*s12*s13 -
                    63*s13^2)*s23^4 + (-18*s12 + 54*s13)*s23^5)) +
              p3q*(p2q^5*(288*s12^4*s13^2 + 144*s12^3*s13^3 - 576*s12^2*
                   s13^4 - 432*s12*s13^5 + (504*s12^3*s13^2 - 180*s12^2*
                     s13^3 - 792*s12*s13^4 - 108*s13^5)*s23 +
                  (18*s12^3*s13 + 216*s12^2*s13^2 - 270*s12*s13^3 -
                    108*s13^4)*s23^2 + (18*s12^2*s13 - 18*s12*s13^2)*s23^3) +
                p1q*p2q^4*(288*s12^4*s13^2 + 288*s12^3*s13^3 - 288*s12^2*
                   s13^4 - 288*s12*s13^5 + (162*s12^4*s13 + 1575*s12^3*
                     s13^2 + 2223*s12^2*s13^3 + 729*s12*s13^4 - 81*s13^5)*
                   s23 + (306*s12^3*s13 + 1935*s12^2*s13^2 + 2034*s12*s13^3 +
                    189*s13^4)*s23^2 + (18*s12^3 + 144*s12^2*s13 + 648*s12*
                     s13^2 + 270*s13^3)*s23^3 + (18*s12^2 - 18*s12*s13)*
                   s23^4) + p1q^2*p2q^3*((36*s12^5 + 216*s12^4*s13 +
                    576*s12^3*s13^2 + 1152*s12^2*s13^3 + 756*s12*s13^4)*s23 +
                  (36*s12^4 - 630*s12^3*s13 - 1170*s12^2*s13^2 + 234*s12*
                     s13^3 + 234*s13^4)*s23^2 + (-1422*s12^2*s13 - 1656*s12*
                     s13^2 - 54*s13^3)*s23^3 + (-612*s12*s13 - 288*s13^2)*
                   s23^4) + p1q^5*((45*s12^3 - 63*s12^2*s13 - 117*s12*s13^2 -
                    9*s13^3)*s23^3 + (-45*s12^2 - 162*s12*s13 + 27*s13^2)*
                   s23^4 + (-90*s12 + 36*s13)*s23^5) + p1q^4*p2q*
                 ((-18*s12^4 - 144*s12^3*s13 + 144*s12*s13^3 + 18*s13^4)*
                   s23^2 + (90*s12^3 + 216*s12^2*s13 + 270*s12*s13^2 -
                    72*s13^3)*s23^3 + (72*s12^2 + 270*s12*s13 - 18*s13^2)*
                   s23^4 + (-36*s12 + 72*s13)*s23^5) + p1q^3*p2q^2*
                 ((-18*s12^4*s13 - 153*s12^3*s13^2 - 189*s12^2*s13^3 -
                    63*s12*s13^4 - 9*s13^5)*s23 + (-72*s12^4 - 972*s12^3*
                     s13 - 1701*s12^2*s13^2 - 684*s12*s13^3 + 45*s13^4)*
                   s23^2 + (-27*s12^3 - 819*s12^2*s13 - 891*s12*s13^2 -
                    171*s13^3)*s23^3 + (99*s12^2 + 198*s12*s13 - 99*s13^2)*
                   s23^4 + (54*s12 + 126*s13)*s23^5)))*
             Log(s23/(s12 + s13 + s23)))/(p1q*p3q^5*(4*s12^4*s13 + 4*s12^3*
                s13^2)*s23^2 + p1q*p2q^5*(4*s12^2*s13^3 + 4*s12*s13^4)*
              s23^2 - 4*p1q^5*p2q*s12*s13*s23^5 + p1q^2*p2q^4*
              ((4*s12^2*s13^3 + 4*s12*s13^4)*s23^2 + (-8*s12^2*s13^2 -
                 12*s12*s13^3)*s23^3) + p1q^3*p2q^3*((-8*s12^2*s13^2 -
                 12*s12*s13^3)*s23^3 + (4*s12^2*s13 + 12*s12*s13^2)*s23^4) +
             p1q^4*p2q^2*((4*s12^2*s13 + 12*s12*s13^2)*s23^4 - 4*s12*s13*
                s23^5) + p3q^4*(p1q*p2q*(12*s12^4*s13 + 4*s12^3*s13^2 -
                 8*s12^2*s13^3)*s23^2 + p1q^2*((4*s12^4*s13 + 4*s12^3*s13^2)*
                  s23^2 + (-12*s12^3*s13 - 8*s12^2*s13^2)*s23^3)) +
             p3q^3*(p1q*p2q^2*(12*s12^4*s13 - 12*s12^3*s13^2 - 20*s12^2*
                  s13^3 + 4*s12*s13^4)*s23^2 + p1q^2*p2q*
                ((8*s12^4*s13 - 8*s12^2*s13^3)*s23^2 + (-32*s12^3*s13 -
                   24*s12^2*s13^2 - 8*s12*s13^3)*s23^3) + p1q^3*
                ((-12*s12^3*s13 - 8*s12^2*s13^2)*s23^3 + (12*s12^2*s13 +
                   4*s12*s13^2)*s23^4)) + p3q*(p1q*p2q^4*(-8*s12^3*s13^2 +
                 4*s12^2*s13^3 + 12*s12*s13^4)*s23^2 - 4*p1q^5*s12*s13*
                s23^5 + p1q^2*p2q^3*((-8*s12^3*s13^2 + 8*s12*s13^4)*s23^2 +
                 (-8*s12^3*s13 - 24*s12^2*s13^2 - 32*s12*s13^3)*s23^3) +
               p1q^3*p2q^2*((-8*s12^3*s13 - 16*s12^2*s13^2 - 20*s12*s13^3)*
                  s23^3 + (20*s12^2*s13 + 28*s12*s13^2)*s23^4) + p1q^4*p2q*
                ((16*s12^2*s13 + 16*s12*s13^2)*s23^4 - 8*s12*s13*s23^5)) +
             p3q^2*(p1q*p2q^3*(4*s12^4*s13 - 20*s12^3*s13^2 - 12*s12^2*
                  s13^3 + 12*s12*s13^4)*s23^2 + p1q^2*p2q^2*
                ((4*s12^4*s13 - 12*s12^3*s13^2 - 12*s12^2*s13^3 +
                   4*s12*s13^4)*s23^2 + (-28*s12^3*s13 - 32*s12^2*s13^2 -
                   28*s12*s13^3)*s23^3) + p1q^3*p2q*((-20*s12^3*s13 -
                   16*s12^2*s13^2 - 8*s12*s13^3)*s23^3 + (28*s12^2*s13 +
                   20*s12*s13^2)*s23^4) + p1q^4*((12*s12^2*s13 + 4*s12*s13^2)*
                  s23^4 - 4*s12*s13*s23^5)))) +
         Log((p1q + p3q)/(p1q + p2q + p3q))*
          (((p2q^5*(s12*s13^3 + s13^4 + s13^3*s23) + p3q^5*(-s12^4 -
                s12^3*s13 + (-2*s12^3 - s12^2*s13)*s23 - s12^2*s23^2) +
              p1q*p2q^4*(s12*s13^3 + s13^4 + (-3*s12*s13^2 - 2*s13^3)*s23 -
                3*s13^2*s23^2) + p1q^2*p2q^3*(4*s12^2*s13^2 + 7*s12*s13^3 +
                3*s13^4 - s13^3*s23 + (3*s12*s13 - s13^2)*s23^2 +
                3*s13*s23^3) + p1q^4*p2q*(-4*s12^4 - 10*s12^3*s13 -
                8*s12^2*s13^2 - 2*s12*s13^3 + (-12*s12^3 - 18*s12^2*s13 -
                  8*s12*s13^2 - 2*s13^3)*s23 + (-12*s12^2 - 3*s12*s13 +
                  3*s13^2)*s23^2 + (-6*s12 + 3*s13)*s23^3 - 2*s23^4) +
              p1q^5*((2*s12^3 + 4*s12^2*s13 + 2*s12*s13^2)*s23 +
                (4*s12^2 + 5*s12*s13 + s13^2)*s23^2 + s12*s23^3 - s23^4) +
              p1q^3*p2q^2*(2*s12^2*s13^2 + 3*s12*s13^3 + s13^4 +
                (-5*s12*s13^2 - 6*s13^3)*s23 + (5*s12*s13 - 2*s13^2)*s23^2 +
                (-s12 + 4*s13)*s23^3 - s23^4) + p3q^4*(p2q*(2*s12^4 +
                  5*s12^3*s13 + 3*s12^2*s13^2 + (4*s12^3 + 7*s12^2*s13 +
                    2*s12*s13^2)*s23 + (2*s12^2 + 2*s12*s13)*s23^2) +
                p1q*(-6*s12^4 - 7*s12^3*s13 - s12^2*s13^2 + (-11*s12^3 -
                    6*s12^2*s13)*s23 + (-3*s12^2 + 2*s12*s13)*s23^2 +
                  2*s12*s23^3)) + p3q^3*(p2q^2*(-s12^4 - 7*s12^3*s13 -
                  9*s12^2*s13^2 - 3*s12*s13^3 + (-2*s12^3 - 11*s12^2*s13 -
                    8*s12*s13^2 - s13^3)*s23 + (-s12^2 - 4*s12*s13 - s13^2)*
                   s23^2) + p1q*p2q*(-2*s12^4 + 6*s12^3*s13 + 10*s12^2*
                   s13^2 + 2*s12*s13^3 + (-10*s12^3 + 6*s12^2*s13 +
                    8*s12*s13^2)*s23 + (-12*s12^2 + 4*s12*s13 + 2*s13^2)*
                   s23^2 + (-4*s12 + 2*s13)*s23^3) + p1q^2*(-11*s12^4 -
                  15*s12^3*s13 - 4*s12^2*s13^2 + (-16*s12^3 - 9*s12^2*s13)*
                   s23 + (4*s12^2 + 9*s12*s13)*s23^2 + (8*s12 - s13)*s23^3 -
                  s23^4)) + p3q*(p2q^4*(-3*s12^2*s13^2 - 5*s12*s13^3 -
                  2*s13^4 + (-4*s12*s13^2 - 3*s13^3)*s23 - s13^2*s23^2) +
                p1q*p2q^3*(4*s12^2*s13^2 + 8*s12*s13^3 + 4*s13^4 +
                  (2*s12^2*s13 + 10*s12*s13^2 + 8*s13^3)*s23 +
                  (4*s12*s13 + 6*s13^2)*s23^2 + 2*s13*s23^3) + p1q^3*p2q*
                 (-12*s12^4 - 22*s12^3*s13 - 10*s12^2*s13^2 +
                  (-32*s12^3 - 34*s12^2*s13 - 6*s12*s13^2 - 2*s13^3)*s23 +
                  (-22*s12^2 + 8*s12*s13 + 12*s13^2)*s23^2 +
                  (-2*s12 + 14*s13)*s23^3) + p1q^4*(-2*s12^4 - 4*s12^3*s13 -
                  2*s12^2*s13^2 + (4*s12^3 + 8*s12^2*s13 + 4*s12*s13^2)*s23 +
                  (15*s12^2 + 15*s12*s13 + 2*s13^2)*s23^2 + (6*s12 - s13)*
                   s23^3 - 3*s23^4) + p1q^2*p2q^2*(-(s12^2*s13^2) -
                  s12*s13^3 + (-6*s12^2*s13 - 22*s12*s13^2 - 15*s13^3)*s23 +
                  (s12^2 - 7*s12*s13 - 17*s13^2)*s23^2 - 3*s13*s23^3 -
                  s23^4)) + p3q^2*(p2q^3*(3*s12^3*s13 + 9*s12^2*s13^2 +
                  7*s12*s13^3 + s13^4 + (5*s12^2*s13 + 10*s12*s13^2 +
                    3*s13^3)*s23 + (2*s12*s13 + 2*s13^2)*s23^2) +
                p1q*p2q^2*(-3*s12^3*s13 - 9*s12^2*s13^2 - 7*s12*s13^3 -
                  s13^4 + (s12^3 - 6*s12^2*s13 - 19*s12*s13^2 - 10*s13^3)*
                   s23 + (3*s12^2 - 6*s12*s13 - 13*s13^2)*s23^2 +
                  (2*s12 - 4*s13)*s23^3) + p1q^3*(-8*s12^4 - 13*s12^3*s13 -
                  5*s12^2*s13^2 + (-5*s12^3 + 2*s12*s13^2)*s23 +
                  (17*s12^2 + 17*s12*s13 + s13^2)*s23^2 + (11*s12 - 2*s13)*
                   s23^3 - 3*s23^4) + p1q^2*p2q*(-12*s12^4 - 11*s12^3*s13 +
                  5*s12^2*s13^2 + 4*s12*s13^3 + (-34*s12^3 - 17*s12^2*s13 +
                    8*s12*s13^2)*s23 + (-24*s12^2 + 13*s12*s13 + 11*s13^2)*
                   s23^2 + 13*s13*s23^3 + 2*s23^4)))*Log(s12/(s12 + s13 +
                s23)))/(-4*p1q*p2q^4*s12*s13^4 + p1q*p3q^4*(4*s12^4*s13 + 4*
                s12^3*s13*s23) + p1q^2*p2q^3*(4*s12^2*s13^3 - 4*s12*s13^4 +
               12*s12*s13^3*s23) + p1q^3*p2q^2*(4*s12^2*s13^3 +
               (-8*s12^2*s13^2 + 12*s12*s13^3)*s23 - 12*s12*s13^2*s23^2) +
             p1q^5*(4*s12^2*s13*s23^2 + 4*s12*s13*s23^3) +
             p1q^4*p2q*(-8*s12^2*s13^2*s23 + (4*s12^2*s13 - 12*s12*s13^2)*
                s23^2 + 4*s12*s13*s23^3) + p3q^3*(p1q*p2q*(4*s12^4*s13 -
                 12*s12^3*s13^2 + (4*s12^3*s13 - 8*s12^2*s13^2)*s23) + p1q^2*
                (8*s12^4*s13 - 8*s12^2*s13*s23^2)) +
             p3q^2*(p1q*p2q^2*(-12*s12^3*s13^2 + 12*s12^2*s13^3 +
                 (-8*s12^2*s13^2 + 4*s12*s13^3)*s23) + p1q^2*p2q*
                (4*s12^4*s13 - 20*s12^3*s13^2 + (-4*s12^3*s13 - 16*s12^2*
                    s13^2)*s23 + (-8*s12^2*s13 - 8*s12*s13^2)*s23^2) + p1q^3*
                (4*s12^4*s13 - 12*s12^3*s13*s23 - 12*s12^2*s13*s23^2 +
                 4*s12*s13*s23^3)) + p3q*(p1q*p2q^3*(12*s12^2*s13^3 -
                 4*s12*s13^4 + 4*s12*s13^3*s23) + p1q^2*p2q^2*
                (-8*s12^3*s13^2 + 16*s12^2*s13^3 + (-8*s12^2*s13^2 +
                   16*s12*s13^3)*s23 - 8*s12*s13^2*s23^2) + p1q^3*p2q*
                (-8*s12^3*s13^2 + (-8*s12^3*s13 - 16*s12^2*s13^2)*s23 +
                 (-4*s12^2*s13 - 20*s12*s13^2)*s23^2 + 4*s12*s13*s23^3) +
               p1q^4*(-8*s12^3*s13*s23 + 8*s12*s13*s23^3))) +
           ((p2q^6*(36*s12^2*s13^4 + 36*s12*s13^5 + (-9*s12^2*s13^3 +
                  27*s12*s13^4)*s23 + (-10*s12*s13^3 - s13^4)*s23^2 -
                s13^3*s23^3) + p3q^6*((-9*s12^4*s13 - 9*s12^3*s13^2)*s23 +
                (s12^4 - 8*s12^3*s13)*s23^2 + (2*s12^3 + s12^2*s13)*s23^3 +
                s12^2*s23^4) + p1q*p2q^5*(-36*s12^3*s13^3 + 36*s12*s13^5 +
                (-153*s12^2*s13^3 - 81*s12*s13^4)*s23 + (27*s12^2*s13^2 -
                  95*s12*s13^3 - 5*s13^4)*s23^2 + (30*s12*s13^2 - 2*s13^3)*
                 s23^3 + 3*s13^2*s23^4) + p1q^6*((-9*s12^3 - 18*s12^2*s13 -
                  9*s12*s13^2)*s23^3 + (-18*s12^2 - 18*s12*s13)*s23^4 -
                9*s12*s23^5) + p1q^2*p2q^4*(-36*s12^3*s13^3 - 36*s12^2*
                 s13^4 + (9*s12^3*s13^2 - 189*s12^2*s13^3 - 162*s12*s13^4)*
                 s23 + (146*s12^2*s13^2 - 30*s12*s13^3 - 5*s13^4)*s23^2 +
                (-27*s12^2*s13 + 122*s12*s13^2 + 7*s13^3)*s23^3 +
                (-30*s12*s13 + 9*s13^2)*s23^4 - 3*s13*s23^5) +
              p1q^3*p2q^3*((54*s12^4*s13 + 162*s12^3*s13^2 + 99*s12^2*s13^3 -
                  9*s12*s13^4)*s23 + (110*s12^3*s13 + 413*s12^2*s13^2 +
                  241*s12*s13^3 + s13^4)*s23^2 + (-7*s12^2*s13 + 201*s12*
                   s13^2 + 16*s13^3)*s23^3 + (9*s12^2 - 63*s12*s13 + 6*s13^2)*
                 s23^4 + (10*s12 - 8*s13)*s23^5 + s23^6) + p1q^4*p2q^2*(
                (-9*s12^3*s13^2 - 18*s12^2*s13^3 - 9*s12*s13^4)*s23 +
                (-18*s12^4 - 108*s12^3*s13 - 90*s12^2*s13^2)*s23^2 +
                (-47*s12^3 - 273*s12^2*s13 - 147*s12*s13^2 - 2*s13^3)*s23^3 +
                (-22*s12^2 - 162*s12*s13 - 17*s13^2)*s23^4 + (9*s12 - 13*s13)*
                 s23^5 + 2*s23^6) + p1q^5*p2q*((18*s12^3*s13 + 36*s12^2*
                   s13^2 + 18*s12*s13^3)*s23^2 + (18*s12^3 + 45*s12^2*s13 +
                  27*s12*s13^2)*s23^3 + (49*s12^2 + 41*s12*s13 + s13^2)*
                 s23^4 + (36*s12 + 6*s13)*s23^5 + 5*s23^6) +
              p3q^5*(p2q*(-36*s12^5*s13 - 36*s12^4*s13^2 + (-36*s12^5 -
                    144*s12^4*s13 - 54*s12^3*s13^2 + 18*s12^2*s13^3)*s23 +
                  (-73*s12^4 - 112*s12^3*s13 + 15*s12^2*s13^2)*s23^2 +
                  (-38*s12^3 - 6*s12^2*s13 - 2*s12*s13^2)*s23^3 +
                  (-s12^2 - 2*s12*s13)*s23^4) + p1q*((27*s12^5 + 9*s12^4*
                     s13 - 18*s12^3*s13^2)*s23 + (69*s12^4 + 43*s12^3*s13 +
                    19*s12^2*s13^2)*s23^2 + (47*s12^3 + 24*s12^2*s13)*s23^3 +
                  (3*s12^2 - 2*s12*s13)*s23^4 - 2*s12*s23^5)) +
              p3q^4*(p2q^2*(-72*s12^5*s13 + 36*s12^4*s13^2 + 108*s12^3*
                   s13^3 + (-36*s12^5 - 126*s12^4*s13 + 234*s12^3*s13^2 +
                    135*s12^2*s13^3 - 9*s12*s13^4)*s23 + (-73*s12^4 +
                    20*s12^3*s13 + 222*s12^2*s13^2 - 6*s12*s13^3)*s23^2 +
                  (-38*s12^3 + 76*s12^2*s13 + 6*s12*s13^2 + s13^3)*s23^3 +
                  (-s12^2 + 2*s12*s13 + s13^2)*s23^4) + p1q*p2q*
                 (-72*s12^5*s13 - 72*s12^4*s13^2 + (18*s12^5 - 189*s12^4*
                     s13 - 99*s12^3*s13^2 + 36*s12^2*s13^3)*s23 +
                  (143*s12^4 + 51*s12^3*s13 + 113*s12^2*s13^2 + 16*s12*s13^3)*
                   s23^2 + (210*s12^3 + 136*s12^2*s13 + 6*s12*s13^2)*s23^3 +
                  (87*s12^2 - 10*s12*s13 - 2*s13^2)*s23^4 + (2*s12 - 2*s13)*
                   s23^5) + p1q^2*((45*s12^5 + 27*s12^4*s13 - 18*s12^3*s13^2)*
                   s23 + (63*s12^4 + 38*s12^3*s13 + 38*s12^2*s13^2)*s23^2 +
                  (-55*s12^3 - 46*s12^2*s13 - 11*s12*s13^2)*s23^3 +
                  (-86*s12^2 - 24*s12*s13)*s23^4 + (-12*s12 + s13)*s23^5 +
                  s23^6)) + p3q^3*(p2q^3*(-36*s12^5*s13 + 180*s12^4*s13^2 +
                  108*s12^3*s13^3 - 108*s12^2*s13^4 + (396*s12^3*s13^2 -
                    36*s12^2*s13^3 - 72*s12*s13^4)*s23 + (s12^4 + 112*s12^3*
                     s13 + 180*s12^2*s13^2 - 112*s12*s13^3 - s13^4)*s23^2 +
                  (2*s12^3 + 78*s12^2*s13 - 38*s12*s13^2 - 2*s13^3)*s23^3 +
                  (s12^2 + 2*s12*s13 - s13^2)*s23^4) + p1q*p2q^2*
                 (-108*s12^5*s13 + 72*s12^4*s13^2 + 180*s12^3*s13^3 +
                  (-9*s12^5 - 189*s12^4*s13 + 441*s12^3*s13^2 + 315*s12^2*
                     s13^3 - 18*s12*s13^4)*s23 + (83*s12^4 + 205*s12^3*s13 +
                    710*s12^2*s13^2 + 175*s12*s13^3 + s13^4)*s23^2 +
                  (171*s12^3 + 326*s12^2*s13 + 267*s12*s13^2 + 14*s13^3)*
                   s23^3 + (81*s12^2 + 66*s12*s13 + 15*s13^2)*s23^4 +
                  (2*s12 + 2*s13)*s23^5) + p1q^2*p2q*(-36*s12^5*s13 -
                  36*s12^4*s13^2 + (90*s12^5 + 72*s12^4*s13 + 126*s12^3*
                     s13^2 + 108*s12^2*s13^3)*s23 + (231*s12^4 + 366*s12^3*
                     s13 + 423*s12^2*s13^2 + 108*s12*s13^3)*s23^2 +
                  (58*s12^3 + 38*s12^2*s13 + 24*s12*s13^2 + 2*s13^3)*s23^3 +
                  (-138*s12^2 - 152*s12*s13 - 9*s13^2)*s23^4 +
                  (-56*s12 - 12*s13)*s23^5 - s23^6) + p1q^3*
                 ((9*s12^5 - 9*s12^4*s13 - 18*s12^3*s13^2)*s23 +
                  (-59*s12^4 - 49*s12^3*s13 + 37*s12^2*s13^2)*s23^2 +
                  (-180*s12^3 - 97*s12^2*s13 - 22*s12*s13^2)*s23^3 +
                  (-92*s12^2 - s12*s13 + s13^2)*s23^4 + (27*s12 + 8*s13)*
                   s23^5 + 7*s23^6)) + p3q^2*(p2q^4*(108*s12^4*s13^2 -
                  108*s12^3*s13^3 - 180*s12^2*s13^4 + 36*s12*s13^5 +
                  (-9*s12^4*s13 + 135*s12^3*s13^2 - 270*s12^2*s13^3 -
                    54*s12*s13^4)*s23 + (-12*s12^3*s13 - 6*s12^2*s13^2 -
                    128*s12*s13^3 + s13^4)*s23^2 + (-5*s12^2*s13 -
                    42*s12*s13^2)*s23^3 + (-2*s12*s13 - s13^2)*s23^4) +
                p1q*p2q^3*(-36*s12^5*s13 + 216*s12^4*s13^2 + 108*s12^3*
                   s13^3 - 144*s12^2*s13^4 + (9*s12^4*s13 + 675*s12^3*s13^2 +
                    9*s12^2*s13^3 - 225*s12*s13^4)*s23 + (9*s12^4 +
                    197*s12^3*s13 + 728*s12^2*s13^2 - 25*s12*s13^3 - 7*s13^4)*
                   s23^2 + (8*s12^3 + 212*s12^2*s13 + 290*s12*s13^2 +
                    6*s13^3)*s23^3 + (-3*s12^2 + 70*s12*s13 + 15*s13^2)*
                   s23^4 + (-2*s12 + 2*s13)*s23^5) + p1q^2*p2q^2*
                 (-36*s12^5*s13 + 36*s12^4*s13^2 + 72*s12^3*s13^3 +
                  (45*s12^5 + 63*s12^4*s13 + 387*s12^3*s13^2 + 171*s12^2*
                     s13^3 - 90*s12*s13^4)*s23 + (168*s12^4 + 382*s12^3*s13 +
                    832*s12^2*s13^2 + 274*s12*s13^3 - 2*s13^4)*s23^2 +
                  (95*s12^3 + 61*s12^2*s13 + 273*s12*s13^2 + 21*s13^3)*
                   s23^3 + (-71*s12^2 - 172*s12*s13 + 10*s13^2)*s23^4 +
                  (-44*s12 - 14*s13)*s23^5 - s23^6) + p1q^3*p2q*
                 ((36*s12^5 + 135*s12^4*s13 + 207*s12^3*s13^2 + 108*s12^2*
                     s13^3)*s23 + (-39*s12^4 + 113*s12^3*s13 + 307*s12^2*
                     s13^2 + 110*s12*s13^3)*s23^2 + (-308*s12^3 - 387*s12^2*
                     s13 - 133*s12*s13^2)*s23^3 + (-252*s12^2 - 285*s12*s13 -
                    23*s13^2)*s23^4 + (-12*s12 - 16*s13)*s23^5 + 7*s23^6) +
                p1q^4*((-9*s12^5 - 18*s12^4*s13 - 9*s12^3*s13^2)*s23 +
                  (-36*s12^4 + 36*s12^2*s13^2)*s23^2 + (-26*s12^3 +
                    17*s12^2*s13 - 20*s12*s13^2)*s23^3 + (63*s12^2 +
                    44*s12*s13 + 2*s13^2)*s23^4 + (73*s12 + 13*s13)*s23^5 +
                  11*s23^6)) + p3q*(p2q^5*(-108*s12^3*s13^3 - 36*s12^2*
                   s13^4 + 72*s12*s13^5 + (18*s12^3*s13^2 - 126*s12^2*s13^3 +
                    36*s12*s13^4)*s23 + (21*s12^2*s13^2 - 32*s12*s13^3 +
                    s13^4)*s23^2 + (4*s12*s13^2 + 2*s13^3)*s23^3 +
                  s13^2*s23^4) + p1q*p2q^4*(72*s12^4*s13^2 - 108*s12^3*
                   s13^3 - 144*s12^2*s13^4 + 36*s12*s13^5 +
                  (153*s12^3*s13^2 - 423*s12^2*s13^3 - 288*s12*s13^4)*s23 +
                  (139*s12^2*s13^2 - 279*s12*s13^3 - 13*s13^4)*s23^2 +
                  (-2*s12^2*s13 + 59*s12*s13^2 - 10*s13^3)*s23^3 +
                  (-4*s12*s13 + s13^2)*s23^4 - 2*s13*s23^5) + p1q^3*p2q^2*
                 ((18*s12^5 + 90*s12^4*s13 + 189*s12^3*s13^2 + 99*s12^2*
                     s13^3 - 18*s12*s13^4)*s23 + (2*s12^4 + 2*s12^3*s13 +
                    341*s12^2*s13^2 + 261*s12*s13^3 + s13^4)*s23^2 +
                  (-137*s12^3 - 531*s12^2*s13 - 63*s12*s13^2 + 16*s13^3)*
                   s23^3 + (-151*s12^2 - 419*s12*s13 - 18*s13^2)*s23^4 +
                  (-29*s12 - 32*s13)*s23^5 + s23^6) + p1q^2*p2q^3*
                 (72*s12^4*s13^2 + 36*s12^3*s13^3 - 36*s12^2*s13^4 +
                  (90*s12^4*s13 + 468*s12^3*s13^2 + 90*s12^2*s13^3 -
                    180*s12*s13^4)*s23 + (270*s12^3*s13 + 1025*s12^2*s13^2 +
                    352*s12*s13^3 - 7*s13^4)*s23^2 + (-18*s12^3 + 166*s12^2*
                     s13 + 576*s12*s13^2 + 26*s13^3)*s23^3 + (-19*s12^2 -
                    2*s12*s13 + 28*s13^2)*s23^4 - 4*s13*s23^5 + s23^6) +
                p1q^5*((18*s12^4 + 36*s12^3*s13 + 18*s12^2*s13^2)*s23^2 +
                  (45*s12^3 + 27*s12^2*s13 - 18*s12*s13^2)*s23^3 +
                  (49*s12^2 + 5*s12*s13 + s13^2)*s23^4 + (27*s12 + 6*s13)*
                   s23^5 + 5*s23^6) + p1q^4*p2q*((18*s12^4*s13 + 36*s12^3*
                     s13^2 + 18*s12^2*s13^3)*s23 + (-54*s12^4 - 72*s12^3*
                     s13 + 18*s12^2*s13^2 + 36*s12*s13^3)*s23^2 +
                  (-100*s12^3 - 238*s12^2*s13 - 122*s12*s13^2 - 2*s13^3)*
                   s23^3 + (23*s12^2 - 100*s12*s13 - 15*s13^2)*s23^4 +
                  82*s12*s23^5 + 13*s23^6)))*Log(s13/(s12 + s13 + s23)))/
            (-4*p1q*p2q^5*s12*s13^4*s23^2 + p1q*p3q^5*(4*s12^4*s13*s23^2 + 4*
                s12^3*s13*s23^3) + p1q^2*p2q^4*((4*s12^2*s13^3 - 4*s12*s13^4)*
                s23^2 + 12*s12*s13^3*s23^3) + p1q^3*p2q^3*(4*s12^2*s13^3*
                s23^2 + (-8*s12^2*s13^2 + 12*s12*s13^3)*s23^3 - 12*s12*s13^2*
                s23^4) + p1q^5*p2q*(4*s12^2*s13*s23^4 + 4*s12*s13*s23^5) +
             p1q^4*p2q^2*(-8*s12^2*s13^2*s23^3 + (4*s12^2*s13 - 12*s12*s13^2)*
                s23^4 + 4*s12*s13*s23^5) + p3q^4*(p1q*p2q*
                ((8*s12^4*s13 - 12*s12^3*s13^2)*s23^2 + (8*s12^3*s13 -
                   8*s12^2*s13^2)*s23^3) + p1q^2*(8*s12^4*s13*s23^2 -
                 8*s12^2*s13*s23^4)) + p3q^3*(p1q*p2q^2*
                ((4*s12^4*s13 - 24*s12^3*s13^2 + 12*s12^2*s13^3)*s23^2 +
                 (4*s12^3*s13 - 16*s12^2*s13^2 + 4*s12*s13^3)*s23^3) + p1q^2*
                p2q*((12*s12^4*s13 - 20*s12^3*s13^2)*s23^2 +
                 (-4*s12^3*s13 - 16*s12^2*s13^2)*s23^3 + (-16*s12^2*s13 -
                   8*s12*s13^2)*s23^4) + p1q^3*(4*s12^4*s13*s23^2 -
                 12*s12^3*s13*s23^3 - 12*s12^2*s13*s23^4 + 4*s12*s13*
                  s23^5)) + p3q^2*(p1q*p2q^3*((-12*s12^3*s13^2 + 24*s12^2*
                    s13^3 - 4*s12*s13^4)*s23^2 + (-8*s12^2*s13^2 +
                   8*s12*s13^3)*s23^3) + p1q^2*p2q^2*((4*s12^4*s13 -
                   28*s12^3*s13^2 + 16*s12^2*s13^3)*s23^2 + (-4*s12^3*s13 -
                   24*s12^2*s13^2 + 16*s12*s13^3)*s23^3 + (-8*s12^2*s13 -
                   16*s12*s13^2)*s23^4) + p1q^4*(-8*s12^3*s13*s23^3 +
                 8*s12*s13*s23^5) + p1q^3*p2q*((4*s12^4*s13 - 8*s12^3*s13^2)*
                  s23^2 + (-20*s12^3*s13 - 16*s12^2*s13^2)*s23^3 +
                 (-16*s12^2*s13 - 20*s12*s13^2)*s23^4 + 8*s12*s13*s23^5)) +
             p3q*(p1q*p2q^4*((12*s12^2*s13^3 - 8*s12*s13^4)*s23^2 +
                 4*s12*s13^3*s23^3) + p1q^2*p2q^3*((-8*s12^3*s13^2 +
                   20*s12^2*s13^3 - 4*s12*s13^4)*s23^2 + (-8*s12^2*s13^2 +
                   28*s12*s13^3)*s23^3 - 8*s12*s13^2*s23^4) + p1q^5*
                (4*s12^2*s13*s23^4 + 4*s12*s13*s23^5) + p1q^3*p2q^2*
                ((-8*s12^3*s13^2 + 4*s12^2*s13^3)*s23^2 + (-8*s12^3*s13 -
                   24*s12^2*s13^2 + 12*s12*s13^3)*s23^3 + (-4*s12^2*s13 -
                   32*s12*s13^2)*s23^4 + 4*s12*s13*s23^5) + p1q^4*p2q*
                ((-8*s12^3*s13 - 8*s12^2*s13^2)*s23^3 + (4*s12^2*s13 -
                   12*s12*s13^2)*s23^4 + 12*s12*s13*s23^5))) +
           ((p3q^6*(9*s12^3*s13 + 9*s12^2*s13^2 + 9*s12^2*s13*s23) +
              p2q^6*(9*s12*s13^3 + 9*s13^4 + 9*s13^3*s23) + p1q*p2q^5*(
                9*s12*s13^3 + 9*s13^4 + (-27*s12*s13^2 - 18*s13^3)*s23 -
                27*s13^2*s23^2) + p1q^2*p2q^4*(45*s12^2*s13^2 +
                81*s12*s13^3 + 36*s13^4 + (18*s12*s13^2 + 9*s13^3)*s23 +
                27*s12*s13*s23^2 + 27*s13*s23^3) + p1q^5*p2q*(
                (-18*s12^2*s13 - 36*s12*s13^2 - 18*s13^3)*s23 +
                (-27*s12*s13 - 27*s13^2)*s23^2 + (-9*s12 - 18*s13)*s23^3 -
                9*s23^4) + p1q^4*p2q^2*(9*s12^2*s13^2 + 18*s12*s13^3 +
                9*s13^4 + (18*s12^2*s13 + 18*s12*s13^2)*s23 +
                (9*s12^2 + 81*s12*s13 + 45*s13^2)*s23^2 + 45*s13*s23^3 -
                9*s23^4) + p1q^3*p2q^3*(-36*s12^3*s13 - 54*s12^2*s13^2 -
                9*s12*s13^3 + 9*s13^4 + (-90*s12^2*s13 - 153*s12*s13^2 -
                  72*s13^3)*s23 + (-27*s12*s13 - 54*s13^2)*s23^2 +
                (-9*s12 + 18*s13)*s23^3 - 9*s23^4) + p1q^6*(
                (9*s12^2 + 18*s12*s13 + 9*s13^2)*s23^2 + (18*s12 + 18*s13)*
                 s23^3 + 9*s23^4) + p3q^5*(p2q*(36*s12^4 + 72*s12^3*s13 +
                  18*s12^2*s13^2 - 18*s12*s13^3 + (72*s12^3 + 72*s12^2*s13 -
                    18*s12*s13^2)*s23 + 36*s12^2*s23^2) + p1q*(9*s12^4 +
                  63*s12^3*s13 + 54*s12^2*s13^2 + (45*s12^3 + 108*s12^2*s13 +
                    18*s12*s13^2)*s23 + (72*s12^2 + 54*s12*s13)*s23^2 +
                  36*s12*s23^3)) + p3q^4*(p2q^2*(36*s12^4 - 18*s12^3*s13 -
                  126*s12^2*s13^2 - 63*s12*s13^3 + 9*s13^4 + (72*s12^3 -
                    90*s12^2*s13 - 144*s12*s13^2 + 9*s13^3)*s23 +
                  (36*s12^2 - 72*s12*s13)*s23^2) + p1q*p2q*(54*s12^4 +
                  117*s12^3*s13 - 45*s12^2*s13^2 - 108*s12*s13^3 +
                  (81*s12^3 - 18*s12^2*s13 - 270*s12*s13^2 - 54*s13^3)*s23 +
                  (27*s12^2 - 144*s12*s13 - 90*s13^2)*s23^2 - 36*s13*s23^3) +
                p1q^2*(27*s12^4 + 117*s12^3*s13 + 90*s12^2*s13^2 +
                  (108*s12^3 + 171*s12^2*s13)*s23 + (135*s12^2 + 27*s12*s13 -
                    27*s13^2)*s23^2 + (18*s12 - 63*s13)*s23^3 - 36*s23^4)) +
              p3q*(p2q^5*(-18*s12^2*s13^2 - 18*s12*s13^3 - 18*s12*s13^2*
                   s23) + p1q*p2q^4*(63*s12^2*s13^2 + 135*s12*s13^3 +
                  72*s13^4 + (81*s12*s13^2 + 90*s13^3)*s23 + 18*s13^2*
                   s23^2) + p1q^2*p2q^3*(-126*s12^3*s13 - 198*s12^2*s13^2 -
                  18*s12*s13^3 + 54*s13^4 + (-360*s12^2*s13 - 504*s12*s13^2 -
                    144*s13^3)*s23 + (18*s12^2 - 252*s12*s13 - 234*s13^2)*
                   s23^2 + (18*s12 - 36*s13)*s23^3) + p1q^5*
                 ((-18*s12^3 - 36*s12^2*s13 - 18*s12*s13^2)*s23 +
                  (-27*s12^2 - 9*s12*s13 + 18*s13^2)*s23^2 +
                  (-9*s12 + 18*s13)*s23^3) + p1q^4*p2q*(-18*s12^3*s13 -
                  36*s12^2*s13^2 - 18*s12*s13^3 + (18*s12^3 - 36*s12^2*s13 -
                    90*s12*s13^2 - 36*s13^3)*s23 + (54*s12^2 + 54*s12*s13 +
                    18*s13^2)*s23^2 + 18*s13*s23^3 - 36*s23^4) +
                p1q^3*p2q^2*(36*s12^4 + 36*s12^3*s13 - 27*s12^2*s13^2 -
                  9*s12*s13^3 + 18*s13^4 + (126*s12^3 + 90*s12^2*s13 -
                    135*s12*s13^2 - 90*s13^3)*s23 + (225*s12^2 + 297*s12*
                     s13 + 54*s13^2)*s23^2 + (153*s12 + 180*s13)*s23^3 +
                  18*s23^4)) + p3q^2*(p2q^4*(9*s12^3*s13 + 45*s12^2*s13^2 +
                  54*s12*s13^3 + 18*s13^4 + (9*s12^2*s13 + 72*s12*s13^2 +
                    54*s13^3)*s23 + 36*s13^2*s23^2) + p1q*p2q^3*
                 (-153*s12^3*s13 - 243*s12^2*s13^2 - 9*s12*s13^3 + 81*s13^4 +
                  (-9*s12^3 - 378*s12^2*s13 - 351*s12*s13^2 + 36*s13^3)*s23 +
                  (-9*s12^2 - 288*s12*s13 - 117*s13^2)*s23^2 - 72*s13*
                   s23^3) + p1q^4*(9*s12^4 + 18*s12^3*s13 + 9*s12^2*s13^2 +
                  (-18*s12^3 - 90*s12^2*s13 - 72*s12*s13^2)*s23 +
                  (-90*s12^2 - 153*s12*s13 - 18*s13^2)*s23^2 +
                  (-126*s12 - 81*s13)*s23^3 - 63*s23^4) + p1q^3*p2q*
                 (18*s12^4 + 9*s12^3*s13 - 81*s12^2*s13^2 - 72*s12*s13^3 +
                  (135*s12^3 + 72*s12^2*s13 - 144*s12*s13^2 - 36*s13^3)*s23 +
                  (333*s12^2 + 333*s12*s13 + 117*s13^2)*s23^2 +
                  (225*s12 + 162*s13)*s23^3 + 9*s23^4) + p1q^2*p2q^2*
                 (81*s12^4 + 81*s12^3*s13 - 117*s12^2*s13^2 - 63*s12*s13^3 +
                  54*s13^4 + (198*s12^3 - 63*s12^2*s13 - 468*s12*s13^2 -
                    117*s13^3)*s23 + (261*s12^2 - 18*s12*s13 - 153*s13^2)*
                   s23^2 + (180*s12 + 54*s13)*s23^3 + 36*s23^4)) +
              p3q^3*(p2q^3*(-72*s12^3*s13 - 72*s12^2*s13^2 + 36*s12*s13^3 +
                  36*s13^4 + (-144*s12^2*s13 - 36*s12*s13^2 + 72*s13^3)*s23 +
                  (-72*s12*s13 + 36*s13^2)*s23^2) + p1q*p2q^2*(81*s12^4 +
                  45*s12^3*s13 - 189*s12^2*s13^2 - 99*s12*s13^3 + 54*s13^4 +
                  (135*s12^3 - 180*s12^2*s13 - 423*s12*s13^2 - 18*s13^3)*
                   s23 + (54*s12^2 - 270*s12*s13 - 144*s13^2)*s23^2 -
                  72*s13*s23^3) + p1q^3*(27*s12^4 + 81*s12^3*s13 +
                  54*s12^2*s13^2 + (63*s12^3 + 18*s12^2*s13 - 72*s12*s13^2)*
                   s23 + (9*s12^2 - 153*s12*s13 - 54*s13^2)*s23^2 +
                  (-117*s12 - 144*s13)*s23^3 - 90*s23^4) + p1q^2*p2q*
                 (36*s12^4 + 72*s12^3*s13 - 108*s12^2*s13^2 - 144*s12*s13^3 +
                  (126*s12^3 - 342*s12*s13^2 - 72*s13^3)*s23 +
                  (270*s12^2 + 108*s12*s13 - 18*s13^2)*s23^2 +
                  (216*s12 + 90*s13)*s23^3 + 36*s23^4)))*
             Log(s23/(s12 + s13 + s23)))/(-4*p1q*p2q^5*s13^4*s23 +
             p1q*p3q^5*(4*s12^3*s13*s23 + 4*s12^2*s13*s23^2) +
             p1q^2*p2q^4*((4*s12*s13^3 - 4*s13^4)*s23 + 12*s13^3*s23^2) +
             p1q^3*p2q^3*(4*s12*s13^3*s23 + (-8*s12*s13^2 + 12*s13^3)*s23^2 -
               12*s13^2*s23^3) + p1q^5*p2q*(4*s12*s13*s23^3 + 4*s13*s23^4) +
             p1q^4*p2q^2*(-8*s12*s13^2*s23^2 + (4*s12*s13 - 12*s13^2)*s23^3 +
               4*s13*s23^4) + p3q^4*(p1q*p2q*((8*s12^3*s13 - 12*s12^2*s13^2)*
                  s23 + (8*s12^2*s13 - 8*s12*s13^2)*s23^2) + p1q^2*
                (8*s12^3*s13*s23 - 8*s12*s13*s23^3)) +
             p3q^3*(p1q*p2q^2*((4*s12^3*s13 - 24*s12^2*s13^2 + 12*s12*s13^3)*
                  s23 + (4*s12^2*s13 - 16*s12*s13^2 + 4*s13^3)*s23^2) + p1q^2*
                p2q*((12*s12^3*s13 - 20*s12^2*s13^2)*s23 + (-4*s12^2*s13 -
                   16*s12*s13^2)*s23^2 + (-16*s12*s13 - 8*s13^2)*s23^3) +
               p1q^3*(4*s12^3*s13*s23 - 12*s12^2*s13*s23^2 - 12*s12*s13*
                  s23^3 + 4*s13*s23^4)) + p3q^2*(p1q*p2q^3*
                ((-12*s12^2*s13^2 + 24*s12*s13^3 - 4*s13^4)*s23 +
                 (-8*s12*s13^2 + 8*s13^3)*s23^2) + p1q^2*p2q^2*
                ((4*s12^3*s13 - 28*s12^2*s13^2 + 16*s12*s13^3)*s23 +
                 (-4*s12^2*s13 - 24*s12*s13^2 + 16*s13^3)*s23^2 +
                 (-8*s12*s13 - 16*s13^2)*s23^3) + p1q^4*(-8*s12^2*s13*s23^2 +
                 8*s13*s23^4) + p1q^3*p2q*((4*s12^3*s13 - 8*s12^2*s13^2)*
                  s23 + (-20*s12^2*s13 - 16*s12*s13^2)*s23^2 +
                 (-16*s12*s13 - 20*s13^2)*s23^3 + 8*s13*s23^4)) +
             p3q*(p1q*p2q^4*((12*s12*s13^3 - 8*s13^4)*s23 + 4*s13^3*s23^2) +
               p1q^2*p2q^3*((-8*s12^2*s13^2 + 20*s12*s13^3 - 4*s13^4)*s23 +
                 (-8*s12*s13^2 + 28*s13^3)*s23^2 - 8*s13^2*s23^3) + p1q^5*
                (4*s12*s13*s23^3 + 4*s13*s23^4) + p1q^3*p2q^2*
                ((-8*s12^2*s13^2 + 4*s12*s13^3)*s23 + (-8*s12^2*s13 -
                   24*s12*s13^2 + 12*s13^3)*s23^2 + (-4*s12*s13 - 32*s13^2)*
                  s23^3 + 4*s13*s23^4) + p1q^4*p2q*((-8*s12^2*s13 -
                   8*s12*s13^2)*s23^2 + (4*s12*s13 - 12*s13^2)*s23^3 +
                 12*s13*s23^4))) + ((p2q^5*(18*s12^2*s13^3 + 18*s12*s13^4 +
                18*s12*s13^3*s23) + p1q*p2q^4*(18*s12^2*s13^3 +
                18*s12*s13^4 + (-36*s12^2*s13^2 - 18*s12*s13^3)*s23 +
                (-38*s12*s13^2 - 2*s13^3)*s23^2 - 2*s13^2*s23^3) +
              p1q^2*p2q^3*((-9*s12^3*s13 - 54*s12^2*s13^2 - 45*s12*s13^3)*
                 s23 + (10*s12^2*s13 - 27*s12*s13^2 - s13^3)*s23^2 +
                (21*s12*s13 + s13^2)*s23^3 + 2*s13*s23^4) + p1q^3*p2q^2*(
                (11*s12^3 + 50*s12^2*s13 + 40*s12*s13^2 + s13^3)*s23^2 +
                (14*s12^2 + 45*s12*s13 + 4*s13^2)*s23^3 + (3*s12 + 3*s13)*
                 s23^4) + p1q^4*p2q*((-10*s12^2 - 11*s12*s13 - s13^2)*s23^3 +
                (-12*s12 - 3*s13)*s23^4 - 2*s23^5) + p3q^4*(
                p2q*(18*s12^4*s13 + 18*s12^3*s13^2 + 18*s12^3*s13*s23) +
                p1q*((-18*s12^4 - 36*s12^3*s13 - 18*s12^2*s13^2)*s23 +
                  (-36*s12^3 - 36*s12^2*s13)*s23^2 - 18*s12^2*s23^3)) +
              p3q^3*(p2q^2*(36*s12^4*s13 - 36*s12^2*s13^3 + (36*s12^3*s13 -
                    36*s12^2*s13^2)*s23) + p1q*p2q*(18*s12^4*s13 +
                  18*s12^3*s13^2 + (-36*s12^4 - 36*s12^3*s13 + 18*s12*s13^3)*
                   s23 + (-72*s12^3 - 34*s12^2*s13 + 38*s12*s13^2)*s23^2 +
                  (-36*s12^2 + 20*s12*s13)*s23^3) + p1q^2*
                 ((-18*s12^4 - 36*s12^3*s13 - 18*s12^2*s13^2)*s23 +
                  (-8*s12^3 + 11*s12^2*s13 + 19*s12*s13^2)*s23^2 +
                  (30*s12^2 + 39*s12*s13)*s23^3 + 20*s12*s23^4)) +
              p3q*(p2q^4*(-36*s12^3*s13^2 + 36*s12*s13^4 + (-36*s12^2*s13^2 +
                    36*s12*s13^3)*s23) + p1q*p2q^3*(-36*s12^3*s13^2 -
                  18*s12^2*s13^3 + 18*s12*s13^4 + (-108*s12^2*s13^2 -
                    54*s12*s13^3)*s23 + (2*s12^2*s13 - 74*s12*s13^2 -
                    4*s13^3)*s23^2 + (2*s12*s13 - 4*s13^2)*s23^3) +
                p1q^2*p2q^2*((-27*s12^4 - 63*s12^3*s13 - 81*s12^2*s13^2 -
                    45*s12*s13^3)*s23 + (-42*s12^3 - s12^2*s13 + 3*s12*
                     s13^2 - 2*s13^3)*s23^2 + (-11*s12^2 + 56*s12*s13)*
                   s23^3 + (4*s12 + 2*s13)*s23^4) + p1q^3*p2q*
                 ((21*s12^3 + 61*s12^2*s13 + 41*s12*s13^2 + s13^3)*s23^2 +
                  (16*s12^2 + 37*s12*s13 + 3*s13^2)*s23^3 - 7*s12*s23^4 -
                  2*s23^5) + p1q^4*((-10*s12^2 - 11*s12*s13 - s13^2)*s23^3 +
                  (-12*s12 - 3*s13)*s23^4 - 2*s23^5)) +
              p3q^2*(p2q^3*(18*s12^4*s13 - 54*s12^3*s13^2 - 54*s12^2*s13^3 +
                  18*s12*s13^4 + (18*s12^3*s13 - 72*s12^2*s13^2 + 18*s12*
                     s13^3)*s23) + p1q*p2q^2*(18*s12^4*s13 - 18*s12^3*s13^2 -
                  36*s12^2*s13^3 + (-36*s12^4 - 54*s12^3*s13 - 108*s12^2*
                     s13^2 - 36*s12*s13^3)*s23 + (-72*s12^3 - 68*s12^2*s13 -
                    34*s12*s13^2 - 2*s13^3)*s23^2 + (-36*s12^2 + 4*s12*s13 -
                    2*s13^2)*s23^3) + p1q^2*p2q*((-27*s12^4 - 72*s12^3*s13 -
                    63*s12^2*s13^2 - 18*s12*s13^3)*s23 + (-32*s12^3 -
                    36*s12^2*s13 - 5*s12*s13^2 - s13^3)*s23^2 +
                  (s12^2 + 20*s12*s13 - s13^2)*s23^3 + 6*s12*s23^4) +
                p1q^3*((28*s12^3 + 47*s12^2*s13 + 19*s12*s13^2)*s23^2 +
                  (38*s12^2 + 28*s12*s13 - s13^2)*s23^3 + (8*s12 - 3*s13)*
                   s23^4 - 2*s23^5)))*Log((s12 + s23)/(s12 + s13 + s23)))/
            (2*p1q*p3q^4*s12^3*s13*s23^2 + 2*p1q*p2q^4*s12*s13^3*s23^2 +
             2*p1q^4*p2q*s12*s13*s23^4 + p1q^2*p2q^3*(2*s12*s13^3*s23^2 - 4*
                s12*s13^2*s23^3) + p1q^3*p2q^2*(-4*s12*s13^2*s23^3 + 2*s12*
                s13*s23^4) + p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*
                s23^2 + p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
             p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*
                s23^2 + p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
                 (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) + p1q^3*
                (-4*s12^2*s13*s23^3 + 2*s12*s13*s23^4)) +
             p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 + 2*p1q^4*
                s12*s13*s23^4 + p1q^2*p2q^2*((-4*s12^2*s13^2 + 2*s12*s13^3)*
                  s23^2 + (-4*s12^2*s13 - 8*s12*s13^2)*s23^3) + p1q^3*p2q*
                ((-4*s12^2*s13 - 4*s12*s13^2)*s23^3 + 4*s12*s13*s23^4)))) +
         Log(s13/(s12 + s13 + s23))*
          ((p3q^2*(99*s12^3*s13 + 99*s12^2*s13^2 + (144*s12^2*s13 +
                 45*s12*s13^2)*s23 + 45*s12*s13*s23^2) +
             p2q^2*(99*s12^3*s13 - 99*s12^2*s13^2 - 198*s12*s13^3 +
               (144*s12^2*s13 - 243*s12*s13^2 - 90*s13^3)*s23 + (45*s12*s13 -
                 90*s13^2)*s23^2) + p1q^2*(-99*s12^3*s13 - 99*s12^2*s13^2 +
               (-342*s12^2*s13 - 243*s12*s13^2)*s23 + (-333*s12*s13 -
                 90*s13^2)*s23^2 - 90*s13*s23^3) + p1q*p2q*(-81*s12^4 - 81*
                s12^3*s13 + 198*s12^2*s13^2 + 198*s12*s13^3 + (-338*s12^3 -
                 81*s12^2*s13 + 464*s12*s13^2 + 90*s13^3)*s23 + (-337*s12^2 +
                 176*s12*s13 + 170*s13^2)*s23^2 + (-80*s12 + 80*s13)*s23^3) +
             p3q*(p2q*(198*s12^3*s13 - 198*s12*s13^3 + (288*s12^2*s13 -
                   198*s12*s13^2 - 90*s13^3)*s23 + (90*s12*s13 - 90*s13^2)*
                  s23^2) + p1q*(-81*s12^4 - 81*s12^3*s13 + (-338*s12^3 -
                   81*s12^2*s13 + 176*s12*s13^2)*s23 + (-337*s12^2 +
                   176*s12*s13 + 80*s13^2)*s23^2 + (-80*s12 + 80*s13)*
                  s23^3)))/(p1q*p2q*(18*s12^3*s13*s23 + 18*s12^2*s13*s23^2) +
             p1q*p3q*(18*s12^3*s13*s23 + 18*s12^2*s13*s23^2)) +
           ((p2q^6*(-648*s12^5*s13^4 - 1296*s12^4*s13^5 - 648*s12^3*s13^6 +
                (9*s12^5*s13^3 - 729*s12^4*s13^4 - 855*s12^3*s13^5 +
                  189*s12^2*s13^6 + 306*s12*s13^7)*s23 + (90*s12^4*s13^3 -
                  99*s12^3*s13^4 - 117*s12^2*s13^5 + 576*s12*s13^6 +
                  180*s13^7)*s23^2 + (81*s12^3*s13^3 - 90*s12^2*s13^4 +
                  90*s12*s13^5 + 180*s13^6)*s23^3) + p3q^6*(
                (-90*s12^8 - 198*s12^7*s13 - 126*s12^6*s13^2 - 18*s12^5*
                   s13^3)*s23 + (-261*s12^7 - 216*s12^6*s13 + 198*s12^5*
                   s13^2 + 153*s12^4*s13^3)*s23^2 + (-252*s12^6 +
                  72*s12^5*s13 + 333*s12^4*s13^2 + 90*s12^3*s13^3)*s23^3 +
                (-81*s12^5 + 90*s12^4*s13 + 90*s12^3*s13^2)*s23^4) +
              p1q*p2q^5*(648*s12^6*s13^3 + 1296*s12^5*s13^4 + 648*s12^4*
                 s13^5 + (-90*s12^6*s13^2 + 2088*s12^5*s13^3 + 4644*s12^4*
                   s13^4 + 2034*s12^3*s13^5 - 738*s12^2*s13^6 - 306*s12*
                   s13^7)*s23 + (-198*s12^5*s13^2 + 1816*s12^4*s13^3 +
                  3504*s12^3*s13^4 - 1698*s12^2*s13^5 - 2396*s12*s13^6 -
                  180*s13^7)*s23^2 + (-351*s12^4*s13^2 + 581*s12^3*s13^3 +
                  894*s12^2*s13^4 - 2970*s12*s13^5 - 1060*s13^6)*s23^3 +
                (-243*s12^3*s13^2 + 430*s12^2*s13^3 - 180*s12*s13^4 -
                  880*s13^5)*s23^4) + p1q^2*p2q^4*((-954*s12^6*s13^2 -
                  2727*s12^5*s13^3 - 1719*s12^4*s13^4 + 603*s12^3*s13^5 +
                  549*s12^2*s13^6)*s23 + (180*s12^6*s13 - 1582*s12^5*s13^2 -
                  6339*s12^4*s13^3 - 1686*s12^3*s13^4 + 4367*s12^2*s13^5 +
                  1800*s12*s13^6)*s23^2 + (369*s12^5*s13 - 1331*s12^4*s13^2 -
                  6166*s12^3*s13^3 + 4882*s12^2*s13^4 + 7260*s12*s13^5 +
                  900*s13^6)*s23^3 + (432*s12^4*s13 - 1219*s12^3*s13^2 -
                  2606*s12^2*s13^3 + 6120*s12*s13^4 + 2620*s13^5)*s23^4 +
                (243*s12^3*s13 - 750*s12^2*s13^2 - 160*s12*s13^3 +
                  1720*s13^4)*s23^5) + p1q^3*p2q^3*((-90*s12^6*s13^2 -
                  180*s12^5*s13^3 - 414*s12^4*s13^4 - 324*s12^3*s13^5)*s23 +
                (126*s12^6*s13 + 1611*s12^5*s13^2 + 1224*s12^4*s13^3 -
                  2871*s12^3*s13^4 - 2286*s12^2*s13^5)*s23^2 +
                (-90*s12^6 - 346*s12^5*s13 + 4171*s12^4*s13^2 - 745*s12^3*
                   s13^3 - 9888*s12^2*s13^4 - 4140*s12*s13^5)*s23^3 +
                (-180*s12^5 + 130*s12^4*s13 + 5954*s12^3*s13^2 - 6368*s12^2*
                   s13^3 - 11220*s12*s13^4 - 1800*s13^5)*s23^4 +
                (-171*s12^4 + 1091*s12^3*s13 + 3604*s12^2*s13^2 -
                  6300*s12*s13^3 - 3480*s13^4)*s23^5 + (-81*s12^3 +
                  570*s12^2*s13 + 660*s12*s13^2 - 1680*s13^3)*s23^6) +
              p1q^4*p2q^2*((180*s12^6*s13 + 369*s12^5*s13^2 + 1161*s12^4*
                   s13^3 + 972*s12^3*s13^4)*s23^2 + (180*s12^6 - 63*s12^5*
                   s13 + 135*s12^4*s13^2 + 4905*s12^3*s13^3 + 3564*s12^2*
                   s13^4)*s23^3 + (488*s12^5 - 1421*s12^4*s13 + 1661*s12^3*
                   s13^2 + 10842*s12^2*s13^3 + 4680*s12*s13^4)*s23^4 +
                (114*s12^4 - 3151*s12^3*s13 + 3937*s12^2*s13^2 + 9470*s12*
                   s13^3 + 1800*s13^4)*s23^5 + (-354*s12^3 - 2381*s12^2*s13 +
                  3240*s12*s13^2 + 2620*s13^3)*s23^6 + (-160*s12^2 -
                  570*s12*s13 + 820*s13^2)*s23^7) + p1q^5*p2q*(
                (-90*s12^6 - 198*s12^5*s13 - 1080*s12^4*s13^2 - 972*s12^3*
                   s13^3)*s23^3 + (-117*s12^5 - 306*s12^4*s13 - 3609*s12^3*
                   s13^2 - 2466*s12^2*s13^3)*s23^4 + (241*s12^4 - 625*s12^3*
                   s13 - 5798*s12^2*s13^2 - 2610*s12*s13^3)*s23^5 +
                (714*s12^3 - 942*s12^2*s13 - 4176*s12*s13^2 - 900*s13^3)*
                 s23^6 + (606*s12^2 - 666*s12*s13 - 1060*s13^2)*s23^7 +
                (160*s12 - 160*s13)*s23^8) + p1q^6*((9*s12^5 + 333*s12^4*
                   s13 + 324*s12^3*s13^2)*s23^4 + (18*s12^4 + 972*s12^3*s13 +
                  639*s12^2*s13^2)*s23^5 + (9*s12^3 + 1215*s12^2*s13 +
                  576*s12*s13^2)*s23^6 + (756*s12*s13 + 180*s13^2)*s23^7 +
                180*s13*s23^8) + p3q^5*(p2q*(648*s12^8*s13 + 1296*s12^7*
                   s13^2 + 648*s12^6*s13^3 + (54*s12^8 + 1575*s12^7*s13 +
                    2331*s12^6*s13^2 + 477*s12^5*s13^3 - 333*s12^4*s13^4)*
                   s23 + (189*s12^7 + 1980*s12^6*s13 + 1899*s12^5*s13^2 -
                    1098*s12^4*s13^3 - 882*s12^3*s13^4)*s23^2 +
                  (216*s12^6 + 1485*s12^5*s13 + 459*s12^4*s13^2 - 1332*s12^3*
                     s13^3 - 360*s12^2*s13^4)*s23^3 + (81*s12^5 + 432*s12^4*
                     s13 - 90*s12^3*s13^2 - 360*s12^2*s13^3)*s23^4) +
                p1q*((-396*s12^8 - 1278*s12^7*s13 - 1044*s12^6*s13^2 -
                    162*s12^5*s13^3)*s23 + (-1213*s12^7 - 2379*s12^6*s13 -
                    471*s12^5*s13^2 + 371*s12^4*s13^3)*s23^2 +
                  (-1317*s12^6 - 1653*s12^5*s13 + 168*s12^4*s13^2 +
                    270*s12^3*s13^3)*s23^3 + (-498*s12^5 - 741*s12^4*s13 -
                    20*s12^3*s13^2 - 20*s12^2*s13^3)*s23^4 +
                  (2*s12^4 - 270*s12^3*s13 - 20*s12^2*s13^2)*s23^5)) +
              p3q^4*(p2q^2*(1296*s12^8*s13 + 648*s12^7*s13^2 - 2592*s12^6*
                   s13^3 - 1944*s12^5*s13^4 + (54*s12^8 + 2313*s12^7*s13 -
                    333*s12^6*s13^2 - 4743*s12^5*s13^3 - 1125*s12^4*s13^4 +
                    1026*s12^3*s13^5)*s23 + (189*s12^7 + 1332*s12^6*s13 -
                    1908*s12^5*s13^2 - 5130*s12^4*s13^3 + 1026*s12^3*s13^4 +
                    1485*s12^2*s13^5)*s23^2 + (216*s12^6 + 423*s12^5*s13 -
                    2097*s12^4*s13^2 - 2646*s12^3*s13^3 + 1485*s12^2*s13^4 +
                    450*s12*s13^5)*s23^3 + (81*s12^5 + 108*s12^4*s13 -
                    711*s12^3*s13^2 - 450*s12^2*s13^3 + 450*s12*s13^4)*
                   s23^4) + p1q*p2q*(648*s12^8*s13 + 1296*s12^7*s13^2 +
                  648*s12^6*s13^3 + (-234*s12^8 - 684*s12^7*s13 + 1098*s12^6*
                     s13^2 + 1692*s12^5*s13^3 + 144*s12^4*s13^4)*s23 +
                  (-1130*s12^7 - 2532*s12^6*s13 + 2982*s12^5*s13^2 +
                    1570*s12^4*s13^3 - 546*s12^3*s13^4)*s23^2 +
                  (-2283*s12^6 - 2287*s12^5*s13 + 3186*s12^4*s13^2 +
                    564*s12^3*s13^3 - 466*s12^2*s13^4)*s23^3 +
                  (-1869*s12^5 - 1082*s12^4*s13 + 1658*s12^3*s13^2 -
                    286*s12^2*s13^3 - 140*s12*s13^4)*s23^4 + (-482*s12^4 -
                    238*s12^3*s13 + 320*s12^2*s13^2 - 140*s12*s13^3)*s23^5) +
                p1q^2*((-396*s12^8 - 1908*s12^7*s13 - 1980*s12^6*s13^2 -
                    468*s12^5*s13^3)*s23 + (-457*s12^7 - 2163*s12^6*s13 -
                    1515*s12^5*s13^2 - 457*s12^4*s13^3)*s23^2 +
                  (1350*s12^6 + 500*s12^5*s13 - 1880*s12^4*s13^2 - 1102*s12^3*
                     s13^3)*s23^3 + (3210*s12^5 + 1155*s12^4*s13 - 2444*s12^3*
                     s13^2 - 1019*s12^2*s13^3)*s23^4 + (2198*s12^4 +
                    186*s12^3*s13 - 1139*s12^2*s13^2 - 230*s12*s13^3)*s23^5 +
                  (399*s12^3 + 110*s12^2*s13 - 230*s12*s13^2)*s23^6)) +
              p3q^3*(p2q^3*(648*s12^8*s13 - 2592*s12^7*s13^2 - 5184*s12^6*
                   s13^3 + 1944*s12^4*s13^5 + (-90*s12^8 + 729*s12^7*s13 -
                    5031*s12^6*s13^2 - 5472*s12^5*s13^3 + 3294*s12^4*s13^4 +
                    1935*s12^3*s13^5 - 981*s12^2*s13^6)*s23 +
                  (-261*s12^7 - 252*s12^6*s13 - 3330*s12^5*s13^2 - 2322*s12^4*
                     s13^3 + 6003*s12^3*s13^4 + 810*s12^2*s13^5 - 936*s12*
                     s13^6)*s23^2 + (-252*s12^6 - 405*s12^5*s13 - 1737*s12^4*
                     s13^2 + 81*s12^3*s13^3 + 3807*s12^2*s13^4 - 306*s12*
                     s13^5 - 180*s13^6)*s23^3 + (-81*s12^5 - 72*s12^4*s13 -
                    549*s12^3*s13^2 + 270*s12^2*s13^3 + 810*s12*s13^4 -
                    180*s13^5)*s23^4) + p1q*p2q^2*(1296*s12^8*s13 +
                  1296*s12^7*s13^2 - 1296*s12^6*s13^3 - 1296*s12^5*s13^4 +
                  (72*s12^8 - 234*s12^7*s13 - 990*s12^6*s13^2 - 4338*s12^5*
                     s13^3 - 3762*s12^4*s13^4 - 108*s12^3*s13^5)*s23 +
                  (83*s12^7 - 3453*s12^6*s13 - 2382*s12^5*s13^2 - 9736*s12^4*
                     s13^3 - 3801*s12^3*s13^4 + 1257*s12^2*s13^5)*s23^2 +
                  (-615*s12^6 - 3035*s12^5*s13 - 1777*s12^4*s13^2 -
                    7749*s12^3*s13^3 + 244*s12^2*s13^4 + 1688*s12*s13^5)*
                   s23^3 + (-948*s12^5 - 1021*s12^4*s13 - 70*s12^3*s13^2 -
                    3071*s12^2*s13^3 + 1658*s12*s13^4 + 520*s13^5)*s23^4 +
                  (-322*s12^4 - 152*s12^3*s13 + 180*s12^2*s13^2 - 550*s12*
                     s13^3 + 520*s13^4)*s23^5) + p1q^2*p2q*
                 ((-378*s12^8 - 2547*s12^7*s13 - 531*s12^6*s13^2 + 2799*s12^5*
                     s13^3 + 1161*s12^4*s13^4)*s23 + (-1103*s12^7 -
                    2620*s12^6*s13 + 4707*s12^5*s13^2 + 5140*s12^4*s13^3 +
                    1184*s12^3*s13^4)*s23^2 + (-592*s12^6 + 764*s12^5*s13 +
                    3952*s12^4*s13^2 + 1489*s12^3*s13^3 - 495*s12^2*s13^4)*
                   s23^3 + (2304*s12^5 + 3252*s12^4*s13 - 11*s12^3*s13^2 -
                    3398*s12^2*s13^3 - 1368*s12*s13^4)*s23^4 +
                  (3052*s12^4 + 2075*s12^3*s13 - 1475*s12^2*s13^2 -
                    2278*s12*s13^3 - 500*s13^4)*s23^5 + (881*s12^3 +
                    470*s12^2*s13 - 410*s12*s13^2 - 500*s13^3)*s23^6) +
                p1q^3*((-90*s12^8 - 828*s12^7*s13 - 1062*s12^6*s13^2 -
                    324*s12^5*s13^3)*s23 + (684*s12^7 + 1989*s12^6*s13 +
                    1602*s12^5*s13^2 - 27*s12^4*s13^3)*s23^2 +
                  (2361*s12^6 + 6275*s12^5*s13 + 2884*s12^4*s13^2 +
                    176*s12^3*s13^3)*s23^3 + (2022*s12^5 + 5384*s12^4*s13 +
                    3049*s12^3*s13^2 + 659*s12^2*s13^3)*s23^4 +
                  (-819*s12^4 + 2469*s12^3*s13 + 2784*s12^2*s13^2 +
                    616*s12*s13^3)*s23^5 + (-1734*s12^3 + 1259*s12^2*s13 +
                    1006*s12*s13^2 + 160*s13^3)*s23^6 + (-480*s12^2 +
                    230*s12*s13 + 160*s13^2)*s23^7)) + p3q^2*(
                p2q^4*(-1944*s12^7*s13^2 + 5184*s12^5*s13^4 + 2592*s12^4*
                   s13^5 - 648*s12^3*s13^6 + (189*s12^7*s13 - 2349*s12^6*
                     s13^2 + 2052*s12^5*s13^3 + 6282*s12^4*s13^4 - 387*s12^3*
                     s13^5 - 1773*s12^2*s13^6 + 306*s12*s13^7)*s23 +
                  (612*s12^6*s13 - 162*s12^5*s13^2 + 1791*s12^4*s13^3 +
                    4329*s12^3*s13^4 - 2952*s12^2*s13^5 - 1296*s12*s13^6 +
                    180*s13^7)*s23^2 + (585*s12^5*s13 + 72*s12^4*s13^2 +
                    1431*s12^3*s13^3 + 1629*s12^2*s13^4 - 1872*s12*s13^5 -
                    180*s13^6)*s23^3 + (162*s12^4*s13 - 99*s12^3*s13^2 +
                    450*s12^2*s13^3 + 270*s12*s13^4 - 360*s13^5)*s23^4) +
                p1q*p2q^3*(648*s12^8*s13 - 1296*s12^7*s13^2 - 3888*s12^6*
                   s13^3 - 1296*s12^5*s13^4 + 648*s12^4*s13^5 +
                  (-90*s12^8 - 648*s12^7*s13 - 4554*s12^6*s13^2 - 7902*s12^5*
                     s13^3 - 612*s12^4*s13^4 + 3726*s12^3*s13^5 + 432*s12^2*
                     s13^6)*s23 + (-2778*s12^6*s13 - 5406*s12^5*s13^2 -
                    11774*s12^4*s13^3 + 3768*s12^3*s13^4 + 5208*s12^2*s13^5 -
                    578*s12*s13^6)*s23^2 + (351*s12^6 - 1717*s12^5*s13 -
                    4205*s12^4*s13^2 - 8671*s12^3*s13^3 + 7694*s12^2*s13^4 +
                    3484*s12*s13^5 - 520*s13^6)*s23^3 + (423*s12^5 -
                    176*s12^4*s13 - 2071*s12^3*s13^2 - 3062*s12^2*s13^3 +
                    5482*s12*s13^4 + 700*s13^5)*s23^4 + (162*s12^4 -
                    22*s12^3*s13 - 500*s12^2*s13^2 - 320*s12*s13^3 +
                    1220*s13^4)*s23^5) + p1q^2*p2q^2*((18*s12^8 - 2943*s12^7*
                     s13 - 4509*s12^6*s13^2 - 4275*s12^5*s13^3 - 3969*s12^4*
                     s13^4 - 1242*s12^3*s13^5)*s23 + (-466*s12^7 - 4997*s12^6*
                     s13 - 3499*s12^5*s13^2 - 7378*s12^4*s13^3 - 6419*s12^3*
                     s13^4 - 925*s12^2*s13^5)*s23^2 + (-1672*s12^6 -
                    3096*s12^5*s13 + 1546*s12^4*s13^2 - 5977*s12^3*s13^3 -
                    4443*s12^2*s13^4 + 508*s12*s13^5)*s23^3 +
                  (-825*s12^5 + 1361*s12^4*s13 + 4218*s12^3*s13^2 -
                    8157*s12^2*s13^3 - 3706*s12*s13^4 + 480*s13^5)*s23^4 +
                  (764*s12^4 + 2525*s12^3*s13 + 1403*s12^2*s13^2 - 6144*s12*
                     s13^3 - 1040*s13^4)*s23^5 + (401*s12^3 + 770*s12^2*s13 +
                    70*s12*s13^2 - 1520*s13^3)*s23^6) + p1q^3*p2q*
                 ((-90*s12^8 + 1242*s12^6*s13^2 + 1800*s12^5*s13^3 +
                    648*s12^4*s13^4)*s23 + (477*s12^7 + 4176*s12^6*s13 +
                    7047*s12^5*s13^2 + 3492*s12^4*s13^3 + 468*s12^3*s13^4)*
                   s23^2 + (2339*s12^6 + 8063*s12^5*s13 + 6918*s12^4*s13^2 +
                    1712*s12^3*s13^3 - 526*s12^2*s13^4)*s23^3 +
                  (3614*s12^5 + 7038*s12^4*s13 + 5860*s12^3*s13^2 +
                    634*s12^2*s13^3 - 506*s12*s13^4)*s23^4 + (957*s12^4 +
                    2343*s12^3*s13 + 5160*s12^2*s13^2 + 2064*s12*s13^3 -
                    120*s13^4)*s23^5 + (-1525*s12^3 - 16*s12^2*s13 +
                    3330*s12*s13^2 + 700*s13^3)*s23^6 + (-640*s12^2 -
                    180*s12*s13 + 820*s13^2)*s23^7) + p1q^4*
                 ((189*s12^7 + 1989*s12^6*s13 + 2448*s12^5*s13^2 + 648*s12^4*
                     s13^3)*s23^2 + (-162*s12^6 + 2556*s12^5*s13 + 2889*s12^4*
                     s13^2 + 1134*s12^3*s13^3)*s23^3 + (-1758*s12^5 -
                    544*s12^4*s13 + 1909*s12^3*s13^2 + 1019*s12^2*s13^3)*
                   s23^4 + (-2792*s12^4 - 2464*s12^3*s13 + 454*s12^2*s13^2 +
                    270*s12*s13^3)*s23^5 + (-1419*s12^3 - 1665*s12^2*s13 -
                    546*s12*s13^2 - 20*s13^3)*s23^6 + (126*s12^2 - 796*s12*
                     s13 - 180*s13^2)*s23^7 + (160*s12 - 160*s13)*s23^8)) +
              p3q*(p2q^5*(1944*s12^6*s13^3 + 2592*s12^5*s13^4 - 648*s12^4*
                   s13^5 - 1296*s12^3*s13^6 + (-108*s12^6*s13^2 + 2295*s12^5*
                     s13^3 + 1467*s12^4*s13^4 - 2151*s12^3*s13^5 - 603*s12^2*
                     s13^6 + 612*s12*s13^7)*s23 + (-441*s12^5*s13^2 +
                    324*s12^4*s13^3 + 135*s12^3*s13^4 - 2394*s12^2*s13^5 +
                    216*s12*s13^6 + 360*s13^7)*s23^2 + (-414*s12^4*s13^2 +
                    207*s12^3*s13^3 - 423*s12^2*s13^4 - 1026*s12*s13^5 +
                    180*s13^6)*s23^3 + (-81*s12^3*s13^2 + 90*s12^2*s13^3 -
                    90*s12*s13^4 - 180*s13^5)*s23^4) + p1q*p2q^4*
                 (-1296*s12^7*s13^2 - 1296*s12^6*s13^3 + 1296*s12^5*s13^4 +
                  1296*s12^4*s13^5 + (180*s12^7*s13 - 1512*s12^6*s13^2 +
                    378*s12^5*s13^3 + 7938*s12^4*s13^4 + 5868*s12^3*s13^5 -
                    306*s12^2*s13^6 - 306*s12*s13^7)*s23 + (522*s12^6*s13 +
                    231*s12^5*s13^2 + 977*s12^4*s13^3 + 10527*s12^3*s13^4 +
                    2253*s12^2*s13^5 - 2974*s12*s13^6 - 180*s13^7)*s23^2 +
                  (684*s12^5*s13 + 239*s12^4*s13^2 - 47*s12^3*s13^3 +
                    7878*s12^2*s13^4 - 1174*s12*s13^5 - 1580*s13^6)*s23^3 +
                  (504*s12^4*s13 - 566*s12^3*s13^2 + 173*s12^2*s13^3 +
                    3504*s12*s13^4 - 700*s13^5)*s23^4 + (162*s12^3*s13 -
                    340*s12^2*s13^2 + 90*s12*s13^3 + 700*s13^4)*s23^5) +
                p1q^2*p2q^3*((-1656*s12^7*s13 - 4320*s12^6*s13^2 - 6381*s12^5*
                     s13^3 - 4257*s12^4*s13^4 + 9*s12^3*s13^5 + 549*s12^2*
                     s13^6)*s23 + (180*s12^7 - 3352*s12^6*s13 - 8225*s12^5*
                     s13^2 - 16434*s12^4*s13^3 - 9037*s12^3*s13^4 +
                    2578*s12^2*s13^5 + 1494*s12*s13^6)*s23^2 +
                  (270*s12^6 - 3567*s12^5*s13 - 6841*s12^4*s13^2 -
                    16426*s12^3*s13^3 - 1262*s12^2*s13^4 + 6436*s12*s13^5 +
                    720*s13^6)*s23^3 + (81*s12^5 - 1888*s12^4*s13 -
                    1324*s12^3*s13^2 - 9716*s12^2*s13^3 + 2396*s12*s13^4 +
                    2740*s13^5)*s23^4 + (-90*s12^4 + 231*s12^3*s13 +
                    809*s12^2*s13^2 - 4616*s12*s13^3 + 1000*s13^4)*s23^5 +
                  (-81*s12^3 + 410*s12^2*s13 + 250*s12*s13^2 - 1020*s13^3)*
                   s23^6) + p1q^3*p2q^2*((180*s12^7*s13 + 270*s12^6*s13^2 -
                    414*s12^4*s13^4 - 324*s12^3*s13^5)*s23 + (-198*s12^7 +
                    2880*s12^6*s13 + 6660*s12^5*s13^2 + 2835*s12^4*s13^3 -
                    2808*s12^3*s13^4 - 1737*s12^2*s13^5)*s23^2 +
                  (-94*s12^6 + 6266*s12^5*s13 + 11697*s12^4*s13^2 +
                    1349*s12^3*s13^3 - 7048*s12^2*s13^4 - 2646*s12*s13^5)*
                   s23^3 + (1421*s12^5 + 7337*s12^4*s13 + 10718*s12^3*s13^2 -
                    3342*s12^2*s13^3 - 7604*s12*s13^4 - 1080*s13^5)*s23^4 +
                  (1605*s12^4 + 3089*s12^3*s13 + 5980*s12^2*s13^2 -
                    2404*s12*s13^3 - 2340*s13^4)*s23^5 + (128*s12^3 -
                    525*s12^2*s13 + 2984*s12*s13^2 - 600*s13^3)*s23^6 +
                  (-160*s12^2 - 410*s12*s13 + 660*s13^2)*s23^7) +
                p1q^4*p2q*((180*s12^7 + 522*s12^6*s13 + 1818*s12^5*s13^2 +
                    2124*s12^4*s13^3 + 648*s12^3*s13^4)*s23^2 +
                  (18*s12^6 - 675*s12^5*s13 + 4095*s12^4*s13^2 + 5949*s12^3*
                     s13^3 + 1827*s12^2*s13^4)*s23^3 + (-1243*s12^5 -
                    2514*s12^4*s13 + 6621*s12^3*s13^2 + 7586*s12^2*s13^3 +
                    2034*s12*s13^4)*s23^4 + (-2660*s12^4 - 3311*s12^3*s13 +
                    4553*s12^2*s13^2 + 4736*s12*s13^3 + 720*s13^4)*s23^5 +
                  (-1773*s12^3 - 2354*s12^2*s13 + 1236*s12*s13^2 + 980*s13^3)*
                   s23^6 + (-34*s12^2 - 1006*s12*s13 + 100*s13^2)*s23^7 +
                  (160*s12 - 160*s13)*s23^8) + p1q^5*((-108*s12^6 -
                    1494*s12^5*s13 - 1710*s12^4*s13^2 - 324*s12^3*s13^3)*
                   s23^3 + (-144*s12^5 - 3609*s12^4*s13 - 3150*s12^3*s13^2 -
                    639*s12^2*s13^3)*s23^4 + (241*s12^4 - 3505*s12^3*s13 -
                    2810*s12^2*s13^2 - 576*s12*s13^3)*s23^5 +
                  (723*s12^3 - 1599*s12^2*s13 - 1206*s12*s13^2 - 180*s13^3)*
                   s23^6 + (606*s12^2 - 270*s12*s13 - 160*s13^2)*s23^7 +
                  (160*s12 + 20*s13)*s23^8)))*Log(s23/(s12 + s13 + s23)))/
            (p1q*p2q^5*(-36*s12^4*s13^4 - 36*s12^3*s13^5)*s23^2 +
             p1q*p3q^5*((36*s12^7*s13 + 36*s12^6*s13^2)*s23^2 +
               (36*s12^6*s13 + 36*s12^5*s13^2)*s23^3) + p1q^2*p2q^4*
              ((36*s12^5*s13^3 + 36*s12^4*s13^4)*s23^2 + (108*s12^4*s13^3 +
                 144*s12^3*s13^4)*s23^3) + p1q^3*p2q^3*((-72*s12^5*s13^2 -
                 108*s12^4*s13^3)*s23^3 + (-108*s12^4*s13^2 - 216*s12^3*
                  s13^3)*s23^4) + p1q^4*p2q^2*((36*s12^5*s13 + 108*s12^4*
                  s13^2)*s23^4 + (36*s12^4*s13 + 144*s12^3*s13^2)*s23^5) +
             p1q^5*p2q*(-36*s12^4*s13*s23^5 - 36*s12^3*s13*s23^6) +
             p3q^4*(p1q*p2q*((72*s12^7*s13 - 36*s12^6*s13^2 - 108*s12^5*
                    s13^3)*s23^2 + (72*s12^6*s13 - 72*s12^4*s13^3)*s23^3) +
               p1q^2*((36*s12^7*s13 + 36*s12^6*s13^2)*s23^2 +
                 (-72*s12^6*s13 - 36*s12^5*s13^2)*s23^3 + (-108*s12^5*s13 -
                   72*s12^4*s13^2)*s23^4)) + p3q^3*(p1q*p2q^2*
                ((36*s12^7*s13 - 180*s12^6*s13^2 - 108*s12^5*s13^3 +
                   108*s12^4*s13^4)*s23^2 + (36*s12^6*s13 - 108*s12^5*s13^2 -
                   108*s12^4*s13^3 + 36*s12^3*s13^4)*s23^3) + p1q^2*p2q*
                ((72*s12^7*s13 - 72*s12^5*s13^3)*s23^2 + (-108*s12^6*s13 -
                   36*s12^5*s13^2 - 72*s12^4*s13^3)*s23^3 + (-180*s12^5*s13 -
                   144*s12^4*s13^2 - 72*s12^3*s13^3)*s23^4) + p1q^3*
                ((-108*s12^6*s13 - 72*s12^5*s13^2)*s23^3 - 36*s12^4*s13^2*
                  s23^4 + (108*s12^4*s13 + 36*s12^3*s13^2)*s23^5)) +
             p3q^2*(p1q*p2q^3*((-108*s12^6*s13^2 + 108*s12^5*s13^3 +
                   180*s12^4*s13^4 - 36*s12^3*s13^5)*s23^2 +
                 (-72*s12^5*s13^2 + 72*s12^3*s13^4)*s23^3) + p1q^2*p2q^2*
                ((36*s12^7*s13 - 108*s12^6*s13^2 - 108*s12^5*s13^3 +
                   36*s12^4*s13^4)*s23^2 + (-36*s12^6*s13 - 72*s12^5*s13^2 -
                   144*s12^4*s13^3 + 108*s12^3*s13^4)*s23^3 +
                 (-72*s12^5*s13 - 144*s12^4*s13^2 - 180*s12^3*s13^3)*s23^4) +
               p1q^3*p2q*((-180*s12^6*s13 - 144*s12^5*s13^2 - 72*s12^4*s13^3)*
                  s23^3 + (-36*s12^5*s13 - 108*s12^4*s13^2 - 108*s12^3*s13^3)*
                  s23^4 + (144*s12^4*s13 + 144*s12^3*s13^2)*s23^5) + p1q^4*
                ((108*s12^5*s13 + 36*s12^4*s13^2)*s23^4 + (72*s12^4*s13 +
                   36*s12^3*s13^2)*s23^5 - 36*s12^3*s13*s23^6)) +
             p3q*(p1q*p2q^4*((108*s12^5*s13^3 + 36*s12^4*s13^4 - 72*s12^3*
                    s13^5)*s23^2 + (36*s12^4*s13^3 + 36*s12^3*s13^4)*s23^3) +
               p1q^2*p2q^3*((-72*s12^6*s13^2 + 72*s12^4*s13^4)*s23^2 +
                 (-72*s12^5*s13^2 + 36*s12^4*s13^3 + 252*s12^3*s13^4)*s23^3 +
                 (-72*s12^4*s13^2 - 108*s12^3*s13^3)*s23^4) + p1q^3*p2q^2*
                ((-72*s12^6*s13 - 144*s12^5*s13^2 - 180*s12^4*s13^3)*s23^3 +
                 (-36*s12^5*s13 - 180*s12^4*s13^2 - 324*s12^3*s13^3)*s23^4 +
                 (36*s12^4*s13 + 108*s12^3*s13^2)*s23^5) + p1q^5*
                (-36*s12^4*s13*s23^5 - 36*s12^3*s13*s23^6) + p1q^4*p2q*
                ((144*s12^5*s13 + 144*s12^4*s13^2)*s23^4 + (108*s12^4*s13 +
                   180*s12^3*s13^2)*s23^5 - 36*s12^3*s13*s23^6))) +
           ((p3q^5*((90*s12^6 + 27*s12^5*s13 - 63*s12^4*s13^2)*s23 +
                (90*s12^5 - 153*s12^4*s13 - 90*s12^3*s13^2)*s23^2 -
                90*s12^3*s13*s23^3) + p2q^5*(-324*s12^4*s13^3 - 324*s12^3*
                 s13^4 + (90*s12^4*s13^2 - 657*s12^3*s13^3 - 117*s12^2*
                   s13^4 + 306*s12*s13^5)*s23 + (90*s12^3*s13^2 - 513*s12^2*
                   s13^3 + 396*s12*s13^4 + 180*s13^5)*s23^2 +
                (-90*s12*s13^3 + 180*s13^4)*s23^3) + p1q*p2q^4*(-324*s12^4*
                 s13^3 - 324*s12^3*s13^4 + (558*s12^4*s13^2 - 9*s12^3*s13^3 -
                  243*s12^2*s13^4)*s23 + (-180*s12^4*s13 + 1546*s12^3*s13^2 -
                  103*s12^2*s13^3 - 1028*s12*s13^4)*s23^2 +
                (-180*s12^3*s13 + 1508*s12^2*s13^2 - 1208*s12*s13^3 -
                  520*s13^4)*s23^3 + (340*s12*s13^2 - 520*s13^3)*s23^4) +
              p1q^2*p2q^3*((162*s12^5*s13 + 882*s12^4*s13^2 + 1143*s12^3*
                   s13^3 + 117*s12^2*s13^4 - 306*s12*s13^5)*s23 +
                (1348*s12^3*s13^2 + 1283*s12^2*s13^3 - 416*s12*s13^4 -
                  180*s13^5)*s23^2 + (90*s12^4 - 1103*s12^3*s13 + 1057*s12^2*
                   s13^2 + 1388*s12*s13^3 - 160*s13^4)*s23^3 +
                (90*s12^3 - 1441*s12^2*s13 + 1388*s12*s13^2 + 520*s13^3)*
                 s23^4 + (-410*s12*s13 + 500*s13^2)*s23^5) + p1q^3*p2q^2*(
                (90*s12^4*s13^2 + 333*s12^3*s13^3 + 243*s12^2*s13^4)*s23 +
                (-198*s12^5 - 720*s12^4*s13 - 1296*s12^3*s13^2 + 387*s12^2*
                   s13^3 + 1008*s12*s13^4)*s23^2 + (-342*s12^4 - 1535*s12^3*
                   s13 - 1873*s12^2*s13^2 + 1408*s12*s13^3 + 540*s13^4)*
                 s23^3 + (142*s12^3 - 1319*s12^2*s13 - 916*s12*s13^2 +
                  500*s13^3)*s23^4 + (446*s12^2 - 736*s12*s13 - 200*s13^2)*
                 s23^5 + (160*s12 - 160*s13)*s23^6) + p1q^5*(
                (90*s12^4 + 333*s12^3*s13 + 243*s12^2*s13^2)*s23^3 +
                (90*s12^3 + 639*s12^2*s13 + 396*s12*s13^2)*s23^4 +
                (576*s12*s13 + 180*s13^2)*s23^5 + 180*s13*s23^6) +
              p1q^4*p2q*((-180*s12^4*s13 - 666*s12^3*s13^2 - 486*s12^2*s13^3)*
                 s23^2 + (90*s12^4 + 351*s12^3*s13 - 1143*s12^2*s13^2 -
                  1098*s12*s13^3)*s23^3 + (412*s12^3 + 833*s12^2*s13 -
                  1568*s12*s13^2 - 540*s13^3)*s23^4 + (482*s12^2 +
                  250*s12*s13 - 520*s13^2)*s23^5 + (160*s12 + 20*s13)*
                 s23^6) + p3q^4*(p2q*(-324*s12^6*s13 - 324*s12^5*s13^2 +
                  (270*s12^6 - 783*s12^5*s13 - 297*s12^4*s13^2 + 432*s12^3*
                     s13^3)*s23 + (270*s12^5 - 999*s12^4*s13 + 522*s12^3*
                     s13^2 + 360*s12^2*s13^3)*s23^2 + (-270*s12^3*s13 +
                    360*s12^2*s13^2)*s23^3) + p1q*((234*s12^6 + 315*s12^5*
                     s13 + 81*s12^4*s13^2)*s23 + (664*s12^5 + 221*s12^4*s13 -
                    290*s12^3*s13^2)*s23^2 + (590*s12^4 - 110*s12^3*s13 +
                    20*s12^2*s13^2)*s23^3 + (160*s12^3 + 20*s12^2*s13)*
                   s23^4)) + p3q^3*(p2q^2*(-648*s12^6*s13 + 648*s12^4*s13^3 +
                  (270*s12^6 - 1827*s12^5*s13 + 999*s12^4*s13^2 + 1125*s12^3*
                     s13^3 - 675*s12^2*s13^4)*s23 + (270*s12^5 - 1719*s12^4*
                     s13 + 2430*s12^3*s13^2 - 225*s12^2*s13^3 - 450*s12*
                     s13^4)*s23^2 + (-270*s12^3*s13 + 900*s12^2*s13^2 -
                    450*s12*s13^3)*s23^3) + p1q*p2q*(-324*s12^6*s13 -
                  324*s12^5*s13^2 + (468*s12^6 + 162*s12^5*s13 + 180*s12^4*
                     s13^2 + 162*s12^3*s13^3)*s23 + (1148*s12^5 - 148*s12^4*
                     s13 - 338*s12^3*s13^2 + 346*s12^2*s13^3)*s23^2 +
                  (1000*s12^4 - 626*s12^3*s13 + 386*s12^2*s13^2 + 140*s12*
                     s13^3)*s23^3 + (320*s12^3 - 100*s12^2*s13 + 140*s12*
                     s13^2)*s23^4) + p1q^2*((234*s12^6 + 621*s12^5*s13 +
                    387*s12^4*s13^2)*s23 + (520*s12^5 + 887*s12^4*s13 +
                    214*s12^3*s13^2)*s23^2 + (-396*s12^4 + 321*s12^3*s13 +
                    789*s12^2*s13^2)*s23^3 + (-1002*s12^3 + 699*s12^2*s13 +
                    230*s12*s13^2)*s23^4 + (-320*s12^2 + 230*s12*s13)*
                   s23^5)) + p3q^2*(p2q^3*(-324*s12^6*s13 + 972*s12^5*s13^2 +
                  972*s12^4*s13^3 - 324*s12^3*s13^4 + (90*s12^6 - 1197*s12^5*
                     s13 + 2727*s12^4*s13^2 + 297*s12^3*s13^3 - 1467*s12^2*
                     s13^4 + 306*s12*s13^5)*s23 + (90*s12^5 - 1053*s12^4*
                     s13 + 3024*s12^3*s13^2 - 2043*s12^2*s13^3 - 504*s12*
                     s13^4 + 180*s13^5)*s23^2 + (-90*s12^3*s13 + 720*s12^2*
                     s13^2 - 990*s12*s13^3 + 180*s13^4)*s23^3) +
                p1q*p2q^2*(-324*s12^6*s13 + 324*s12^5*s13^2 + 648*s12^4*
                   s13^3 + (558*s12^6 + 999*s12^5*s13 + 2943*s12^4*s13^2 +
                    1287*s12^3*s13^3 - 243*s12^2*s13^4)*s23 +
                  (952*s12^5 + 805*s12^4*s13 + 3036*s12^3*s13^2 + 589*s12^2*
                     s13^3 - 1028*s12*s13^4)*s23^2 + (554*s12^4 - 454*s12^3*
                     s13 + 2220*s12^2*s13^2 - 928*s12*s13^3 - 520*s13^4)*
                   s23^3 + (160*s12^3 - 260*s12^2*s13 + 620*s12*s13^2 -
                    520*s13^3)*s23^4) + p1q^2*p2q*((396*s12^6 + 1809*s12^5*
                     s13 + 1305*s12^4*s13^2 - 108*s12^3*s13^3)*s23 +
                  (1132*s12^5 + 2547*s12^4*s13 + 474*s12^3*s13^2 + 184*s12^2*
                     s13^3)*s23^2 + (-86*s12^4 - 181*s12^3*s13 + 1525*s12^2*
                     s13^2 + 1098*s12*s13^3)*s23^3 + (-1462*s12^3 -
                    347*s12^2*s13 + 1648*s12*s13^2 + 500*s13^3)*s23^4 +
                  (-640*s12^2 + 50*s12*s13 + 500*s13^2)*s23^5) +
                p1q^3*((90*s12^6 + 333*s12^5*s13 + 243*s12^4*s13^2)*s23 +
                  (-234*s12^5 - 153*s12^4*s13 - 72*s12^3*s13^2)*s23^2 +
                  (-1166*s12^4 - 1099*s12^3*s13 - 185*s12^2*s13^2)*s23^3 +
                  (-840*s12^3 - 639*s12^2*s13 - 456*s12*s13^2)*s23^4 +
                  (162*s12^2 - 456*s12*s13 - 160*s13^2)*s23^5 +
                  (160*s12 - 160*s13)*s23^6)) + p3q*(p2q^4*(648*s12^5*s13^2 -
                  648*s12^3*s13^4 + (-180*s12^5*s13 + 1584*s12^4*s13^2 -
                    1053*s12^3*s13^3 - 909*s12^2*s13^4 + 612*s12*s13^5)*s23 +
                  (-180*s12^4*s13 + 1296*s12^3*s13^2 - 1971*s12^2*s13^3 +
                    342*s12*s13^4 + 360*s13^5)*s23^2 + (180*s12^2*s13^2 -
                    630*s12*s13^3 + 360*s13^4)*s23^3) + p1q*p2q^3*
                 (648*s12^5*s13^2 + 324*s12^4*s13^3 - 324*s12^3*s13^4 +
                  (180*s12^5*s13 + 2430*s12^4*s13^2 + 792*s12^3*s13^3 -
                    486*s12^2*s13^4)*s23 + (-180*s12^5 - 302*s12^4*s13 +
                    3982*s12^3*s13^2 + 140*s12^2*s13^3 - 2056*s12*s13^4)*
                   s23^2 + (-180*s12^4 - 442*s12^3*s13 + 3362*s12^2*s13^2 -
                    2276*s12*s13^3 - 1040*s13^4)*s23^3 + (-140*s12^2*s13 +
                    820*s12*s13^2 - 1040*s13^3)*s23^4) + p1q^2*p2q^2*
                 ((486*s12^6 + 1314*s12^5*s13 + 702*s12^4*s13^2 + 549*s12^3*
                     s13^3 + 675*s12^2*s13^4)*s23 + (936*s12^5 + 652*s12^4*
                     s13 + 402*s12^3*s13^2 + 2259*s12^2*s13^3 + 430*s12*
                     s13^4)*s23^2 + (76*s12^4 - 2577*s12^3*s13 + 1973*s12^2*
                     s13^2 + 2846*s12*s13^3 + 20*s13^4)*s23^3 +
                  (-694*s12^3 - 2487*s12^2*s13 + 2806*s12*s13^2 + 1020*s13^3)*
                   s23^4 + (-320*s12^2 - 590*s12*s13 + 1000*s13^2)*s23^5) +
                p1q^3*p2q*((-180*s12^5*s13 - 666*s12^4*s13^2 - 486*s12^3*
                     s13^3)*s23 + (-198*s12^5 - 1764*s12^4*s13 - 2196*s12^3*
                     s13^2 - 324*s12^2*s13^3)*s23^2 + (-860*s12^4 -
                    3282*s12^3*s13 - 1698*s12^2*s13^2 - 140*s12*s13^3)*
                   s23^3 + (-374*s12^3 - 2138*s12^2*s13 - 1372*s12*s13^2 -
                    40*s13^3)*s23^4 + (608*s12^2 - 1192*s12*s13 - 360*s13^2)*
                   s23^5 + (320*s12 - 320*s13)*s23^6) + p1q^4*
                 ((-180*s12^5 - 666*s12^4*s13 - 486*s12^3*s13^2)*s23^2 +
                  (-90*s12^4 - 1107*s12^3*s13 - 711*s12^2*s13^2)*s23^3 +
                  (412*s12^3 - 679*s12^2*s13 - 290*s12*s13^2)*s23^4 +
                  (482*s12^2 - 110*s12*s13 + 20*s13^2)*s23^5 +
                  (160*s12 + 20*s13)*s23^6)))*Log((s12 + s23)/(s12 + s13 +
                s23)))/(36*p1q*p3q^4*s12^5*s13*s23^2 + 36*p1q*p2q^4*s12^3*
              s13^3*s23^2 + 36*p1q^4*p2q*s12^3*s13*s23^4 +
             p1q^2*p2q^3*(36*s12^3*s13^3*s23^2 - 72*s12^3*s13^2*s23^3) +
             p1q^3*p2q^2*(-72*s12^3*s13^2*s23^3 + 36*s12^3*s13*s23^4) +
             p3q^3*(p1q*p2q*(72*s12^5*s13 - 72*s12^4*s13^2)*s23^2 + p1q^2*
                (36*s12^5*s13*s23^2 - 72*s12^4*s13*s23^3)) +
             p3q^2*(p1q*p2q^2*(36*s12^5*s13 - 144*s12^4*s13^2 + 36*s12^3*
                  s13^3)*s23^2 + p1q^2*p2q*((36*s12^5*s13 - 72*s12^4*s13^2)*
                  s23^2 + (-144*s12^4*s13 - 72*s12^3*s13^2)*s23^3) + p1q^3*
                (-72*s12^4*s13*s23^3 + 36*s12^3*s13*s23^4)) +
             p3q*(p1q*p2q^3*(-72*s12^4*s13^2 + 72*s12^3*s13^3)*s23^2 + 36*
                p1q^4*s12^3*s13*s23^4 + p1q^2*p2q^2*((-72*s12^4*s13^2 +
                   36*s12^3*s13^3)*s23^2 + (-72*s12^4*s13 - 144*s12^3*s13^2)*
                  s23^3) + p1q^3*p2q*((-72*s12^4*s13 - 72*s12^3*s13^2)*
                  s23^3 + 72*s12^3*s13*s23^4)))) +
         Log((p1q + p2q)/(p1q + p2q + p3q))*
          (((p3q^6*((-9*s12^4*s13 - 9*s12^3*s13^2)*s23 +
                (-s12^4 - 10*s12^3*s13)*s23^2 - s12^3*s23^3) +
              p2q^6*(36*s12^2*s13^4 + 36*s12*s13^5 + (63*s12^2*s13^3 +
                  171*s12*s13^4 + 72*s13^5)*s23 + (136*s12*s13^3 + 145*s13^4)*
                 s23^2 + (s12*s13^2 + 74*s13^3)*s23^3 + s13^2*s23^4) +
              p1q^6*((-9*s12^2*s13 - 18*s12*s13^2 - 9*s13^3)*s23^3 +
                (-18*s12*s13 - 18*s13^2)*s23^4 - 9*s13*s23^5) +
              p1q*p2q^5*(72*s12^2*s13^4 + 72*s12*s13^5 + (18*s12^2*s13^3 +
                  189*s12*s13^4 + 99*s13^5)*s23 + (-129*s12^2*s13^2 -
                  149*s12*s13^3 + 61*s13^4)*s23^2 + (-276*s12*s13^2 -
                  185*s13^3)*s23^3 + (-2*s12*s13 - 149*s13^2)*s23^4 -
                2*s13*s23^5) + p1q^4*p2q^2*((-9*s12^2*s13^3 - 18*s12*s13^4 -
                  9*s13^5)*s23 + (36*s12^3*s13 + 198*s12^2*s13^2 +
                  234*s12*s13^3 + 72*s13^4)*s23^2 + (2*s12^3 + 64*s12^2*s13 +
                  259*s12*s13^2 + 152*s13^3)*s23^3 + (32*s12*s13 + 79*s13^2)*
                 s23^4 + (-7*s12 + 3*s13)*s23^5 - 5*s23^6) +
              p1q^5*p2q*((18*s12^2*s13^2 + 36*s12*s13^3 + 18*s13^4)*s23^2 +
                (-54*s12^2*s13 - 63*s12*s13^2 - 9*s13^3)*s23^3 +
                (-3*s12^2 - 97*s12*s13 - 67*s13^2)*s23^4 + (-6*s12 - 43*s13)*
                 s23^5 - 3*s23^6) + p1q^3*p2q^3*((-36*s12^3*s13^2 -
                  180*s12^2*s13^3 - 189*s12*s13^4 - 45*s13^5)*s23 +
                (34*s12^3*s13 + 83*s12^2*s13^2 - 81*s12*s13^3 - 67*s13^4)*
                 s23^2 + (2*s12^3 + 172*s12^2*s13 + 313*s12*s13^2 + 70*s13^3)*
                 s23^3 + (3*s12^2 + 253*s12*s13 + 208*s13^2)*s23^4 +
                115*s13*s23^5 - s23^6) + p1q^2*p2q^4*(36*s12^2*s13^4 +
                36*s12*s13^5 + (-36*s12^3*s13^2 - 216*s12^2*s13^3 -
                  153*s12*s13^4 - 9*s13^5)*s23 + (-2*s12^3*s13 - 226*s12^2*
                   s13^2 - 564*s12*s13^3 - 205*s13^4)*s23^2 +
                (63*s12^2*s13 - 268*s12*s13^2 - 341*s13^3)*s23^3 +
                (140*s12*s13 - 70*s13^2)*s23^4 + (s12 + 76*s13)*s23^5 +
                s23^6) + p3q^5*(p2q*(-36*s12^5*s13 - 36*s12^4*s13^2 +
                  (-72*s12^4*s13 - 18*s12^3*s13^2 + 18*s12^2*s13^3)*s23 +
                  (s12^4 - 32*s12^3*s13 + 21*s12^2*s13^2)*s23^2 +
                  (2*s12^3 + 4*s12^2*s13)*s23^3 + s12^2*s23^4) +
                p1q*((-9*s12^4*s13 - 9*s12^3*s13^2)*s23 + (-s12^4 +
                    17*s12^3*s13 + 27*s12^2*s13^2)*s23^2 + (2*s12^3 +
                    30*s12^2*s13)*s23^3 + 3*s12^2*s23^4)) +
              p3q^4*(p2q^2*(-72*s12^5*s13 + 36*s12^4*s13^2 + 108*s12^3*
                   s13^3 + (-90*s12^4*s13 + 198*s12^3*s13^2 + 99*s12^2*
                     s13^3 - 9*s12*s13^4)*s23 + (s12^4 + 16*s12^3*s13 +
                    138*s12^2*s13^2 - 12*s12*s13^3)*s23^2 + (30*s12^2*s13 -
                    5*s12*s13^2)*s23^3 + (-s12^2 - 2*s12*s13)*s23^4) +
                p1q^2*((-9*s12^3*s13^2 - 9*s12^2*s13^3)*s23 +
                  (-3*s12^4 + 38*s12^3*s13 + 32*s12^2*s13^2)*s23^2 +
                  (-3*s12^3 + 14*s12^2*s13 - 27*s12*s13^2)*s23^3 +
                  (-3*s12^2 - 30*s12*s13)*s23^4 - 3*s12*s23^5) +
                p1q*p2q*(-36*s12^5*s13 + 36*s12^3*s13^3 + (36*s12^4*s13 +
                    189*s12^3*s13^2 + 81*s12^2*s13^3)*s23 +
                  (-s12^4 + 193*s12^3*s13 + 203*s12^2*s13^2)*s23^2 +
                  (-2*s12^3 + 119*s12^2*s13 - 2*s12*s13^2)*s23^3 +
                  (-3*s12^2 - 4*s12*s13)*s23^4 - 2*s12*s23^5)) +
              p3q^2*(p2q^4*(108*s12^4*s13^2 - 108*s12^3*s13^3 - 180*s12^2*
                   s13^4 + 36*s12*s13^5 + (63*s12^4*s13 + 99*s12^3*s13^2 -
                    522*s12^2*s13^3 - 162*s12*s13^4 + 36*s13^5)*s23 +
                  (138*s12^3*s13 - 210*s12^2*s13^2 - 412*s12*s13^3 +
                    71*s13^4)*s23^2 + (s12^3 + 78*s12^2*s13 - 212*s12*s13^2 +
                    34*s13^3)*s23^3 + (s12^2 + 2*s12*s13 - s13^2)*s23^4) +
                p1q*p2q^3*(144*s12^4*s13^2 - 108*s12^3*s13^3 - 216*s12^2*
                   s13^4 + 36*s12*s13^5 + (162*s12^4*s13 + 207*s12^3*s13^2 -
                    747*s12^2*s13^3 - 297*s12*s13^4 + 63*s13^5)*s23 +
                  (s12^4 + 127*s12^3*s13 - 646*s12^2*s13^2 - 891*s12*s13^3 +
                    79*s13^4)*s23^2 + (6*s12^3 - 233*s12^2*s13 - 782*s12*
                     s13^2 - 53*s13^3)*s23^3 + (7*s12^2 - 198*s12*s13 -
                    67*s13^2)*s23^4 + (2*s12 + 2*s13)*s23^5) + p1q^3*p2q*
                 ((-54*s12^4*s13 - 189*s12^3*s13^2 - 189*s12^2*s13^3 -
                    54*s12*s13^4)*s23 + (-5*s12^4 - 189*s12^3*s13 -
                    369*s12^2*s13^2 - 194*s12*s13^3 - 36*s13^4)*s23^2 +
                  (6*s12^3 - 253*s12^2*s13 - 277*s12*s13^2 - 75*s13^3)*
                   s23^3 + (22*s12^2 - 73*s12*s13 + 11*s13^2)*s23^4 +
                  (8*s12 + 47*s13)*s23^5 - 3*s23^6) + p1q^4*
                 ((-9*s12^4*s13 - 18*s12^3*s13^2 - 9*s12^2*s13^3)*s23 +
                  (18*s12^2*s13^2 + 18*s12*s13^3)*s23^2 + (6*s12^3 +
                    5*s12^2*s13 + 17*s12*s13^2 + 9*s13^3)*s23^3 +
                  (9*s12^2 + 16*s12*s13 + 32*s13^2)*s23^4 + (s12 + 21*s13)*
                   s23^5 - 2*s23^6) + p1q^2*p2q^2*(36*s12^4*s13^2 -
                  36*s12^3*s13^3 - 72*s12^2*s13^4 + (36*s12^4*s13 -
                    117*s12^3*s13^2 - 477*s12^2*s13^3 - 189*s12*s13^4 +
                    27*s13^5)*s23 + (-4*s12^4 - 248*s12^3*s13 - 886*s12^2*
                     s13^2 - 680*s12*s13^3 - 20*s13^4)*s23^2 +
                  (3*s12^3 - 565*s12^2*s13 - 809*s12*s13^2 - 147*s13^3)*
                   s23^3 + (18*s12^2 - 244*s12*s13 - 63*s13^2)*s23^4 +
                  (10*s12 + 36*s13)*s23^5 - s23^6)) +
              p3q*(p2q^5*(-108*s12^3*s13^3 - 36*s12^2*s13^4 + 72*s12*s13^5 +
                  (-126*s12^3*s13^2 - 306*s12^2*s13^3 + 108*s12*s13^4 +
                    108*s13^5)*s23 + (-273*s12^2*s13^2 - 112*s12*s13^3 +
                    215*s13^4)*s23^2 + (-2*s12^2*s13 - 150*s12*s13^2 +
                    106*s13^3)*s23^3 + (-2*s12*s13 - s13^2)*s23^4) +
                p1q*p2q^4*(-180*s12^3*s13^3 - 72*s12^2*s13^4 + 108*s12*
                   s13^5 + (-180*s12^3*s13^2 - 603*s12^2*s13^3 + 27*s12*
                     s13^4 + 162*s13^5)*s23 + (-124*s12^3*s13 - 807*s12^2*
                     s13^2 - 777*s12*s13^3 + 131*s13^4)*s23^2 +
                  (-262*s12^2*s13 - 856*s12*s13^2 - 246*s13^3)*s23^3 +
                  (-2*s12^2 - 138*s12*s13 - 213*s13^2)*s23^4 +
                  (-2*s12 + 2*s13)*s23^5) + p1q^4*p2q*((18*s12^3*s13^2 +
                    36*s12^2*s13^3 + 18*s12*s13^4)*s23 + (108*s12^3*s13 +
                    288*s12^2*s13^2 + 180*s12*s13^3)*s23^2 +
                  (8*s12^3 + 222*s12^2*s13 + 294*s12*s13^2 + 26*s13^3)*
                   s23^3 + (9*s12^2 + 174*s12*s13 + 93*s13^2)*s23^4 +
                  (-6*s12 + 60*s13)*s23^5 - 7*s23^6) + p1q^3*p2q^2*
                 ((-36*s12^4*s13 - 54*s12^3*s13^2 - 45*s12^2*s13^3 -
                    27*s12*s13^4)*s23 + (-2*s12^4 - 58*s12^3*s13 + 69*s12^2*
                     s13^2 - 5*s12*s13^3 - 85*s13^4)*s23^2 +
                  (8*s12^3 + 119*s12^2*s13 + 217*s12*s13^2 - 104*s13^3)*
                   s23^3 + (19*s12^2 + 295*s12*s13 + 138*s13^2)*s23^4 +
                  (4*s12 + 152*s13)*s23^5 - 5*s23^6) + p1q^5*
                 ((18*s12^3*s13 + 36*s12^2*s13^2 + 18*s12*s13^3)*s23^2 +
                  (27*s12^2*s13 + 27*s12*s13^2)*s23^3 + (-3*s12^2 +
                    11*s12*s13 + 5*s13^2)*s23^4 + (-6*s12 + 2*s13)*s23^5 -
                  3*s23^6) + p1q^2*p2q^3*(-72*s12^3*s13^3 - 36*s12^2*s13^4 +
                  36*s12*s13^5 + (36*s12^4*s13 + 36*s12^3*s13^2 - 270*s12^2*
                     s13^3 - 108*s12*s13^4 + 54*s13^5)*s23 +
                  (2*s12^4 - 66*s12^3*s13 - 427*s12^2*s13^2 - 728*s12*s13^3 -
                    153*s13^4)*s23^2 + (12*s12^3 - 144*s12^2*s13 - 600*s12*
                     s13^2 - 434*s13^3)*s23^3 + (15*s12^2 + 68*s12*s13 -
                    114*s13^2)*s23^4 + (4*s12 + 112*s13)*s23^5 - s23^6)) +
              p3q^3*(p2q^3*(-36*s12^5*s13 + 180*s12^4*s13^2 + 108*s12^3*
                   s13^3 - 108*s12^2*s13^4 + (36*s12^4*s13 + 432*s12^3*
                     s13^2 - 72*s12^2*s13^3 - 108*s12*s13^4)*s23 +
                  (-s12^4 + 176*s12^3*s13 + 180*s12^2*s13^2 - 176*s12*s13^3 +
                    s13^4)*s23^2 + (-2*s12^3 + 106*s12^2*s13 - 66*s12*s13^2 +
                    2*s13^3)*s23^3 + (-s12^2 + 2*s12*s13 + s13^2)*s23^4) +
                p1q*p2q^2*(-36*s12^5*s13 + 144*s12^4*s13^2 + 108*s12^3*
                   s13^3 - 72*s12^2*s13^4 + (207*s12^4*s13 + 585*s12^3*
                     s13^2 - 45*s12^2*s13^3 - 135*s12*s13^4)*s23 +
                  (s12^4 + 427*s12^3*s13 + 208*s12^2*s13^2 - 263*s12*s13^3 +
                    9*s13^4)*s23^2 + (2*s12^3 + 118*s12^2*s13 - 204*s12*
                     s13^2 + 8*s13^3)*s23^3 + (3*s12^2 - 66*s12*s13 -
                    3*s13^2)*s23^4 + (2*s12 - 2*s13)*s23^5) + p1q^2*p2q*
                 (36*s12^4*s13^2 + 36*s12^3*s13^3 + (108*s12^4*s13 +
                    162*s12^3*s13^2 - 18*s12*s13^4)*s23 + (-9*s12^4 +
                    142*s12^3*s13 - 5*s12^2*s13^2 - 84*s12*s13^3)*s23^2 +
                  (-12*s12^3 - 92*s12^2*s13 - 216*s12*s13^2 - 18*s13^3)*
                   s23^3 + (-130*s12*s13 - 19*s13^2)*s23^4 + 4*s12*s23^5 +
                  s23^6) + p1q^3*((-9*s12^4*s13 - 27*s12^3*s13^2 - 18*s12^2*
                     s13^3)*s23 + (-3*s12^4 - 7*s12^3*s13 - 13*s12^2*s13^2)*
                   s23^2 + (-47*s12^2*s13 - 55*s12*s13^2)*s23^3 +
                  (6*s12^2 - 43*s12*s13 + 9*s13^2)*s23^4 + (4*s12 + 10*s13)*
                   s23^5 + s23^6)))*Log(p3q/(p1q + p2q + p3q)))/
            (4*p1q*p3q^5*s12^4*s13*s23^2 + p1q*p2q^5*(-4*s12*s13^4*s23^2 - 4*
                s12*s13^3*s23^3) + p1q^2*p2q^4*(-8*s12*s13^4*s23^2 + 8*s12*
                s13^2*s23^4) + p1q^4*p2q^2*(8*s12*s13^3*s23^3 - 8*s12*s13*
                s23^5) + p1q^5*p2q*(-4*s12*s13^2*s23^4 - 4*s12*s13*s23^5) +
             p1q^3*p2q^3*(-4*s12*s13^4*s23^2 + 12*s12*s13^3*s23^3 + 12*s12*
                s13^2*s23^4 - 4*s12*s13*s23^5) +
             p3q^4*(p1q^2*((4*s12^4*s13 - 4*s12^3*s13^2)*s23^2 - 12*s12^3*s13*
                  s23^3) + p1q*p2q*((8*s12^4*s13 - 12*s12^3*s13^2)*s23^2 -
                 4*s12^3*s13*s23^3)) + p3q^3*(p1q*p2q^2*
                ((4*s12^4*s13 - 24*s12^3*s13^2 + 12*s12^2*s13^3)*s23^2 +
                 (-8*s12^3*s13 + 8*s12^2*s13^2)*s23^3) + p1q^2*p2q*
                ((4*s12^4*s13 - 20*s12^3*s13^2 + 8*s12^2*s13^3)*s23^2 +
                 (-28*s12^3*s13 + 8*s12^2*s13^2)*s23^3 + 8*s12^2*s13*s23^4) +
               p1q^3*(-4*s12^3*s13^2*s23^2 + (-12*s12^3*s13 + 8*s12^2*s13^2)*
                  s23^3 + 12*s12^2*s13*s23^4)) + p3q*(p1q*p2q^4*
                ((12*s12^2*s13^3 - 8*s12*s13^4)*s23^2 + (8*s12^2*s13^2 -
                   8*s12*s13^3)*s23^3) + p1q^2*p2q^3*((20*s12^2*s13^3 -
                   12*s12*s13^4)*s23^2 + (16*s12^2*s13^2 + 4*s12*s13^3)*
                  s23^3 + (8*s12^2*s13 + 16*s12*s13^2)*s23^4) + p1q^4*p2q*
                ((8*s12^2*s13^2 + 8*s12*s13^3)*s23^3 + (12*s12^2*s13 -
                   4*s12*s13^2)*s23^4 - 12*s12*s13*s23^5) + p1q^3*p2q^2*
                ((8*s12^2*s13^3 - 4*s12*s13^4)*s23^2 + (16*s12^2*s13^2 +
                   20*s12*s13^3)*s23^3 + (20*s12^2*s13 + 16*s12*s13^2)*
                  s23^4 - 8*s12*s13*s23^5) + p1q^5*(-4*s12*s13^2*s23^4 -
                 4*s12*s13*s23^5)) + p3q^2*(p1q*p2q^3*((-12*s12^3*s13^2 +
                   24*s12^2*s13^3 - 4*s12*s13^4)*s23^2 + (-4*s12^3*s13 +
                   16*s12^2*s13^2 - 4*s12*s13^3)*s23^3) + p1q^2*p2q^2*
                ((-16*s12^3*s13^2 + 28*s12^2*s13^3 - 4*s12*s13^4)*s23^2 +
                 (-16*s12^3*s13 + 24*s12^2*s13^2 + 4*s12*s13^3)*s23^3 +
                 (16*s12^2*s13 + 8*s12*s13^2)*s23^4) + p1q^4*
                (8*s12^2*s13^2*s23^3 + (12*s12^2*s13 - 4*s12*s13^2)*s23^4 -
                 4*s12*s13*s23^5) + p1q^3*p2q*((-4*s12^3*s13^2 + 8*s12^2*
                    s13^3)*s23^2 + (-12*s12^3*s13 + 24*s12^2*s13^2 +
                   8*s12*s13^3)*s23^3 + (32*s12^2*s13 + 4*s12*s13^2)*s23^4 -
                 4*s12*s13*s23^5))) + ((p3q^6*((-9*s12^4*s13 - 9*s12^3*s13^2)*
                 s23 + (-s12^4 - 10*s12^3*s13)*s23^2 - s12^3*s23^3) +
              p2q^6*(36*s12^2*s13^4 + 36*s12*s13^5 + (63*s12^2*s13^3 +
                  171*s12*s13^4 + 72*s13^5)*s23 + (136*s12*s13^3 + 145*s13^4)*
                 s23^2 + (s12*s13^2 + 74*s13^3)*s23^3 + s13^2*s23^4) +
              p1q^6*((-9*s12^2*s13 - 18*s12*s13^2 - 9*s13^3)*s23^3 +
                (-18*s12*s13 - 18*s13^2)*s23^4 - 9*s13*s23^5) +
              p1q*p2q^5*(72*s12^2*s13^4 + 72*s12*s13^5 + (18*s12^2*s13^3 +
                  189*s12*s13^4 + 99*s13^5)*s23 + (-129*s12^2*s13^2 -
                  149*s12*s13^3 + 61*s13^4)*s23^2 + (-276*s12*s13^2 -
                  185*s13^3)*s23^3 + (-2*s12*s13 - 149*s13^2)*s23^4 -
                2*s13*s23^5) + p1q^4*p2q^2*((-9*s12^2*s13^3 - 18*s12*s13^4 -
                  9*s13^5)*s23 + (36*s12^3*s13 + 198*s12^2*s13^2 +
                  234*s12*s13^3 + 72*s13^4)*s23^2 + (2*s12^3 + 64*s12^2*s13 +
                  259*s12*s13^2 + 152*s13^3)*s23^3 + (32*s12*s13 + 79*s13^2)*
                 s23^4 + (-7*s12 + 3*s13)*s23^5 - 5*s23^6) +
              p1q^5*p2q*((18*s12^2*s13^2 + 36*s12*s13^3 + 18*s13^4)*s23^2 +
                (-54*s12^2*s13 - 63*s12*s13^2 - 9*s13^3)*s23^3 +
                (-3*s12^2 - 97*s12*s13 - 67*s13^2)*s23^4 + (-6*s12 - 43*s13)*
                 s23^5 - 3*s23^6) + p1q^3*p2q^3*((-36*s12^3*s13^2 -
                  180*s12^2*s13^3 - 189*s12*s13^4 - 45*s13^5)*s23 +
                (34*s12^3*s13 + 83*s12^2*s13^2 - 81*s12*s13^3 - 67*s13^4)*
                 s23^2 + (2*s12^3 + 172*s12^2*s13 + 313*s12*s13^2 + 70*s13^3)*
                 s23^3 + (3*s12^2 + 253*s12*s13 + 208*s13^2)*s23^4 +
                115*s13*s23^5 - s23^6) + p1q^2*p2q^4*(36*s12^2*s13^4 +
                36*s12*s13^5 + (-36*s12^3*s13^2 - 216*s12^2*s13^3 -
                  153*s12*s13^4 - 9*s13^5)*s23 + (-2*s12^3*s13 - 226*s12^2*
                   s13^2 - 564*s12*s13^3 - 205*s13^4)*s23^2 +
                (63*s12^2*s13 - 268*s12*s13^2 - 341*s13^3)*s23^3 +
                (140*s12*s13 - 70*s13^2)*s23^4 + (s12 + 76*s13)*s23^5 +
                s23^6) + p3q^5*(p2q*(-36*s12^5*s13 - 36*s12^4*s13^2 +
                  (-72*s12^4*s13 - 18*s12^3*s13^2 + 18*s12^2*s13^3)*s23 +
                  (s12^4 - 32*s12^3*s13 + 21*s12^2*s13^2)*s23^2 +
                  (2*s12^3 + 4*s12^2*s13)*s23^3 + s12^2*s23^4) +
                p1q*((-9*s12^4*s13 - 9*s12^3*s13^2)*s23 + (-s12^4 +
                    17*s12^3*s13 + 27*s12^2*s13^2)*s23^2 + (2*s12^3 +
                    30*s12^2*s13)*s23^3 + 3*s12^2*s23^4)) +
              p3q^4*(p2q^2*(-72*s12^5*s13 + 36*s12^4*s13^2 + 108*s12^3*
                   s13^3 + (-90*s12^4*s13 + 198*s12^3*s13^2 + 99*s12^2*
                     s13^3 - 9*s12*s13^4)*s23 + (s12^4 + 16*s12^3*s13 +
                    138*s12^2*s13^2 - 12*s12*s13^3)*s23^2 + (30*s12^2*s13 -
                    5*s12*s13^2)*s23^3 + (-s12^2 - 2*s12*s13)*s23^4) +
                p1q^2*((-9*s12^3*s13^2 - 9*s12^2*s13^3)*s23 +
                  (-3*s12^4 + 38*s12^3*s13 + 32*s12^2*s13^2)*s23^2 +
                  (-3*s12^3 + 14*s12^2*s13 - 27*s12*s13^2)*s23^3 +
                  (-3*s12^2 - 30*s12*s13)*s23^4 - 3*s12*s23^5) +
                p1q*p2q*(-36*s12^5*s13 + 36*s12^3*s13^3 + (36*s12^4*s13 +
                    189*s12^3*s13^2 + 81*s12^2*s13^3)*s23 +
                  (-s12^4 + 193*s12^3*s13 + 203*s12^2*s13^2)*s23^2 +
                  (-2*s12^3 + 119*s12^2*s13 - 2*s12*s13^2)*s23^3 +
                  (-3*s12^2 - 4*s12*s13)*s23^4 - 2*s12*s23^5)) +
              p3q^2*(p2q^4*(108*s12^4*s13^2 - 108*s12^3*s13^3 - 180*s12^2*
                   s13^4 + 36*s12*s13^5 + (63*s12^4*s13 + 99*s12^3*s13^2 -
                    522*s12^2*s13^3 - 162*s12*s13^4 + 36*s13^5)*s23 +
                  (138*s12^3*s13 - 210*s12^2*s13^2 - 412*s12*s13^3 +
                    71*s13^4)*s23^2 + (s12^3 + 78*s12^2*s13 - 212*s12*s13^2 +
                    34*s13^3)*s23^3 + (s12^2 + 2*s12*s13 - s13^2)*s23^4) +
                p1q*p2q^3*(144*s12^4*s13^2 - 108*s12^3*s13^3 - 216*s12^2*
                   s13^4 + 36*s12*s13^5 + (162*s12^4*s13 + 207*s12^3*s13^2 -
                    747*s12^2*s13^3 - 297*s12*s13^4 + 63*s13^5)*s23 +
                  (s12^4 + 127*s12^3*s13 - 646*s12^2*s13^2 - 891*s12*s13^3 +
                    79*s13^4)*s23^2 + (6*s12^3 - 233*s12^2*s13 - 782*s12*
                     s13^2 - 53*s13^3)*s23^3 + (7*s12^2 - 198*s12*s13 -
                    67*s13^2)*s23^4 + (2*s12 + 2*s13)*s23^5) + p1q^3*p2q*
                 ((-54*s12^4*s13 - 189*s12^3*s13^2 - 189*s12^2*s13^3 -
                    54*s12*s13^4)*s23 + (-5*s12^4 - 189*s12^3*s13 -
                    369*s12^2*s13^2 - 194*s12*s13^3 - 36*s13^4)*s23^2 +
                  (6*s12^3 - 253*s12^2*s13 - 277*s12*s13^2 - 75*s13^3)*
                   s23^3 + (22*s12^2 - 73*s12*s13 + 11*s13^2)*s23^4 +
                  (8*s12 + 47*s13)*s23^5 - 3*s23^6) + p1q^4*
                 ((-9*s12^4*s13 - 18*s12^3*s13^2 - 9*s12^2*s13^3)*s23 +
                  (18*s12^2*s13^2 + 18*s12*s13^3)*s23^2 + (6*s12^3 +
                    5*s12^2*s13 + 17*s12*s13^2 + 9*s13^3)*s23^3 +
                  (9*s12^2 + 16*s12*s13 + 32*s13^2)*s23^4 + (s12 + 21*s13)*
                   s23^5 - 2*s23^6) + p1q^2*p2q^2*(36*s12^4*s13^2 -
                  36*s12^3*s13^3 - 72*s12^2*s13^4 + (36*s12^4*s13 -
                    117*s12^3*s13^2 - 477*s12^2*s13^3 - 189*s12*s13^4 +
                    27*s13^5)*s23 + (-4*s12^4 - 248*s12^3*s13 - 886*s12^2*
                     s13^2 - 680*s12*s13^3 - 20*s13^4)*s23^2 +
                  (3*s12^3 - 565*s12^2*s13 - 809*s12*s13^2 - 147*s13^3)*
                   s23^3 + (18*s12^2 - 244*s12*s13 - 63*s13^2)*s23^4 +
                  (10*s12 + 36*s13)*s23^5 - s23^6)) +
              p3q*(p2q^5*(-108*s12^3*s13^3 - 36*s12^2*s13^4 + 72*s12*s13^5 +
                  (-126*s12^3*s13^2 - 306*s12^2*s13^3 + 108*s12*s13^4 +
                    108*s13^5)*s23 + (-273*s12^2*s13^2 - 112*s12*s13^3 +
                    215*s13^4)*s23^2 + (-2*s12^2*s13 - 150*s12*s13^2 +
                    106*s13^3)*s23^3 + (-2*s12*s13 - s13^2)*s23^4) +
                p1q*p2q^4*(-180*s12^3*s13^3 - 72*s12^2*s13^4 + 108*s12*
                   s13^5 + (-180*s12^3*s13^2 - 603*s12^2*s13^3 + 27*s12*
                     s13^4 + 162*s13^5)*s23 + (-124*s12^3*s13 - 807*s12^2*
                     s13^2 - 777*s12*s13^3 + 131*s13^4)*s23^2 +
                  (-262*s12^2*s13 - 856*s12*s13^2 - 246*s13^3)*s23^3 +
                  (-2*s12^2 - 138*s12*s13 - 213*s13^2)*s23^4 +
                  (-2*s12 + 2*s13)*s23^5) + p1q^4*p2q*((18*s12^3*s13^2 +
                    36*s12^2*s13^3 + 18*s12*s13^4)*s23 + (108*s12^3*s13 +
                    288*s12^2*s13^2 + 180*s12*s13^3)*s23^2 +
                  (8*s12^3 + 222*s12^2*s13 + 294*s12*s13^2 + 26*s13^3)*
                   s23^3 + (9*s12^2 + 174*s12*s13 + 93*s13^2)*s23^4 +
                  (-6*s12 + 60*s13)*s23^5 - 7*s23^6) + p1q^3*p2q^2*
                 ((-36*s12^4*s13 - 54*s12^3*s13^2 - 45*s12^2*s13^3 -
                    27*s12*s13^4)*s23 + (-2*s12^4 - 58*s12^3*s13 + 69*s12^2*
                     s13^2 - 5*s12*s13^3 - 85*s13^4)*s23^2 +
                  (8*s12^3 + 119*s12^2*s13 + 217*s12*s13^2 - 104*s13^3)*
                   s23^3 + (19*s12^2 + 295*s12*s13 + 138*s13^2)*s23^4 +
                  (4*s12 + 152*s13)*s23^5 - 5*s23^6) + p1q^5*
                 ((18*s12^3*s13 + 36*s12^2*s13^2 + 18*s12*s13^3)*s23^2 +
                  (27*s12^2*s13 + 27*s12*s13^2)*s23^3 + (-3*s12^2 +
                    11*s12*s13 + 5*s13^2)*s23^4 + (-6*s12 + 2*s13)*s23^5 -
                  3*s23^6) + p1q^2*p2q^3*(-72*s12^3*s13^3 - 36*s12^2*s13^4 +
                  36*s12*s13^5 + (36*s12^4*s13 + 36*s12^3*s13^2 - 270*s12^2*
                     s13^3 - 108*s12*s13^4 + 54*s13^5)*s23 +
                  (2*s12^4 - 66*s12^3*s13 - 427*s12^2*s13^2 - 728*s12*s13^3 -
                    153*s13^4)*s23^2 + (12*s12^3 - 144*s12^2*s13 - 600*s12*
                     s13^2 - 434*s13^3)*s23^3 + (15*s12^2 + 68*s12*s13 -
                    114*s13^2)*s23^4 + (4*s12 + 112*s13)*s23^5 - s23^6)) +
              p3q^3*(p2q^3*(-36*s12^5*s13 + 180*s12^4*s13^2 + 108*s12^3*
                   s13^3 - 108*s12^2*s13^4 + (36*s12^4*s13 + 432*s12^3*
                     s13^2 - 72*s12^2*s13^3 - 108*s12*s13^4)*s23 +
                  (-s12^4 + 176*s12^3*s13 + 180*s12^2*s13^2 - 176*s12*s13^3 +
                    s13^4)*s23^2 + (-2*s12^3 + 106*s12^2*s13 - 66*s12*s13^2 +
                    2*s13^3)*s23^3 + (-s12^2 + 2*s12*s13 + s13^2)*s23^4) +
                p1q*p2q^2*(-36*s12^5*s13 + 144*s12^4*s13^2 + 108*s12^3*
                   s13^3 - 72*s12^2*s13^4 + (207*s12^4*s13 + 585*s12^3*
                     s13^2 - 45*s12^2*s13^3 - 135*s12*s13^4)*s23 +
                  (s12^4 + 427*s12^3*s13 + 208*s12^2*s13^2 - 263*s12*s13^3 +
                    9*s13^4)*s23^2 + (2*s12^3 + 118*s12^2*s13 - 204*s12*
                     s13^2 + 8*s13^3)*s23^3 + (3*s12^2 - 66*s12*s13 -
                    3*s13^2)*s23^4 + (2*s12 - 2*s13)*s23^5) + p1q^2*p2q*
                 (36*s12^4*s13^2 + 36*s12^3*s13^3 + (108*s12^4*s13 +
                    162*s12^3*s13^2 - 18*s12*s13^4)*s23 + (-9*s12^4 +
                    142*s12^3*s13 - 5*s12^2*s13^2 - 84*s12*s13^3)*s23^2 +
                  (-12*s12^3 - 92*s12^2*s13 - 216*s12*s13^2 - 18*s13^3)*
                   s23^3 + (-130*s12*s13 - 19*s13^2)*s23^4 + 4*s12*s23^5 +
                  s23^6) + p1q^3*((-9*s12^4*s13 - 27*s12^3*s13^2 - 18*s12^2*
                     s13^3)*s23 + (-3*s12^4 - 7*s12^3*s13 - 13*s12^2*s13^2)*
                   s23^2 + (-47*s12^2*s13 - 55*s12*s13^2)*s23^3 +
                  (6*s12^2 - 43*s12*s13 + 9*s13^2)*s23^4 + (4*s12 + 10*s13)*
                   s23^5 + s23^6)))*Log(s12/(s12 + s13 + s23)))/
            (4*p1q*p3q^5*s12^4*s13*s23^2 + p1q*p2q^5*(-4*s12*s13^4*s23^2 - 4*
                s12*s13^3*s23^3) + p1q^2*p2q^4*(-8*s12*s13^4*s23^2 + 8*s12*
                s13^2*s23^4) + p1q^4*p2q^2*(8*s12*s13^3*s23^3 - 8*s12*s13*
                s23^5) + p1q^5*p2q*(-4*s12*s13^2*s23^4 - 4*s12*s13*s23^5) +
             p1q^3*p2q^3*(-4*s12*s13^4*s23^2 + 12*s12*s13^3*s23^3 + 12*s12*
                s13^2*s23^4 - 4*s12*s13*s23^5) +
             p3q^4*(p1q^2*((4*s12^4*s13 - 4*s12^3*s13^2)*s23^2 - 12*s12^3*s13*
                  s23^3) + p1q*p2q*((8*s12^4*s13 - 12*s12^3*s13^2)*s23^2 -
                 4*s12^3*s13*s23^3)) + p3q^3*(p1q*p2q^2*
                ((4*s12^4*s13 - 24*s12^3*s13^2 + 12*s12^2*s13^3)*s23^2 +
                 (-8*s12^3*s13 + 8*s12^2*s13^2)*s23^3) + p1q^2*p2q*
                ((4*s12^4*s13 - 20*s12^3*s13^2 + 8*s12^2*s13^3)*s23^2 +
                 (-28*s12^3*s13 + 8*s12^2*s13^2)*s23^3 + 8*s12^2*s13*s23^4) +
               p1q^3*(-4*s12^3*s13^2*s23^2 + (-12*s12^3*s13 + 8*s12^2*s13^2)*
                  s23^3 + 12*s12^2*s13*s23^4)) + p3q*(p1q*p2q^4*
                ((12*s12^2*s13^3 - 8*s12*s13^4)*s23^2 + (8*s12^2*s13^2 -
                   8*s12*s13^3)*s23^3) + p1q^2*p2q^3*((20*s12^2*s13^3 -
                   12*s12*s13^4)*s23^2 + (16*s12^2*s13^2 + 4*s12*s13^3)*
                  s23^3 + (8*s12^2*s13 + 16*s12*s13^2)*s23^4) + p1q^4*p2q*
                ((8*s12^2*s13^2 + 8*s12*s13^3)*s23^3 + (12*s12^2*s13 -
                   4*s12*s13^2)*s23^4 - 12*s12*s13*s23^5) + p1q^3*p2q^2*
                ((8*s12^2*s13^3 - 4*s12*s13^4)*s23^2 + (16*s12^2*s13^2 +
                   20*s12*s13^3)*s23^3 + (20*s12^2*s13 + 16*s12*s13^2)*
                  s23^4 - 8*s12*s13*s23^5) + p1q^5*(-4*s12*s13^2*s23^4 -
                 4*s12*s13*s23^5)) + p3q^2*(p1q*p2q^3*((-12*s12^3*s13^2 +
                   24*s12^2*s13^3 - 4*s12*s13^4)*s23^2 + (-4*s12^3*s13 +
                   16*s12^2*s13^2 - 4*s12*s13^3)*s23^3) + p1q^2*p2q^2*
                ((-16*s12^3*s13^2 + 28*s12^2*s13^3 - 4*s12*s13^4)*s23^2 +
                 (-16*s12^3*s13 + 24*s12^2*s13^2 + 4*s12*s13^3)*s23^3 +
                 (16*s12^2*s13 + 8*s12*s13^2)*s23^4) + p1q^4*
                (8*s12^2*s13^2*s23^3 + (12*s12^2*s13 - 4*s12*s13^2)*s23^4 -
                 4*s12*s13*s23^5) + p1q^3*p2q*((-4*s12^3*s13^2 + 8*s12^2*
                    s13^3)*s23^2 + (-12*s12^3*s13 + 24*s12^2*s13^2 +
                   8*s12*s13^3)*s23^3 + (32*s12^2*s13 + 4*s12*s13^2)*s23^4 -
                 4*s12*s13*s23^5))) + ((p3q^5*(s12^4 + s12^3*s13 +
                s12^3*s23) + p2q^5*(-(s12*s13^3) - s13^4 + (-(s12*s13^2) -
                  2*s13^3)*s23 - s13^2*s23^2) + p1q*p2q^4*(3*s12^2*s13^2 +
                s12*s13^3 - 2*s13^4 + (2*s12*s13^2 - 3*s13^3)*s23 +
                (2*s12*s13 + s13^2)*s23^2 + 2*s13*s23^3) + p1q^2*p2q^3*(
                2*s12^3*s13 + 12*s12^2*s13^2 + 11*s12*s13^3 + s13^4 +
                (2*s12^2*s13 + 9*s12*s13^2)*s23 + s12*s13*s23^2 - s12*s23^3 -
                s23^4) + p1q^5*((-2*s12^2*s13 - 4*s12*s13^2 - 2*s13^3)*s23 +
                (s12^2 - 3*s12*s13 - 4*s13^2)*s23^2 - 3*s13*s23^3 - s23^4) +
              p1q^4*p2q*(4*s12^3*s13 + 10*s12^2*s13^2 + 8*s12*s13^3 +
                2*s13^4 + (2*s12^3 + 8*s12^2*s13 + 6*s12*s13^2)*s23 +
                (8*s12^2 + 9*s12*s13 - s13^2)*s23^2 + (7*s12 + 2*s13)*s23^3 +
                s23^4) + p1q^3*p2q^2*(6*s12^3*s13 + 19*s12^2*s13^2 +
                17*s12*s13^3 + 4*s13^4 + (2*s12^3 + 12*s12^2*s13 +
                  16*s12*s13^2 + 3*s13^3)*s23 + (7*s12^2 + 11*s12*s13 +
                  s13^2)*s23^2 + (6*s12 + 3*s13)*s23^3 + s23^4) +
              p3q^4*(p1q*(s12^4 + s12^3*s13 + (-2*s12^3 - 3*s12^2*s13)*s23 -
                  3*s12^2*s23^2) + p2q*(-2*s12^4 - 5*s12^3*s13 - 3*s12^2*
                   s13^2 + (-3*s12^3 - 4*s12^2*s13)*s23 - s12^2*s23^2)) +
              p3q^3*(p2q^2*(s12^4 + 7*s12^3*s13 + 9*s12^2*s13^2 +
                  3*s12*s13^3 + (3*s12^3 + 10*s12^2*s13 + 5*s12*s13^2)*s23 +
                  (2*s12^2 + 2*s12*s13)*s23^2) + p1q*p2q*
                 ((4*s12^3 + 6*s12^2*s13 + 2*s12*s13^2)*s23 +
                  (6*s12^2 + 4*s12*s13)*s23^2 + 2*s12*s23^3) +
                p1q^2*(s12^4 + 3*s12^3*s13 + 2*s12^2*s13^2 + (-3*s12^3 -
                    2*s12^2*s13)*s23 + (-s12^2 + 3*s12*s13)*s23^2 +
                  3*s12*s23^3)) + p3q^2*(p2q^3*(-3*s12^3*s13 - 9*s12^2*
                   s13^2 - 7*s12*s13^3 - s13^4 + (-s12^3 - 8*s12^2*s13 -
                    11*s12*s13^2 - 2*s13^3)*s23 + (-s12^2 - 4*s12*s13 -
                    s13^2)*s23^2) + p1q*p2q^2*(-s12^4 - 3*s12^3*s13 -
                  s12^2*s13^2 + s12*s13^3 + (-6*s12^3 - 11*s12^2*s13 -
                    2*s12*s13^2 + s13^3)*s23 + (-9*s12^2 - 6*s12*s13 +
                    3*s13^2)*s23^2 + (-4*s12 + 2*s13)*s23^3) + p1q^2*p2q*
                 (s12^3*s13 + 3*s12^2*s13^2 + 2*s12*s13^3 + (-3*s12^3 -
                    4*s12^2*s13)*s23 + (-5*s12^2 - 3*s12*s13 + s13^2)*s23^2 -
                  3*s12*s23^3 - s23^4) + p1q^3*(s12^4 + 5*s12^3*s13 +
                  6*s12^2*s13^2 + 2*s12*s13^3 + (-2*s12^3 + s12^2*s13 +
                    2*s12*s13^2)*s23 + (2*s12^2 + 5*s12*s13)*s23^2 +
                  (4*s12 - s13)*s23^3 - s23^4)) + p3q*(p2q^4*(3*s12^2*s13^2 +
                  5*s12*s13^3 + 2*s13^4 + (2*s12^2*s13 + 7*s12*s13^2 +
                    4*s13^3)*s23 + (2*s12*s13 + 2*s13^2)*s23^2) +
                p1q*p2q^3*(-2*s12^3*s13 + 2*s12^2*s13^2 + 2*s12*s13^3 -
                  2*s13^4 + (-4*s12^2*s13 - 6*s12*s13^2 - 10*s13^3)*s23 +
                  (2*s12^2 - 4*s12*s13 - 12*s13^2)*s23^2 + (2*s12 - 4*s13)*
                   s23^3) + p1q^3*p2q*(-2*s12^4 + 6*s12^2*s13^2 +
                  2*s12*s13^3 - 2*s13^4 + (-8*s12^3 - 10*s12^2*s13 -
                    12*s12*s13^2 - 12*s13^3)*s23 + (-4*s12^2 - 6*s12*s13 -
                    12*s13^2)*s23^2 + (2*s12 - 2*s13)*s23^3) +
                p1q^4*(2*s12^3*s13 + 4*s12^2*s13^2 + 2*s12*s13^3 +
                  (-2*s12^3 - 2*s12^2*s13 - 2*s12*s13^2 - 2*s13^3)*s23 +
                  (s12^2 - s12*s13 - 4*s13^2)*s23^2 + (s12 - 4*s13)*s23^3 -
                  2*s23^4) + p1q^2*p2q^2*(-2*s12^4 - 4*s12^3*s13 +
                  3*s12^2*s13^2 + s12*s13^3 - 4*s13^4 + (-6*s12^3 -
                    10*s12^2*s13 - 13*s12*s13^2 - 18*s13^3)*s23 +
                  (-s12^2 - 3*s12*s13 - 16*s13^2)*s23^2 + 5*s12*s23^3 +
                  2*s23^4)))*Log(s13/(s12 + s13 + s23)))/
            (4*p1q*p3q^4*s12^4*s13 + p1q*p2q^4*(-4*s12*s13^4 - 4*s12*s13^3*
                s23) + p1q^2*p2q^3*(-8*s12*s13^4 + 8*s12*s13^2*s23^2) +
             p1q^4*p2q*(8*s12*s13^3*s23 - 8*s12*s13*s23^3) +
             p1q^5*(-4*s12*s13^2*s23^2 - 4*s12*s13*s23^3) +
             p1q^3*p2q^2*(-4*s12*s13^4 + 12*s12*s13^3*s23 + 12*s12*s13^2*
                s23^2 - 4*s12*s13*s23^3) + p3q^3*(p1q^2*(4*s12^4*s13 -
                 4*s12^3*s13^2 - 12*s12^3*s13*s23) + p1q*p2q*(4*s12^4*s13 -
                 12*s12^3*s13^2 - 4*s12^3*s13*s23)) +
             p3q^2*(p1q*p2q^2*(-12*s12^3*s13^2 + 12*s12^2*s13^3 +
                 (-4*s12^3*s13 + 8*s12^2*s13^2)*s23) + p1q^2*p2q*
                (-16*s12^3*s13^2 + 8*s12^2*s13^3 + (-16*s12^3*s13 +
                   8*s12^2*s13^2)*s23 + 8*s12^2*s13*s23^2) + p1q^3*
                (-4*s12^3*s13^2 + (-12*s12^3*s13 + 8*s12^2*s13^2)*s23 +
                 12*s12^2*s13*s23^2)) + p3q*(p1q*p2q^3*(12*s12^2*s13^3 -
                 4*s12*s13^4 + (8*s12^2*s13^2 - 4*s12*s13^3)*s23) + p1q^2*
                p2q^2*(20*s12^2*s13^3 - 4*s12*s13^4 + (16*s12^2*s13^2 +
                   4*s12*s13^3)*s23 + (8*s12^2*s13 + 8*s12*s13^2)*s23^2) +
               p1q^4*(8*s12^2*s13^2*s23 + (12*s12^2*s13 - 4*s12*s13^2)*
                  s23^2 - 4*s12*s13*s23^3) + p1q^3*p2q*(8*s12^2*s13^3 +
                 (16*s12^2*s13^2 + 8*s12*s13^3)*s23 + (20*s12^2*s13 +
                   4*s12*s13^2)*s23^2 - 4*s12*s13*s23^3))) +
           ((p3q^6*(9*s12^4 + 9*s12^3*s13 + 9*s12^3*s23) +
              p2q^6*(-27*s12^2*s13^2 - 63*s12*s13^3 - 36*s13^4 +
                (-63*s12*s13^2 - 72*s13^3)*s23 - 36*s13^2*s23^2) +
              p1q*p2q^5*(18*s12^2*s13^2 - 9*s12*s13^3 - 27*s13^4 +
                (90*s12^2*s13 + 180*s12*s13^2 + 45*s13^3)*s23 +
                (198*s12*s13 + 180*s13^2)*s23^2 + 108*s13*s23^3) +
              p1q^2*p2q^4*(-36*s12^3*s13 + 18*s12^2*s13^2 + 81*s12*s13^3 +
                27*s13^4 + (-72*s12^3 - 162*s12^2*s13 + 81*s12*s13^2 +
                  108*s13^3)*s23 + (-207*s12^2 - 171*s12*s13 + 99*s13^2)*
                 s23^2 + (-207*s12 - 54*s13)*s23^3 - 72*s23^4) +
              p1q^3*p2q^3*(-36*s12^3*s13 - 18*s12^2*s13^2 + 45*s12*s13^3 +
                27*s13^4 + (-108*s12^3 - 378*s12^2*s13 - 288*s12*s13^2 -
                  45*s13^3)*s23 + (-252*s12^2 - 477*s12*s13 - 171*s13^2)*
                 s23^2 + (-198*s12 - 153*s13)*s23^3 - 54*s23^4) +
              p1q^6*((9*s12^2 + 18*s12*s13 + 9*s13^2)*s23^2 +
                (18*s12 + 18*s13)*s23^3 + 9*s23^4) + p1q^5*p2q*(
                (-18*s12^2*s13 - 36*s12*s13^2 - 18*s13^3)*s23 +
                (54*s12^2 + 63*s12*s13 + 9*s13^2)*s23^2 + (90*s12 + 63*s13)*
                 s23^3 + 36*s23^4) + p1q^4*p2q^2*(9*s12^2*s13^2 +
                18*s12*s13^3 + 9*s13^4 + (-36*s12^3 - 144*s12^2*s13 -
                  162*s12*s13^2 - 54*s13^3)*s23 + (-63*s12*s13 - 54*s13^2)*
                 s23^2 + (81*s12 + 54*s13)*s23^3 + 45*s23^4) +
              p3q^5*(p2q*(-18*s12^3*s13 - 18*s12^2*s13^2 - 18*s12^2*s13*
                   s23) + p1q*(9*s12^4 + 9*s12^3*s13 + (-18*s12^3 -
                    27*s12^2*s13)*s23 - 27*s12^2*s23^2)) +
              p3q^4*(p2q^2*(-18*s12^4 - 18*s12^3*s13 + 9*s12^2*s13^2 +
                  9*s12*s13^3 + (-18*s12^3 + 9*s12*s13^2)*s23) +
                p1q*p2q*(-9*s12^3*s13 - 9*s12^2*s13^2 + (-18*s12^3 -
                    27*s12^2*s13)*s23 - 18*s12^2*s23^2) + p1q^2*
                 (9*s12^3*s13 + 9*s12^2*s13^2 + (-45*s12^3 - 36*s12^2*s13)*
                   s23 + (-18*s12^2 + 27*s12*s13)*s23^2 + 27*s12*s23^3)) +
              p3q^2*(p2q^4*(-27*s12^4 + 9*s12^3*s13 + 90*s12^2*s13^2 +
                  54*s12*s13^3 + (-63*s12^3 + 72*s12^2*s13 + 126*s12*s13^2)*
                   s23 + (-36*s12^2 + 72*s12*s13)*s23^2) + p1q*p2q^3*
                 (18*s12^4 + 45*s12^3*s13 + 135*s12^2*s13^2 + 117*s12*s13^3 +
                  9*s13^4 + (90*s12^3 + 261*s12^2*s13 + 324*s12*s13^2 +
                    63*s13^3)*s23 + (144*s12^2 + 306*s12*s13 + 126*s13^2)*
                   s23^2 + (72*s12 + 72*s13)*s23^3) + p1q^2*p2q^2*
                 (90*s12^4 + 117*s12^3*s13 + 63*s12^2*s13^2 + 45*s12*s13^3 +
                  9*s13^4 + (189*s12^3 + 216*s12^2*s13 + 207*s12*s13^2 +
                    90*s13^3)*s23 + (153*s12^2 + 288*s12*s13 + 225*s13^2)*
                   s23^2 + (54*s12 + 144*s13)*s23^3) + p1q^4*(9*s12^4 +
                  18*s12^3*s13 + 9*s12^2*s13^2 + (-18*s12^2*s13 - 18*s12*
                     s13^2)*s23 + (9*s12^2 - 9*s12*s13 - 9*s13^2)*s23^2 +
                  (-9*s12 - 36*s13)*s23^3 - 27*s23^4) + p1q^3*p2q*
                 (54*s12^4 + 99*s12^3*s13 + 45*s12^2*s13^2 + (36*s12^3 +
                    9*s12^2*s13 + 18*s12*s13^2 + 36*s13^3)*s23 +
                  (36*s12^2 + 117*s12*s13 + 117*s13^2)*s23^2 +
                  (36*s12 + 63*s13)*s23^3 - 18*s23^4)) +
              p3q*(p2q^5*(54*s12^3*s13 + 90*s12^2*s13^2 - 36*s13^4 +
                  (126*s12^2*s13 + 72*s12*s13^2 - 72*s13^3)*s23 +
                  (72*s12*s13 - 36*s13^2)*s23^2) + p1q*p2q^4*(-36*s12^3*s13 -
                  9*s12^2*s13^2 - 27*s12*s13^3 - 54*s13^4 + (18*s12^3 +
                    126*s12^2*s13 + 234*s12*s13^2 + 9*s13^3)*s23 +
                  (54*s12^2 + 324*s12*s13 + 207*s13^2)*s23^2 +
                  (36*s12 + 144*s13)*s23^3) + p1q^2*p2q^3*(36*s12^4 -
                  108*s12^3*s13 - 216*s12^2*s13^2 - 108*s12*s13^3 -
                  36*s13^4 + (18*s12^3 - 198*s12^2*s13 - 18*s12*s13^2 +
                    54*s13^3)*s23 + (-72*s12^2 + 90*s12*s13 + 270*s13^2)*
                   s23^2 + (-90*s12 + 144*s13)*s23^3 - 36*s23^4) +
                p1q^3*p2q^2*(36*s12^4 - 36*s12^3*s13 - 153*s12^2*s13^2 -
                  99*s12*s13^3 - 18*s13^4 + (-90*s12^3 - 396*s12^2*s13 -
                    252*s12*s13^2 + 9*s13^3)*s23 + (-243*s12^2 - 189*s12*
                     s13 + 153*s13^2)*s23^2 + (-144*s12 + 99*s13)*s23^3 -
                  27*s23^4) + p1q^4*p2q*(-18*s12^3*s13 - 36*s12^2*s13^2 -
                  18*s12*s13^3 + (-108*s12^3 - 234*s12^2*s13 - 108*s12*
                     s13^2 + 18*s13^3)*s23 + (-144*s12^2 - 90*s12*s13 +
                    72*s13^2)*s23^2 + (-54*s12 + 36*s13)*s23^3 - 18*s23^4) +
                p1q^5*((-18*s12^3 - 36*s12^2*s13 - 18*s12*s13^2)*s23 +
                  (-27*s12^2 - 27*s12*s13)*s23^2 + (-18*s12 - 9*s13)*s23^3 -
                  9*s23^4)) + p3q^3*(p2q^3*(-36*s12^4 - 36*s12^3*s13 +
                  (-72*s12^3 - 36*s12^2*s13)*s23 - 36*s12^2*s23^2) +
                p1q*p2q^2*(-27*s12^4 - 81*s12^3*s13 - 63*s12^2*s13^2 -
                  9*s12*s13^3 + (-36*s12^3 - 99*s12^2*s13 - 54*s12*s13^2 -
                    9*s13^3)*s23 + (-9*s12^2 - 36*s12*s13 - 9*s13^2)*s23^2) +
                p1q^2*p2q*(18*s12^4 + 18*s12^3*s13 - 18*s12^2*s13^2 -
                  18*s12*s13^3 + (-18*s12^3 - 72*s12^2*s13 - 54*s12*s13^2)*
                   s23 + (18*s12*s13 + 18*s13^2)*s23^2 + (36*s12 + 18*s13)*
                   s23^3) + p1q^3*(9*s12^4 + 27*s12^3*s13 + 18*s12^2*s13^2 +
                  9*s12^2*s13*s23 + (54*s12^2 + 63*s12*s13)*s23^2 +
                  (54*s12 - 9*s13)*s23^3 - 9*s23^4)))*
             Log(s23/(s12 + s13 + s23)))/(4*p1q*p3q^5*s12^4*s23 +
             p1q*p2q^5*(-4*s12*s13^3*s23 - 4*s12*s13^2*s23^2) +
             p1q^2*p2q^4*(-8*s12*s13^3*s23 + 8*s12*s13*s23^3) +
             p1q^4*p2q^2*(8*s12*s13^2*s23^2 - 8*s12*s23^4) +
             p1q^5*p2q*(-4*s12*s13*s23^3 - 4*s12*s23^4) + p1q^3*p2q^3*
              (-4*s12*s13^3*s23 + 12*s12*s13^2*s23^2 + 12*s12*s13*s23^3 - 4*
                s12*s23^4) + p3q^4*(p1q^2*((4*s12^4 - 4*s12^3*s13)*s23 -
                 12*s12^3*s23^2) + p1q*p2q*((8*s12^4 - 12*s12^3*s13)*s23 -
                 4*s12^3*s23^2)) + p3q^3*(p1q*p2q^2*((4*s12^4 - 24*s12^3*
                    s13 + 12*s12^2*s13^2)*s23 + (-8*s12^3 + 8*s12^2*s13)*
                  s23^2) + p1q^2*p2q*((4*s12^4 - 20*s12^3*s13 + 8*s12^2*
                    s13^2)*s23 + (-28*s12^3 + 8*s12^2*s13)*s23^2 +
                 8*s12^2*s23^3) + p1q^3*(-4*s12^3*s13*s23 + (-12*s12^3 +
                   8*s12^2*s13)*s23^2 + 12*s12^2*s23^3)) +
             p3q*(p1q*p2q^4*((12*s12^2*s13^2 - 8*s12*s13^3)*s23 +
                 (8*s12^2*s13 - 8*s12*s13^2)*s23^2) + p1q^2*p2q^3*
                ((20*s12^2*s13^2 - 12*s12*s13^3)*s23 + (16*s12^2*s13 +
                   4*s12*s13^2)*s23^2 + (8*s12^2 + 16*s12*s13)*s23^3) + p1q^4*
                p2q*((8*s12^2*s13 + 8*s12*s13^2)*s23^2 + (12*s12^2 -
                   4*s12*s13)*s23^3 - 12*s12*s23^4) + p1q^3*p2q^2*
                ((8*s12^2*s13^2 - 4*s12*s13^3)*s23 + (16*s12^2*s13 +
                   20*s12*s13^2)*s23^2 + (20*s12^2 + 16*s12*s13)*s23^3 -
                 8*s12*s23^4) + p1q^5*(-4*s12*s13*s23^3 - 4*s12*s23^4)) +
             p3q^2*(p1q*p2q^3*((-12*s12^3*s13 + 24*s12^2*s13^2 - 4*s12*s13^3)*
                  s23 + (-4*s12^3 + 16*s12^2*s13 - 4*s12*s13^2)*s23^2) +
               p1q^2*p2q^2*((-16*s12^3*s13 + 28*s12^2*s13^2 - 4*s12*s13^3)*
                  s23 + (-16*s12^3 + 24*s12^2*s13 + 4*s12*s13^2)*s23^2 +
                 (16*s12^2 + 8*s12*s13)*s23^3) + p1q^4*(8*s12^2*s13*s23^2 +
                 (12*s12^2 - 4*s12*s13)*s23^3 - 4*s12*s23^4) + p1q^3*p2q*
                ((-4*s12^3*s13 + 8*s12^2*s13^2)*s23 + (-12*s12^3 +
                   24*s12^2*s13 + 8*s12*s13^2)*s23^2 + (32*s12^2 + 4*s12*s13)*
                  s23^3 - 4*s12*s23^4))) +
           ((p2q*p3q^4*(18*s12^4*s13 + 18*s12^3*s13^2 + (36*s12^3*s13 +
                  18*s12^2*s13^2)*s23 + 18*s12^2*s13*s23^2) +
              p2q^5*(18*s12^2*s13^3 + 18*s12*s13^4 + (36*s12*s13^3 +
                  18*s13^4)*s23 + 18*s13^3*s23^2) + p1q*p2q^4*(18*s12^2*
                 s13^3 + 18*s12*s13^4 + (-18*s12^2*s13^2 + 18*s12*s13^3 +
                  18*s13^4)*s23 + (-38*s12*s13^2 - 2*s13^3)*s23^2 -
                20*s13^2*s23^3) + p1q^2*p2q^3*((-36*s12^3*s13 - 99*s12^2*
                   s13^2 - 72*s12*s13^3 - 9*s13^4)*s23 + (-71*s12^2*s13 -
                  144*s12*s13^2 - 55*s13^3)*s23^2 + (-33*s12*s13 - 44*s13^2)*
                 s23^3 + 2*s13*s23^4) + p1q^3*p2q^2*((2*s12^3 + 32*s12^2*
                   s13 + 40*s12*s13^2 + 10*s13^3)*s23^2 +
                (5*s12^2 + 63*s12*s13 + 40*s13^2)*s23^3 + (3*s12 + 30*s13)*
                 s23^4) + p1q^4*p2q*((-s12^2 - 2*s12*s13 - s13^2)*s23^3 +
                (-3*s12 - 3*s13)*s23^4 - 2*s23^5) + p3q^3*(p2q^2*
                 (36*s12^4*s13 - 36*s12^2*s13^3 + (72*s12^3*s13 - 36*s12^2*
                     s13^2 - 36*s12*s13^3)*s23 + (36*s12^2*s13 - 36*s12*
                     s13^2)*s23^2) + p1q*p2q*(18*s12^4*s13 + 18*s12^3*s13^2 +
                  (-36*s12^2*s13^2 - 18*s12*s13^3)*s23 + (-52*s12^2*s13 -
                    52*s12*s13^2)*s23^2 - 34*s12*s13*s23^3) +
                p1q^2*((s12^3 + 2*s12^2*s13 + s12*s13^2)*s23^2 +
                  (3*s12^2 + 3*s12*s13)*s23^3 + 2*s12*s23^4)) +
              p3q^2*(p2q^3*(18*s12^4*s13 - 54*s12^3*s13^2 - 54*s12^2*s13^3 +
                  18*s12*s13^4 + (36*s12^3*s13 - 126*s12^2*s13^2 -
                    36*s12*s13^3 + 18*s13^4)*s23 + (18*s12^2*s13 -
                    72*s12*s13^2 + 18*s13^3)*s23^2) + p1q*p2q^2*
                 (18*s12^4*s13 - 18*s12^3*s13^2 - 36*s12^2*s13^3 +
                  (-36*s12^3*s13 - 162*s12^2*s13^2 - 54*s12*s13^3 + 18*s13^4)*
                   s23 + (-122*s12^2*s13 - 142*s12*s13^2 + 16*s13^3)*s23^2 +
                  (-68*s12*s13 - 2*s13^2)*s23^3) + p1q^2*p2q*
                 ((-45*s12^3*s13 - 72*s12^2*s13^2 - 27*s12*s13^3)*s23 +
                  (4*s12^3 - 63*s12^2*s13 - 50*s12*s13^2 - s13^3)*s23^2 +
                  (10*s12^2 + 2*s12*s13 + 17*s13^2)*s23^3 + (6*s12 + 18*s13)*
                   s23^4) + p1q^3*((s12^3 + 2*s12^2*s13 + s12*s13^2)*s23^2 +
                  (2*s12^2 + s12*s13 - s13^2)*s23^3 + (-s12 - 3*s13)*s23^4 -
                  2*s23^5)) + p3q*(p2q^4*(-36*s12^3*s13^2 + 36*s12*s13^4 +
                  (-72*s12^2*s13^2 + 36*s12*s13^3 + 36*s13^4)*s23 +
                  (-36*s12*s13^2 + 36*s13^3)*s23^2) + p1q*p2q^3*
                 (-36*s12^3*s13^2 - 18*s12^2*s13^3 + 18*s12*s13^4 +
                  (-54*s12^3*s13 - 198*s12^2*s13^2 - 72*s12*s13^3 + 18*s13^4)*
                   s23 + (-106*s12^2*s13 - 200*s12*s13^2 - 22*s13^3)*s23^2 +
                  (-52*s12*s13 - 40*s13^2)*s23^3) + p1q^2*p2q^2*
                 ((-45*s12^3*s13 - 99*s12^2*s13^2 - 63*s12*s13^3 - 9*s13^4)*
                   s23 + (3*s12^3 - 46*s12^2*s13 - 87*s12*s13^2 - 38*s13^3)*
                   s23^2 + (7*s12^2 + 38*s12*s13 + 9*s13^2)*s23^3 +
                  (4*s12 + 38*s13)*s23^4) + p1q^4*((-s12^2 - 2*s12*s13 -
                    s13^2)*s23^3 + (-3*s12 - 3*s13)*s23^4 - 2*s23^5) +
                p1q^3*p2q*((3*s12^3 + 34*s12^2*s13 + 41*s12*s13^2 + 10*s13^3)*
                   s23^2 + (7*s12^2 + 64*s12*s13 + 39*s13^2)*s23^3 +
                  (2*s12 + 27*s13)*s23^4 - 2*s23^5)))*
             Log((s13 + s23)/(s12 + s13 + s23)))/(2*p1q*p3q^4*s12^3*s13*
              s23^2 + 2*p1q*p2q^4*s12*s13^3*s23^2 + 2*p1q^4*p2q*s12*s13*
              s23^4 + p1q^2*p2q^3*(2*s12*s13^3*s23^2 - 4*s12*s13^2*s23^3) +
             p1q^3*p2q^2*(-4*s12*s13^2*s23^3 + 2*s12*s13*s23^4) +
             p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*s23^2 + p1q^2*
                (2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
             p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*
                s23^2 + p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
                 (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) + p1q^3*
                (-4*s12^2*s13*s23^3 + 2*s12*s13*s23^4)) +
             p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 + 2*p1q^4*
                s12*s13*s23^4 + p1q^2*p2q^2*((-4*s12^2*s13^2 + 2*s12*s13^3)*
                  s23^2 + (-4*s12^2*s13 - 8*s12*s13^2)*s23^3) + p1q^3*p2q*
                ((-4*s12^2*s13 - 4*s12*s13^2)*s23^3 + 4*s12*s13*s23^4)))) +
         Log(s12/(s12 + s13 + s23))*
          ((p2q^2*(-135*s12^3*s13^2 - 171*s12^2*s13^3 - 36*s12*s13^4 +
               (-90*s12^3*s13 - 306*s12^2*s13^2 - 117*s12*s13^3)*s23 +
               (-135*s12^2*s13 - 126*s12*s13^2)*s23^2 - 45*s12*s13*s23^3) +
             p3q^2*(135*s12^4*s13 + 270*s12^3*s13^2 + 36*s12^2*s13^3 - 99*s12*
                s13^4 + (90*s12^4 + 450*s12^3*s13 + 216*s12^2*s13^2 -
                 243*s12*s13^3)*s23 + (180*s12^3 + 270*s12^2*s13 -
                 189*s12*s13^2)*s23^2 + (90*s12^2 - 45*s12*s13)*s23^3) +
             p1q^2*(99*s12^2*s13^3 + 99*s12*s13^4 + (135*s12^3*s13 +
                 414*s12^2*s13^2 + 378*s12*s13^3)*s23 + (90*s12^3 +
                 495*s12^2*s13 + 549*s12*s13^2)*s23^2 + (180*s12^2 +
                 360*s12*s13)*s23^3 + 90*s12*s23^4) +
             p1q*p2q*(135*s12^3*s13^2 + 72*s12^2*s13^3 + 18*s12*s13^4 + 81*
                s13^5 + (-30*s12^3*s13 + 57*s12^2*s13^2 + 51*s12*s13^3 +
                 243*s13^4)*s23 + (-80*s12^3 - 220*s12^2*s13 + 43*s12*s13^2 +
                 363*s13^3)*s23^2 + (-160*s12^2 - 110*s12*s13 + 281*s13^2)*
                s23^3 + (-80*s12 + 80*s13)*s23^4) +
             p3q*(p2q*(135*s12^4*s13 + 135*s12^3*s13^2 - 135*s12^2*s13^3 -
                 135*s12*s13^4 + (90*s12^4 + 360*s12^3*s13 - 90*s12^2*s13^2 -
                   360*s12*s13^3)*s23 + (180*s12^3 + 135*s12^2*s13 -
                   315*s12*s13^2)*s23^2 + (90*s12^2 - 90*s12*s13)*s23^3) +
               p1q*(-135*s12^4*s13 - 270*s12^3*s13^2 - 135*s12^2*s13^3 +
                 81*s12*s13^4 + 81*s13^5 + (-90*s12^4 - 570*s12^3*s13 -
                   465*s12^2*s13^2 + 177*s12*s13^3 + 243*s13^4)*s23 +
                 (-260*s12^3 - 625*s12^2*s13 + 106*s12*s13^2 + 363*s13^3)*
                  s23^2 + (-250*s12^2 - 110*s12*s13 + 281*s13^2)*s23^3 +
                 (-80*s12 + 80*s13)*s23^4)))/(p1q*p2q*(18*s12*s13^4*s23 + 36*
                s12*s13^3*s23^2 + 18*s12*s13^2*s23^3) +
             p1q*p3q*(18*s12*s13^4*s23 + 36*s12*s13^3*s23^2 + 18*s12*s13^2*
                s23^3)) + ((p3q^4*(-4*s12^5 - 4*s12^4*s13 +
                (-7*s12^4 - 4*s12^3*s13 - s12^2*s13^2)*s23 +
                (-3*s12^3 - s12^2*s13)*s23^2) + p2q^4*(4*s12^2*s13^3 -
                4*s13^5 + (s12^2*s13^2 - 9*s13^4)*s23 + (s12*s13^2 - 5*s13^3)*
                 s23^2) + p1q*p2q^3*(-(s12^3*s13^2) + 13*s12^2*s13^3 +
                13*s12*s13^4 - s13^5 + (2*s12^2*s13^2 + 26*s12*s13^3 +
                  8*s13^4)*s23 + (-2*s12^2*s13 + 15*s12*s13^2 + 23*s13^3)*
                 s23^2 + (-2*s12*s13 + 14*s13^2)*s23^3) + p1q^2*p2q^2*(
                -2*s12^4*s13 - 7*s12^3*s13^2 + s12^2*s13^3 + 7*s12*s13^4 +
                s13^5 + (-4*s12^3*s13 - 23*s12^2*s13^2 - 4*s12*s13^3 +
                  7*s13^4)*s23 + (-12*s12^2*s13 - 28*s12*s13^2 + 4*s13^3)*
                 s23^2 + (s12^2 - 22*s12*s13 - 15*s13^2)*s23^3 +
                (s12 - 13*s13)*s23^4) + p1q^3*p2q*(-4*s12^4*s13 -
                10*s12^3*s13^2 - 8*s12^2*s13^3 - 2*s12*s13^4 +
                (-2*s12^4 - 12*s12^3*s13 - 26*s12^2*s13^2 - 18*s12*s13^3 -
                  2*s13^4)*s23 + (-7*s12^3 - 13*s12^2*s13 - 25*s12*s13^2 -
                  11*s13^3)*s23^2 + (-2*s12^2 - 6*s12*s13 - 16*s13^2)*s23^3 +
                (7*s12 - 3*s13)*s23^4 + 4*s23^5) + p1q^4*((2*s12^3*s13 +
                  4*s12^2*s13^2 + 2*s12*s13^3)*s23 + (-s12^3 + 9*s12^2*s13 +
                  11*s12*s13^2 + s13^3)*s23^2 + (3*s12^2 + 16*s12*s13 +
                  5*s13^2)*s23^3 + (8*s12 + 8*s13)*s23^4 + 4*s23^5) +
              p3q^3*(p2q*(20*s12^4*s13 + 20*s12^3*s13^2 + (6*s12^4 +
                    38*s12^3*s13 + 14*s12^2*s13^2 + 2*s12*s13^3)*s23 +
                  (10*s12^3 + 16*s12^2*s13 + 2*s12*s13^2)*s23^2 +
                  4*s12^2*s23^3) + p1q*(-5*s12^5 - 3*s12^4*s13 +
                  s12^3*s13^2 - s12^2*s13^3 + (4*s12^4 + 10*s12^3*s13 -
                    2*s12^2*s13^2)*s23 + (19*s12^3 + 11*s12^2*s13 +
                    2*s12*s13^2)*s23^2 + (10*s12^2 + 2*s12*s13)*s23^3)) +
              p3q^2*(p2q^2*(4*s12^4*s13 - 28*s12^3*s13^2 - 32*s12^2*s13^3 +
                  (s12^4 - 8*s12^3*s13 - 56*s12^2*s13^2 - 12*s12*s13^3 -
                    s13^4)*s23 + (s12^3 - 21*s12^2*s13 - 19*s12*s13^2 -
                    s13^3)*s23^2 - 8*s12*s13*s23^3) + p1q*p2q*(3*s12^5 +
                  23*s12^4*s13 + 7*s12^3*s13^2 - 11*s12^2*s13^3 +
                  2*s12*s13^4 + (16*s12^4 + 24*s12^3*s13 - 26*s12^2*s13^2 -
                    2*s12*s13^3)*s23 + (9*s12^3 - 19*s12^2*s13 - 8*s12*
                     s13^2 + 2*s13^3)*s23^2 + (-12*s12^2 - 14*s12*s13 +
                    2*s13^2)*s23^3 - 8*s12*s23^4) + p1q^2*(-s12^5 -
                  s12^4*s13 - 3*s12^3*s13^2 - 3*s12^2*s13^3 +
                  (13*s12^4 + 4*s12^3*s13 - 13*s12^2*s13^2)*s23 +
                  (12*s12^3 - 14*s12^2*s13 - 2*s12*s13^2)*s23^2 +
                  (-13*s12^2 - 14*s12*s13 - s13^2)*s23^3 + (-11*s12 - s13)*
                   s23^4)) + p3q*(p2q^3*(-8*s12^3*s13^2 + 12*s12^2*s13^3 +
                  20*s12*s13^4 + (-2*s12^3*s13 + 2*s12^2*s13^2 + 34*s12*
                     s13^3 + 2*s13^4)*s23 + (-2*s12^2*s13 + 16*s12*s13^2 +
                    6*s13^3)*s23^2 + 4*s13^2*s23^3) + p1q*p2q^2*
                 (-2*s12^4*s13 - 31*s12^3*s13^2 - 17*s12^2*s13^3 +
                  11*s12*s13^4 - s13^5 + (-18*s12^3*s13 - 62*s12^2*s13^2 -
                    8*s12*s13^3 - 4*s13^4)*s23 + (-2*s12^3 - 28*s12^2*s13 -
                    31*s12*s13^2 - 7*s13^3)*s23^2 + (-2*s12^2 - 18*s12*s13 -
                    12*s13^2)*s23^3 - 8*s13*s23^4) + p1q^2*p2q*(2*s12^5 -
                  16*s12^3*s13^2 - 12*s12^2*s13^3 + 2*s12*s13^4 +
                  (4*s12^4 - 18*s12^3*s13 - 40*s12^2*s13^2 - 6*s12*s13^3)*
                   s23 + (-14*s12^3 - 30*s12^2*s13 - 4*s12*s13^2)*s23^2 +
                  (-22*s12^2 - 4*s12*s13 - 2*s13^2)*s23^3 + (-2*s12 + 2*s13)*
                   s23^4 + 4*s23^5) + p1q^3*(-2*s12^4*s13 - 4*s12^3*s13^2 -
                  2*s12^2*s13^3 + (2*s12^4 - 8*s12^3*s13 - 8*s12^2*s13^2 +
                    2*s12*s13^3)*s23 + (-11*s12^3 - 17*s12^2*s13 +
                    7*s12*s13^2 + s13^3)*s23^2 + (-20*s12^2 + 4*s13^2)*
                   s23^3 + (-3*s12 + 7*s13)*s23^4 + 4*s23^5)))*
             Log(s13/(s12 + s13 + s23)))/(p3q^4*(4*s12^5*s13 + 4*s12^4*s13*
                s23) + p2q^4*(4*s12*s13^5 + 4*s12*s13^4*s23) +
             p1q*p2q^3*(-4*s12^2*s13^4 + 4*s12*s13^5 + (-4*s12^2*s13^3 -
                 8*s12*s13^4)*s23 - 12*s12*s13^3*s23^2) + p1q^2*p2q^2*
              (-4*s12^2*s13^4 + (4*s12^2*s13^3 - 12*s12*s13^4)*s23 + 8*s12^2*
                s13^2*s23^2 + 12*s12*s13^2*s23^3) + p1q^4*(-4*s12^2*s13^2*
                s23^2 + (-4*s12^2*s13 - 4*s12*s13^2)*s23^3 - 4*s12*s13*
                s23^4) + p1q^3*p2q*(8*s12^2*s13^3*s23 + (4*s12^2*s13^2 +
                 12*s12*s13^3)*s23^2 + (-4*s12^2*s13 + 8*s12*s13^2)*s23^3 - 4*
                s12*s13*s23^4) + p3q^3*(p1q*(4*s12^5*s13 - 4*s12^4*s13^2 +
                 (-8*s12^4*s13 - 4*s12^3*s13^2)*s23 - 12*s12^3*s13*s23^2) +
               p2q*(-16*s12^4*s13^2 + (-4*s12^4*s13 - 12*s12^3*s13^2)*s23 -
                 4*s12^3*s13*s23^2)) + p3q^2*(p2q^2*(24*s12^3*s13^3 +
                 (12*s12^3*s13^2 + 12*s12^2*s13^3)*s23 + 8*s12^2*s13^2*
                  s23^2) + p1q*p2q*(-12*s12^4*s13^2 + 12*s12^3*s13^3 +
                 (-4*s12^4*s13 + 8*s12^3*s13^2 + 8*s12^2*s13^3)*s23 +
                 (4*s12^3*s13 + 8*s12^2*s13^2)*s23^2 + 8*s12^2*s13*s23^3) +
               p1q^2*(-4*s12^4*s13^2 + (-12*s12^4*s13 + 4*s12^3*s13^2)*s23 +
                 8*s12^2*s13^2*s23^2 + 12*s12^2*s13*s23^3)) +
             p3q*(p2q^3*(-16*s12^2*s13^4 + (-12*s12^2*s13^3 - 4*s12*s13^4)*
                  s23 - 4*s12*s13^3*s23^2) + p1q*p2q^2*(12*s12^3*s13^3 -
                 12*s12^2*s13^4 + (8*s12^3*s13^2 + 8*s12^2*s13^3 -
                   4*s12*s13^4)*s23 + (8*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
                 8*s12*s13^2*s23^3) + p1q^3*(8*s12^3*s13^2*s23 +
                 (12*s12^3*s13 + 4*s12^2*s13^2)*s23^2 + (8*s12^2*s13 -
                   4*s12*s13^2)*s23^3 - 4*s12*s13*s23^4) + p1q^2*p2q*
                (8*s12^3*s13^3 + (8*s12^3*s13^2 + 8*s12^2*s13^3)*s23 +
                 (8*s12^3*s13 + 8*s12*s13^3)*s23^2 + (4*s12^2*s13 +
                   4*s12*s13^2)*s23^3 - 4*s12*s13*s23^4))) +
           ((p3q^6*((180*s12^8 + 540*s12^7*s13 + 477*s12^6*s13^2 +
                  63*s12^5*s13^3 - 45*s12^4*s13^4 + 9*s12^3*s13^5)*s23 +
                (360*s12^7 + 630*s12^6*s13 + 117*s12^5*s13^2 - 63*s12^4*
                   s13^3 + 90*s12^3*s13^4)*s23^2 + (180*s12^6 + 90*s12^5*
                   s13 - 90*s12^4*s13^2 + 81*s12^3*s13^3)*s23^3) +
              p2q^6*(-648*s12^3*s13^6 - 1296*s12^2*s13^7 - 648*s12*s13^8 +
                (180*s12^4*s13^4 - 108*s12^3*s13^5 - 1458*s12^2*s13^6 -
                  1548*s12*s13^7 - 378*s13^8)*s23 + (180*s12^4*s13^3 +
                  567*s12^3*s13^4 - 108*s12^2*s13^5 - 1008*s12*s13^6 -
                  837*s13^7)*s23^2 + (270*s12^3*s13^3 + 387*s12^2*s13^4 -
                  18*s12*s13^5 - 540*s13^6)*s23^3 + (90*s12^2*s13^3 +
                  90*s12*s13^4 - 81*s13^5)*s23^4) + p1q*p2q^5*(-648*s12^3*
                 s13^6 - 1296*s12^2*s13^7 - 648*s12*s13^8 +
                (486*s12^3*s13^5 + 900*s12^2*s13^6 + 18*s12*s13^7 -
                  396*s13^8)*s23 + (-200*s12^4*s13^3 + 345*s12^3*s13^4 +
                  2537*s12^2*s13^5 + 3221*s12*s13^6 + 257*s13^7)*s23^2 +
                (-200*s12^4*s13^2 - 604*s12^3*s13^3 + 434*s12^2*s13^4 +
                  2569*s12*s13^5 + 1623*s13^6)*s23^3 + (-220*s12^3*s13^2 -
                  494*s12^2*s13^3 - 175*s12*s13^4 + 972*s13^5)*s23^4 +
                (-20*s12^2*s13^2 - 270*s12*s13^3 + 2*s13^4)*s23^5) +
              p1q^2*p2q^4*((144*s12^4*s13^4 + 1242*s12^3*s13^5 + 2268*s12^2*
                   s13^6 + 1062*s12*s13^7 - 108*s13^8)*s23 +
                (448*s12^4*s13^3 + 1947*s12^3*s13^4 + 2825*s12^2*s13^5 +
                  2699*s12*s13^6 + 1049*s13^7)*s23^2 + (-160*s12^4*s13^2 -
                  104*s12^3*s13^3 - 784*s12^2*s13^4 - 1716*s12*s13^5 +
                  816*s13^6)*s23^3 + (-140*s12^4*s13 - 693*s12^3*s13^2 -
                  1624*s12^2*s13^3 - 3469*s12*s13^4 - 1224*s13^5)*s23^4 +
                (-370*s12^3*s13 - 513*s12^2*s13^2 - 330*s12*s13^3 -
                  484*s13^4)*s23^5 + (-230*s12^2*s13 + 110*s12*s13^2 +
                  399*s13^3)*s23^6) + p1q^3*p2q^3*((-324*s12^3*s13^5 -
                  1062*s12^2*s13^6 - 828*s12*s13^7 - 90*s13^8)*s23 +
                (504*s12^4*s13^3 + 711*s12^3*s13^4 - 774*s12^2*s13^5 -
                  1323*s12*s13^6 - 18*s13^7)*s23^2 + (220*s12^4*s13^2 +
                  500*s12^3*s13^3 - 768*s12^2*s13^4 - 2989*s12*s13^5 -
                  1509*s13^6)*s23^3 + (200*s12^4*s13 + 1533*s12^3*s13^2 +
                  2245*s12^2*s13^3 + 680*s12*s13^4 - 1506*s13^5)*s23^4 +
                (160*s12^4 + 930*s12^3*s13 + 2886*s12^2*s13^2 + 3411*s12*
                   s13^3 + 927*s13^4)*s23^5 + (320*s12^3 + 960*s12^2*s13 +
                  953*s12*s13^2 + 372*s13^3)*s23^6 + (160*s12^2 +
                  230*s12*s13 - 480*s13^2)*s23^7) + p1q^6*((324*s12^2*s13^3 +
                  333*s12*s13^4 + 9*s13^5)*s23^4 + (180*s12^3*s13 +
                  693*s12^2*s13^2 + 846*s12*s13^3 + 18*s13^4)*s23^5 +
                (180*s12^3 + 810*s12^2*s13 + 963*s12*s13^2 + 9*s13^3)*s23^6 +
                (360*s12^2 + 630*s12*s13)*s23^7 + 180*s12*s23^8) +
              p1q^4*p2q^2*((648*s12^3*s13^4 + 2448*s12^2*s13^5 + 1989*s12*
                   s13^6 + 189*s13^7)*s23^2 + (180*s12^4*s13^2 + 540*s12^3*
                   s13^3 + 2241*s12^2*s13^4 + 3222*s12*s13^5 + 378*s13^6)*
                 s23^3 + (160*s12^4*s13 + 953*s12^3*s13^2 + 1611*s12^2*
                   s13^3 + 3146*s12*s13^4 + 1464*s13^5)*s23^4 +
                (-20*s12^4 - 30*s12^3*s13 - 100*s12^2*s13^2 + 246*s12*s13^3 +
                  1426*s13^4)*s23^5 + (-200*s12^3 - 800*s12^2*s13 -
                  1633*s12*s13^2 - 489*s13^3)*s23^6 + (-340*s12^2 -
                  450*s12*s13 - 480*s13^2)*s23^7 + (-160*s12 + 160*s13)*
                 s23^8) + p1q^5*p2q*((-324*s12^3*s13^3 - 1710*s12^2*s13^4 -
                  1494*s12*s13^5 - 108*s13^6)*s23^3 + (-180*s12^4*s13 -
                  1053*s12^3*s13^2 - 2808*s12^2*s13^3 - 3159*s12*s13^4 -
                  270*s13^5)*s23^4 + (-180*s12^4 - 1150*s12^3*s13 -
                  2786*s12^2*s13^2 - 3189*s12*s13^3 - 617*s13^4)*s23^5 +
                (-340*s12^3 - 1180*s12^2*s13 - 1513*s12*s13^2 - 615*s13^3)*
                 s23^6 + (-140*s12^2 - 50*s12*s13)*s23^7 + (20*s12 + 160*s13)*
                 s23^8) + p3q^5*(p1q*((-180*s12^8 - 720*s12^7*s13 -
                    1260*s12^6*s13^2 - 1440*s12^5*s13^3 - 846*s12^4*s13^4 -
                    216*s12^3*s13^5 - 90*s12^2*s13^6)*s23 + (-1240*s12^7 -
                    3360*s12^6*s13 - 3158*s12^5*s13^2 - 1394*s12^4*s13^3 -
                    230*s12^3*s13^4 - 198*s12^2*s13^5)*s23^2 +
                  (-1940*s12^6 - 2820*s12^5*s13 - 428*s12^4*s13^2 +
                    191*s12^3*s13^3 - 351*s12^2*s13^4)*s23^3 +
                  (-880*s12^5 - 180*s12^4*s13 + 430*s12^3*s13^2 - 243*s12^2*
                     s13^3)*s23^4) + p2q*(648*s12^6*s13^3 + 1296*s12^5*
                   s13^4 + 648*s12^4*s13^5 + (360*s12^8 + 360*s12^7*s13 -
                    963*s12^6*s13^2 - 819*s12^5*s13^3 + 459*s12^4*s13^4 +
                    207*s12^3*s13^5 - 108*s12^2*s13^6)*s23 + (540*s12^7 -
                    630*s12^6*s13 - 2430*s12^5*s13^2 - 999*s12^4*s13^3 +
                    144*s12^3*s13^4 - 441*s12^2*s13^5)*s23^2 +
                  (-1080*s12^5*s13 - 657*s12^4*s13^2 + 171*s12^3*s13^3 -
                    414*s12^2*s13^4)*s23^3 + (-180*s12^5 - 90*s12^4*s13 +
                    90*s12^3*s13^2 - 81*s12^2*s13^3)*s23^4)) +
              p3q^4*(p2q^2*(1296*s12^6*s13^3 + 648*s12^5*s13^4 - 2592*s12^4*
                   s13^5 - 1944*s12^3*s13^6 + (180*s12^8 - 900*s12^7*s13 -
                    2277*s12^6*s13^2 + 603*s12^5*s13^3 + 1026*s12^4*s13^4 -
                    1476*s12^3*s13^5 - 513*s12^2*s13^6 + 189*s12*s13^7)*s23 +
                  (-2610*s12^6*s13 - 1944*s12^5*s13^2 + 2493*s12^4*s13^3 +
                    2349*s12^3*s13^4 - 486*s12^2*s13^5 + 612*s12*s13^6)*
                   s23^2 + (-540*s12^6 - 1440*s12^5*s13 + 1323*s12^4*s13^2 +
                    1737*s12^3*s13^3 - 144*s12^2*s13^4 + 585*s12*s13^5)*
                   s23^3 + (-360*s12^5 + 270*s12^4*s13 + 450*s12^3*s13^2 -
                    99*s12^2*s13^3 + 162*s12*s13^4)*s23^4) + p1q*p2q*
                 (-648*s12^5*s13^4 - 1296*s12^4*s13^5 - 648*s12^3*s13^6 +
                  (-180*s12^8 - 180*s12^7*s13 + 414*s12^6*s13^2 - 1224*s12^5*
                     s13^3 - 2034*s12^4*s13^4 - 360*s12^3*s13^5 + 216*s12^2*
                     s13^6 + 180*s12*s13^7)*s23 + (-1760*s12^7 - 1740*s12^6*
                     s13 + 2153*s12^5*s13^2 + 2177*s12^4*s13^3 + 2831*s12^3*
                     s13^4 + 1041*s12^2*s13^5 + 522*s12*s13^6)*s23^2 +
                  (-2280*s12^6 + 1650*s12^5*s13 + 5920*s12^4*s13^2 +
                    3393*s12^3*s13^3 + 971*s12^2*s13^4 + 684*s12*s13^5)*
                   s23^3 + (3300*s12^4*s13 + 1261*s12^3*s13^2 - 212*s12^2*
                     s13^3 + 504*s12*s13^4)*s23^4 + (700*s12^4 + 90*s12^3*
                     s13 - 340*s12^2*s13^2 + 162*s12*s13^3)*s23^5) +
                p1q^2*((180*s12^7*s13 + 783*s12^6*s13^2 + 891*s12^5*s13^3 +
                    819*s12^4*s13^4 + 549*s12^3*s13^5 + 18*s12^2*s13^6)*s23 +
                  (900*s12^7 + 3670*s12^6*s13 + 5943*s12^5*s13^2 + 5498*s12^4*
                     s13^3 + 3671*s12^3*s13^4 + 878*s12^2*s13^5 + 180*s12*
                     s13^6)*s23^2 + (3520*s12^6 + 8650*s12^5*s13 + 7662*s12^4*
                     s13^2 + 4174*s12^3*s13^3 + 1111*s12^2*s13^4 + 369*s12*
                     s13^5)*s23^3 + (4340*s12^5 + 5000*s12^4*s13 + 562*s12^3*
                     s13^2 - 265*s12^2*s13^3 + 432*s12*s13^4)*s23^4 +
                  (1720*s12^4 - 160*s12^3*s13 - 750*s12^2*s13^2 + 243*s12*
                     s13^3)*s23^5)) + p3q^3*(p2q^3*(648*s12^6*s13^3 -
                  2592*s12^5*s13^4 - 5184*s12^4*s13^5 + 1944*s12^2*s13^7 +
                  (-720*s12^7*s13 + 243*s12^6*s13^2 + 2871*s12^5*s13^3 -
                    1746*s12^4*s13^4 - 3528*s12^3*s13^5 + 801*s12^2*s13^6 +
                    585*s12*s13^7 - 90*s13^8)*s23 + (-180*s12^7 - 810*s12^6*
                     s13 + 3330*s12^5*s13^2 + 4455*s12^4*s13^3 - 450*s12^3*
                     s13^4 - 3132*s12^2*s13^5 + 792*s12*s13^6 - 261*s13^7)*
                   s23^2 + (-360*s12^6 + 720*s12^5*s13 + 3357*s12^4*s13^2 +
                    639*s12^3*s13^3 - 2223*s12^2*s13^4 + 135*s12*s13^5 -
                    252*s13^6)*s23^3 + (-180*s12^5 + 810*s12^4*s13 +
                    270*s12^3*s13^2 - 549*s12^2*s13^3 - 72*s12*s13^4 -
                    81*s13^5)*s23^4) + p1q*p2q^2*(-1296*s12^5*s13^4 -
                  1296*s12^4*s13^5 + 1296*s12^3*s13^6 + 1296*s12^2*s13^7 +
                  (540*s12^7*s13 + 1134*s12^6*s13^2 - 3078*s12^5*s13^3 -
                    4716*s12^4*s13^4 - 1206*s12^3*s13^5 + 144*s12^2*s13^6 +
                    216*s12*s13^7 - 90*s13^8)*s23 + (-520*s12^7 + 2460*s12^6*
                     s13 + 4678*s12^5*s13^2 - 716*s12^4*s13^3 + 262*s12^3*
                     s13^4 - 3684*s12^2*s13^5 - 528*s12*s13^6)*s23^2 +
                  (180*s12^6 + 6580*s12^5*s13 + 5408*s12^4*s13^2 + 815*s12^3*
                     s13^3 - 2355*s12^2*s13^4 - 895*s12*s13^5 + 351*s13^6)*
                   s23^3 + (1920*s12^5 + 4340*s12^4*s13 - 496*s12^3*s13^2 -
                    1343*s12^2*s13^3 - 92*s12*s13^4 + 423*s13^5)*s23^4 +
                  (1220*s12^4 - 320*s12^3*s13 - 500*s12^2*s13^2 - 22*s12*
                     s13^3 + 162*s13^4)*s23^5) + p1q^2*p2q*
                 ((180*s12^7*s13 + 243*s12^6*s13^2 - 729*s12^5*s13^3 +
                    657*s12^4*s13^4 + 1269*s12^3*s13^5 - 216*s12^2*s13^6 -
                    36*s12*s13^7)*s23 + (720*s12^7 + 1670*s12^6*s13 +
                    874*s12^5*s13^2 + 4105*s12^4*s13^3 + 6732*s12^3*s13^4 -
                    411*s12^2*s13^5 - 514*s12*s13^6 + 180*s13^7)*s23^2 +
                  (3460*s12^6 + 4120*s12^5*s13 + 512*s12^4*s13^2 + 2840*s12^3*
                     s13^3 - 2571*s12^2*s13^4 - 1689*s12*s13^5 + 270*s13^6)*
                   s23^3 + (3740*s12^5 - 1320*s12^4*s13 - 5000*s12^3*s13^2 -
                    4506*s12^2*s13^3 - 1828*s12*s13^4 + 81*s13^5)*s23^4 +
                  (-20*s12^4 - 3700*s12^3*s13 - 1271*s12^2*s13^2 - 369*s12*
                     s13^3 - 90*s13^4)*s23^5 + (-1020*s12^3 + 250*s12^2*s13 +
                    410*s12*s13^2 - 81*s13^3)*s23^6) + p1q^3*
                 ((-324*s12^5*s13^3 - 414*s12^4*s13^4 - 180*s12^3*s13^5 -
                    90*s12^2*s13^6)*s23 + (-720*s12^6*s13 - 3042*s12^5*
                     s13^2 - 3609*s12^4*s13^3 - 2304*s12^3*s13^4 - 1377*s12^2*
                     s13^5 - 36*s12*s13^6)*s23^2 + (-1800*s12^6 - 7500*s12^5*
                     s13 - 11252*s12^4*s13^2 - 8173*s12^3*s13^3 - 5493*s12^2*
                     s13^4 - 1108*s12*s13^5 - 90*s13^6)*s23^3 +
                  (-5280*s12^5 - 11820*s12^4*s13 - 8848*s12^3*s13^2 -
                    5078*s12^2*s13^3 - 1352*s12*s13^4 - 180*s13^5)*s23^4 +
                  (-5160*s12^4 - 4380*s12^3*s13 - 308*s12^2*s13^2 +
                    209*s12*s13^3 - 171*s13^4)*s23^5 + (-1680*s12^3 +
                    660*s12^2*s13 + 570*s12*s13^2 - 81*s13^3)*s23^6)) +
              p3q^2*(p2q^4*(-1944*s12^5*s13^4 + 5184*s12^3*s13^6 +
                  2592*s12^2*s13^7 - 648*s12*s13^8 + (1080*s12^6*s13^2 +
                    666*s12^5*s13^3 - 2709*s12^4*s13^4 + 1287*s12^3*s13^5 +
                    4491*s12^2*s13^6 + 675*s12*s13^7 - 234*s13^8)*s23 +
                  (540*s12^6*s13 + 2187*s12^5*s13^2 - 1098*s12^4*s13^3 -
                    3366*s12^3*s13^4 - 846*s12^2*s13^5 + 2628*s12*s13^6 -
                    387*s13^7)*s23^2 + (990*s12^5*s13 + 567*s12^4*s13^2 -
                    2412*s12^3*s13^3 - 2367*s12^2*s13^4 + 1413*s12*s13^5 -
                    72*s13^6)*s23^3 + (450*s12^4*s13 - 450*s12^3*s13^2 -
                    711*s12^2*s13^3 + 108*s12*s13^4 + 81*s13^5)*s23^4) +
                p1q*p2q^3*(-648*s12^5*s13^4 + 1296*s12^4*s13^5 + 3888*s12^3*
                   s13^6 + 1296*s12^2*s13^7 - 648*s12*s13^8 +
                  (-540*s12^6*s13^2 - 3114*s12^5*s13^3 - 1674*s12^4*s13^4 +
                    2610*s12^3*s13^5 + 3510*s12^2*s13^6 + 1584*s12*s13^7 -
                    216*s13^8)*s23 + (840*s12^6*s13 - 753*s12^5*s13^2 -
                    2759*s12^4*s13^3 + 1212*s12^3*s13^4 - 2518*s12^2*s13^5 +
                    2597*s12*s13^6 + 365*s13^7)*s23^2 + (520*s12^6 +
                    1790*s12^5*s13 - 1134*s12^4*s13^2 + 89*s12^3*s13^3 -
                    2275*s12^2*s13^4 - 1003*s12*s13^5 + 813*s13^6)*s23^3 +
                  (1040*s12^5 + 400*s12^4*s13 - 881*s12^3*s13^2 - 240*s12^2*
                     s13^3 - 1277*s12*s13^4 - 90*s13^5)*s23^4 +
                  (520*s12^4 - 550*s12^3*s13 + 180*s12^2*s13^2 - 152*s12*
                     s13^3 - 322*s13^4)*s23^5) + p1q^2*p2q^2*
                 ((-540*s12^6*s13^2 - 2052*s12^5*s13^3 + 81*s12^4*s13^4 +
                    3555*s12^3*s13^5 + 4293*s12^2*s13^6 + 2349*s12*s13^7 +
                    18*s13^8)*s23 + (-920*s12^6*s13 - 2275*s12^5*s13^2 +
                    4161*s12^4*s13^3 + 10968*s12^3*s13^4 + 4859*s12^2*s13^5 +
                    3039*s12*s13^6 + 716*s13^7)*s23^2 + (480*s12^6 -
                    2330*s12^5*s13 - 3345*s12^4*s13^2 + 3557*s12^3*s13^3 -
                    644*s12^2*s13^4 - 2088*s12*s13^5 - 160*s13^6)*s23^3 +
                  (-560*s12^5 - 6210*s12^4*s13 - 6457*s12^3*s13^2 -
                    6016*s12^2*s13^3 - 2917*s12*s13^4 - 1347*s13^5)*s23^4 +
                  (-2560*s12^4 - 4730*s12^3*s13 - 1697*s12^2*s13^2 -
                    17*s12*s13^3 - 88*s13^4)*s23^5 + (-1520*s12^3 +
                    70*s12^2*s13 + 770*s12*s13^2 + 401*s13^3)*s23^6) +
                p1q^4*((972*s12^4*s13^3 + 1161*s12^3*s13^4 + 369*s12^2*
                     s13^5 + 180*s12*s13^6)*s23^2 + (1080*s12^5*s13 +
                    4428*s12^4*s13^2 + 5391*s12^3*s13^3 + 2169*s12^2*s13^4 +
                    1107*s12*s13^5 + 18*s13^6)*s23^3 + (1800*s12^5 +
                    7680*s12^4*s13 + 10678*s12^3*s13^2 + 5621*s12^2*s13^3 +
                    3357*s12*s13^4 + 446*s13^5)*s23^4 + (4420*s12^4 +
                    9060*s12^3*s13 + 4957*s12^2*s13^2 + 2895*s12*s13^3 +
                    516*s13^4)*s23^5 + (3440*s12^3 + 1890*s12^2*s13 +
                    57*s12*s13^2 - 72*s13^3)*s23^6 + (820*s12^2 - 570*s12*
                     s13 - 160*s13^2)*s23^7) + p1q^3*p2q*((-324*s12^5*s13^3 -
                    414*s12^4*s13^4 + 270*s12^2*s13^6 + 180*s12*s13^7)*s23 +
                  (-540*s12^6*s13 - 1539*s12^5*s13^2 - 1710*s12^4*s13^3 -
                    2853*s12^3*s13^4 - 3438*s12^2*s13^5 - 1008*s12*s13^6 -
                    36*s13^7)*s23^2 + (-1080*s12^6 - 3950*s12^5*s13 -
                    5696*s12^4*s13^2 - 10039*s12^3*s13^3 - 11945*s12^2*
                     s13^4 - 4346*s12*s13^5 - 946*s13^6)*s23^3 +
                  (-3420*s12^5 - 5640*s12^4*s13 - 5064*s12^3*s13^2 -
                    8670*s12^2*s13^3 - 1519*s12*s13^4 - 487*s13^5)*s23^4 +
                  (-2940*s12^4 + 160*s12^3*s13 + 1880*s12^2*s13^2 +
                    2789*s12*s13^3 + 993*s13^4)*s23^5 + (60*s12^3 +
                    1980*s12^2*s13 + 1307*s12*s13^2 + 410*s13^3)*s23^6 +
                  (660*s12^2 - 410*s12*s13 - 160*s13^2)*s23^7)) +
              p3q*(p2q^5*(1944*s12^4*s13^5 + 2592*s12^3*s13^6 - 648*s12^2*
                   s13^7 - 1296*s12*s13^8 + (-720*s12^5*s13^3 - 261*s12^4*
                     s13^4 + 3033*s12^3*s13^5 + 1827*s12^2*s13^6 - 1269*s12*
                     s13^7 - 522*s13^8)*s23 + (-540*s12^5*s13^2 - 1944*s12^4*
                     s13^3 - 54*s12^3*s13^4 + 2133*s12^2*s13^5 + 1440*s12*
                     s13^6 - 963*s13^7)*s23^2 + (-900*s12^4*s13^2 -
                    1134*s12^3*s13^3 + 513*s12^2*s13^4 + 1845*s12*s13^5 -
                    360*s13^6)*s23^3 + (-360*s12^3*s13^2 - 90*s12^2*s13^3 +
                    432*s12*s13^4 + 81*s13^5)*s23^4) + p1q*p2q^4*
                 (1296*s12^4*s13^5 + 1296*s12^3*s13^6 - 1296*s12^2*s13^7 -
                  1296*s12*s13^8 + (180*s12^5*s13^3 + 1854*s12^4*s13^4 +
                    4158*s12^3*s13^5 + 4572*s12^2*s13^6 + 1566*s12*s13^7 -
                    522*s13^8)*s23 + (-120*s12^5*s13^2 + 1328*s12^4*s13^3 +
                    4356*s12^3*s13^4 + 4942*s12^2*s13^5 + 6868*s12*s13^6 +
                    622*s13^7)*s23^2 + (-320*s12^5*s13 - 394*s12^4*s13^2 +
                    1872*s12^3*s13^3 + 1836*s12^2*s13^4 + 3145*s12*s13^5 +
                    2085*s13^6)*s23^3 + (-460*s12^4*s13 + 226*s12^3*s13^2 +
                    640*s12^2*s13^3 - 856*s12*s13^4 + 459*s13^5)*s23^4 +
                  (-140*s12^3*s13 + 320*s12^2*s13^2 - 238*s12*s13^3 -
                    482*s13^4)*s23^5) + p1q^2*p2q^3*((216*s12^5*s13^3 +
                    2979*s12^4*s13^4 + 7965*s12^3*s13^5 + 9387*s12^2*s13^6 +
                    4095*s12*s13^7 - 90*s13^8)*s23 + (400*s12^5*s13^2 +
                    4238*s12^4*s13^3 + 10790*s12^3*s13^4 + 10845*s12^2*
                     s13^5 + 7062*s12*s13^6 + 1549*s13^7)*s23^2 +
                  (-320*s12^5*s13 - 423*s12^4*s13^2 + 935*s12^3*s13^3 -
                    698*s12^2*s13^4 - 3006*s12*s13^5 + 314*s13^6)*s23^3 +
                  (-500*s12^5 - 1830*s12^4*s13 - 3442*s12^3*s13^2 -
                    5847*s12^2*s13^3 - 6016*s12*s13^4 - 2688*s13^5)*s23^4 +
                  (-1000*s12^4 - 1920*s12^3*s13 - 1869*s12^2*s13^2 -
                    383*s12*s13^3 - 482*s13^4)*s23^5 + (-500*s12^3 -
                    410*s12^2*s13 + 470*s12*s13^2 + 881*s13^3)*s23^6) +
                p1q^3*p2q^2*((648*s12^4*s13^4 + 1800*s12^3*s13^5 + 1242*s12^2*
                     s13^6 - 90*s13^8)*s23 + (360*s12^5*s13^2 + 1872*s12^4*
                     s13^3 + 990*s12^3*s13^4 - 3303*s12^2*s13^5 - 3204*s12*
                     s13^6 - 99*s13^7)*s23^2 + (220*s12^5*s13 + 268*s12^4*
                     s13^2 - 2590*s12^3*s13^3 - 9362*s12^2*s13^4 - 10061*s12*
                     s13^5 - 2383*s13^6)*s23^3 + (-120*s12^5 + 800*s12^4*
                     s13 + 1204*s12^3*s13^2 - 1770*s12^2*s13^3 - 2538*s12*
                     s13^4 - 1714*s13^5)*s23^4 + (580*s12^4 + 3040*s12^3*
                     s13 + 4786*s12^2*s13^2 + 5037*s12*s13^3 + 2163*s13^4)*
                   s23^5 + (1520*s12^3 + 2280*s12^2*s13 + 1510*s12*s13^2 +
                    863*s13^3)*s23^6 + (820*s12^2 - 180*s12*s13 - 640*s13^2)*
                   s23^7) + p1q^5*((-972*s12^3*s13^3 - 1080*s12^2*s13^4 -
                    198*s12*s13^5 - 90*s13^6)*s23^3 + (-720*s12^4*s13 -
                    2862*s12^3*s13^2 - 3519*s12^2*s13^3 - 702*s12*s13^4 -
                    279*s13^5)*s23^4 + (-900*s12^4 - 3940*s12^3*s13 -
                    5072*s12^2*s13^2 - 1515*s12*s13^3 - 689*s13^4)*s23^5 +
                  (-1960*s12^3 - 3700*s12^2*s13 - 1090*s12*s13^2 - 660*s13^3)*
                   s23^6 + (-1220*s12^2 - 320*s12*s13)*s23^7 +
                  (-160*s12 + 160*s13)*s23^8) + p1q^4*p2q*
                 ((648*s12^4*s13^3 + 2124*s12^3*s13^4 + 1818*s12^2*s13^5 +
                    522*s12*s13^6 + 180*s13^7)*s23^2 + (540*s12^5*s13 +
                    2349*s12^4*s13^2 + 5247*s12^3*s13^3 + 6363*s12^2*s13^4 +
                    2727*s12*s13^5 + 468*s13^6)*s23^3 + (720*s12^5 +
                    3610*s12^4*s13 + 7194*s12^3*s13^2 + 9779*s12^2*s13^3 +
                    7808*s12*s13^4 + 2045*s13^5)*s23^4 + (1700*s12^4 +
                    4080*s12^3*s13 + 4875*s12^2*s13^2 + 5247*s12*s13^3 +
                    1960*s13^4)*s23^5 + (1080*s12^3 + 190*s12^2*s13 -
                    370*s12*s13^2 - 597*s13^3)*s23^6 + (-60*s12^2 -
                    660*s12*s13 - 640*s13^2)*s23^7 + (-160*s12 + 160*s13)*
                   s23^8)))*Log(s23/(s12 + s13 + s23)))/
            (p1q*p3q^5*(36*s12^5*s13^3 + 36*s12^4*s13^4)*s23^2 +
             p1q*p2q^5*((-36*s12^2*s13^6 - 36*s12*s13^7)*s23^2 +
               (-36*s12^2*s13^5 - 36*s12*s13^6)*s23^3) + p1q^2*p2q^4*
              ((-36*s12^2*s13^6 - 36*s12*s13^7)*s23^2 + (36*s12^2*s13^5 +
                 72*s12*s13^6)*s23^3 + (72*s12^2*s13^4 + 108*s12*s13^5)*
                s23^4) + p1q^3*p2q^3*((72*s12^2*s13^5 + 108*s12*s13^6)*
                s23^3 + 36*s12^2*s13^4*s23^4 + (-36*s12^2*s13^3 -
                 108*s12*s13^4)*s23^5) + p1q^5*p2q*(36*s12*s13^4*s23^5 + 36*
                s12*s13^3*s23^6) + p1q^4*p2q^2*((-36*s12^2*s13^4 -
                 108*s12*s13^5)*s23^4 + (-36*s12^2*s13^3 - 72*s12*s13^4)*
                s23^5 + 36*s12*s13^3*s23^6) + p3q^4*(p1q^2*
                ((-36*s12^4*s13^4 - 36*s12^3*s13^5)*s23^2 +
                 (-144*s12^4*s13^3 - 108*s12^3*s13^4)*s23^3) + p1q*p2q*
                ((72*s12^5*s13^3 - 36*s12^4*s13^4 - 108*s12^3*s13^5)*s23^2 +
                 (-36*s12^4*s13^3 - 36*s12^3*s13^4)*s23^3)) +
             p3q^3*(p1q*p2q^2*((36*s12^5*s13^3 - 180*s12^4*s13^4 -
                   108*s12^3*s13^5 + 108*s12^2*s13^6)*s23^2 +
                 (-72*s12^4*s13^3 + 72*s12^2*s13^5)*s23^3) + p1q^2*p2q*
                ((-72*s12^4*s13^4 + 72*s12^2*s13^6)*s23^2 +
                 (-252*s12^4*s13^3 - 36*s12^3*s13^4 + 72*s12^2*s13^5)*s23^3 +
                 (108*s12^3*s13^3 + 72*s12^2*s13^4)*s23^4) + p1q^3*
                ((108*s12^3*s13^4 + 72*s12^2*s13^5)*s23^3 +
                 (216*s12^3*s13^3 + 108*s12^2*s13^4)*s23^4)) +
             p3q^2*(p1q*p2q^3*((-108*s12^4*s13^4 + 108*s12^3*s13^5 +
                   180*s12^2*s13^6 - 36*s12*s13^7)*s23^2 + (-36*s12^4*s13^3 +
                   108*s12^3*s13^4 + 108*s12^2*s13^5 - 36*s12*s13^6)*s23^3) +
               p1q^2*p2q^2*((-36*s12^4*s13^4 + 108*s12^3*s13^5 + 108*s12^2*
                    s13^6 - 36*s12*s13^7)*s23^2 + (-108*s12^4*s13^3 +
                   144*s12^3*s13^4 + 72*s12^2*s13^5 + 36*s12*s13^6)*s23^3 +
                 (180*s12^3*s13^3 + 144*s12^2*s13^4 + 72*s12*s13^5)*s23^4) +
               p1q^4*((-108*s12^2*s13^4 - 36*s12*s13^5)*s23^4 +
                 (-144*s12^2*s13^3 - 36*s12*s13^4)*s23^5) + p1q^3*p2q*
                ((180*s12^3*s13^4 + 144*s12^2*s13^5 + 72*s12*s13^6)*s23^3 +
                 (324*s12^3*s13^3 + 180*s12^2*s13^4 + 36*s12*s13^5)*s23^4 +
                 (-108*s12^2*s13^3 - 36*s12*s13^4)*s23^5)) +
             p3q*(p1q*p2q^4*((108*s12^3*s13^5 + 36*s12^2*s13^6 - 72*s12*
                    s13^7)*s23^2 + (72*s12^3*s13^4 - 72*s12*s13^6)*s23^3) +
               p1q^2*p2q^3*((72*s12^3*s13^5 - 72*s12*s13^7)*s23^2 +
                 (72*s12^3*s13^4 + 36*s12^2*s13^5 + 108*s12*s13^6)*s23^3 +
                 (72*s12^3*s13^3 + 144*s12^2*s13^4 + 180*s12*s13^5)*s23^4) +
               p1q^3*p2q^2*((72*s12^3*s13^4 + 144*s12^2*s13^5 + 180*s12*
                    s13^6)*s23^3 + (108*s12^3*s13^3 + 108*s12^2*s13^4 +
                   36*s12*s13^5)*s23^4 + (-144*s12^2*s13^3 - 144*s12*s13^4)*
                  s23^5) + p1q^5*(36*s12*s13^4*s23^5 + 36*s12*s13^3*s23^6) +
               p1q^4*p2q*((-144*s12^2*s13^4 - 144*s12*s13^5)*s23^4 +
                 (-180*s12^2*s13^3 - 108*s12*s13^4)*s23^5 + 36*s12*s13^3*
                  s23^6))) + ((p2q^5*(-324*s12^2*s13^5 - 324*s12*s13^6 +
                (180*s12^3*s13^3 + 117*s12^2*s13^4 - 441*s12*s13^5 -
                  54*s13^6)*s23 + (270*s12^2*s13^3 + 27*s12*s13^4 - 54*s13^5)*
                 s23^2 + 90*s12*s13^3*s23^3) + p3q^5*((-180*s12^6 -
                  360*s12^5*s13 - 117*s12^4*s13^2 - 27*s12^3*s13^3 -
                  90*s12^2*s13^4)*s23 + (-360*s12^5 - 270*s12^4*s13 +
                  153*s12^3*s13^2 - 90*s12^2*s13^3)*s23^2 +
                (-180*s12^4 + 90*s12^3*s13)*s23^3) + p1q*p2q^4*(-324*s12^2*
                 s13^5 - 324*s12*s13^6 + (567*s12^2*s13^4 + 9*s12*s13^5 -
                  234*s13^6)*s23 + (-200*s12^3*s13^2 - 4*s12^2*s13^3 +
                  903*s12*s13^4 - 94*s13^5)*s23^2 + (-220*s12^2*s13^2 +
                  16*s12*s13^3 - 20*s13^4)*s23^3 + (-20*s12*s13^2 -
                  160*s13^3)*s23^4) + p1q^2*p2q^3*((468*s12^3*s13^3 +
                  1665*s12^2*s13^4 + 1089*s12*s13^5 - 108*s13^6)*s23 +
                (-20*s12^3*s13^2 + 302*s12^2*s13^3 + 2019*s12*s13^4 +
                  860*s13^5)*s23^2 + (-140*s12^3*s13 - 383*s12^2*s13^2 -
                  935*s12*s13^3 + 402*s13^4)*s23^3 + (-370*s12^2*s13 -
                  133*s12*s13^2 - 246*s13^3)*s23^4 + (-230*s12*s13 +
                  320*s13^2)*s23^5) + p1q^5*((-243*s12^2*s13^2 - 333*s12*
                   s13^3 - 90*s13^4)*s23^3 + (-180*s12^3 - 450*s12^2*s13 -
                  513*s12*s13^2 - 90*s13^3)*s23^4 + (-360*s12^2 -
                  450*s12*s13)*s23^5 - 180*s12*s23^6) + p1q^4*p2q*(
                (486*s12^2*s13^3 + 666*s12*s13^4 + 180*s13^5)*s23^2 +
                (180*s12^3*s13 + 801*s12^2*s13^2 + 855*s12*s13^3 - 72*s13^4)*
                 s23^3 + (-20*s12^3 + 230*s12^2*s13 + 1047*s12*s13^2 +
                  104*s13^3)*s23^4 + (-40*s12^2 - 110*s12*s13 + 196*s13^2)*
                 s23^5 + (-20*s12 - 160*s13)*s23^6) + p1q^3*p2q^2*(
                (-243*s12^2*s13^4 - 333*s12*s13^5 - 90*s13^6)*s23 +
                (144*s12^3*s13^2 - 792*s12^2*s13^3 - 819*s12*s13^4 +
                  270*s13^5)*s23^2 + (40*s12^3*s13 + 773*s12^2*s13^2 -
                  1437*s12*s13^3 - 730*s13^4)*s23^3 + (160*s12^3 +
                  310*s12^2*s13 + 1339*s12*s13^2 - 450*s13^3)*s23^4 +
                (320*s12^2 + 110*s12*s13 + 480*s13^2)*s23^5 +
                (160*s12 - 160*s13)*s23^6) + p3q^4*(p2q*(-324*s12^4*s13^3 -
                  324*s12^3*s13^4 + (-360*s12^6 - 180*s12^5*s13 + 603*s12^4*
                     s13^2 - 261*s12^3*s13^3 - 180*s12^2*s13^4 + 180*s12*
                     s13^5)*s23 + (-720*s12^5 + 450*s12^4*s13 + 873*s12^3*
                     s13^2 - 540*s12^2*s13^3 + 180*s12*s13^4)*s23^2 +
                  (-360*s12^4 + 630*s12^3*s13 - 180*s12^2*s13^2)*s23^3) +
                p1q*((243*s12^4*s13^2 + 333*s12^3*s13^3 + 90*s12^2*s13^4)*
                   s23 + (520*s12^5 + 950*s12^4*s13 + 867*s12^3*s13^2 +
                    464*s12^2*s13^3 + 180*s12*s13^4)*s23^2 + (1040*s12^4 +
                    610*s12^3*s13 - 146*s12^2*s13^2 + 180*s12*s13^3)*s23^3 +
                  (520*s12^3 - 340*s12^2*s13)*s23^4)) +
              p3q^3*(p2q^2*(-648*s12^4*s13^3 + 648*s12^2*s13^5 +
                  (-180*s12^6 + 720*s12^5*s13 + 1017*s12^4*s13^2 - 1035*s12^3*
                     s13^3 + 675*s12^2*s13^4 + 441*s12*s13^5 - 90*s13^6)*
                   s23 + (-360*s12^5 + 1710*s12^4*s13 + 387*s12^3*s13^2 -
                    1134*s12^2*s13^3 + 621*s12*s13^4 - 90*s13^5)*s23^2 +
                  (-180*s12^4 + 990*s12^3*s13 - 720*s12^2*s13^2 + 90*s12*
                     s13^3)*s23^3) + p1q*p2q*(-324*s12^4*s13^3 - 324*s12^3*
                   s13^4 + (486*s12^4*s13^2 + 180*s12^3*s13^3 + 162*s12^2*
                     s13^4 + 144*s12*s13^5)*s23 + (1040*s12^5 + 1580*s12^4*
                     s13 + 1760*s12^3*s13^2 + 418*s12^2*s13^3 - 10*s12*
                     s13^4 + 180*s13^5)*s23^2 + (2080*s12^4 + 760*s12^3*s13 +
                    54*s12^2*s13^2 - 194*s12*s13^3 + 180*s13^4)*s23^3 +
                  (1040*s12^3 - 820*s12^2*s13 + 140*s12*s13^2)*s23^4) +
                p1q^2*((180*s12^6 + 360*s12^5*s13 + 117*s12^4*s13^2 +
                    27*s12^3*s13^3 + 90*s12^2*s13^4)*s23 + (340*s12^5 +
                    50*s12^4*s13 - 537*s12^3*s13^2 - 292*s12^2*s13^3 -
                    198*s12*s13^4)*s23^2 + (-360*s12^4 - 1290*s12^3*s13 -
                    1277*s12^2*s13^2 - 901*s12*s13^3 - 90*s13^4)*s23^3 +
                  (-1020*s12^3 - 570*s12^2*s13 - 203*s12*s13^2 - 90*s13^3)*
                   s23^4 + (-500*s12^2 + 410*s12*s13)*s23^5)) +
              p3q*(p2q^4*(648*s12^3*s13^4 - 648*s12*s13^6 +
                  (-540*s12^4*s13^2 - 234*s12^3*s13^3 + 999*s12^2*s13^4 -
                    801*s12*s13^5 - 198*s13^6)*s23 + (-900*s12^3*s13^2 +
                    216*s12^2*s13^3 + 315*s12*s13^4 - 198*s13^5)*s23^2 +
                  (-360*s12^2*s13^2 + 270*s12*s13^3)*s23^3) + p1q*p2q^3*
                 (648*s12^3*s13^4 + 324*s12^2*s13^5 - 324*s12*s13^6 +
                  (486*s12^3*s13^3 + 3384*s12^2*s13^4 + 1782*s12*s13^5 -
                    144*s13^6)*s23 + (-320*s12^4*s13 - 374*s12^3*s13^2 +
                    454*s12^2*s13^3 + 2732*s12*s13^4 + 316*s13^5)*s23^2 +
                  (-460*s12^3*s13 - 94*s12^2*s13^2 - 198*s12*s13^3 +
                    140*s13^4)*s23^3 + (-140*s12^2*s13 + 100*s12*s13^2 -
                    320*s13^3)*s23^4) + p1q^2*p2q^2*((540*s12^4*s13^2 +
                    1404*s12^3*s13^3 + 2313*s12^2*s13^4 + 1701*s12*s13^5 +
                    252*s13^6)*s23 + (40*s12^4*s13 + 780*s12^3*s13^2 -
                    946*s12^2*s13^3 - 79*s12*s13^4 + 734*s13^5)*s23^2 +
                  (-500*s12^4 - 1020*s12^3*s13 - 1115*s12^2*s13^2 -
                    4439*s12*s13^3 - 1192*s13^4)*s23^3 + (-1000*s12^3 -
                    1110*s12^2*s13 - 165*s12*s13^2 - 1034*s13^3)*s23^4 +
                  (-500*s12^2 - 50*s12*s13 + 640*s13^2)*s23^5) +
                p1q^3*p2q*((486*s12^3*s13^3 + 666*s12^2*s13^4 + 180*s12*
                     s13^5)*s23 + (360*s12^4*s13 + 360*s12^3*s13^2 +
                    594*s12^2*s13^3 - 72*s12*s13^4 - 360*s13^5)*s23^2 +
                  (40*s12^4 + 1020*s12^3*s13 + 974*s12^2*s13^2 - 520*s12*
                     s13^3 - 1342*s13^4)*s23^3 + (400*s12^3 + 1480*s12^2*
                     s13 + 1850*s12*s13^2 + 14*s13^3)*s23^4 +
                  (680*s12^2 + 500*s12*s13 + 676*s13^2)*s23^5 +
                  (320*s12 - 320*s13)*s23^6) + p1q^4*((486*s12^3*s13^2 +
                    666*s12^2*s13^3 + 180*s12*s13^4)*s23^2 + (540*s12^4 +
                    1260*s12^3*s13 + 1161*s12^2*s13^2 + 243*s12*s13^3 +
                    108*s13^4)*s23^3 + (1060*s12^3 + 950*s12^2*s13 +
                    21*s12*s13^2 + 464*s13^3)*s23^4 + (500*s12^2 - 470*s12*
                     s13 + 196*s13^2)*s23^5 + (-20*s12 - 160*s13)*s23^6)) +
              p3q^2*(p2q^3*(-324*s12^4*s13^3 + 972*s12^3*s13^4 + 972*s12^2*
                   s13^5 - 324*s12*s13^6 + (540*s12^5*s13 - 243*s12^4*s13^2 -
                    1215*s12^3*s13^3 + 1647*s12^2*s13^4 - 99*s12*s13^5 -
                    234*s13^6)*s23 + (990*s12^4*s13 - 1233*s12^3*s13^2 -
                    738*s12^2*s13^3 + 729*s12*s13^4 - 234*s13^5)*s23^2 +
                  (450*s12^3*s13 - 900*s12^2*s13^2 + 270*s12*s13^3)*s23^3) +
                p1q*p2q^2*(-324*s12^4*s13^3 + 324*s12^3*s13^4 + 648*s12^2*
                   s13^5 + (243*s12^4*s13^2 + 9*s12^3*s13^3 + 1917*s12^2*
                     s13^4 + 945*s12*s13^5 - 234*s13^6)*s23 +
                  (520*s12^5 + 310*s12^4*s13 + 719*s12^3*s13^2 - 236*s12^2*
                     s13^3 + 343*s12*s13^4 - 58*s13^5)*s23^2 +
                  (1040*s12^4 - 310*s12^3*s13 + 326*s12^2*s13^2 - 912*s12*
                     s13^3 + 16*s13^4)*s23^3 + (520*s12^3 - 620*s12^2*s13 +
                    260*s12*s13^2 - 160*s13^3)*s23^4) + p1q^2*p2q*
                 ((-540*s12^5*s13 - 837*s12^4*s13^2 + 369*s12^3*s13^3 +
                    972*s12^2*s13^4 + 306*s12*s13^5)*s23 + (-20*s12^5 -
                    1170*s12^4*s13 - 1051*s12^3*s13^2 - 568*s12^2*s13^3 -
                    946*s12*s13^4 - 162*s13^5)*s23^2 + (-1040*s12^4 -
                    2530*s12^3*s13 - 2189*s12^2*s13^2 - 3109*s12*s13^3 -
                    1036*s13^4)*s23^3 + (-2020*s12^3 - 1310*s12^2*s13 -
                    235*s12*s13^2 - 554*s13^3)*s23^4 + (-1000*s12^2 +
                    590*s12*s13 + 320*s13^2)*s23^5) + p1q^3*
                 ((-243*s12^4*s13^2 - 333*s12^3*s13^3 - 90*s12^2*s13^4)*s23 +
                  (-540*s12^5 - 1170*s12^4*s13 - 765*s12^3*s13^2 - 180*s12^2*
                     s13^3 - 198*s12*s13^4)*s23^2 + (-1040*s12^4 - 550*s12^3*
                     s13 + 273*s12^2*s13^2 - 505*s12*s13^3 + 108*s13^4)*
                   s23^3 + (-300*s12^3 + 1170*s12^2*s13 + 331*s12*s13^2 +
                    464*s13^3)*s23^4 + (360*s12^2 + 390*s12*s13 + 196*s13^2)*
                   s23^5 + (160*s12 - 160*s13)*s23^6)))*
             Log((s13 + s23)/(s12 + s13 + s23)))/(36*p1q*p3q^4*s12^3*s13^3*
              s23^2 + 36*p1q*p2q^4*s12*s13^5*s23^2 + 36*p1q^4*p2q*s12*s13^3*
              s23^4 + p1q^2*p2q^3*(36*s12*s13^5*s23^2 - 72*s12*s13^4*s23^3) +
             p1q^3*p2q^2*(-72*s12*s13^4*s23^3 + 36*s12*s13^3*s23^4) +
             p3q^3*(p1q*p2q*(72*s12^3*s13^3 - 72*s12^2*s13^4)*s23^2 + p1q^2*
                (36*s12^3*s13^3*s23^2 - 72*s12^2*s13^3*s23^3)) +
             p3q^2*(p1q*p2q^2*(36*s12^3*s13^3 - 144*s12^2*s13^4 +
                 36*s12*s13^5)*s23^2 + p1q^2*p2q*((36*s12^3*s13^3 -
                   72*s12^2*s13^4)*s23^2 + (-144*s12^2*s13^3 - 72*s12*s13^4)*
                  s23^3) + p1q^3*(-72*s12^2*s13^3*s23^3 + 36*s12*s13^3*
                  s23^4)) + p3q*(p1q*p2q^3*(-72*s12^2*s13^4 + 72*s12*s13^5)*
                s23^2 + 36*p1q^4*s12*s13^3*s23^4 + p1q^2*p2q^2*
                ((-72*s12^2*s13^4 + 36*s12*s13^5)*s23^2 + (-72*s12^2*s13^3 -
                   144*s12*s13^4)*s23^3) + p1q^3*p2q*((-72*s12^2*s13^3 -
                   72*s12*s13^4)*s23^3 + 72*s12*s13^3*s23^4)))) +
         ((p2q*p3q^4*(-18*s12^4*s13 - 18*s12^3*s13^2 + (-36*s12^3*s13 -
                18*s12^2*s13^2)*s23 - 18*s12^2*s13*s23^2) +
            p2q^5*(-18*s12^2*s13^3 - 18*s12*s13^4 + (-36*s12*s13^3 -
                18*s13^4)*s23 - 18*s13^3*s23^2) + p1q*p2q^4*
             (-18*s12^2*s13^3 - 18*s12*s13^4 + (18*s12^2*s13^2 -
                18*s12*s13^3 - 18*s13^4)*s23 + (34*s12*s13^2 - 2*s13^3)*s23^
                2 + 16*s13^2*s23^3) + p1q^3*p2q^2*((2*s12^3 - 22*s12^2*s13 -
                32*s12*s13^2 - 8*s13^3)*s23^2 + (5*s12^2 - 45*s12*s13 -
                32*s13^2)*s23^3 + (3*s12 - 24*s13)*s23^4) +
            p1q^2*p2q^3*((36*s12^3*s13 + 99*s12^2*s13^2 + 72*s12*s13^3 +
                9*s13^4)*s23 + (73*s12^2*s13 + 144*s12*s13^2 + 53*s13^3)*s23^
                2 + (39*s12*s13 + 46*s13^2)*s23^3 + 2*s13*s23^4) +
            p1q^4*p2q*((-s12^2 - 2*s12*s13 - s13^2)*s23^3 + (-3*s12 - 3*s13)*
               s23^4 - 2*s23^5) + p3q^3*(p2q^2*(-36*s12^4*s13 +
                36*s12^2*s13^3 + (-72*s12^3*s13 + 36*s12^2*s13^2 +
                  36*s12*s13^3)*s23 + (-36*s12^2*s13 + 36*s12*s13^2)*s23^2) +
              p1q*p2q*(-18*s12^4*s13 - 18*s12^3*s13^2 + (36*s12^2*s13^2 +
                  18*s12*s13^3)*s23 + (56*s12^2*s13 + 56*s12*s13^2)*s23^2 +
                38*s12*s13*s23^3) + p1q^2*((s12^3 + 2*s12^2*s13 + s12*s13^2)*
                 s23^2 + (3*s12^2 + 3*s12*s13)*s23^3 + 2*s12*s23^4)) +
            p3q*(p2q^4*(36*s12^3*s13^2 - 36*s12*s13^4 + (72*s12^2*s13^2 -
                  36*s12*s13^3 - 36*s13^4)*s23 + (36*s12*s13^2 - 36*s13^3)*
                 s23^2) + p1q*p2q^3*(36*s12^3*s13^2 + 18*s12^2*s13^3 -
                18*s12*s13^4 + (54*s12^3*s13 + 198*s12^2*s13^2 +
                  72*s12*s13^3 - 18*s13^4)*s23 + (110*s12^2*s13 +
                  196*s12*s13^2 + 14*s13^3)*s23^2 + (56*s12*s13 + 32*s13^2)*
                 s23^3) + p1q^2*p2q^2*((45*s12^3*s13 + 99*s12^2*s13^2 +
                  63*s12*s13^3 + 9*s13^4)*s23 + (3*s12^3 + 62*s12^2*s13 +
                  93*s12*s13^2 + 34*s13^3)*s23^2 + (7*s12^2 - 16*s12*s13 -
                  9*s13^2)*s23^3 + (4*s12 - 34*s13)*s23^4) +
              p1q^3*p2q*((3*s12^3 - 20*s12^2*s13 - 31*s12*s13^2 - 8*s13^3)*
                 s23^2 + (7*s12^2 - 44*s12*s13 - 33*s13^2)*s23^3 +
                (2*s12 - 27*s13)*s23^4 - 2*s23^5) + p1q^4*(
                (-s12^2 - 2*s12*s13 - s13^2)*s23^3 + (-3*s12 - 3*s13)*s23^4 -
                2*s23^5)) + p3q^2*(p2q^3*(-18*s12^4*s13 + 54*s12^3*s13^2 +
                54*s12^2*s13^3 - 18*s12*s13^4 + (-36*s12^3*s13 + 126*s12^2*
                   s13^2 + 36*s12*s13^3 - 18*s13^4)*s23 + (-18*s12^2*s13 +
                  72*s12*s13^2 - 18*s13^3)*s23^2) + p1q*p2q^2*(-18*s12^4*
                 s13 + 18*s12^3*s13^2 + 36*s12^2*s13^3 + (36*s12^3*s13 +
                  162*s12^2*s13^2 + 54*s12*s13^3 - 18*s13^4)*s23 +
                (130*s12^2*s13 + 146*s12*s13^2 - 20*s13^3)*s23^2 +
                (76*s12*s13 - 2*s13^2)*s23^3) + p1q^2*p2q*((45*s12^3*s13 +
                  72*s12^2*s13^2 + 27*s12*s13^3)*s23 + (4*s12^3 +
                  81*s12^2*s13 + 58*s12*s13^2 - s13^3)*s23^2 +
                (10*s12^2 + 20*s12*s13 - 19*s13^2)*s23^3 + (6*s12 - 18*s13)*
                 s23^4) + p1q^3*((s12^3 + 2*s12^2*s13 + s12*s13^2)*s23^2 +
                (2*s12^2 + s12*s13 - s13^2)*s23^3 + (-s12 - 3*s13)*s23^4 -
                2*s23^5)))*PolyLog(2, p1q/(p1q + p2q)))/
          (2*p1q*p3q^4*s12^3*s13*s23^2 + 2*p1q*p2q^4*s12*s13^3*s23^2 +
           2*p1q^4*p2q*s12*s13*s23^4 + p1q^2*p2q^3*(2*s12*s13^3*s23^2 -
             4*s12*s13^2*s23^3) + p1q^3*p2q^2*(-4*s12*s13^2*s23^3 +
             2*s12*s13*s23^4) + p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*
              s23^2 + p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
           p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*
              s23^2 + p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
               (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) + p1q^3*(-4*s12^2*s13*
                s23^3 + 2*s12*s13*s23^4)) +
           p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
             2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*((-4*s12^2*s13^2 +
                 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*s13^2)*s23^3) +
             p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*s23^3 + 4*s12*s13*
                s23^4))) + ((p2q^5*(-18*s12^2*s13^3 - 18*s12*s13^4 -
              18*s12*s13^3*s23) + p1q*p2q^4*(-18*s12^2*s13^3 - 18*s12*s13^4 +
              (36*s12^2*s13^2 + 18*s12*s13^3)*s23 + (34*s12*s13^2 - 2*s13^3)*
               s23^2 - 2*s13^2*s23^3) + p1q^2*p2q^3*
             ((9*s12^3*s13 + 54*s12^2*s13^2 + 45*s12*s13^3)*s23 +
              (-8*s12^2*s13 + 27*s12*s13^2 - s13^3)*s23^2 + (-15*s12*s13 +
                s13^2)*s23^3 + 2*s13*s23^4) + p1q^3*p2q^2*
             ((-7*s12^3 - 40*s12^2*s13 - 32*s12*s13^2 + s13^3)*s23^2 +
              (-4*s12^2 - 27*s12*s13 + 4*s13^2)*s23^3 + (3*s12 + 3*s13)*s23^
                4) + p1q^4*p2q*((8*s12^2 + 7*s12*s13 - s13^2)*s23^3 +
              (6*s12 - 3*s13)*s23^4 - 2*s23^5) +
            p3q^4*(p2q*(-18*s12^4*s13 - 18*s12^3*s13^2 - 18*s12^3*s13*s23) +
              p1q*((18*s12^4 + 36*s12^3*s13 + 18*s12^2*s13^2)*s23 +
                (36*s12^3 + 36*s12^2*s13)*s23^2 + 18*s12^2*s23^3)) +
            p3q^3*(p2q^2*(-36*s12^4*s13 + 36*s12^2*s13^3 + (-36*s12^3*s13 +
                  36*s12^2*s13^2)*s23) + p1q*p2q*(-18*s12^4*s13 -
                18*s12^3*s13^2 + (36*s12^4 + 36*s12^3*s13 - 18*s12*s13^3)*
                 s23 + (72*s12^3 + 38*s12^2*s13 - 34*s12*s13^2)*s23^2 +
                (36*s12^2 - 16*s12*s13)*s23^3) + p1q^2*((18*s12^4 +
                  36*s12^3*s13 + 18*s12^2*s13^2)*s23 + (10*s12^3 -
                  7*s12^2*s13 - 17*s12*s13^2)*s23^2 + (-24*s12^2 -
                  33*s12*s13)*s23^3 - 16*s12*s23^4)) +
            p3q^2*(p2q^3*(-18*s12^4*s13 + 54*s12^3*s13^2 + 54*s12^2*s13^3 -
                18*s12*s13^4 + (-18*s12^3*s13 + 72*s12^2*s13^2 -
                  18*s12*s13^3)*s23) + p1q*p2q^2*(-18*s12^4*s13 +
                18*s12^3*s13^2 + 36*s12^2*s13^3 + (36*s12^4 + 54*s12^3*s13 +
                  108*s12^2*s13^2 + 36*s12*s13^3)*s23 + (72*s12^3 +
                  76*s12^2*s13 + 38*s12*s13^2 - 2*s13^3)*s23^2 +
                (36*s12^2 + 4*s12*s13 - 2*s13^2)*s23^3) + p1q^2*p2q*(
                (27*s12^4 + 72*s12^3*s13 + 63*s12^2*s13^2 + 18*s12*s13^3)*
                 s23 + (40*s12^3 + 54*s12^2*s13 + 13*s12*s13^2 - s13^3)*
                 s23^2 + (19*s12^2 + 2*s12*s13 - s13^2)*s23^3 +
                6*s12*s23^4) + p1q^3*((-26*s12^3 - 43*s12^2*s13 -
                  17*s12*s13^2)*s23^2 + (-34*s12^2 - 26*s12*s13 - s13^2)*
                 s23^3 + (-10*s12 - 3*s13)*s23^4 - 2*s23^5)) +
            p3q*(p2q^4*(36*s12^3*s13^2 - 36*s12*s13^4 + (36*s12^2*s13^2 -
                  36*s12*s13^3)*s23) + p1q*p2q^3*(36*s12^3*s13^2 +
                18*s12^2*s13^3 - 18*s12*s13^4 + (108*s12^2*s13^2 +
                  54*s12*s13^3)*s23 + (2*s12^2*s13 + 70*s12*s13^2 - 4*s13^3)*
                 s23^2 + (2*s12*s13 - 4*s13^2)*s23^3) + p1q^2*p2q^2*(
                (27*s12^4 + 63*s12^3*s13 + 81*s12^2*s13^2 + 45*s12*s13^3)*
                 s23 + (48*s12^3 + 17*s12^2*s13 + 3*s12*s13^2 - 2*s13^3)*
                 s23^2 + (25*s12^2 - 34*s12*s13)*s23^3 + (4*s12 + 2*s13)*
                 s23^4) + p1q^3*p2q*((-15*s12^3 - 47*s12^2*s13 -
                  31*s12*s13^2 + s13^3)*s23^2 + (-2*s12^2 - 17*s12*s13 +
                  3*s13^2)*s23^3 + 11*s12*s23^4 - 2*s23^5) +
              p1q^4*((8*s12^2 + 7*s12*s13 - s13^2)*s23^3 + (6*s12 - 3*s13)*
                 s23^4 - 2*s23^5)))*PolyLog(2, p1q/(p1q + p3q)))/
          (2*p1q*p3q^4*s12^3*s13*s23^2 + 2*p1q*p2q^4*s12*s13^3*s23^2 +
           2*p1q^4*p2q*s12*s13*s23^4 + p1q^2*p2q^3*(2*s12*s13^3*s23^2 -
             4*s12*s13^2*s23^3) + p1q^3*p2q^2*(-4*s12*s13^2*s23^3 +
             2*s12*s13*s23^4) + p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*
              s23^2 + p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
           p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*
              s23^2 + p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
               (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) + p1q^3*(-4*s12^2*s13*
                s23^3 + 2*s12*s13*s23^4)) +
           p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
             2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*((-4*s12^2*s13^2 +
                 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*s13^2)*s23^3) +
             p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*s23^3 + 4*s12*s13*
                s23^4))) + ((p2q^5*(18*s12*s13^3 + 18*s13^4 + 18*s13^3*s23) +
            p1q*p2q^4*(18*s12^2*s13^2 + 36*s12*s13^3 + 18*s13^4 -
              18*s13^2*s23^2) + p1q^2*p2q^3*(-27*s12^3*s13 - 45*s12^2*s13^2 -
              27*s12*s13^3 - 9*s13^4 + (-81*s12^2*s13 - 117*s12*s13^2 -
                54*s13^3)*s23 + (-54*s12*s13 - 45*s13^2)*s23^2) +
            p1q^4*p2q*((9*s12^2 + 9*s12*s13)*s23^2 + 9*s12*s23^3) +
            p1q^3*p2q^2*((-9*s12^3 - 18*s12^2*s13 + 9*s13^3)*s23 +
              (-9*s12^2 + 18*s12*s13 + 36*s13^2)*s23^2 + 27*s13*s23^3) +
            p3q^4*(p2q*(18*s12^3*s13 + 18*s12^2*s13^2 + 18*s12^2*s13*s23) +
              p1q*(18*s12^4 + 36*s12^3*s13 + 18*s12^2*s13^2 +
                (36*s12^3 + 36*s12^2*s13)*s23 + 18*s12^2*s23^2)) +
            p3q^3*(p2q^2*(36*s12^3*s13 - 36*s12*s13^3 + (36*s12^2*s13 -
                  36*s12*s13^2)*s23) + p1q*p2q*(36*s12^4 + 36*s12^3*s13 -
                36*s12^2*s13^2 - 36*s12*s13^3 + (72*s12^3 - 18*s12^2*s13 -
                  90*s12*s13^2)*s23 + (36*s12^2 - 54*s12*s13)*s23^2) +
              p1q^2*(18*s12^4 + 36*s12^3*s13 + 18*s12^2*s13^2 +
                (9*s12^3 - 9*s12^2*s13 - 18*s12*s13^2)*s23 +
                (-27*s12^2 - 36*s12*s13)*s23^2 - 18*s12*s23^3)) +
            p3q^2*(p2q^3*(18*s12^3*s13 - 54*s12^2*s13^2 - 54*s12*s13^3 +
                18*s13^4 + (18*s12^2*s13 - 72*s12*s13^2 + 18*s13^3)*s23) +
              p1q*p2q^2*(36*s12^4 + 18*s12^3*s13 - 54*s12^2*s13^2 -
                18*s12*s13^3 + 18*s13^4 + (72*s12^3 - 54*s12^2*s13 -
                  108*s12*s13^2 + 18*s13^3)*s23 + (36*s12^2 - 72*s12*s13)*
                 s23^2) + p1q^3*((-27*s12^3 - 45*s12^2*s13 - 18*s12*s13^2)*
                 s23 + (-36*s12^2 - 27*s12*s13)*s23^2 - 9*s12*s23^3) +
              p1q^2*p2q*(27*s12^4 + 27*s12^3*s13 - 9*s12^2*s13^2 -
                9*s12*s13^3 + (36*s12^3 - 27*s12^2*s13 - 45*s12*s13^2)*s23 +
                (9*s12^2 - 18*s12*s13 + 18*s13^2)*s23^2 + 18*s13*s23^3)) +
            p3q*(p2q^4*(-36*s12^2*s13^2 + 36*s13^4 + (-36*s12*s13^2 +
                  36*s13^3)*s23) + p1q*p2q^3*(-54*s12^3*s13 - 90*s12^2*
                 s13^2 - 18*s12*s13^3 + 18*s13^4 + (-108*s12^2*s13 -
                  126*s12*s13^2 - 18*s13^3)*s23 + (-54*s12*s13 - 36*s13^2)*
                 s23^2) + p1q^4*((9*s12^2 + 9*s12*s13)*s23^2 + 9*s12*s23^3) +
              p1q^2*p2q^2*(27*s12^4 + 18*s12^3*s13 - 18*s12^2*s13^2 -
                18*s12*s13^3 - 9*s13^4 + (45*s12^3 - 45*s12^2*s13 -
                  90*s12*s13^2 - 36*s13^3)*s23 + (18*s12^2 - 18*s12*s13 +
                  9*s13^2)*s23^2 + 36*s13*s23^3) + p1q^3*p2q*(
                (-18*s12^3 - 27*s12^2*s13 + 9*s13^3)*s23 +
                (-9*s12^2 + 27*s12*s13 + 36*s13^2)*s23^2 + (9*s12 + 27*s13)*
                 s23^3)))*PolyLog(2, p2q/(p2q + p3q)))/
          (2*p1q*p3q^4*s12^3*s13*s23 + 2*p1q*p2q^4*s12*s13^3*s23 +
           2*p1q^4*p2q*s12*s13*s23^3 + p1q^2*p2q^3*(2*s12*s13^3*s23 -
             4*s12*s13^2*s23^2) + p1q^3*p2q^2*(-4*s12*s13^2*s23^2 +
             2*s12*s13*s23^3) + p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*
              s23 + p1q^2*(2*s12^3*s13*s23 - 4*s12^2*s13*s23^2)) +
           p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*s23 +
             p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23 + (-8*s12^2*s13 -
                 4*s12*s13^2)*s23^2) + p1q^3*(-4*s12^2*s13*s23^2 + 2*s12*s13*
                s23^3)) + p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23 +
             2*p1q^4*s12*s13*s23^3 + p1q^2*p2q^2*((-4*s12^2*s13^2 +
                 2*s12*s13^3)*s23 + (-4*s12^2*s13 - 8*s12*s13^2)*s23^2) +
             p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*s23^2 + 4*s12*s13*
                s23^3))) + ((p2q^5*(-324*s12^2*s13^5 - 324*s12*s13^6 +
              (180*s12^3*s13^3 + 117*s12^2*s13^4 - 441*s12*s13^5 - 54*s13^6)*
               s23 + (270*s12^2*s13^3 + 27*s12*s13^4 - 54*s13^5)*s23^2 +
              90*s12*s13^3*s23^3) + p3q^5*((-180*s12^6 - 360*s12^5*s13 -
                117*s12^4*s13^2 - 27*s12^3*s13^3 - 90*s12^2*s13^4)*s23 +
              (-360*s12^5 - 270*s12^4*s13 + 153*s12^3*s13^2 - 90*s12^2*s13^3)*
               s23^2 + (-180*s12^4 + 90*s12^3*s13)*s23^3) +
            p1q*p2q^4*(-324*s12^2*s13^5 - 324*s12*s13^6 + (567*s12^2*s13^4 +
                9*s12*s13^5 - 234*s13^6)*s23 + (-200*s12^3*s13^2 -
                4*s12^2*s13^3 + 903*s12*s13^4 - 94*s13^5)*s23^2 +
              (-220*s12^2*s13^2 + 16*s12*s13^3 - 20*s13^4)*s23^3 +
              (-20*s12*s13^2 - 160*s13^3)*s23^4) + p1q^2*p2q^3*
             ((468*s12^3*s13^3 + 1665*s12^2*s13^4 + 1089*s12*s13^5 -
                108*s13^6)*s23 + (-20*s12^3*s13^2 + 302*s12^2*s13^3 +
                2019*s12*s13^4 + 860*s13^5)*s23^2 + (-140*s12^3*s13 -
                383*s12^2*s13^2 - 935*s12*s13^3 + 402*s13^4)*s23^3 +
              (-370*s12^2*s13 - 133*s12*s13^2 - 246*s13^3)*s23^4 +
              (-230*s12*s13 + 320*s13^2)*s23^5) +
            p1q^5*((-243*s12^2*s13^2 - 333*s12*s13^3 - 90*s13^4)*s23^3 +
              (-180*s12^3 - 450*s12^2*s13 - 513*s12*s13^2 - 90*s13^3)*s23^4 +
              (-360*s12^2 - 450*s12*s13)*s23^5 - 180*s12*s23^6) +
            p1q^4*p2q*((486*s12^2*s13^3 + 666*s12*s13^4 + 180*s13^5)*s23^2 +
              (180*s12^3*s13 + 801*s12^2*s13^2 + 855*s12*s13^3 - 72*s13^4)*
               s23^3 + (-20*s12^3 + 230*s12^2*s13 + 1047*s12*s13^2 +
                104*s13^3)*s23^4 + (-40*s12^2 - 110*s12*s13 + 196*s13^2)*s23^
                5 + (-20*s12 - 160*s13)*s23^6) + p1q^3*p2q^2*
             ((-243*s12^2*s13^4 - 333*s12*s13^5 - 90*s13^6)*s23 +
              (144*s12^3*s13^2 - 792*s12^2*s13^3 - 819*s12*s13^4 + 270*s13^5)*
               s23^2 + (40*s12^3*s13 + 773*s12^2*s13^2 - 1437*s12*s13^3 -
                730*s13^4)*s23^3 + (160*s12^3 + 310*s12^2*s13 +
                1339*s12*s13^2 - 450*s13^3)*s23^4 + (320*s12^2 +
                110*s12*s13 + 480*s13^2)*s23^5 + (160*s12 - 160*s13)*s23^6) +
            p3q^4*(p2q*(-324*s12^4*s13^3 - 324*s12^3*s13^4 +
                (-360*s12^6 - 180*s12^5*s13 + 603*s12^4*s13^2 - 261*s12^3*
                   s13^3 - 180*s12^2*s13^4 + 180*s12*s13^5)*s23 +
                (-720*s12^5 + 450*s12^4*s13 + 873*s12^3*s13^2 - 540*s12^2*
                   s13^3 + 180*s12*s13^4)*s23^2 + (-360*s12^4 + 630*s12^3*
                   s13 - 180*s12^2*s13^2)*s23^3) + p1q*((243*s12^4*s13^2 +
                  333*s12^3*s13^3 + 90*s12^2*s13^4)*s23 + (520*s12^5 +
                  950*s12^4*s13 + 867*s12^3*s13^2 + 464*s12^2*s13^3 +
                  180*s12*s13^4)*s23^2 + (1040*s12^4 + 610*s12^3*s13 -
                  146*s12^2*s13^2 + 180*s12*s13^3)*s23^3 +
                (520*s12^3 - 340*s12^2*s13)*s23^4)) +
            p3q^3*(p2q^2*(-648*s12^4*s13^3 + 648*s12^2*s13^5 +
                (-180*s12^6 + 720*s12^5*s13 + 1017*s12^4*s13^2 - 1035*s12^3*
                   s13^3 + 675*s12^2*s13^4 + 441*s12*s13^5 - 90*s13^6)*s23 +
                (-360*s12^5 + 1710*s12^4*s13 + 387*s12^3*s13^2 - 1134*s12^2*
                   s13^3 + 621*s12*s13^4 - 90*s13^5)*s23^2 +
                (-180*s12^4 + 990*s12^3*s13 - 720*s12^2*s13^2 + 90*s12*s13^3)*
                 s23^3) + p1q*p2q*(-324*s12^4*s13^3 - 324*s12^3*s13^4 +
                (486*s12^4*s13^2 + 180*s12^3*s13^3 + 162*s12^2*s13^4 +
                  144*s12*s13^5)*s23 + (1040*s12^5 + 1580*s12^4*s13 +
                  1760*s12^3*s13^2 + 418*s12^2*s13^3 - 10*s12*s13^4 +
                  180*s13^5)*s23^2 + (2080*s12^4 + 760*s12^3*s13 +
                  54*s12^2*s13^2 - 194*s12*s13^3 + 180*s13^4)*s23^3 +
                (1040*s12^3 - 820*s12^2*s13 + 140*s12*s13^2)*s23^4) +
              p1q^2*((180*s12^6 + 360*s12^5*s13 + 117*s12^4*s13^2 +
                  27*s12^3*s13^3 + 90*s12^2*s13^4)*s23 + (340*s12^5 +
                  50*s12^4*s13 - 537*s12^3*s13^2 - 292*s12^2*s13^3 -
                  198*s12*s13^4)*s23^2 + (-360*s12^4 - 1290*s12^3*s13 -
                  1277*s12^2*s13^2 - 901*s12*s13^3 - 90*s13^4)*s23^3 +
                (-1020*s12^3 - 570*s12^2*s13 - 203*s12*s13^2 - 90*s13^3)*
                 s23^4 + (-500*s12^2 + 410*s12*s13)*s23^5)) +
            p3q*(p2q^4*(648*s12^3*s13^4 - 648*s12*s13^6 + (-540*s12^4*s13^2 -
                  234*s12^3*s13^3 + 999*s12^2*s13^4 - 801*s12*s13^5 -
                  198*s13^6)*s23 + (-900*s12^3*s13^2 + 216*s12^2*s13^3 +
                  315*s12*s13^4 - 198*s13^5)*s23^2 + (-360*s12^2*s13^2 +
                  270*s12*s13^3)*s23^3) + p1q*p2q^3*(648*s12^3*s13^4 +
                324*s12^2*s13^5 - 324*s12*s13^6 + (486*s12^3*s13^3 +
                  3384*s12^2*s13^4 + 1782*s12*s13^5 - 144*s13^6)*s23 +
                (-320*s12^4*s13 - 374*s12^3*s13^2 + 454*s12^2*s13^3 +
                  2732*s12*s13^4 + 316*s13^5)*s23^2 + (-460*s12^3*s13 -
                  94*s12^2*s13^2 - 198*s12*s13^3 + 140*s13^4)*s23^3 +
                (-140*s12^2*s13 + 100*s12*s13^2 - 320*s13^3)*s23^4) +
              p1q^2*p2q^2*((540*s12^4*s13^2 + 1404*s12^3*s13^3 + 2313*s12^2*
                   s13^4 + 1701*s12*s13^5 + 252*s13^6)*s23 +
                (40*s12^4*s13 + 780*s12^3*s13^2 - 946*s12^2*s13^3 -
                  79*s12*s13^4 + 734*s13^5)*s23^2 + (-500*s12^4 - 1020*s12^3*
                   s13 - 1115*s12^2*s13^2 - 4439*s12*s13^3 - 1192*s13^4)*
                 s23^3 + (-1000*s12^3 - 1110*s12^2*s13 - 165*s12*s13^2 -
                  1034*s13^3)*s23^4 + (-500*s12^2 - 50*s12*s13 + 640*s13^2)*
                 s23^5) + p1q^3*p2q*((486*s12^3*s13^3 + 666*s12^2*s13^4 +
                  180*s12*s13^5)*s23 + (360*s12^4*s13 + 360*s12^3*s13^2 +
                  594*s12^2*s13^3 - 72*s12*s13^4 - 360*s13^5)*s23^2 +
                (40*s12^4 + 1020*s12^3*s13 + 974*s12^2*s13^2 - 520*s12*
                   s13^3 - 1342*s13^4)*s23^3 + (400*s12^3 + 1480*s12^2*s13 +
                  1850*s12*s13^2 + 14*s13^3)*s23^4 + (680*s12^2 +
                  500*s12*s13 + 676*s13^2)*s23^5 + (320*s12 - 320*s13)*
                 s23^6) + p1q^4*((486*s12^3*s13^2 + 666*s12^2*s13^3 +
                  180*s12*s13^4)*s23^2 + (540*s12^4 + 1260*s12^3*s13 +
                  1161*s12^2*s13^2 + 243*s12*s13^3 + 108*s13^4)*s23^3 +
                (1060*s12^3 + 950*s12^2*s13 + 21*s12*s13^2 + 464*s13^3)*
                 s23^4 + (500*s12^2 - 470*s12*s13 + 196*s13^2)*s23^5 +
                (-20*s12 - 160*s13)*s23^6)) +
            p3q^2*(p2q^3*(-324*s12^4*s13^3 + 972*s12^3*s13^4 + 972*s12^2*
                 s13^5 - 324*s12*s13^6 + (540*s12^5*s13 - 243*s12^4*s13^2 -
                  1215*s12^3*s13^3 + 1647*s12^2*s13^4 - 99*s12*s13^5 -
                  234*s13^6)*s23 + (990*s12^4*s13 - 1233*s12^3*s13^2 -
                  738*s12^2*s13^3 + 729*s12*s13^4 - 234*s13^5)*s23^2 +
                (450*s12^3*s13 - 900*s12^2*s13^2 + 270*s12*s13^3)*s23^3) +
              p1q*p2q^2*(-324*s12^4*s13^3 + 324*s12^3*s13^4 + 648*s12^2*
                 s13^5 + (243*s12^4*s13^2 + 9*s12^3*s13^3 + 1917*s12^2*
                   s13^4 + 945*s12*s13^5 - 234*s13^6)*s23 +
                (520*s12^5 + 310*s12^4*s13 + 719*s12^3*s13^2 - 236*s12^2*
                   s13^3 + 343*s12*s13^4 - 58*s13^5)*s23^2 +
                (1040*s12^4 - 310*s12^3*s13 + 326*s12^2*s13^2 - 912*s12*
                   s13^3 + 16*s13^4)*s23^3 + (520*s12^3 - 620*s12^2*s13 +
                  260*s12*s13^2 - 160*s13^3)*s23^4) + p1q^2*p2q*(
                (-540*s12^5*s13 - 837*s12^4*s13^2 + 369*s12^3*s13^3 +
                  972*s12^2*s13^4 + 306*s12*s13^5)*s23 + (-20*s12^5 -
                  1170*s12^4*s13 - 1051*s12^3*s13^2 - 568*s12^2*s13^3 -
                  946*s12*s13^4 - 162*s13^5)*s23^2 + (-1040*s12^4 -
                  2530*s12^3*s13 - 2189*s12^2*s13^2 - 3109*s12*s13^3 -
                  1036*s13^4)*s23^3 + (-2020*s12^3 - 1310*s12^2*s13 -
                  235*s12*s13^2 - 554*s13^3)*s23^4 + (-1000*s12^2 +
                  590*s12*s13 + 320*s13^2)*s23^5) + p1q^3*(
                (-243*s12^4*s13^2 - 333*s12^3*s13^3 - 90*s12^2*s13^4)*s23 +
                (-540*s12^5 - 1170*s12^4*s13 - 765*s12^3*s13^2 - 180*s12^2*
                   s13^3 - 198*s12*s13^4)*s23^2 + (-1040*s12^4 - 550*s12^3*
                   s13 + 273*s12^2*s13^2 - 505*s12*s13^3 + 108*s13^4)*s23^3 +
                (-300*s12^3 + 1170*s12^2*s13 + 331*s12*s13^2 + 464*s13^3)*
                 s23^4 + (360*s12^2 + 390*s12*s13 + 196*s13^2)*s23^5 +
                (160*s12 - 160*s13)*s23^6)))*PolyLog(2,
            s12/(s12 + s13 + s23)))/(36*p1q*p3q^4*s12^3*s13^3*s23^2 +
           36*p1q*p2q^4*s12*s13^5*s23^2 + 36*p1q^4*p2q*s12*s13^3*s23^4 +
           p1q^2*p2q^3*(36*s12*s13^5*s23^2 - 72*s12*s13^4*s23^3) +
           p1q^3*p2q^2*(-72*s12*s13^4*s23^3 + 36*s12*s13^3*s23^4) +
           p3q^3*(p1q*p2q*(72*s12^3*s13^3 - 72*s12^2*s13^4)*s23^2 +
             p1q^2*(36*s12^3*s13^3*s23^2 - 72*s12^2*s13^3*s23^3)) +
           p3q^2*(p1q*p2q^2*(36*s12^3*s13^3 - 144*s12^2*s13^4 + 36*s12*s13^5)*
              s23^2 + p1q^2*p2q*((36*s12^3*s13^3 - 72*s12^2*s13^4)*s23^2 +
               (-144*s12^2*s13^3 - 72*s12*s13^4)*s23^3) +
             p1q^3*(-72*s12^2*s13^3*s23^3 + 36*s12*s13^3*s23^4)) +
           p3q*(p1q*p2q^3*(-72*s12^2*s13^4 + 72*s12*s13^5)*s23^2 +
             36*p1q^4*s12*s13^3*s23^4 + p1q^2*p2q^2*((-72*s12^2*s13^4 +
                 36*s12*s13^5)*s23^2 + (-72*s12^2*s13^3 - 144*s12*s13^4)*
                s23^3) + p1q^3*p2q*((-72*s12^2*s13^3 - 72*s12*s13^4)*s23^3 +
               72*s12*s13^3*s23^4))) +
         ((p3q^5*((90*s12^6 + 27*s12^5*s13 - 63*s12^4*s13^2)*s23 +
              (90*s12^5 - 153*s12^4*s13 - 90*s12^3*s13^2)*s23^2 -
              90*s12^3*s13*s23^3) + p2q^5*(-324*s12^4*s13^3 -
              324*s12^3*s13^4 + (90*s12^4*s13^2 - 657*s12^3*s13^3 -
                117*s12^2*s13^4 + 306*s12*s13^5)*s23 + (90*s12^3*s13^2 -
                513*s12^2*s13^3 + 396*s12*s13^4 + 180*s13^5)*s23^2 +
              (-90*s12*s13^3 + 180*s13^4)*s23^3) + p1q*p2q^4*
             (-324*s12^4*s13^3 - 324*s12^3*s13^4 + (558*s12^4*s13^2 -
                9*s12^3*s13^3 - 243*s12^2*s13^4)*s23 + (-180*s12^4*s13 +
                1546*s12^3*s13^2 - 103*s12^2*s13^3 - 1028*s12*s13^4)*s23^2 +
              (-180*s12^3*s13 + 1508*s12^2*s13^2 - 1208*s12*s13^3 -
                520*s13^4)*s23^3 + (340*s12*s13^2 - 520*s13^3)*s23^4) +
            p1q^2*p2q^3*((162*s12^5*s13 + 882*s12^4*s13^2 + 1143*s12^3*
                 s13^3 + 117*s12^2*s13^4 - 306*s12*s13^5)*s23 +
              (1348*s12^3*s13^2 + 1283*s12^2*s13^3 - 416*s12*s13^4 -
                180*s13^5)*s23^2 + (90*s12^4 - 1103*s12^3*s13 + 1057*s12^2*
                 s13^2 + 1388*s12*s13^3 - 160*s13^4)*s23^3 +
              (90*s12^3 - 1441*s12^2*s13 + 1388*s12*s13^2 + 520*s13^3)*s23^
                4 + (-410*s12*s13 + 500*s13^2)*s23^5) + p1q^3*p2q^2*
             ((90*s12^4*s13^2 + 333*s12^3*s13^3 + 243*s12^2*s13^4)*s23 +
              (-198*s12^5 - 720*s12^4*s13 - 1296*s12^3*s13^2 + 387*s12^2*
                 s13^3 + 1008*s12*s13^4)*s23^2 + (-342*s12^4 - 1535*s12^3*
                 s13 - 1873*s12^2*s13^2 + 1408*s12*s13^3 + 540*s13^4)*s23^3 +
              (142*s12^3 - 1319*s12^2*s13 - 916*s12*s13^2 + 500*s13^3)*s23^
                4 + (446*s12^2 - 736*s12*s13 - 200*s13^2)*s23^5 +
              (160*s12 - 160*s13)*s23^6) + p1q^5*((90*s12^4 + 333*s12^3*s13 +
                243*s12^2*s13^2)*s23^3 + (90*s12^3 + 639*s12^2*s13 +
                396*s12*s13^2)*s23^4 + (576*s12*s13 + 180*s13^2)*s23^5 +
              180*s13*s23^6) + p1q^4*p2q*((-180*s12^4*s13 - 666*s12^3*s13^2 -
                486*s12^2*s13^3)*s23^2 + (90*s12^4 + 351*s12^3*s13 -
                1143*s12^2*s13^2 - 1098*s12*s13^3)*s23^3 + (412*s12^3 +
                833*s12^2*s13 - 1568*s12*s13^2 - 540*s13^3)*s23^4 +
              (482*s12^2 + 250*s12*s13 - 520*s13^2)*s23^5 + (160*s12 +
                20*s13)*s23^6) + p3q^4*(p2q*(-324*s12^6*s13 - 324*s12^5*
                 s13^2 + (270*s12^6 - 783*s12^5*s13 - 297*s12^4*s13^2 +
                  432*s12^3*s13^3)*s23 + (270*s12^5 - 999*s12^4*s13 +
                  522*s12^3*s13^2 + 360*s12^2*s13^3)*s23^2 +
                (-270*s12^3*s13 + 360*s12^2*s13^2)*s23^3) +
              p1q*((234*s12^6 + 315*s12^5*s13 + 81*s12^4*s13^2)*s23 +
                (664*s12^5 + 221*s12^4*s13 - 290*s12^3*s13^2)*s23^2 +
                (590*s12^4 - 110*s12^3*s13 + 20*s12^2*s13^2)*s23^3 +
                (160*s12^3 + 20*s12^2*s13)*s23^4)) +
            p3q^3*(p2q^2*(-648*s12^6*s13 + 648*s12^4*s13^3 +
                (270*s12^6 - 1827*s12^5*s13 + 999*s12^4*s13^2 + 1125*s12^3*
                   s13^3 - 675*s12^2*s13^4)*s23 + (270*s12^5 - 1719*s12^4*
                   s13 + 2430*s12^3*s13^2 - 225*s12^2*s13^3 - 450*s12*s13^4)*
                 s23^2 + (-270*s12^3*s13 + 900*s12^2*s13^2 - 450*s12*s13^3)*
                 s23^3) + p1q*p2q*(-324*s12^6*s13 - 324*s12^5*s13^2 +
                (468*s12^6 + 162*s12^5*s13 + 180*s12^4*s13^2 + 162*s12^3*
                   s13^3)*s23 + (1148*s12^5 - 148*s12^4*s13 - 338*s12^3*
                   s13^2 + 346*s12^2*s13^3)*s23^2 + (1000*s12^4 - 626*s12^3*
                   s13 + 386*s12^2*s13^2 + 140*s12*s13^3)*s23^3 +
                (320*s12^3 - 100*s12^2*s13 + 140*s12*s13^2)*s23^4) +
              p1q^2*((234*s12^6 + 621*s12^5*s13 + 387*s12^4*s13^2)*s23 +
                (520*s12^5 + 887*s12^4*s13 + 214*s12^3*s13^2)*s23^2 +
                (-396*s12^4 + 321*s12^3*s13 + 789*s12^2*s13^2)*s23^3 +
                (-1002*s12^3 + 699*s12^2*s13 + 230*s12*s13^2)*s23^4 +
                (-320*s12^2 + 230*s12*s13)*s23^5)) +
            p3q^2*(p2q^3*(-324*s12^6*s13 + 972*s12^5*s13^2 + 972*s12^4*
                 s13^3 - 324*s12^3*s13^4 + (90*s12^6 - 1197*s12^5*s13 +
                  2727*s12^4*s13^2 + 297*s12^3*s13^3 - 1467*s12^2*s13^4 +
                  306*s12*s13^5)*s23 + (90*s12^5 - 1053*s12^4*s13 +
                  3024*s12^3*s13^2 - 2043*s12^2*s13^3 - 504*s12*s13^4 +
                  180*s13^5)*s23^2 + (-90*s12^3*s13 + 720*s12^2*s13^2 -
                  990*s12*s13^3 + 180*s13^4)*s23^3) + p1q*p2q^2*(
                -324*s12^6*s13 + 324*s12^5*s13^2 + 648*s12^4*s13^3 +
                (558*s12^6 + 999*s12^5*s13 + 2943*s12^4*s13^2 + 1287*s12^3*
                   s13^3 - 243*s12^2*s13^4)*s23 + (952*s12^5 + 805*s12^4*
                   s13 + 3036*s12^3*s13^2 + 589*s12^2*s13^3 - 1028*s12*s13^4)*
                 s23^2 + (554*s12^4 - 454*s12^3*s13 + 2220*s12^2*s13^2 -
                  928*s12*s13^3 - 520*s13^4)*s23^3 + (160*s12^3 - 260*s12^2*
                   s13 + 620*s12*s13^2 - 520*s13^3)*s23^4) +
              p1q^2*p2q*((396*s12^6 + 1809*s12^5*s13 + 1305*s12^4*s13^2 -
                  108*s12^3*s13^3)*s23 + (1132*s12^5 + 2547*s12^4*s13 +
                  474*s12^3*s13^2 + 184*s12^2*s13^3)*s23^2 +
                (-86*s12^4 - 181*s12^3*s13 + 1525*s12^2*s13^2 + 1098*s12*
                   s13^3)*s23^3 + (-1462*s12^3 - 347*s12^2*s13 + 1648*s12*
                   s13^2 + 500*s13^3)*s23^4 + (-640*s12^2 + 50*s12*s13 +
                  500*s13^2)*s23^5) + p1q^3*((90*s12^6 + 333*s12^5*s13 +
                  243*s12^4*s13^2)*s23 + (-234*s12^5 - 153*s12^4*s13 -
                  72*s12^3*s13^2)*s23^2 + (-1166*s12^4 - 1099*s12^3*s13 -
                  185*s12^2*s13^2)*s23^3 + (-840*s12^3 - 639*s12^2*s13 -
                  456*s12*s13^2)*s23^4 + (162*s12^2 - 456*s12*s13 -
                  160*s13^2)*s23^5 + (160*s12 - 160*s13)*s23^6)) +
            p3q*(p2q^4*(648*s12^5*s13^2 - 648*s12^3*s13^4 +
                (-180*s12^5*s13 + 1584*s12^4*s13^2 - 1053*s12^3*s13^3 -
                  909*s12^2*s13^4 + 612*s12*s13^5)*s23 + (-180*s12^4*s13 +
                  1296*s12^3*s13^2 - 1971*s12^2*s13^3 + 342*s12*s13^4 +
                  360*s13^5)*s23^2 + (180*s12^2*s13^2 - 630*s12*s13^3 +
                  360*s13^4)*s23^3) + p1q*p2q^3*(648*s12^5*s13^2 +
                324*s12^4*s13^3 - 324*s12^3*s13^4 + (180*s12^5*s13 +
                  2430*s12^4*s13^2 + 792*s12^3*s13^3 - 486*s12^2*s13^4)*s23 +
                (-180*s12^5 - 302*s12^4*s13 + 3982*s12^3*s13^2 + 140*s12^2*
                   s13^3 - 2056*s12*s13^4)*s23^2 + (-180*s12^4 - 442*s12^3*
                   s13 + 3362*s12^2*s13^2 - 2276*s12*s13^3 - 1040*s13^4)*
                 s23^3 + (-140*s12^2*s13 + 820*s12*s13^2 - 1040*s13^3)*
                 s23^4) + p1q^2*p2q^2*((486*s12^6 + 1314*s12^5*s13 +
                  702*s12^4*s13^2 + 549*s12^3*s13^3 + 675*s12^2*s13^4)*s23 +
                (936*s12^5 + 652*s12^4*s13 + 402*s12^3*s13^2 + 2259*s12^2*
                   s13^3 + 430*s12*s13^4)*s23^2 + (76*s12^4 - 2577*s12^3*
                   s13 + 1973*s12^2*s13^2 + 2846*s12*s13^3 + 20*s13^4)*
                 s23^3 + (-694*s12^3 - 2487*s12^2*s13 + 2806*s12*s13^2 +
                  1020*s13^3)*s23^4 + (-320*s12^2 - 590*s12*s13 + 1000*s13^2)*
                 s23^5) + p1q^3*p2q*((-180*s12^5*s13 - 666*s12^4*s13^2 -
                  486*s12^3*s13^3)*s23 + (-198*s12^5 - 1764*s12^4*s13 -
                  2196*s12^3*s13^2 - 324*s12^2*s13^3)*s23^2 +
                (-860*s12^4 - 3282*s12^3*s13 - 1698*s12^2*s13^2 -
                  140*s12*s13^3)*s23^3 + (-374*s12^3 - 2138*s12^2*s13 -
                  1372*s12*s13^2 - 40*s13^3)*s23^4 + (608*s12^2 -
                  1192*s12*s13 - 360*s13^2)*s23^5 + (320*s12 - 320*s13)*
                 s23^6) + p1q^4*((-180*s12^5 - 666*s12^4*s13 - 486*s12^3*
                   s13^2)*s23^2 + (-90*s12^4 - 1107*s12^3*s13 - 711*s12^2*
                   s13^2)*s23^3 + (412*s12^3 - 679*s12^2*s13 - 290*s12*s13^2)*
                 s23^4 + (482*s12^2 - 110*s12*s13 + 20*s13^2)*s23^5 +
                (160*s12 + 20*s13)*s23^6)))*PolyLog(2,
            s13/(s12 + s13 + s23)))/(36*p1q*p3q^4*s12^5*s13*s23^2 +
           36*p1q*p2q^4*s12^3*s13^3*s23^2 + 36*p1q^4*p2q*s12^3*s13*s23^4 +
           p1q^2*p2q^3*(36*s12^3*s13^3*s23^2 - 72*s12^3*s13^2*s23^3) +
           p1q^3*p2q^2*(-72*s12^3*s13^2*s23^3 + 36*s12^3*s13*s23^4) +
           p3q^3*(p1q*p2q*(72*s12^5*s13 - 72*s12^4*s13^2)*s23^2 +
             p1q^2*(36*s12^5*s13*s23^2 - 72*s12^4*s13*s23^3)) +
           p3q^2*(p1q*p2q^2*(36*s12^5*s13 - 144*s12^4*s13^2 + 36*s12^3*s13^3)*
              s23^2 + p1q^2*p2q*((36*s12^5*s13 - 72*s12^4*s13^2)*s23^2 +
               (-144*s12^4*s13 - 72*s12^3*s13^2)*s23^3) +
             p1q^3*(-72*s12^4*s13*s23^3 + 36*s12^3*s13*s23^4)) +
           p3q*(p1q*p2q^3*(-72*s12^4*s13^2 + 72*s12^3*s13^3)*s23^2 +
             36*p1q^4*s12^3*s13*s23^4 + p1q^2*p2q^2*((-72*s12^4*s13^2 +
                 36*s12^3*s13^3)*s23^2 + (-72*s12^4*s13 - 144*s12^3*s13^2)*
                s23^3) + p1q^3*p2q*((-72*s12^4*s13 - 72*s12^3*s13^2)*s23^3 +
               72*s12^3*s13*s23^4))) +
         ((p3q^5*((-180*s12^8 - 360*s12^7*s13 - 27*s12^6*s13^2 -
                153*s12^4*s13^4)*s23 + (-360*s12^7 - 270*s12^6*s13 +
                243*s12^5*s13^2 - 243*s12^4*s13^3 - 90*s12^3*s13^4)*s23^2 +
              (-180*s12^6 + 90*s12^5*s13 - 90*s12^3*s13^3)*s23^3) +
            p2q^5*(-648*s12^4*s13^5 - 648*s12^3*s13^6 + (180*s12^5*s13^3 +
                207*s12^4*s13^4 - 1098*s12^3*s13^5 - 171*s12^2*s13^6 +
                306*s12*s13^7)*s23 + (270*s12^4*s13^3 + 117*s12^3*s13^4 -
                567*s12^2*s13^5 + 396*s12*s13^6 + 180*s13^7)*s23^2 +
              (90*s12^3*s13^3 - 90*s12*s13^5 + 180*s13^6)*s23^3) +
            p1q*p2q^4*(-648*s12^4*s13^5 - 648*s12^3*s13^6 +
              (1125*s12^4*s13^4 - 477*s12^2*s13^6)*s23 + (-200*s12^5*s13^2 -
                184*s12^4*s13^3 + 2377*s12^3*s13^4 - 269*s12^2*s13^5 -
                1028*s12*s13^6)*s23^2 + (-220*s12^4*s13^2 - 164*s12^3*s13^3 +
                1416*s12^2*s13^4 - 1208*s12*s13^5 - 520*s13^6)*s23^3 +
              (-20*s12^3*s13^2 - 160*s12^2*s13^3 + 340*s12*s13^4 - 520*s13^5)*
               s23^4) + p1q^2*p2q^3*((630*s12^5*s13^3 + 2547*s12^4*s13^4 +
                2232*s12^3*s13^5 + 9*s12^2*s13^6 - 306*s12*s13^7)*s23 +
              (-20*s12^5*s13^2 + 338*s12^4*s13^3 + 3367*s12^3*s13^4 +
                2107*s12^2*s13^5 - 416*s12*s13^6 - 180*s13^7)*s23^2 +
              (-140*s12^5*s13 - 293*s12^4*s13^2 - 1930*s12^3*s13^3 +
                1495*s12^2*s13^4 + 1388*s12*s13^5 - 160*s13^6)*s23^3 +
              (-370*s12^4*s13 - 43*s12^3*s13^2 - 1615*s12^2*s13^3 +
                1388*s12*s13^4 + 520*s13^5)*s23^4 + (-230*s12^3*s13 +
                320*s12^2*s13^2 - 410*s12*s13^3 + 500*s13^4)*s23^5) +
            p1q^3*p2q^2*((-153*s12^4*s13^4 + 153*s12^2*s13^6)*s23 +
              (18*s12^5*s13^2 - 1332*s12^4*s13^3 - 1971*s12^3*s13^4 +
                693*s12^2*s13^5 + 1008*s12*s13^6)*s23^2 + (40*s12^5*s13 +
                611*s12^4*s13^2 - 2648*s12^3*s13^3 - 2459*s12^2*s13^4 +
                1408*s12*s13^5 + 540*s13^6)*s23^3 + (160*s12^5 +
                310*s12^4*s13 + 1589*s12^3*s13^2 - 1661*s12^2*s13^3 -
                916*s12*s13^4 + 500*s13^5)*s23^4 + (320*s12^4 + 110*s12^3*
                 s13 + 926*s12^2*s13^2 - 736*s12*s13^3 - 200*s13^4)*s23^5 +
              (160*s12^3 - 160*s12^2*s13 + 160*s12*s13^2 - 160*s13^3)*s23^
                6) + p1q^4*p2q*((306*s12^4*s13^3 - 306*s12^2*s13^5)*s23^2 +
              (180*s12^5*s13 + 855*s12^4*s13^2 + 1134*s12^3*s13^3 -
                1251*s12^2*s13^4 - 1098*s12*s13^5)*s23^3 + (-20*s12^5 +
                230*s12^4*s13 + 1351*s12^3*s13^2 + 829*s12^2*s13^3 -
                1568*s12*s13^4 - 540*s13^5)*s23^4 + (-40*s12^4 -
                110*s12^3*s13 + 606*s12^2*s13^2 + 250*s12*s13^3 - 520*s13^4)*
               s23^5 + (-20*s12^3 - 160*s12^2*s13 + 160*s12*s13^2 + 20*s13^3)*
               s23^6) + p1q^5*((-153*s12^4*s13^2 + 153*s12^2*s13^4)*s23^3 +
              (-180*s12^5 - 450*s12^4*s13 - 423*s12^3*s13^2 + 549*s12^2*
                 s13^3 + 396*s12*s13^4)*s23^4 + (-360*s12^4 - 450*s12^3*s13 +
                576*s12*s13^3 + 180*s13^4)*s23^5 + (-180*s12^3 + 180*s13^3)*
               s23^6) + p3q^4*(p2q*(-648*s12^6*s13^3 - 648*s12^5*s13^4 +
                (-360*s12^8 - 180*s12^7*s13 + 873*s12^6*s13^2 - 1044*s12^5*
                   s13^3 - 477*s12^4*s13^4 + 612*s12^3*s13^5)*s23 +
                (-720*s12^7 + 450*s12^6*s13 + 1143*s12^5*s13^2 - 1539*s12^4*
                   s13^3 + 702*s12^3*s13^4 + 360*s12^2*s13^5)*s23^2 +
                (-360*s12^6 + 630*s12^5*s13 - 180*s12^4*s13^2 - 270*s12^3*
                   s13^3 + 360*s12^2*s13^4)*s23^3) + p1q*((477*s12^6*s13^2 +
                  648*s12^5*s13^3 + 171*s12^4*s13^4)*s23 +
                (520*s12^7 + 950*s12^6*s13 + 1531*s12^5*s13^2 + 685*s12^4*
                   s13^3 - 110*s12^3*s13^4)*s23^2 + (1040*s12^6 + 610*s12^5*
                   s13 + 444*s12^4*s13^2 + 70*s12^3*s13^3 + 20*s12^2*s13^4)*
                 s23^3 + (520*s12^5 - 340*s12^4*s13 + 160*s12^3*s13^2 +
                  20*s12^2*s13^3)*s23^4)) + p3q^3*(p2q^2*(-1296*s12^6*s13^3 +
                1296*s12^4*s13^5 + (-180*s12^8 + 720*s12^7*s13 + 1287*s12^6*
                   s13^2 - 2862*s12^5*s13^3 + 1674*s12^4*s13^4 + 1566*s12^3*
                   s13^5 - 765*s12^2*s13^6)*s23 + (-360*s12^7 + 1710*s12^6*
                   s13 + 657*s12^5*s13^2 - 2853*s12^4*s13^3 + 3051*s12^3*
                   s13^4 - 315*s12^2*s13^5 - 450*s12*s13^6)*s23^2 +
                (-180*s12^6 + 990*s12^5*s13 - 720*s12^4*s13^2 - 180*s12^3*
                   s13^3 + 900*s12^2*s13^4 - 450*s12*s13^5)*s23^3) +
              p1q*p2q*(-648*s12^6*s13^3 - 648*s12^5*s13^4 +
                (954*s12^6*s13^2 + 342*s12^5*s13^3 + 342*s12^4*s13^4 +
                  306*s12^3*s13^5)*s23 + (1040*s12^7 + 1580*s12^6*s13 +
                  2908*s12^5*s13^2 + 342*s12^4*s13^3 - 276*s12^3*s13^4 +
                  526*s12^2*s13^5)*s23^2 + (2080*s12^6 + 760*s12^5*s13 +
                  1054*s12^4*s13^2 - 748*s12^3*s13^3 + 566*s12^2*s13^4 +
                  140*s12*s13^5)*s23^3 + (1040*s12^5 - 820*s12^4*s13 +
                  460*s12^3*s13^2 - 100*s12^2*s13^3 + 140*s12*s13^4)*s23^4) +
              p1q^2*((180*s12^8 + 360*s12^7*s13 + 351*s12^6*s13^2 +
                  648*s12^5*s13^3 + 477*s12^4*s13^4)*s23 +
                (340*s12^7 + 50*s12^6*s13 + 19*s12^5*s13^2 + 667*s12^4*
                   s13^3 + 52*s12^3*s13^4)*s23^2 + (-360*s12^6 - 1290*s12^5*
                   s13 - 1565*s12^4*s13^2 - 472*s12^3*s13^3 + 699*s12^2*
                   s13^4)*s23^3 + (-1020*s12^5 - 570*s12^4*s13 - 1133*s12^3*
                   s13^2 + 609*s12^2*s13^3 + 230*s12*s13^4)*s23^4 +
                (-500*s12^4 + 410*s12^3*s13 - 320*s12^2*s13^2 + 230*s12*
                   s13^3)*s23^5)) + p3q^2*(p2q^3*(-648*s12^6*s13^3 +
                1944*s12^5*s13^4 + 1944*s12^4*s13^5 - 648*s12^3*s13^6 +
                (540*s12^7*s13 - 153*s12^6*s13^2 - 2412*s12^5*s13^3 +
                  4374*s12^4*s13^4 + 198*s12^3*s13^5 - 1701*s12^2*s13^6 +
                  306*s12*s13^7)*s23 + (990*s12^6*s13 - 1143*s12^5*s13^2 -
                  1791*s12^4*s13^3 + 3753*s12^3*s13^4 - 2277*s12^2*s13^5 -
                  504*s12*s13^6 + 180*s13^7)*s23^2 + (450*s12^5*s13 -
                  900*s12^4*s13^2 + 180*s12^3*s13^3 + 720*s12^2*s13^4 -
                  990*s12*s13^5 + 180*s13^6)*s23^3) + p1q*p2q^2*(
                -648*s12^6*s13^3 + 648*s12^5*s13^4 + 1296*s12^4*s13^5 +
                (801*s12^6*s13^2 + 1008*s12^5*s13^3 + 4860*s12^4*s13^4 +
                  2232*s12^3*s13^5 - 477*s12^2*s13^6)*s23 +
                (520*s12^7 + 310*s12^6*s13 + 1671*s12^5*s13^2 + 713*s12^4*
                   s13^3 + 3451*s12^3*s13^4 + 459*s12^2*s13^5 - 1028*s12*
                   s13^6)*s23^2 + (1040*s12^6 - 310*s12^5*s13 + 880*s12^4*
                   s13^2 - 1222*s12^3*s13^3 + 2164*s12^2*s13^4 - 928*s12*
                   s13^5 - 520*s13^6)*s23^3 + (520*s12^5 - 620*s12^4*s13 +
                  420*s12^3*s13^2 - 420*s12^2*s13^3 + 620*s12*s13^4 -
                  520*s13^5)*s23^4) + p1q^2*p2q*((-540*s12^7*s13 -
                  441*s12^6*s13^2 + 2178*s12^5*s13^3 + 2277*s12^4*s13^4 +
                  198*s12^3*s13^5)*s23 + (-20*s12^7 - 1170*s12^6*s13 +
                  225*s12^5*s13^2 + 2303*s12^4*s13^3 - 328*s12^3*s13^4 -
                  14*s12^2*s13^5)*s23^2 + (-1040*s12^6 - 2530*s12^5*s13 -
                  1915*s12^4*s13^2 - 2894*s12^3*s13^3 + 453*s12^2*s13^4 +
                  1098*s12*s13^5)*s23^3 + (-2020*s12^5 - 1310*s12^4*s13 -
                  1481*s12^3*s13^2 - 901*s12^2*s13^3 + 1648*s12*s13^4 +
                  500*s13^5)*s23^4 + (-1000*s12^4 + 590*s12^3*s13 -
                  320*s12^2*s13^2 + 50*s12*s13^3 + 500*s13^4)*s23^5) +
              p1q^3*((-153*s12^6*s13^2 + 153*s12^4*s13^4)*s23 +
                (-540*s12^7 - 1170*s12^6*s13 - 963*s12^5*s13^2 - 261*s12^4*
                   s13^3 - 234*s12^3*s13^4)*s23^2 + (-1040*s12^6 -
                  550*s12^5*s13 - 821*s12^4*s13^2 - 1568*s12^3*s13^3 -
                  113*s12^2*s13^4)*s23^3 + (-300*s12^5 + 1170*s12^4*s13 -
                  545*s12^3*s13^2 - 283*s12^2*s13^3 - 456*s12*s13^4)*s23^4 +
                (360*s12^4 + 390*s12^3*s13 + 286*s12^2*s13^2 - 456*s12*
                   s13^3 - 160*s13^4)*s23^5 + (160*s12^3 - 160*s12^2*s13 +
                  160*s12*s13^2 - 160*s13^3)*s23^6)) +
            p3q*(p2q^4*(1296*s12^5*s13^4 - 1296*s12^3*s13^6 +
                (-540*s12^6*s13^2 - 414*s12^5*s13^3 + 2583*s12^4*s13^4 -
                  1854*s12^3*s13^5 - 1107*s12^2*s13^6 + 612*s12*s13^7)*s23 +
                (-900*s12^5*s13^2 + 36*s12^4*s13^3 + 1611*s12^3*s13^4 -
                  2169*s12^2*s13^5 + 342*s12*s13^6 + 360*s13^7)*s23^2 +
                (-360*s12^4*s13^2 + 270*s12^3*s13^3 + 180*s12^2*s13^4 -
                  630*s12*s13^5 + 360*s13^6)*s23^3) + p1q*p2q^3*(
                1296*s12^5*s13^4 + 648*s12^4*s13^5 - 648*s12^3*s13^6 +
                (666*s12^5*s13^3 + 5814*s12^4*s13^4 + 2574*s12^3*s13^5 -
                  630*s12^2*s13^6)*s23 + (-320*s12^6*s13 - 554*s12^5*s13^2 +
                  224*s12^4*s13^3 + 6642*s12^3*s13^4 + 312*s12^2*s13^5 -
                  2056*s12*s13^6)*s23^2 + (-460*s12^5*s13 - 274*s12^4*s13^2 -
                  568*s12^3*s13^3 + 3358*s12^2*s13^4 - 2276*s12*s13^5 -
                  1040*s13^6)*s23^3 + (-140*s12^4*s13 + 100*s12^3*s13^2 -
                  460*s12^2*s13^3 + 820*s12*s13^4 - 1040*s13^5)*s23^4) +
              p1q^2*p2q^2*((1026*s12^6*s13^2 + 2718*s12^5*s13^3 + 3015*s12^4*
                   s13^4 + 2250*s12^3*s13^5 + 927*s12^2*s13^6)*s23 +
                (40*s12^6*s13 + 1824*s12^5*s13^2 - 6*s12^4*s13^3 +
                  431*s12^3*s13^4 + 2921*s12^2*s13^5 + 430*s12*s13^6)*s23^2 +
                (-500*s12^6 - 1020*s12^5*s13 - 787*s12^4*s13^2 - 6620*s12^3*
                   s13^3 + 781*s12^2*s13^4 + 2846*s12*s13^5 + 20*s13^6)*
                 s23^3 + (-1000*s12^5 - 1110*s12^4*s13 - 715*s12^3*s13^2 -
                  3449*s12^2*s13^3 + 2806*s12*s13^4 + 1020*s13^5)*s23^4 +
                (-500*s12^4 - 50*s12^3*s13 + 320*s12^2*s13^2 - 590*s12*
                   s13^3 + 1000*s13^4)*s23^5) + p1q^3*p2q*((306*s12^5*s13^3 -
                  306*s12^3*s13^5)*s23 + (360*s12^6*s13 + 270*s12^5*s13^2 -
                  918*s12^4*s13^3 - 2088*s12^3*s13^4 - 648*s12^2*s13^5)*
                 s23^2 + (40*s12^6 + 1020*s12^5*s13 + 366*s12^4*s13^2 -
                  3442*s12^3*s13^3 - 2932*s12^2*s13^4 - 140*s12*s13^5)*
                 s23^3 + (400*s12^5 + 1480*s12^4*s13 + 1548*s12^3*s13^2 -
                  2124*s12^2*s13^3 - 1372*s12*s13^4 - 40*s13^5)*s23^4 +
                (680*s12^4 + 500*s12^3*s13 + 1212*s12^2*s13^2 - 1192*s12*
                   s13^3 - 360*s13^4)*s23^5 + (320*s12^3 - 320*s12^2*s13 +
                  320*s12*s13^2 - 320*s13^3)*s23^6) + p1q^4*(
                (306*s12^5*s13^2 - 306*s12^3*s13^4)*s23^2 +
                (540*s12^6 + 1260*s12^5*s13 + 1035*s12^4*s13^2 - 936*s12^3*
                   s13^3 - 639*s12^2*s13^4)*s23^3 + (1060*s12^5 + 950*s12^4*
                   s13 + 325*s12^3*s13^2 - 323*s12^2*s13^3 - 290*s12*s13^4)*
                 s23^4 + (500*s12^4 - 470*s12^3*s13 + 606*s12^2*s13^2 -
                  110*s12*s13^3 + 20*s13^4)*s23^5 + (-20*s12^3 - 160*s12^2*
                   s13 + 160*s12*s13^2 + 20*s13^3)*s23^6)))*
           PolyLog(2, s23/(s12 + s13 + s23)))/(36*p1q*p3q^4*s12^5*s13^3*
            s23^2 + 36*p1q*p2q^4*s12^3*s13^5*s23^2 + 36*p1q^4*p2q*s12^3*s13^3*
            s23^4 + p1q^2*p2q^3*(36*s12^3*s13^5*s23^2 - 72*s12^3*s13^4*
              s23^3) + p1q^3*p2q^2*(-72*s12^3*s13^4*s23^3 +
             36*s12^3*s13^3*s23^4) + p3q^3*(p1q*p2q*(72*s12^5*s13^3 - 72*
                s12^4*s13^4)*s23^2 + p1q^2*(36*s12^5*s13^3*s23^2 - 72*s12^4*
                s13^3*s23^3)) + p3q^2*(p1q*p2q^2*(36*s12^5*s13^3 - 144*s12^4*
                s13^4 + 36*s12^3*s13^5)*s23^2 + p1q^2*p2q*
              ((36*s12^5*s13^3 - 72*s12^4*s13^4)*s23^2 + (-144*s12^4*s13^3 -
                 72*s12^3*s13^4)*s23^3) + p1q^3*(-72*s12^4*s13^3*s23^3 + 36*
                s12^3*s13^3*s23^4)) + p3q*(p1q*p2q^3*(-72*s12^4*s13^4 + 72*
                s12^3*s13^5)*s23^2 + 36*p1q^4*s12^3*s13^3*s23^4 +
             p1q^2*p2q^2*((-72*s12^4*s13^4 + 36*s12^3*s13^5)*s23^2 +
               (-72*s12^4*s13^3 - 144*s12^3*s13^4)*s23^3) +
             p1q^3*p2q*((-72*s12^4*s13^3 - 72*s12^3*s13^4)*s23^3 + 72*s12^3*
                s13^3*s23^4))) + ((p2q^5*(36*s12^2*s13^3 + 36*s12*s13^4 +
              (54*s12*s13^3 + 18*s13^4)*s23 + 18*s13^3*s23^2) +
            p1q*p2q^4*(36*s12^2*s13^3 + 36*s12*s13^4 + (-54*s12^2*s13^2 +
                18*s13^4)*s23 - 72*s12*s13^2*s23^2 - 18*s13^2*s23^3) +
            p1q^2*p2q^3*((-45*s12^3*s13 - 153*s12^2*s13^2 - 117*s12*s13^3 -
                9*s13^4)*s23 + (-63*s12^2*s13 - 171*s12*s13^2 - 54*s13^3)*s23^
                2 + (-18*s12*s13 - 45*s13^2)*s23^3) + p1q^4*p2q*
             ((-9*s12^2 - 9*s12*s13)*s23^3 - 9*s12*s23^4) +
            p1q^3*p2q^2*((9*s12^3 + 72*s12^2*s13 + 72*s12*s13^2 + 9*s13^3)*
               s23^2 + (9*s12^2 + 90*s12*s13 + 36*s13^2)*s23^3 +
              27*s13*s23^4) + p3q^4*(p2q*(36*s12^4*s13 + 36*s12^3*s13^2 +
                (54*s12^3*s13 + 18*s12^2*s13^2)*s23 + 18*s12^2*s13*s23^2) +
              p1q*((-18*s12^4 - 36*s12^3*s13 - 18*s12^2*s13^2)*s23 +
                (-36*s12^3 - 36*s12^2*s13)*s23^2 - 18*s12^2*s23^3)) +
            p3q^3*(p2q^2*(72*s12^4*s13 - 72*s12^2*s13^3 + (108*s12^3*s13 -
                  72*s12^2*s13^2 - 36*s12*s13^3)*s23 + (36*s12^2*s13 -
                  36*s12*s13^2)*s23^2) + p1q*p2q*(36*s12^4*s13 +
                36*s12^3*s13^2 + (-36*s12^4 - 36*s12^3*s13 - 36*s12^2*s13^2)*
                 s23 + (-72*s12^3 - 90*s12^2*s13 - 18*s12*s13^2)*s23^2 +
                (-36*s12^2 - 18*s12*s13)*s23^3) + p1q^2*((-18*s12^4 -
                  36*s12^3*s13 - 18*s12^2*s13^2)*s23 + (-9*s12^3 +
                  9*s12^2*s13 + 18*s12*s13^2)*s23^2 + (27*s12^2 + 36*s12*s13)*
                 s23^3 + 18*s12*s23^4)) + p3q^2*(p2q^3*(36*s12^4*s13 -
                108*s12^3*s13^2 - 108*s12^2*s13^3 + 36*s12*s13^4 +
                (54*s12^3*s13 - 198*s12^2*s13^2 - 18*s12*s13^3 + 18*s13^4)*
                 s23 + (18*s12^2*s13 - 72*s12*s13^2 + 18*s13^3)*s23^2) +
              p1q*p2q^2*(36*s12^4*s13 - 36*s12^3*s13^2 - 72*s12^2*s13^3 +
                (-36*s12^4 - 90*s12^3*s13 - 270*s12^2*s13^2 - 90*s12*s13^3 +
                  18*s13^4)*s23 + (-72*s12^3 - 198*s12^2*s13 - 180*s12*
                   s13^2 + 18*s13^3)*s23^2 + (-36*s12^2 - 72*s12*s13)*
                 s23^3) + p1q^3*((27*s12^3 + 45*s12^2*s13 + 18*s12*s13^2)*
                 s23^2 + (36*s12^2 + 27*s12*s13)*s23^3 + 9*s12*s23^4) +
              p1q^2*p2q*((-27*s12^4 - 117*s12^3*s13 - 135*s12^2*s13^2 -
                  45*s12*s13^3)*s23 + (-36*s12^3 - 117*s12^2*s13 -
                  63*s12*s13^2)*s23^2 + (-9*s12^2 + 18*s13^2)*s23^3 +
                18*s13*s23^4)) + p3q*(p2q^4*(-72*s12^3*s13^2 + 72*s12*s13^4 +
                (-108*s12^2*s13^2 + 72*s12*s13^3 + 36*s13^4)*s23 +
                (-36*s12*s13^2 + 36*s13^3)*s23^2) + p1q*p2q^3*(-72*s12^3*
                 s13^2 - 36*s12^2*s13^3 + 36*s12*s13^4 + (-54*s12^3*s13 -
                  306*s12^2*s13^2 - 126*s12*s13^3 + 18*s13^4)*s23 +
                (-108*s12^2*s13 - 270*s12*s13^2 - 18*s13^3)*s23^2 +
                (-54*s12*s13 - 36*s13^2)*s23^3) + p1q^4*((-9*s12^2 -
                  9*s12*s13)*s23^3 - 9*s12*s23^4) + p1q^2*p2q^2*(
                (-27*s12^4 - 108*s12^3*s13 - 180*s12^2*s13^2 - 108*s12*
                   s13^3 - 9*s13^4)*s23 + (-45*s12^3 - 63*s12^2*s13 -
                  90*s12*s13^2 - 36*s13^3)*s23^2 + (-18*s12^2 + 72*s12*s13 +
                  9*s13^2)*s23^3 + 36*s13*s23^4) + p1q^3*p2q*(
                (18*s12^3 + 81*s12^2*s13 + 72*s12*s13^2 + 9*s13^3)*s23^2 +
                (9*s12^2 + 81*s12*s13 + 36*s13^2)*s23^3 + (-9*s12 + 27*s13)*
                 s23^4)))*PolyLog(2, -((-(p2q*s12) - p3q*s12 - p2q*s13 - p3q*
                s13 + p1q*s23)/((p2q + p3q)*(s12 + s13)))))/
          (2*p1q*p3q^4*s12^3*s13*s23^2 + 2*p1q*p2q^4*s12*s13^3*s23^2 +
           2*p1q^4*p2q*s12*s13*s23^4 + p1q^2*p2q^3*(2*s12*s13^3*s23^2 -
             4*s12*s13^2*s23^3) + p1q^3*p2q^2*(-4*s12*s13^2*s23^3 +
             2*s12*s13*s23^4) + p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*
              s23^2 + p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
           p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*
              s23^2 + p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
               (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) + p1q^3*(-4*s12^2*s13*
                s23^3 + 2*s12*s13*s23^4)) +
           p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
             2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*((-4*s12^2*s13^2 +
                 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*s13^2)*s23^3) +
             p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*s23^3 + 4*s12*s13*
                s23^4))) + ((p2q^5*(-36*s12^2*s13^3 - 36*s12*s13^4 +
              (-54*s12*s13^3 - 18*s13^4)*s23 - 18*s13^3*s23^2) +
            p1q*p2q^4*(-36*s12^2*s13^3 - 36*s12*s13^4 + (54*s12^2*s13^2 -
                18*s13^4)*s23 + 72*s12*s13^2*s23^2 + 18*s13^2*s23^3) +
            p1q^2*p2q^3*((45*s12^3*s13 + 153*s12^2*s13^2 + 117*s12*s13^3 +
                9*s13^4)*s23 + (63*s12^2*s13 + 171*s12*s13^2 + 54*s13^3)*s23^
                2 + (18*s12*s13 + 45*s13^2)*s23^3) + p1q^4*p2q*
             ((9*s12^2 + 9*s12*s13)*s23^3 + 9*s12*s23^4) +
            p1q^3*p2q^2*((-9*s12^3 - 72*s12^2*s13 - 72*s12*s13^2 - 9*s13^3)*
               s23^2 + (-9*s12^2 - 90*s12*s13 - 36*s13^2)*s23^3 -
              27*s13*s23^4) + p3q^4*(p2q*(-36*s12^4*s13 - 36*s12^3*s13^2 +
                (-54*s12^3*s13 - 18*s12^2*s13^2)*s23 - 18*s12^2*s13*s23^2) +
              p1q*((18*s12^4 + 36*s12^3*s13 + 18*s12^2*s13^2)*s23 +
                (36*s12^3 + 36*s12^2*s13)*s23^2 + 18*s12^2*s23^3)) +
            p3q^3*(p2q^2*(-72*s12^4*s13 + 72*s12^2*s13^3 + (-108*s12^3*s13 +
                  72*s12^2*s13^2 + 36*s12*s13^3)*s23 + (-36*s12^2*s13 +
                  36*s12*s13^2)*s23^2) + p1q*p2q*(-36*s12^4*s13 -
                36*s12^3*s13^2 + (36*s12^4 + 36*s12^3*s13 + 36*s12^2*s13^2)*
                 s23 + (72*s12^3 + 90*s12^2*s13 + 18*s12*s13^2)*s23^2 +
                (36*s12^2 + 18*s12*s13)*s23^3) + p1q^2*((18*s12^4 +
                  36*s12^3*s13 + 18*s12^2*s13^2)*s23 + (9*s12^3 -
                  9*s12^2*s13 - 18*s12*s13^2)*s23^2 + (-27*s12^2 -
                  36*s12*s13)*s23^3 - 18*s12*s23^4)) +
            p3q*(p2q^4*(72*s12^3*s13^2 - 72*s12*s13^4 + (108*s12^2*s13^2 -
                  72*s12*s13^3 - 36*s13^4)*s23 + (36*s12*s13^2 - 36*s13^3)*
                 s23^2) + p1q*p2q^3*(72*s12^3*s13^2 + 36*s12^2*s13^3 -
                36*s12*s13^4 + (54*s12^3*s13 + 306*s12^2*s13^2 + 126*s12*
                   s13^3 - 18*s13^4)*s23 + (108*s12^2*s13 + 270*s12*s13^2 +
                  18*s13^3)*s23^2 + (54*s12*s13 + 36*s13^2)*s23^3) +
              p1q^4*((9*s12^2 + 9*s12*s13)*s23^3 + 9*s12*s23^4) +
              p1q^3*p2q*((-18*s12^3 - 81*s12^2*s13 - 72*s12*s13^2 - 9*s13^3)*
                 s23^2 + (-9*s12^2 - 81*s12*s13 - 36*s13^2)*s23^3 +
                (9*s12 - 27*s13)*s23^4) + p1q^2*p2q^2*((27*s12^4 +
                  108*s12^3*s13 + 180*s12^2*s13^2 + 108*s12*s13^3 + 9*s13^4)*
                 s23 + (45*s12^3 + 63*s12^2*s13 + 90*s12*s13^2 + 36*s13^3)*
                 s23^2 + (18*s12^2 - 72*s12*s13 - 9*s13^2)*s23^3 -
                36*s13*s23^4)) + p3q^2*(p2q^3*(-36*s12^4*s13 + 108*s12^3*
                 s13^2 + 108*s12^2*s13^3 - 36*s12*s13^4 + (-54*s12^3*s13 +
                  198*s12^2*s13^2 + 18*s12*s13^3 - 18*s13^4)*s23 +
                (-18*s12^2*s13 + 72*s12*s13^2 - 18*s13^3)*s23^2) +
              p1q*p2q^2*(-36*s12^4*s13 + 36*s12^3*s13^2 + 72*s12^2*s13^3 +
                (36*s12^4 + 90*s12^3*s13 + 270*s12^2*s13^2 + 90*s12*s13^3 -
                  18*s13^4)*s23 + (72*s12^3 + 198*s12^2*s13 + 180*s12*s13^2 -
                  18*s13^3)*s23^2 + (36*s12^2 + 72*s12*s13)*s23^3) +
              p1q^3*((-27*s12^3 - 45*s12^2*s13 - 18*s12*s13^2)*s23^2 +
                (-36*s12^2 - 27*s12*s13)*s23^3 - 9*s12*s23^4) +
              p1q^2*p2q*((27*s12^4 + 117*s12^3*s13 + 135*s12^2*s13^2 +
                  45*s12*s13^3)*s23 + (36*s12^3 + 117*s12^2*s13 +
                  63*s12*s13^2)*s23^2 + (9*s12^2 - 18*s13^2)*s23^3 -
                18*s13*s23^4)))*PolyLog(2, -((-(p2q*s12) - p3q*s12 - p2q*
                s13 - p3q*s13 + p1q*s23)/((p1q + p2q + p3q)*(s12 + s13)))))/
          (2*p1q*p3q^4*s12^3*s13*s23^2 + 2*p1q*p2q^4*s12*s13^3*s23^2 +
           2*p1q^4*p2q*s12*s13*s23^4 + p1q^2*p2q^3*(2*s12*s13^3*s23^2 -
             4*s12*s13^2*s23^3) + p1q^3*p2q^2*(-4*s12*s13^2*s23^3 +
             2*s12*s13*s23^4) + p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*
              s23^2 + p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
           p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*
              s23^2 + p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
               (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) + p1q^3*(-4*s12^2*s13*
                s23^3 + 2*s12*s13*s23^4)) +
           p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
             2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*((-4*s12^2*s13^2 +
                 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*s13^2)*s23^3) +
             p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*s23^3 + 4*s12*s13*
                s23^4))) + ((p2q*p3q^4*(18*s12^4*s13 + 18*s12^3*s13^2 +
              (36*s12^3*s13 + 18*s12^2*s13^2)*s23 + 18*s12^2*s13*s23^2) +
            p2q^5*(18*s12^2*s13^3 + 18*s12*s13^4 + (36*s12*s13^3 + 18*s13^4)*
               s23 + 18*s13^3*s23^2) + p1q*p2q^4*(18*s12^2*s13^3 +
              18*s12*s13^4 + (-18*s12^2*s13^2 + 18*s12*s13^3 + 18*s13^4)*
               s23 + (-38*s12*s13^2 - 2*s13^3)*s23^2 - 20*s13^2*s23^3) +
            p1q^2*p2q^3*((-36*s12^3*s13 - 99*s12^2*s13^2 - 72*s12*s13^3 -
                9*s13^4)*s23 + (-71*s12^2*s13 - 144*s12*s13^2 - 55*s13^3)*s23^
                2 + (-33*s12*s13 - 44*s13^2)*s23^3 + 2*s13*s23^4) +
            p1q^3*p2q^2*((2*s12^3 + 32*s12^2*s13 + 40*s12*s13^2 + 10*s13^3)*
               s23^2 + (5*s12^2 + 63*s12*s13 + 40*s13^2)*s23^3 +
              (3*s12 + 30*s13)*s23^4) + p1q^4*p2q*((-s12^2 - 2*s12*s13 -
                s13^2)*s23^3 + (-3*s12 - 3*s13)*s23^4 - 2*s23^5) +
            p3q^3*(p2q^2*(36*s12^4*s13 - 36*s12^2*s13^3 + (72*s12^3*s13 -
                  36*s12^2*s13^2 - 36*s12*s13^3)*s23 + (36*s12^2*s13 -
                  36*s12*s13^2)*s23^2) + p1q*p2q*(18*s12^4*s13 +
                18*s12^3*s13^2 + (-36*s12^2*s13^2 - 18*s12*s13^3)*s23 +
                (-52*s12^2*s13 - 52*s12*s13^2)*s23^2 - 34*s12*s13*s23^3) +
              p1q^2*((s12^3 + 2*s12^2*s13 + s12*s13^2)*s23^2 +
                (3*s12^2 + 3*s12*s13)*s23^3 + 2*s12*s23^4)) +
            p3q^2*(p2q^3*(18*s12^4*s13 - 54*s12^3*s13^2 - 54*s12^2*s13^3 +
                18*s12*s13^4 + (36*s12^3*s13 - 126*s12^2*s13^2 -
                  36*s12*s13^3 + 18*s13^4)*s23 + (18*s12^2*s13 -
                  72*s12*s13^2 + 18*s13^3)*s23^2) + p1q*p2q^2*(18*s12^4*s13 -
                18*s12^3*s13^2 - 36*s12^2*s13^3 + (-36*s12^3*s13 -
                  162*s12^2*s13^2 - 54*s12*s13^3 + 18*s13^4)*s23 +
                (-122*s12^2*s13 - 142*s12*s13^2 + 16*s13^3)*s23^2 +
                (-68*s12*s13 - 2*s13^2)*s23^3) + p1q^2*p2q*(
                (-45*s12^3*s13 - 72*s12^2*s13^2 - 27*s12*s13^3)*s23 +
                (4*s12^3 - 63*s12^2*s13 - 50*s12*s13^2 - s13^3)*s23^2 +
                (10*s12^2 + 2*s12*s13 + 17*s13^2)*s23^3 + (6*s12 + 18*s13)*
                 s23^4) + p1q^3*((s12^3 + 2*s12^2*s13 + s12*s13^2)*s23^2 +
                (2*s12^2 + s12*s13 - s13^2)*s23^3 + (-s12 - 3*s13)*s23^4 -
                2*s23^5)) + p3q*(p2q^4*(-36*s12^3*s13^2 + 36*s12*s13^4 +
                (-72*s12^2*s13^2 + 36*s12*s13^3 + 36*s13^4)*s23 +
                (-36*s12*s13^2 + 36*s13^3)*s23^2) + p1q*p2q^3*(-36*s12^3*
                 s13^2 - 18*s12^2*s13^3 + 18*s12*s13^4 + (-54*s12^3*s13 -
                  198*s12^2*s13^2 - 72*s12*s13^3 + 18*s13^4)*s23 +
                (-106*s12^2*s13 - 200*s12*s13^2 - 22*s13^3)*s23^2 +
                (-52*s12*s13 - 40*s13^2)*s23^3) + p1q^2*p2q^2*(
                (-45*s12^3*s13 - 99*s12^2*s13^2 - 63*s12*s13^3 - 9*s13^4)*
                 s23 + (3*s12^3 - 46*s12^2*s13 - 87*s12*s13^2 - 38*s13^3)*
                 s23^2 + (7*s12^2 + 38*s12*s13 + 9*s13^2)*s23^3 +
                (4*s12 + 38*s13)*s23^4) + p1q^4*((-s12^2 - 2*s12*s13 - s13^2)*
                 s23^3 + (-3*s12 - 3*s13)*s23^4 - 2*s23^5) +
              p1q^3*p2q*((3*s12^3 + 34*s12^2*s13 + 41*s12*s13^2 + 10*s13^3)*
                 s23^2 + (7*s12^2 + 64*s12*s13 + 39*s13^2)*s23^3 +
                (2*s12 + 27*s13)*s23^4 - 2*s23^5)))*PolyLog(2,
            -((p3q*s12 - p1q*s13 - p2q*s13 - p1q*s23 - p2q*s23)/
              ((p1q + p2q)*(s13 + s23)))))/(2*p1q*p3q^4*s12^3*s13*s23^2 +
           2*p1q*p2q^4*s12*s13^3*s23^2 + 2*p1q^4*p2q*s12*s13*s23^4 +
           p1q^2*p2q^3*(2*s12*s13^3*s23^2 - 4*s12*s13^2*s23^3) +
           p1q^3*p2q^2*(-4*s12*s13^2*s23^3 + 2*s12*s13*s23^4) +
           p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
             p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
           p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*
              s23^2 + p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
               (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) + p1q^3*(-4*s12^2*s13*
                s23^3 + 2*s12*s13*s23^4)) +
           p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
             2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*((-4*s12^2*s13^2 +
                 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*s13^2)*s23^3) +
             p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*s23^3 + 4*s12*s13*
                s23^4))) + ((p2q*p3q^4*(-18*s12^4*s13 - 18*s12^3*s13^2 +
              (-36*s12^3*s13 - 18*s12^2*s13^2)*s23 - 18*s12^2*s13*s23^2) +
            p2q^5*(-18*s12^2*s13^3 - 18*s12*s13^4 + (-36*s12*s13^3 -
                18*s13^4)*s23 - 18*s13^3*s23^2) + p1q*p2q^4*
             (-18*s12^2*s13^3 - 18*s12*s13^4 + (18*s12^2*s13^2 -
                18*s12*s13^3 - 18*s13^4)*s23 + (38*s12*s13^2 + 2*s13^3)*s23^
                2 + 20*s13^2*s23^3) + p1q^3*p2q^2*((-2*s12^3 - 32*s12^2*s13 -
                40*s12*s13^2 - 10*s13^3)*s23^2 + (-5*s12^2 - 63*s12*s13 -
                40*s13^2)*s23^3 + (-3*s12 - 30*s13)*s23^4) +
            p1q^2*p2q^3*((36*s12^3*s13 + 99*s12^2*s13^2 + 72*s12*s13^3 +
                9*s13^4)*s23 + (71*s12^2*s13 + 144*s12*s13^2 + 55*s13^3)*s23^
                2 + (33*s12*s13 + 44*s13^2)*s23^3 - 2*s13*s23^4) +
            p1q^4*p2q*((s12^2 + 2*s12*s13 + s13^2)*s23^3 + (3*s12 + 3*s13)*
               s23^4 + 2*s23^5) + p3q^3*(p2q^2*(-36*s12^4*s13 +
                36*s12^2*s13^3 + (-72*s12^3*s13 + 36*s12^2*s13^2 +
                  36*s12*s13^3)*s23 + (-36*s12^2*s13 + 36*s12*s13^2)*s23^2) +
              p1q*p2q*(-18*s12^4*s13 - 18*s12^3*s13^2 + (36*s12^2*s13^2 +
                  18*s12*s13^3)*s23 + (52*s12^2*s13 + 52*s12*s13^2)*s23^2 +
                34*s12*s13*s23^3) + p1q^2*((-s12^3 - 2*s12^2*s13 - s12*s13^2)*
                 s23^2 + (-3*s12^2 - 3*s12*s13)*s23^3 - 2*s12*s23^4)) +
            p3q^2*(p2q^3*(-18*s12^4*s13 + 54*s12^3*s13^2 + 54*s12^2*s13^3 -
                18*s12*s13^4 + (-36*s12^3*s13 + 126*s12^2*s13^2 +
                  36*s12*s13^3 - 18*s13^4)*s23 + (-18*s12^2*s13 +
                  72*s12*s13^2 - 18*s13^3)*s23^2) + p1q*p2q^2*(-18*s12^4*
                 s13 + 18*s12^3*s13^2 + 36*s12^2*s13^3 + (36*s12^3*s13 +
                  162*s12^2*s13^2 + 54*s12*s13^3 - 18*s13^4)*s23 +
                (122*s12^2*s13 + 142*s12*s13^2 - 16*s13^3)*s23^2 +
                (68*s12*s13 + 2*s13^2)*s23^3) + p1q^2*p2q*((45*s12^3*s13 +
                  72*s12^2*s13^2 + 27*s12*s13^3)*s23 + (-4*s12^3 +
                  63*s12^2*s13 + 50*s12*s13^2 + s13^3)*s23^2 +
                (-10*s12^2 - 2*s12*s13 - 17*s13^2)*s23^3 + (-6*s12 - 18*s13)*
                 s23^4) + p1q^3*((-s12^3 - 2*s12^2*s13 - s12*s13^2)*s23^2 +
                (-2*s12^2 - s12*s13 + s13^2)*s23^3 + (s12 + 3*s13)*s23^4 +
                2*s23^5)) + p3q*(p2q^4*(36*s12^3*s13^2 - 36*s12*s13^4 +
                (72*s12^2*s13^2 - 36*s12*s13^3 - 36*s13^4)*s23 +
                (36*s12*s13^2 - 36*s13^3)*s23^2) + p1q*p2q^3*(36*s12^3*
                 s13^2 + 18*s12^2*s13^3 - 18*s12*s13^4 + (54*s12^3*s13 +
                  198*s12^2*s13^2 + 72*s12*s13^3 - 18*s13^4)*s23 +
                (106*s12^2*s13 + 200*s12*s13^2 + 22*s13^3)*s23^2 +
                (52*s12*s13 + 40*s13^2)*s23^3) + p1q^2*p2q^2*(
                (45*s12^3*s13 + 99*s12^2*s13^2 + 63*s12*s13^3 + 9*s13^4)*
                 s23 + (-3*s12^3 + 46*s12^2*s13 + 87*s12*s13^2 + 38*s13^3)*
                 s23^2 + (-7*s12^2 - 38*s12*s13 - 9*s13^2)*s23^3 +
                (-4*s12 - 38*s13)*s23^4) + p1q^3*p2q*((-3*s12^3 -
                  34*s12^2*s13 - 41*s12*s13^2 - 10*s13^3)*s23^2 +
                (-7*s12^2 - 64*s12*s13 - 39*s13^2)*s23^3 + (-2*s12 - 27*s13)*
                 s23^4 + 2*s23^5) + p1q^4*((s12^2 + 2*s12*s13 + s13^2)*
                 s23^3 + (3*s12 + 3*s13)*s23^4 + 2*s23^5)))*
           PolyLog(2, -((p3q*s12 - p1q*s13 - p2q*s13 - p1q*s23 - p2q*s23)/
              ((p1q + p2q + p3q)*(s13 + s23)))))/
          (2*p1q*p3q^4*s12^3*s13*s23^2 + 2*p1q*p2q^4*s12*s13^3*s23^2 +
           2*p1q^4*p2q*s12*s13*s23^4 + p1q^2*p2q^3*(2*s12*s13^3*s23^2 -
             4*s12*s13^2*s23^3) + p1q^3*p2q^2*(-4*s12*s13^2*s23^3 +
             2*s12*s13*s23^4) + p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*
              s23^2 + p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
           p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*
              s23^2 + p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
               (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) + p1q^3*(-4*s12^2*s13*
                s23^3 + 2*s12*s13*s23^4)) +
           p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
             2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*((-4*s12^2*s13^2 +
                 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*s13^2)*s23^3) +
             p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*s23^3 + 4*s12*s13*
                s23^4))) + ((p2q^5*(18*s12^2*s13^3 + 18*s12*s13^4 +
              18*s12*s13^3*s23) + p1q*p2q^4*(18*s12^2*s13^3 + 18*s12*s13^4 +
              (-36*s12^2*s13^2 - 18*s12*s13^3)*s23 + (-38*s12*s13^2 -
                2*s13^3)*s23^2 - 2*s13^2*s23^3) + p1q^2*p2q^3*
             ((-9*s12^3*s13 - 54*s12^2*s13^2 - 45*s12*s13^3)*s23 +
              (10*s12^2*s13 - 27*s12*s13^2 - s13^3)*s23^2 + (21*s12*s13 +
                s13^2)*s23^3 + 2*s13*s23^4) + p1q^3*p2q^2*
             ((11*s12^3 + 50*s12^2*s13 + 40*s12*s13^2 + s13^3)*s23^2 +
              (14*s12^2 + 45*s12*s13 + 4*s13^2)*s23^3 + (3*s12 + 3*s13)*s23^
                4) + p1q^4*p2q*((-10*s12^2 - 11*s12*s13 - s13^2)*s23^3 +
              (-12*s12 - 3*s13)*s23^4 - 2*s23^5) +
            p3q^4*(p2q*(18*s12^4*s13 + 18*s12^3*s13^2 + 18*s12^3*s13*s23) +
              p1q*((-18*s12^4 - 36*s12^3*s13 - 18*s12^2*s13^2)*s23 +
                (-36*s12^3 - 36*s12^2*s13)*s23^2 - 18*s12^2*s23^3)) +
            p3q^3*(p2q^2*(36*s12^4*s13 - 36*s12^2*s13^3 + (36*s12^3*s13 -
                  36*s12^2*s13^2)*s23) + p1q*p2q*(18*s12^4*s13 +
                18*s12^3*s13^2 + (-36*s12^4 - 36*s12^3*s13 + 18*s12*s13^3)*
                 s23 + (-72*s12^3 - 34*s12^2*s13 + 38*s12*s13^2)*s23^2 +
                (-36*s12^2 + 20*s12*s13)*s23^3) + p1q^2*((-18*s12^4 -
                  36*s12^3*s13 - 18*s12^2*s13^2)*s23 + (-8*s12^3 +
                  11*s12^2*s13 + 19*s12*s13^2)*s23^2 + (30*s12^2 +
                  39*s12*s13)*s23^3 + 20*s12*s23^4)) +
            p3q*(p2q^4*(-36*s12^3*s13^2 + 36*s12*s13^4 + (-36*s12^2*s13^2 +
                  36*s12*s13^3)*s23) + p1q*p2q^3*(-36*s12^3*s13^2 -
                18*s12^2*s13^3 + 18*s12*s13^4 + (-108*s12^2*s13^2 -
                  54*s12*s13^3)*s23 + (2*s12^2*s13 - 74*s12*s13^2 - 4*s13^3)*
                 s23^2 + (2*s12*s13 - 4*s13^2)*s23^3) + p1q^2*p2q^2*(
                (-27*s12^4 - 63*s12^3*s13 - 81*s12^2*s13^2 - 45*s12*s13^3)*
                 s23 + (-42*s12^3 - s12^2*s13 + 3*s12*s13^2 - 2*s13^3)*
                 s23^2 + (-11*s12^2 + 56*s12*s13)*s23^3 + (4*s12 + 2*s13)*
                 s23^4) + p1q^3*p2q*((21*s12^3 + 61*s12^2*s13 + 41*s12*
                   s13^2 + s13^3)*s23^2 + (16*s12^2 + 37*s12*s13 + 3*s13^2)*
                 s23^3 - 7*s12*s23^4 - 2*s23^5) + p1q^4*((-10*s12^2 -
                  11*s12*s13 - s13^2)*s23^3 + (-12*s12 - 3*s13)*s23^4 -
                2*s23^5)) + p3q^2*(p2q^3*(18*s12^4*s13 - 54*s12^3*s13^2 -
                54*s12^2*s13^3 + 18*s12*s13^4 + (18*s12^3*s13 - 72*s12^2*
                   s13^2 + 18*s12*s13^3)*s23) + p1q*p2q^2*(18*s12^4*s13 -
                18*s12^3*s13^2 - 36*s12^2*s13^3 + (-36*s12^4 - 54*s12^3*s13 -
                  108*s12^2*s13^2 - 36*s12*s13^3)*s23 + (-72*s12^3 -
                  68*s12^2*s13 - 34*s12*s13^2 - 2*s13^3)*s23^2 +
                (-36*s12^2 + 4*s12*s13 - 2*s13^2)*s23^3) + p1q^2*p2q*(
                (-27*s12^4 - 72*s12^3*s13 - 63*s12^2*s13^2 - 18*s12*s13^3)*
                 s23 + (-32*s12^3 - 36*s12^2*s13 - 5*s12*s13^2 - s13^3)*
                 s23^2 + (s12^2 + 20*s12*s13 - s13^2)*s23^3 + 6*s12*s23^4) +
              p1q^3*((28*s12^3 + 47*s12^2*s13 + 19*s12*s13^2)*s23^2 +
                (38*s12^2 + 28*s12*s13 - s13^2)*s23^3 + (8*s12 - 3*s13)*
                 s23^4 - 2*s23^5)))*PolyLog(2, -((-(p1q*s12) - p3q*s12 + p2q*
                s13 - p1q*s23 - p3q*s23)/((p1q + p3q)*(s12 + s23)))))/
          (2*p1q*p3q^4*s12^3*s13*s23^2 + 2*p1q*p2q^4*s12*s13^3*s23^2 +
           2*p1q^4*p2q*s12*s13*s23^4 + p1q^2*p2q^3*(2*s12*s13^3*s23^2 -
             4*s12*s13^2*s23^3) + p1q^3*p2q^2*(-4*s12*s13^2*s23^3 +
             2*s12*s13*s23^4) + p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*
              s23^2 + p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
           p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*
              s23^2 + p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
               (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) + p1q^3*(-4*s12^2*s13*
                s23^3 + 2*s12*s13*s23^4)) +
           p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
             2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*((-4*s12^2*s13^2 +
                 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*s13^2)*s23^3) +
             p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*s23^3 + 4*s12*s13*
                s23^4))) + ((p2q^5*(-18*s12^2*s13^3 - 18*s12*s13^4 -
              18*s12*s13^3*s23) + p1q*p2q^4*(-18*s12^2*s13^3 - 18*s12*s13^4 +
              (36*s12^2*s13^2 + 18*s12*s13^3)*s23 + (38*s12*s13^2 + 2*s13^3)*
               s23^2 + 2*s13^2*s23^3) + p1q^3*p2q^2*
             ((-11*s12^3 - 50*s12^2*s13 - 40*s12*s13^2 - s13^3)*s23^2 +
              (-14*s12^2 - 45*s12*s13 - 4*s13^2)*s23^3 + (-3*s12 - 3*s13)*s23^
                4) + p1q^2*p2q^3*((9*s12^3*s13 + 54*s12^2*s13^2 +
                45*s12*s13^3)*s23 + (-10*s12^2*s13 + 27*s12*s13^2 + s13^3)*
               s23^2 + (-21*s12*s13 - s13^2)*s23^3 - 2*s13*s23^4) +
            p1q^4*p2q*((10*s12^2 + 11*s12*s13 + s13^2)*s23^3 +
              (12*s12 + 3*s13)*s23^4 + 2*s23^5) +
            p3q^4*(p2q*(-18*s12^4*s13 - 18*s12^3*s13^2 - 18*s12^3*s13*s23) +
              p1q*((18*s12^4 + 36*s12^3*s13 + 18*s12^2*s13^2)*s23 +
                (36*s12^3 + 36*s12^2*s13)*s23^2 + 18*s12^2*s23^3)) +
            p3q^3*(p2q^2*(-36*s12^4*s13 + 36*s12^2*s13^3 + (-36*s12^3*s13 +
                  36*s12^2*s13^2)*s23) + p1q*p2q*(-18*s12^4*s13 -
                18*s12^3*s13^2 + (36*s12^4 + 36*s12^3*s13 - 18*s12*s13^3)*
                 s23 + (72*s12^3 + 34*s12^2*s13 - 38*s12*s13^2)*s23^2 +
                (36*s12^2 - 20*s12*s13)*s23^3) + p1q^2*((18*s12^4 +
                  36*s12^3*s13 + 18*s12^2*s13^2)*s23 + (8*s12^3 -
                  11*s12^2*s13 - 19*s12*s13^2)*s23^2 + (-30*s12^2 -
                  39*s12*s13)*s23^3 - 20*s12*s23^4)) +
            p3q^2*(p2q^3*(-18*s12^4*s13 + 54*s12^3*s13^2 + 54*s12^2*s13^3 -
                18*s12*s13^4 + (-18*s12^3*s13 + 72*s12^2*s13^2 -
                  18*s12*s13^3)*s23) + p1q*p2q^2*(-18*s12^4*s13 +
                18*s12^3*s13^2 + 36*s12^2*s13^3 + (36*s12^4 + 54*s12^3*s13 +
                  108*s12^2*s13^2 + 36*s12*s13^3)*s23 + (72*s12^3 +
                  68*s12^2*s13 + 34*s12*s13^2 + 2*s13^3)*s23^2 +
                (36*s12^2 - 4*s12*s13 + 2*s13^2)*s23^3) + p1q^2*p2q*(
                (27*s12^4 + 72*s12^3*s13 + 63*s12^2*s13^2 + 18*s12*s13^3)*
                 s23 + (32*s12^3 + 36*s12^2*s13 + 5*s12*s13^2 + s13^3)*
                 s23^2 + (-s12^2 - 20*s12*s13 + s13^2)*s23^3 - 6*s12*s23^4) +
              p1q^3*((-28*s12^3 - 47*s12^2*s13 - 19*s12*s13^2)*s23^2 +
                (-38*s12^2 - 28*s12*s13 + s13^2)*s23^3 + (-8*s12 + 3*s13)*
                 s23^4 + 2*s23^5)) + p3q*(p2q^4*(36*s12^3*s13^2 -
                36*s12*s13^4 + (36*s12^2*s13^2 - 36*s12*s13^3)*s23) +
              p1q*p2q^3*(36*s12^3*s13^2 + 18*s12^2*s13^3 - 18*s12*s13^4 +
                (108*s12^2*s13^2 + 54*s12*s13^3)*s23 + (-2*s12^2*s13 +
                  74*s12*s13^2 + 4*s13^3)*s23^2 + (-2*s12*s13 + 4*s13^2)*
                 s23^3) + p1q^2*p2q^2*((27*s12^4 + 63*s12^3*s13 +
                  81*s12^2*s13^2 + 45*s12*s13^3)*s23 + (42*s12^3 +
                  s12^2*s13 - 3*s12*s13^2 + 2*s13^3)*s23^2 +
                (11*s12^2 - 56*s12*s13)*s23^3 + (-4*s12 - 2*s13)*s23^4) +
              p1q^3*p2q*((-21*s12^3 - 61*s12^2*s13 - 41*s12*s13^2 - s13^3)*
                 s23^2 + (-16*s12^2 - 37*s12*s13 - 3*s13^2)*s23^3 +
                7*s12*s23^4 + 2*s23^5) + p1q^4*((10*s12^2 + 11*s12*s13 +
                  s13^2)*s23^3 + (12*s12 + 3*s13)*s23^4 + 2*s23^5)))*
           PolyLog(2, -((-(p1q*s12) - p3q*s12 + p2q*s13 - p1q*s23 - p3q*s23)/
              ((p1q + p2q + p3q)*(s12 + s23)))))/
          (2*p1q*p3q^4*s12^3*s13*s23^2 + 2*p1q*p2q^4*s12*s13^3*s23^2 +
           2*p1q^4*p2q*s12*s13*s23^4 + p1q^2*p2q^3*(2*s12*s13^3*s23^2 -
             4*s12*s13^2*s23^3) + p1q^3*p2q^2*(-4*s12*s13^2*s23^3 +
             2*s12*s13*s23^4) + p3q^3*(p1q*p2q*(4*s12^3*s13 - 4*s12^2*s13^2)*
              s23^2 + p1q^2*(2*s12^3*s13*s23^2 - 4*s12^2*s13*s23^3)) +
           p3q^2*(p1q*p2q^2*(2*s12^3*s13 - 8*s12^2*s13^2 + 2*s12*s13^3)*
              s23^2 + p1q^2*p2q*((2*s12^3*s13 - 4*s12^2*s13^2)*s23^2 +
               (-8*s12^2*s13 - 4*s12*s13^2)*s23^3) + p1q^3*(-4*s12^2*s13*
                s23^3 + 2*s12*s13*s23^4)) +
           p3q*(p1q*p2q^3*(-4*s12^2*s13^2 + 4*s12*s13^3)*s23^2 +
             2*p1q^4*s12*s13*s23^4 + p1q^2*p2q^2*((-4*s12^2*s13^2 +
                 2*s12*s13^3)*s23^2 + (-4*s12^2*s13 - 8*s12*s13^2)*s23^3) +
             p1q^3*p2q*((-4*s12^2*s13 - 4*s12*s13^2)*s23^3 + 4*s12*s13*
                s23^4))))));

l P1AvgExp = ((p3q^5*((-18*s12^3 - 72*s12^2*s13 - 54*s12*s13^2)*s23 +
         (-54*s12^2 - 90*s12*s13)*s23^2 - 36*s12*s23^3) +
       p1q^4*p2q*((-72*s12^2*s13 - 72*s12*s13^2)*s23 +
         (-18*s12^2 - 108*s12*s13 - 18*s13^2)*s23^2 + (-18*s12 - 18*s13)*
          s23^3) + p2q^5*((-54*s12^2*s13 - 72*s12*s13^2 - 18*s13^3)*s23 +
         (-90*s12*s13 - 54*s13^2)*s23^2 - 36*s13*s23^3) +
       p1q^2*p2q^3*(144*s12*s13^3 + (-216*s12^2*s13 - 36*s12*s13^2 +
           36*s13^3)*s23 + (-184*s12*s13 - 68*s13^2)*s23^2 +
         (36*s12 - 68*s13)*s23^3 + 4*s23^4) +
       p1q*p2q^4*(72*s12*s13^3 + (-144*s12^2*s13 - 36*s12*s13^2 + 36*s13^3)*
          s23 + (2*s12^2 - 140*s12*s13 - 30*s13^2)*s23^2 +
         (22*s12 - 46*s13)*s23^3 + 4*s23^4) + p1q^3*p2q^2*
        (72*s12*s13^3 + (-162*s12^2*s13 - 72*s12*s13^2 + 18*s13^3)*s23 +
         (-16*s12^2 - 162*s12*s13 - 34*s13^2)*s23^2 + (4*s12 - 32*s13)*
          s23^3 + 4*s23^4) +
       p3q^4*(p2q*((-36*s12^3 - 198*s12^2*s13 - 180*s12*s13^2 - 18*s13^3)*
            s23 + (-108*s12^2 - 270*s12*s13 - 54*s13^2)*s23^2 +
           (-72*s12 - 36*s13)*s23^3) + p1q*(72*s12^3*s13 +
           (36*s12^3 - 36*s12^2*s13 - 144*s12*s13^2)*s23 +
           (-30*s12^2 - 140*s12*s13 + 2*s13^2)*s23^2 + (-46*s12 + 22*s13)*
            s23^3 + 4*s23^4)) +
       p3q^3*(p2q^2*((-36*s12^3 - 252*s12^2*s13 - 252*s12*s13^2 - 36*s13^3)*
            s23 + (-108*s12^2 - 360*s12*s13 - 108*s13^2)*s23^2 +
           (-72*s12 - 72*s13)*s23^3) + p1q^2*(144*s12^3*s13 +
           (36*s12^3 - 36*s12^2*s13 - 216*s12*s13^2)*s23 +
           (-68*s12^2 - 184*s12*s13)*s23^2 + (-68*s12 + 36*s13)*s23^3 +
           4*s23^4) + p1q*p2q*(144*s12^3*s13 - 144*s12^2*s13^2 +
           (36*s12^3 - 216*s12^2*s13 - 396*s12*s13^2)*s23 +
           (-132*s12^2 - 324*s12*s13 - 32*s13^2)*s23^2 + (-96*s12 + 40*s13)*
            s23^3 + 8*s23^4)) +
       p3q*(p2q^4*((-18*s12^3 - 180*s12^2*s13 - 198*s12*s13^2 - 36*s13^3)*
            s23 + (-54*s12^2 - 270*s12*s13 - 108*s13^2)*s23^2 +
           (-36*s12 - 72*s13)*s23^3) + p1q^4*((-72*s12^2*s13 - 72*s12*s13^2)*
            s23 + (-18*s12^2 - 108*s12*s13 - 18*s13^2)*s23^2 +
           (-18*s12 - 18*s13)*s23^3) + p1q*p2q^3*(-144*s12^2*s13^2 +
           144*s12*s13^3 + (-396*s12^2*s13 - 216*s12*s13^2 + 36*s13^3)*s23 +
           (-32*s12^2 - 324*s12*s13 - 132*s13^2)*s23^2 + (40*s12 - 96*s13)*
            s23^3 + 8*s23^4) + p1q^3*p2q*(-144*s12^2*s13^2 +
           (18*s12^3 - 378*s12^2*s13 - 378*s12*s13^2 + 18*s13^3)*s23 +
           (-50*s12^2 - 396*s12*s13 - 50*s13^2)*s23^2 + (-28*s12 - 28*s13)*
            s23^3 + 8*s23^4) + p1q^2*p2q^2*(-288*s12^2*s13^2 +
           144*s12*s13^3 + (-576*s12^2*s13 - 396*s12*s13^2 + 36*s13^3)*s23 +
           (-68*s12^2 - 408*s12*s13 - 136*s13^2)*s23^2 + (40*s12 - 64*s13)*
            s23^3 + 12*s23^4)) +
       p3q^2*(p2q^3*((-36*s12^3 - 252*s12^2*s13 - 252*s12*s13^2 - 36*s13^3)*
            s23 + (-108*s12^2 - 360*s12*s13 - 108*s13^2)*s23^2 +
           (-72*s12 - 72*s13)*s23^3) + p1q^3*(72*s12^3*s13 +
           (18*s12^3 - 72*s12^2*s13 - 162*s12*s13^2)*s23 +
           (-34*s12^2 - 162*s12*s13 - 16*s13^2)*s23^2 + (-32*s12 + 4*s13)*
            s23^3 + 4*s23^4) + p1q*p2q^2*(72*s12^3*s13 - 288*s12^2*s13^2 +
           72*s12*s13^3 + (-432*s12^2*s13 - 432*s12*s13^2)*s23 +
           (-136*s12^2 - 368*s12*s13 - 136*s13^2)*s23^2 + (-32*s12 - 32*s13)*
            s23^3 + 8*s23^4) + p1q^2*p2q*(144*s12^3*s13 - 288*s12^2*s13^2 +
           (36*s12^3 - 396*s12^2*s13 - 576*s12*s13^2)*s23 +
           (-136*s12^2 - 408*s12*s13 - 68*s13^2)*s23^2 + (-64*s12 + 40*s13)*
            s23^3 + 12*s23^4)))/(ep^2*(9*p1q^3*p2q^2*s12*s13*s23^2 +
        18*p1q^2*p2q^3*s12*s13*s23^2 + 9*p1q*p2q^4*s12*s13*s23^2 +
        9*p1q*p3q^4*s12*s13*s23^2 + p3q^3*(18*p1q^2*s12*s13*s23^2 +
          36*p1q*p2q*s12*s13*s23^2) + p3q^2*(9*p1q^3*s12*s13*s23^2 +
          54*p1q^2*p2q*s12*s13*s23^2 + 54*p1q*p2q^2*s12*s13*s23^2) +
        p3q*(18*p1q^3*p2q*s12*s13*s23^2 + 54*p1q^2*p2q^2*s12*s13*s23^2 +
          36*p1q*p2q^3*s12*s13*s23^2))) +
     (Pi^2*(p3q^5*((-90*s12^7 - 180*s12^6*s13 - 576*s12^5*s13^2 -
            1620*s12^4*s13^3 - 1134*s12^3*s13^4)*s23 +
          (-270*s12^6 - 207*s12^5*s13 - 1233*s12^4*s13^2 - 1944*s12^3*s13^3)*
           s23^2 + (-180*s12^5 + 63*s12^4*s13 - 810*s12^3*s13^2)*s23^3) +
        p2q^5*((-972*s12^4*s13^3 - 1296*s12^3*s13^4 - 414*s12^2*s13^5 -
            180*s12*s13^6 - 90*s13^7)*s23 + (-1620*s12^3*s13^3 -
            909*s12^2*s13^4 - 207*s12*s13^5 - 270*s13^6)*s23^2 +
          (-648*s12^2*s13^3 + 63*s12*s13^4 - 180*s13^5)*s23^3) +
        p1q*p2q^4*(1296*s12^3*s13^5 + (-2682*s12^4*s13^3 - 585*s12^3*s13^4 +
            648*s12^2*s13^5 - 63*s12*s13^6 + 90*s13^7)*s23 +
          (311*s12^4*s13^2 - 1853*s12^3*s13^3 + 764*s12^2*s13^4 +
            500*s12*s13^5 + 340*s13^6)*s23^2 + (1056*s12^3*s13^2 +
            159*s12^2*s13^3 + 777*s12*s13^4 + 770*s13^5)*s23^3 +
          (577*s12^2*s13^2 - 146*s12*s13^3 + 520*s13^4)*s23^4) +
        p1q^2*p2q^3*(2592*s12^3*s13^5 + (-4131*s12^4*s13^3 -
            585*s12^3*s13^4 + 711*s12^2*s13^5 - 243*s12*s13^6)*s23 +
          (-3920*s12^3*s13^3 - 445*s12^2*s13^4 - 207*s12*s13^5 - 270*s13^6)*
           s23^2 + (-243*s12^4*s13 - 124*s12^3*s13^2 - 2142*s12^2*s13^3 -
            480*s12*s13^4 - 500*s13^5)*s23^3 +
          (-646*s12^3*s13 - 537*s12^2*s13^2 - 973*s12*s13^3 - 730*s13^4)*
           s23^4 + (-403*s12^2*s13 + 83*s12*s13^2 - 500*s13^3)*s23^5) +
        p1q^4*p2q*((-1296*s12^4*s13^3 - 1296*s12^3*s13^4)*s23 +
          (-477*s12^4*s13^2 - 2250*s12^3*s13^3 - 477*s12^2*s13^4)*s23^2 +
          (-243*s12^4*s13 - 720*s12^3*s13^2 - 720*s12^2*s13^3 -
            243*s12*s13^4)*s23^3 + (-90*s12^4 - 333*s12^3*s13 -
            333*s12*s13^3 - 90*s13^4)*s23^4 + (-90*s12^3 - 90*s13^3)*s23^5) +
        p1q^3*p2q^2*(1296*s12^3*s13^5 + (-3069*s12^4*s13^3 -
            1296*s12^3*s13^4 + 477*s12^2*s13^5)*s23 +
          (-128*s12^4*s13^2 - 3321*s12^3*s13^3 - 119*s12^2*s13^4 +
            486*s12*s13^5)*s23^2 + (392*s12^3*s13^2 - 715*s12^2*s13^3 +
            603*s12*s13^4 + 270*s13^5)*s23^3 + (70*s12^4 + 313*s12^3*s13 +
            838*s12^2*s13^2 + 160*s12*s13^3 + 340*s13^4)*s23^4 +
          (230*s12^3 + 403*s12^2*s13 + 403*s12*s13^2 + 230*s13^3)*s23^5 +
          (160*s12^2 + 160*s13^2)*s23^6) +
        p3q^4*(p2q*((-180*s12^7 - 333*s12^6*s13 - 1098*s12^5*s13^2 -
              4122*s12^4*s13^3 - 3438*s12^3*s13^4 - 261*s12^2*s13^5)*s23 +
            (-540*s12^6 - 270*s12^5*s13 - 2385*s12^4*s13^2 - 5445*s12^3*s13^
                3 - 846*s12^2*s13^4)*s23^2 + (-360*s12^5 + 243*s12^4*s13 -
              1683*s12^3*s13^2 - 585*s12^2*s13^3)*s23^3) +
          p1q*(1296*s12^5*s13^3 + (90*s12^7 - 63*s12^6*s13 + 648*s12^5*s13^
                2 - 585*s12^4*s13^3 - 2682*s12^3*s13^4)*s23 +
            (340*s12^6 + 500*s12^5*s13 + 764*s12^4*s13^2 - 1853*s12^3*s13^3 +
              311*s12^2*s13^4)*s23^2 + (770*s12^5 + 777*s12^4*s13 +
              159*s12^3*s13^2 + 1056*s12^2*s13^3)*s23^3 +
            (520*s12^4 - 146*s12^3*s13 + 577*s12^2*s13^2)*s23^4)) +
        p3q^3*(p2q^2*((-90*s12^7 - 126*s12^6*s13 - 891*s12^5*s13^2 -
              4878*s12^4*s13^3 - 4518*s12^3*s13^4 - 468*s12^2*s13^5 +
              27*s12*s13^6)*s23 + (-270*s12^6 + 81*s12^5*s13 -
              2241*s12^4*s13^2 - 6939*s12^3*s13^3 - 1611*s12^2*s13^4 +
              144*s12*s13^5)*s23^2 + (-180*s12^5 + 297*s12^4*s13 -
              1683*s12^3*s13^2 - 1233*s12^2*s13^3 + 117*s12*s13^4)*s23^3) +
          p1q*p2q*(2592*s12^5*s13^3 - 2592*s12^4*s13^4 +
            (90*s12^7 - 333*s12^6*s13 + 837*s12^5*s13^2 - 3825*s12^4*s13^3 -
              7407*s12^3*s13^4 + 270*s12^2*s13^5)*s23 +
            (590*s12^6 + 1139*s12^5*s13 + 1050*s12^4*s13^2 - 4887*s12^3*s13^
                3 + 756*s12^2*s13^4 + 256*s12*s13^5)*s23^2 +
            (1540*s12^5 + 2136*s12^4*s13 + 422*s12^3*s13^2 + 2216*s12^2*s13^
                3 + 582*s12*s13^4)*s23^3 + (1040*s12^4 + 34*s12^3*s13 +
              988*s12^2*s13^2 + 326*s12*s13^3)*s23^4) +
          p1q^2*(2592*s12^5*s13^3 + (-243*s12^6*s13 + 711*s12^5*s13^2 -
              585*s12^4*s13^3 - 4131*s12^3*s13^4)*s23 +
            (-270*s12^6 - 207*s12^5*s13 - 445*s12^4*s13^2 - 3920*s12^3*s13^3)*
             s23^2 + (-500*s12^5 - 480*s12^4*s13 - 2142*s12^3*s13^2 -
              124*s12^2*s13^3 - 243*s12*s13^4)*s23^3 +
            (-730*s12^4 - 973*s12^3*s13 - 537*s12^2*s13^2 - 646*s12*s13^3)*
             s23^4 + (-500*s12^3 + 83*s12^2*s13 - 403*s12*s13^2)*s23^5)) +
        p3q^2*(p2q^3*((27*s12^6*s13 - 792*s12^5*s13^2 - 4842*s12^4*s13^3 -
              4554*s12^3*s13^4 - 567*s12^2*s13^5 - 126*s12*s13^6 - 90*s13^7)*
             s23 + (144*s12^5*s13 - 2259*s12^4*s13^2 - 6939*s12^3*s13^3 -
              1593*s12^2*s13^4 + 81*s12*s13^5 - 270*s13^6)*s23^2 +
            (117*s12^4*s13 - 1557*s12^3*s13^2 - 1359*s12^2*s13^3 +
              297*s12*s13^4 - 180*s13^5)*s23^3) + p1q*p2q^2*
           (1296*s12^5*s13^3 - 5184*s12^4*s13^4 + 1296*s12^3*s13^5 +
            (-270*s12^6*s13 + 459*s12^5*s13^2 - 7965*s12^4*s13^3 -
              7965*s12^3*s13^4 + 459*s12^2*s13^5 - 270*s12*s13^6)*s23 +
            (250*s12^6 + 895*s12^5*s13 + 731*s12^4*s13^2 - 6068*s12^3*s13^3 +
              731*s12^2*s13^4 + 895*s12*s13^5 + 250*s13^6)*s23^2 +
            (770*s12^5 + 1941*s12^4*s13 + 1423*s12^3*s13^2 + 1423*s12^2*s13^
                3 + 1941*s12*s13^4 + 770*s13^5)*s23^3 +
            (520*s12^4 + 506*s12^3*s13 + 822*s12^2*s13^2 + 506*s12*s13^3 +
              520*s13^4)*s23^4) + p1q^2*p2q*(2592*s12^5*s13^3 -
            5184*s12^4*s13^4 + (-243*s12^6*s13 + 1197*s12^5*s13^2 -
              7191*s12^4*s13^3 - 10737*s12^3*s13^4 + 486*s12^2*s13^5)*s23 +
            (-270*s12^6 + 63*s12^5*s13 - 746*s12^4*s13^2 - 9294*s12^3*s13^3 -
              301*s12^2*s13^4 + 270*s12*s13^5)*s23^2 +
            (-730*s12^5 - 1239*s12^4*s13 - 3760*s12^3*s13^2 -
              1742*s12^2*s13^3 - 1002*s12*s13^4 - 230*s13^5)*s23^3 +
            (-1460*s12^4 - 2592*s12^3*s13 - 1611*s12^2*s13^2 -
              2265*s12*s13^3 - 730*s13^4)*s23^4 +
            (-1000*s12^3 - 237*s12^2*s13 - 723*s12*s13^2 - 500*s13^3)*
             s23^5) + p1q^3*(1296*s12^5*s13^3 + (477*s12^5*s13^2 -
              1296*s12^4*s13^3 - 3069*s12^3*s13^4)*s23 +
            (486*s12^5*s13 - 119*s12^4*s13^2 - 3321*s12^3*s13^3 -
              128*s12^2*s13^4)*s23^2 + (270*s12^5 + 603*s12^4*s13 -
              715*s12^3*s13^2 + 392*s12^2*s13^3)*s23^3 +
            (340*s12^4 + 160*s12^3*s13 + 838*s12^2*s13^2 + 313*s12*s13^3 +
              70*s13^4)*s23^4 + (230*s12^3 + 403*s12^2*s13 + 403*s12*s13^2 +
              230*s13^3)*s23^5 + (160*s12^2 + 160*s13^2)*s23^6)) +
        p3q*(p2q^4*((-423*s12^5*s13^2 - 3438*s12^4*s13^3 - 3636*s12^3*s13^4 -
              774*s12^2*s13^5 - 333*s12*s13^6 - 180*s13^7)*s23 +
            (-1170*s12^4*s13^2 - 5121*s12^3*s13^3 - 1737*s12^2*s13^4 -
              270*s12*s13^5 - 540*s13^6)*s23^2 + (-747*s12^3*s13^2 -
              1359*s12^2*s13^3 + 243*s12*s13^4 - 360*s13^5)*s23^3) +
          p1q*p2q^3*(-2592*s12^4*s13^4 + 2592*s12^3*s13^5 +
            (270*s12^5*s13^2 - 7407*s12^4*s13^3 - 3825*s12^3*s13^4 +
              837*s12^2*s13^5 - 333*s12*s13^6 + 90*s13^7)*s23 +
            (256*s12^5*s13 + 756*s12^4*s13^2 - 4887*s12^3*s13^3 +
              1050*s12^2*s13^4 + 1139*s12*s13^5 + 590*s13^6)*s23^2 +
            (582*s12^4*s13 + 2216*s12^3*s13^2 + 422*s12^2*s13^3 +
              2136*s12*s13^4 + 1540*s13^5)*s23^3 +
            (326*s12^3*s13 + 988*s12^2*s13^2 + 34*s12*s13^3 + 1040*s13^4)*
             s23^4) + p1q^2*p2q^2*(-5184*s12^4*s13^4 + 2592*s12^3*s13^5 +
            (486*s12^5*s13^2 - 10737*s12^4*s13^3 - 7191*s12^3*s13^4 +
              1197*s12^2*s13^5 - 243*s12*s13^6)*s23 +
            (270*s12^5*s13 - 301*s12^4*s13^2 - 9294*s12^3*s13^3 -
              746*s12^2*s13^4 + 63*s12*s13^5 - 270*s13^6)*s23^2 +
            (-230*s12^5 - 1002*s12^4*s13 - 1742*s12^3*s13^2 -
              3760*s12^2*s13^3 - 1239*s12*s13^4 - 730*s13^5)*s23^3 +
            (-730*s12^4 - 2265*s12^3*s13 - 1611*s12^2*s13^2 -
              2592*s12*s13^3 - 1460*s13^4)*s23^4 +
            (-500*s12^3 - 723*s12^2*s13 - 237*s12*s13^2 - 1000*s13^3)*
             s23^5) + p1q^4*((-1296*s12^4*s13^3 - 1296*s12^3*s13^4)*s23 +
            (-477*s12^4*s13^2 - 2250*s12^3*s13^3 - 477*s12^2*s13^4)*s23^2 +
            (-243*s12^4*s13 - 720*s12^3*s13^2 - 720*s12^2*s13^3 -
              243*s12*s13^4)*s23^3 + (-90*s12^4 - 333*s12^3*s13 -
              333*s12*s13^3 - 90*s13^4)*s23^4 + (-90*s12^3 - 90*s13^3)*
             s23^5) + p1q^3*p2q*(-2592*s12^4*s13^4 +
            (477*s12^5*s13^2 - 6957*s12^4*s13^3 - 6957*s12^3*s13^4 +
              477*s12^2*s13^5)*s23 + (486*s12^5*s13 - 247*s12^4*s13^2 -
              7938*s12^3*s13^3 - 247*s12^2*s13^4 + 486*s12*s13^5)*s23^2 +
            (270*s12^5 + 603*s12^4*s13 - 323*s12^3*s13^2 - 323*s12^2*s13^3 +
              603*s12*s13^4 + 270*s13^5)*s23^3 + (410*s12^4 + 473*s12^3*s13 +
              1676*s12^2*s13^2 + 473*s12*s13^3 + 410*s13^4)*s23^4 +
            (460*s12^3 + 806*s12^2*s13 + 806*s12*s13^2 + 460*s13^3)*s23^5 +
            (320*s12^2 + 320*s13^2)*s23^6))))/
      (432*p1q^3*p2q^2*s12^3*s13^3*s23^2 + 864*p1q^2*p2q^3*s12^3*s13^3*
        s23^2 + 432*p1q*p2q^4*s12^3*s13^3*s23^2 + 432*p1q*p3q^4*s12^3*s13^3*
        s23^2 + p3q^3*(864*p1q^2*s12^3*s13^3*s23^2 + 1728*p1q*p2q*s12^3*s13^3*
          s23^2) + p3q^2*(432*p1q^3*s12^3*s13^3*s23^2 + 2592*p1q^2*p2q*s12^3*
          s13^3*s23^2 + 2592*p1q*p2q^2*s12^3*s13^3*s23^2) +
       p3q*(864*p1q^3*p2q*s12^3*s13^3*s23^2 + 2592*p1q^2*p2q^2*s12^3*s13^3*
          s23^2 + 1728*p1q*p2q^3*s12^3*s13^3*s23^2)) +
     (p3q^5*(-108*s12^6*s13^2 - 216*s12^5*s13^3 - 108*s12^4*s13^4 +
         (-45*s12^7 + 549*s12^6*s13 + 3978*s12^5*s13^2 + 8784*s12^4*s13^3 +
           7731*s12^3*s13^4 + 2331*s12^2*s13^5)*s23 +
         (657*s12^6 + 7137*s12^5*s13 + 21564*s12^4*s13^2 +
           27054*s12^3*s13^3 + 14085*s12^2*s13^4 + 2331*s12*s13^5)*s23^2 +
         (3033*s12^5 + 16587*s12^4*s13 + 30861*s12^3*s13^2 +
           23553*s12^2*s13^3 + 6246*s12*s13^4)*s23^3 +
         (3915*s12^4 + 13167*s12^3*s13 + 14967*s12^2*s13^2 + 5499*s12*s13^3)*
          s23^4 + (1584*s12^3 + 3168*s12^2*s13 + 1584*s12*s13^2)*s23^5) +
       p2q^5*(-108*s12^4*s13^4 - 216*s12^3*s13^5 - 108*s12^2*s13^6 +
         (2331*s12^5*s13^2 + 7731*s12^4*s13^3 + 8784*s12^3*s13^4 +
           3978*s12^2*s13^5 + 549*s12*s13^6 - 45*s13^7)*s23 +
         (2331*s12^5*s13 + 14085*s12^4*s13^2 + 27054*s12^3*s13^3 +
           21564*s12^2*s13^4 + 7137*s12*s13^5 + 657*s13^6)*s23^2 +
         (6246*s12^4*s13 + 23553*s12^3*s13^2 + 30861*s12^2*s13^3 +
           16587*s12*s13^4 + 3033*s13^5)*s23^3 +
         (5499*s12^3*s13 + 14967*s12^2*s13^2 + 13167*s12*s13^3 + 3915*s13^4)*
          s23^4 + (1584*s12^2*s13 + 3168*s12*s13^2 + 1584*s13^3)*s23^5) +
       p1q^4*p2q*((3168*s12^5*s13^2 + 9504*s12^4*s13^3 + 9504*s12^3*s13^4 +
           3168*s12^2*s13^5)*s23 + (4005*s12^5*s13 + 18972*s12^4*s13^2 +
           29934*s12^3*s13^3 + 18972*s12^2*s13^4 + 4005*s12*s13^5)*s23^2 +
         (837*s12^5 + 11142*s12^4*s13 + 28809*s12^3*s13^2 +
           28809*s12^2*s13^3 + 11142*s12*s13^4 + 837*s13^5)*s23^3 +
         (1674*s12^4 + 9216*s12^3*s13 + 14868*s12^2*s13^2 + 9216*s12*s13^3 +
           1674*s13^4)*s23^4 + (837*s12^3 + 1863*s12^2*s13 + 1863*s12*s13^2 +
           837*s13^3)*s23^5 - 216*s12*s13*s23^6) +
       p1q^2*p2q^3*(-6444*s12^4*s13^4 - 12888*s12^3*s13^5 -
         6444*s12^2*s13^6 + (9720*s12^5*s13^2 + 13752*s12^4*s13^3 -
           9918*s12^3*s13^4 - 22536*s12^2*s13^5 - 8586*s12*s13^6)*s23 +
         (9048*s12^5*s13 + 37774*s12^4*s13^2 + 42437*s12^3*s13^3 +
           6691*s12^2*s13^4 - 9639*s12*s13^5 - 2187*s13^6)*s23^2 +
         (-672*s12^5 + 15197*s12^4*s13 + 46353*s12^3*s13^2 +
           45414*s12^2*s13^3 + 15075*s12*s13^4 - 71*s13^5)*s23^3 +
         (-2221*s12^4 + 5276*s12^3*s13 + 20939*s12^2*s13^2 +
           19250*s12*s13^3 + 5160*s13^4)*s23^4 +
         (-1770*s12^3 - 1753*s12^2*s13 + 2322*s12*s13^2 + 2521*s13^3)*s23^5 +
         (-221*s12^2 - 960*s12*s13 - 523*s13^2)*s23^6) +
       p1q*p2q^4*(-3168*s12^4*s13^4 - 6336*s12^3*s13^5 - 3168*s12^2*s13^6 +
         (6444*s12^5*s13^2 + 10899*s12^4*s13^3 - 2538*s12^3*s13^4 -
           12168*s12^2*s13^5 - 5130*s12*s13^6 + 45*s13^7)*s23 +
         (6055*s12^5*s13 + 26329*s12^4*s13^2 + 31624*s12^3*s13^3 +
           6644*s12^2*s13^4 - 6759*s12*s13^5 - 1837*s13^6)*s23^2 +
         (-389*s12^5 + 10860*s12^4*s13 + 33646*s12^3*s13^2 +
           32927*s12^2*s13^3 + 9297*s12*s13^4 - 1017*s13^5)*s23^3 +
         (-1322*s12^4 + 4791*s12^3*s13 + 17093*s12^2*s13^2 +
           14309*s12*s13^3 + 3113*s13^4)*s23^4 +
         (-1109*s12^3 - 286*s12^2*s13 + 3111*s12*s13^2 + 2072*s13^3)*s23^5 +
         (-176*s12^2 - 352*s12*s13 - 176*s13^2)*s23^6) +
       p1q^3*p2q^2*(-3168*s12^4*s13^4 - 6336*s12^3*s13^5 - 3168*s12^2*s13^6 +
         (7281*s12^5*s13^2 + 14454*s12^4*s13^3 + 3492*s12^3*s13^4 -
           7686*s12^2*s13^5 - 4005*s12*s13^6)*s23 +
         (7729*s12^5*s13 + 33776*s12^4*s13^2 + 45605*s12^3*s13^3 +
           20393*s12^2*s13^4 - 434*s12*s13^5 - 837*s13^6)*s23^2 +
         (448*s12^5 + 16575*s12^4*s13 + 46355*s12^3*s13^2 +
           47129*s12^2*s13^3 + 17601*s12*s13^4 + 916*s13^5)*s23^3 +
         (501*s12^4 + 10932*s12^3*s13 + 24525*s12^2*s13^2 + 18474*s12*s13^3 +
           3948*s13^4)*s23^4 + (274*s12^3 + 2856*s12^2*s13 + 5214*s12*s13^2 +
           2416*s13^3)*s23^5 + (469*s12^2 + 938*s12*s13 + 469*s13^2)*s23^6 +
         (248*s12 + 248*s13)*s23^7) +
       p3q^3*(p2q^2*(-324*s12^6*s13^2 + 864*s12^4*s13^4 + 432*s12^3*s13^5 -
           108*s12^2*s13^6 + (-45*s12^7 + 504*s12^6*s13 + 6435*s12^5*s13^2 +
             20844*s12^4*s13^3 + 22617*s12^3*s13^4 + 8892*s12^2*s13^5 +
             1233*s12*s13^6)*s23 + (738*s12^6 + 9252*s12^5*s13 +
             39024*s12^4*s13^2 + 66420*s12^3*s13^3 + 45738*s12^2*s13^4 +
             13284*s12*s13^5 + 1296*s13^6)*s23^2 +
           (2907*s12^5 + 22284*s12^4*s13 + 61254*s12^3*s13^2 +
             66708*s12^2*s13^3 + 29655*s12*s13^4 + 4824*s13^5)*s23^3 +
           (3420*s12^4 + 18360*s12^3*s13 + 34704*s12^2*s13^2 +
             23364*s12*s13^3 + 5760*s13^4)*s23^4 +
           (1296*s12^3 + 4824*s12^2*s13 + 5760*s12*s13^2 + 2232*s13^3)*
            s23^5) + p1q*p2q*(-6336*s12^6*s13^2 - 6336*s12^5*s13^3 +
           6336*s12^4*s13^4 + 6336*s12^3*s13^5 + (45*s12^7 - 8433*s12^6*s13 -
             10422*s12^5*s13^2 + 24822*s12^4*s13^3 + 47817*s12^3*s13^4 +
             21051*s12^2*s13^5)*s23 + (-1712*s12^6 - 1448*s12^5*s13 +
             41584*s12^4*s13^2 + 93216*s12^3*s13^3 + 67040*s12^2*s13^4 +
             14280*s12*s13^5)*s23^2 + (2448*s12^5 + 32100*s12^4*s13 +
             78975*s12^3*s13^2 + 72295*s12^2*s13^3 + 23049*s12*s13^4 -
             355*s13^5)*s23^3 + (8572*s12^4 + 31454*s12^3*s13 +
             32682*s12^2*s13^2 + 8314*s12*s13^3 - 2350*s13^4)*s23^4 +
           (4119*s12^3 + 6083*s12^2*s13 - 711*s12*s13^2 - 2243*s13^3)*s23^5 +
           (-248*s12^2 - 496*s12*s13 - 248*s13^2)*s23^6) +
         p1q^2*(-6444*s12^6*s13^2 - 12888*s12^5*s13^3 - 6444*s12^4*s13^4 +
           (-8586*s12^6*s13 - 22536*s12^5*s13^2 - 9918*s12^4*s13^3 +
             13752*s12^3*s13^4 + 9720*s12^2*s13^5)*s23 +
           (-2187*s12^6 - 9639*s12^5*s13 + 6691*s12^4*s13^2 +
             42437*s12^3*s13^3 + 37774*s12^2*s13^4 + 9048*s12*s13^5)*s23^2 +
           (-71*s12^5 + 15075*s12^4*s13 + 45414*s12^3*s13^2 +
             46353*s12^2*s13^3 + 15197*s12*s13^4 - 672*s13^5)*s23^3 +
           (5160*s12^4 + 19250*s12^3*s13 + 20939*s12^2*s13^2 +
             5276*s12*s13^3 - 2221*s13^4)*s23^4 +
           (2521*s12^3 + 2322*s12^2*s13 - 1753*s12*s13^2 - 1770*s13^3)*
            s23^5 + (-523*s12^2 - 960*s12*s13 - 221*s13^2)*s23^6)) +
       p3q^4*(p2q*(-324*s12^6*s13^2 - 432*s12^5*s13^3 + 108*s12^4*s13^4 +
           216*s12^3*s13^5 + (-90*s12^7 + 657*s12^6*s13 + 7407*s12^5*s13^2 +
             20646*s12^4*s13^3 + 21366*s12^3*s13^4 + 8217*s12^2*s13^5 +
             837*s12*s13^6)*s23 + (936*s12^6 + 12033*s12^5*s13 +
             44217*s12^4*s13^2 + 67230*s12^3*s13^3 + 43452*s12^2*s13^4 +
             11259*s12*s13^5 + 837*s13^6)*s23^2 +
           (4374*s12^5 + 29169*s12^4*s13 + 67599*s12^3*s13^2 +
             65745*s12^2*s13^3 + 26199*s12*s13^4 + 3258*s13^5)*s23^3 +
           (5580*s12^4 + 23841*s12^3*s13 + 36513*s12^2*s13^2 +
             21177*s12*s13^3 + 4005*s13^4)*s23^4 +
           (2232*s12^3 + 6048*s12^2*s13 + 5400*s12*s13^2 + 1584*s13^3)*
            s23^5) + p1q*(-3168*s12^6*s13^2 - 6336*s12^5*s13^3 -
           3168*s12^4*s13^4 + (45*s12^7 - 5130*s12^6*s13 -
             12168*s12^5*s13^2 - 2538*s12^4*s13^3 + 10899*s12^3*s13^4 +
             6444*s12^2*s13^5)*s23 + (-1837*s12^6 - 6759*s12^5*s13 +
             6644*s12^4*s13^2 + 31624*s12^3*s13^3 + 26329*s12^2*s13^4 +
             6055*s12*s13^5)*s23^2 + (-1017*s12^5 + 9297*s12^4*s13 +
             32927*s12^3*s13^2 + 33646*s12^2*s13^3 + 10860*s12*s13^4 -
             389*s13^5)*s23^3 + (3113*s12^4 + 14309*s12^3*s13 +
             17093*s12^2*s13^2 + 4791*s12*s13^3 - 1322*s13^4)*s23^4 +
           (2072*s12^3 + 3111*s12^2*s13 - 286*s12*s13^2 - 1109*s13^3)*s23^5 +
           (-176*s12^2 - 352*s12*s13 - 176*s13^2)*s23^6)) +
       p3q^2*(p2q^3*(-108*s12^6*s13^2 + 432*s12^5*s13^3 + 864*s12^4*s13^4 -
           324*s12^2*s13^6 + (1233*s12^6*s13 + 8892*s12^5*s13^2 +
             22617*s12^4*s13^3 + 20844*s12^3*s13^4 + 6435*s12^2*s13^5 +
             504*s12*s13^6 - 45*s13^7)*s23 + (1296*s12^6 + 13284*s12^5*s13 +
             45738*s12^4*s13^2 + 66420*s12^3*s13^3 + 39024*s12^2*s13^4 +
             9252*s12*s13^5 + 738*s13^6)*s23^2 +
           (4824*s12^5 + 29655*s12^4*s13 + 66708*s12^3*s13^2 +
             61254*s12^2*s13^3 + 22284*s12*s13^4 + 2907*s13^5)*s23^3 +
           (5760*s12^4 + 23364*s12^3*s13 + 34704*s12^2*s13^2 +
             18360*s12*s13^3 + 3420*s13^4)*s23^4 +
           (2232*s12^3 + 5760*s12^2*s13 + 4824*s12*s13^2 + 1296*s13^3)*
            s23^5) + p1q^2*p2q*(-6444*s12^6*s13^2 + 19332*s12^4*s13^4 +
           12888*s12^3*s13^5 + (-8586*s12^6*s13 + 4050*s12^5*s13^2 +
             69192*s12^4*s13^3 + 92862*s12^3*s13^4 + 36306*s12^2*s13^5)*s23 +
           (-2187*s12^6 + 5718*s12^5*s13 + 85293*s12^4*s13^2 +
             168063*s12^3*s13^3 + 116376*s12^2*s13^4 + 24405*s12*s13^5)*
            s23^2 + (1508*s12^5 + 41045*s12^4*s13 + 112665*s12^3*s13^2 +
             113604*s12^2*s13^3 + 41167*s12*s13^4 + 907*s13^5)*s23^3 +
           (6182*s12^4 + 25956*s12^3*s13 + 31011*s12^2*s13^2 +
             11982*s12*s13^3 - 1199*s13^4)*s23^4 +
           (1220*s12^3 - 3265*s12^2*s13 - 7340*s12*s13^2 - 3071*s13^3)*
            s23^5 + (-1267*s12^2 - 2880*s12*s13 - 965*s13^2)*s23^6) +
         p1q*p2q^2*(-3168*s12^6*s13^2 + 6336*s12^5*s13^3 +
           19008*s12^4*s13^4 + 6336*s12^3*s13^5 - 3168*s12^2*s13^6 +
           (-3303*s12^6*s13 + 16353*s12^5*s13^2 + 64278*s12^4*s13^3 +
             64278*s12^3*s13^4 + 16353*s12^2*s13^5 - 3303*s12*s13^6)*s23 +
           (125*s12^6 + 13536*s12^5*s13 + 75651*s12^4*s13^2 +
             123184*s12^3*s13^3 + 75651*s12^2*s13^4 + 13536*s12*s13^5 +
             125*s13^6)*s23^2 + (3499*s12^5 + 34992*s12^4*s13 +
             84697*s12^3*s13^2 + 84697*s12^2*s13^3 + 34992*s12*s13^4 +
             3499*s13^5)*s23^3 + (4431*s12^4 + 20668*s12^3*s13 +
             31178*s12^2*s13^2 + 20668*s12*s13^3 + 4431*s13^4)*s23^4 +
           (913*s12^3 + 2547*s12^2*s13 + 2547*s12*s13^2 + 913*s13^3)*s23^5 +
           (-144*s12^2 - 288*s12*s13 - 144*s13^2)*s23^6) +
         p1q^3*(-3168*s12^6*s13^2 - 6336*s12^5*s13^3 - 3168*s12^4*s13^4 +
           (-4005*s12^6*s13 - 7686*s12^5*s13^2 + 3492*s12^4*s13^3 +
             14454*s12^3*s13^4 + 7281*s12^2*s13^5)*s23 +
           (-837*s12^6 - 434*s12^5*s13 + 20393*s12^4*s13^2 +
             45605*s12^3*s13^3 + 33776*s12^2*s13^4 + 7729*s12*s13^5)*s23^2 +
           (916*s12^5 + 17601*s12^4*s13 + 47129*s12^3*s13^2 +
             46355*s12^2*s13^3 + 16575*s12*s13^4 + 448*s13^5)*s23^3 +
           (3948*s12^4 + 18474*s12^3*s13 + 24525*s12^2*s13^2 +
             10932*s12*s13^3 + 501*s13^4)*s23^4 +
           (2416*s12^3 + 5214*s12^2*s13 + 2856*s12*s13^2 + 274*s13^3)*s23^5 +
           (469*s12^2 + 938*s12*s13 + 469*s13^2)*s23^6 + (248*s12 + 248*s13)*
            s23^7)) + p3q*(p2q^4*(216*s12^5*s13^3 + 108*s12^4*s13^4 -
           432*s12^3*s13^5 - 324*s12^2*s13^6 + (837*s12^6*s13 +
             8217*s12^5*s13^2 + 21366*s12^4*s13^3 + 20646*s12^3*s13^4 +
             7407*s12^2*s13^5 + 657*s12*s13^6 - 90*s13^7)*s23 +
           (837*s12^6 + 11259*s12^5*s13 + 43452*s12^4*s13^2 +
             67230*s12^3*s13^3 + 44217*s12^2*s13^4 + 12033*s12*s13^5 +
             936*s13^6)*s23^2 + (3258*s12^5 + 26199*s12^4*s13 +
             65745*s12^3*s13^2 + 67599*s12^2*s13^3 + 29169*s12*s13^4 +
             4374*s13^5)*s23^3 + (4005*s12^4 + 21177*s12^3*s13 +
             36513*s12^2*s13^2 + 23841*s12*s13^3 + 5580*s13^4)*s23^4 +
           (1584*s12^3 + 5400*s12^2*s13 + 6048*s12*s13^2 + 2232*s13^3)*
            s23^5) + p1q^4*((3168*s12^5*s13^2 + 9504*s12^4*s13^3 +
             9504*s12^3*s13^4 + 3168*s12^2*s13^5)*s23 +
           (4005*s12^5*s13 + 18972*s12^4*s13^2 + 29934*s12^3*s13^3 +
             18972*s12^2*s13^4 + 4005*s12*s13^5)*s23^2 +
           (837*s12^5 + 11142*s12^4*s13 + 28809*s12^3*s13^2 +
             28809*s12^2*s13^3 + 11142*s12*s13^4 + 837*s13^5)*s23^3 +
           (1674*s12^4 + 9216*s12^3*s13 + 14868*s12^2*s13^2 +
             9216*s12*s13^3 + 1674*s13^4)*s23^4 +
           (837*s12^3 + 1863*s12^2*s13 + 1863*s12*s13^2 + 837*s13^3)*s23^5 -
           216*s12*s13*s23^6) + p1q^2*p2q^2*(12888*s12^5*s13^3 +
           19332*s12^4*s13^4 - 6444*s12^2*s13^6 +
           (36306*s12^5*s13^2 + 92862*s12^4*s13^3 + 69192*s12^3*s13^4 +
             4050*s12^2*s13^5 - 8586*s12*s13^6)*s23 +
           (24405*s12^5*s13 + 116376*s12^4*s13^2 + 168063*s12^3*s13^3 +
             85293*s12^2*s13^4 + 5718*s12*s13^5 - 2187*s13^6)*s23^2 +
           (907*s12^5 + 41167*s12^4*s13 + 113604*s12^3*s13^2 +
             112665*s12^2*s13^3 + 41045*s12*s13^4 + 1508*s13^5)*s23^3 +
           (-1199*s12^4 + 11982*s12^3*s13 + 31011*s12^2*s13^2 +
             25956*s12*s13^3 + 6182*s13^4)*s23^4 +
           (-3071*s12^3 - 7340*s12^2*s13 - 3265*s12*s13^2 + 1220*s13^3)*
            s23^5 + (-965*s12^2 - 2880*s12*s13 - 1267*s13^2)*s23^6) +
         p1q*p2q^3*(6336*s12^5*s13^3 + 6336*s12^4*s13^4 - 6336*s12^3*s13^5 -
           6336*s12^2*s13^6 + (21051*s12^5*s13^2 + 47817*s12^4*s13^3 +
             24822*s12^3*s13^4 - 10422*s12^2*s13^5 - 8433*s12*s13^6 +
             45*s13^7)*s23 + (14280*s12^5*s13 + 67040*s12^4*s13^2 +
             93216*s12^3*s13^3 + 41584*s12^2*s13^4 - 1448*s12*s13^5 -
             1712*s13^6)*s23^2 + (-355*s12^5 + 23049*s12^4*s13 +
             72295*s12^3*s13^2 + 78975*s12^2*s13^3 + 32100*s12*s13^4 +
             2448*s13^5)*s23^3 + (-2350*s12^4 + 8314*s12^3*s13 +
             32682*s12^2*s13^2 + 31454*s12*s13^3 + 8572*s13^4)*s23^4 +
           (-2243*s12^3 - 711*s12^2*s13 + 6083*s12*s13^2 + 4119*s13^3)*
            s23^5 + (-248*s12^2 - 496*s12*s13 - 248*s13^2)*s23^6) +
         p1q^3*p2q*(6336*s12^5*s13^3 + 12672*s12^4*s13^4 + 6336*s12^3*s13^5 +
           (-837*s12^6*s13 + 21771*s12^5*s13^2 + 68634*s12^4*s13^3 +
             68634*s12^3*s13^4 + 21771*s12^2*s13^5 - 837*s12*s13^6)*s23 +
           (-837*s12^6 + 16799*s12^5*s13 + 95353*s12^4*s13^2 +
             154570*s12^3*s13^3 + 95353*s12^2*s13^4 + 16799*s12*s13^5 -
             837*s13^6)*s23^2 + (1364*s12^5 + 43680*s12^4*s13 +
             121996*s12^3*s13^2 + 121996*s12^2*s13^3 + 43680*s12*s13^4 +
             1364*s13^5)*s23^3 + (4449*s12^4 + 32574*s12^3*s13 +
             55386*s12^2*s13^2 + 32574*s12*s13^3 + 4449*s13^4)*s23^4 +
           (2690*s12^3 + 8070*s12^2*s13 + 8070*s12*s13^2 + 2690*s13^3)*
            s23^5 + (938*s12^2 + 1876*s12*s13 + 938*s13^2)*s23^6 +
           (496*s12 + 496*s13)*s23^7)))/
      (p1q^3*p2q^2*((72*s12^4*s13^2 + 144*s12^3*s13^3 + 72*s12^2*s13^4)*
          s23^2 + (72*s12^4*s13 + 216*s12^3*s13^2 + 216*s12^2*s13^3 +
           72*s12*s13^4)*s23^3 + (72*s12^3*s13 + 144*s12^2*s13^2 +
           72*s12*s13^3)*s23^4) + p1q*p2q^4*
        ((72*s12^4*s13^2 + 144*s12^3*s13^3 + 72*s12^2*s13^4)*s23^2 +
         (72*s12^4*s13 + 216*s12^3*s13^2 + 216*s12^2*s13^3 + 72*s12*s13^4)*
          s23^3 + (72*s12^3*s13 + 144*s12^2*s13^2 + 72*s12*s13^3)*s23^4) +
       p1q*p3q^4*((72*s12^4*s13^2 + 144*s12^3*s13^3 + 72*s12^2*s13^4)*s23^2 +
         (72*s12^4*s13 + 216*s12^3*s13^2 + 216*s12^2*s13^3 + 72*s12*s13^4)*
          s23^3 + (72*s12^3*s13 + 144*s12^2*s13^2 + 72*s12*s13^3)*s23^4) +
       p1q^2*p2q^3*((144*s12^4*s13^2 + 288*s12^3*s13^3 + 144*s12^2*s13^4)*
          s23^2 + (144*s12^4*s13 + 432*s12^3*s13^2 + 432*s12^2*s13^3 +
           144*s12*s13^4)*s23^3 + (144*s12^3*s13 + 288*s12^2*s13^2 +
           144*s12*s13^3)*s23^4) +
       p3q^3*(p1q^2*((144*s12^4*s13^2 + 288*s12^3*s13^3 + 144*s12^2*s13^4)*
            s23^2 + (144*s12^4*s13 + 432*s12^3*s13^2 + 432*s12^2*s13^3 +
             144*s12*s13^4)*s23^3 + (144*s12^3*s13 + 288*s12^2*s13^2 +
             144*s12*s13^3)*s23^4) + p1q*p2q*
          ((288*s12^4*s13^2 + 576*s12^3*s13^3 + 288*s12^2*s13^4)*s23^2 +
           (288*s12^4*s13 + 864*s12^3*s13^2 + 864*s12^2*s13^3 +
             288*s12*s13^4)*s23^3 + (288*s12^3*s13 + 576*s12^2*s13^2 +
             288*s12*s13^3)*s23^4)) +
       p3q^2*(p1q^3*((72*s12^4*s13^2 + 144*s12^3*s13^3 + 72*s12^2*s13^4)*
            s23^2 + (72*s12^4*s13 + 216*s12^3*s13^2 + 216*s12^2*s13^3 +
             72*s12*s13^4)*s23^3 + (72*s12^3*s13 + 144*s12^2*s13^2 +
             72*s12*s13^3)*s23^4) + p1q^2*p2q*
          ((432*s12^4*s13^2 + 864*s12^3*s13^3 + 432*s12^2*s13^4)*s23^2 +
           (432*s12^4*s13 + 1296*s12^3*s13^2 + 1296*s12^2*s13^3 +
             432*s12*s13^4)*s23^3 + (432*s12^3*s13 + 864*s12^2*s13^2 +
             432*s12*s13^3)*s23^4) + p1q*p2q^2*
          ((432*s12^4*s13^2 + 864*s12^3*s13^3 + 432*s12^2*s13^4)*s23^2 +
           (432*s12^4*s13 + 1296*s12^3*s13^2 + 1296*s12^2*s13^3 +
             432*s12*s13^4)*s23^3 + (432*s12^3*s13 + 864*s12^2*s13^2 +
             432*s12*s13^3)*s23^4)) +
       p3q*(p1q^3*p2q*((144*s12^4*s13^2 + 288*s12^3*s13^3 + 144*s12^2*s13^4)*
            s23^2 + (144*s12^4*s13 + 432*s12^3*s13^2 + 432*s12^2*s13^3 +
             144*s12*s13^4)*s23^3 + (144*s12^3*s13 + 288*s12^2*s13^2 +
             144*s12*s13^3)*s23^4) + p1q*p2q^3*
          ((288*s12^4*s13^2 + 576*s12^3*s13^3 + 288*s12^2*s13^4)*s23^2 +
           (288*s12^4*s13 + 864*s12^3*s13^2 + 864*s12^2*s13^3 +
             288*s12*s13^4)*s23^3 + (288*s12^3*s13 + 576*s12^2*s13^2 +
             288*s12*s13^3)*s23^4) + p1q^2*p2q^2*
          ((432*s12^4*s13^2 + 864*s12^3*s13^3 + 432*s12^2*s13^4)*s23^2 +
           (432*s12^4*s13 + 1296*s12^3*s13^2 + 1296*s12^2*s13^3 +
             432*s12*s13^4)*s23^3 + (432*s12^3*s13 + 864*s12^2*s13^2 +
             432*s12*s13^3)*s23^4))) +
     ((p3q^5*((-9*s12^3 - 36*s12^2*s13 - 27*s12*s13^2)*s23 +
          (-27*s12^2 - 45*s12*s13)*s23^2 - 18*s12*s23^3) +
        p1q^2*p2q^3*(72*s12*s13^3 + (-108*s12^2*s13 - 18*s12*s13^2 +
            18*s13^3)*s23 + (-90*s12*s13 - 36*s13^2)*s23^2 +
          (18*s12 - 36*s13)*s23^3) + p1q*p2q^4*(36*s12*s13^3 +
          (-72*s12^2*s13 - 18*s12*s13^2 + 18*s13^3)*s23 +
          (-72*s12*s13 - 18*s13^2)*s23^2 + (9*s12 - 27*s13)*s23^3) +
        p1q^4*p2q*((-36*s12^2*s13 - 36*s12*s13^2)*s23 +
          (-9*s12^2 - 54*s12*s13 - 9*s13^2)*s23^2 + (-9*s12 - 9*s13)*s23^3) +
        p2q^5*((-27*s12^2*s13 - 36*s12*s13^2 - 9*s13^3)*s23 +
          (-45*s12*s13 - 27*s13^2)*s23^2 - 18*s13*s23^3) +
        p1q^3*p2q^2*(36*s12*s13^3 + (-81*s12^2*s13 - 36*s12*s13^2 + 9*s13^3)*
           s23 + (-9*s12^2 - 81*s12*s13 - 18*s13^2)*s23^2 - 18*s13*s23^3) +
        p3q*(p1q*p2q^3*(-72*s12^2*s13^2 + 72*s12*s13^3 +
            (-198*s12^2*s13 - 108*s12*s13^2 + 18*s13^3)*s23 +
            (-18*s12^2 - 162*s12*s13 - 72*s13^2)*s23^2 + (18*s12 - 54*s13)*
             s23^3) + p2q^4*((-9*s12^3 - 90*s12^2*s13 - 99*s12*s13^2 -
              18*s13^3)*s23 + (-27*s12^2 - 135*s12*s13 - 54*s13^2)*s23^2 +
            (-18*s12 - 36*s13)*s23^3) + p1q^2*p2q^2*(-144*s12^2*s13^2 +
            72*s12*s13^3 + (-288*s12^2*s13 - 198*s12*s13^2 + 18*s13^3)*s23 +
            (-36*s12^2 - 198*s12*s13 - 72*s13^2)*s23^2 + (18*s12 - 36*s13)*
             s23^3) + p1q^3*p2q*(-72*s12^2*s13^2 + (9*s12^3 - 189*s12^2*s13 -
              189*s12*s13^2 + 9*s13^3)*s23 + (-27*s12^2 - 198*s12*s13 -
              27*s13^2)*s23^2 + (-18*s12 - 18*s13)*s23^3) +
          p1q^4*((-36*s12^2*s13 - 36*s12*s13^2)*s23 +
            (-9*s12^2 - 54*s12*s13 - 9*s13^2)*s23^2 + (-9*s12 - 9*s13)*
             s23^3)) + p3q^4*(p2q*((-18*s12^3 - 99*s12^2*s13 - 90*s12*s13^2 -
              9*s13^3)*s23 + (-54*s12^2 - 135*s12*s13 - 27*s13^2)*s23^2 +
            (-36*s12 - 18*s13)*s23^3) + p1q*(36*s12^3*s13 +
            (18*s12^3 - 18*s12^2*s13 - 72*s12*s13^2)*s23 +
            (-18*s12^2 - 72*s12*s13)*s23^2 + (-27*s12 + 9*s13)*s23^3)) +
        p3q^3*(p2q^2*((-18*s12^3 - 126*s12^2*s13 - 126*s12*s13^2 - 18*s13^3)*
             s23 + (-54*s12^2 - 180*s12*s13 - 54*s13^2)*s23^2 +
            (-36*s12 - 36*s13)*s23^3) + p1q*p2q*(72*s12^3*s13 -
            72*s12^2*s13^2 + (18*s12^3 - 108*s12^2*s13 - 198*s12*s13^2)*s23 +
            (-72*s12^2 - 162*s12*s13 - 18*s13^2)*s23^2 + (-54*s12 + 18*s13)*
             s23^3) + p1q^2*(72*s12^3*s13 + (18*s12^3 - 18*s12^2*s13 -
              108*s12*s13^2)*s23 + (-36*s12^2 - 90*s12*s13)*s23^2 +
            (-36*s12 + 18*s13)*s23^3)) +
        p3q^2*(p1q^3*(36*s12^3*s13 + (9*s12^3 - 36*s12^2*s13 - 81*s12*s13^2)*
             s23 + (-18*s12^2 - 81*s12*s13 - 9*s13^2)*s23^2 - 18*s12*s23^3) +
          p2q^3*((-18*s12^3 - 126*s12^2*s13 - 126*s12*s13^2 - 18*s13^3)*s23 +
            (-54*s12^2 - 180*s12*s13 - 54*s13^2)*s23^2 + (-36*s12 - 36*s13)*
             s23^3) + p1q*p2q^2*(36*s12^3*s13 - 144*s12^2*s13^2 +
            36*s12*s13^3 + (-216*s12^2*s13 - 216*s12*s13^2)*s23 +
            (-72*s12^2 - 180*s12*s13 - 72*s13^2)*s23^2 + (-18*s12 - 18*s13)*
             s23^3) + p1q^2*p2q*(72*s12^3*s13 - 144*s12^2*s13^2 +
            (18*s12^3 - 198*s12^2*s13 - 288*s12*s13^2)*s23 +
            (-72*s12^2 - 198*s12*s13 - 36*s13^2)*s23^2 + (-36*s12 + 18*s13)*
             s23^3)))*Log(p1q/(p1q + p2q + p3q))^2)/
      (8*p1q^3*p2q^2*s12*s13*s23^2 + 16*p1q^2*p2q^3*s12*s13*s23^2 +
       8*p1q*p2q^4*s12*s13*s23^2 + 8*p1q*p3q^4*s12*s13*s23^2 +
       p3q^3*(16*p1q^2*s12*s13*s23^2 + 32*p1q*p2q*s12*s13*s23^2) +
       p3q^2*(8*p1q^3*s12*s13*s23^2 + 48*p1q^2*p2q*s12*s13*s23^2 +
         48*p1q*p2q^2*s12*s13*s23^2) + p3q*(16*p1q^3*p2q*s12*s13*s23^2 +
         48*p1q^2*p2q^2*s12*s13*s23^2 + 32*p1q*p2q^3*s12*s13*s23^2)) +
     ((p2q^5*((-9*s12^2*s13 - 9*s12*s13^2)*s23 - 9*s12*s13*s23^2) +
        p3q^5*((-9*s12^3 - 27*s12^2*s13 - 18*s12*s13^2)*s23 +
          (-27*s12^2 - 36*s12*s13)*s23^2 - 18*s12*s23^3) +
        p1q^4*p2q*((-18*s12^2*s13 - 18*s12*s13^2)*s23 +
          (-9*s12^2 - 27*s12*s13)*s23^2 - 9*s12*s23^3) +
        p1q^3*p2q^2*(18*s12*s13^3 + (-45*s12^2*s13 - 9*s12*s13^2)*s23 +
          (-8*s12^2 - 27*s12*s13 + s13^2)*s23^2 + (2*s12 + 2*s13)*s23^3 +
          2*s23^4) + p1q^2*p2q^3*(36*s12*s13^3 +
          (-54*s12^2*s13 + 18*s12*s13^2)*s23 + (-2*s12*s13 + 2*s13^2)*s23^2 +
          (18*s12 + 2*s13)*s23^3 + 2*s23^4) + p1q*p2q^4*
         (18*s12*s13^3 - 36*s12^2*s13*s23 + (s12^2 - 7*s12*s13 + 3*s13^2)*
           s23^2 + (11*s12 + 4*s13)*s23^3 + 2*s23^4) +
        p3q^4*(p2q*((-18*s12^3 - 63*s12^2*s13 - 45*s12*s13^2)*s23 +
            (-54*s12^2 - 81*s12*s13)*s23^2 - 36*s12*s23^3) +
          p1q*(18*s12^3*s13 + (18*s12^3 - 18*s12^2*s13 - 36*s12*s13^2)*s23 +
            (-15*s12^2 - 61*s12*s13 + s13^2)*s23^2 + (-23*s12 + 2*s13)*
             s23^3 + 2*s23^4)) +
        p3q^3*(p2q^2*((-18*s12^3 - 72*s12^2*s13 - 54*s12*s13^2)*s23 +
            (-54*s12^2 - 90*s12*s13)*s23^2 - 36*s12*s23^3) +
          p1q^2*(36*s12^3*s13 + (18*s12^3 - 36*s12^2*s13 - 54*s12*s13^2)*
             s23 + (-34*s12^2 - 92*s12*s13)*s23^2 - 34*s12*s23^3 + 2*s23^4) +
          p1q*p2q*(36*s12^3*s13 - 36*s12^2*s13^2 +
            (18*s12^3 - 108*s12^2*s13 - 90*s12*s13^2)*s23 +
            (-66*s12^2 - 144*s12*s13 + 2*s13^2)*s23^2 + (-48*s12 + 2*s13)*
             s23^3 + 4*s23^4)) +
        p3q^2*(p2q^3*((-18*s12^3 - 72*s12^2*s13 - 54*s12*s13^2)*s23 +
            (-54*s12^2 - 90*s12*s13)*s23^2 - 36*s12*s23^3) +
          p1q^3*(18*s12^3*s13 + (9*s12^3 - 27*s12^2*s13 - 36*s12*s13^2)*s23 +
            (-17*s12^2 - 54*s12*s13 + s13^2)*s23^2 + (-16*s12 + 2*s13)*
             s23^3 + 2*s23^4) + p1q*p2q^2*(18*s12^3*s13 - 72*s12^2*s13^2 +
            18*s12*s13^3 + (-162*s12^2*s13 - 54*s12*s13^2)*s23 +
            (-68*s12^2 - 94*s12*s13 + 4*s13^2)*s23^2 + (-16*s12 + 2*s13)*
             s23^3 + 4*s23^4) + p1q^2*p2q*(36*s12^3*s13 - 72*s12^2*s13^2 +
            (18*s12^3 - 162*s12^2*s13 - 108*s12*s13^2)*s23 +
            (-68*s12^2 - 150*s12*s13 + 2*s13^2)*s23^2 + (-32*s12 + 2*s13)*
             s23^3 + 6*s23^4)) +
        p3q*(p2q^4*((-9*s12^3 - 45*s12^2*s13 - 36*s12*s13^2)*s23 +
            (-27*s12^2 - 54*s12*s13)*s23^2 - 18*s12*s23^3) +
          p1q^4*((-18*s12^2*s13 - 18*s12*s13^2)*s23 + (-9*s12^2 - 27*s12*s13)*
             s23^2 - 9*s12*s23^3) + p1q^3*p2q*(-36*s12^2*s13^2 +
            (9*s12^3 - 108*s12^2*s13 - 81*s12*s13^2)*s23 +
            (-25*s12^2 - 99*s12*s13 + 2*s13^2)*s23^2 + (-14*s12 + 4*s13)*
             s23^3 + 4*s23^4) + p1q*p2q^3*(-36*s12^2*s13^2 + 36*s12*s13^3 -
            108*s12^2*s13*s23 + (-16*s12^2 - 18*s12*s13 + 6*s13^2)*s23^2 +
            (20*s12 + 6*s13)*s23^3 + 4*s23^4) + p1q^2*p2q^2*
           (-72*s12^2*s13^2 + 36*s12*s13^3 + (-180*s12^2*s13 - 36*s12*s13^2)*
             s23 + (-34*s12^2 - 60*s12*s13 + 4*s13^2)*s23^2 +
            (20*s12 + 4*s13)*s23^3 + 6*s23^4)))*Log(p2q/(p1q + p2q + p3q))^2)/
      (8*p1q^3*p2q^2*s12*s13*s23^2 + 16*p1q^2*p2q^3*s12*s13*s23^2 +
       8*p1q*p2q^4*s12*s13*s23^2 + 8*p1q*p3q^4*s12*s13*s23^2 +
       p3q^3*(16*p1q^2*s12*s13*s23^2 + 32*p1q*p2q*s12*s13*s23^2) +
       p3q^2*(8*p1q^3*s12*s13*s23^2 + 48*p1q^2*p2q*s12*s13*s23^2 +
         48*p1q*p2q^2*s12*s13*s23^2) + p3q*(16*p1q^3*p2q*s12*s13*s23^2 +
         48*p1q^2*p2q^2*s12*s13*s23^2 + 32*p1q*p2q^3*s12*s13*s23^2)) +
     ((p3q^5*(-9*s12^3*s13 - 9*s12^2*s13^2 + (-s12^3 - 10*s12^2*s13)*s23 -
          s12^2*s23^2) + p1q^5*((9*s12^2*s13 + 18*s12*s13^2 + 9*s13^3)*s23 +
          (18*s12*s13 + 18*s13^2)*s23^2 + 9*s13*s23^3) +
        p2q^5*(9*s12^2*s13^2 + 9*s12*s13^3 + (18*s12^2*s13 + 44*s12*s13^2 +
            17*s13^3)*s23 + (35*s12*s13 + 34*s13^2)*s23^2 + 17*s13*s23^3) +
        p1q^2*p2q^3*(54*s12^2*s13^2 + 18*s12*s13^3 - 36*s13^4 +
          (142*s12^2*s13 + 292*s12*s13^2 + 60*s13^3)*s23 +
          (-2*s12^2 + 243*s12*s13 + 199*s13^2)*s23^2 + (-7*s12 + 98*s13)*
           s23^3 - 5*s23^4) + p1q^3*p2q^2*(36*s12^2*s13^2 + 9*s12*s13^3 -
          27*s13^4 + (126*s12^2*s13 + 245*s12*s13^2 + 56*s13^3)*s23 +
          (208*s12*s13 + 165*s13^2)*s23^2 + (-4*s12 + 78*s13)*s23^3 -
          4*s23^4) + p1q*p2q^4*(36*s12^2*s13^2 + 18*s12*s13^3 - 18*s13^4 +
          (79*s12^2*s13 + 170*s12*s13^2 + 37*s13^3)*s23 +
          (-2*s12^2 + 139*s12*s13 + 117*s13^2)*s23^2 + (-5*s12 + 59*s13)*
           s23^3 - 3*s23^4) + p1q^4*p2q*(9*s12^2*s13^2 - 9*s13^4 +
          (54*s12^2*s13 + 97*s12*s13^2 + 25*s13^3)*s23 +
          (87*s12*s13 + 67*s13^2)*s23^2 + (-2*s12 + 31*s13)*s23^3 -
          2*s23^4) + p3q^4*(p2q*(-18*s12^3*s13 - 9*s12^2*s13^2 +
            9*s12*s13^3 + (-s12^3 - 17*s12^2*s13 + 11*s12*s13^2)*s23 +
            3*s12*s13*s23^2 + s12*s23^3) + p1q*(-18*s12^3*s13 -
            18*s12^2*s13^2 + (2*s12^2*s13 + 20*s12*s13^2)*s23 +
            (4*s12^2 + 24*s12*s13)*s23^2 + 4*s12*s23^3)) +
        p3q^3*(p2q^2*(-18*s12^3*s13 + 18*s12*s13^3 +
            (-s12^3 + s12^2*s13 + 55*s12*s13^2 + 17*s13^3)*s23 +
            (38*s12*s13 + 34*s13^2)*s23^2 + (s12 + 17*s13)*s23^3) +
          p1q^2*(-18*s12^3*s13 - 18*s12^2*s13^2 + (-2*s12^3 + 14*s12^2*s13 +
              32*s12*s13^2 - 2*s13^3)*s23 + (23*s12*s13 - 15*s13^2)*s23^2 +
            (-s12 - 16*s13)*s23^3 - 3*s23^4) + p1q*p2q*(-36*s12^3*s13 -
            18*s12^2*s13^2 + 18*s12*s13^3 + (-2*s12^3 + 9*s12^2*s13 +
              72*s12*s13^2 + 7*s13^3)*s23 + (2*s12^2 + 47*s12*s13 + 3*s13^2)*
             s23^2 + (s12 - 7*s13)*s23^3 - 3*s23^4)) +
        p3q^2*(p2q^3*(-18*s12^3*s13 + 18*s12*s13^3 +
            (-s12^3 + s12^2*s13 + 55*s12*s13^2 + 17*s13^3)*s23 +
            (38*s12*s13 + 34*s13^2)*s23^2 + (s12 + 17*s13)*s23^3) +
          p1q^2*p2q*(-72*s12^3*s13 - 54*s12^2*s13^2 + 18*s12*s13^3 +
            (-2*s12^3 - 32*s12^2*s13 + 76*s12*s13^2 + 16*s13^3)*s23 +
            (6*s12^2 + 21*s12*s13 - 13*s13^2)*s23^2 + (3*s12 - 34*s13)*
             s23^3 - 5*s23^4) + p1q*p2q^2*(-72*s12^3*s13 - 36*s12^2*s13^2 +
            36*s12*s13^3 + (-53*s12^2*s13 + 80*s12*s13^2 + 25*s13^3)*s23 +
            (6*s12^2 + 23*s12*s13 + 23*s13^2)*s23^2 + (3*s12 - 5*s13)*s23^3 -
            3*s23^4) + p1q^3*(-27*s12^3*s13 - 27*s12^2*s13^2 +
            (-15*s12^2*s13 + 12*s12*s13^2)*s23 + (4*s12^2 - 2*s12*s13 -
              18*s13^2)*s23^2 + (2*s12 - 20*s13)*s23^3 - 2*s23^4)) +
        p3q*(p2q^4*(-9*s12^3*s13 + 9*s12^2*s13^2 + 18*s12*s13^3 +
            (11*s12^2*s13 + 55*s12*s13^2 + 17*s13^3)*s23 +
            (s12^2 + 38*s12*s13 + 34*s13^2)*s23^2 + (s12 + 17*s13)*s23^3) +
          p1q^2*p2q^2*(-54*s12^3*s13 + 54*s12^2*s13^2 + 108*s12*s13^3 +
            (78*s12^2*s13 + 372*s12*s13^2 + 132*s13^3)*s23 +
            (4*s12^2 + 205*s12*s13 + 201*s13^2)*s23^2 + (-3*s12 + 62*s13)*
             s23^3 - 7*s23^4) + p1q^3*p2q*(-36*s12^3*s13 + 18*s12^2*s13^2 +
            54*s12*s13^3 + (57*s12^2*s13 + 221*s12*s13^2 + 74*s13^3)*s23 +
            (4*s12^2 + 125*s12*s13 + 102*s13^2)*s23^2 + (-2*s12 + 22*s13)*
             s23^3 - 6*s23^4) + p1q*p2q^3*(-36*s12^3*s13 + 54*s12^2*s13^2 +
            90*s12*s13^3 + (2*s12^3 + 55*s12^2*s13 + 270*s12*s13^2 +
              91*s13^3)*s23 + (6*s12^2 + 157*s12*s13 + 155*s13^2)*s23^2 +
            (s12 + 61*s13)*s23^3 - 3*s23^4) + p1q^4*(-9*s12^3*s13 +
            9*s12*s13^3 + (9*s12^2*s13 + 43*s12*s13^2 + 16*s13^3)*s23 +
            (24*s12*s13 + 22*s13^2)*s23^2 + (-2*s12 + 4*s13)*s23^3 -
            2*s23^4)))*Log((p1q + p2q)/(p1q + p2q + p3q))^2)/
      (8*p1q*p3q^4*s12^2*s13*s23 + p1q^3*p2q^2*(-24*s12*s13^2*s23 -
         24*s12*s13*s23^2) + p1q^2*p2q^3*(-24*s12*s13^2*s23 -
         24*s12*s13*s23^2) + p1q^4*p2q*(-8*s12*s13^2*s23 - 8*s12*s13*s23^2) +
       p1q*p2q^4*(-8*s12*s13^2*s23 - 8*s12*s13*s23^2) +
       p3q^2*(p1q^2*p2q*((32*s12^2*s13 - 40*s12*s13^2)*s23 -
           40*s12*s13*s23^2) + p1q*p2q^2*((24*s12^2*s13 - 24*s12*s13^2)*s23 -
           24*s12*s13*s23^2) + p1q^3*((8*s12^2*s13 - 16*s12*s13^2)*s23 -
           16*s12*s13*s23^2)) +
       p3q*(p1q^2*p2q^2*((16*s12^2*s13 - 56*s12*s13^2)*s23 -
           56*s12*s13*s23^2) + p1q^3*p2q*((8*s12^2*s13 - 40*s12*s13^2)*s23 -
           40*s12*s13*s23^2) + p1q*p2q^3*((8*s12^2*s13 - 24*s12*s13^2)*s23 -
           24*s12*s13*s23^2) + p1q^4*(-8*s12*s13^2*s23 - 8*s12*s13*s23^2)) +
       p3q^3*(p1q^2*((16*s12^2*s13 - 8*s12*s13^2)*s23 - 8*s12*s13*s23^2) +
         p1q*p2q*((24*s12^2*s13 - 8*s12*s13^2)*s23 - 8*s12*s13*s23^2))) +
     ((p3q^5*((-9*s12^2*s13 - 9*s12*s13^2)*s23 - 9*s12*s13*s23^2) +
        p2q^5*((-18*s12^2*s13 - 27*s12*s13^2 - 9*s13^3)*s23 +
          (-36*s12*s13 - 27*s13^2)*s23^2 - 18*s13*s23^3) +
        p1q^4*p2q*((-18*s12^2*s13 - 18*s12*s13^2)*s23 +
          (-27*s12*s13 - 9*s13^2)*s23^2 - 9*s13*s23^3) +
        p1q*p2q^4*(18*s12*s13^3 + (-36*s12^2*s13 - 18*s12*s13^2 + 18*s13^3)*
           s23 + (s12^2 - 61*s12*s13 - 15*s13^2)*s23^2 +
          (2*s12 - 23*s13)*s23^3 + 2*s23^4) + p1q^3*p2q^2*
         (18*s12*s13^3 + (-36*s12^2*s13 - 27*s12*s13^2 + 9*s13^3)*s23 +
          (s12^2 - 54*s12*s13 - 17*s13^2)*s23^2 + (2*s12 - 16*s13)*s23^3 +
          2*s23^4) + p1q^2*p2q^3*(36*s12*s13^3 +
          (-54*s12^2*s13 - 36*s12*s13^2 + 18*s13^3)*s23 +
          (-92*s12*s13 - 34*s13^2)*s23^2 - 34*s13*s23^3 + 2*s23^4) +
        p3q^4*(p2q*((-36*s12^2*s13 - 45*s12*s13^2 - 9*s13^3)*s23 +
            (-54*s12*s13 - 27*s13^2)*s23^2 - 18*s13*s23^3) +
          p1q*(18*s12^3*s13 - 36*s12*s13^2*s23 + (3*s12^2 - 7*s12*s13 +
              s13^2)*s23^2 + (4*s12 + 11*s13)*s23^3 + 2*s23^4)) +
        p3q^3*(p2q^2*((-54*s12^2*s13 - 72*s12*s13^2 - 18*s13^3)*s23 +
            (-90*s12*s13 - 54*s13^2)*s23^2 - 36*s13*s23^3) +
          p1q^2*(36*s12^3*s13 + (18*s12^2*s13 - 54*s12*s13^2)*s23 +
            (2*s12^2 - 2*s12*s13)*s23^2 + (2*s12 + 18*s13)*s23^3 + 2*s23^4) +
          p1q*p2q*(36*s12^3*s13 - 36*s12^2*s13^2 - 108*s12*s13^2*s23 +
            (6*s12^2 - 18*s12*s13 - 16*s13^2)*s23^2 + (6*s12 + 20*s13)*
             s23^3 + 4*s23^4)) +
        p3q*(p2q^4*((-45*s12^2*s13 - 63*s12*s13^2 - 18*s13^3)*s23 +
            (-81*s12*s13 - 54*s13^2)*s23^2 - 36*s13*s23^3) +
          p1q^4*((-18*s12^2*s13 - 18*s12*s13^2)*s23 + (-27*s12*s13 - 9*s13^2)*
             s23^2 - 9*s13*s23^3) + p1q*p2q^3*(-36*s12^2*s13^2 +
            36*s12*s13^3 + (-90*s12^2*s13 - 108*s12*s13^2 + 18*s13^3)*s23 +
            (2*s12^2 - 144*s12*s13 - 66*s13^2)*s23^2 + (2*s12 - 48*s13)*
             s23^3 + 4*s23^4) + p1q^3*p2q*(-36*s12^2*s13^2 +
            (-81*s12^2*s13 - 108*s12*s13^2 + 9*s13^3)*s23 +
            (2*s12^2 - 99*s12*s13 - 25*s13^2)*s23^2 + (4*s12 - 14*s13)*
             s23^3 + 4*s23^4) + p1q^2*p2q^2*(-72*s12^2*s13^2 + 36*s12*s13^3 +
            (-108*s12^2*s13 - 162*s12*s13^2 + 18*s13^3)*s23 +
            (2*s12^2 - 150*s12*s13 - 68*s13^2)*s23^2 + (2*s12 - 32*s13)*
             s23^3 + 6*s23^4)) +
        p3q^2*(p2q^3*((-54*s12^2*s13 - 72*s12*s13^2 - 18*s13^3)*s23 +
            (-90*s12*s13 - 54*s13^2)*s23^2 - 36*s13*s23^3) +
          p1q^3*(18*s12^3*s13 + (-9*s12^2*s13 - 45*s12*s13^2)*s23 +
            (s12^2 - 27*s12*s13 - 8*s13^2)*s23^2 + (2*s12 + 2*s13)*s23^3 +
            2*s23^4) + p1q*p2q^2*(18*s12^3*s13 - 72*s12^2*s13^2 +
            18*s12*s13^3 + (-54*s12^2*s13 - 162*s12*s13^2)*s23 +
            (4*s12^2 - 94*s12*s13 - 68*s13^2)*s23^2 + (2*s12 - 16*s13)*
             s23^3 + 4*s23^4) + p1q^2*p2q*(36*s12^3*s13 - 72*s12^2*s13^2 +
            (-36*s12^2*s13 - 180*s12*s13^2)*s23 + (4*s12^2 - 60*s12*s13 -
              34*s13^2)*s23^2 + (4*s12 + 20*s13)*s23^3 + 6*s23^4)))*
       Log(p3q/(p1q + p2q + p3q))^2)/(8*p1q^3*p2q^2*s12*s13*s23^2 +
       16*p1q^2*p2q^3*s12*s13*s23^2 + 8*p1q*p2q^4*s12*s13*s23^2 +
       8*p1q*p3q^4*s12*s13*s23^2 + p3q^3*(16*p1q^2*s12*s13*s23^2 +
         32*p1q*p2q*s12*s13*s23^2) + p3q^2*(8*p1q^3*s12*s13*s23^2 +
         48*p1q^2*p2q*s12*s13*s23^2 + 48*p1q*p2q^2*s12*s13*s23^2) +
       p3q*(16*p1q^3*p2q*s12*s13*s23^2 + 48*p1q^2*p2q^2*s12*s13*s23^2 +
         32*p1q*p2q^3*s12*s13*s23^2)) +
     ((p2q^5*(9*s12^2*s13^2 + 9*s12*s13^3 + (10*s12*s13^2 + s13^3)*s23 +
          s13^2*s23^2) + p3q^5*(-9*s12^3*s13 - 9*s12^2*s13^2 +
          (-17*s12^3 - 44*s12^2*s13 - 18*s12*s13^2)*s23 +
          (-34*s12^2 - 35*s12*s13)*s23^2 - 17*s12*s23^3) +
        p1q^5*((-9*s12^3 - 18*s12^2*s13 - 9*s12*s13^2)*s23 +
          (-18*s12^2 - 18*s12*s13)*s23^2 - 9*s12*s23^3) +
        p1q*p2q^4*(18*s12^2*s13^2 + 18*s12*s13^3 +
          (-20*s12^2*s13 - 2*s12*s13^2)*s23 + (-24*s12*s13 - 4*s13^2)*s23^2 -
          4*s13*s23^3) + p1q^3*p2q^2*(27*s12^2*s13^2 + 27*s12*s13^3 +
          (-12*s12^2*s13 + 15*s12*s13^2)*s23 + (18*s12^2 + 2*s12*s13 -
            4*s13^2)*s23^2 + (20*s12 - 2*s13)*s23^3 + 2*s23^4) +
        p1q^4*p2q*(-9*s12^3*s13 + 9*s12*s13^3 + (-16*s12^3 - 43*s12^2*s13 -
            9*s12*s13^2)*s23 + (-22*s12^2 - 24*s12*s13)*s23^2 +
          (-4*s12 + 2*s13)*s23^3 + 2*s23^4) + p1q^2*p2q^3*
         (18*s12^2*s13^2 + 18*s12*s13^3 + (2*s12^3 - 32*s12^2*s13 -
            14*s12*s13^2 + 2*s13^3)*s23 + (15*s12^2 - 23*s12*s13)*s23^2 +
          (16*s12 + s13)*s23^3 + 3*s23^4) +
        p3q^4*(p2q*(-18*s12^3*s13 - 9*s12^2*s13^2 + 9*s12*s13^3 +
            (-17*s12^3 - 55*s12^2*s13 - 11*s12*s13^2)*s23 +
            (-34*s12^2 - 38*s12*s13 - s13^2)*s23^2 + (-17*s12 - s13)*s23^3) +
          p1q*(18*s12^4 - 18*s12^3*s13 - 36*s12^2*s13^2 +
            (-37*s12^3 - 170*s12^2*s13 - 79*s12*s13^2)*s23 +
            (-117*s12^2 - 139*s12*s13 + 2*s13^2)*s23^2 + (-59*s12 + 5*s13)*
             s23^3 + 3*s23^4)) + p3q^3*(p2q^2*(-18*s12^3*s13 + 18*s12*s13^3 +
            (-17*s12^3 - 55*s12^2*s13 - s12*s13^2 + s13^3)*s23 +
            (-34*s12^2 - 38*s12*s13)*s23^2 + (-17*s12 - s13)*s23^3) +
          p1q*p2q*(-90*s12^3*s13 - 54*s12^2*s13^2 + 36*s12*s13^3 +
            (-91*s12^3 - 270*s12^2*s13 - 55*s12*s13^2 - 2*s13^3)*s23 +
            (-155*s12^2 - 157*s12*s13 - 6*s13^2)*s23^2 + (-61*s12 - s13)*
             s23^3 + 3*s23^4) + p1q^2*(36*s12^4 - 18*s12^3*s13 -
            54*s12^2*s13^2 + (-60*s12^3 - 292*s12^2*s13 - 142*s12*s13^2)*
             s23 + (-199*s12^2 - 243*s12*s13 + 2*s13^2)*s23^2 +
            (-98*s12 + 7*s13)*s23^3 + 5*s23^4)) +
        p3q*(p2q^4*(-9*s12^3*s13 + 9*s12^2*s13^2 + 18*s12*s13^3 +
            (-11*s12^2*s13 + 17*s12*s13^2 + s13^3)*s23 - 3*s12*s13*s23^2 -
            s13*s23^3) + p1q^4*(9*s12^4 - 9*s12^2*s13^2 +
            (-25*s12^3 - 97*s12^2*s13 - 54*s12*s13^2)*s23 +
            (-67*s12^2 - 87*s12*s13)*s23^2 + (-31*s12 + 2*s13)*s23^3 +
            2*s23^4) + p1q*p2q^3*(-18*s12^3*s13 + 18*s12^2*s13^2 +
            36*s12*s13^3 + (-7*s12^3 - 72*s12^2*s13 - 9*s12*s13^2 + 2*s13^3)*
             s23 + (-3*s12^2 - 47*s12*s13 - 2*s13^2)*s23^2 +
            (7*s12 - s13)*s23^3 + 3*s23^4) + p1q^2*p2q^2*(-18*s12^3*s13 +
            54*s12^2*s13^2 + 72*s12*s13^3 + (-16*s12^3 - 76*s12^2*s13 +
              32*s12*s13^2 + 2*s13^3)*s23 + (13*s12^2 - 21*s12*s13 - 6*s13^2)*
             s23^2 + (34*s12 - 3*s13)*s23^3 + 5*s23^4) +
          p1q^3*p2q*(-54*s12^3*s13 - 18*s12^2*s13^2 + 36*s12*s13^3 +
            (-74*s12^3 - 221*s12^2*s13 - 57*s12*s13^2)*s23 +
            (-102*s12^2 - 125*s12*s13 - 4*s13^2)*s23^2 + (-22*s12 + 2*s13)*
             s23^3 + 6*s23^4)) + p3q^2*(p2q^3*(-18*s12^3*s13 + 18*s12*s13^3 +
            (-17*s12^3 - 55*s12^2*s13 - s12*s13^2 + s13^3)*s23 +
            (-34*s12^2 - 38*s12*s13)*s23^2 + (-17*s12 - s13)*s23^3) +
          p1q*p2q^2*(-36*s12^3*s13 + 36*s12^2*s13^2 + 72*s12*s13^3 +
            (-25*s12^3 - 80*s12^2*s13 + 53*s12*s13^2)*s23 +
            (-23*s12^2 - 23*s12*s13 - 6*s13^2)*s23^2 + (5*s12 - 3*s13)*
             s23^3 + 3*s23^4) + p1q^3*(27*s12^4 - 9*s12^3*s13 -
            36*s12^2*s13^2 + (-56*s12^3 - 245*s12^2*s13 - 126*s12*s13^2)*
             s23 + (-165*s12^2 - 208*s12*s13)*s23^2 + (-78*s12 + 4*s13)*
             s23^3 + 4*s23^4) + p1q^2*p2q*(-108*s12^3*s13 - 54*s12^2*s13^2 +
            54*s12*s13^3 + (-132*s12^3 - 372*s12^2*s13 - 78*s12*s13^2)*s23 +
            (-201*s12^2 - 205*s12*s13 - 4*s13^2)*s23^2 + (-62*s12 + 3*s13)*
             s23^3 + 7*s23^4)))*Log((p1q + p3q)/(p1q + p2q + p3q))^2)/
      (-8*p1q*p2q^4*s12*s13^2*s23 + p1q^4*p2q*(8*s12^2*s13*s23 +
         8*s12*s13*s23^2) + p1q*p3q^4*(8*s12^2*s13*s23 + 8*s12*s13*s23^2) +
       p1q^2*p2q^3*((8*s12^2*s13 - 16*s12*s13^2)*s23 + 8*s12*s13*s23^2) +
       p1q^3*p2q^2*((16*s12^2*s13 - 8*s12*s13^2)*s23 + 16*s12*s13*s23^2) +
       p3q^3*(p1q^2*(24*s12^2*s13*s23 + 24*s12*s13*s23^2) +
         p1q*p2q*((24*s12^2*s13 - 8*s12*s13^2)*s23 + 24*s12*s13*s23^2)) +
       p3q*(p1q^4*(8*s12^2*s13*s23 + 8*s12*s13*s23^2) +
         p1q*p2q^3*((8*s12^2*s13 - 24*s12*s13^2)*s23 + 8*s12*s13*s23^2) +
         p1q^2*p2q^2*((40*s12^2*s13 - 32*s12*s13^2)*s23 + 40*s12*s13*s23^2) +
         p1q^3*p2q*((40*s12^2*s13 - 8*s12*s13^2)*s23 + 40*s12*s13*s23^2)) +
       p3q^2*(p1q^3*(24*s12^2*s13*s23 + 24*s12*s13*s23^2) +
         p1q*p2q^2*((24*s12^2*s13 - 24*s12*s13^2)*s23 + 24*s12*s13*s23^2) +
         p1q^2*p2q*((56*s12^2*s13 - 16*s12*s13^2)*s23 + 56*s12*s13*s23^2))) +
     ((p3q^6*((-36*s12^3*s13 - 72*s12^2*s13^2 - 36*s12*s13^3)*s23 +
          (-9*s12^3 - 72*s12^2*s13 - 63*s12*s13^2)*s23^2 +
          (-9*s12^2 - 27*s12*s13)*s23^3) +
        p2q^6*((-54*s12^3*s13 - 126*s12^2*s13^2 - 90*s12*s13^3 - 18*s13^4)*
           s23 + (-99*s12^2*s13 - 144*s12*s13^2 - 45*s13^3)*s23^2 +
          (-45*s12*s13 - 27*s13^2)*s23^3) + p1q^5*p2q*
         ((72*s12^2*s13 + 72*s12*s13^2)*s23^2 + (18*s12^2 + 108*s12*s13 +
            18*s13^2)*s23^3 + (18*s12 + 18*s13)*s23^4) +
        p1q*p2q^5*(72*s12^2*s13^3 + 72*s12*s13^4 +
          (-144*s12^3*s13 - 234*s12^2*s13^2 + 18*s13^4)*s23 +
          (-180*s12^2*s13 - 144*s12*s13^2)*s23^2 + (9*s12^2 + 9*s13^2)*
           s23^3 + (9*s12 + 27*s13)*s23^4) + p1q^2*p2q^4*
         (144*s12^2*s13^3 + 144*s12*s13^4 + (-216*s12^3*s13 -
            414*s12^2*s13^2 - 36*s12*s13^3 + 18*s13^4)*s23 +
          (-252*s12^2*s13 - 324*s12*s13^2 - 72*s13^3)*s23^2 +
          (18*s12^2 + 18*s12*s13 - 54*s13^2)*s23^3 + (18*s12 + 36*s13)*
           s23^4) + p1q^4*p2q^2*((-72*s12^3*s13 - 216*s12^2*s13^2 -
            144*s12*s13^3)*s23 + (-9*s12^3 - 9*s12^2*s13 - 99*s12*s13^2 -
            27*s13^3)*s23^2 + (9*s12^2 + 144*s12*s13 + 27*s13^2)*s23^3 +
          (18*s12 + 54*s13)*s23^4) + p1q^3*p2q^3*(72*s12^2*s13^3 +
          72*s12*s13^4 + (-153*s12^3*s13 - 405*s12^2*s13^2 - 171*s12*s13^3 +
            9*s13^4)*s23 + (-117*s12^2*s13 - 288*s12*s13^2 - 63*s13^3)*
           s23^2 + (18*s12^2 + 126*s12*s13)*s23^3 + (18*s12 + 72*s13)*
           s23^4) + p3q^5*(p2q*((-162*s12^3*s13 - 342*s12^2*s13^2 -
              198*s12*s13^3 - 18*s13^4)*s23 + (-27*s12^3 - 315*s12^2*s13 -
              333*s12*s13^2 - 45*s13^3)*s23^2 + (-27*s12^2 - 126*s12*s13 -
              27*s13^2)*s23^3) + p1q*(72*s12^4*s13 + 72*s12^3*s13^2 +
            (18*s12^4 - 234*s12^2*s13^2 - 144*s12*s13^3)*s23 +
            (-18*s12^3 - 180*s12^2*s13 - 198*s12*s13^2)*s23^2 +
            (-27*s12^2 - 36*s12*s13 + 9*s13^2)*s23^3 + (9*s12 + 9*s13)*
             s23^4)) + p3q^4*(p2q^2*((-306*s12^3*s13 - 666*s12^2*s13^2 -
              414*s12*s13^3 - 54*s13^4)*s23 + (-36*s12^3 - 585*s12^2*s13 -
              684*s12*s13^2 - 135*s13^3)*s23^2 + (-36*s12^2 - 243*s12*s13 -
              81*s13^2)*s23^3) + p1q^2*(144*s12^4*s13 + 144*s12^3*s13^2 +
            (18*s12^4 - 36*s12^3*s13 - 414*s12^2*s13^2 - 216*s12*s13^3)*s23 +
            (-72*s12^3 - 324*s12^2*s13 - 252*s12*s13^2)*s23^2 +
            (-54*s12^2 + 18*s12*s13 + 18*s13^2)*s23^3 + (36*s12 + 18*s13)*
             s23^4) + p1q*p2q*(216*s12^4*s13 + 72*s12^3*s13^2 -
            144*s12^2*s13^3 + (36*s12^4 - 90*s12^3*s13 - 972*s12^2*s13^2 -
              486*s12*s13^3)*s23 + (-54*s12^3 - 612*s12^2*s13 -
              666*s12*s13^2)*s23^2 + (-63*s12^2 - 108*s12*s13 + 45*s13^2)*
             s23^3 + (27*s12 + 45*s13)*s23^4)) +
        p3q^3*(p2q^3*((-360*s12^3*s13 - 792*s12^2*s13^2 - 504*s12*s13^3 -
              72*s13^4)*s23 + (-36*s12^3 - 684*s12^2*s13 - 828*s12*s13^2 -
              180*s13^3)*s23^2 + (-36*s12^2 - 288*s12*s13 - 108*s13^2)*
             s23^3) + p1q^3*(72*s12^4*s13 + 72*s12^3*s13^2 +
            (9*s12^4 - 171*s12^3*s13 - 405*s12^2*s13^2 - 153*s12*s13^3)*s23 +
            (-63*s12^3 - 288*s12^2*s13 - 117*s12*s13^2)*s23^2 +
            (126*s12*s13 + 18*s13^2)*s23^3 + (72*s12 + 18*s13)*s23^4) +
          p1q^2*p2q*(288*s12^4*s13 - 288*s12^2*s13^3 +
            (36*s12^4 - 252*s12^3*s13 - 1476*s12^2*s13^2 - 612*s12*s13^3)*
             s23 + (-126*s12^3 - 846*s12^2*s13 - 738*s12*s13^2 - 18*s13^3)*
             s23^2 + (-72*s12^2 + 36*s12*s13 + 36*s13^2)*s23^3 +
            (90*s12 + 54*s13)*s23^4) + p1q*p2q^2*(216*s12^4*s13 -
            216*s12^3*s13^2 - 360*s12^2*s13^3 + 72*s12*s13^4 +
            (18*s12^4 - 378*s12^3*s13 - 1746*s12^2*s13^2 - 630*s12*s13^3)*
             s23 + (-72*s12^3 - 990*s12^2*s13 - 1008*s12*s13^2 - 18*s13^3)*
             s23^2 + (-54*s12^2 - 180*s12*s13 + 54*s13^2)*s23^3 +
            (36*s12 + 72*s13)*s23^4)) +
        p3q^2*(p2q^4*((-324*s12^3*s13 - 720*s12^2*s13^2 - 468*s12*s13^3 -
              72*s13^4)*s23 + (-27*s12^3 - 612*s12^2*s13 - 765*s12*s13^2 -
              180*s13^3)*s23^2 + (-27*s12^2 - 261*s12*s13 - 108*s13^2)*
             s23^3) + p1q^4*((-144*s12^3*s13 - 216*s12^2*s13^2 -
              72*s12*s13^3)*s23 + (-27*s12^3 - 99*s12^2*s13 - 9*s12*s13^2 -
              9*s13^3)*s23^2 + (27*s12^2 + 144*s12*s13 + 9*s13^2)*s23^3 +
            (54*s12 + 18*s13)*s23^4) + p1q*p2q^3*(72*s12^4*s13 -
            360*s12^3*s13^2 - 216*s12^2*s13^3 + 216*s12*s13^4 +
            (-630*s12^3*s13 - 1746*s12^2*s13^2 - 378*s12*s13^3 + 18*s13^4)*
             s23 + (-54*s12^3 - 1044*s12^2*s13 - 954*s12*s13^2 - 36*s13^3)*
             s23^2 + (-18*s12^2 - 180*s12*s13 + 18*s13^2)*s23^3 +
            (36*s12 + 72*s13)*s23^4) + p1q^3*p2q*(72*s12^4*s13 -
            72*s12^3*s13^2 - 144*s12^2*s13^3 + (18*s12^4 - 351*s12^3*s13 -
              927*s12^2*s13^2 - 333*s12*s13^3 + 9*s13^4)*s23 +
            (-90*s12^3 - 369*s12^2*s13 - 198*s12*s13^2 - 27*s13^3)*s23^2 +
            (18*s12^2 + 378*s12*s13 + 36*s13^2)*s23^3 + (126*s12 + 72*s13)*
             s23^4) + p1q^2*p2q^2*(144*s12^4*s13 - 432*s12^3*s13^2 -
            432*s12^2*s13^3 + 144*s12*s13^4 + (18*s12^4 - 612*s12^3*s13 -
              2124*s12^2*s13^2 - 612*s12*s13^3 + 18*s13^4)*s23 +
            (-72*s12^3 - 1008*s12^2*s13 - 1008*s12*s13^2 - 72*s13^3)*s23^2 +
            36*s12*s13*s23^3 + (90*s12 + 90*s13)*s23^4)) +
        p3q*(p2q^5*((-198*s12^3*s13 - 450*s12^2*s13^2 - 306*s12*s13^3 -
              54*s13^4)*s23 + (-9*s12^3 - 369*s12^2*s13 - 495*s12*s13^2 -
              135*s13^3)*s23^2 + (-9*s12^2 - 162*s12*s13 - 81*s13^2)*s23^3) +
          p1q^5*((72*s12^2*s13 + 72*s12*s13^2)*s23^2 +
            (18*s12^2 + 108*s12*s13 + 18*s13^2)*s23^3 + (18*s12 + 18*s13)*
             s23^4) + p1q*p2q^4*(-144*s12^3*s13^2 + 72*s12^2*s13^3 +
            216*s12*s13^4 + (-486*s12^3*s13 - 972*s12^2*s13^2 -
              90*s12*s13^3 + 36*s13^4)*s23 + (-18*s12^3 - 666*s12^2*s13 -
              558*s12*s13^2 - 18*s13^3)*s23^2 + (9*s12^2 - 72*s12*s13 +
              9*s13^2)*s23^3 + (27*s12 + 63*s13)*s23^4) +
          p1q^4*p2q*((-72*s12^3*s13 - 144*s12^2*s13^2 - 72*s12*s13^3)*s23 +
            (-36*s12^3 + 180*s12^2*s13 + 180*s12*s13^2 - 36*s13^3)*s23^2 +
            (36*s12^2 + 432*s12*s13 + 36*s13^2)*s23^3 + (72*s12 + 72*s13)*
             s23^4) + p1q^2*p2q^3*(-288*s12^3*s13^2 + 288*s12*s13^4 +
            (-612*s12^3*s13 - 1476*s12^2*s13^2 - 252*s12*s13^3 + 36*s13^4)*
             s23 + (-18*s12^3 - 738*s12^2*s13 - 846*s12*s13^2 - 126*s13^3)*
             s23^2 + (36*s12^2 + 36*s12*s13 - 72*s13^2)*s23^3 +
            (54*s12 + 90*s13)*s23^4) + p1q^3*p2q^2*(-144*s12^3*s13^2 -
            72*s12^2*s13^3 + 72*s12*s13^4 + (9*s12^4 - 333*s12^3*s13 -
              927*s12^2*s13^2 - 351*s12*s13^3 + 18*s13^4)*s23 +
            (-27*s12^3 - 198*s12^2*s13 - 369*s12*s13^2 - 90*s13^3)*s23^2 +
            (36*s12^2 + 378*s12*s13 + 18*s13^2)*s23^3 + (72*s12 + 126*s13)*
             s23^4)))*Log((p2q + p3q)/(p1q + p2q + p3q))^2)/
      (p1q*p2q^5*(8*s12^2*s13 + 8*s12*s13^2)*s23^2 +
       p1q*p3q^5*(8*s12^2*s13 + 8*s12*s13^2)*s23^2 - 8*p1q^4*p2q^2*s12*s13*
        s23^3 + p1q^3*p2q^3*((8*s12^2*s13 + 8*s12*s13^2)*s23^2 -
         16*s12*s13*s23^3) + p1q^2*p2q^4*((16*s12^2*s13 + 16*s12*s13^2)*
          s23^2 - 8*s12*s13*s23^3) +
       p3q^2*(p1q*p2q^3*(80*s12^2*s13 + 80*s12*s13^2)*s23^2 -
         8*p1q^4*s12*s13*s23^3 + p1q^3*p2q*((24*s12^2*s13 + 24*s12*s13^2)*
            s23^2 - 48*s12*s13*s23^3) + p1q^2*p2q^2*
          ((96*s12^2*s13 + 96*s12*s13^2)*s23^2 - 48*s12*s13*s23^3)) +
       p3q*(p1q*p2q^4*(40*s12^2*s13 + 40*s12*s13^2)*s23^2 -
         16*p1q^4*p2q*s12*s13*s23^3 + p1q^3*p2q^2*
          ((24*s12^2*s13 + 24*s12*s13^2)*s23^2 - 48*s12*s13*s23^3) +
         p1q^2*p2q^3*((64*s12^2*s13 + 64*s12*s13^2)*s23^2 -
           32*s12*s13*s23^3)) +
       p3q^3*(p1q*p2q^2*(80*s12^2*s13 + 80*s12*s13^2)*s23^2 +
         p1q^2*p2q*((64*s12^2*s13 + 64*s12*s13^2)*s23^2 - 32*s12*s13*s23^3) +
         p1q^3*((8*s12^2*s13 + 8*s12*s13^2)*s23^2 - 16*s12*s13*s23^3)) +
       p3q^4*(p1q*p2q*(40*s12^2*s13 + 40*s12*s13^2)*s23^2 +
         p1q^2*((16*s12^2*s13 + 16*s12*s13^2)*s23^2 - 8*s12*s13*s23^3))) +
     ((p3q^5*((-9*s12^3 - 36*s12^2*s13 - 27*s12*s13^2)*s23 +
          (-27*s12^2 - 45*s12*s13)*s23^2 - 18*s12*s23^3) +
        p1q^4*p2q*((-36*s12^2*s13 - 36*s12*s13^2)*s23 +
          (-9*s12^2 - 54*s12*s13 - 9*s13^2)*s23^2 + (-9*s12 - 9*s13)*s23^3) +
        p2q^5*((-27*s12^2*s13 - 36*s12*s13^2 - 9*s13^3)*s23 +
          (-45*s12*s13 - 27*s13^2)*s23^2 - 18*s13*s23^3) +
        p1q^2*p2q^3*(72*s12*s13^3 + (-108*s12^2*s13 - 18*s12*s13^2 +
            18*s13^3)*s23 + (-92*s12*s13 - 34*s13^2)*s23^2 +
          (18*s12 - 34*s13)*s23^3 + 2*s23^4) + p1q*p2q^4*
         (36*s12*s13^3 + (-72*s12^2*s13 - 18*s12*s13^2 + 18*s13^3)*s23 +
          (s12^2 - 70*s12*s13 - 15*s13^2)*s23^2 + (11*s12 - 23*s13)*s23^3 +
          2*s23^4) + p1q^3*p2q^2*(36*s12*s13^3 +
          (-81*s12^2*s13 - 36*s12*s13^2 + 9*s13^3)*s23 +
          (-8*s12^2 - 81*s12*s13 - 17*s13^2)*s23^2 + (2*s12 - 16*s13)*s23^3 +
          2*s23^4) + p3q^4*(p2q*((-18*s12^3 - 99*s12^2*s13 - 90*s12*s13^2 -
              9*s13^3)*s23 + (-54*s12^2 - 135*s12*s13 - 27*s13^2)*s23^2 +
            (-36*s12 - 18*s13)*s23^3) + p1q*(36*s12^3*s13 +
            (18*s12^3 - 18*s12^2*s13 - 72*s12*s13^2)*s23 +
            (-15*s12^2 - 70*s12*s13 + s13^2)*s23^2 + (-23*s12 + 11*s13)*
             s23^3 + 2*s23^4)) +
        p3q^3*(p2q^2*((-18*s12^3 - 126*s12^2*s13 - 126*s12*s13^2 - 18*s13^3)*
             s23 + (-54*s12^2 - 180*s12*s13 - 54*s13^2)*s23^2 +
            (-36*s12 - 36*s13)*s23^3) + p1q^2*(72*s12^3*s13 +
            (18*s12^3 - 18*s12^2*s13 - 108*s12*s13^2)*s23 +
            (-34*s12^2 - 92*s12*s13)*s23^2 + (-34*s12 + 18*s13)*s23^3 +
            2*s23^4) + p1q*p2q*(72*s12^3*s13 - 72*s12^2*s13^2 +
            (18*s12^3 - 108*s12^2*s13 - 198*s12*s13^2)*s23 +
            (-66*s12^2 - 162*s12*s13 - 16*s13^2)*s23^2 + (-48*s12 + 20*s13)*
             s23^3 + 4*s23^4)) +
        p3q*(p2q^4*((-9*s12^3 - 90*s12^2*s13 - 99*s12*s13^2 - 18*s13^3)*s23 +
            (-27*s12^2 - 135*s12*s13 - 54*s13^2)*s23^2 + (-18*s12 - 36*s13)*
             s23^3) + p1q^4*((-36*s12^2*s13 - 36*s12*s13^2)*s23 +
            (-9*s12^2 - 54*s12*s13 - 9*s13^2)*s23^2 + (-9*s12 - 9*s13)*
             s23^3) + p1q*p2q^3*(-72*s12^2*s13^2 + 72*s12*s13^3 +
            (-198*s12^2*s13 - 108*s12*s13^2 + 18*s13^3)*s23 +
            (-16*s12^2 - 162*s12*s13 - 66*s13^2)*s23^2 + (20*s12 - 48*s13)*
             s23^3 + 4*s23^4) + p1q^3*p2q*(-72*s12^2*s13^2 +
            (9*s12^3 - 189*s12^2*s13 - 189*s12*s13^2 + 9*s13^3)*s23 +
            (-25*s12^2 - 198*s12*s13 - 25*s13^2)*s23^2 + (-14*s12 - 14*s13)*
             s23^3 + 4*s23^4) + p1q^2*p2q^2*(-144*s12^2*s13^2 +
            72*s12*s13^3 + (-288*s12^2*s13 - 198*s12*s13^2 + 18*s13^3)*s23 +
            (-34*s12^2 - 204*s12*s13 - 68*s13^2)*s23^2 + (20*s12 - 32*s13)*
             s23^3 + 6*s23^4)) +
        p3q^2*(p2q^3*((-18*s12^3 - 126*s12^2*s13 - 126*s12*s13^2 - 18*s13^3)*
             s23 + (-54*s12^2 - 180*s12*s13 - 54*s13^2)*s23^2 +
            (-36*s12 - 36*s13)*s23^3) + p1q^3*(36*s12^3*s13 +
            (9*s12^3 - 36*s12^2*s13 - 81*s12*s13^2)*s23 +
            (-17*s12^2 - 81*s12*s13 - 8*s13^2)*s23^2 + (-16*s12 + 2*s13)*
             s23^3 + 2*s23^4) + p1q*p2q^2*(36*s12^3*s13 - 144*s12^2*s13^2 +
            36*s12*s13^3 + (-216*s12^2*s13 - 216*s12*s13^2)*s23 +
            (-68*s12^2 - 184*s12*s13 - 68*s13^2)*s23^2 + (-16*s12 - 16*s13)*
             s23^3 + 4*s23^4) + p1q^2*p2q*(72*s12^3*s13 - 144*s12^2*s13^2 +
            (18*s12^3 - 198*s12^2*s13 - 288*s12*s13^2)*s23 +
            (-68*s12^2 - 204*s12*s13 - 34*s13^2)*s23^2 + (-32*s12 + 20*s13)*
             s23^3 + 6*s23^4)))*Log(-s12 - s13 - s23)^2)/
      (9*p1q^3*p2q^2*s12*s13*s23^2 + 18*p1q^2*p2q^3*s12*s13*s23^2 +
       9*p1q*p2q^4*s12*s13*s23^2 + 9*p1q*p3q^4*s12*s13*s23^2 +
       p3q^3*(18*p1q^2*s12*s13*s23^2 + 36*p1q*p2q*s12*s13*s23^2) +
       p3q^2*(9*p1q^3*s12*s13*s23^2 + 54*p1q^2*p2q*s12*s13*s23^2 +
         54*p1q*p2q^2*s12*s13*s23^2) + p3q*(18*p1q^3*p2q*s12*s13*s23^2 +
         54*p1q^2*p2q^2*s12*s13*s23^2 + 36*p1q*p2q^3*s12*s13*s23^2)) +
     ((p3q^5*((-9*s12^2*s13 - 9*s12*s13^2)*s23 - 9*s12*s13*s23^2) +
        p2q^5*((-18*s12^2*s13 - 27*s12*s13^2 - 9*s13^3)*s23 +
          (-36*s12*s13 - 27*s13^2)*s23^2 - 18*s13*s23^3) +
        p1q^4*p2q*((-18*s12^2*s13 - 18*s12*s13^2)*s23 +
          (-27*s12*s13 - 9*s13^2)*s23^2 - 9*s13*s23^3) +
        p1q*p2q^4*(18*s12*s13^3 + (-36*s12^2*s13 - 18*s12*s13^2 + 18*s13^3)*
           s23 + (s12^2 - 61*s12*s13 - 15*s13^2)*s23^2 +
          (2*s12 - 23*s13)*s23^3 + 2*s23^4) + p1q^3*p2q^2*
         (18*s12*s13^3 + (-36*s12^2*s13 - 27*s12*s13^2 + 9*s13^3)*s23 +
          (s12^2 - 54*s12*s13 - 17*s13^2)*s23^2 + (2*s12 - 16*s13)*s23^3 +
          2*s23^4) + p1q^2*p2q^3*(36*s12*s13^3 +
          (-54*s12^2*s13 - 36*s12*s13^2 + 18*s13^3)*s23 +
          (-92*s12*s13 - 34*s13^2)*s23^2 - 34*s13*s23^3 + 2*s23^4) +
        p3q^4*(p2q*((-36*s12^2*s13 - 45*s12*s13^2 - 9*s13^3)*s23 +
            (-54*s12*s13 - 27*s13^2)*s23^2 - 18*s13*s23^3) +
          p1q*(18*s12^3*s13 - 36*s12*s13^2*s23 + (3*s12^2 - 7*s12*s13 +
              s13^2)*s23^2 + (4*s12 + 11*s13)*s23^3 + 2*s23^4)) +
        p3q^3*(p2q^2*((-54*s12^2*s13 - 72*s12*s13^2 - 18*s13^3)*s23 +
            (-90*s12*s13 - 54*s13^2)*s23^2 - 36*s13*s23^3) +
          p1q^2*(36*s12^3*s13 + (18*s12^2*s13 - 54*s12*s13^2)*s23 +
            (2*s12^2 - 2*s12*s13)*s23^2 + (2*s12 + 18*s13)*s23^3 + 2*s23^4) +
          p1q*p2q*(36*s12^3*s13 - 36*s12^2*s13^2 - 108*s12*s13^2*s23 +
            (6*s12^2 - 18*s12*s13 - 16*s13^2)*s23^2 + (6*s12 + 20*s13)*
             s23^3 + 4*s23^4)) +
        p3q*(p2q^4*((-45*s12^2*s13 - 63*s12*s13^2 - 18*s13^3)*s23 +
            (-81*s12*s13 - 54*s13^2)*s23^2 - 36*s13*s23^3) +
          p1q^4*((-18*s12^2*s13 - 18*s12*s13^2)*s23 + (-27*s12*s13 - 9*s13^2)*
             s23^2 - 9*s13*s23^3) + p1q*p2q^3*(-36*s12^2*s13^2 +
            36*s12*s13^3 + (-90*s12^2*s13 - 108*s12*s13^2 + 18*s13^3)*s23 +
            (2*s12^2 - 144*s12*s13 - 66*s13^2)*s23^2 + (2*s12 - 48*s13)*
             s23^3 + 4*s23^4) + p1q^3*p2q*(-36*s12^2*s13^2 +
            (-81*s12^2*s13 - 108*s12*s13^2 + 9*s13^3)*s23 +
            (2*s12^2 - 99*s12*s13 - 25*s13^2)*s23^2 + (4*s12 - 14*s13)*
             s23^3 + 4*s23^4) + p1q^2*p2q^2*(-72*s12^2*s13^2 + 36*s12*s13^3 +
            (-108*s12^2*s13 - 162*s12*s13^2 + 18*s13^3)*s23 +
            (2*s12^2 - 150*s12*s13 - 68*s13^2)*s23^2 + (2*s12 - 32*s13)*
             s23^3 + 6*s23^4)) +
        p3q^2*(p2q^3*((-54*s12^2*s13 - 72*s12*s13^2 - 18*s13^3)*s23 +
            (-90*s12*s13 - 54*s13^2)*s23^2 - 36*s13*s23^3) +
          p1q^3*(18*s12^3*s13 + (-9*s12^2*s13 - 45*s12*s13^2)*s23 +
            (s12^2 - 27*s12*s13 - 8*s13^2)*s23^2 + (2*s12 + 2*s13)*s23^3 +
            2*s23^4) + p1q*p2q^2*(18*s12^3*s13 - 72*s12^2*s13^2 +
            18*s12*s13^3 + (-54*s12^2*s13 - 162*s12*s13^2)*s23 +
            (4*s12^2 - 94*s12*s13 - 68*s13^2)*s23^2 + (2*s12 - 16*s13)*
             s23^3 + 4*s23^4) + p1q^2*p2q*(36*s12^3*s13 - 72*s12^2*s13^2 +
            (-36*s12^2*s13 - 180*s12*s13^2)*s23 + (4*s12^2 - 60*s12*s13 -
              34*s13^2)*s23^2 + (4*s12 + 20*s13)*s23^3 + 6*s23^4)))*
       Log(s12/(s12 + s13 + s23))^2)/(8*p1q^3*p2q^2*s12*s13*s23^2 +
       16*p1q^2*p2q^3*s12*s13*s23^2 + 8*p1q*p2q^4*s12*s13*s23^2 +
       8*p1q*p3q^4*s12*s13*s23^2 + p3q^3*(16*p1q^2*s12*s13*s23^2 +
         32*p1q*p2q*s12*s13*s23^2) + p3q^2*(8*p1q^3*s12*s13*s23^2 +
         48*p1q^2*p2q*s12*s13*s23^2 + 48*p1q*p2q^2*s12*s13*s23^2) +
       p3q*(16*p1q^3*p2q*s12*s13*s23^2 + 48*p1q^2*p2q^2*s12*s13*s23^2 +
         32*p1q*p2q^3*s12*s13*s23^2)) +
     ((p2q^5*((-9*s12^2*s13 - 9*s12*s13^2)*s23 - 9*s12*s13*s23^2) +
        p3q^5*((-9*s12^3 - 27*s12^2*s13 - 18*s12*s13^2)*s23 +
          (-27*s12^2 - 36*s12*s13)*s23^2 - 18*s12*s23^3) +
        p1q^4*p2q*((-18*s12^2*s13 - 18*s12*s13^2)*s23 +
          (-9*s12^2 - 27*s12*s13)*s23^2 - 9*s12*s23^3) +
        p1q^3*p2q^2*(18*s12*s13^3 + (-45*s12^2*s13 - 9*s12*s13^2)*s23 +
          (-8*s12^2 - 27*s12*s13 + s13^2)*s23^2 + (2*s12 + 2*s13)*s23^3 +
          2*s23^4) + p1q^2*p2q^3*(36*s12*s13^3 +
          (-54*s12^2*s13 + 18*s12*s13^2)*s23 + (-2*s12*s13 + 2*s13^2)*s23^2 +
          (18*s12 + 2*s13)*s23^3 + 2*s23^4) + p1q*p2q^4*
         (18*s12*s13^3 - 36*s12^2*s13*s23 + (s12^2 - 7*s12*s13 + 3*s13^2)*
           s23^2 + (11*s12 + 4*s13)*s23^3 + 2*s23^4) +
        p3q^4*(p2q*((-18*s12^3 - 63*s12^2*s13 - 45*s12*s13^2)*s23 +
            (-54*s12^2 - 81*s12*s13)*s23^2 - 36*s12*s23^3) +
          p1q*(18*s12^3*s13 + (18*s12^3 - 18*s12^2*s13 - 36*s12*s13^2)*s23 +
            (-15*s12^2 - 61*s12*s13 + s13^2)*s23^2 + (-23*s12 + 2*s13)*
             s23^3 + 2*s23^4)) +
        p3q^3*(p2q^2*((-18*s12^3 - 72*s12^2*s13 - 54*s12*s13^2)*s23 +
            (-54*s12^2 - 90*s12*s13)*s23^2 - 36*s12*s23^3) +
          p1q^2*(36*s12^3*s13 + (18*s12^3 - 36*s12^2*s13 - 54*s12*s13^2)*
             s23 + (-34*s12^2 - 92*s12*s13)*s23^2 - 34*s12*s23^3 + 2*s23^4) +
          p1q*p2q*(36*s12^3*s13 - 36*s12^2*s13^2 +
            (18*s12^3 - 108*s12^2*s13 - 90*s12*s13^2)*s23 +
            (-66*s12^2 - 144*s12*s13 + 2*s13^2)*s23^2 + (-48*s12 + 2*s13)*
             s23^3 + 4*s23^4)) +
        p3q^2*(p2q^3*((-18*s12^3 - 72*s12^2*s13 - 54*s12*s13^2)*s23 +
            (-54*s12^2 - 90*s12*s13)*s23^2 - 36*s12*s23^3) +
          p1q^3*(18*s12^3*s13 + (9*s12^3 - 27*s12^2*s13 - 36*s12*s13^2)*s23 +
            (-17*s12^2 - 54*s12*s13 + s13^2)*s23^2 + (-16*s12 + 2*s13)*
             s23^3 + 2*s23^4) + p1q*p2q^2*(18*s12^3*s13 - 72*s12^2*s13^2 +
            18*s12*s13^3 + (-162*s12^2*s13 - 54*s12*s13^2)*s23 +
            (-68*s12^2 - 94*s12*s13 + 4*s13^2)*s23^2 + (-16*s12 + 2*s13)*
             s23^3 + 4*s23^4) + p1q^2*p2q*(36*s12^3*s13 - 72*s12^2*s13^2 +
            (18*s12^3 - 162*s12^2*s13 - 108*s12*s13^2)*s23 +
            (-68*s12^2 - 150*s12*s13 + 2*s13^2)*s23^2 + (-32*s12 + 2*s13)*
             s23^3 + 6*s23^4)) +
        p3q*(p2q^4*((-9*s12^3 - 45*s12^2*s13 - 36*s12*s13^2)*s23 +
            (-27*s12^2 - 54*s12*s13)*s23^2 - 18*s12*s23^3) +
          p1q^4*((-18*s12^2*s13 - 18*s12*s13^2)*s23 + (-9*s12^2 - 27*s12*s13)*
             s23^2 - 9*s12*s23^3) + p1q^3*p2q*(-36*s12^2*s13^2 +
            (9*s12^3 - 108*s12^2*s13 - 81*s12*s13^2)*s23 +
            (-25*s12^2 - 99*s12*s13 + 2*s13^2)*s23^2 + (-14*s12 + 4*s13)*
             s23^3 + 4*s23^4) + p1q*p2q^3*(-36*s12^2*s13^2 + 36*s12*s13^3 -
            108*s12^2*s13*s23 + (-16*s12^2 - 18*s12*s13 + 6*s13^2)*s23^2 +
            (20*s12 + 6*s13)*s23^3 + 4*s23^4) + p1q^2*p2q^2*
           (-72*s12^2*s13^2 + 36*s12*s13^3 + (-180*s12^2*s13 - 36*s12*s13^2)*
             s23 + (-34*s12^2 - 60*s12*s13 + 4*s13^2)*s23^2 +
            (20*s12 + 4*s13)*s23^3 + 6*s23^4)))*Log(s13/(s12 + s13 + s23))^2)/
      (8*p1q^3*p2q^2*s12*s13*s23^2 + 16*p1q^2*p2q^3*s12*s13*s23^2 +
       8*p1q*p2q^4*s12*s13*s23^2 + 8*p1q*p3q^4*s12*s13*s23^2 +
       p3q^3*(16*p1q^2*s12*s13*s23^2 + 32*p1q*p2q*s12*s13*s23^2) +
       p3q^2*(8*p1q^3*s12*s13*s23^2 + 48*p1q^2*p2q*s12*s13*s23^2 +
         48*p1q*p2q^2*s12*s13*s23^2) + p3q*(16*p1q^3*p2q*s12*s13*s23^2 +
         48*p1q^2*p2q^2*s12*s13*s23^2 + 32*p1q*p2q^3*s12*s13*s23^2)) +
     ((p3q^5*((-90*s12^8 - 549*s12^7*s13 - 2781*s12^6*s13^2 -
            7056*s12^5*s13^3 - 8838*s12^4*s13^4 - 5427*s12^3*s13^5 -
            1323*s12^2*s13^6)*s23 + (-270*s12^7 - 1251*s12^6*s13 -
            4914*s12^5*s13^2 - 9180*s12^4*s13^3 - 7704*s12^3*s13^4 -
            2457*s12^2*s13^5)*s23^2 + (-180*s12^6 - 612*s12^5*s13 -
            1980*s12^4*s13^2 - 2466*s12^3*s13^3 - 1134*s12^2*s13^4)*s23^3) +
        p2q^5*((-1323*s12^6*s13^2 - 5427*s12^5*s13^3 - 8838*s12^4*s13^4 -
            7056*s12^3*s13^5 - 2781*s12^2*s13^6 - 549*s12*s13^7 - 90*s13^8)*
           s23 + (-2457*s12^5*s13^2 - 7704*s12^4*s13^3 - 9180*s12^3*s13^4 -
            4914*s12^2*s13^5 - 1251*s12*s13^6 - 270*s13^7)*s23^2 +
          (-1134*s12^4*s13^2 - 2466*s12^3*s13^3 - 1980*s12^2*s13^4 -
            612*s12*s13^5 - 180*s13^6)*s23^3) +
        p1q*p2q^4*(1512*s12^5*s13^4 + 4536*s12^4*s13^5 + 4536*s12^3*s13^6 +
          1512*s12^2*s13^7 + (-3024*s12^6*s13^2 - 10530*s12^5*s13^3 -
            10764*s12^4*s13^4 - 1746*s12^3*s13^5 + 1890*s12^2*s13^6 +
            468*s12*s13^7 + 90*s13^8)*s23 + (187*s12^6*s13 -
            3300*s12^5*s13^2 - 7746*s12^4*s13^3 - 3334*s12^3*s13^4 +
            2451*s12^2*s13^5 + 1866*s12*s13^6 + 340*s13^7)*s23^2 +
          (567*s12^5*s13 + 1214*s12^4*s13^2 + 2874*s12^3*s13^3 +
            5036*s12^2*s13^4 + 3363*s12*s13^5 + 770*s13^6)*s23^3 +
          (378*s12^4*s13 + 1179*s12^3*s13^2 + 2100*s12^2*s13^3 +
            1603*s12*s13^4 + 520*s13^5)*s23^4) + p1q^2*p2q^3*
         (3024*s12^5*s13^4 + 9072*s12^4*s13^5 + 9072*s12^3*s13^6 +
          3024*s12^2*s13^7 + (-4536*s12^6*s13^2 - 16308*s12^5*s13^3 -
            16740*s12^4*s13^4 - 2592*s12^3*s13^5 + 2484*s12^2*s13^6 +
            108*s12*s13^7)*s23 + (-4*s12^6*s13 - 6777*s12^5*s13^2 -
            17578*s12^4*s13^3 - 14704*s12^3*s13^4 - 4572*s12^2*s13^5 -
            943*s12*s13^6 - 270*s13^7)*s23^2 +
          (115*s12^5*s13 - 3120*s12^4*s13^2 - 8920*s12^3*s13^3 -
            7278*s12^2*s13^4 - 2525*s12*s13^5 - 500*s13^6)*s23^3 +
          (-302*s12^4*s13 - 3507*s12^3*s13^2 - 6428*s12^2*s13^3 -
            3737*s12*s13^4 - 730*s13^5)*s23^4 +
          (-417*s12^3*s13 - 1852*s12^2*s13^2 - 1719*s12*s13^3 - 500*s13^4)*
           s23^5) + p1q^4*p2q*((-1512*s12^6*s13^2 - 6048*s12^5*s13^3 -
            9072*s12^4*s13^4 - 6048*s12^3*s13^5 - 1512*s12^2*s13^6)*s23 +
          (-189*s12^6*s13 - 3753*s12^5*s13^2 - 10314*s12^4*s13^3 -
            10314*s12^3*s13^4 - 3753*s12^2*s13^5 - 189*s12*s13^6)*s23^2 +
          (-495*s12^5*s13 - 3600*s12^4*s13^2 - 6210*s12^3*s13^3 -
            3600*s12^2*s13^4 - 495*s12*s13^5)*s23^3 +
          (-90*s12^5 - 576*s12^4*s13 - 1818*s12^3*s13^2 - 1818*s12^2*s13^3 -
            576*s12*s13^4 - 90*s13^5)*s23^4 + (-90*s12^4 - 180*s12^3*s13 -
            396*s12^2*s13^2 - 180*s12*s13^3 - 90*s13^4)*s23^5) +
        p1q^3*p2q^2*(1512*s12^5*s13^4 + 4536*s12^4*s13^5 + 4536*s12^3*s13^6 +
          1512*s12^2*s13^7 + (-3213*s12^6*s13^2 - 12447*s12^5*s13^3 -
            15282*s12^4*s13^4 - 5886*s12^3*s13^5 + 351*s12^2*s13^6 +
            189*s12*s13^7)*s23 + (-2*s12^6*s13 - 5383*s12^5*s13^2 -
            14780*s12^4*s13^3 - 12386*s12^3*s13^4 - 2602*s12^2*s13^5 +
            385*s12*s13^6)*s23^2 + (255*s12^5*s13 - 1600*s12^4*s13^2 -
            3350*s12^3*s13^3 - 286*s12^2*s13^4 + 1047*s12*s13^5 + 270*s13^6)*
           s23^3 + (70*s12^5 + 1062*s12^4*s13 + 2264*s12^3*s13^2 +
            2534*s12^2*s13^3 + 1386*s12*s13^4 + 340*s13^5)*s23^4 +
          (230*s12^4 + 1625*s12^3*s13 + 2790*s12^2*s13^2 + 1625*s12*s13^3 +
            230*s13^4)*s23^5 + (160*s12^3 + 728*s12^2*s13 + 728*s12*s13^2 +
            160*s13^3)*s23^6) +
        p3q^4*(p2q*((-180*s12^8 - 1098*s12^7*s13 - 6867*s12^6*s13^2 -
              18711*s12^5*s13^3 - 24480*s12^4*s13^4 - 16074*s12^3*s13^5 -
              4545*s12^2*s13^6 - 189*s12*s13^7)*s23 +
            (-540*s12^7 - 2376*s12^6*s13 - 12033*s12^5*s13^2 -
              24678*s12^4*s13^3 - 22788*s12^3*s13^4 - 8874*s12^2*s13^5 -
              567*s12*s13^6)*s23^2 + (-360*s12^6 - 1098*s12^5*s13 -
              4986*s12^4*s13^2 - 6930*s12^3*s13^3 - 4140*s12^2*s13^4 -
              378*s12*s13^5)*s23^3) + p1q*(1512*s12^7*s13^2 +
            4536*s12^6*s13^3 + 4536*s12^5*s13^4 + 1512*s12^4*s13^5 +
            (90*s12^8 + 468*s12^7*s13 + 1890*s12^6*s13^2 - 1746*s12^5*s13^3 -
              10764*s12^4*s13^4 - 10530*s12^3*s13^5 - 3024*s12^2*s13^6)*s23 +
            (340*s12^7 + 1866*s12^6*s13 + 2451*s12^5*s13^2 - 3334*s12^4*s13^
                3 - 7746*s12^3*s13^4 - 3300*s12^2*s13^5 + 187*s12*s13^6)*
             s23^2 + (770*s12^6 + 3363*s12^5*s13 + 5036*s12^4*s13^2 +
              2874*s12^3*s13^3 + 1214*s12^2*s13^4 + 567*s12*s13^5)*s23^3 +
            (520*s12^5 + 1603*s12^4*s13 + 2100*s12^3*s13^2 + 1179*s12^2*s13^
                3 + 378*s12*s13^4)*s23^4)) +
        p3q^3*(p2q^2*((-90*s12^8 - 738*s12^7*s13 - 7290*s12^6*s13^2 -
              21474*s12^5*s13^3 - 29250*s12^4*s13^4 - 20466*s12^3*s13^5 -
              6426*s12^2*s13^6 - 378*s12*s13^7)*s23 +
            (-270*s12^7 - 1566*s12^6*s13 - 13284*s12^5*s13^2 -
              29196*s12^4*s13^3 - 28782*s12^3*s13^4 - 12582*s12^2*s13^5 -
              1008*s12*s13^6)*s23^2 + (-180*s12^6 - 738*s12^5*s13 -
              5904*s12^4*s13^2 - 8460*s12^3*s13^3 - 5904*s12^2*s13^4 -
              630*s12*s13^5)*s23^3) + p1q*p2q*(3024*s12^7*s13^2 +
            6048*s12^6*s13^3 - 6048*s12^4*s13^5 - 3024*s12^3*s13^6 +
            (90*s12^8 + 198*s12^7*s13 + 630*s12^6*s13^2 - 15480*s12^5*s13^3 -
              39654*s12^4*s13^4 - 30798*s12^3*s13^5 - 7146*s12^2*s13^6)*s23 +
            (590*s12^7 + 2997*s12^6*s13 + 1641*s12^5*s13^2 - 13676*s12^4*s13^
                3 - 21654*s12^3*s13^4 - 8457*s12^2*s13^5 + 287*s12*s13^6)*
             s23^2 + (1540*s12^6 + 6966*s12^5*s13 + 10868*s12^4*s13^2 +
              6428*s12^3*s13^3 + 3224*s12^2*s13^4 + 1374*s12*s13^5)*s23^3 +
            (1040*s12^5 + 3529*s12^4*s13 + 5105*s12^3*s13^2 +
              3263*s12^2*s13^3 + 1079*s12*s13^4)*s23^4) +
          p1q^2*(3024*s12^7*s13^2 + 9072*s12^6*s13^3 + 9072*s12^5*s13^4 +
            3024*s12^4*s13^5 + (108*s12^7*s13 + 2484*s12^6*s13^2 -
              2592*s12^5*s13^3 - 16740*s12^4*s13^4 - 16308*s12^3*s13^5 -
              4536*s12^2*s13^6)*s23 + (-270*s12^7 - 943*s12^6*s13 -
              4572*s12^5*s13^2 - 14704*s12^4*s13^3 - 17578*s12^3*s13^4 -
              6777*s12^2*s13^5 - 4*s12*s13^6)*s23^2 +
            (-500*s12^6 - 2525*s12^5*s13 - 7278*s12^4*s13^2 -
              8920*s12^3*s13^3 - 3120*s12^2*s13^4 + 115*s12*s13^5)*s23^3 +
            (-730*s12^5 - 3737*s12^4*s13 - 6428*s12^3*s13^2 -
              3507*s12^2*s13^3 - 302*s12*s13^4)*s23^4 +
            (-500*s12^4 - 1719*s12^3*s13 - 1852*s12^2*s13^2 - 417*s12*s13^3)*
             s23^5)) + p3q^2*(p2q^3*((-378*s12^7*s13 - 6426*s12^6*s13^2 -
              20466*s12^5*s13^3 - 29250*s12^4*s13^4 - 21474*s12^3*s13^5 -
              7290*s12^2*s13^6 - 738*s12*s13^7 - 90*s13^8)*s23 +
            (-1008*s12^6*s13 - 12582*s12^5*s13^2 - 28782*s12^4*s13^3 -
              29196*s12^3*s13^4 - 13284*s12^2*s13^5 - 1566*s12*s13^6 -
              270*s13^7)*s23^2 + (-630*s12^5*s13 - 5904*s12^4*s13^2 -
              8460*s12^3*s13^3 - 5904*s12^2*s13^4 - 738*s12*s13^5 -
              180*s13^6)*s23^3) + p1q*p2q^2*(1512*s12^7*s13^2 -
            1512*s12^6*s13^3 - 12096*s12^5*s13^4 - 12096*s12^4*s13^5 -
            1512*s12^3*s13^6 + 1512*s12^2*s13^7 + (-270*s12^7*s13 -
              5382*s12^6*s13^2 - 34002*s12^5*s13^3 - 57780*s12^4*s13^4 -
              34002*s12^3*s13^5 - 5382*s12^2*s13^6 - 270*s12*s13^7)*s23 +
            (250*s12^7 + 1231*s12^6*s13 - 5967*s12^5*s13^2 - 24250*s12^4*s13^
                3 - 24250*s12^3*s13^4 - 5967*s12^2*s13^5 + 1231*s12*s13^6 +
              250*s13^7)*s23^2 + (770*s12^6 + 4410*s12^5*s13 +
              7842*s12^4*s13^2 + 7108*s12^3*s13^3 + 7842*s12^2*s13^4 +
              4410*s12*s13^5 + 770*s13^6)*s23^3 +
            (520*s12^5 + 2627*s12^4*s13 + 5089*s12^3*s13^2 + 5089*s12^2*s13^
                3 + 2627*s12*s13^4 + 520*s13^5)*s23^4) +
          p1q^2*p2q*(3024*s12^7*s13^2 + 3024*s12^6*s13^3 - 9072*s12^5*s13^4 -
            15120*s12^4*s13^5 - 6048*s12^3*s13^6 +
            (108*s12^7*s13 - 2196*s12^6*s13^2 - 31032*s12^5*s13^3 -
              64260*s12^4*s13^4 - 44748*s12^3*s13^5 - 9216*s12^2*s13^6)*s23 +
            (-270*s12^7 - 936*s12^6*s13 - 11403*s12^5*s13^2 -
              36312*s12^4*s13^3 - 39186*s12^3*s13^4 - 13608*s12^2*s13^5 +
              3*s12*s13^6)*s23^2 + (-730*s12^6 - 4143*s12^5*s13 -
              14454*s12^4*s13^2 - 21360*s12^3*s13^3 - 10296*s12^2*s13^4 -
              1503*s12*s13^5 - 230*s13^6)*s23^3 +
            (-1460*s12^5 - 7776*s12^4*s13 - 16363*s12^3*s13^2 -
              13442*s12^2*s13^3 - 4341*s12*s13^4 - 730*s13^5)*s23^4 +
            (-1000*s12^4 - 3855*s12^3*s13 - 5556*s12^2*s13^2 -
              2553*s12*s13^3 - 500*s13^4)*s23^5) +
          p1q^3*(1512*s12^7*s13^2 + 4536*s12^6*s13^3 + 4536*s12^5*s13^4 +
            1512*s12^4*s13^5 + (189*s12^7*s13 + 351*s12^6*s13^2 -
              5886*s12^5*s13^3 - 15282*s12^4*s13^4 - 12447*s12^3*s13^5 -
              3213*s12^2*s13^6)*s23 + (385*s12^6*s13 - 2602*s12^5*s13^2 -
              12386*s12^4*s13^3 - 14780*s12^3*s13^4 - 5383*s12^2*s13^5 -
              2*s12*s13^6)*s23^2 + (270*s12^6 + 1047*s12^5*s13 -
              286*s12^4*s13^2 - 3350*s12^3*s13^3 - 1600*s12^2*s13^4 +
              255*s12*s13^5)*s23^3 + (340*s12^5 + 1386*s12^4*s13 +
              2534*s12^3*s13^2 + 2264*s12^2*s13^3 + 1062*s12*s13^4 +
              70*s13^5)*s23^4 + (230*s12^4 + 1625*s12^3*s13 +
              2790*s12^2*s13^2 + 1625*s12*s13^3 + 230*s13^4)*s23^5 +
            (160*s12^3 + 728*s12^2*s13 + 728*s12*s13^2 + 160*s13^3)*s23^6)) +
        p3q*(p2q^4*((-189*s12^7*s13 - 4545*s12^6*s13^2 - 16074*s12^5*s13^3 -
              24480*s12^4*s13^4 - 18711*s12^3*s13^5 - 6867*s12^2*s13^6 -
              1098*s12*s13^7 - 180*s13^8)*s23 + (-567*s12^6*s13 -
              8874*s12^5*s13^2 - 22788*s12^4*s13^3 - 24678*s12^3*s13^4 -
              12033*s12^2*s13^5 - 2376*s12*s13^6 - 540*s13^7)*s23^2 +
            (-378*s12^5*s13 - 4140*s12^4*s13^2 - 6930*s12^3*s13^3 -
              4986*s12^2*s13^4 - 1098*s12*s13^5 - 360*s13^6)*s23^3) +
          p1q*p2q^3*(-3024*s12^6*s13^3 - 6048*s12^5*s13^4 +
            6048*s12^3*s13^6 + 3024*s12^2*s13^7 + (-7146*s12^6*s13^2 -
              30798*s12^5*s13^3 - 39654*s12^4*s13^4 - 15480*s12^3*s13^5 +
              630*s12^2*s13^6 + 198*s12*s13^7 + 90*s13^8)*s23 +
            (287*s12^6*s13 - 8457*s12^5*s13^2 - 21654*s12^4*s13^3 -
              13676*s12^3*s13^4 + 1641*s12^2*s13^5 + 2997*s12*s13^6 +
              590*s13^7)*s23^2 + (1374*s12^5*s13 + 3224*s12^4*s13^2 +
              6428*s12^3*s13^3 + 10868*s12^2*s13^4 + 6966*s12*s13^5 +
              1540*s13^6)*s23^3 + (1079*s12^4*s13 + 3263*s12^3*s13^2 +
              5105*s12^2*s13^3 + 3529*s12*s13^4 + 1040*s13^5)*s23^4) +
          p1q^2*p2q^2*(-6048*s12^6*s13^3 - 15120*s12^5*s13^4 -
            9072*s12^4*s13^5 + 3024*s12^3*s13^6 + 3024*s12^2*s13^7 +
            (-9216*s12^6*s13^2 - 44748*s12^5*s13^3 - 64260*s12^4*s13^4 -
              31032*s12^3*s13^5 - 2196*s12^2*s13^6 + 108*s12*s13^7)*s23 +
            (3*s12^6*s13 - 13608*s12^5*s13^2 - 39186*s12^4*s13^3 -
              36312*s12^3*s13^4 - 11403*s12^2*s13^5 - 936*s12*s13^6 -
              270*s13^7)*s23^2 + (-230*s12^6 - 1503*s12^5*s13 -
              10296*s12^4*s13^2 - 21360*s12^3*s13^3 - 14454*s12^2*s13^4 -
              4143*s12*s13^5 - 730*s13^6)*s23^3 +
            (-730*s12^5 - 4341*s12^4*s13 - 13442*s12^3*s13^2 -
              16363*s12^2*s13^3 - 7776*s12*s13^4 - 1460*s13^5)*s23^4 +
            (-500*s12^4 - 2553*s12^3*s13 - 5556*s12^2*s13^2 -
              3855*s12*s13^3 - 1000*s13^4)*s23^5) +
          p1q^4*((-1512*s12^6*s13^2 - 6048*s12^5*s13^3 - 9072*s12^4*s13^4 -
              6048*s12^3*s13^5 - 1512*s12^2*s13^6)*s23 +
            (-189*s12^6*s13 - 3753*s12^5*s13^2 - 10314*s12^4*s13^3 -
              10314*s12^3*s13^4 - 3753*s12^2*s13^5 - 189*s12*s13^6)*s23^2 +
            (-495*s12^5*s13 - 3600*s12^4*s13^2 - 6210*s12^3*s13^3 -
              3600*s12^2*s13^4 - 495*s12*s13^5)*s23^3 +
            (-90*s12^5 - 576*s12^4*s13 - 1818*s12^3*s13^2 - 1818*s12^2*s13^
                3 - 576*s12*s13^4 - 90*s13^5)*s23^4 +
            (-90*s12^4 - 180*s12^3*s13 - 396*s12^2*s13^2 - 180*s12*s13^3 -
              90*s13^4)*s23^5) + p1q^3*p2q*(-3024*s12^6*s13^3 -
            9072*s12^5*s13^4 - 9072*s12^4*s13^5 - 3024*s12^3*s13^6 +
            (189*s12^7*s13 - 5886*s12^6*s13^2 - 30429*s12^5*s13^3 -
              48708*s12^4*s13^4 - 30429*s12^3*s13^5 - 5886*s12^2*s13^6 +
              189*s12*s13^7)*s23 + (383*s12^6*s13 - 9497*s12^5*s13^2 -
              31702*s12^4*s13^3 - 31702*s12^3*s13^4 - 9497*s12^2*s13^5 +
              383*s12*s13^6)*s23^2 + (270*s12^6 + 1302*s12^5*s13 -
              1886*s12^4*s13^2 - 6700*s12^3*s13^3 - 1886*s12^2*s13^4 +
              1302*s12*s13^5 + 270*s13^6)*s23^3 +
            (410*s12^5 + 2448*s12^4*s13 + 4798*s12^3*s13^2 + 4798*s12^2*s13^
                3 + 2448*s12*s13^4 + 410*s13^5)*s23^4 +
            (460*s12^4 + 3250*s12^3*s13 + 5580*s12^2*s13^2 + 3250*s12*s13^3 +
              460*s13^4)*s23^5 + (320*s12^3 + 1456*s12^2*s13 +
              1456*s12*s13^2 + 320*s13^3)*s23^6)))*
       Log(s23/(s12 + s13 + s23)))/
      (p1q^3*p2q^2*(72*s12^5*s13^2 + 216*s12^4*s13^3 + 216*s12^3*s13^4 +
         72*s12^2*s13^5)*s23^2 + p1q*p2q^4*(72*s12^5*s13^2 +
         216*s12^4*s13^3 + 216*s12^3*s13^4 + 72*s12^2*s13^5)*s23^2 +
       p1q*p3q^4*(72*s12^5*s13^2 + 216*s12^4*s13^3 + 216*s12^3*s13^4 +
         72*s12^2*s13^5)*s23^2 + p1q^2*p2q^3*(144*s12^5*s13^2 +
         432*s12^4*s13^3 + 432*s12^3*s13^4 + 144*s12^2*s13^5)*s23^2 +
       p3q^3*(p1q^2*(144*s12^5*s13^2 + 432*s12^4*s13^3 + 432*s12^3*s13^4 +
           144*s12^2*s13^5)*s23^2 + p1q*p2q*(288*s12^5*s13^2 +
           864*s12^4*s13^3 + 864*s12^3*s13^4 + 288*s12^2*s13^5)*s23^2) +
       p3q^2*(p1q^3*(72*s12^5*s13^2 + 216*s12^4*s13^3 + 216*s12^3*s13^4 +
           72*s12^2*s13^5)*s23^2 + p1q^2*p2q*(432*s12^5*s13^2 +
           1296*s12^4*s13^3 + 1296*s12^3*s13^4 + 432*s12^2*s13^5)*s23^2 +
         p1q*p2q^2*(432*s12^5*s13^2 + 1296*s12^4*s13^3 + 1296*s12^3*s13^4 +
           432*s12^2*s13^5)*s23^2) +
       p3q*(p1q^3*p2q*(144*s12^5*s13^2 + 432*s12^4*s13^3 + 432*s12^3*s13^4 +
           144*s12^2*s13^5)*s23^2 + p1q*p2q^3*(288*s12^5*s13^2 +
           864*s12^4*s13^3 + 864*s12^3*s13^4 + 288*s12^2*s13^5)*s23^2 +
         p1q^2*p2q^2*(432*s12^5*s13^2 + 1296*s12^4*s13^3 + 1296*s12^3*s13^4 +
           432*s12^2*s13^5)*s23^2)) +
     ((p3q^4*(90*s12^7 + 180*s12^6*s13 + 252*s12^5*s13^2 + 324*s12^4*s13^3 +
          162*s12^3*s13^4 + (270*s12^6 + 207*s12^5*s13 + 261*s12^4*s13^2 +
            324*s12^3*s13^3)*s23 + (180*s12^5 - 63*s12^4*s13 +
            162*s12^3*s13^2)*s23^2) + p2q^4*(162*s12^4*s13^3 +
          324*s12^3*s13^4 + 252*s12^2*s13^5 + 180*s12*s13^6 + 90*s13^7 +
          (324*s12^3*s13^3 + 261*s12^2*s13^4 + 207*s12*s13^5 + 270*s13^6)*
           s23 + (162*s12^2*s13^3 - 63*s12*s13^4 + 180*s13^5)*s23^2) +
        p1q*p2q^3*(90*s12^4*s13^3 - 63*s12^3*s13^4 + 63*s12*s13^6 -
          90*s13^7 + (-293*s12^4*s13^2 - 703*s12^3*s13^3 - 1322*s12^2*s13^4 -
            500*s12*s13^5 - 340*s13^6)*s23 + (-696*s12^3*s13^2 -
            1023*s12^2*s13^3 - 777*s12*s13^4 - 770*s13^5)*s23^2 +
          (-523*s12^2*s13^2 + 146*s12*s13^3 - 520*s13^4)*s23^3) +
        p1q^4*((153*s12^4*s13^2 + 306*s12^3*s13^3 + 153*s12^2*s13^4)*s23 +
          (243*s12^4*s13 + 396*s12^3*s13^2 + 396*s12^2*s13^3 + 243*s12*s13^4)*
           s23^2 + (90*s12^4 + 333*s12^3*s13 + 333*s12*s13^3 + 90*s13^4)*
           s23^3 + (90*s12^3 + 90*s13^3)*s23^4) + p1q^2*p2q^2*
         (243*s12^4*s13^3 - 63*s12^3*s13^4 - 63*s12^2*s13^5 + 243*s12*s13^6 +
          (608*s12^3*s13^3 - 779*s12^2*s13^4 + 207*s12*s13^5 + 270*s13^6)*
           s23 + (243*s12^4*s13 + 772*s12^3*s13^2 + 918*s12^2*s13^3 +
            480*s12*s13^4 + 500*s13^5)*s23^2 +
          (646*s12^3*s13 + 609*s12^2*s13^2 + 973*s12*s13^3 + 730*s13^4)*
           s23^3 + (403*s12^2*s13 - 83*s12*s13^2 + 500*s13^3)*s23^4) +
        p1q^3*p2q*(153*s12^4*s13^3 - 153*s12^2*s13^5 +
          (-160*s12^4*s13^2 + 405*s12^3*s13^3 - 493*s12^2*s13^4 -
            486*s12*s13^5)*s23 + (-320*s12^3*s13^2 + 139*s12^2*s13^3 -
            603*s12*s13^4 - 270*s13^5)*s23^2 + (-70*s12^4 - 313*s12^3*s13 -
            766*s12^2*s13^2 - 160*s12*s13^3 - 340*s13^4)*s23^3 +
          (-230*s12^3 - 403*s12^2*s13 - 403*s12*s13^2 - 230*s13^3)*s23^4 +
          (-160*s12^2 - 160*s13^2)*s23^5) +
        p3q^3*(p2q*(90*s12^7 + 153*s12^6*s13 + 198*s12^5*s13^2 +
            396*s12^4*s13^3 + 360*s12^3*s13^4 + 99*s12^2*s13^5 +
            (270*s12^6 + 63*s12^5*s13 + 180*s12^4*s13^2 + 585*s12^3*s13^3 +
              198*s12^2*s13^4)*s23 + (180*s12^5 - 180*s12^4*s13 +
              225*s12^3*s13^2 + 99*s12^2*s13^3)*s23^2) +
          p1q*(-90*s12^7 + 63*s12^6*s13 - 63*s12^4*s13^3 + 90*s12^3*s13^4 +
            (-340*s12^6 - 500*s12^5*s13 - 1322*s12^4*s13^2 - 703*s12^3*s13^
                3 - 293*s12^2*s13^4)*s23 + (-770*s12^5 - 777*s12^4*s13 -
              1023*s12^3*s13^2 - 696*s12^2*s13^3)*s23^2 +
            (-520*s12^4 + 146*s12^3*s13 - 523*s12^2*s13^2)*s23^3)) +
        p3q^2*(p2q^2*(-27*s12^6*s13 + 45*s12^5*s13^2 + 270*s12^4*s13^3 +
            270*s12^3*s13^4 + 45*s12^2*s13^5 - 27*s12*s13^6 +
            (-144*s12^5*s13 + 117*s12^4*s13^2 + 522*s12^3*s13^3 +
              117*s12^2*s13^4 - 144*s12*s13^5)*s23 +
            (-117*s12^4*s13 + 162*s12^3*s13^2 + 162*s12^2*s13^3 -
              117*s12*s13^4)*s23^2) + p1q*p2q*(270*s12^6*s13 -
            189*s12^5*s13^2 + 189*s12^3*s13^4 - 270*s12^2*s13^5 +
            (-250*s12^6 - 639*s12^5*s13 - 2140*s12^4*s13^2 - 314*s12^3*s13^
                3 - 1075*s12^2*s13^4 - 256*s12*s13^5)*s23 +
            (-770*s12^5 - 1359*s12^4*s13 - 1199*s12^3*s13^2 -
              872*s12^2*s13^3 - 582*s12*s13^4)*s23^2 +
            (-520*s12^4 - 180*s12^3*s13 - 357*s12^2*s13^2 - 326*s12*s13^3)*
             s23^3) + p1q^2*(243*s12^6*s13 - 63*s12^5*s13^2 -
            63*s12^4*s13^3 + 243*s12^3*s13^4 + (270*s12^6 + 207*s12^5*s13 -
              779*s12^4*s13^2 + 608*s12^3*s13^3)*s23 +
            (500*s12^5 + 480*s12^4*s13 + 918*s12^3*s13^2 + 772*s12^2*s13^3 +
              243*s12*s13^4)*s23^2 + (730*s12^4 + 973*s12^3*s13 +
              609*s12^2*s13^2 + 646*s12*s13^3)*s23^3 +
            (500*s12^3 - 83*s12^2*s13 + 403*s12*s13^2)*s23^4)) +
        p3q*(p2q^3*(99*s12^5*s13^2 + 360*s12^4*s13^3 + 396*s12^3*s13^4 +
            198*s12^2*s13^5 + 153*s12*s13^6 + 90*s13^7 +
            (198*s12^4*s13^2 + 585*s12^3*s13^3 + 180*s12^2*s13^4 +
              63*s12*s13^5 + 270*s13^6)*s23 + (99*s12^3*s13^2 +
              225*s12^2*s13^3 - 180*s12*s13^4 + 180*s13^5)*s23^2) +
          p1q*p2q^2*(-270*s12^5*s13^2 + 189*s12^4*s13^3 - 189*s12^2*s13^5 +
            270*s12*s13^6 + (-256*s12^5*s13 - 1075*s12^4*s13^2 -
              314*s12^3*s13^3 - 2140*s12^2*s13^4 - 639*s12*s13^5 - 250*s13^6)*
             s23 + (-582*s12^4*s13 - 872*s12^3*s13^2 - 1199*s12^2*s13^3 -
              1359*s12*s13^4 - 770*s13^5)*s23^2 + (-326*s12^3*s13 -
              357*s12^2*s13^2 - 180*s12*s13^3 - 520*s13^4)*s23^3) +
          p1q^2*p2q*(-486*s12^5*s13^2 + 126*s12^4*s13^3 + 126*s12^3*s13^4 -
            486*s12^2*s13^5 + (-270*s12^5*s13 - 923*s12^4*s13^2 +
              1342*s12^3*s13^3 - 923*s12^2*s13^4 - 270*s12*s13^5)*s23 +
            (230*s12^5 + 759*s12^4*s13 + 1690*s12^3*s13^2 + 1690*s12^2*s13^
                3 + 759*s12*s13^4 + 230*s13^5)*s23^2 +
            (730*s12^4 + 1619*s12^3*s13 + 1218*s12^2*s13^2 + 1619*s12*s13^3 +
              730*s13^4)*s23^3 + (500*s12^3 + 320*s12^2*s13 + 320*s12*s13^2 +
              500*s13^3)*s23^4) + p1q^3*(-153*s12^5*s13^2 + 153*s12^3*s13^4 +
            (-486*s12^5*s13 - 493*s12^4*s13^2 + 405*s12^3*s13^3 -
              160*s12^2*s13^4)*s23 + (-270*s12^5 - 603*s12^4*s13 +
              139*s12^3*s13^2 - 320*s12^2*s13^3)*s23^2 +
            (-340*s12^4 - 160*s12^3*s13 - 766*s12^2*s13^2 - 313*s12*s13^3 -
              70*s13^4)*s23^3 + (-230*s12^3 - 403*s12^2*s13 - 403*s12*s13^2 -
              230*s13^3)*s23^4 + (-160*s12^2 - 160*s13^2)*s23^5)))*
       Log((s12 + s13)/(s12 + s13 + s23))*Log(s23/(s12 + s13 + s23)))/
      (72*p1q^3*p2q*s12^3*s13^3*s23 + 144*p1q^2*p2q^2*s12^3*s13^3*s23 +
       72*p1q*p2q^3*s12^3*s13^3*s23 + 72*p1q*p3q^3*s12^3*s13^3*s23 +
       p3q^2*(144*p1q^2*s12^3*s13^3*s23 + 216*p1q*p2q*s12^3*s13^3*s23) +
       p3q*(72*p1q^3*s12^3*s13^3*s23 + 288*p1q^2*p2q*s12^3*s13^3*s23 +
         216*p1q*p2q^2*s12^3*s13^3*s23)) +
     ((p3q^5*((9*s12^3 + 36*s12^2*s13 + 27*s12*s13^2)*s23 +
          (27*s12^2 + 45*s12*s13)*s23^2 + 18*s12*s23^3) +
        p2q^5*((27*s12^2*s13 + 36*s12*s13^2 + 9*s13^3)*s23 +
          (45*s12*s13 + 27*s13^2)*s23^2 + 18*s13*s23^3) +
        p1q^4*p2q*((36*s12^2*s13 + 36*s12*s13^2)*s23 +
          (9*s12^2 + 54*s12*s13 + 9*s13^2)*s23^2 + (9*s12 + 9*s13)*s23^3) +
        p1q*p2q^4*(-36*s12*s13^3 + (72*s12^2*s13 + 18*s12*s13^2 - 18*s13^3)*
           s23 + (-10*s12^2 + 52*s12*s13 - 12*s13^2)*s23^2 +
          (-29*s12 - 13*s13)*s23^3 - 20*s23^4) + p1q^3*p2q^2*
         (-36*s12*s13^3 + (81*s12^2*s13 + 36*s12*s13^2 - 9*s13^3)*s23 +
          (-s12^2 + 81*s12*s13 + 8*s13^2)*s23^2 + (-20*s12 - 2*s13)*s23^3 -
          20*s23^4) + p1q^2*p2q^3*(-72*s12*s13^3 +
          (108*s12^2*s13 + 18*s12*s13^2 - 18*s13^3)*s23 +
          (110*s12*s13 + 16*s13^2)*s23^2 + (-18*s12 + 16*s13)*s23^3 -
          20*s23^4) + p3q*(p1q^4*((36*s12^2*s13 + 36*s12*s13^2)*s23 +
            (9*s12^2 + 54*s12*s13 + 9*s13^2)*s23^2 + (9*s12 + 9*s13)*s23^3) +
          p2q^4*((9*s12^3 + 90*s12^2*s13 + 99*s12*s13^2 + 18*s13^3)*s23 +
            (27*s12^2 + 135*s12*s13 + 54*s13^2)*s23^2 + (18*s12 + 36*s13)*
             s23^3) + p1q^2*p2q^2*(144*s12^2*s13^2 - 72*s12*s13^3 +
            (288*s12^2*s13 + 198*s12*s13^2 - 18*s13^3)*s23 +
            (16*s12^2 + 258*s12*s13 + 32*s13^2)*s23^2 + (-38*s12 - 4*s13)*
             s23^3 - 60*s23^4) + p1q^3*p2q*(72*s12^2*s13^2 +
            (-9*s12^3 + 189*s12^2*s13 + 189*s12*s13^2 - 9*s13^3)*s23 +
            (7*s12^2 + 198*s12*s13 + 7*s13^2)*s23^2 + (-22*s12 - 22*s13)*
             s23^3 - 40*s23^4) + p1q*p2q^3*(72*s12^2*s13^2 - 72*s12*s13^3 +
            (198*s12^2*s13 + 108*s12*s13^2 - 18*s13^3)*s23 +
            (-2*s12^2 + 162*s12*s13 + 12*s13^2)*s23^2 + (-38*s12 - 6*s13)*
             s23^3 - 40*s23^4)) +
        p3q^4*(p2q*((18*s12^3 + 99*s12^2*s13 + 90*s12*s13^2 + 9*s13^3)*s23 +
            (54*s12^2 + 135*s12*s13 + 27*s13^2)*s23^2 + (36*s12 + 18*s13)*
             s23^3) + p1q*(-36*s12^3*s13 + (-18*s12^3 + 18*s12^2*s13 +
              72*s12*s13^2)*s23 + (-12*s12^2 + 52*s12*s13 - 10*s13^2)*s23^2 +
            (-13*s12 - 29*s13)*s23^3 - 20*s23^4)) +
        p3q^2*(p2q^3*((18*s12^3 + 126*s12^2*s13 + 126*s12*s13^2 + 18*s13^3)*
             s23 + (54*s12^2 + 180*s12*s13 + 54*s13^2)*s23^2 +
            (36*s12 + 36*s13)*s23^3) + p1q^2*p2q*(-72*s12^3*s13 +
            144*s12^2*s13^2 + (-18*s12^3 + 198*s12^2*s13 + 288*s12*s13^2)*
             s23 + (32*s12^2 + 258*s12*s13 + 16*s13^2)*s23^2 +
            (-4*s12 - 38*s13)*s23^3 - 60*s23^4) + p1q*p2q^2*
           (-36*s12^3*s13 + 144*s12^2*s13^2 - 36*s12*s13^3 +
            (216*s12^2*s13 + 216*s12*s13^2)*s23 + (32*s12^2 + 220*s12*s13 +
              32*s13^2)*s23^2 + (-2*s12 - 2*s13)*s23^3 - 40*s23^4) +
          p1q^3*(-36*s12^3*s13 + (-9*s12^3 + 36*s12^2*s13 + 81*s12*s13^2)*
             s23 + (8*s12^2 + 81*s12*s13 - s13^2)*s23^2 + (-2*s12 - 20*s13)*
             s23^3 - 20*s23^4)) +
        p3q^3*(p2q^2*((18*s12^3 + 126*s12^2*s13 + 126*s12*s13^2 + 18*s13^3)*
             s23 + (54*s12^2 + 180*s12*s13 + 54*s13^2)*s23^2 +
            (36*s12 + 36*s13)*s23^3) + p1q*p2q*(-72*s12^3*s13 +
            72*s12^2*s13^2 + (-18*s12^3 + 108*s12^2*s13 + 198*s12*s13^2)*
             s23 + (12*s12^2 + 162*s12*s13 - 2*s13^2)*s23^2 +
            (-6*s12 - 38*s13)*s23^3 - 40*s23^4) +
          p1q^2*(-72*s12^3*s13 + (-18*s12^3 + 18*s12^2*s13 + 108*s12*s13^2)*
             s23 + (16*s12^2 + 110*s12*s13)*s23^2 + (16*s12 - 18*s13)*s23^3 -
            20*s23^4)))*Log(s23/(s12 + s13 + s23))^2)/
      (72*p1q^3*p2q^2*s12*s13*s23^2 + 144*p1q^2*p2q^3*s12*s13*s23^2 +
       72*p1q*p2q^4*s12*s13*s23^2 + 72*p1q*p3q^4*s12*s13*s23^2 +
       p3q^3*(144*p1q^2*s12*s13*s23^2 + 288*p1q*p2q*s12*s13*s23^2) +
       p3q^2*(72*p1q^3*s12*s13*s23^2 + 432*p1q^2*p2q*s12*s13*s23^2 +
         432*p1q*p2q^2*s12*s13*s23^2) + p3q*(144*p1q^3*p2q*s12*s13*s23^2 +
         432*p1q^2*p2q^2*s12*s13*s23^2 + 288*p1q*p2q^3*s12*s13*s23^2)) +
     Log(p1q/(p1q + p2q + p3q))*
      ((p1q*p2q^3*(-18*s12*s13^2 - 18*s13^3 + (-9*s12^2 - 27*s13^2)*s23) +
         p1q^2*p2q^2*(-18*s12*s13^2 - 18*s13^3 + (-18*s12^2 + 18*s12*s13 -
             18*s13^2)*s23 + 18*s13*s23^2) + p1q^3*p2q*
          ((-9*s12^2 + 18*s12*s13 + 9*s13^2)*s23 + 18*s13*s23^2) +
         p3q^3*(p1q*(-18*s12^3 - 18*s12^2*s13 + (-27*s12^2 - 9*s13^2)*s23) +
           p2q*(-18*s12^3 - 72*s12^2*s13 - 54*s12*s13^2 +
             (-54*s12^2 - 90*s12*s13)*s23 - 36*s12*s23^2)) +
         p3q^2*(p1q^2*(-18*s12^3 - 18*s12^2*s13 + (-18*s12^2 + 18*s12*s13 -
               18*s13^2)*s23 + 18*s12*s23^2) + p2q^2*(-18*s12^3 -
             126*s12^2*s13 - 126*s12*s13^2 - 18*s13^3 +
             (-54*s12^2 - 180*s12*s13 - 54*s13^2)*s23 + (-36*s12 - 36*s13)*
              s23^2) + p1q*p2q*(-126*s12^2*s13 - 126*s12*s13^2 +
             (-45*s12^2 - 162*s12*s13 - 45*s13^2)*s23 + (-18*s12 - 18*s13)*
              s23^2)) + p3q*(p1q^2*p2q*(-108*s12^2*s13 - 108*s12*s13^2 +
             (-36*s12^2 - 108*s12*s13 - 36*s13^2)*s23) +
           p1q^3*((9*s12^2 + 18*s12*s13 - 9*s13^2)*s23 + 18*s12*s23^2) +
           p1q*p2q^2*(-126*s12^2*s13 - 126*s12*s13^2 +
             (-45*s12^2 - 162*s12*s13 - 45*s13^2)*s23 + (-18*s12 - 18*s13)*
              s23^2) + p2q^3*(-54*s12^2*s13 - 72*s12*s13^2 - 18*s13^3 +
             (-90*s12*s13 - 54*s13^2)*s23 - 36*s13*s23^2)))/
        (4*p1q^3*p2q*s12*s13*s23 + 8*p1q^2*p2q^2*s12*s13*s23 +
         4*p1q*p2q^3*s12*s13*s23 + 4*p1q*p3q^3*s12*s13*s23 +
         p3q^2*(8*p1q^2*s12*s13*s23 + 12*p1q*p2q*s12*s13*s23) +
         p3q*(4*p1q^3*s12*s13*s23 + 16*p1q^2*p2q*s12*s13*s23 +
           12*p1q*p2q^2*s12*s13*s23)) +
       ((p2q^3*(9*s12^2 + 18*s12*s13 + 9*s13^2 + (18*s12 + 18*s13)*s23 +
            9*s23^2) + p2q*p3q^2*(9*s12^2 + 18*s12*s13 + 9*s13^2 +
            (18*s12 + 18*s13)*s23 + 9*s23^2))*Log(p2q/(p1q + p2q + p3q)))/
        (4*p1q^3*s12*s23 + 8*p1q^2*p2q*s12*s23 + 4*p1q*p2q^2*s12*s23 +
         4*p1q*p3q^2*s12*s23 + p3q*(8*p1q^2*s12*s23 + 8*p1q*p2q*s12*s23)) +
       ((p3q^5*(9*s12^3 + 9*s12^2*s13 + 9*s12^2*s23) +
          p1q^2*p2q^3*(-54*s12^2*s13 - 18*s12*s13^2 + 36*s13^3 +
            (-144*s12^2 - 306*s12*s13 - 72*s13^2)*s23 + (-261*s12 - 225*s13)*
             s23^2 - 117*s23^3) + p1q^3*p2q^2*(-36*s12^2*s13 - 9*s12*s13^2 +
            27*s13^3 + (-126*s12^2 - 252*s12*s13 - 63*s13^2)*s23 +
            (-216*s12 - 180*s13)*s23^2 - 90*s23^3) +
          p1q*p2q^4*(-36*s12^2*s13 - 18*s12*s13^2 + 18*s13^3 +
            (-81*s12^2 - 180*s12*s13 - 45*s13^2)*s23 + (-153*s12 - 135*s13)*
             s23^2 - 72*s23^3) + p1q^4*p2q*(-9*s12^2*s13 + 9*s13^3 +
            (-54*s12^2 - 99*s12*s13 - 27*s13^2)*s23 + (-90*s12 - 72*s13)*
             s23^2 - 36*s23^3) + p2q^5*(-9*s12^2*s13 - 9*s12*s13^2 +
            (-18*s12^2 - 45*s12*s13 - 18*s13^2)*s23 + (-36*s12 - 36*s13)*
             s23^2 - 18*s23^3) + p1q^5*((-9*s12^2 - 18*s12*s13 - 9*s13^2)*
             s23 + (-18*s12 - 18*s13)*s23^2 - 9*s23^3) +
          p3q^4*(p2q*(18*s12^3 + 9*s12^2*s13 - 9*s12*s13^2 +
              (18*s12^2 - 9*s12*s13)*s23) + p1q*(18*s12^3 + 18*s12^2*s13 -
              18*s12*s13*s23 - 18*s12*s23^2)) +
          p3q*(p1q^2*p2q^2*(54*s12^3 - 54*s12^2*s13 - 108*s12*s13^2 +
              (-72*s12^2 - 378*s12*s13 - 144*s13^2)*s23 + (-207*s12 -
                225*s13)*s23^2 - 81*s23^3) + p1q*p2q^3*(36*s12^3 -
              54*s12^2*s13 - 90*s12*s13^2 + (-45*s12^2 - 270*s12*s13 -
                99*s13^2)*s23 + (-153*s12 - 171*s13)*s23^2 - 72*s23^3) +
            p1q^3*p2q*(36*s12^3 - 18*s12^2*s13 - 54*s12*s13^2 +
              (-54*s12^2 - 225*s12*s13 - 81*s13^2)*s23 + (-126*s12 - 117*s13)*
               s23^2 - 36*s23^3) + p2q^4*(9*s12^3 - 9*s12^2*s13 -
              18*s12*s13^2 + (-9*s12^2 - 54*s12*s13 - 18*s13^2)*s23 +
              (-36*s12 - 36*s13)*s23^2 - 18*s23^3) +
            p1q^4*(9*s12^3 - 9*s12*s13^2 + (-9*s12^2 - 45*s12*s13 - 18*s13^2)*
               s23 + (-27*s12 - 27*s13)*s23^2 - 9*s23^3)) +
          p3q^3*(p1q*p2q*(36*s12^3 + 18*s12^2*s13 - 18*s12*s13^2 +
              (-9*s12^2 - 72*s12*s13 - 9*s13^2)*s23 + (-45*s12 - 9*s13)*s23^
                2) + p2q^2*(18*s12^3 - 18*s12*s13^2 + (-54*s12*s13 -
                18*s13^2)*s23 + (-36*s12 - 36*s13)*s23^2 - 18*s23^3) +
            p1q^2*(18*s12^3 + 18*s12^2*s13 + (-18*s12^2 - 36*s12*s13)*s23 +
              (-27*s12 + 9*s13)*s23^2 + 9*s23^3)) +
          p3q^2*(p1q*p2q^2*(72*s12^3 + 36*s12^2*s13 - 36*s12*s13^2 +
              (63*s12^2 - 72*s12*s13 - 27*s13^2)*s23 + (-9*s12 - 27*s13)*s23^
                2) + p2q^3*(18*s12^3 - 18*s12*s13^2 + (-54*s12*s13 -
                18*s13^2)*s23 + (-36*s12 - 36*s13)*s23^2 - 18*s23^3) +
            p1q^3*(27*s12^3 + 27*s12^2*s13 + (18*s12^2 - 9*s12*s13)*s23 +
              (9*s12 + 18*s13)*s23^2 + 18*s23^3) + p1q^2*p2q*
             (72*s12^3 + 54*s12^2*s13 - 18*s12*s13^2 + (36*s12^2 -
                72*s12*s13 - 18*s13^2)*s23 + (-9*s12 + 9*s13)*s23^2 +
              27*s23^3)))*Log((p1q + p2q)/(p1q + p2q + p3q)))/
        (8*p1q*p3q^4*s12^2*s23 + p1q^3*p2q^2*(-24*s12*s13*s23 -
           24*s12*s23^2) + p1q^2*p2q^3*(-24*s12*s13*s23 - 24*s12*s23^2) +
         p1q^4*p2q*(-8*s12*s13*s23 - 8*s12*s23^2) +
         p1q*p2q^4*(-8*s12*s13*s23 - 8*s12*s23^2) +
         p3q^2*(p1q^2*p2q*((32*s12^2 - 40*s12*s13)*s23 - 40*s12*s23^2) +
           p1q*p2q^2*((24*s12^2 - 24*s12*s13)*s23 - 24*s12*s23^2) +
           p1q^3*((8*s12^2 - 16*s12*s13)*s23 - 16*s12*s23^2)) +
         p3q*(p1q^2*p2q^2*((16*s12^2 - 56*s12*s13)*s23 - 56*s12*s23^2) +
           p1q^3*p2q*((8*s12^2 - 40*s12*s13)*s23 - 40*s12*s23^2) +
           p1q*p2q^3*((8*s12^2 - 24*s12*s13)*s23 - 24*s12*s23^2) +
           p1q^4*(-8*s12*s13*s23 - 8*s12*s23^2)) +
         p3q^3*(p1q^2*((16*s12^2 - 8*s12*s13)*s23 - 8*s12*s23^2) +
           p1q*p2q*((24*s12^2 - 8*s12*s13)*s23 - 8*s12*s23^2))) +
       ((p2q^2*p3q*(9*s12^2 + 18*s12*s13 + 9*s13^2 + (18*s12 + 18*s13)*s23 +
            9*s23^2) + p3q^3*(9*s12^2 + 18*s12*s13 + 9*s13^2 +
            (18*s12 + 18*s13)*s23 + 9*s23^2))*Log(p3q/(p1q + p2q + p3q)))/
        (4*p1q^3*s13*s23 + 8*p1q^2*p2q*s13*s23 + 4*p1q*p2q^2*s13*s23 +
         4*p1q*p3q^2*s13*s23 + p3q*(8*p1q^2*s13*s23 + 8*p1q*p2q*s13*s23)) +
       ((p2q^5*(-9*s12*s13^2 - 9*s13^3 - 9*s13^2*s23) +
          p1q*p2q^4*(-18*s12*s13^2 - 18*s13^3 + 18*s12*s13*s23 +
            18*s13*s23^2) + p1q^3*p2q^2*(-27*s12*s13^2 - 27*s13^3 +
            (9*s12*s13 - 18*s13^2)*s23 + (-18*s12 - 9*s13)*s23^2 -
            18*s23^3) + p1q^2*p2q^3*(-18*s12*s13^2 - 18*s13^3 +
            (36*s12*s13 + 18*s13^2)*s23 + (-9*s12 + 27*s13)*s23^2 -
            9*s23^3) + p1q^5*((9*s12^2 + 18*s12*s13 + 9*s13^2)*s23 +
            (18*s12 + 18*s13)*s23^2 + 9*s23^3) + p1q^4*p2q*
           (9*s12^2*s13 - 9*s13^3 + (18*s12^2 + 45*s12*s13 + 9*s13^2)*s23 +
            (27*s12 + 27*s13)*s23^2 + 9*s23^3) +
          p3q^5*(9*s12^2*s13 + 9*s12*s13^2 + (18*s12^2 + 45*s12*s13 +
              18*s13^2)*s23 + (36*s12 + 36*s13)*s23^2 + 18*s23^3) +
          p3q*(p2q^4*(9*s12^2*s13 - 9*s12*s13^2 - 18*s13^3 + (9*s12*s13 -
                18*s13^2)*s23) + p1q*p2q^3*(18*s12^2*s13 - 18*s12*s13^2 -
              36*s13^3 + (9*s12^2 + 72*s12*s13 + 9*s13^2)*s23 +
              (9*s12 + 45*s13)*s23^2) + p1q^2*p2q^2*(18*s12^2*s13 -
              54*s12*s13^2 - 72*s13^3 + (18*s12^2 + 72*s12*s13 - 36*s13^2)*
               s23 + (-9*s12 + 9*s13)*s23^2 - 27*s23^3) +
            p1q^4*(-9*s12^3 + 9*s12*s13^2 + (27*s12^2 + 99*s12*s13 +
                54*s13^2)*s23 + (72*s12 + 90*s13)*s23^2 + 36*s23^3) +
            p1q^3*p2q*(54*s12^2*s13 + 18*s12*s13^2 - 36*s13^3 +
              (81*s12^2 + 225*s12*s13 + 54*s13^2)*s23 + (117*s12 + 126*s13)*
               s23^2 + 36*s23^3)) + p3q^4*(p2q*(18*s12^2*s13 + 9*s12*s13^2 -
              9*s13^3 + (18*s12^2 + 54*s12*s13 + 9*s13^2)*s23 +
              (36*s12 + 36*s13)*s23^2 + 18*s23^3) +
            p1q*(-18*s12^3 + 18*s12^2*s13 + 36*s12*s13^2 + (45*s12^2 +
                180*s12*s13 + 81*s13^2)*s23 + (135*s12 + 153*s13)*s23^2 +
              72*s23^3)) + p3q^2*(p1q*p2q^2*(36*s12^2*s13 - 36*s12*s13^2 -
              72*s13^3 + (27*s12^2 + 72*s12*s13 - 63*s13^2)*s23 +
              (27*s12 + 9*s13)*s23^2) + p2q^3*(18*s12^2*s13 - 18*s13^3 +
              (18*s12^2 + 54*s12*s13)*s23 + (36*s12 + 36*s13)*s23^2 +
              18*s23^3) + p1q^2*p2q*(108*s12^2*s13 + 54*s12*s13^2 -
              54*s13^3 + (144*s12^2 + 378*s12*s13 + 72*s13^2)*s23 +
              (225*s12 + 207*s13)*s23^2 + 81*s23^3) +
            p1q^3*(-27*s12^3 + 9*s12^2*s13 + 36*s12*s13^2 + (63*s12^2 +
                252*s12*s13 + 126*s13^2)*s23 + (180*s12 + 216*s13)*s23^2 +
              90*s23^3)) + p3q^3*(p2q^2*(18*s12^2*s13 - 18*s13^3 +
              (18*s12^2 + 54*s12*s13)*s23 + (36*s12 + 36*s13)*s23^2 +
              18*s23^3) + p1q*p2q*(90*s12^2*s13 + 54*s12*s13^2 - 36*s13^3 +
              (99*s12^2 + 270*s12*s13 + 45*s13^2)*s23 + (171*s12 + 153*s13)*
               s23^2 + 72*s23^3) + p1q^2*(-36*s12^3 + 18*s12^2*s13 +
              54*s12*s13^2 + (72*s12^2 + 306*s12*s13 + 144*s13^2)*s23 +
              (225*s12 + 261*s13)*s23^2 + 117*s23^3)))*
         Log((p1q + p3q)/(p1q + p2q + p3q)))/(-8*p1q*p2q^4*s13^2*s23 +
         p1q^4*p2q*(8*s12*s13*s23 + 8*s13*s23^2) +
         p1q*p3q^4*(8*s12*s13*s23 + 8*s13*s23^2) + p1q^2*p2q^3*
          ((8*s12*s13 - 16*s13^2)*s23 + 8*s13*s23^2) +
         p1q^3*p2q^2*((16*s12*s13 - 8*s13^2)*s23 + 16*s13*s23^2) +
         p3q^3*(p1q^2*(24*s12*s13*s23 + 24*s13*s23^2) +
           p1q*p2q*((24*s12*s13 - 8*s13^2)*s23 + 24*s13*s23^2)) +
         p3q*(p1q^4*(8*s12*s13*s23 + 8*s13*s23^2) + p1q*p2q^3*
            ((8*s12*s13 - 24*s13^2)*s23 + 8*s13*s23^2) +
           p1q^2*p2q^2*((40*s12*s13 - 32*s13^2)*s23 + 40*s13*s23^2) +
           p1q^3*p2q*((40*s12*s13 - 8*s13^2)*s23 + 40*s13*s23^2)) +
         p3q^2*(p1q^3*(24*s12*s13*s23 + 24*s13*s23^2) +
           p1q*p2q^2*((24*s12*s13 - 24*s13^2)*s23 + 24*s13*s23^2) +
           p1q^2*p2q*((56*s12*s13 - 16*s13^2)*s23 + 56*s13*s23^2))) +
       ((p3q^6*((18*s12^4 + 90*s12^3*s13 + 126*s12^2*s13^2 + 54*s12*s13^3)*
             s23 + (45*s12^3 + 144*s12^2*s13 + 99*s12*s13^2)*s23^2 +
            (27*s12^2 + 45*s12*s13)*s23^3) +
          p2q^6*((54*s12^3*s13 + 126*s12^2*s13^2 + 90*s12*s13^3 + 18*s13^4)*
             s23 + (99*s12^2*s13 + 144*s12*s13^2 + 45*s13^3)*s23^2 +
            (45*s12*s13 + 27*s13^2)*s23^3) + p1q^3*p2q^3*(-72*s12^2*s13^3 -
            72*s12*s13^4 + (153*s12^3*s13 + 405*s12^2*s13^2 + 171*s12*s13^3 -
              9*s13^4)*s23 + (117*s12^2*s13 + 288*s12*s13^2 + 63*s13^3)*
             s23^2 + (-18*s12^2 - 126*s12*s13)*s23^3 + (-18*s12 - 72*s13)*
             s23^4) + p1q^4*p2q^2*((72*s12^3*s13 + 216*s12^2*s13^2 +
              144*s12*s13^3)*s23 + (9*s12^3 + 9*s12^2*s13 + 99*s12*s13^2 +
              27*s13^3)*s23^2 + (-9*s12^2 - 144*s12*s13 - 27*s13^2)*s23^3 +
            (-18*s12 - 54*s13)*s23^4) + p1q^2*p2q^4*(-144*s12^2*s13^3 -
            144*s12*s13^4 + (216*s12^3*s13 + 414*s12^2*s13^2 + 36*s12*s13^3 -
              18*s13^4)*s23 + (252*s12^2*s13 + 324*s12*s13^2 + 72*s13^3)*
             s23^2 + (-18*s12^2 - 18*s12*s13 + 54*s13^2)*s23^3 +
            (-18*s12 - 36*s13)*s23^4) + p1q*p2q^5*(-72*s12^2*s13^3 -
            72*s12*s13^4 + (144*s12^3*s13 + 234*s12^2*s13^2 - 18*s13^4)*s23 +
            (180*s12^2*s13 + 144*s12*s13^2)*s23^2 + (-9*s12^2 - 9*s13^2)*
             s23^3 + (-9*s12 - 27*s13)*s23^4) + p1q^5*p2q*
           ((-72*s12^2*s13 - 72*s12*s13^2)*s23^2 + (-18*s12^2 - 108*s12*s13 -
              18*s13^2)*s23^3 + (-18*s12 - 18*s13)*s23^4) +
          p3q^3*(p2q^3*((72*s12^4 + 576*s12^3*s13 + 1008*s12^2*s13^2 +
                576*s12*s13^3 + 72*s13^4)*s23 + (180*s12^3 + 972*s12^2*s13 +
                972*s12*s13^2 + 180*s13^3)*s23^2 + (108*s12^2 + 360*s12*s13 +
                108*s13^2)*s23^3) + p1q*p2q^2*(-216*s12^4*s13 +
              216*s12^3*s13^2 + 360*s12^2*s13^3 - 72*s12*s13^4 +
              (-18*s12^4 + 378*s12^3*s13 + 1746*s12^2*s13^2 + 630*s12*s13^3)*
               s23 + (36*s12^3 + 918*s12^2*s13 + 972*s12*s13^2 + 18*s13^3)*
               s23^2 + (-18*s12^2 + 108*s12*s13 - 54*s13^2)*s23^3 +
              (-72*s12 - 72*s13)*s23^4) + p1q^2*p2q*(-288*s12^4*s13 +
              288*s12^2*s13^3 + (-36*s12^4 + 252*s12^3*s13 + 1476*s12^2*
                 s13^2 + 612*s12*s13^3)*s23 + (126*s12^3 + 846*s12^2*s13 +
                738*s12*s13^2 + 18*s13^3)*s23^2 + (72*s12^2 - 36*s12*s13 -
                36*s13^2)*s23^3 + (-90*s12 - 54*s13)*s23^4) +
            p1q^3*(-72*s12^4*s13 - 72*s12^3*s13^2 + (-9*s12^4 + 171*s12^3*
                 s13 + 405*s12^2*s13^2 + 153*s12*s13^3)*s23 +
              (63*s12^3 + 288*s12^2*s13 + 117*s12*s13^2)*s23^2 +
              (-126*s12*s13 - 18*s13^2)*s23^3 + (-72*s12 - 18*s13)*s23^4)) +
          p3q^2*(p2q^4*((54*s12^4 + 486*s12^3*s13 + 882*s12^2*s13^2 +
                522*s12*s13^3 + 72*s13^4)*s23 + (135*s12^3 + 828*s12^2*s13 +
                873*s12*s13^2 + 180*s13^3)*s23^2 + (81*s12^2 + 315*s12*s13 +
                108*s13^2)*s23^3) + p1q^2*p2q^2*(-144*s12^4*s13 +
              432*s12^3*s13^2 + 432*s12^2*s13^3 - 144*s12*s13^4 +
              (-18*s12^4 + 612*s12^3*s13 + 2124*s12^2*s13^2 + 612*s12*s13^3 -
                18*s13^4)*s23 + (72*s12^3 + 1008*s12^2*s13 + 1008*s12*s13^2 +
                72*s13^3)*s23^2 - 36*s12*s13*s23^3 + (-90*s12 - 90*s13)*s23^
                4) + p1q^3*p2q*(-72*s12^4*s13 + 72*s12^3*s13^2 +
              144*s12^2*s13^3 + (-18*s12^4 + 351*s12^3*s13 + 927*s12^2*
                 s13^2 + 333*s12*s13^3 - 9*s13^4)*s23 + (90*s12^3 +
                369*s12^2*s13 + 198*s12*s13^2 + 27*s13^3)*s23^2 +
              (-18*s12^2 - 378*s12*s13 - 36*s13^2)*s23^3 + (-126*s12 -
                72*s13)*s23^4) + p1q*p2q^3*(-72*s12^4*s13 + 360*s12^3*s13^2 +
              216*s12^2*s13^3 - 216*s12*s13^4 + (630*s12^3*s13 +
                1746*s12^2*s13^2 + 378*s12*s13^3 - 18*s13^4)*s23 +
              (18*s12^3 + 972*s12^2*s13 + 918*s12*s13^2 + 36*s13^3)*s23^2 +
              (-54*s12^2 + 108*s12*s13 - 18*s13^2)*s23^3 + (-72*s12 - 72*s13)*
               s23^4) + p1q^4*((144*s12^3*s13 + 216*s12^2*s13^2 +
                72*s12*s13^3)*s23 + (27*s12^3 + 99*s12^2*s13 + 9*s12*s13^2 +
                9*s13^3)*s23^2 + (-27*s12^2 - 144*s12*s13 - 9*s13^2)*s23^3 +
              (-54*s12 - 18*s13)*s23^4)) +
          p3q^4*(p2q^2*((72*s12^4 + 522*s12^3*s13 + 882*s12^2*s13^2 +
                486*s12*s13^3 + 54*s13^4)*s23 + (180*s12^3 + 873*s12^2*s13 +
                828*s12*s13^2 + 135*s13^3)*s23^2 + (108*s12^2 + 315*s12*s13 +
                81*s13^2)*s23^3) + p1q*p2q*(-216*s12^4*s13 - 72*s12^3*s13^2 +
              144*s12^2*s13^3 + (-36*s12^4 + 90*s12^3*s13 + 972*s12^2*s13^2 +
                486*s12*s13^3)*s23 + (18*s12^3 + 540*s12^2*s13 +
                630*s12*s13^2)*s23^2 + (-9*s12^2 + 36*s12*s13 - 45*s13^2)*s23^
                3 + (-63*s12 - 45*s13)*s23^4) + p1q^2*(-144*s12^4*s13 -
              144*s12^3*s13^2 + (-18*s12^4 + 36*s12^3*s13 + 414*s12^2*s13^2 +
                216*s12*s13^3)*s23 + (72*s12^3 + 324*s12^2*s13 +
                252*s12*s13^2)*s23^2 + (54*s12^2 - 18*s12*s13 - 18*s13^2)*s23^
                3 + (-36*s12 - 18*s13)*s23^4)) +
          p3q*(p2q^5*((18*s12^4 + 252*s12^3*s13 + 504*s12^2*s13^2 +
                324*s12*s13^3 + 54*s13^4)*s23 + (45*s12^3 + 441*s12^2*s13 +
                531*s12*s13^2 + 135*s13^3)*s23^2 + (27*s12^2 + 180*s12*s13 +
                81*s13^2)*s23^3) + p1q^3*p2q^2*(144*s12^3*s13^2 +
              72*s12^2*s13^3 - 72*s12*s13^4 + (-9*s12^4 + 333*s12^3*s13 +
                927*s12^2*s13^2 + 351*s12*s13^3 - 18*s13^4)*s23 +
              (27*s12^3 + 198*s12^2*s13 + 369*s12*s13^2 + 90*s13^3)*s23^2 +
              (-36*s12^2 - 378*s12*s13 - 18*s13^2)*s23^3 + (-72*s12 -
                126*s13)*s23^4) + p1q^2*p2q^3*(288*s12^3*s13^2 -
              288*s12*s13^4 + (612*s12^3*s13 + 1476*s12^2*s13^2 +
                252*s12*s13^3 - 36*s13^4)*s23 + (18*s12^3 + 738*s12^2*s13 +
                846*s12*s13^2 + 126*s13^3)*s23^2 + (-36*s12^2 - 36*s12*s13 +
                72*s13^2)*s23^3 + (-54*s12 - 90*s13)*s23^4) +
            p1q^4*p2q*((72*s12^3*s13 + 144*s12^2*s13^2 + 72*s12*s13^3)*s23 +
              (36*s12^3 - 180*s12^2*s13 - 180*s12*s13^2 + 36*s13^3)*s23^2 +
              (-36*s12^2 - 432*s12*s13 - 36*s13^2)*s23^3 + (-72*s12 - 72*s13)*
               s23^4) + p1q*p2q^4*(144*s12^3*s13^2 - 72*s12^2*s13^3 -
              216*s12*s13^4 + (486*s12^3*s13 + 972*s12^2*s13^2 +
                90*s12*s13^3 - 36*s13^4)*s23 + (630*s12^2*s13 +
                540*s12*s13^2 + 18*s13^3)*s23^2 + (-45*s12^2 + 36*s12*s13 -
                9*s13^2)*s23^3 + (-45*s12 - 63*s13)*s23^4) +
            p1q^5*((-72*s12^2*s13 - 72*s12*s13^2)*s23^2 + (-18*s12^2 -
                108*s12*s13 - 18*s13^2)*s23^3 + (-18*s12 - 18*s13)*s23^4)) +
          p3q^5*(p2q*((54*s12^4 + 324*s12^3*s13 + 504*s12^2*s13^2 +
                252*s12*s13^3 + 18*s13^4)*s23 + (135*s12^3 + 531*s12^2*s13 +
                441*s12*s13^2 + 45*s13^3)*s23^2 + (81*s12^2 + 180*s12*s13 +
                27*s13^2)*s23^3) + p1q*(-72*s12^4*s13 - 72*s12^3*s13^2 +
              (-18*s12^4 + 234*s12^2*s13^2 + 144*s12*s13^3)*s23 +
              (144*s12^2*s13 + 180*s12*s13^2)*s23^2 + (-9*s12^2 - 9*s13^2)*
               s23^3 + (-27*s12 - 9*s13)*s23^4)))*
         Log((p2q + p3q)/(p1q + p2q + p3q)))/
        (p1q*p2q^5*(8*s12^2*s13 + 8*s12*s13^2)*s23^2 +
         p1q*p3q^5*(8*s12^2*s13 + 8*s12*s13^2)*s23^2 - 8*p1q^4*p2q^2*s12*s13*
          s23^3 + p1q^3*p2q^3*((8*s12^2*s13 + 8*s12*s13^2)*s23^2 -
           16*s12*s13*s23^3) + p1q^2*p2q^4*((16*s12^2*s13 + 16*s12*s13^2)*
            s23^2 - 8*s12*s13*s23^3) +
         p3q^2*(p1q*p2q^3*(80*s12^2*s13 + 80*s12*s13^2)*s23^2 -
           8*p1q^4*s12*s13*s23^3 + p1q^3*p2q*((24*s12^2*s13 + 24*s12*s13^2)*
              s23^2 - 48*s12*s13*s23^3) + p1q^2*p2q^2*
            ((96*s12^2*s13 + 96*s12*s13^2)*s23^2 - 48*s12*s13*s23^3)) +
         p3q*(p1q*p2q^4*(40*s12^2*s13 + 40*s12*s13^2)*s23^2 -
           16*p1q^4*p2q*s12*s13*s23^3 + p1q^3*p2q^2*
            ((24*s12^2*s13 + 24*s12*s13^2)*s23^2 - 48*s12*s13*s23^3) +
           p1q^2*p2q^3*((64*s12^2*s13 + 64*s12*s13^2)*s23^2 -
             32*s12*s13*s23^3)) + p3q^3*(p1q*p2q^2*(80*s12^2*s13 +
             80*s12*s13^2)*s23^2 + p1q^2*p2q*((64*s12^2*s13 + 64*s12*s13^2)*
              s23^2 - 32*s12*s13*s23^3) + p1q^3*((8*s12^2*s13 + 8*s12*s13^2)*
              s23^2 - 16*s12*s13*s23^3)) +
         p3q^4*(p1q*p2q*(40*s12^2*s13 + 40*s12*s13^2)*s23^2 +
           p1q^2*((16*s12^2*s13 + 16*s12*s13^2)*s23^2 - 8*s12*s13*s23^3))) +
       ((p3q^5*((-9*s12^3 - 36*s12^2*s13 - 27*s12*s13^2)*s23 +
            (-27*s12^2 - 45*s12*s13)*s23^2 - 18*s12*s23^3) +
          p1q^2*p2q^3*(72*s12*s13^3 + (-108*s12^2*s13 - 18*s12*s13^2 +
              18*s13^3)*s23 + (-90*s12*s13 - 36*s13^2)*s23^2 +
            (18*s12 - 36*s13)*s23^3) + p1q*p2q^4*(36*s12*s13^3 +
            (-72*s12^2*s13 - 18*s12*s13^2 + 18*s13^3)*s23 +
            (-72*s12*s13 - 18*s13^2)*s23^2 + (9*s12 - 27*s13)*s23^3) +
          p1q^4*p2q*((-36*s12^2*s13 - 36*s12*s13^2)*s23 +
            (-9*s12^2 - 54*s12*s13 - 9*s13^2)*s23^2 + (-9*s12 - 9*s13)*
             s23^3) + p2q^5*((-27*s12^2*s13 - 36*s12*s13^2 - 9*s13^3)*s23 +
            (-45*s12*s13 - 27*s13^2)*s23^2 - 18*s13*s23^3) +
          p1q^3*p2q^2*(36*s12*s13^3 + (-81*s12^2*s13 - 36*s12*s13^2 +
              9*s13^3)*s23 + (-9*s12^2 - 81*s12*s13 - 18*s13^2)*s23^2 -
            18*s13*s23^3) + p3q*(p1q*p2q^3*(-72*s12^2*s13^2 + 72*s12*s13^3 +
              (-198*s12^2*s13 - 108*s12*s13^2 + 18*s13^3)*s23 +
              (-18*s12^2 - 162*s12*s13 - 72*s13^2)*s23^2 + (18*s12 - 54*s13)*
               s23^3) + p2q^4*((-9*s12^3 - 90*s12^2*s13 - 99*s12*s13^2 -
                18*s13^3)*s23 + (-27*s12^2 - 135*s12*s13 - 54*s13^2)*s23^2 +
              (-18*s12 - 36*s13)*s23^3) + p1q^2*p2q^2*(-144*s12^2*s13^2 +
              72*s12*s13^3 + (-288*s12^2*s13 - 198*s12*s13^2 + 18*s13^3)*
               s23 + (-36*s12^2 - 198*s12*s13 - 72*s13^2)*s23^2 +
              (18*s12 - 36*s13)*s23^3) + p1q^3*p2q*(-72*s12^2*s13^2 +
              (9*s12^3 - 189*s12^2*s13 - 189*s12*s13^2 + 9*s13^3)*s23 +
              (-27*s12^2 - 198*s12*s13 - 27*s13^2)*s23^2 + (-18*s12 - 18*s13)*
               s23^3) + p1q^4*((-36*s12^2*s13 - 36*s12*s13^2)*s23 +
              (-9*s12^2 - 54*s12*s13 - 9*s13^2)*s23^2 + (-9*s12 - 9*s13)*s23^
                3)) + p3q^4*(p2q*((-18*s12^3 - 99*s12^2*s13 - 90*s12*s13^2 -
                9*s13^3)*s23 + (-54*s12^2 - 135*s12*s13 - 27*s13^2)*s23^2 +
              (-36*s12 - 18*s13)*s23^3) + p1q*(36*s12^3*s13 +
              (18*s12^3 - 18*s12^2*s13 - 72*s12*s13^2)*s23 + (-18*s12^2 -
                72*s12*s13)*s23^2 + (-27*s12 + 9*s13)*s23^3)) +
          p3q^3*(p2q^2*((-18*s12^3 - 126*s12^2*s13 - 126*s12*s13^2 -
                18*s13^3)*s23 + (-54*s12^2 - 180*s12*s13 - 54*s13^2)*s23^2 +
              (-36*s12 - 36*s13)*s23^3) + p1q*p2q*(72*s12^3*s13 -
              72*s12^2*s13^2 + (18*s12^3 - 108*s12^2*s13 - 198*s12*s13^2)*
               s23 + (-72*s12^2 - 162*s12*s13 - 18*s13^2)*s23^2 +
              (-54*s12 + 18*s13)*s23^3) + p1q^2*(72*s12^3*s13 +
              (18*s12^3 - 18*s12^2*s13 - 108*s12*s13^2)*s23 +
              (-36*s12^2 - 90*s12*s13)*s23^2 + (-36*s12 + 18*s13)*s23^3)) +
          p3q^2*(p1q^3*(36*s12^3*s13 + (9*s12^3 - 36*s12^2*s13 -
                81*s12*s13^2)*s23 + (-18*s12^2 - 81*s12*s13 - 9*s13^2)*s23^
                2 - 18*s12*s23^3) + p2q^3*((-18*s12^3 - 126*s12^2*s13 -
                126*s12*s13^2 - 18*s13^3)*s23 + (-54*s12^2 - 180*s12*s13 -
                54*s13^2)*s23^2 + (-36*s12 - 36*s13)*s23^3) +
            p1q*p2q^2*(36*s12^3*s13 - 144*s12^2*s13^2 + 36*s12*s13^3 +
              (-216*s12^2*s13 - 216*s12*s13^2)*s23 + (-72*s12^2 -
                180*s12*s13 - 72*s13^2)*s23^2 + (-18*s12 - 18*s13)*s23^3) +
            p1q^2*p2q*(72*s12^3*s13 - 144*s12^2*s13^2 + (18*s12^3 -
                198*s12^2*s13 - 288*s12*s13^2)*s23 + (-72*s12^2 -
                198*s12*s13 - 36*s13^2)*s23^2 + (-36*s12 + 18*s13)*s23^3)))*
         Log(-s12 - s13 - s23))/(4*p1q^3*p2q^2*s12*s13*s23^2 +
         8*p1q^2*p2q^3*s12*s13*s23^2 + 4*p1q*p2q^4*s12*s13*s23^2 +
         4*p1q*p3q^4*s12*s13*s23^2 + p3q^3*(8*p1q^2*s12*s13*s23^2 +
           16*p1q*p2q*s12*s13*s23^2) + p3q^2*(4*p1q^3*s12*s13*s23^2 +
           24*p1q^2*p2q*s12*s13*s23^2 + 24*p1q*p2q^2*s12*s13*s23^2) +
         p3q*(8*p1q^3*p2q*s12*s13*s23^2 + 24*p1q^2*p2q^2*s12*s13*s23^2 +
           16*p1q*p2q^3*s12*s13*s23^2)) +
       ((p3q^5*(-9*s12^3 - 9*s12^2*s13 - 9*s12^2*s23) +
          p1q^5*((9*s12^2 + 18*s12*s13 + 9*s13^2)*s23 + (18*s12 + 18*s13)*
             s23^2 + 9*s23^3) + p1q^4*p2q*(9*s12^2*s13 - 9*s13^3 +
            (54*s12^2 + 99*s12*s13 + 27*s13^2)*s23 + (90*s12 + 72*s13)*
             s23^2 + 36*s23^3) + p2q^5*(27*s12^2*s13 + 45*s12*s13^2 +
            18*s13^3 + (36*s12^2 + 117*s12*s13 + 72*s13^2)*s23 +
            (72*s12 + 90*s13)*s23^2 + 36*s23^3) + p1q^3*p2q^2*
           (36*s12^2*s13 + 9*s12*s13^2 - 27*s13^3 +
            (126*s12^2 + 252*s12*s13 + 63*s13^2)*s23 + (216*s12 + 180*s13)*
             s23^2 + 90*s23^3) + p1q*p2q^4*(54*s12^2*s13 + 54*s12*s13^2 +
            (99*s12^2 + 252*s12*s13 + 99*s13^2)*s23 + (189*s12 + 189*s13)*
             s23^2 + 90*s23^3) + p1q^2*p2q^3*(54*s12^2*s13 + 18*s12*s13^2 -
            36*s13^3 + (144*s12^2 + 306*s12*s13 + 72*s13^2)*s23 +
            (261*s12 + 225*s13)*s23^2 + 117*s23^3) +
          p3q^4*(p2q*(-36*s12^3 - 45*s12^2*s13 - 9*s12*s13^2 +
              (-54*s12^2 - 27*s12*s13)*s23 - 18*s12*s23^2) +
            p1q*(-18*s12^3 - 18*s12^2*s13 + 18*s12*s13*s23 + 18*s12*s23^2)) +
          p3q^3*(p1q^2*(-18*s12^3 - 18*s12^2*s13 + (18*s12^2 + 36*s12*s13)*
               s23 + (27*s12 - 9*s13)*s23^2 - 9*s23^3) +
            p1q*p2q*(-36*s12^3 + 54*s12*s13^2 + 18*s13^3 + (27*s12^2 +
                144*s12*s13 + 63*s13^2)*s23 + (81*s12 + 63*s13)*s23^2 +
              18*s23^3) + p2q^2*(-36*s12^3 - 18*s12^2*s13 + 36*s12*s13^2 +
              18*s13^3 + (-18*s12^2 + 90*s12*s13 + 72*s13^2)*s23 +
              (54*s12 + 90*s13)*s23^2 + 36*s23^3)) +
          p3q^2*(p1q^2*p2q*(-72*s12^3 - 54*s12^2*s13 + 18*s12*s13^2 +
              (-36*s12^2 + 72*s12*s13 + 18*s13^2)*s23 + (9*s12 - 9*s13)*s23^
                2 - 27*s23^3) + p1q^3*(-27*s12^3 - 27*s12^2*s13 +
              (-18*s12^2 + 9*s12*s13)*s23 + (-9*s12 - 18*s13)*s23^2 -
              18*s23^3) + p1q*p2q^2*(-72*s12^3 - 18*s12^2*s13 +
              72*s12*s13^2 + 18*s13^3 + (-45*s12^2 + 144*s12*s13 + 81*s13^2)*
               s23 + (45*s12 + 81*s13)*s23^2 + 18*s23^3) +
            p2q^3*(-36*s12^3 - 18*s12^2*s13 + 36*s12*s13^2 + 18*s13^3 +
              (-18*s12^2 + 90*s12*s13 + 72*s13^2)*s23 + (54*s12 + 90*s13)*s23^
                2 + 36*s23^3)) + p3q*(p1q^4*(-9*s12^3 + 9*s12*s13^2 +
              (9*s12^2 + 45*s12*s13 + 18*s13^2)*s23 + (27*s12 + 27*s13)*s23^
                2 + 9*s23^3) + p2q^4*(-27*s12^3 - 9*s12^2*s13 +
              36*s12*s13^2 + 18*s13^3 + (-9*s12^2 + 90*s12*s13 + 72*s13^2)*
               s23 + (54*s12 + 90*s13)*s23^2 + 36*s23^3) +
            p1q^3*p2q*(-36*s12^3 + 18*s12^2*s13 + 54*s12*s13^2 +
              (54*s12^2 + 225*s12*s13 + 81*s13^2)*s23 + (126*s12 + 117*s13)*
               s23^2 + 36*s23^3) + p1q^2*p2q^2*(-54*s12^3 + 54*s12^2*s13 +
              108*s12*s13^2 + (72*s12^2 + 378*s12*s13 + 144*s13^2)*s23 +
              (207*s12 + 225*s13)*s23^2 + 81*s23^3) + p1q*p2q^3*
             (-36*s12^3 + 72*s12^2*s13 + 126*s12*s13^2 + 18*s13^3 +
              (63*s12^2 + 342*s12*s13 + 153*s13^2)*s23 + (189*s12 + 225*s13)*
               s23^2 + 90*s23^3)))*Log(s12/(s12 + s13 + s23)))/
        (8*p1q*p3q^4*s12^2*s23 + p1q^3*p2q^2*(-24*s12*s13*s23 -
           24*s12*s23^2) + p1q^2*p2q^3*(-24*s12*s13*s23 - 24*s12*s23^2) +
         p1q^4*p2q*(-8*s12*s13*s23 - 8*s12*s23^2) +
         p1q*p2q^4*(-8*s12*s13*s23 - 8*s12*s23^2) +
         p3q^2*(p1q^2*p2q*((32*s12^2 - 40*s12*s13)*s23 - 40*s12*s23^2) +
           p1q*p2q^2*((24*s12^2 - 24*s12*s13)*s23 - 24*s12*s23^2) +
           p1q^3*((8*s12^2 - 16*s12*s13)*s23 - 16*s12*s23^2)) +
         p3q*(p1q^2*p2q^2*((16*s12^2 - 56*s12*s13)*s23 - 56*s12*s23^2) +
           p1q^3*p2q*((8*s12^2 - 40*s12*s13)*s23 - 40*s12*s23^2) +
           p1q*p2q^3*((8*s12^2 - 24*s12*s13)*s23 - 24*s12*s23^2) +
           p1q^4*(-8*s12*s13*s23 - 8*s12*s23^2)) +
         p3q^3*(p1q^2*((16*s12^2 - 8*s12*s13)*s23 - 8*s12*s23^2) +
           p1q*p2q*((24*s12^2 - 8*s12*s13)*s23 - 8*s12*s23^2))) +
       ((p2q^5*(9*s12*s13^2 + 9*s13^3 + 9*s13^2*s23) +
          p1q*p2q^4*(18*s12*s13^2 + 18*s13^3 - 18*s12*s13*s23 -
            18*s13*s23^2) + p3q^5*(-18*s12^3 - 45*s12^2*s13 - 27*s12*s13^2 +
            (-72*s12^2 - 117*s12*s13 - 36*s13^2)*s23 + (-90*s12 - 72*s13)*
             s23^2 - 36*s23^3) + p1q^4*p2q*(-9*s12^2*s13 + 9*s13^3 +
            (-18*s12^2 - 45*s12*s13 - 9*s13^2)*s23 + (-27*s12 - 27*s13)*
             s23^2 - 9*s23^3) + p1q^5*((-9*s12^2 - 18*s12*s13 - 9*s13^2)*
             s23 + (-18*s12 - 18*s13)*s23^2 - 9*s23^3) +
          p1q^2*p2q^3*(18*s12*s13^2 + 18*s13^3 + (-36*s12*s13 - 18*s13^2)*
             s23 + (9*s12 - 27*s13)*s23^2 + 9*s23^3) +
          p1q^3*p2q^2*(27*s12*s13^2 + 27*s13^3 + (-9*s12*s13 + 18*s13^2)*
             s23 + (18*s12 + 9*s13)*s23^2 + 18*s23^3) +
          p3q^4*(p1q*(-54*s12^2*s13 - 54*s12*s13^2 + (-99*s12^2 -
                252*s12*s13 - 99*s13^2)*s23 + (-189*s12 - 189*s13)*s23^2 -
              90*s23^3) + p2q*(-18*s12^3 - 36*s12^2*s13 + 9*s12*s13^2 +
              27*s13^3 + (-72*s12^2 - 90*s12*s13 + 9*s13^2)*s23 +
              (-90*s12 - 54*s13)*s23^2 - 36*s23^3)) +
          p3q^3*(p1q^2*(36*s12^3 - 18*s12^2*s13 - 54*s12*s13^2 +
              (-72*s12^2 - 306*s12*s13 - 144*s13^2)*s23 + (-225*s12 -
                261*s13)*s23^2 - 117*s23^3) + p1q*p2q*(-18*s12^3 -
              126*s12^2*s13 - 72*s12*s13^2 + 36*s13^3 + (-153*s12^2 -
                342*s12*s13 - 63*s13^2)*s23 + (-225*s12 - 189*s13)*s23^2 -
              90*s23^3) + p2q^2*(-18*s12^3 - 36*s12^2*s13 + 18*s12*s13^2 +
              36*s13^3 + (-72*s12^2 - 90*s12*s13 + 18*s13^2)*s23 +
              (-90*s12 - 54*s13)*s23^2 - 36*s23^3)) +
          p3q^2*(p1q^3*(27*s12^3 - 9*s12^2*s13 - 36*s12*s13^2 +
              (-63*s12^2 - 252*s12*s13 - 126*s13^2)*s23 + (-180*s12 -
                216*s13)*s23^2 - 90*s23^3) + p1q^2*p2q*(-108*s12^2*s13 -
              54*s12*s13^2 + 54*s13^3 + (-144*s12^2 - 378*s12*s13 - 72*s13^2)*
               s23 + (-225*s12 - 207*s13)*s23^2 - 81*s23^3) +
            p2q^3*(-18*s12^3 - 36*s12^2*s13 + 18*s12*s13^2 + 36*s13^3 +
              (-72*s12^2 - 90*s12*s13 + 18*s13^2)*s23 + (-90*s12 - 54*s13)*
               s23^2 - 36*s23^3) + p1q*p2q^2*(-18*s12^3 - 72*s12^2*s13 +
              18*s12*s13^2 + 72*s13^3 + (-81*s12^2 - 144*s12*s13 + 45*s13^2)*
               s23 + (-81*s12 - 45*s13)*s23^2 - 18*s23^3)) +
          p3q*(p2q^4*(9*s12^2*s13 + 45*s12*s13^2 + 36*s13^3 +
              (27*s12*s13 + 54*s13^2)*s23 + 18*s13*s23^2) +
            p1q^3*p2q*(-54*s12^2*s13 - 18*s12*s13^2 + 36*s13^3 +
              (-81*s12^2 - 225*s12*s13 - 54*s13^2)*s23 + (-117*s12 - 126*s13)*
               s23^2 - 36*s23^3) + p1q^4*(9*s12^3 - 9*s12*s13^2 +
              (-27*s12^2 - 99*s12*s13 - 54*s13^2)*s23 + (-72*s12 - 90*s13)*
               s23^2 - 36*s23^3) + p1q*p2q^3*(-18*s12^3 - 54*s12^2*s13 +
              36*s13^3 + (-63*s12^2 - 144*s12*s13 - 27*s13^2)*s23 +
              (-63*s12 - 81*s13)*s23^2 - 18*s23^3) + p1q^2*p2q^2*
             (-18*s12^2*s13 + 54*s12*s13^2 + 72*s13^3 + (-18*s12^2 -
                72*s12*s13 + 36*s13^2)*s23 + (9*s12 - 9*s13)*s23^2 +
              27*s23^3)))*Log(s13/(s12 + s13 + s23)))/
        (-8*p1q*p2q^4*s13^2*s23 + p1q^4*p2q*(8*s12*s13*s23 + 8*s13*s23^2) +
         p1q*p3q^4*(8*s12*s13*s23 + 8*s13*s23^2) + p1q^2*p2q^3*
          ((8*s12*s13 - 16*s13^2)*s23 + 8*s13*s23^2) +
         p1q^3*p2q^2*((16*s12*s13 - 8*s13^2)*s23 + 16*s13*s23^2) +
         p3q^3*(p1q^2*(24*s12*s13*s23 + 24*s13*s23^2) +
           p1q*p2q*((24*s12*s13 - 8*s13^2)*s23 + 24*s13*s23^2)) +
         p3q*(p1q^4*(8*s12*s13*s23 + 8*s13*s23^2) + p1q*p2q^3*
            ((8*s12*s13 - 24*s13^2)*s23 + 8*s13*s23^2) +
           p1q^2*p2q^2*((40*s12*s13 - 32*s13^2)*s23 + 40*s13*s23^2) +
           p1q^3*p2q*((40*s12*s13 - 8*s13^2)*s23 + 40*s13*s23^2)) +
         p3q^2*(p1q^3*(24*s12*s13*s23 + 24*s13*s23^2) +
           p1q*p2q^2*((24*s12*s13 - 24*s13^2)*s23 + 24*s13*s23^2) +
           p1q^2*p2q*((56*s12*s13 - 16*s13^2)*s23 + 56*s13*s23^2))) +
       ((p3q^6*((9*s12^3 - 9*s12*s13^2)*s23 + (9*s12^2 - 9*s12*s13)*s23^2) +
          p2q^6*((-9*s12^2*s13 + 9*s13^3)*s23 + (-9*s12*s13 + 9*s13^2)*
             s23^2) + p1q^3*p2q^3*(9*s12^3*s13 - 171*s12^2*s13^2 +
            27*s12*s13^3 - 9*s13^4 + (18*s12^3 - 153*s12^2*s13 -
              126*s12*s13^2 + 9*s13^3)*s23 + (18*s12^2 - 18*s12*s13 -
              36*s13^2)*s23^2 + 54*s12*s23^3) + p1q^2*p2q^4*
           (-162*s12^2*s13^2 + 36*s12*s13^3 - 18*s13^4 +
            (-216*s12^2*s13 - 108*s12*s13^2 + 36*s13^3)*s23 +
            (-18*s12^2 - 90*s12*s13 - 18*s13^2)*s23^2 + (36*s12 - 18*s13)*
             s23^3) + p1q*p2q^5*(-54*s12^2*s13^2 - 18*s13^4 +
            (-90*s12^2*s13 - 36*s12*s13^2 + 18*s13^3)*s23 +
            (-9*s12^2 - 54*s12*s13 + 9*s13^2)*s23^2 + (9*s12 - 9*s13)*
             s23^3) + p1q^4*p2q^2*(-72*s12^2*s13^2 +
            (9*s12^3 - 45*s12^2*s13 - 45*s12*s13^2 + 9*s13^3)*s23 +
            (9*s12^2 + 18*s12*s13 + 9*s13^2)*s23^2 + (18*s12 + 18*s13)*
             s23^3) + p3q^5*(p2q*((27*s12^3 - 9*s12^2*s13 - 27*s12*s13^2 +
                9*s13^3)*s23 + (27*s12^2 - 36*s12*s13 + 9*s13^2)*s23^2) +
            p1q*(-18*s12^4 - 54*s12^2*s13^2 + (18*s12^3 - 36*s12^2*s13 -
                90*s12*s13^2)*s23 + (9*s12^2 - 54*s12*s13 - 9*s13^2)*s23^2 +
              (-9*s12 + 9*s13)*s23^3)) +
          p3q^4*(p2q^2*((36*s12^3 - 27*s12^2*s13 - 36*s12*s13^2 + 27*s13^3)*
               s23 + (36*s12^2 - 63*s12*s13 + 27*s13^2)*s23^2) +
            p1q*p2q*(-36*s12^4 + 90*s12^3*s13 - 180*s12^2*s13^2 +
              54*s12*s13^3 + (126*s12^3 - 90*s12^2*s13 - 306*s12*s13^2 +
                18*s13^3)*s23 + (63*s12^2 - 198*s12*s13 - 63*s13^2)*s23^2 +
              (-9*s12 + 9*s13)*s23^3) + p1q^2*(-18*s12^4 + 36*s12^3*s13 -
              162*s12^2*s13^2 + (36*s12^3 - 108*s12^2*s13 - 216*s12*s13^2)*
               s23 + (-18*s12^2 - 90*s12*s13 - 18*s13^2)*s23^2 +
              (-18*s12 + 36*s13)*s23^3)) +
          p3q*(p2q^5*((9*s12^3 - 27*s12^2*s13 - 9*s12*s13^2 + 27*s13^3)*s23 +
              (9*s12^2 - 36*s12*s13 + 27*s13^2)*s23^2) + p1q^2*p2q^3*
             (180*s12^3*s13 - 396*s12^2*s13^2 + 252*s12*s13^3 - 36*s13^4 +
              (54*s12^3 - 486*s12^2*s13 - 270*s12*s13^2 + 126*s13^3)*s23 +
              (-72*s12^2 - 216*s12*s13 - 72*s13^2)*s23^2 + (90*s12 - 18*s13)*
               s23^3) + p1q*p2q^4*(54*s12^3*s13 - 180*s12^2*s13^2 +
              90*s12*s13^3 - 36*s13^4 + (18*s12^3 - 306*s12^2*s13 -
                90*s12*s13^2 + 126*s13^3)*s23 + (-63*s12^2 - 198*s12*s13 +
                63*s13^2)*s23^2 + (9*s12 - 9*s13)*s23^3) +
            p1q^4*p2q*(72*s12^3*s13 + 72*s12*s13^3 + (18*s12^3 +
                54*s12^2*s13 + 54*s12*s13^2 + 18*s13^3)*s23 +
              (18*s12^2 + 108*s12*s13 + 18*s13^2)*s23^2 + (36*s12 + 36*s13)*
               s23^3) + p1q^3*p2q^2*(-9*s12^4 + 189*s12^3*s13 -
              225*s12^2*s13^2 + 207*s12*s13^3 - 18*s13^4 + (45*s12^3 -
                144*s12^2*s13 - 117*s12*s13^2 + 36*s13^3)*s23 +
              (90*s12*s13 - 54*s13^2)*s23^2 + (108*s12 + 54*s13)*s23^3)) +
          p3q^3*(p1q*p2q^2*(-18*s12^4 + 234*s12^3*s13 - 270*s12^2*s13^2 +
              198*s12*s13^3 + (216*s12^3 - 198*s12^2*s13 - 360*s12*s13^2 +
                126*s13^3)*s23 + (54*s12^2 - 324*s12*s13 - 54*s13^2)*s23^2) +
            p2q^3*((36*s12^3 - 36*s12^2*s13 - 36*s12*s13^2 + 36*s13^3)*s23 +
              (36*s12^2 - 72*s12*s13 + 36*s13^2)*s23^2) +
            p1q^3*(-9*s12^4 + 27*s12^3*s13 - 171*s12^2*s13^2 + 9*s12*s13^3 +
              (9*s12^3 - 126*s12^2*s13 - 153*s12*s13^2 + 18*s13^3)*s23 +
              (-36*s12^2 - 18*s12*s13 + 18*s13^2)*s23^2 + 54*s13*s23^3) +
            p1q^2*p2q*(-36*s12^4 + 252*s12^3*s13 - 396*s12^2*s13^2 +
              180*s12*s13^3 + (126*s12^3 - 270*s12^2*s13 - 486*s12*s13^2 +
                54*s13^3)*s23 + (-72*s12^2 - 216*s12*s13 - 72*s13^2)*s23^2 +
              (-18*s12 + 90*s13)*s23^3)) +
          p3q^2*(p2q^4*((27*s12^3 - 36*s12^2*s13 - 27*s12*s13^2 + 36*s13^3)*
               s23 + (27*s12^2 - 63*s12*s13 + 36*s13^2)*s23^2) +
            p1q*p2q^3*(198*s12^3*s13 - 270*s12^2*s13^2 + 234*s12*s13^3 -
              18*s13^4 + (126*s12^3 - 360*s12^2*s13 - 198*s12*s13^2 +
                216*s13^3)*s23 + (-54*s12^2 - 324*s12*s13 + 54*s13^2)*s23^
                2) + p1q^4*(-72*s12^2*s13^2 + (9*s12^3 - 45*s12^2*s13 -
                45*s12*s13^2 + 9*s13^3)*s23 + (9*s12^2 + 18*s12*s13 +
                9*s13^2)*s23^2 + (18*s12 + 18*s13)*s23^3) +
            p1q^2*p2q^2*(-18*s12^4 + 396*s12^3*s13 - 468*s12^2*s13^2 +
              396*s12*s13^3 - 18*s13^4 + (144*s12^3 - 432*s12^2*s13 -
                432*s12*s13^2 + 144*s13^3)*s23 + (-108*s12^2 - 252*s12*s13 -
                108*s13^2)*s23^2 + (54*s12 + 54*s13)*s23^3) +
            p1q^3*p2q*(-18*s12^4 + 207*s12^3*s13 - 225*s12^2*s13^2 +
              189*s12*s13^3 - 9*s13^4 + (36*s12^3 - 117*s12^2*s13 -
                144*s12*s13^2 + 45*s13^3)*s23 + (-54*s12^2 + 90*s12*s13)*s23^
                2 + (54*s12 + 108*s13)*s23^3)))*Log(s23/(s12 + s13 + s23)))/
        (p1q*p2q^5*(8*s12^2*s13 + 8*s12*s13^2)*s23 +
         p1q*p3q^5*(8*s12^2*s13 + 8*s12*s13^2)*s23 - 8*p1q^4*p2q^2*s12*s13*
          s23^2 + p1q^3*p2q^3*((8*s12^2*s13 + 8*s12*s13^2)*s23 -
           16*s12*s13*s23^2) + p1q^2*p2q^4*((16*s12^2*s13 + 16*s12*s13^2)*
            s23 - 8*s12*s13*s23^2) +
         p3q^2*(p1q*p2q^3*(80*s12^2*s13 + 80*s12*s13^2)*s23 -
           8*p1q^4*s12*s13*s23^2 + p1q^3*p2q*((24*s12^2*s13 + 24*s12*s13^2)*
              s23 - 48*s12*s13*s23^2) + p1q^2*p2q^2*
            ((96*s12^2*s13 + 96*s12*s13^2)*s23 - 48*s12*s13*s23^2)) +
         p3q*(p1q*p2q^4*(40*s12^2*s13 + 40*s12*s13^2)*s23 -
           16*p1q^4*p2q*s12*s13*s23^2 + p1q^3*p2q^2*
            ((24*s12^2*s13 + 24*s12*s13^2)*s23 - 48*s12*s13*s23^2) +
           p1q^2*p2q^3*((64*s12^2*s13 + 64*s12*s13^2)*s23 -
             32*s12*s13*s23^2)) + p3q^3*(p1q*p2q^2*(80*s12^2*s13 +
             80*s12*s13^2)*s23 + p1q^2*p2q*((64*s12^2*s13 + 64*s12*s13^2)*
              s23 - 32*s12*s13*s23^2) + p1q^3*((8*s12^2*s13 + 8*s12*s13^2)*
              s23 - 16*s12*s13*s23^2)) +
         p3q^4*(p1q*p2q*(40*s12^2*s13 + 40*s12*s13^2)*s23 +
           p1q^2*((16*s12^2*s13 + 16*s12*s13^2)*s23 - 8*s12*s13*s23^2)))) +
     Log(-s12 - s13 - s23)*
      ((p3q^5*((-189*s12^3 - 756*s12^2*s13 - 567*s12*s13^2)*s23 +
           (-567*s12^2 - 945*s12*s13)*s23^2 - 378*s12*s23^3) +
         p1q^4*p2q*((-756*s12^2*s13 - 756*s12*s13^2)*s23 +
           (-189*s12^2 - 1134*s12*s13 - 189*s13^2)*s23^2 +
           (-189*s12 - 189*s13)*s23^3) +
         p2q^5*((-567*s12^2*s13 - 756*s12*s13^2 - 189*s13^3)*s23 +
           (-945*s12*s13 - 567*s13^2)*s23^2 - 378*s13*s23^3) +
         p1q*p2q^4*(756*s12*s13^3 + (-1512*s12^2*s13 - 522*s12*s13^2 +
             234*s13^3)*s23 + (-43*s12^2 - 1470*s12*s13 - 539*s13^2)*s23^2 +
           (231*s12 - 499*s13)*s23^3 + 42*s23^4) + p1q^2*p2q^3*
          (1512*s12*s13^3 + (-2268*s12^2*s13 - 522*s12*s13^2 + 234*s13^3)*
            s23 + (-128*s12^2 - 1772*s12*s13 - 858*s13^2)*s23^2 +
           (394*s12 - 570*s13)*s23^3 + 58*s23^4) + p1q^3*p2q^2*
          (756*s12*s13^3 + (-1701*s12^2*s13 - 756*s12*s13^2 + 189*s13^3)*
            s23 + (-232*s12^2 - 1541*s12*s13 - 277*s13^2)*s23^2 +
           (58*s12 - 176*s13)*s23^3 + 58*s23^4) +
         p3q^4*(p2q*((-522*s12^3 - 2655*s12^2*s13 - 2322*s12*s13^2 - 189*
                s13^3)*s23 + (-1566*s12^2 - 3555*s12*s13 - 567*s13^2)*s23^2 +
             (-1044*s12 - 378*s13)*s23^3) + p1q*(756*s12^3*s13 +
             (234*s12^3 - 522*s12^2*s13 - 1512*s12*s13^2)*s23 +
             (-539*s12^2 - 1470*s12*s13 - 43*s13^2)*s23^2 +
             (-499*s12 + 231*s13)*s23^3 + 42*s23^4)) +
         p3q^3*(p2q^2*((-666*s12^3 - 4230*s12^2*s13 - 4086*s12*s13^2 - 522*
                s13^3)*s23 + (-1998*s12^2 - 5940*s12*s13 - 1566*s13^2)*
              s23^2 + (-1332*s12 - 1044*s13)*s23^3) +
           p1q^2*(1512*s12^3*s13 + (234*s12^3 - 522*s12^2*s13 - 2268*s12*
                s13^2)*s23 + (-858*s12^2 - 1772*s12*s13 - 128*s13^2)*s23^2 +
             (-570*s12 + 394*s13)*s23^3 + 58*s23^4) +
           p1q*p2q*(1512*s12^3*s13 - 1512*s12^2*s13^2 +
             (234*s12^3 - 3420*s12^2*s13 - 5166*s12*s13^2)*s23 +
             (-1946*s12^2 - 4634*s12*s13 - 720*s13^2)*s23^2 +
             (-1136*s12 + 324*s13)*s23^3 + 116*s23^4)) +
         p3q*(p2q^4*((-189*s12^3 - 2322*s12^2*s13 - 2655*s12*s13^2 - 522*
                s13^3)*s23 + (-567*s12^2 - 3555*s12*s13 - 1566*s13^2)*s23^2 +
             (-378*s12 - 1044*s13)*s23^3) +
           p1q^4*((-756*s12^2*s13 - 756*s12*s13^2)*s23 +
             (-189*s12^2 - 1134*s12*s13 - 189*s13^2)*s23^2 +
             (-189*s12 - 189*s13)*s23^3) + p1q*p2q^3*(-1512*s12^2*s13^2 +
             1512*s12*s13^3 + (-5166*s12^2*s13 - 3420*s12*s13^2 + 234*s13^3)*
              s23 + (-720*s12^2 - 4634*s12*s13 - 1946*s13^2)*s23^2 +
             (324*s12 - 1136*s13)*s23^3 + 116*s23^4) +
           p1q^3*p2q*(-1512*s12^2*s13^2 + (189*s12^3 - 3969*s12^2*s13 - 3969*
                s12*s13^2 + 189*s13^3)*s23 + (-509*s12^2 - 3838*s12*s13 - 509*
                s13^2)*s23^2 + (-118*s12 - 118*s13)*s23^3 + 116*s23^4) +
           p1q^2*p2q^2*(-3024*s12^2*s13^2 + 1512*s12*s13^3 +
             (-6912*s12^2*s13 - 5166*s12*s13^2 + 234*s13^3)*s23 +
             (-1114*s12^2 - 4956*s12*s13 - 1844*s13^2)*s23^2 +
             (452*s12 - 512*s13)*s23^3 + 174*s23^4)) +
         p3q^2*(p2q^3*((-522*s12^3 - 4086*s12^2*s13 - 4230*s12*s13^2 - 666*
                s13^3)*s23 + (-1566*s12^2 - 5940*s12*s13 - 1998*s13^2)*
              s23^2 + (-1044*s12 - 1332*s13)*s23^3) +
           p1q^3*(756*s12^3*s13 + (189*s12^3 - 756*s12^2*s13 - 1701*s12*
                s13^2)*s23 + (-277*s12^2 - 1541*s12*s13 - 232*s13^2)*s23^2 +
             (-176*s12 + 58*s13)*s23^3 + 58*s23^4) + p1q*p2q^2*
            (756*s12^3*s13 - 3024*s12^2*s13^2 + 756*s12*s13^3 +
             (-6552*s12^2*s13 - 6552*s12*s13^2)*s23 +
             (-2084*s12^2 - 6328*s12*s13 - 2084*s13^2)*s23^2 +
             (-544*s12 - 544*s13)*s23^3 + 148*s23^4) +
           p1q^2*p2q*(1512*s12^3*s13 - 3024*s12^2*s13^2 +
             (234*s12^3 - 5166*s12^2*s13 - 6912*s12*s13^2)*s23 +
             (-1844*s12^2 - 4956*s12*s13 - 1114*s13^2)*s23^2 +
             (-512*s12 + 452*s13)*s23^3 + 174*s23^4)))/
        (36*p1q^3*p2q^2*s12*s13*s23^2 + 72*p1q^2*p2q^3*s12*s13*s23^2 +
         36*p1q*p2q^4*s12*s13*s23^2 + 36*p1q*p3q^4*s12*s13*s23^2 +
         p3q^3*(72*p1q^2*s12*s13*s23^2 + 144*p1q*p2q*s12*s13*s23^2) +
         p3q^2*(36*p1q^3*s12*s13*s23^2 + 216*p1q^2*p2q*s12*s13*s23^2 +
           216*p1q*p2q^2*s12*s13*s23^2) + p3q*(72*p1q^3*p2q*s12*s13*s23^2 +
           216*p1q^2*p2q^2*s12*s13*s23^2 + 144*p1q*p2q^3*s12*s13*s23^2)) +
       ((p3q^5*((-9*s12^2*s13 - 9*s12*s13^2)*s23 - 9*s12*s13*s23^2) +
          p2q^5*((-18*s12^2*s13 - 27*s12*s13^2 - 9*s13^3)*s23 +
            (-36*s12*s13 - 27*s13^2)*s23^2 - 18*s13*s23^3) +
          p1q^4*p2q*((-18*s12^2*s13 - 18*s12*s13^2)*s23 +
            (-27*s12*s13 - 9*s13^2)*s23^2 - 9*s13*s23^3) +
          p1q*p2q^4*(18*s12*s13^3 + (-36*s12^2*s13 - 18*s12*s13^2 + 18*s13^3)*
             s23 + (s12^2 - 61*s12*s13 - 15*s13^2)*s23^2 + (2*s12 - 23*s13)*
             s23^3 + 2*s23^4) + p1q^3*p2q^2*(18*s12*s13^3 +
            (-36*s12^2*s13 - 27*s12*s13^2 + 9*s13^3)*s23 +
            (s12^2 - 54*s12*s13 - 17*s13^2)*s23^2 + (2*s12 - 16*s13)*s23^3 +
            2*s23^4) + p1q^2*p2q^3*(36*s12*s13^3 +
            (-54*s12^2*s13 - 36*s12*s13^2 + 18*s13^3)*s23 +
            (-92*s12*s13 - 34*s13^2)*s23^2 - 34*s13*s23^3 + 2*s23^4) +
          p3q^4*(p2q*((-36*s12^2*s13 - 45*s12*s13^2 - 9*s13^3)*s23 +
              (-54*s12*s13 - 27*s13^2)*s23^2 - 18*s13*s23^3) +
            p1q*(18*s12^3*s13 - 36*s12*s13^2*s23 + (3*s12^2 - 7*s12*s13 +
                s13^2)*s23^2 + (4*s12 + 11*s13)*s23^3 + 2*s23^4)) +
          p3q^3*(p2q^2*((-54*s12^2*s13 - 72*s12*s13^2 - 18*s13^3)*s23 +
              (-90*s12*s13 - 54*s13^2)*s23^2 - 36*s13*s23^3) +
            p1q^2*(36*s12^3*s13 + (18*s12^2*s13 - 54*s12*s13^2)*s23 +
              (2*s12^2 - 2*s12*s13)*s23^2 + (2*s12 + 18*s13)*s23^3 +
              2*s23^4) + p1q*p2q*(36*s12^3*s13 - 36*s12^2*s13^2 -
              108*s12*s13^2*s23 + (6*s12^2 - 18*s12*s13 - 16*s13^2)*s23^2 +
              (6*s12 + 20*s13)*s23^3 + 4*s23^4)) +
          p3q*(p2q^4*((-45*s12^2*s13 - 63*s12*s13^2 - 18*s13^3)*s23 +
              (-81*s12*s13 - 54*s13^2)*s23^2 - 36*s13*s23^3) +
            p1q^4*((-18*s12^2*s13 - 18*s12*s13^2)*s23 + (-27*s12*s13 -
                9*s13^2)*s23^2 - 9*s13*s23^3) + p1q*p2q^3*(-36*s12^2*s13^2 +
              36*s12*s13^3 + (-90*s12^2*s13 - 108*s12*s13^2 + 18*s13^3)*s23 +
              (2*s12^2 - 144*s12*s13 - 66*s13^2)*s23^2 + (2*s12 - 48*s13)*s23^
                3 + 4*s23^4) + p1q^3*p2q*(-36*s12^2*s13^2 + (-81*s12^2*s13 -
                108*s12*s13^2 + 9*s13^3)*s23 + (2*s12^2 - 99*s12*s13 -
                25*s13^2)*s23^2 + (4*s12 - 14*s13)*s23^3 + 4*s23^4) +
            p1q^2*p2q^2*(-72*s12^2*s13^2 + 36*s12*s13^3 + (-108*s12^2*s13 -
                162*s12*s13^2 + 18*s13^3)*s23 + (2*s12^2 - 150*s12*s13 -
                68*s13^2)*s23^2 + (2*s12 - 32*s13)*s23^3 + 6*s23^4)) +
          p3q^2*(p2q^3*((-54*s12^2*s13 - 72*s12*s13^2 - 18*s13^3)*s23 +
              (-90*s12*s13 - 54*s13^2)*s23^2 - 36*s13*s23^3) +
            p1q^3*(18*s12^3*s13 + (-9*s12^2*s13 - 45*s12*s13^2)*s23 +
              (s12^2 - 27*s12*s13 - 8*s13^2)*s23^2 + (2*s12 + 2*s13)*s23^3 +
              2*s23^4) + p1q*p2q^2*(18*s12^3*s13 - 72*s12^2*s13^2 +
              18*s12*s13^3 + (-54*s12^2*s13 - 162*s12*s13^2)*s23 +
              (4*s12^2 - 94*s12*s13 - 68*s13^2)*s23^2 + (2*s12 - 16*s13)*s23^
                3 + 4*s23^4) + p1q^2*p2q*(36*s12^3*s13 - 72*s12^2*s13^2 +
              (-36*s12^2*s13 - 180*s12*s13^2)*s23 + (4*s12^2 - 60*s12*s13 -
                34*s13^2)*s23^2 + (4*s12 + 20*s13)*s23^3 + 6*s23^4)))*
         Log(s12/(s12 + s13 + s23)))/(4*p1q^3*p2q^2*s12*s13*s23^2 +
         8*p1q^2*p2q^3*s12*s13*s23^2 + 4*p1q*p2q^4*s12*s13*s23^2 +
         4*p1q*p3q^4*s12*s13*s23^2 + p3q^3*(8*p1q^2*s12*s13*s23^2 +
           16*p1q*p2q*s12*s13*s23^2) + p3q^2*(4*p1q^3*s12*s13*s23^2 +
           24*p1q^2*p2q*s12*s13*s23^2 + 24*p1q*p2q^2*s12*s13*s23^2) +
         p3q*(8*p1q^3*p2q*s12*s13*s23^2 + 24*p1q^2*p2q^2*s12*s13*s23^2 +
           16*p1q*p2q^3*s12*s13*s23^2)) +
       ((p2q^5*((-9*s12^2*s13 - 9*s12*s13^2)*s23 - 9*s12*s13*s23^2) +
          p3q^5*((-9*s12^3 - 27*s12^2*s13 - 18*s12*s13^2)*s23 +
            (-27*s12^2 - 36*s12*s13)*s23^2 - 18*s12*s23^3) +
          p1q^4*p2q*((-18*s12^2*s13 - 18*s12*s13^2)*s23 +
            (-9*s12^2 - 27*s12*s13)*s23^2 - 9*s12*s23^3) +
          p1q^3*p2q^2*(18*s12*s13^3 + (-45*s12^2*s13 - 9*s12*s13^2)*s23 +
            (-8*s12^2 - 27*s12*s13 + s13^2)*s23^2 + (2*s12 + 2*s13)*s23^3 +
            2*s23^4) + p1q^2*p2q^3*(36*s12*s13^3 +
            (-54*s12^2*s13 + 18*s12*s13^2)*s23 + (-2*s12*s13 + 2*s13^2)*
             s23^2 + (18*s12 + 2*s13)*s23^3 + 2*s23^4) +
          p1q*p2q^4*(18*s12*s13^3 - 36*s12^2*s13*s23 +
            (s12^2 - 7*s12*s13 + 3*s13^2)*s23^2 + (11*s12 + 4*s13)*s23^3 +
            2*s23^4) + p3q^4*(p2q*((-18*s12^3 - 63*s12^2*s13 - 45*s12*s13^2)*
               s23 + (-54*s12^2 - 81*s12*s13)*s23^2 - 36*s12*s23^3) +
            p1q*(18*s12^3*s13 + (18*s12^3 - 18*s12^2*s13 - 36*s12*s13^2)*
               s23 + (-15*s12^2 - 61*s12*s13 + s13^2)*s23^2 +
              (-23*s12 + 2*s13)*s23^3 + 2*s23^4)) +
          p3q^3*(p2q^2*((-18*s12^3 - 72*s12^2*s13 - 54*s12*s13^2)*s23 +
              (-54*s12^2 - 90*s12*s13)*s23^2 - 36*s12*s23^3) +
            p1q^2*(36*s12^3*s13 + (18*s12^3 - 36*s12^2*s13 - 54*s12*s13^2)*
               s23 + (-34*s12^2 - 92*s12*s13)*s23^2 - 34*s12*s23^3 +
              2*s23^4) + p1q*p2q*(36*s12^3*s13 - 36*s12^2*s13^2 +
              (18*s12^3 - 108*s12^2*s13 - 90*s12*s13^2)*s23 +
              (-66*s12^2 - 144*s12*s13 + 2*s13^2)*s23^2 + (-48*s12 + 2*s13)*
               s23^3 + 4*s23^4)) + p3q^2*(p2q^3*((-18*s12^3 - 72*s12^2*s13 -
                54*s12*s13^2)*s23 + (-54*s12^2 - 90*s12*s13)*s23^2 -
              36*s12*s23^3) + p1q^3*(18*s12^3*s13 + (9*s12^3 - 27*s12^2*s13 -
                36*s12*s13^2)*s23 + (-17*s12^2 - 54*s12*s13 + s13^2)*s23^2 +
              (-16*s12 + 2*s13)*s23^3 + 2*s23^4) + p1q*p2q^2*
             (18*s12^3*s13 - 72*s12^2*s13^2 + 18*s12*s13^3 +
              (-162*s12^2*s13 - 54*s12*s13^2)*s23 + (-68*s12^2 - 94*s12*s13 +
                4*s13^2)*s23^2 + (-16*s12 + 2*s13)*s23^3 + 4*s23^4) +
            p1q^2*p2q*(36*s12^3*s13 - 72*s12^2*s13^2 + (18*s12^3 -
                162*s12^2*s13 - 108*s12*s13^2)*s23 + (-68*s12^2 -
                150*s12*s13 + 2*s13^2)*s23^2 + (-32*s12 + 2*s13)*s23^3 +
              6*s23^4)) + p3q*(p2q^4*((-9*s12^3 - 45*s12^2*s13 -
                36*s12*s13^2)*s23 + (-27*s12^2 - 54*s12*s13)*s23^2 -
              18*s12*s23^3) + p1q^4*((-18*s12^2*s13 - 18*s12*s13^2)*s23 +
              (-9*s12^2 - 27*s12*s13)*s23^2 - 9*s12*s23^3) +
            p1q^3*p2q*(-36*s12^2*s13^2 + (9*s12^3 - 108*s12^2*s13 -
                81*s12*s13^2)*s23 + (-25*s12^2 - 99*s12*s13 + 2*s13^2)*s23^
                2 + (-14*s12 + 4*s13)*s23^3 + 4*s23^4) +
            p1q*p2q^3*(-36*s12^2*s13^2 + 36*s12*s13^3 - 108*s12^2*s13*s23 +
              (-16*s12^2 - 18*s12*s13 + 6*s13^2)*s23^2 + (20*s12 + 6*s13)*s23^
                3 + 4*s23^4) + p1q^2*p2q^2*(-72*s12^2*s13^2 + 36*s12*s13^3 +
              (-180*s12^2*s13 - 36*s12*s13^2)*s23 + (-34*s12^2 - 60*s12*s13 +
                4*s13^2)*s23^2 + (20*s12 + 4*s13)*s23^3 + 6*s23^4)))*
         Log(s13/(s12 + s13 + s23)))/(4*p1q^3*p2q^2*s12*s13*s23^2 +
         8*p1q^2*p2q^3*s12*s13*s23^2 + 4*p1q*p2q^4*s12*s13*s23^2 +
         4*p1q*p3q^4*s12*s13*s23^2 + p3q^3*(8*p1q^2*s12*s13*s23^2 +
           16*p1q*p2q*s12*s13*s23^2) + p3q^2*(4*p1q^3*s12*s13*s23^2 +
           24*p1q^2*p2q*s12*s13*s23^2 + 24*p1q*p2q^2*s12*s13*s23^2) +
         p3q*(8*p1q^3*p2q*s12*s13*s23^2 + 24*p1q^2*p2q^2*s12*s13*s23^2 +
           16*p1q*p2q^3*s12*s13*s23^2)) +
       ((p3q^5*((9*s12^3 + 36*s12^2*s13 + 27*s12*s13^2)*s23 +
            (27*s12^2 + 45*s12*s13)*s23^2 + 18*s12*s23^3) +
          p2q^5*((27*s12^2*s13 + 36*s12*s13^2 + 9*s13^3)*s23 +
            (45*s12*s13 + 27*s13^2)*s23^2 + 18*s13*s23^3) +
          p1q^4*p2q*((36*s12^2*s13 + 36*s12*s13^2)*s23 +
            (9*s12^2 + 54*s12*s13 + 9*s13^2)*s23^2 + (9*s12 + 9*s13)*s23^3) +
          p1q*p2q^4*(-36*s12*s13^3 + (72*s12^2*s13 + 18*s12*s13^2 - 18*s13^3)*
             s23 + (-10*s12^2 + 52*s12*s13 - 12*s13^2)*s23^2 +
            (-29*s12 - 13*s13)*s23^3 - 20*s23^4) + p1q^3*p2q^2*
           (-36*s12*s13^3 + (81*s12^2*s13 + 36*s12*s13^2 - 9*s13^3)*s23 +
            (-s12^2 + 81*s12*s13 + 8*s13^2)*s23^2 + (-20*s12 - 2*s13)*s23^3 -
            20*s23^4) + p1q^2*p2q^3*(-72*s12*s13^3 +
            (108*s12^2*s13 + 18*s12*s13^2 - 18*s13^3)*s23 +
            (110*s12*s13 + 16*s13^2)*s23^2 + (-18*s12 + 16*s13)*s23^3 -
            20*s23^4) + p3q*(p1q^4*((36*s12^2*s13 + 36*s12*s13^2)*s23 +
              (9*s12^2 + 54*s12*s13 + 9*s13^2)*s23^2 + (9*s12 + 9*s13)*s23^
                3) + p2q^4*((9*s12^3 + 90*s12^2*s13 + 99*s12*s13^2 +
                18*s13^3)*s23 + (27*s12^2 + 135*s12*s13 + 54*s13^2)*s23^2 +
              (18*s12 + 36*s13)*s23^3) + p1q^2*p2q^2*(144*s12^2*s13^2 -
              72*s12*s13^3 + (288*s12^2*s13 + 198*s12*s13^2 - 18*s13^3)*s23 +
              (16*s12^2 + 258*s12*s13 + 32*s13^2)*s23^2 + (-38*s12 - 4*s13)*
               s23^3 - 60*s23^4) + p1q^3*p2q*(72*s12^2*s13^2 +
              (-9*s12^3 + 189*s12^2*s13 + 189*s12*s13^2 - 9*s13^3)*s23 +
              (7*s12^2 + 198*s12*s13 + 7*s13^2)*s23^2 + (-22*s12 - 22*s13)*
               s23^3 - 40*s23^4) + p1q*p2q^3*(72*s12^2*s13^2 - 72*s12*s13^3 +
              (198*s12^2*s13 + 108*s12*s13^2 - 18*s13^3)*s23 +
              (-2*s12^2 + 162*s12*s13 + 12*s13^2)*s23^2 + (-38*s12 - 6*s13)*
               s23^3 - 40*s23^4)) + p3q^4*
           (p2q*((18*s12^3 + 99*s12^2*s13 + 90*s12*s13^2 + 9*s13^3)*s23 +
              (54*s12^2 + 135*s12*s13 + 27*s13^2)*s23^2 + (36*s12 + 18*s13)*
               s23^3) + p1q*(-36*s12^3*s13 + (-18*s12^3 + 18*s12^2*s13 +
                72*s12*s13^2)*s23 + (-12*s12^2 + 52*s12*s13 - 10*s13^2)*s23^
                2 + (-13*s12 - 29*s13)*s23^3 - 20*s23^4)) +
          p3q^2*(p2q^3*((18*s12^3 + 126*s12^2*s13 + 126*s12*s13^2 + 18*s13^3)*
               s23 + (54*s12^2 + 180*s12*s13 + 54*s13^2)*s23^2 +
              (36*s12 + 36*s13)*s23^3) + p1q^2*p2q*(-72*s12^3*s13 +
              144*s12^2*s13^2 + (-18*s12^3 + 198*s12^2*s13 + 288*s12*s13^2)*
               s23 + (32*s12^2 + 258*s12*s13 + 16*s13^2)*s23^2 +
              (-4*s12 - 38*s13)*s23^3 - 60*s23^4) + p1q*p2q^2*
             (-36*s12^3*s13 + 144*s12^2*s13^2 - 36*s12*s13^3 +
              (216*s12^2*s13 + 216*s12*s13^2)*s23 + (32*s12^2 + 220*s12*s13 +
                32*s13^2)*s23^2 + (-2*s12 - 2*s13)*s23^3 - 40*s23^4) +
            p1q^3*(-36*s12^3*s13 + (-9*s12^3 + 36*s12^2*s13 + 81*s12*s13^2)*
               s23 + (8*s12^2 + 81*s12*s13 - s13^2)*s23^2 + (-2*s12 - 20*s13)*
               s23^3 - 20*s23^4)) + p3q^3*
           (p2q^2*((18*s12^3 + 126*s12^2*s13 + 126*s12*s13^2 + 18*s13^3)*
               s23 + (54*s12^2 + 180*s12*s13 + 54*s13^2)*s23^2 +
              (36*s12 + 36*s13)*s23^3) + p1q*p2q*(-72*s12^3*s13 +
              72*s12^2*s13^2 + (-18*s12^3 + 108*s12^2*s13 + 198*s12*s13^2)*
               s23 + (12*s12^2 + 162*s12*s13 - 2*s13^2)*s23^2 +
              (-6*s12 - 38*s13)*s23^3 - 40*s23^4) +
            p1q^2*(-72*s12^3*s13 + (-18*s12^3 + 18*s12^2*s13 + 108*s12*s13^2)*
               s23 + (16*s12^2 + 110*s12*s13)*s23^2 + (16*s12 - 18*s13)*s23^
                3 - 20*s23^4)))*Log(s23/(s12 + s13 + s23)))/
        (36*p1q^3*p2q^2*s12*s13*s23^2 + 72*p1q^2*p2q^3*s12*s13*s23^2 +
         36*p1q*p2q^4*s12*s13*s23^2 + 36*p1q*p3q^4*s12*s13*s23^2 +
         p3q^3*(72*p1q^2*s12*s13*s23^2 + 144*p1q*p2q*s12*s13*s23^2) +
         p3q^2*(36*p1q^3*s12*s13*s23^2 + 216*p1q^2*p2q*s12*s13*s23^2 +
           216*p1q*p2q^2*s12*s13*s23^2) + p3q*(72*p1q^3*p2q*s12*s13*s23^2 +
           216*p1q^2*p2q^2*s12*s13*s23^2 + 144*p1q*p2q^3*s12*s13*s23^2))) +
     ((p3q^5*((189*s12^3 + 756*s12^2*s13 + 567*s12*s13^2)*s23 +
           (567*s12^2 + 945*s12*s13)*s23^2 + 378*s12*s23^3) +
         p2q^5*((567*s12^2*s13 + 756*s12*s13^2 + 189*s13^3)*s23 +
           (945*s12*s13 + 567*s13^2)*s23^2 + 378*s13*s23^3) +
         p1q^4*p2q*((756*s12^2*s13 + 756*s12*s13^2)*s23 +
           (189*s12^2 + 1134*s12*s13 + 189*s13^2)*s23^2 + (189*s12 + 189*s13)*
            s23^3) + p1q^3*p2q^2*(-756*s12*s13^3 +
           (1701*s12^2*s13 + 756*s12*s13^2 - 189*s13^3)*s23 +
           (232*s12^2 + 1541*s12*s13 + 277*s13^2)*s23^2 + (-58*s12 + 176*s13)*
            s23^3 - 58*s23^4) + p1q^2*p2q^3*(-1512*s12*s13^3 +
           (2268*s12^2*s13 + 522*s12*s13^2 - 234*s13^3)*s23 +
           (128*s12^2 + 1772*s12*s13 + 858*s13^2)*s23^2 +
           (-394*s12 + 570*s13)*s23^3 - 58*s23^4) +
         p1q*p2q^4*(-756*s12*s13^3 + (1512*s12^2*s13 + 522*s12*s13^2 -
             234*s13^3)*s23 + (43*s12^2 + 1470*s12*s13 + 539*s13^2)*s23^2 +
           (-231*s12 + 499*s13)*s23^3 - 42*s23^4) +
         p3q*(p1q^4*((756*s12^2*s13 + 756*s12*s13^2)*s23 +
             (189*s12^2 + 1134*s12*s13 + 189*s13^2)*s23^2 +
             (189*s12 + 189*s13)*s23^3) + p2q^4*
            ((189*s12^3 + 2322*s12^2*s13 + 2655*s12*s13^2 + 522*s13^3)*s23 +
             (567*s12^2 + 3555*s12*s13 + 1566*s13^2)*s23^2 +
             (378*s12 + 1044*s13)*s23^3) + p1q^2*p2q^2*(3024*s12^2*s13^2 -
             1512*s12*s13^3 + (6912*s12^2*s13 + 5166*s12*s13^2 - 234*s13^3)*
              s23 + (1114*s12^2 + 4956*s12*s13 + 1844*s13^2)*s23^2 +
             (-452*s12 + 512*s13)*s23^3 - 174*s23^4) +
           p1q^3*p2q*(1512*s12^2*s13^2 + (-189*s12^3 + 3969*s12^2*s13 + 3969*
                s12*s13^2 - 189*s13^3)*s23 + (509*s12^2 + 3838*s12*s13 + 509*
                s13^2)*s23^2 + (118*s12 + 118*s13)*s23^3 - 116*s23^4) +
           p1q*p2q^3*(1512*s12^2*s13^2 - 1512*s12*s13^3 +
             (5166*s12^2*s13 + 3420*s12*s13^2 - 234*s13^3)*s23 +
             (720*s12^2 + 4634*s12*s13 + 1946*s13^2)*s23^2 +
             (-324*s12 + 1136*s13)*s23^3 - 116*s23^4)) +
         p3q^3*(p2q^2*((666*s12^3 + 4230*s12^2*s13 + 4086*s12*s13^2 + 522*
                s13^3)*s23 + (1998*s12^2 + 5940*s12*s13 + 1566*s13^2)*s23^2 +
             (1332*s12 + 1044*s13)*s23^3) + p1q*p2q*(-1512*s12^3*s13 +
             1512*s12^2*s13^2 + (-234*s12^3 + 3420*s12^2*s13 + 5166*s12*
                s13^2)*s23 + (1946*s12^2 + 4634*s12*s13 + 720*s13^2)*s23^2 +
             (1136*s12 - 324*s13)*s23^3 - 116*s23^4) +
           p1q^2*(-1512*s12^3*s13 + (-234*s12^3 + 522*s12^2*s13 + 2268*s12*
                s13^2)*s23 + (858*s12^2 + 1772*s12*s13 + 128*s13^2)*s23^2 +
             (570*s12 - 394*s13)*s23^3 - 58*s23^4)) +
         p3q^2*(p2q^3*((522*s12^3 + 4086*s12^2*s13 + 4230*s12*s13^2 + 666*
                s13^3)*s23 + (1566*s12^2 + 5940*s12*s13 + 1998*s13^2)*s23^2 +
             (1044*s12 + 1332*s13)*s23^3) + p1q^2*p2q*(-1512*s12^3*s13 +
             3024*s12^2*s13^2 + (-234*s12^3 + 5166*s12^2*s13 + 6912*s12*
                s13^2)*s23 + (1844*s12^2 + 4956*s12*s13 + 1114*s13^2)*s23^2 +
             (512*s12 - 452*s13)*s23^3 - 174*s23^4) +
           p1q*p2q^2*(-756*s12^3*s13 + 3024*s12^2*s13^2 - 756*s12*s13^3 +
             (6552*s12^2*s13 + 6552*s12*s13^2)*s23 + (2084*s12^2 + 6328*s12*
                s13 + 2084*s13^2)*s23^2 + (544*s12 + 544*s13)*s23^3 -
             148*s23^4) + p1q^3*(-756*s12^3*s13 + (-189*s12^3 + 756*s12^2*
                s13 + 1701*s12*s13^2)*s23 + (277*s12^2 + 1541*s12*s13 + 232*
                s13^2)*s23^2 + (176*s12 - 58*s13)*s23^3 - 58*s23^4)) +
         p3q^4*(p2q*((522*s12^3 + 2655*s12^2*s13 + 2322*s12*s13^2 + 189*
                s13^3)*s23 + (1566*s12^2 + 3555*s12*s13 + 567*s13^2)*s23^2 +
             (1044*s12 + 378*s13)*s23^3) + p1q*(-756*s12^3*s13 +
             (-234*s12^3 + 522*s12^2*s13 + 1512*s12*s13^2)*s23 +
             (539*s12^2 + 1470*s12*s13 + 43*s13^2)*s23^2 +
             (499*s12 - 231*s13)*s23^3 - 42*s23^4)))/
        (36*p1q^3*p2q^2*s12*s13*s23^2 + 72*p1q^2*p2q^3*s12*s13*s23^2 +
         36*p1q*p2q^4*s12*s13*s23^2 + 36*p1q*p3q^4*s12*s13*s23^2 +
         p3q^3*(72*p1q^2*s12*s13*s23^2 + 144*p1q*p2q*s12*s13*s23^2) +
         p3q^2*(36*p1q^3*s12*s13*s23^2 + 216*p1q^2*p2q*s12*s13*s23^2 +
           216*p1q*p2q^2*s12*s13*s23^2) + p3q*(72*p1q^3*p2q*s12*s13*s23^2 +
           216*p1q^2*p2q^2*s12*s13*s23^2 + 144*p1q*p2q^3*s12*s13*s23^2)) +
       (nl*(p3q^5*((-9*s12^3 - 36*s12^2*s13 - 27*s12*s13^2)*s23 +
            (-27*s12^2 - 45*s12*s13)*s23^2 - 18*s12*s23^3) +
          p1q^4*p2q*((-36*s12^2*s13 - 36*s12*s13^2)*s23 +
            (-9*s12^2 - 54*s12*s13 - 9*s13^2)*s23^2 + (-9*s12 - 9*s13)*
             s23^3) + p2q^5*((-27*s12^2*s13 - 36*s12*s13^2 - 9*s13^3)*s23 +
            (-45*s12*s13 - 27*s13^2)*s23^2 - 18*s13*s23^3) +
          p1q^2*p2q^3*(72*s12*s13^3 + (-108*s12^2*s13 - 18*s12*s13^2 +
              18*s13^3)*s23 + (-92*s12*s13 - 34*s13^2)*s23^2 +
            (18*s12 - 34*s13)*s23^3 + 2*s23^4) + p1q*p2q^4*
           (36*s12*s13^3 + (-72*s12^2*s13 - 18*s12*s13^2 + 18*s13^3)*s23 +
            (s12^2 - 70*s12*s13 - 15*s13^2)*s23^2 + (11*s12 - 23*s13)*s23^3 +
            2*s23^4) + p1q^3*p2q^2*(36*s12*s13^3 +
            (-81*s12^2*s13 - 36*s12*s13^2 + 9*s13^3)*s23 +
            (-8*s12^2 - 81*s12*s13 - 17*s13^2)*s23^2 + (2*s12 - 16*s13)*
             s23^3 + 2*s23^4) + p3q^4*(p2q*((-18*s12^3 - 99*s12^2*s13 -
                90*s12*s13^2 - 9*s13^3)*s23 + (-54*s12^2 - 135*s12*s13 -
                27*s13^2)*s23^2 + (-36*s12 - 18*s13)*s23^3) +
            p1q*(36*s12^3*s13 + (18*s12^3 - 18*s12^2*s13 - 72*s12*s13^2)*
               s23 + (-15*s12^2 - 70*s12*s13 + s13^2)*s23^2 +
              (-23*s12 + 11*s13)*s23^3 + 2*s23^4)) +
          p3q^3*(p2q^2*((-18*s12^3 - 126*s12^2*s13 - 126*s12*s13^2 -
                18*s13^3)*s23 + (-54*s12^2 - 180*s12*s13 - 54*s13^2)*s23^2 +
              (-36*s12 - 36*s13)*s23^3) + p1q^2*(72*s12^3*s13 +
              (18*s12^3 - 18*s12^2*s13 - 108*s12*s13^2)*s23 +
              (-34*s12^2 - 92*s12*s13)*s23^2 + (-34*s12 + 18*s13)*s23^3 +
              2*s23^4) + p1q*p2q*(72*s12^3*s13 - 72*s12^2*s13^2 +
              (18*s12^3 - 108*s12^2*s13 - 198*s12*s13^2)*s23 +
              (-66*s12^2 - 162*s12*s13 - 16*s13^2)*s23^2 + (-48*s12 + 20*s13)*
               s23^3 + 4*s23^4)) + p3q*(p2q^4*((-9*s12^3 - 90*s12^2*s13 -
                99*s12*s13^2 - 18*s13^3)*s23 + (-27*s12^2 - 135*s12*s13 -
                54*s13^2)*s23^2 + (-18*s12 - 36*s13)*s23^3) +
            p1q^4*((-36*s12^2*s13 - 36*s12*s13^2)*s23 + (-9*s12^2 -
                54*s12*s13 - 9*s13^2)*s23^2 + (-9*s12 - 9*s13)*s23^3) +
            p1q*p2q^3*(-72*s12^2*s13^2 + 72*s12*s13^3 + (-198*s12^2*s13 -
                108*s12*s13^2 + 18*s13^3)*s23 + (-16*s12^2 - 162*s12*s13 -
                66*s13^2)*s23^2 + (20*s12 - 48*s13)*s23^3 + 4*s23^4) +
            p1q^3*p2q*(-72*s12^2*s13^2 + (9*s12^3 - 189*s12^2*s13 -
                189*s12*s13^2 + 9*s13^3)*s23 + (-25*s12^2 - 198*s12*s13 -
                25*s13^2)*s23^2 + (-14*s12 - 14*s13)*s23^3 + 4*s23^4) +
            p1q^2*p2q^2*(-144*s12^2*s13^2 + 72*s12*s13^3 + (-288*s12^2*s13 -
                198*s12*s13^2 + 18*s13^3)*s23 + (-34*s12^2 - 204*s12*s13 -
                68*s13^2)*s23^2 + (20*s12 - 32*s13)*s23^3 + 6*s23^4)) +
          p3q^2*(p2q^3*((-18*s12^3 - 126*s12^2*s13 - 126*s12*s13^2 -
                18*s13^3)*s23 + (-54*s12^2 - 180*s12*s13 - 54*s13^2)*s23^2 +
              (-36*s12 - 36*s13)*s23^3) + p1q^3*(36*s12^3*s13 +
              (9*s12^3 - 36*s12^2*s13 - 81*s12*s13^2)*s23 + (-17*s12^2 -
                81*s12*s13 - 8*s13^2)*s23^2 + (-16*s12 + 2*s13)*s23^3 +
              2*s23^4) + p1q*p2q^2*(36*s12^3*s13 - 144*s12^2*s13^2 +
              36*s12*s13^3 + (-216*s12^2*s13 - 216*s12*s13^2)*s23 +
              (-68*s12^2 - 184*s12*s13 - 68*s13^2)*s23^2 + (-16*s12 - 16*s13)*
               s23^3 + 4*s23^4) + p1q^2*p2q*(72*s12^3*s13 - 144*s12^2*s13^2 +
              (18*s12^3 - 198*s12^2*s13 - 288*s12*s13^2)*s23 +
              (-68*s12^2 - 204*s12*s13 - 34*s13^2)*s23^2 + (-32*s12 + 20*s13)*
               s23^3 + 6*s23^4))))/(18*p1q^3*p2q^2*s12*s13*s23^2 +
         36*p1q^2*p2q^3*s12*s13*s23^2 + 18*p1q*p2q^4*s12*s13*s23^2 +
         18*p1q*p3q^4*s12*s13*s23^2 + p3q^3*(36*p1q^2*s12*s13*s23^2 +
           72*p1q*p2q*s12*s13*s23^2) + p3q^2*(18*p1q^3*s12*s13*s23^2 +
           108*p1q^2*p2q*s12*s13*s23^2 + 108*p1q*p2q^2*s12*s13*s23^2) +
         p3q*(36*p1q^3*p2q*s12*s13*s23^2 + 108*p1q^2*p2q^2*s12*s13*s23^2 +
           72*p1q*p2q^3*s12*s13*s23^2)) +
       ((p3q^5*((9*s12^3 + 36*s12^2*s13 + 27*s12*s13^2)*s23 +
            (27*s12^2 + 45*s12*s13)*s23^2 + 18*s12*s23^3) +
          p1q^3*p2q^2*(-36*s12*s13^3 + (81*s12^2*s13 + 36*s12*s13^2 -
              9*s13^3)*s23 + (9*s12^2 + 81*s12*s13 + 18*s13^2)*s23^2 +
            18*s13*s23^3) + p2q^5*((27*s12^2*s13 + 36*s12*s13^2 + 9*s13^3)*
             s23 + (45*s12*s13 + 27*s13^2)*s23^2 + 18*s13*s23^3) +
          p1q^4*p2q*((36*s12^2*s13 + 36*s12*s13^2)*s23 +
            (9*s12^2 + 54*s12*s13 + 9*s13^2)*s23^2 + (9*s12 + 9*s13)*s23^3) +
          p1q*p2q^4*(-36*s12*s13^3 + (72*s12^2*s13 + 18*s12*s13^2 - 18*s13^3)*
             s23 + (72*s12*s13 + 18*s13^2)*s23^2 + (-9*s12 + 27*s13)*s23^3) +
          p1q^2*p2q^3*(-72*s12*s13^3 + (108*s12^2*s13 + 18*s12*s13^2 -
              18*s13^3)*s23 + (90*s12*s13 + 36*s13^2)*s23^2 +
            (-18*s12 + 36*s13)*s23^3) +
          p3q^4*(p1q*(-36*s12^3*s13 + (-18*s12^3 + 18*s12^2*s13 +
                72*s12*s13^2)*s23 + (18*s12^2 + 72*s12*s13)*s23^2 +
              (27*s12 - 9*s13)*s23^3) + p2q*((18*s12^3 + 99*s12^2*s13 +
                90*s12*s13^2 + 9*s13^3)*s23 + (54*s12^2 + 135*s12*s13 +
                27*s13^2)*s23^2 + (36*s12 + 18*s13)*s23^3)) +
          p3q^3*(p1q^2*(-72*s12^3*s13 + (-18*s12^3 + 18*s12^2*s13 +
                108*s12*s13^2)*s23 + (36*s12^2 + 90*s12*s13)*s23^2 +
              (36*s12 - 18*s13)*s23^3) + p1q*p2q*(-72*s12^3*s13 +
              72*s12^2*s13^2 + (-18*s12^3 + 108*s12^2*s13 + 198*s12*s13^2)*
               s23 + (72*s12^2 + 162*s12*s13 + 18*s13^2)*s23^2 +
              (54*s12 - 18*s13)*s23^3) + p2q^2*((18*s12^3 + 126*s12^2*s13 +
                126*s12*s13^2 + 18*s13^3)*s23 + (54*s12^2 + 180*s12*s13 +
                54*s13^2)*s23^2 + (36*s12 + 36*s13)*s23^3)) +
          p3q^2*(p1q^3*(-36*s12^3*s13 + (-9*s12^3 + 36*s12^2*s13 +
                81*s12*s13^2)*s23 + (18*s12^2 + 81*s12*s13 + 9*s13^2)*s23^2 +
              18*s12*s23^3) + p1q^2*p2q*(-72*s12^3*s13 + 144*s12^2*s13^2 +
              (-18*s12^3 + 198*s12^2*s13 + 288*s12*s13^2)*s23 +
              (72*s12^2 + 198*s12*s13 + 36*s13^2)*s23^2 + (36*s12 - 18*s13)*
               s23^3) + p1q*p2q^2*(-36*s12^3*s13 + 144*s12^2*s13^2 -
              36*s12*s13^3 + (216*s12^2*s13 + 216*s12*s13^2)*s23 +
              (72*s12^2 + 180*s12*s13 + 72*s13^2)*s23^2 + (18*s12 + 18*s13)*
               s23^3) + p2q^3*((18*s12^3 + 126*s12^2*s13 + 126*s12*s13^2 +
                18*s13^3)*s23 + (54*s12^2 + 180*s12*s13 + 54*s13^2)*s23^2 +
              (36*s12 + 36*s13)*s23^3)) +
          p3q*(p1q^4*((36*s12^2*s13 + 36*s12*s13^2)*s23 + (9*s12^2 +
                54*s12*s13 + 9*s13^2)*s23^2 + (9*s12 + 9*s13)*s23^3) +
            p1q^3*p2q*(72*s12^2*s13^2 + (-9*s12^3 + 189*s12^2*s13 +
                189*s12*s13^2 - 9*s13^3)*s23 + (27*s12^2 + 198*s12*s13 +
                27*s13^2)*s23^2 + (18*s12 + 18*s13)*s23^3) +
            p1q^2*p2q^2*(144*s12^2*s13^2 - 72*s12*s13^3 + (288*s12^2*s13 +
                198*s12*s13^2 - 18*s13^3)*s23 + (36*s12^2 + 198*s12*s13 +
                72*s13^2)*s23^2 + (-18*s12 + 36*s13)*s23^3) +
            p2q^4*((9*s12^3 + 90*s12^2*s13 + 99*s12*s13^2 + 18*s13^3)*s23 +
              (27*s12^2 + 135*s12*s13 + 54*s13^2)*s23^2 + (18*s12 + 36*s13)*
               s23^3) + p1q*p2q^3*(72*s12^2*s13^2 - 72*s12*s13^3 +
              (198*s12^2*s13 + 108*s12*s13^2 - 18*s13^3)*s23 +
              (18*s12^2 + 162*s12*s13 + 72*s13^2)*s23^2 + (-18*s12 + 54*s13)*
               s23^3)))*Log(p1q/(p1q + p2q + p3q)))/
        (4*p1q^3*p2q^2*s12*s13*s23^2 + 8*p1q^2*p2q^3*s12*s13*s23^2 +
         4*p1q*p2q^4*s12*s13*s23^2 + 4*p1q*p3q^4*s12*s13*s23^2 +
         p3q^3*(8*p1q^2*s12*s13*s23^2 + 16*p1q*p2q*s12*s13*s23^2) +
         p3q^2*(4*p1q^3*s12*s13*s23^2 + 24*p1q^2*p2q*s12*s13*s23^2 +
           24*p1q*p2q^2*s12*s13*s23^2) + p3q*(8*p1q^3*p2q*s12*s13*s23^2 +
           24*p1q^2*p2q^2*s12*s13*s23^2 + 16*p1q*p2q^3*s12*s13*s23^2)) +
       ((p2q^5*((9*s12^2*s13 + 9*s12*s13^2)*s23 + 9*s12*s13*s23^2) +
          p1q^4*p2q*((18*s12^2*s13 + 18*s12*s13^2)*s23 +
            (9*s12^2 + 27*s12*s13)*s23^2 + 9*s12*s23^3) +
          p3q^5*((9*s12^3 + 27*s12^2*s13 + 18*s12*s13^2)*s23 +
            (27*s12^2 + 36*s12*s13)*s23^2 + 18*s12*s23^3) +
          p1q*p2q^4*(-18*s12*s13^3 + 36*s12^2*s13*s23 +
            (-s12^2 + 7*s12*s13 - 3*s13^2)*s23^2 + (-11*s12 - 4*s13)*s23^3 -
            2*s23^4) + p1q^2*p2q^3*(-36*s12*s13^3 +
            (54*s12^2*s13 - 18*s12*s13^2)*s23 + (2*s12*s13 - 2*s13^2)*s23^2 +
            (-18*s12 - 2*s13)*s23^3 - 2*s23^4) + p1q^3*p2q^2*
           (-18*s12*s13^3 + (45*s12^2*s13 + 9*s12*s13^2)*s23 +
            (8*s12^2 + 27*s12*s13 - s13^2)*s23^2 + (-2*s12 - 2*s13)*s23^3 -
            2*s23^4) + p3q*(p1q^4*((18*s12^2*s13 + 18*s12*s13^2)*s23 +
              (9*s12^2 + 27*s12*s13)*s23^2 + 9*s12*s23^3) +
            p2q^4*((9*s12^3 + 45*s12^2*s13 + 36*s12*s13^2)*s23 +
              (27*s12^2 + 54*s12*s13)*s23^2 + 18*s12*s23^3) +
            p1q^2*p2q^2*(72*s12^2*s13^2 - 36*s12*s13^3 + (180*s12^2*s13 +
                36*s12*s13^2)*s23 + (34*s12^2 + 60*s12*s13 - 4*s13^2)*s23^2 +
              (-20*s12 - 4*s13)*s23^3 - 6*s23^4) + p1q*p2q^3*
             (36*s12^2*s13^2 - 36*s12*s13^3 + 108*s12^2*s13*s23 +
              (16*s12^2 + 18*s12*s13 - 6*s13^2)*s23^2 + (-20*s12 - 6*s13)*s23^
                3 - 4*s23^4) + p1q^3*p2q*(36*s12^2*s13^2 + (-9*s12^3 +
                108*s12^2*s13 + 81*s12*s13^2)*s23 + (25*s12^2 + 99*s12*s13 -
                2*s13^2)*s23^2 + (14*s12 - 4*s13)*s23^3 - 4*s23^4)) +
          p3q^3*(p2q^2*((18*s12^3 + 72*s12^2*s13 + 54*s12*s13^2)*s23 +
              (54*s12^2 + 90*s12*s13)*s23^2 + 36*s12*s23^3) +
            p1q*p2q*(-36*s12^3*s13 + 36*s12^2*s13^2 + (-18*s12^3 +
                108*s12^2*s13 + 90*s12*s13^2)*s23 + (66*s12^2 + 144*s12*s13 -
                2*s13^2)*s23^2 + (48*s12 - 2*s13)*s23^3 - 4*s23^4) +
            p1q^2*(-36*s12^3*s13 + (-18*s12^3 + 36*s12^2*s13 + 54*s12*s13^2)*
               s23 + (34*s12^2 + 92*s12*s13)*s23^2 + 34*s12*s23^3 -
              2*s23^4)) + p3q^2*(p2q^3*((18*s12^3 + 72*s12^2*s13 +
                54*s12*s13^2)*s23 + (54*s12^2 + 90*s12*s13)*s23^2 +
              36*s12*s23^3) + p1q^2*p2q*(-36*s12^3*s13 + 72*s12^2*s13^2 +
              (-18*s12^3 + 162*s12^2*s13 + 108*s12*s13^2)*s23 +
              (68*s12^2 + 150*s12*s13 - 2*s13^2)*s23^2 + (32*s12 - 2*s13)*s23^
                3 - 6*s23^4) + p1q*p2q^2*(-18*s12^3*s13 + 72*s12^2*s13^2 -
              18*s12*s13^3 + (162*s12^2*s13 + 54*s12*s13^2)*s23 +
              (68*s12^2 + 94*s12*s13 - 4*s13^2)*s23^2 + (16*s12 - 2*s13)*s23^
                3 - 4*s23^4) + p1q^3*(-18*s12^3*s13 + (-9*s12^3 +
                27*s12^2*s13 + 36*s12*s13^2)*s23 + (17*s12^2 + 54*s12*s13 -
                s13^2)*s23^2 + (16*s12 - 2*s13)*s23^3 - 2*s23^4)) +
          p3q^4*(p2q*((18*s12^3 + 63*s12^2*s13 + 45*s12*s13^2)*s23 +
              (54*s12^2 + 81*s12*s13)*s23^2 + 36*s12*s23^3) +
            p1q*(-18*s12^3*s13 + (-18*s12^3 + 18*s12^2*s13 + 36*s12*s13^2)*
               s23 + (15*s12^2 + 61*s12*s13 - s13^2)*s23^2 +
              (23*s12 - 2*s13)*s23^3 - 2*s23^4)))*Log(p2q/(p1q + p2q + p3q)))/
        (4*p1q^3*p2q^2*s12*s13*s23^2 + 8*p1q^2*p2q^3*s12*s13*s23^2 +
         4*p1q*p2q^4*s12*s13*s23^2 + 4*p1q*p3q^4*s12*s13*s23^2 +
         p3q^3*(8*p1q^2*s12*s13*s23^2 + 16*p1q*p2q*s12*s13*s23^2) +
         p3q^2*(4*p1q^3*s12*s13*s23^2 + 24*p1q^2*p2q*s12*s13*s23^2 +
           24*p1q*p2q^2*s12*s13*s23^2) + p3q*(8*p1q^3*p2q*s12*s13*s23^2 +
           24*p1q^2*p2q^2*s12*s13*s23^2 + 16*p1q*p2q^3*s12*s13*s23^2)) +
       ((p3q^5*((9*s12^2*s13 + 9*s12*s13^2)*s23 + 9*s12*s13*s23^2) +
          p1q^4*p2q*((18*s12^2*s13 + 18*s12*s13^2)*s23 +
            (27*s12*s13 + 9*s13^2)*s23^2 + 9*s13*s23^3) +
          p2q^5*((18*s12^2*s13 + 27*s12*s13^2 + 9*s13^3)*s23 +
            (36*s12*s13 + 27*s13^2)*s23^2 + 18*s13*s23^3) +
          p1q^2*p2q^3*(-36*s12*s13^3 + (54*s12^2*s13 + 36*s12*s13^2 -
              18*s13^3)*s23 + (92*s12*s13 + 34*s13^2)*s23^2 + 34*s13*s23^3 -
            2*s23^4) + p1q^3*p2q^2*(-18*s12*s13^3 +
            (36*s12^2*s13 + 27*s12*s13^2 - 9*s13^3)*s23 +
            (-s12^2 + 54*s12*s13 + 17*s13^2)*s23^2 + (-2*s12 + 16*s13)*
             s23^3 - 2*s23^4) + p1q*p2q^4*(-18*s12*s13^3 +
            (36*s12^2*s13 + 18*s12*s13^2 - 18*s13^3)*s23 +
            (-s12^2 + 61*s12*s13 + 15*s13^2)*s23^2 + (-2*s12 + 23*s13)*
             s23^3 - 2*s23^4) + p3q*(p1q^4*((18*s12^2*s13 + 18*s12*s13^2)*
               s23 + (27*s12*s13 + 9*s13^2)*s23^2 + 9*s13*s23^3) +
            p2q^4*((45*s12^2*s13 + 63*s12*s13^2 + 18*s13^3)*s23 +
              (81*s12*s13 + 54*s13^2)*s23^2 + 36*s13*s23^3) +
            p1q^2*p2q^2*(72*s12^2*s13^2 - 36*s12*s13^3 + (108*s12^2*s13 +
                162*s12*s13^2 - 18*s13^3)*s23 + (-2*s12^2 + 150*s12*s13 +
                68*s13^2)*s23^2 + (-2*s12 + 32*s13)*s23^3 - 6*s23^4) +
            p1q^3*p2q*(36*s12^2*s13^2 + (81*s12^2*s13 + 108*s12*s13^2 -
                9*s13^3)*s23 + (-2*s12^2 + 99*s12*s13 + 25*s13^2)*s23^2 +
              (-4*s12 + 14*s13)*s23^3 - 4*s23^4) + p1q*p2q^3*
             (36*s12^2*s13^2 - 36*s12*s13^3 + (90*s12^2*s13 + 108*s12*s13^2 -
                18*s13^3)*s23 + (-2*s12^2 + 144*s12*s13 + 66*s13^2)*s23^2 +
              (-2*s12 + 48*s13)*s23^3 - 4*s23^4)) +
          p3q^3*(p2q^2*((54*s12^2*s13 + 72*s12*s13^2 + 18*s13^3)*s23 +
              (90*s12*s13 + 54*s13^2)*s23^2 + 36*s13*s23^3) +
            p1q*p2q*(-36*s12^3*s13 + 36*s12^2*s13^2 + 108*s12*s13^2*s23 +
              (-6*s12^2 + 18*s12*s13 + 16*s13^2)*s23^2 + (-6*s12 - 20*s13)*
               s23^3 - 4*s23^4) + p1q^2*(-36*s12^3*s13 + (-18*s12^2*s13 +
                54*s12*s13^2)*s23 + (-2*s12^2 + 2*s12*s13)*s23^2 +
              (-2*s12 - 18*s13)*s23^3 - 2*s23^4)) +
          p3q^4*(p2q*((36*s12^2*s13 + 45*s12*s13^2 + 9*s13^3)*s23 +
              (54*s12*s13 + 27*s13^2)*s23^2 + 18*s13*s23^3) +
            p1q*(-18*s12^3*s13 + 36*s12*s13^2*s23 + (-3*s12^2 + 7*s12*s13 -
                s13^2)*s23^2 + (-4*s12 - 11*s13)*s23^3 - 2*s23^4)) +
          p3q^2*(p2q^3*((54*s12^2*s13 + 72*s12*s13^2 + 18*s13^3)*s23 +
              (90*s12*s13 + 54*s13^2)*s23^2 + 36*s13*s23^3) +
            p1q^2*p2q*(-36*s12^3*s13 + 72*s12^2*s13^2 + (36*s12^2*s13 +
                180*s12*s13^2)*s23 + (-4*s12^2 + 60*s12*s13 + 34*s13^2)*s23^
                2 + (-4*s12 - 20*s13)*s23^3 - 6*s23^4) +
            p1q*p2q^2*(-18*s12^3*s13 + 72*s12^2*s13^2 - 18*s12*s13^3 +
              (54*s12^2*s13 + 162*s12*s13^2)*s23 + (-4*s12^2 + 94*s12*s13 +
                68*s13^2)*s23^2 + (-2*s12 + 16*s13)*s23^3 - 4*s23^4) +
            p1q^3*(-18*s12^3*s13 + (9*s12^2*s13 + 45*s12*s13^2)*s23 +
              (-s12^2 + 27*s12*s13 + 8*s13^2)*s23^2 + (-2*s12 - 2*s13)*s23^
                3 - 2*s23^4)))*Log(p3q/(p1q + p2q + p3q)))/
        (4*p1q^3*p2q^2*s12*s13*s23^2 + 8*p1q^2*p2q^3*s12*s13*s23^2 +
         4*p1q*p2q^4*s12*s13*s23^2 + 4*p1q*p3q^4*s12*s13*s23^2 +
         p3q^3*(8*p1q^2*s12*s13*s23^2 + 16*p1q*p2q*s12*s13*s23^2) +
         p3q^2*(4*p1q^3*s12*s13*s23^2 + 24*p1q^2*p2q*s12*s13*s23^2 +
           24*p1q*p2q^2*s12*s13*s23^2) + p3q*(8*p1q^3*p2q*s12*s13*s23^2 +
           24*p1q^2*p2q^2*s12*s13*s23^2 + 16*p1q*p2q^3*s12*s13*s23^2)) +
       ((p3q^5*((18*s12^3 + 72*s12^2*s13 + 54*s12*s13^2)*s23 +
            (54*s12^2 + 90*s12*s13)*s23^2 + 36*s12*s23^3) +
          p2q^5*((54*s12^2*s13 + 72*s12*s13^2 + 18*s13^3)*s23 +
            (90*s12*s13 + 54*s13^2)*s23^2 + 36*s13*s23^3) +
          p1q^4*p2q*((72*s12^2*s13 + 72*s12*s13^2)*s23 +
            (18*s12^2 + 108*s12*s13 + 18*s13^2)*s23^2 + (18*s12 + 18*s13)*
             s23^3) + p1q^3*p2q^2*(-72*s12*s13^3 +
            (162*s12^2*s13 + 72*s12*s13^2 - 18*s13^3)*s23 +
            (16*s12^2 + 162*s12*s13 + 34*s13^2)*s23^2 + (-4*s12 + 32*s13)*
             s23^3 - 4*s23^4) + p1q*p2q^4*(-72*s12*s13^3 +
            (144*s12^2*s13 + 36*s12*s13^2 - 36*s13^3)*s23 +
            (-2*s12^2 + 140*s12*s13 + 30*s13^2)*s23^2 + (-22*s12 + 46*s13)*
             s23^3 - 4*s23^4) + p1q^2*p2q^3*(-144*s12*s13^3 +
            (216*s12^2*s13 + 36*s12*s13^2 - 36*s13^3)*s23 +
            (184*s12*s13 + 68*s13^2)*s23^2 + (-36*s12 + 68*s13)*s23^3 -
            4*s23^4) + p3q*(p1q^4*((72*s12^2*s13 + 72*s12*s13^2)*s23 +
              (18*s12^2 + 108*s12*s13 + 18*s13^2)*s23^2 + (18*s12 + 18*s13)*
               s23^3) + p2q^4*((18*s12^3 + 180*s12^2*s13 + 198*s12*s13^2 +
                36*s13^3)*s23 + (54*s12^2 + 270*s12*s13 + 108*s13^2)*s23^2 +
              (36*s12 + 72*s13)*s23^3) + p1q^2*p2q^2*(288*s12^2*s13^2 -
              144*s12*s13^3 + (576*s12^2*s13 + 396*s12*s13^2 - 36*s13^3)*
               s23 + (68*s12^2 + 408*s12*s13 + 136*s13^2)*s23^2 +
              (-40*s12 + 64*s13)*s23^3 - 12*s23^4) + p1q^3*p2q*
             (144*s12^2*s13^2 + (-18*s12^3 + 378*s12^2*s13 + 378*s12*s13^2 -
                18*s13^3)*s23 + (50*s12^2 + 396*s12*s13 + 50*s13^2)*s23^2 +
              (28*s12 + 28*s13)*s23^3 - 8*s23^4) + p1q*p2q^3*
             (144*s12^2*s13^2 - 144*s12*s13^3 + (396*s12^2*s13 +
                216*s12*s13^2 - 36*s13^3)*s23 + (32*s12^2 + 324*s12*s13 +
                132*s13^2)*s23^2 + (-40*s12 + 96*s13)*s23^3 - 8*s23^4)) +
          p3q^3*(p2q^2*((36*s12^3 + 252*s12^2*s13 + 252*s12*s13^2 + 36*s13^3)*
               s23 + (108*s12^2 + 360*s12*s13 + 108*s13^2)*s23^2 +
              (72*s12 + 72*s13)*s23^3) + p1q*p2q*(-144*s12^3*s13 +
              144*s12^2*s13^2 + (-36*s12^3 + 216*s12^2*s13 + 396*s12*s13^2)*
               s23 + (132*s12^2 + 324*s12*s13 + 32*s13^2)*s23^2 +
              (96*s12 - 40*s13)*s23^3 - 8*s23^4) + p1q^2*(-144*s12^3*s13 +
              (-36*s12^3 + 36*s12^2*s13 + 216*s12*s13^2)*s23 +
              (68*s12^2 + 184*s12*s13)*s23^2 + (68*s12 - 36*s13)*s23^3 -
              4*s23^4)) + p3q^4*(p2q*((36*s12^3 + 198*s12^2*s13 +
                180*s12*s13^2 + 18*s13^3)*s23 + (108*s12^2 + 270*s12*s13 +
                54*s13^2)*s23^2 + (72*s12 + 36*s13)*s23^3) +
            p1q*(-72*s12^3*s13 + (-36*s12^3 + 36*s12^2*s13 + 144*s12*s13^2)*
               s23 + (30*s12^2 + 140*s12*s13 - 2*s13^2)*s23^2 +
              (46*s12 - 22*s13)*s23^3 - 4*s23^4)) +
          p3q^2*(p2q^3*((36*s12^3 + 252*s12^2*s13 + 252*s12*s13^2 + 36*s13^3)*
               s23 + (108*s12^2 + 360*s12*s13 + 108*s13^2)*s23^2 +
              (72*s12 + 72*s13)*s23^3) + p1q^2*p2q*(-144*s12^3*s13 +
              288*s12^2*s13^2 + (-36*s12^3 + 396*s12^2*s13 + 576*s12*s13^2)*
               s23 + (136*s12^2 + 408*s12*s13 + 68*s13^2)*s23^2 +
              (64*s12 - 40*s13)*s23^3 - 12*s23^4) + p1q*p2q^2*
             (-72*s12^3*s13 + 288*s12^2*s13^2 - 72*s12*s13^3 +
              (432*s12^2*s13 + 432*s12*s13^2)*s23 + (136*s12^2 +
                368*s12*s13 + 136*s13^2)*s23^2 + (32*s12 + 32*s13)*s23^3 -
              8*s23^4) + p1q^3*(-72*s12^3*s13 + (-18*s12^3 + 72*s12^2*s13 +
                162*s12*s13^2)*s23 + (34*s12^2 + 162*s12*s13 + 16*s13^2)*s23^
                2 + (32*s12 - 4*s13)*s23^3 - 4*s23^4)))*
         Log(-s12 - s13 - s23))/(9*p1q^3*p2q^2*s12*s13*s23^2 +
         18*p1q^2*p2q^3*s12*s13*s23^2 + 9*p1q*p2q^4*s12*s13*s23^2 +
         9*p1q*p3q^4*s12*s13*s23^2 + p3q^3*(18*p1q^2*s12*s13*s23^2 +
           36*p1q*p2q*s12*s13*s23^2) + p3q^2*(9*p1q^3*s12*s13*s23^2 +
           54*p1q^2*p2q*s12*s13*s23^2 + 54*p1q*p2q^2*s12*s13*s23^2) +
         p3q*(18*p1q^3*p2q*s12*s13*s23^2 + 54*p1q^2*p2q^2*s12*s13*s23^2 +
           36*p1q*p2q^3*s12*s13*s23^2)) +
       ((p3q^5*((9*s12^2*s13 + 9*s12*s13^2)*s23 + 9*s12*s13*s23^2) +
          p1q^4*p2q*((18*s12^2*s13 + 18*s12*s13^2)*s23 +
            (27*s12*s13 + 9*s13^2)*s23^2 + 9*s13*s23^3) +
          p2q^5*((18*s12^2*s13 + 27*s12*s13^2 + 9*s13^3)*s23 +
            (36*s12*s13 + 27*s13^2)*s23^2 + 18*s13*s23^3) +
          p1q^2*p2q^3*(-36*s12*s13^3 + (54*s12^2*s13 + 36*s12*s13^2 -
              18*s13^3)*s23 + (92*s12*s13 + 34*s13^2)*s23^2 + 34*s13*s23^3 -
            2*s23^4) + p1q^3*p2q^2*(-18*s12*s13^3 +
            (36*s12^2*s13 + 27*s12*s13^2 - 9*s13^3)*s23 +
            (-s12^2 + 54*s12*s13 + 17*s13^2)*s23^2 + (-2*s12 + 16*s13)*
             s23^3 - 2*s23^4) + p1q*p2q^4*(-18*s12*s13^3 +
            (36*s12^2*s13 + 18*s12*s13^2 - 18*s13^3)*s23 +
            (-s12^2 + 61*s12*s13 + 15*s13^2)*s23^2 + (-2*s12 + 23*s13)*
             s23^3 - 2*s23^4) + p3q*(p1q^4*((18*s12^2*s13 + 18*s12*s13^2)*
               s23 + (27*s12*s13 + 9*s13^2)*s23^2 + 9*s13*s23^3) +
            p2q^4*((45*s12^2*s13 + 63*s12*s13^2 + 18*s13^3)*s23 +
              (81*s12*s13 + 54*s13^2)*s23^2 + 36*s13*s23^3) +
            p1q^2*p2q^2*(72*s12^2*s13^2 - 36*s12*s13^3 + (108*s12^2*s13 +
                162*s12*s13^2 - 18*s13^3)*s23 + (-2*s12^2 + 150*s12*s13 +
                68*s13^2)*s23^2 + (-2*s12 + 32*s13)*s23^3 - 6*s23^4) +
            p1q^3*p2q*(36*s12^2*s13^2 + (81*s12^2*s13 + 108*s12*s13^2 -
                9*s13^3)*s23 + (-2*s12^2 + 99*s12*s13 + 25*s13^2)*s23^2 +
              (-4*s12 + 14*s13)*s23^3 - 4*s23^4) + p1q*p2q^3*
             (36*s12^2*s13^2 - 36*s12*s13^3 + (90*s12^2*s13 + 108*s12*s13^2 -
                18*s13^3)*s23 + (-2*s12^2 + 144*s12*s13 + 66*s13^2)*s23^2 +
              (-2*s12 + 48*s13)*s23^3 - 4*s23^4)) +
          p3q^3*(p2q^2*((54*s12^2*s13 + 72*s12*s13^2 + 18*s13^3)*s23 +
              (90*s12*s13 + 54*s13^2)*s23^2 + 36*s13*s23^3) +
            p1q*p2q*(-36*s12^3*s13 + 36*s12^2*s13^2 + 108*s12*s13^2*s23 +
              (-6*s12^2 + 18*s12*s13 + 16*s13^2)*s23^2 + (-6*s12 - 20*s13)*
               s23^3 - 4*s23^4) + p1q^2*(-36*s12^3*s13 + (-18*s12^2*s13 +
                54*s12*s13^2)*s23 + (-2*s12^2 + 2*s12*s13)*s23^2 +
              (-2*s12 - 18*s13)*s23^3 - 2*s23^4)) +
          p3q^4*(p2q*((36*s12^2*s13 + 45*s12*s13^2 + 9*s13^3)*s23 +
              (54*s12*s13 + 27*s13^2)*s23^2 + 18*s13*s23^3) +
            p1q*(-18*s12^3*s13 + 36*s12*s13^2*s23 + (-3*s12^2 + 7*s12*s13 -
                s13^2)*s23^2 + (-4*s12 - 11*s13)*s23^3 - 2*s23^4)) +
          p3q^2*(p2q^3*((54*s12^2*s13 + 72*s12*s13^2 + 18*s13^3)*s23 +
              (90*s12*s13 + 54*s13^2)*s23^2 + 36*s13*s23^3) +
            p1q^2*p2q*(-36*s12^3*s13 + 72*s12^2*s13^2 + (36*s12^2*s13 +
                180*s12*s13^2)*s23 + (-4*s12^2 + 60*s12*s13 + 34*s13^2)*s23^
                2 + (-4*s12 - 20*s13)*s23^3 - 6*s23^4) +
            p1q*p2q^2*(-18*s12^3*s13 + 72*s12^2*s13^2 - 18*s12*s13^3 +
              (54*s12^2*s13 + 162*s12*s13^2)*s23 + (-4*s12^2 + 94*s12*s13 +
                68*s13^2)*s23^2 + (-2*s12 + 16*s13)*s23^3 - 4*s23^4) +
            p1q^3*(-18*s12^3*s13 + (9*s12^2*s13 + 45*s12*s13^2)*s23 +
              (-s12^2 + 27*s12*s13 + 8*s13^2)*s23^2 + (-2*s12 - 2*s13)*s23^
                3 - 2*s23^4)))*Log(s12/(s12 + s13 + s23)))/
        (4*p1q^3*p2q^2*s12*s13*s23^2 + 8*p1q^2*p2q^3*s12*s13*s23^2 +
         4*p1q*p2q^4*s12*s13*s23^2 + 4*p1q*p3q^4*s12*s13*s23^2 +
         p3q^3*(8*p1q^2*s12*s13*s23^2 + 16*p1q*p2q*s12*s13*s23^2) +
         p3q^2*(4*p1q^3*s12*s13*s23^2 + 24*p1q^2*p2q*s12*s13*s23^2 +
           24*p1q*p2q^2*s12*s13*s23^2) + p3q*(8*p1q^3*p2q*s12*s13*s23^2 +
           24*p1q^2*p2q^2*s12*s13*s23^2 + 16*p1q*p2q^3*s12*s13*s23^2)) +
       ((p2q^5*((9*s12^2*s13 + 9*s12*s13^2)*s23 + 9*s12*s13*s23^2) +
          p1q^4*p2q*((18*s12^2*s13 + 18*s12*s13^2)*s23 +
            (9*s12^2 + 27*s12*s13)*s23^2 + 9*s12*s23^3) +
          p3q^5*((9*s12^3 + 27*s12^2*s13 + 18*s12*s13^2)*s23 +
            (27*s12^2 + 36*s12*s13)*s23^2 + 18*s12*s23^3) +
          p1q*p2q^4*(-18*s12*s13^3 + 36*s12^2*s13*s23 +
            (-s12^2 + 7*s12*s13 - 3*s13^2)*s23^2 + (-11*s12 - 4*s13)*s23^3 -
            2*s23^4) + p1q^2*p2q^3*(-36*s12*s13^3 +
            (54*s12^2*s13 - 18*s12*s13^2)*s23 + (2*s12*s13 - 2*s13^2)*s23^2 +
            (-18*s12 - 2*s13)*s23^3 - 2*s23^4) + p1q^3*p2q^2*
           (-18*s12*s13^3 + (45*s12^2*s13 + 9*s12*s13^2)*s23 +
            (8*s12^2 + 27*s12*s13 - s13^2)*s23^2 + (-2*s12 - 2*s13)*s23^3 -
            2*s23^4) + p3q*(p1q^4*((18*s12^2*s13 + 18*s12*s13^2)*s23 +
              (9*s12^2 + 27*s12*s13)*s23^2 + 9*s12*s23^3) +
            p2q^4*((9*s12^3 + 45*s12^2*s13 + 36*s12*s13^2)*s23 +
              (27*s12^2 + 54*s12*s13)*s23^2 + 18*s12*s23^3) +
            p1q^2*p2q^2*(72*s12^2*s13^2 - 36*s12*s13^3 + (180*s12^2*s13 +
                36*s12*s13^2)*s23 + (34*s12^2 + 60*s12*s13 - 4*s13^2)*s23^2 +
              (-20*s12 - 4*s13)*s23^3 - 6*s23^4) + p1q*p2q^3*
             (36*s12^2*s13^2 - 36*s12*s13^3 + 108*s12^2*s13*s23 +
              (16*s12^2 + 18*s12*s13 - 6*s13^2)*s23^2 + (-20*s12 - 6*s13)*s23^
                3 - 4*s23^4) + p1q^3*p2q*(36*s12^2*s13^2 + (-9*s12^3 +
                108*s12^2*s13 + 81*s12*s13^2)*s23 + (25*s12^2 + 99*s12*s13 -
                2*s13^2)*s23^2 + (14*s12 - 4*s13)*s23^3 - 4*s23^4)) +
          p3q^3*(p2q^2*((18*s12^3 + 72*s12^2*s13 + 54*s12*s13^2)*s23 +
              (54*s12^2 + 90*s12*s13)*s23^2 + 36*s12*s23^3) +
            p1q*p2q*(-36*s12^3*s13 + 36*s12^2*s13^2 + (-18*s12^3 +
                108*s12^2*s13 + 90*s12*s13^2)*s23 + (66*s12^2 + 144*s12*s13 -
                2*s13^2)*s23^2 + (48*s12 - 2*s13)*s23^3 - 4*s23^4) +
            p1q^2*(-36*s12^3*s13 + (-18*s12^3 + 36*s12^2*s13 + 54*s12*s13^2)*
               s23 + (34*s12^2 + 92*s12*s13)*s23^2 + 34*s12*s23^3 -
              2*s23^4)) + p3q^2*(p2q^3*((18*s12^3 + 72*s12^2*s13 +
                54*s12*s13^2)*s23 + (54*s12^2 + 90*s12*s13)*s23^2 +
              36*s12*s23^3) + p1q^2*p2q*(-36*s12^3*s13 + 72*s12^2*s13^2 +
              (-18*s12^3 + 162*s12^2*s13 + 108*s12*s13^2)*s23 +
              (68*s12^2 + 150*s12*s13 - 2*s13^2)*s23^2 + (32*s12 - 2*s13)*s23^
                3 - 6*s23^4) + p1q*p2q^2*(-18*s12^3*s13 + 72*s12^2*s13^2 -
              18*s12*s13^3 + (162*s12^2*s13 + 54*s12*s13^2)*s23 +
              (68*s12^2 + 94*s12*s13 - 4*s13^2)*s23^2 + (16*s12 - 2*s13)*s23^
                3 - 4*s23^4) + p1q^3*(-18*s12^3*s13 + (-9*s12^3 +
                27*s12^2*s13 + 36*s12*s13^2)*s23 + (17*s12^2 + 54*s12*s13 -
                s13^2)*s23^2 + (16*s12 - 2*s13)*s23^3 - 2*s23^4)) +
          p3q^4*(p2q*((18*s12^3 + 63*s12^2*s13 + 45*s12*s13^2)*s23 +
              (54*s12^2 + 81*s12*s13)*s23^2 + 36*s12*s23^3) +
            p1q*(-18*s12^3*s13 + (-18*s12^3 + 18*s12^2*s13 + 36*s12*s13^2)*
               s23 + (15*s12^2 + 61*s12*s13 - s13^2)*s23^2 +
              (23*s12 - 2*s13)*s23^3 - 2*s23^4)))*Log(s13/(s12 + s13 + s23)))/
        (4*p1q^3*p2q^2*s12*s13*s23^2 + 8*p1q^2*p2q^3*s12*s13*s23^2 +
         4*p1q*p2q^4*s12*s13*s23^2 + 4*p1q*p3q^4*s12*s13*s23^2 +
         p3q^3*(8*p1q^2*s12*s13*s23^2 + 16*p1q*p2q*s12*s13*s23^2) +
         p3q^2*(4*p1q^3*s12*s13*s23^2 + 24*p1q^2*p2q*s12*s13*s23^2 +
           24*p1q*p2q^2*s12*s13*s23^2) + p3q*(8*p1q^3*p2q*s12*s13*s23^2 +
           24*p1q^2*p2q^2*s12*s13*s23^2 + 16*p1q*p2q^3*s12*s13*s23^2)) +
       ((p3q^5*((-9*s12^3 - 36*s12^2*s13 - 27*s12*s13^2)*s23 +
            (-27*s12^2 - 45*s12*s13)*s23^2 - 18*s12*s23^3) +
          p1q^4*p2q*((-36*s12^2*s13 - 36*s12*s13^2)*s23 +
            (-9*s12^2 - 54*s12*s13 - 9*s13^2)*s23^2 + (-9*s12 - 9*s13)*
             s23^3) + p2q^5*((-27*s12^2*s13 - 36*s12*s13^2 - 9*s13^3)*s23 +
            (-45*s12*s13 - 27*s13^2)*s23^2 - 18*s13*s23^3) +
          p1q^2*p2q^3*(72*s12*s13^3 + (-108*s12^2*s13 - 18*s12*s13^2 +
              18*s13^3)*s23 + (-110*s12*s13 - 16*s13^2)*s23^2 +
            (18*s12 - 16*s13)*s23^3 + 20*s23^4) + p1q^3*p2q^2*
           (36*s12*s13^3 + (-81*s12^2*s13 - 36*s12*s13^2 + 9*s13^3)*s23 +
            (s12^2 - 81*s12*s13 - 8*s13^2)*s23^2 + (20*s12 + 2*s13)*s23^3 +
            20*s23^4) + p1q*p2q^4*(36*s12*s13^3 +
            (-72*s12^2*s13 - 18*s12*s13^2 + 18*s13^3)*s23 +
            (10*s12^2 - 52*s12*s13 + 12*s13^2)*s23^2 + (29*s12 + 13*s13)*
             s23^3 + 20*s23^4) + p3q^4*(p2q*((-18*s12^3 - 99*s12^2*s13 -
                90*s12*s13^2 - 9*s13^3)*s23 + (-54*s12^2 - 135*s12*s13 -
                27*s13^2)*s23^2 + (-36*s12 - 18*s13)*s23^3) +
            p1q*(36*s12^3*s13 + (18*s12^3 - 18*s12^2*s13 - 72*s12*s13^2)*
               s23 + (12*s12^2 - 52*s12*s13 + 10*s13^2)*s23^2 +
              (13*s12 + 29*s13)*s23^3 + 20*s23^4)) +
          p3q^3*(p2q^2*((-18*s12^3 - 126*s12^2*s13 - 126*s12*s13^2 -
                18*s13^3)*s23 + (-54*s12^2 - 180*s12*s13 - 54*s13^2)*s23^2 +
              (-36*s12 - 36*s13)*s23^3) + p1q^2*(72*s12^3*s13 +
              (18*s12^3 - 18*s12^2*s13 - 108*s12*s13^2)*s23 +
              (-16*s12^2 - 110*s12*s13)*s23^2 + (-16*s12 + 18*s13)*s23^3 +
              20*s23^4) + p1q*p2q*(72*s12^3*s13 - 72*s12^2*s13^2 +
              (18*s12^3 - 108*s12^2*s13 - 198*s12*s13^2)*s23 +
              (-12*s12^2 - 162*s12*s13 + 2*s13^2)*s23^2 + (6*s12 + 38*s13)*
               s23^3 + 40*s23^4)) + p3q*(p2q^4*((-9*s12^3 - 90*s12^2*s13 -
                99*s12*s13^2 - 18*s13^3)*s23 + (-27*s12^2 - 135*s12*s13 -
                54*s13^2)*s23^2 + (-18*s12 - 36*s13)*s23^3) +
            p1q^4*((-36*s12^2*s13 - 36*s12*s13^2)*s23 + (-9*s12^2 -
                54*s12*s13 - 9*s13^2)*s23^2 + (-9*s12 - 9*s13)*s23^3) +
            p1q*p2q^3*(-72*s12^2*s13^2 + 72*s12*s13^3 + (-198*s12^2*s13 -
                108*s12*s13^2 + 18*s13^3)*s23 + (2*s12^2 - 162*s12*s13 -
                12*s13^2)*s23^2 + (38*s12 + 6*s13)*s23^3 + 40*s23^4) +
            p1q^3*p2q*(-72*s12^2*s13^2 + (9*s12^3 - 189*s12^2*s13 -
                189*s12*s13^2 + 9*s13^3)*s23 + (-7*s12^2 - 198*s12*s13 -
                7*s13^2)*s23^2 + (22*s12 + 22*s13)*s23^3 + 40*s23^4) +
            p1q^2*p2q^2*(-144*s12^2*s13^2 + 72*s12*s13^3 + (-288*s12^2*s13 -
                198*s12*s13^2 + 18*s13^3)*s23 + (-16*s12^2 - 258*s12*s13 -
                32*s13^2)*s23^2 + (38*s12 + 4*s13)*s23^3 + 60*s23^4)) +
          p3q^2*(p2q^3*((-18*s12^3 - 126*s12^2*s13 - 126*s12*s13^2 -
                18*s13^3)*s23 + (-54*s12^2 - 180*s12*s13 - 54*s13^2)*s23^2 +
              (-36*s12 - 36*s13)*s23^3) + p1q^3*(36*s12^3*s13 +
              (9*s12^3 - 36*s12^2*s13 - 81*s12*s13^2)*s23 + (-8*s12^2 -
                81*s12*s13 + s13^2)*s23^2 + (2*s12 + 20*s13)*s23^3 +
              20*s23^4) + p1q*p2q^2*(36*s12^3*s13 - 144*s12^2*s13^2 +
              36*s12*s13^3 + (-216*s12^2*s13 - 216*s12*s13^2)*s23 +
              (-32*s12^2 - 220*s12*s13 - 32*s13^2)*s23^2 + (2*s12 + 2*s13)*
               s23^3 + 40*s23^4) + p1q^2*p2q*(72*s12^3*s13 - 144*s12^2*s13^
                2 + (18*s12^3 - 198*s12^2*s13 - 288*s12*s13^2)*s23 +
              (-32*s12^2 - 258*s12*s13 - 16*s13^2)*s23^2 + (4*s12 + 38*s13)*
               s23^3 + 60*s23^4)))*Log(s23/(s12 + s13 + s23)))/
        (36*p1q^3*p2q^2*s12*s13*s23^2 + 72*p1q^2*p2q^3*s12*s13*s23^2 +
         36*p1q*p2q^4*s12*s13*s23^2 + 36*p1q*p3q^4*s12*s13*s23^2 +
         p3q^3*(72*p1q^2*s12*s13*s23^2 + 144*p1q*p2q*s12*s13*s23^2) +
         p3q^2*(36*p1q^3*s12*s13*s23^2 + 216*p1q^2*p2q*s12*s13*s23^2 +
           216*p1q*p2q^2*s12*s13*s23^2) + p3q*(72*p1q^3*p2q*s12*s13*s23^2 +
           216*p1q^2*p2q^2*s12*s13*s23^2 + 144*p1q*p2q^3*s12*s13*s23^2)))/
      ep + Log(p3q/(p1q + p2q + p3q))*
      ((p1q*p2q^3*(-18*s12*s13^2 - 18*s13^3 + (s12^2 - 28*s13^2)*s23 -
           2*s13*s23^2) + p1q^2*p2q^2*(-18*s12*s13^2 - 18*s13^3 +
           (2*s12^2 + 20*s12*s13 - 18*s13^2)*s23 + (2*s12 + 18*s13)*s23^2 +
           2*s23^3) + p1q^3*p2q*((s12^2 + 20*s12*s13 + 10*s13^2)*s23 +
           (2*s12 + 20*s13)*s23^2 + 2*s23^3) +
         p3q^3*(p2q*(-18*s12^2*s13 - 18*s12*s13^2 - 18*s12*s13*s23) +
           p1q*((-s12^2 - 8*s13^2)*s23 - 2*s12*s23^2)) +
         p3q^2*(p2q^2*(-54*s12^2*s13 - 72*s12*s13^2 - 18*s13^3 +
             (-90*s12*s13 - 54*s13^2)*s23 - 36*s13*s23^2) +
           p1q^2*((2*s12*s13 - 16*s13^2)*s23 + 2*s13*s23^2 + 2*s23^3) +
           p1q*p2q*(-72*s12^2*s13 - 72*s12*s13^2 + (3*s12^2 - 82*s12*s13 - 40*
                s13^2)*s23 + (4*s12 - 12*s13)*s23^2 + 4*s23^3)) +
         p3q*(p2q^3*(-36*s12^2*s13 - 54*s12*s13^2 - 18*s13^3 +
             (-72*s12*s13 - 54*s13^2)*s23 - 36*s13*s23^2) +
           p1q^3*((s12^2 + 2*s12*s13 - 8*s13^2)*s23 + (2*s12 + 2*s13)*s23^2 +
             2*s23^3) + p1q*p2q^2*(-54*s12^2*s13 - 54*s12*s13^2 +
             (5*s12^2 - 64*s12*s13 - 42*s13^2)*s23 + (6*s12 - 14*s13)*s23^2 +
             4*s23^3) + p1q^2*p2q*(-54*s12^2*s13 - 54*s12*s13^2 +
             (2*s12^2 - 50*s12*s13 - 34*s13^2)*s23 + (2*s12 + 2*s13)*s23^2 +
             4*s23^3)))/(4*p1q^3*p2q*s12*s13*s23 + 8*p1q^2*p2q^2*s12*s13*
          s23 + 4*p1q*p2q^3*s12*s13*s23 + 4*p1q*p3q^3*s12*s13*s23 +
         p3q^2*(8*p1q^2*s12*s13*s23 + 12*p1q*p2q*s12*s13*s23) +
         p3q*(4*p1q^3*s12*s13*s23 + 16*p1q^2*p2q*s12*s13*s23 +
           12*p1q*p2q^2*s12*s13*s23)) +
       ((p2q^4*((-(s12*s13^2) - s13^3)*s23 - s13^2*s23^2) +
          p3q^4*(-18*s12^4 - 36*s12^3*s13 - 18*s12^2*s13^2 +
            (-55*s12^3 - 73*s12^2*s13 - 18*s12*s13^2)*s23 +
            (-56*s12^2 - 37*s12*s13)*s23^2 - 19*s12*s23^3) +
          p1q*p2q^3*((2*s12^2*s13 + 2*s12*s13^2)*s23 + (6*s12*s13 + 4*s13^2)*
             s23^2 + 4*s13*s23^3) + p1q^2*p2q^2*
           ((-2*s12^3 - 4*s12^2*s13 - 4*s12*s13^2 - 2*s13^3)*s23 +
            (-6*s12^2 - 4*s12*s13)*s23^2 + (-7*s12 - s13)*s23^3 - 3*s23^4) +
          p1q^4*((-2*s12^3 - 2*s12^2*s13)*s23 + (-5*s12^2 - 3*s12*s13)*
             s23^2 + (-5*s12 - 2*s13)*s23^3 - 2*s23^4) +
          p1q^3*p2q*((3*s12^2*s13 + 3*s12*s13^2)*s23 + (7*s12*s13 + 4*s13^2)*
             s23^2 + (-2*s12 + 2*s13)*s23^3 - 2*s23^4) +
          p3q^2*(p2q^2*(-18*s12^4 - 36*s12^3*s13 - 18*s12^2*s13^2 +
              (-55*s12^3 - 73*s12^2*s13 - 19*s12*s13^2 - s13^3)*s23 +
              (-56*s12^2 - 37*s12*s13 - s13^2)*s23^2 - 19*s12*s23^3) +
            p1q*p2q*((10*s12^2*s13 + 12*s12*s13^2 + 2*s13^3)*s23 +
              (2*s12^2 + 18*s12*s13 + 8*s13^2)*s23^2 + (2*s12 + 6*s13)*s23^
                3) + p1q^2*((-12*s12^3 - 14*s12^2*s13 - 2*s12*s13^2)*s23 +
              (-26*s12^2 - 18*s12*s13 - 2*s13^2)*s23^2 + (-19*s12 - 7*s13)*
               s23^3 - 5*s23^4)) + p3q^3*(p2q*(18*s12^3*s13 +
              36*s12^2*s13^2 + 18*s12*s13^3 + (38*s12^2*s13 + 38*s12*s13^2)*
               s23 + (21*s12*s13 + s13^2)*s23^2 + s13*s23^3) +
            p1q*(-18*s12^4 - 36*s12^3*s13 - 18*s12^2*s13^2 + (-62*s12^3 -
                82*s12^2*s13 - 20*s12*s13^2)*s23 + (-72*s12^2 - 50*s12*s13 -
                2*s13^2)*s23^2 + (-31*s12 - 5*s13)*s23^3 - 3*s23^4)) +
          p3q*(p2q^3*(18*s12^3*s13 + 36*s12^2*s13^2 + 18*s12*s13^3 +
              (38*s12^2*s13 + 38*s12*s13^2)*s23 + (21*s12*s13 + s13^2)*s23^
                2 + s13*s23^3) + p1q^3*((-7*s12^3 - 7*s12^2*s13)*s23 +
              (-15*s12^2 - 8*s12*s13)*s23^2 + (-12*s12 - 4*s13)*s23^3 -
              4*s23^4) + p1q*p2q^2*(-18*s12^4 - 36*s12^3*s13 -
              18*s12^2*s13^2 + (-56*s12^3 - 74*s12^2*s13 - 20*s12*s13^2 -
                2*s13^3)*s23 + (-60*s12^2 - 40*s12*s13 - 2*s13^2)*s23^2 +
              (-25*s12 - 3*s13)*s23^3 - 3*s23^4) + p1q^2*p2q*
             ((8*s12^2*s13 + 8*s12*s13^2)*s23 + (2*s12^2 + 16*s12*s13 +
                6*s13^2)*s23^2 + 4*s13*s23^3 - 2*s23^4)))*
         Log((p1q + p3q)/(p1q + p2q + p3q)))/(-8*p1q*p2q^3*s12*s13^2*s23 +
         p1q^4*(8*s12^2*s13*s23 + 8*s12*s13*s23^2) +
         p1q*p3q^3*(8*s12^2*s13*s23 + 8*s12*s13*s23^2) +
         p1q^2*p2q^2*((8*s12^2*s13 - 16*s12*s13^2)*s23 + 8*s12*s13*s23^2) +
         p1q^3*p2q*((16*s12^2*s13 - 8*s12*s13^2)*s23 + 16*s12*s13*s23^2) +
         p3q^2*(p1q*p2q*((16*s12^2*s13 - 8*s12*s13^2)*s23 +
             16*s12*s13*s23^2) + p1q^2*(24*s12^2*s13*s23 +
             24*s12*s13*s23^2)) +
         p3q*(p1q*p2q^2*((8*s12^2*s13 - 16*s12*s13^2)*s23 +
             8*s12*s13*s23^2) + p1q^3*(24*s12^2*s13*s23 + 24*s12*s13*s23^2) +
           p1q^2*p2q*((32*s12^2*s13 - 16*s12*s13^2)*s23 +
             32*s12*s13*s23^2))) +
       ((p3q^6*((-18*s12^4 - 36*s12^3*s13 - 18*s12^2*s13^2)*s23 +
            (-36*s12^3 - 45*s12^2*s13 - 9*s12*s13^2)*s23^2 +
            (-18*s12^2 - 9*s12*s13)*s23^3) +
          p2q^6*((36*s12^3*s13 + 90*s12^2*s13^2 + 72*s12*s13^3 + 18*s13^4)*
             s23 + (72*s12^2*s13 + 117*s12*s13^2 + 45*s13^3)*s23^2 +
            (36*s12*s13 + 27*s13^2)*s23^3) + p1q^3*p2q^3*(-36*s12^2*s13^3 -
            36*s12*s13^4 + (72*s12^3*s13 + 207*s12^2*s13^2 + 90*s12*s13^3 -
              9*s13^4)*s23 + (54*s12^2*s13 + 189*s12*s13^2 + 63*s13^3)*
             s23^2 - 90*s12*s13*s23^3 - 72*s13*s23^4) +
          p1q^4*p2q^2*((36*s12^3*s13 + 108*s12^2*s13^2 + 72*s12*s13^3)*s23 +
            (-9*s12^2*s13 + 54*s12*s13^2 + 27*s13^3)*s23^2 +
            (-99*s12*s13 - 27*s13^2)*s23^3 - 54*s13*s23^4) +
          p1q^2*p2q^4*(-72*s12^2*s13^3 - 72*s12*s13^4 +
            (108*s12^3*s13 + 234*s12^2*s13^2 + 36*s12*s13^3 - 18*s13^4)*s23 +
            (162*s12^2*s13 + 270*s12*s13^2 + 72*s13^3)*s23^2 +
            (18*s12*s13 + 54*s13^2)*s23^3 - 36*s13*s23^4) +
          p1q*p2q^5*(-36*s12^2*s13^3 - 36*s12*s13^4 +
            (72*s12^3*s13 + 126*s12^2*s13^2 - 18*s13^4)*s23 +
            (108*s12^2*s13 + 108*s12*s13^2)*s23^2 + (9*s12*s13 - 9*s13^2)*
             s23^3 - 27*s13*s23^4) + p1q^5*p2q*
           ((-36*s12^2*s13 - 36*s12*s13^2)*s23^2 + (-54*s12*s13 - 18*s13^2)*
             s23^3 - 18*s13*s23^4) + p3q^5*
           (p2q*((-54*s12^4 - 72*s12^3*s13 + 36*s12^2*s13^2 + 72*s12*s13^3 +
                18*s13^4)*s23 + (-108*s12^3 - 63*s12^2*s13 + 90*s12*s13^2 +
                45*s13^3)*s23^2 + (-54*s12^2 + 9*s12*s13 + 27*s13^2)*s23^3) +
            p1q*(-36*s12^4*s13 - 36*s12^3*s13^2 + (108*s12^2*s13^2 +
                72*s12*s13^3)*s23 + (18*s12^3 + 72*s12^2*s13 + 90*s12*s13^2)*
               s23^2 + (36*s12^2 + 27*s12*s13 - 9*s13^2)*s23^3 +
              (18*s12 - 9*s13)*s23^4)) +
          p3q*(p2q^5*((-18*s12^4 + 72*s12^3*s13 + 252*s12^2*s13^2 +
                216*s12*s13^3 + 54*s13^4)*s23 + (-36*s12^3 + 171*s12^2*s13 +
                342*s12*s13^2 + 135*s13^3)*s23^2 + (-18*s12^2 + 99*s12*s13 +
                81*s13^2)*s23^3) + p1q*p2q^4*(72*s12^3*s13^2 -
              36*s12^2*s13^3 - 108*s12*s13^4 + (234*s12^3*s13 + 540*s12^2*
                 s13^2 + 90*s12*s13^3 - 36*s13^4)*s23 + (18*s12^3 +
                396*s12^2*s13 + 432*s12*s13^2 + 18*s13^3)*s23^2 +
              (36*s12^2 + 99*s12*s13 - 9*s13^2)*s23^3 + (18*s12 - 63*s13)*s23^
                4) + p1q^3*p2q^2*(72*s12^3*s13^2 + 36*s12^2*s13^3 -
              36*s12*s13^4 + (153*s12^3*s13 + 468*s12^2*s13^2 +
                189*s12*s13^3 - 18*s13^4)*s23 + (63*s12^2*s13 +
                261*s12*s13^2 + 90*s13^3)*s23^2 + (-216*s12*s13 - 18*s13^2)*
               s23^3 - 126*s13*s23^4) + p1q^2*p2q^3*(144*s12^3*s13^2 -
              144*s12*s13^4 + (270*s12^3*s13 + 792*s12^2*s13^2 +
                198*s12*s13^3 - 36*s13^4)*s23 + (378*s12^2*s13 +
                648*s12*s13^2 + 126*s13^3)*s23^2 + (18*s12*s13 + 72*s13^2)*
               s23^3 - 90*s13*s23^4) + p1q^4*p2q*((36*s12^3*s13 +
                72*s12^2*s13^2 + 36*s12*s13^3)*s23 + (-108*s12^2*s13 -
                72*s12*s13^2 + 36*s13^3)*s23^2 + (-216*s12*s13 - 36*s13^2)*
               s23^3 - 72*s13*s23^4) + p1q^5*((-36*s12^2*s13 - 36*s12*s13^2)*
               s23^2 + (-54*s12*s13 - 18*s13^2)*s23^3 - 18*s13*s23^4)) +
          p3q^3*(p2q^3*((-72*s12^4 + 288*s12^2*s13^2 + 288*s12*s13^3 +
                72*s13^4)*s23 + (-144*s12^3 + 108*s12^2*s13 + 432*s12*s13^2 +
                180*s13^3)*s23^2 + (-72*s12^2 + 108*s12*s13 + 108*s13^2)*s23^
                3) + p1q*p2q^2*(-108*s12^4*s13 + 108*s12^3*s13^2 +
              180*s12^2*s13^3 - 36*s12*s13^4 + (90*s12^3*s13 + 828*s12^2*
                 s13^2 + 378*s12*s13^3)*s23 + (36*s12^3 + 360*s12^2*s13 +
                558*s12*s13^2 + 18*s13^3)*s23^2 + (72*s12^2 + 90*s12*s13 -
                54*s13^2)*s23^3 + (36*s12 - 72*s13)*s23^4) +
            p1q^2*p2q*(-144*s12^4*s13 + 144*s12^2*s13^3 + (54*s12^3*s13 +
                684*s12^2*s13^2 + 342*s12*s13^3)*s23 + (198*s12^2*s13 +
                360*s12*s13^2 + 18*s13^3)*s23^2 + (-54*s12*s13 - 36*s13^2)*
               s23^3 - 54*s13*s23^4) + p1q^3*(-36*s12^4*s13 -
              36*s12^3*s13^2 + (81*s12^3*s13 + 198*s12^2*s13^2 +
                81*s12*s13^3)*s23 + (99*s12^2*s13 + 63*s12*s13^2)*s23^2 +
              (-36*s12*s13 - 18*s13^2)*s23^3 - 18*s13*s23^4)) +
          p3q^4*(p2q^2*((-72*s12^4 - 36*s12^3*s13 + 198*s12^2*s13^2 +
                216*s12*s13^3 + 54*s13^4)*s23 + (-144*s12^3 + 36*s12^2*s13 +
                315*s12*s13^2 + 135*s13^3)*s23^2 + (-72*s12^2 + 72*s12*s13 +
                81*s13^2)*s23^3) + p1q*p2q*(-108*s12^4*s13 - 36*s12^3*s13^2 +
              72*s12^2*s13^3 + (432*s12^2*s13^2 + 252*s12*s13^3)*s23 +
              (36*s12^3 + 198*s12^2*s13 + 306*s12*s13^2)*s23^2 +
              (72*s12^2 + 45*s12*s13 - 45*s13^2)*s23^3 + (36*s12 - 45*s13)*
               s23^4) + p1q^2*(-72*s12^4*s13 - 72*s12^3*s13^2 +
              (180*s12^2*s13^2 + 108*s12*s13^3)*s23 + (54*s12^2*s13 +
                90*s12*s13^2)*s23^2 + (-36*s12*s13 - 18*s13^2)*s23^3 -
              18*s13*s23^4)) + p3q^2*(p2q^4*((-54*s12^4 + 36*s12^3*s13 +
                306*s12^2*s13^2 + 288*s12*s13^3 + 72*s13^4)*s23 +
              (-108*s12^3 + 153*s12^2*s13 + 441*s12*s13^2 + 180*s13^3)*s23^
                2 + (-54*s12^2 + 117*s12*s13 + 108*s13^2)*s23^3) +
            p1q*p2q^3*(-36*s12^4*s13 + 180*s12^3*s13^2 + 108*s12^2*s13^3 -
              108*s12*s13^4 + (252*s12^3*s13 + 918*s12^2*s13^2 +
                288*s12*s13^3 - 18*s13^4)*s23 + (36*s12^3 + 522*s12^2*s13 +
                666*s12*s13^2 + 36*s13^3)*s23^2 + (72*s12^2 + 162*s12*s13 -
                18*s13^2)*s23^3 + (36*s12 - 72*s13)*s23^4) +
            p1q^2*p2q^2*(-72*s12^4*s13 + 216*s12^3*s13^2 + 216*s12^2*s13^3 -
              72*s12*s13^4 + (216*s12^3*s13 + 1062*s12^2*s13^2 +
                396*s12*s13^3 - 18*s13^4)*s23 + (360*s12^2*s13 +
                648*s12*s13^2 + 72*s13^3)*s23^2 - 18*s12*s13*s23^3 -
              90*s13*s23^4) + p1q^3*p2q*(-36*s12^4*s13 + 36*s12^3*s13^2 +
              72*s12^2*s13^3 + (162*s12^3*s13 + 459*s12^2*s13^2 +
                180*s12*s13^3 - 9*s13^4)*s23 + (108*s12^2*s13 +
                135*s12*s13^2 + 27*s13^3)*s23^2 + (-162*s12*s13 - 36*s13^2)*
               s23^3 - 72*s13*s23^4) + p1q^4*((72*s12^3*s13 + 108*s12^2*
                 s13^2 + 36*s12*s13^3)*s23 + (45*s12^2*s13 + 18*s12*s13^2 +
                9*s13^3)*s23^2 + (-45*s12*s13 - 9*s13^2)*s23^3 -
              18*s13*s23^4)))*Log((p2q + p3q)/(p1q + p2q + p3q)))/
        (p1q*p2q^5*(8*s12^2*s13 + 8*s12*s13^2)*s23^2 +
         p1q*p3q^5*(8*s12^2*s13 + 8*s12*s13^2)*s23^2 - 8*p1q^4*p2q^2*s12*s13*
          s23^3 + p1q^3*p2q^3*((8*s12^2*s13 + 8*s12*s13^2)*s23^2 -
           16*s12*s13*s23^3) + p1q^2*p2q^4*((16*s12^2*s13 + 16*s12*s13^2)*
            s23^2 - 8*s12*s13*s23^3) +
         p3q^2*(p1q*p2q^3*(80*s12^2*s13 + 80*s12*s13^2)*s23^2 -
           8*p1q^4*s12*s13*s23^3 + p1q^3*p2q*((24*s12^2*s13 + 24*s12*s13^2)*
              s23^2 - 48*s12*s13*s23^3) + p1q^2*p2q^2*
            ((96*s12^2*s13 + 96*s12*s13^2)*s23^2 - 48*s12*s13*s23^3)) +
         p3q*(p1q*p2q^4*(40*s12^2*s13 + 40*s12*s13^2)*s23^2 -
           16*p1q^4*p2q*s12*s13*s23^3 + p1q^3*p2q^2*
            ((24*s12^2*s13 + 24*s12*s13^2)*s23^2 - 48*s12*s13*s23^3) +
           p1q^2*p2q^3*((64*s12^2*s13 + 64*s12*s13^2)*s23^2 -
             32*s12*s13*s23^3)) + p3q^3*(p1q*p2q^2*(80*s12^2*s13 +
             80*s12*s13^2)*s23^2 + p1q^2*p2q*((64*s12^2*s13 + 64*s12*s13^2)*
              s23^2 - 32*s12*s13*s23^3) + p1q^3*((8*s12^2*s13 + 8*s12*s13^2)*
              s23^2 - 16*s12*s13*s23^3)) +
         p3q^4*(p1q*p2q*(40*s12^2*s13 + 40*s12*s13^2)*s23^2 +
           p1q^2*((16*s12^2*s13 + 16*s12*s13^2)*s23^2 - 8*s12*s13*s23^3))) +
       ((p3q^5*((-9*s12^2*s13 - 9*s12*s13^2)*s23 - 9*s12*s13*s23^2) +
          p2q^5*((-18*s12^2*s13 - 27*s12*s13^2 - 9*s13^3)*s23 +
            (-36*s12*s13 - 27*s13^2)*s23^2 - 18*s13*s23^3) +
          p1q^4*p2q*((-18*s12^2*s13 - 18*s12*s13^2)*s23 +
            (-27*s12*s13 - 9*s13^2)*s23^2 - 9*s13*s23^3) +
          p1q*p2q^4*(18*s12*s13^3 + (-36*s12^2*s13 - 18*s12*s13^2 + 18*s13^3)*
             s23 + (s12^2 - 61*s12*s13 - 15*s13^2)*s23^2 + (2*s12 - 23*s13)*
             s23^3 + 2*s23^4) + p1q^3*p2q^2*(18*s12*s13^3 +
            (-36*s12^2*s13 - 27*s12*s13^2 + 9*s13^3)*s23 +
            (s12^2 - 54*s12*s13 - 17*s13^2)*s23^2 + (2*s12 - 16*s13)*s23^3 +
            2*s23^4) + p1q^2*p2q^3*(36*s12*s13^3 +
            (-54*s12^2*s13 - 36*s12*s13^2 + 18*s13^3)*s23 +
            (-92*s12*s13 - 34*s13^2)*s23^2 - 34*s13*s23^3 + 2*s23^4) +
          p3q^4*(p2q*((-36*s12^2*s13 - 45*s12*s13^2 - 9*s13^3)*s23 +
              (-54*s12*s13 - 27*s13^2)*s23^2 - 18*s13*s23^3) +
            p1q*(18*s12^3*s13 - 36*s12*s13^2*s23 + (3*s12^2 - 7*s12*s13 +
                s13^2)*s23^2 + (4*s12 + 11*s13)*s23^3 + 2*s23^4)) +
          p3q^3*(p2q^2*((-54*s12^2*s13 - 72*s12*s13^2 - 18*s13^3)*s23 +
              (-90*s12*s13 - 54*s13^2)*s23^2 - 36*s13*s23^3) +
            p1q^2*(36*s12^3*s13 + (18*s12^2*s13 - 54*s12*s13^2)*s23 +
              (2*s12^2 - 2*s12*s13)*s23^2 + (2*s12 + 18*s13)*s23^3 +
              2*s23^4) + p1q*p2q*(36*s12^3*s13 - 36*s12^2*s13^2 -
              108*s12*s13^2*s23 + (6*s12^2 - 18*s12*s13 - 16*s13^2)*s23^2 +
              (6*s12 + 20*s13)*s23^3 + 4*s23^4)) +
          p3q*(p2q^4*((-45*s12^2*s13 - 63*s12*s13^2 - 18*s13^3)*s23 +
              (-81*s12*s13 - 54*s13^2)*s23^2 - 36*s13*s23^3) +
            p1q^4*((-18*s12^2*s13 - 18*s12*s13^2)*s23 + (-27*s12*s13 -
                9*s13^2)*s23^2 - 9*s13*s23^3) + p1q*p2q^3*(-36*s12^2*s13^2 +
              36*s12*s13^3 + (-90*s12^2*s13 - 108*s12*s13^2 + 18*s13^3)*s23 +
              (2*s12^2 - 144*s12*s13 - 66*s13^2)*s23^2 + (2*s12 - 48*s13)*s23^
                3 + 4*s23^4) + p1q^3*p2q*(-36*s12^2*s13^2 + (-81*s12^2*s13 -
                108*s12*s13^2 + 9*s13^3)*s23 + (2*s12^2 - 99*s12*s13 -
                25*s13^2)*s23^2 + (4*s12 - 14*s13)*s23^3 + 4*s23^4) +
            p1q^2*p2q^2*(-72*s12^2*s13^2 + 36*s12*s13^3 + (-108*s12^2*s13 -
                162*s12*s13^2 + 18*s13^3)*s23 + (2*s12^2 - 150*s12*s13 -
                68*s13^2)*s23^2 + (2*s12 - 32*s13)*s23^3 + 6*s23^4)) +
          p3q^2*(p2q^3*((-54*s12^2*s13 - 72*s12*s13^2 - 18*s13^3)*s23 +
              (-90*s12*s13 - 54*s13^2)*s23^2 - 36*s13*s23^3) +
            p1q^3*(18*s12^3*s13 + (-9*s12^2*s13 - 45*s12*s13^2)*s23 +
              (s12^2 - 27*s12*s13 - 8*s13^2)*s23^2 + (2*s12 + 2*s13)*s23^3 +
              2*s23^4) + p1q*p2q^2*(18*s12^3*s13 - 72*s12^2*s13^2 +
              18*s12*s13^3 + (-54*s12^2*s13 - 162*s12*s13^2)*s23 +
              (4*s12^2 - 94*s12*s13 - 68*s13^2)*s23^2 + (2*s12 - 16*s13)*s23^
                3 + 4*s23^4) + p1q^2*p2q*(36*s12^3*s13 - 72*s12^2*s13^2 +
              (-36*s12^2*s13 - 180*s12*s13^2)*s23 + (4*s12^2 - 60*s12*s13 -
                34*s13^2)*s23^2 + (4*s12 + 20*s13)*s23^3 + 6*s23^4)))*
         Log(-s12 - s13 - s23))/(4*p1q^3*p2q^2*s12*s13*s23^2 +
         8*p1q^2*p2q^3*s12*s13*s23^2 + 4*p1q*p2q^4*s12*s13*s23^2 +
         4*p1q*p3q^4*s12*s13*s23^2 + p3q^3*(8*p1q^2*s12*s13*s23^2 +
           16*p1q*p2q*s12*s13*s23^2) + p3q^2*(4*p1q^3*s12*s13*s23^2 +
           24*p1q^2*p2q*s12*s13*s23^2 + 24*p1q*p2q^2*s12*s13*s23^2) +
         p3q*(8*p1q^3*p2q*s12*s13*s23^2 + 24*p1q^2*p2q^2*s12*s13*s23^2 +
           16*p1q*p2q^3*s12*s13*s23^2)) +
       ((p3q^6*((9*s12^3*s13 + 9*s12^2*s13^2)*s23 + (-s12^3 + 8*s12^2*s13)*
             s23^2 - s12^2*s23^3) + p1q^5*p2q*
           ((-36*s12^2*s13^2 - 36*s12*s13^3)*s23 +
            (-27*s12^2*s13 - 72*s12*s13^2 - 9*s13^3)*s23^2 +
            (-36*s12*s13 - 18*s13^2)*s23^3 - 9*s13*s23^4) +
          p2q^6*((-9*s12^2*s13^2 - 9*s12*s13^3)*s23 + (-10*s12*s13^2 - s13^3)*
             s23^2 + (-(s12*s13) - 2*s13^2)*s23^3 - s13*s23^4) +
          p1q*p2q^5*(36*s12*s13^4 + (-54*s12^2*s13^2 + 18*s13^4)*s23 +
            (-9*s12^2*s13 - 42*s12*s13^2 + 25*s13^3)*s23^2 +
            (-15*s12*s13 + 5*s13^2)*s23^3 + (-s12 - s13)*s23^4 + s23^5) +
          p1q^4*p2q^2*(36*s12*s13^4 + (-99*s12^2*s13^2 - 54*s12*s13^3 +
              9*s13^4)*s23 + (-52*s12^2*s13 - 155*s12*s13^2 - 9*s13^3)*
             s23^2 + (2*s12^2 - 71*s12*s13 - 35*s13^2)*s23^3 +
            (2*s12 - 15*s13)*s23^4 + 2*s23^5) + p1q^2*p2q^4*
           (108*s12*s13^4 + (-126*s12^2*s13^2 + 18*s12*s13^3 + 36*s13^4)*
             s23 + (-36*s12^2*s13 - 122*s12*s13^2 + 34*s13^3)*s23^2 +
            (-59*s12*s13 - 13*s13^2)*s23^3 + (-3*s12 - 8*s13)*s23^4 +
            3*s23^5) + p1q^3*p2q^3*(108*s12*s13^4 +
            (-144*s12^2*s13^2 - 9*s12*s13^3 + 27*s13^4)*s23 +
            (-52*s12^2*s13 - 173*s12*s13^2 + 8*s13^3)*s23^2 +
            (2*s12^2 - 80*s12*s13 - 37*s13^2)*s23^3 - 14*s13*s23^4 +
            4*s23^5) + p3q^5*(p1q*(-36*s12^4*s13 + (-18*s12^3*s13 +
                36*s12^2*s13^2 - 18*s12*s13^3)*s23 + (-6*s12^3 -
                2*s12^2*s13 - 18*s12*s13^2)*s23^2 + (-4*s12^2 - 16*s12*s13)*
               s23^3) + p2q*((27*s12^3*s13 + 18*s12^2*s13^2 - 9*s12*s13^3)*
               s23 + (-2*s12^3 + 27*s12^2*s13 - 7*s12*s13^2)*s23^2 +
              (-s12^2 + 3*s12*s13)*s23^3 + s12*s23^4)) +
          p3q^4*(p2q^2*((36*s12^3*s13 + 9*s12^2*s13^2 - 27*s12*s13^3)*s23 +
              (-2*s12^3 + 38*s12^2*s13 - 24*s12*s13^2 - s13^3)*s23^2 +
              (5*s12*s13 - 2*s13^2)*s23^3 + (2*s12 - s13)*s23^4) +
            p1q*p2q*(-72*s12^4*s13 + 108*s12^3*s13^2 + (-18*s12^3*s13 +
                126*s12^2*s13^2 - 108*s12*s13^3)*s23 + (-14*s12^3 -
                s12^2*s13 - 88*s12*s13^2 - 9*s13^3)*s23^2 + (-47*s12*s13 -
                9*s13^2)*s23^3 + (5*s12 + s13)*s23^4 + s23^5) +
            p1q^2*(-72*s12^4*s13 + 36*s12^3*s13^2 + (-18*s12^3*s13 +
                90*s12^2*s13^2 - 72*s12*s13^3)*s23 + (-6*s12^3 +
                24*s12^2*s13 - 54*s12*s13^2)*s23^2 + (2*s12^2 - 19*s12*s13 +
                9*s13^2)*s23^3 + (3*s12 + 10*s13)*s23^4 + s23^5)) +
          p3q^3*(p2q^3*((36*s12^3*s13 - 36*s12*s13^3)*s23 + (-2*s12^3 +
                38*s12^2*s13 - 34*s12*s13^2 - 2*s13^3)*s23^2 +
              (4*s12*s13 - 4*s13^2)*s23^3 + (2*s12 - 2*s13)*s23^4) +
            p1q*p2q^2*(-36*s12^4*s13 + 216*s12^3*s13^2 - 108*s12^2*s13^3 +
              (72*s12^3*s13 + 126*s12^2*s13^2 - 234*s12*s13^3)*s23 +
              (-10*s12^3 + 84*s12^2*s13 - 144*s12*s13^2 - 36*s13^3)*s23^2 +
              (16*s12^2 - 30*s12*s13 - 38*s13^2)*s23^3 + 8*s12*s23^4 +
              2*s23^5) + p1q^3*(-36*s12^4*s13 + 72*s12^3*s13^2 +
              (63*s12^3*s13 + 99*s12^2*s13^2 - 108*s12*s13^3)*s23 +
              (-2*s12^3 + 79*s12^2*s13 - 84*s12*s13^2)*s23^2 +
              (4*s12^2 - 6*s12*s13 + 18*s13^2)*s23^3 + (2*s12 + 20*s13)*s23^
                4 + 2*s23^5) + p1q^2*p2q*(-72*s12^4*s13 + 288*s12^3*s13^2 -
              72*s12^2*s13^3 + (126*s12^3*s13 + 252*s12^2*s13^2 -
                306*s12*s13^3)*s23 + (-12*s12^3 + 154*s12^2*s13 -
                188*s12*s13^2 - 18*s13^3)*s23^2 + (14*s12^2 - 20*s12*s13 +
                16*s13^2)*s23^3 + (6*s12 + 38*s13)*s23^4 + 4*s23^5)) +
          p3q^2*(p2q^4*((27*s12^3*s13 - 9*s12^2*s13^2 - 36*s12*s13^3)*s23 +
              (-s12^3 + 30*s12^2*s13 - 34*s12*s13^2 - 2*s13^3)*s23^2 +
              (s12^2 + 4*s12*s13 - 4*s13^2)*s23^3 + (2*s12 - 2*s13)*s23^4) +
            p1q*p2q^3*(108*s12^3*s13^2 - 216*s12^2*s13^3 + 36*s12*s13^4 +
              (108*s12^3*s13 - 90*s12^2*s13^2 - 270*s12*s13^3)*s23 +
              (-2*s12^3 + 118*s12^2*s13 - 210*s12*s13^2 - 56*s13^3)*s23^2 +
              (16*s12^2 - 16*s12*s13 - 62*s13^2)*s23^3 - 4*s13*s23^4 +
              2*s23^5) + p1q^4*(36*s12^3*s13^2 + (63*s12^3*s13 +
                18*s12^2*s13^2 - 81*s12*s13^3)*s23 + (47*s12^2*s13 -
                83*s12*s13^2)*s23^2 + (2*s12^2 - 8*s12*s13 + 10*s13^2)*s23^
                3 + (2*s12 + 12*s13)*s23^4 + 2*s23^5) + p1q^2*p2q^2*
             (252*s12^3*s13^2 - 360*s12^2*s13^3 + 36*s12*s13^4 +
              (198*s12^3*s13 - 144*s12^2*s13^2 - 558*s12*s13^3)*s23 +
              (-6*s12^3 + 182*s12^2*s13 - 408*s12*s13^2 - 56*s13^3)*s23^2 +
              (22*s12^2 - 6*s12*s13 - 8*s13^2)*s23^3 + 56*s13*s23^4 +
              8*s23^5) + p1q^3*p2q*(180*s12^3*s13^2 - 144*s12^2*s13^3 +
              (207*s12^3*s13 - 27*s12^2*s13^2 - 414*s12*s13^3)*s23 +
              (-4*s12^3 + 160*s12^2*s13 - 341*s12*s13^2 - 10*s13^3)*s23^2 +
              (10*s12^2 - 11*s12*s13 + 44*s13^2)*s23^3 + (4*s12 + 62*s13)*s23^
                4 + 8*s23^5)) + p3q*(p2q^5*((9*s12^3*s13 - 18*s12^2*s13^2 -
                27*s12*s13^3)*s23 + (11*s12^2*s13 - 27*s12*s13^2 - 2*s13^3)*
               s23^2 + (s12^2 + s12*s13 - 4*s13^2)*s23^3 + (s12 - 2*s13)*s23^
                4) + p1q^5*((-36*s12^2*s13^2 - 36*s12*s13^3)*s23 +
              (-27*s12^2*s13 - 72*s12*s13^2 - 9*s13^3)*s23^2 +
              (-36*s12*s13 - 18*s13^2)*s23^3 - 9*s13*s23^4) +
            p1q*p2q^4*(-108*s12^2*s13^3 + 72*s12*s13^4 + (36*s12^3*s13 -
                180*s12^2*s13^2 - 126*s12*s13^3 + 18*s13^4)*s23 +
              (26*s12^2*s13 - 178*s12*s13^2 - 4*s13^3)*s23^2 +
              (4*s12^2 - 32*s12*s13 - 28*s13^2)*s23^3 + (-4*s12 - 4*s13)*s23^
                4 + 2*s23^5) + p1q^4*p2q*(-72*s12^2*s13^3 + (27*s12^3*s13 -
                225*s12^2*s13^2 - 243*s12*s13^3 + 9*s13^4)*s23 +
              (-77*s12^2*s13 - 346*s12*s13^2 - 9*s13^3)*s23^2 +
              (4*s12^2 - 115*s12*s13 - 25*s13^2)*s23^3 + (4*s12 - 3*s13)*s23^
                4 + 4*s23^5) + p1q^2*p2q^3*(-288*s12^2*s13^3 +
              144*s12*s13^4 + (54*s12^3*s13 - 432*s12^2*s13^2 -
                306*s12*s13^3 + 36*s13^4)*s23 + (16*s12^2*s13 -
                396*s12*s13^2 - 4*s13^3)*s23^2 + (10*s12^2 - 64*s12*s13 -
                28*s13^2)*s23^3 + (-6*s12 + 20*s13)*s23^4 + 8*s23^5) +
            p1q^3*p2q^2*(-252*s12^2*s13^3 + 72*s12*s13^4 + (36*s12^3*s13 -
                486*s12^2*s13^2 - 423*s12*s13^3 + 27*s13^4)*s23 +
              (-2*s12^3 - 79*s12^2*s13 - 538*s12*s13^2 - 2*s13^3)*s23^2 +
              (8*s12^2 - 121*s12*s13 - 11*s13^2)*s23^3 + (2*s12 + 28*s13)*s23^
                4 + 10*s23^5)))*Log(s12/(s12 + s13 + s23)))/
        (8*p1q*p3q^5*s12^2*s13*s23^2 + p1q^3*p2q^3*(-24*s12*s13^2*s23^2 -
           24*s12*s13*s23^3) + p1q^2*p2q^4*(-24*s12*s13^2*s23^2 -
           24*s12*s13*s23^3) + p1q^4*p2q^2*(-8*s12*s13^2*s23^2 -
           8*s12*s13*s23^3) + p1q*p2q^5*(-8*s12*s13^2*s23^2 -
           8*s12*s13*s23^3) + p3q*(p1q^2*p2q^3*((16*s12^2*s13 - 80*s12*s13^2)*
              s23^2 - 80*s12*s13*s23^3) + p1q^3*p2q^2*
            ((8*s12^2*s13 - 64*s12*s13^2)*s23^2 - 64*s12*s13*s23^3) +
           p1q*p2q^4*((8*s12^2*s13 - 32*s12*s13^2)*s23^2 -
             32*s12*s13*s23^3) + p1q^4*p2q*(-16*s12*s13^2*s23^2 -
             16*s12*s13*s23^3)) + p3q^3*
          (p1q^2*p2q*((48*s12^2*s13 - 48*s12*s13^2)*s23^2 -
             48*s12*s13*s23^3) + p1q*p2q^2*((48*s12^2*s13 - 32*s12*s13^2)*
              s23^2 - 32*s12*s13*s23^3) + p1q^3*((8*s12^2*s13 - 16*s12*s13^2)*
              s23^2 - 16*s12*s13*s23^3)) +
         p3q^2*(p1q^2*p2q^2*((48*s12^2*s13 - 96*s12*s13^2)*s23^2 -
             96*s12*s13*s23^3) + p1q^3*p2q*((16*s12^2*s13 - 56*s12*s13^2)*
              s23^2 - 56*s12*s13*s23^3) + p1q*p2q^3*
            ((32*s12^2*s13 - 48*s12*s13^2)*s23^2 - 48*s12*s13*s23^3) +
           p1q^4*(-8*s12*s13^2*s23^2 - 8*s12*s13*s23^3)) +
         p3q^4*(p1q^2*((16*s12^2*s13 - 8*s12*s13^2)*s23^2 -
             8*s12*s13*s23^3) + p1q*p2q*((32*s12^2*s13 - 8*s12*s13^2)*s23^2 -
             8*s12*s13*s23^3))) + ((p2q^4*(s12*s13^2 + s13^3 + s13^2*s23) +
          p3q^4*(s12^3 + s12^2*s13 + (2*s12^2 + s12*s13)*s23 + s12*s23^2) +
          p1q*p2q^3*(-2*s12^2*s13 - 2*s12*s13^2 + (-6*s12*s13 - 4*s13^2)*
             s23 - 4*s13*s23^2) + p1q^3*p2q*(-3*s12^2*s13 - 3*s12*s13^2 +
            (-7*s12*s13 - 4*s13^2)*s23 + (2*s12 - 2*s13)*s23^2 + 2*s23^3) +
          p1q^4*(2*s12^3 + 2*s12^2*s13 + (5*s12^2 + 3*s12*s13)*s23 +
            (5*s12 + 2*s13)*s23^2 + 2*s23^3) + p1q^2*p2q^2*
           (2*s12^3 + 4*s12^2*s13 + 4*s12*s13^2 + 2*s13^3 +
            (6*s12^2 + 4*s12*s13)*s23 + (7*s12 + s13)*s23^2 + 3*s23^3) +
          p3q^3*(p2q*(-2*s12^2*s13 - 2*s12*s13^2 + (-3*s12*s13 - s13^2)*s23 -
              s13*s23^2) + p1q*(8*s12^3 + 10*s12^2*s13 + 2*s12*s13^2 +
              (18*s12^2 + 14*s12*s13 + 2*s13^2)*s23 + (13*s12 + 5*s13)*s23^
                2 + 3*s23^3)) + p3q*(p2q^3*(-2*s12^2*s13 - 2*s12*s13^2 +
              (-3*s12*s13 - s13^2)*s23 - s13*s23^2) + p1q^2*p2q*
             (-8*s12^2*s13 - 8*s12*s13^2 + (-2*s12^2 - 16*s12*s13 - 6*s13^2)*
               s23 - 4*s13*s23^2 + 2*s23^3) + p1q*p2q^2*(2*s12^3 +
              2*s12^2*s13 + 2*s12*s13^2 + 2*s13^3 + (6*s12^2 + 4*s12*s13 +
                2*s13^2)*s23 + (7*s12 + 3*s13)*s23^2 + 3*s23^3) +
            p1q^3*(7*s12^3 + 7*s12^2*s13 + (15*s12^2 + 8*s12*s13)*s23 +
              (12*s12 + 4*s13)*s23^2 + 4*s23^3)) +
          p3q^2*(p2q^2*(s12^3 + s12^2*s13 + s12*s13^2 + s13^3 +
              (2*s12^2 + s12*s13 + s13^2)*s23 + s12*s23^2) +
            p1q*p2q*(-10*s12^2*s13 - 12*s12*s13^2 - 2*s13^3 +
              (-2*s12^2 - 18*s12*s13 - 8*s13^2)*s23 + (-2*s12 - 6*s13)*s23^
                2) + p1q^2*(12*s12^3 + 14*s12^2*s13 + 2*s12*s13^2 +
              (26*s12^2 + 18*s12*s13 + 2*s13^2)*s23 + (19*s12 + 7*s13)*s23^
                2 + 5*s23^3)))*Log(s13/(s12 + s13 + s23)))/
        (-8*p1q*p2q^3*s12*s13^2 + p1q^4*(8*s12^2*s13 + 8*s12*s13*s23) +
         p1q*p3q^3*(8*s12^2*s13 + 8*s12*s13*s23) + p1q^2*p2q^2*
          (8*s12^2*s13 - 16*s12*s13^2 + 8*s12*s13*s23) +
         p1q^3*p2q*(16*s12^2*s13 - 8*s12*s13^2 + 16*s12*s13*s23) +
         p3q^2*(p1q*p2q*(16*s12^2*s13 - 8*s12*s13^2 + 16*s12*s13*s23) +
           p1q^2*(24*s12^2*s13 + 24*s12*s13*s23)) +
         p3q*(p1q*p2q^2*(8*s12^2*s13 - 16*s12*s13^2 + 8*s12*s13*s23) +
           p1q^3*(24*s12^2*s13 + 24*s12*s13*s23) + p1q^2*p2q*
            (32*s12^2*s13 - 16*s12*s13^2 + 32*s12*s13*s23))) +
       ((p3q^6*((-18*s12^3 - 36*s12^2*s13 - 18*s12*s13^2)*s23 +
            (-27*s12^2 - 27*s12*s13)*s23^2 - 9*s12*s23^3) +
          p2q^6*((-36*s12^3 - 90*s12^2*s13 - 72*s12*s13^2 - 18*s13^3)*s23 +
            (-72*s12^2 - 117*s12*s13 - 45*s13^2)*s23^2 + (-36*s12 - 27*s13)*
             s23^3) + p1q^5*p2q*((36*s12^2 + 36*s12*s13)*s23^2 +
            (54*s12 + 18*s13)*s23^3 + 18*s23^4) + p1q*p2q^5*
           (36*s12^2*s13^2 + 36*s12*s13^3 + (-72*s12^3 - 126*s12^2*s13 +
              18*s13^3)*s23 + (-108*s12^2 - 108*s12*s13)*s23^2 +
            (-9*s12 + 9*s13)*s23^3 + 27*s23^4) + p1q^2*p2q^4*
           (72*s12^2*s13^2 + 72*s12*s13^3 + (-108*s12^3 - 234*s12^2*s13 -
              36*s12*s13^2 + 18*s13^3)*s23 + (-162*s12^2 - 270*s12*s13 -
              72*s13^2)*s23^2 + (-18*s12 - 54*s13)*s23^3 + 36*s23^4) +
          p1q^4*p2q^2*((-36*s12^3 - 108*s12^2*s13 - 72*s12*s13^2)*s23 +
            (9*s12^2 - 54*s12*s13 - 27*s13^2)*s23^2 + (99*s12 + 27*s13)*
             s23^3 + 54*s23^4) + p1q^3*p2q^3*(36*s12^2*s13^2 + 36*s12*s13^3 +
            (-72*s12^3 - 207*s12^2*s13 - 90*s12*s13^2 + 9*s13^3)*s23 +
            (-54*s12^2 - 189*s12*s13 - 63*s13^2)*s23^2 + 90*s12*s23^3 +
            72*s23^4) + p3q^5*(p2q*((-90*s12^3 - 198*s12^2*s13 -
                126*s12*s13^2 - 18*s13^3)*s23 + (-153*s12^2 - 198*s12*s13 -
                45*s13^2)*s23^2 + (-63*s12 - 27*s13)*s23^3) +
            p1q*(36*s12^4 + 36*s12^3*s13 + (-108*s12^2*s13 - 72*s12*s13^2)*
               s23 + (-36*s12^2 - 72*s12*s13)*s23^2 + (9*s12 + 9*s13)*s23^3 +
              9*s23^4)) + p3q^4*(p2q^2*((-180*s12^3 - 414*s12^2*s13 -
                288*s12*s13^2 - 54*s13^3)*s23 + (-324*s12^2 - 459*s12*s13 -
                135*s13^2)*s23^2 + (-144*s12 - 81*s13)*s23^3) +
            p1q^2*(72*s12^4 + 72*s12^3*s13 + (-180*s12^2*s13 - 108*s12*s13^2)*
               s23 + (-54*s12^2 - 90*s12*s13)*s23^2 + (36*s12 + 18*s13)*s23^
                3 + 18*s23^4) + p1q*p2q*(108*s12^4 + 36*s12^3*s13 -
              72*s12^2*s13^2 + (-432*s12^2*s13 - 252*s12*s13^2)*s23 +
              (-126*s12^2 - 270*s12*s13)*s23^2 + (27*s12 + 45*s13)*s23^3 +
              45*s23^4)) + p3q^3*(p2q^3*((-216*s12^3 - 504*s12^2*s13 -
                360*s12*s13^2 - 72*s13^3)*s23 + (-396*s12^2 - 576*s12*s13 -
                180*s13^2)*s23^2 + (-180*s12 - 108*s13)*s23^3) +
            p1q^3*(36*s12^4 + 36*s12^3*s13 + (-81*s12^3 - 198*s12^2*s13 -
                81*s12*s13^2)*s23 + (-99*s12^2 - 63*s12*s13)*s23^2 +
              (36*s12 + 18*s13)*s23^3 + 18*s23^4) + p1q^2*p2q*
             (144*s12^4 - 144*s12^2*s13^2 + (-54*s12^3 - 684*s12^2*s13 -
                342*s12*s13^2)*s23 + (-198*s12^2 - 360*s12*s13 - 18*s13^2)*
               s23^2 + (54*s12 + 36*s13)*s23^3 + 54*s23^4) +
            p1q*p2q^2*(108*s12^4 - 108*s12^3*s13 - 180*s12^2*s13^2 +
              36*s12*s13^3 + (-90*s12^3 - 828*s12^2*s13 - 378*s12*s13^2)*
               s23 + (-288*s12^2 - 522*s12*s13 - 18*s13^2)*s23^2 +
              (-18*s12 + 54*s13)*s23^3 + 72*s23^4)) +
          p3q^2*(p2q^4*((-198*s12^3 - 468*s12^2*s13 - 342*s12*s13^2 -
                72*s13^3)*s23 + (-369*s12^2 - 549*s12*s13 - 180*s13^2)*s23^
                2 + (-171*s12 - 108*s13)*s23^3) +
            p1q^4*((-72*s12^3 - 108*s12^2*s13 - 36*s12*s13^2)*s23 +
              (-45*s12^2 - 18*s12*s13 - 9*s13^2)*s23^2 + (45*s12 + 9*s13)*s23^
                3 + 18*s23^4) + p1q*p2q^3*(36*s12^4 - 180*s12^3*s13 -
              108*s12^2*s13^2 + 108*s12*s13^3 + (-252*s12^3 - 918*s12^2*s13 -
                288*s12*s13^2 + 18*s13^3)*s23 + (-450*s12^2 - 630*s12*s13 -
                36*s13^2)*s23^2 + (-90*s12 + 18*s13)*s23^3 + 72*s23^4) +
            p1q^3*p2q*(36*s12^4 - 36*s12^3*s13 - 72*s12^2*s13^2 +
              (-162*s12^3 - 459*s12^2*s13 - 180*s12*s13^2 + 9*s13^3)*s23 +
              (-108*s12^2 - 135*s12*s13 - 27*s13^2)*s23^2 + (162*s12 +
                36*s13)*s23^3 + 72*s23^4) + p1q^2*p2q^2*(72*s12^4 -
              216*s12^3*s13 - 216*s12^2*s13^2 + 72*s12*s13^3 +
              (-216*s12^3 - 1062*s12^2*s13 - 396*s12*s13^2 + 18*s13^3)*s23 +
              (-360*s12^2 - 648*s12*s13 - 72*s13^2)*s23^2 + 18*s12*s23^3 +
              90*s23^4)) + p3q*(p2q^5*((-126*s12^3 - 306*s12^2*s13 -
                234*s12*s13^2 - 54*s13^3)*s23 + (-243*s12^2 - 378*s12*s13 -
                135*s13^2)*s23^2 + (-117*s12 - 81*s13)*s23^3) +
            p1q^5*((36*s12^2 + 36*s12*s13)*s23^2 + (54*s12 + 18*s13)*s23^3 +
              18*s23^4) + p1q*p2q^4*(-72*s12^3*s13 + 36*s12^2*s13^2 +
              108*s12*s13^3 + (-234*s12^3 - 540*s12^2*s13 - 90*s12*s13^2 +
                36*s13^3)*s23 + (-360*s12^2 - 414*s12*s13 - 18*s13^2)*s23^2 +
              (-63*s12 + 9*s13)*s23^3 + 63*s23^4) + p1q^4*p2q*
             ((-36*s12^3 - 72*s12^2*s13 - 36*s12*s13^2)*s23 +
              (108*s12^2 + 72*s12*s13 - 36*s13^2)*s23^2 + (216*s12 + 36*s13)*
               s23^3 + 72*s23^4) + p1q^2*p2q^3*(-144*s12^3*s13 +
              144*s12*s13^3 + (-270*s12^3 - 792*s12^2*s13 - 198*s12*s13^2 +
                36*s13^3)*s23 + (-378*s12^2 - 648*s12*s13 - 126*s13^2)*s23^
                2 + (-18*s12 - 72*s13)*s23^3 + 90*s23^4) +
            p1q^3*p2q^2*(-72*s12^3*s13 - 36*s12^2*s13^2 + 36*s12*s13^3 +
              (-153*s12^3 - 468*s12^2*s13 - 189*s12*s13^2 + 18*s13^3)*s23 +
              (-63*s12^2 - 261*s12*s13 - 90*s13^2)*s23^2 + (216*s12 + 18*s13)*
               s23^3 + 126*s23^4)))*Log(s23/(s12 + s13 + s23)))/
        (p1q*p2q^5*(8*s12^2 + 8*s12*s13)*s23^2 + p1q*p3q^5*
          (8*s12^2 + 8*s12*s13)*s23^2 - 8*p1q^4*p2q^2*s12*s23^3 +
         p1q^3*p2q^3*((8*s12^2 + 8*s12*s13)*s23^2 - 16*s12*s23^3) +
         p1q^2*p2q^4*((16*s12^2 + 16*s12*s13)*s23^2 - 8*s12*s23^3) +
         p3q^2*(p1q*p2q^3*(80*s12^2 + 80*s12*s13)*s23^2 - 8*p1q^4*s12*s23^3 +
           p1q^3*p2q*((24*s12^2 + 24*s12*s13)*s23^2 - 48*s12*s23^3) +
           p1q^2*p2q^2*((96*s12^2 + 96*s12*s13)*s23^2 - 48*s12*s23^3)) +
         p3q*(p1q*p2q^4*(40*s12^2 + 40*s12*s13)*s23^2 - 16*p1q^4*p2q*s12*
            s23^3 + p1q^3*p2q^2*((24*s12^2 + 24*s12*s13)*s23^2 -
             48*s12*s23^3) + p1q^2*p2q^3*((64*s12^2 + 64*s12*s13)*s23^2 -
             32*s12*s23^3)) + p3q^3*(p1q*p2q^2*(80*s12^2 + 80*s12*s13)*
            s23^2 + p1q^2*p2q*((64*s12^2 + 64*s12*s13)*s23^2 -
             32*s12*s23^3) + p1q^3*((8*s12^2 + 8*s12*s13)*s23^2 -
             16*s12*s23^3)) + p3q^4*(p1q*p2q*(40*s12^2 + 40*s12*s13)*s23^2 +
           p1q^2*((16*s12^2 + 16*s12*s13)*s23^2 - 8*s12*s23^3)))) +
     Log(p2q/(p1q + p2q + p3q))*
      ((p1q*p2q^3*((-8*s12^2 - s13^2)*s23 - 2*s13*s23^2) +
         p1q^2*p2q^2*((-16*s12^2 + 2*s12*s13)*s23 + 2*s12*s23^2 + 2*s23^3) +
         p1q^3*p2q*((-8*s12^2 + 2*s12*s13 + s13^2)*s23 + (2*s12 + 2*s13)*
            s23^2 + 2*s23^3) + p3q^3*(p2q*(-18*s12^3 - 54*s12^2*s13 -
             36*s12*s13^2 + (-54*s12^2 - 72*s12*s13)*s23 - 36*s12*s23^2) +
           p1q*(-18*s12^3 - 18*s12^2*s13 + (-28*s12^2 + s13^2)*s23 -
             2*s12*s23^2)) + p3q*(p2q^3*(-18*s12^2*s13 - 18*s12*s13^2 -
             18*s12*s13*s23) + p1q^3*((10*s12^2 + 20*s12*s13 + s13^2)*s23 +
             (20*s12 + 2*s13)*s23^2 + 2*s23^3) + p1q^2*p2q*(-54*s12^2*s13 -
             54*s12*s13^2 + (-34*s12^2 - 50*s12*s13 + 2*s13^2)*s23 +
             (2*s12 + 2*s13)*s23^2 + 4*s23^3) + p1q*p2q^2*(-72*s12^2*s13 -
             72*s12*s13^2 + (-40*s12^2 - 82*s12*s13 + 3*s13^2)*s23 +
             (-12*s12 + 4*s13)*s23^2 + 4*s23^3)) +
         p3q^2*(p2q^2*(-18*s12^3 - 72*s12^2*s13 - 54*s12*s13^2 +
             (-54*s12^2 - 90*s12*s13)*s23 - 36*s12*s23^2) +
           p1q^2*(-18*s12^3 - 18*s12^2*s13 + (-18*s12^2 + 20*s12*s13 + 2*
                s13^2)*s23 + (18*s12 + 2*s13)*s23^2 + 2*s23^3) +
           p1q*p2q*(-54*s12^2*s13 - 54*s12*s13^2 + (-42*s12^2 - 64*s12*s13 +
               5*s13^2)*s23 + (-14*s12 + 6*s13)*s23^2 + 4*s23^3)))/
        (4*p1q^3*p2q*s12*s13*s23 + 8*p1q^2*p2q^2*s12*s13*s23 +
         4*p1q*p2q^3*s12*s13*s23 + 4*p1q*p3q^3*s12*s13*s23 +
         p3q^2*(8*p1q^2*s12*s13*s23 + 12*p1q*p2q*s12*s13*s23) +
         p3q*(4*p1q^3*s12*s13*s23 + 16*p1q^2*p2q*s12*s13*s23 +
           12*p1q*p2q^2*s12*s13*s23)) +
       ((p3q^4*((s12^3 + s12^2*s13)*s23 + s12^2*s23^2) +
          p2q^4*(18*s12^2*s13^2 + 36*s12*s13^3 + 18*s13^4 +
            (18*s12^2*s13 + 73*s12*s13^2 + 55*s13^3)*s23 +
            (37*s12*s13 + 56*s13^2)*s23^2 + 19*s13*s23^3) +
          p1q^4*((2*s12*s13^2 + 2*s13^3)*s23 + (3*s12*s13 + 5*s13^2)*s23^2 +
            (2*s12 + 5*s13)*s23^3 + 2*s23^4) + p1q*p2q^3*(18*s12^2*s13^2 +
            36*s12*s13^3 + 18*s13^4 + (20*s12^2*s13 + 82*s12*s13^2 +
              62*s13^3)*s23 + (2*s12^2 + 50*s12*s13 + 72*s13^2)*s23^2 +
            (5*s12 + 31*s13)*s23^3 + 3*s23^4) + p1q^3*p2q*
           ((7*s12*s13^2 + 7*s13^3)*s23 + (8*s12*s13 + 15*s13^2)*s23^2 +
            (4*s12 + 12*s13)*s23^3 + 4*s23^4) + p1q^2*p2q^2*
           ((2*s12^2*s13 + 14*s12*s13^2 + 12*s13^3)*s23 +
            (2*s12^2 + 18*s12*s13 + 26*s13^2)*s23^2 + (7*s12 + 19*s13)*
             s23^3 + 5*s23^4) + p3q^3*(p1q*((-2*s12^2*s13 - 2*s12*s13^2)*
               s23 + (-4*s12^2 - 6*s12*s13)*s23^2 - 4*s12*s23^3) +
            p2q*(-18*s12^3*s13 - 36*s12^2*s13^2 - 18*s12*s13^3 +
              (-38*s12^2*s13 - 38*s12*s13^2)*s23 + (-s12^2 - 21*s12*s13)*s23^
                2 - s12*s23^3)) + p3q*(p2q^3*(-18*s12^3*s13 -
              36*s12^2*s13^2 - 18*s12*s13^3 + (-38*s12^2*s13 - 38*s12*s13^2)*
               s23 + (-s12^2 - 21*s12*s13)*s23^2 - s12*s23^3) +
            p1q*p2q^2*((-2*s12^3 - 12*s12^2*s13 - 10*s12*s13^2)*s23 +
              (-8*s12^2 - 18*s12*s13 - 2*s13^2)*s23^2 + (-6*s12 - 2*s13)*s23^
                3) + p1q^2*p2q*((-8*s12^2*s13 - 8*s12*s13^2)*s23 +
              (-6*s12^2 - 16*s12*s13 - 2*s13^2)*s23^2 - 4*s12*s23^3 +
              2*s23^4) + p1q^3*((-3*s12^2*s13 - 3*s12*s13^2)*s23 +
              (-4*s12^2 - 7*s12*s13)*s23^2 + (-2*s12 + 2*s13)*s23^3 +
              2*s23^4)) + p3q^2*(p2q^2*(18*s12^2*s13^2 + 36*s12*s13^3 +
              18*s13^4 + (s12^3 + 19*s12^2*s13 + 73*s12*s13^2 + 55*s13^3)*
               s23 + (s12^2 + 37*s12*s13 + 56*s13^2)*s23^2 + 19*s13*s23^3) +
            p1q^2*((2*s12^3 + 4*s12^2*s13 + 4*s12*s13^2 + 2*s13^3)*s23 +
              (4*s12*s13 + 6*s13^2)*s23^2 + (s12 + 7*s13)*s23^3 + 3*s23^4) +
            p1q*p2q*(18*s12^2*s13^2 + 36*s12*s13^3 + 18*s13^4 +
              (2*s12^3 + 20*s12^2*s13 + 74*s12*s13^2 + 56*s13^3)*s23 +
              (2*s12^2 + 40*s12*s13 + 60*s13^2)*s23^2 + (3*s12 + 25*s13)*s23^
                3 + 3*s23^4)))*Log((p1q + p2q)/(p1q + p2q + p3q)))/
        (8*p1q*p3q^3*s12^2*s13*s23 + p1q^3*p2q*(-24*s12*s13^2*s23 -
           24*s12*s13*s23^2) + p1q^2*p2q^2*(-24*s12*s13^2*s23 -
           24*s12*s13*s23^2) + p1q^4*(-8*s12*s13^2*s23 - 8*s12*s13*s23^2) +
         p1q*p2q^3*(-8*s12*s13^2*s23 - 8*s12*s13*s23^2) +
         p3q*(p1q^2*p2q*((16*s12^2*s13 - 32*s12*s13^2)*s23 -
             32*s12*s13*s23^2) + p1q^3*((8*s12^2*s13 - 16*s12*s13^2)*s23 -
             16*s12*s13*s23^2) + p1q*p2q^2*((8*s12^2*s13 - 16*s12*s13^2)*
              s23 - 16*s12*s13*s23^2)) +
         p3q^2*(p1q^2*((16*s12^2*s13 - 8*s12*s13^2)*s23 - 8*s12*s13*s23^2) +
           p1q*p2q*((16*s12^2*s13 - 8*s12*s13^2)*s23 - 8*s12*s13*s23^2))) +
       ((p2q^2*p3q*(9*s12^2 + 18*s12*s13 + 9*s13^2 + (18*s12 + 18*s13)*s23 +
            9*s23^2) + p3q^3*(9*s12^2 + 18*s12*s13 + 9*s13^2 +
            (18*s12 + 18*s13)*s23 + 9*s23^2))*Log(p3q/(p1q + p2q + p3q)))/
        (4*p1q^3*s13*s23 + 8*p1q^2*p2q*s13*s23 + 4*p1q*p2q^2*s13*s23 +
         4*p1q*p3q^2*s13*s23 + p3q*(8*p1q^2*s13*s23 + 8*p1q*p2q*s13*s23)) +
       ((p2q^5*(-9*s12^2*s13^2 - 9*s12*s13^3 + (-10*s12*s13^2 - s13^3)*s23 -
            s13^2*s23^2) + p1q^5*((9*s12^3 + 18*s12^2*s13 + 9*s12*s13^2)*
             s23 + (18*s12^2 + 18*s12*s13)*s23^2 + 9*s12*s23^3) +
          p3q^5*(18*s12^4 + 45*s12^3*s13 + 27*s12^2*s13^2 +
            (71*s12^3 + 116*s12^2*s13 + 36*s12*s13^2)*s23 +
            (88*s12^2 + 71*s12*s13)*s23^2 + 35*s12*s23^3) +
          p1q*p2q^4*(-18*s12^2*s13^2 - 18*s12*s13^3 +
            (20*s12^2*s13 + 2*s12*s13^2)*s23 + (24*s12*s13 + 4*s13^2)*s23^2 +
            4*s13*s23^3) + p1q^2*p2q^3*(-18*s12^2*s13^2 - 18*s12*s13^3 +
            (-2*s12^3 + 32*s12^2*s13 + 14*s12*s13^2 - 2*s13^3)*s23 +
            (-15*s12^2 + 23*s12*s13)*s23^2 + (-16*s12 - s13)*s23^3 -
            3*s23^4) + p1q^4*p2q*(9*s12^3*s13 - 9*s12*s13^3 +
            (16*s12^3 + 43*s12^2*s13 + 9*s12*s13^2)*s23 +
            (22*s12^2 + 24*s12*s13)*s23^2 + (4*s12 - 2*s13)*s23^3 -
            2*s23^4) + p1q^3*p2q^2*(-27*s12^2*s13^2 - 27*s12*s13^3 +
            (12*s12^2*s13 - 15*s12*s13^2)*s23 + (-18*s12^2 - 2*s12*s13 +
              4*s13^2)*s23^2 + (-20*s12 + 2*s13)*s23^3 - 2*s23^4) +
          p3q^4*(p2q*(18*s12^4 + 36*s12^3*s13 - 9*s12^2*s13^2 -
              27*s12*s13^3 + (71*s12^3 + 91*s12^2*s13 - 7*s12*s13^2)*s23 +
              (88*s12^2 + 56*s12*s13 + s13^2)*s23^2 + (35*s12 + s13)*s23^3) +
            p1q*(54*s12^3*s13 + 54*s12^2*s13^2 + (91*s12^3 + 242*s12^2*s13 +
                97*s12*s13^2)*s23 + (171*s12^2 + 175*s12*s13 - 2*s13^2)*s23^
                2 + (77*s12 - 5*s13)*s23^3 - 3*s23^4)) +
          p3q^3*(p2q^2*(18*s12^4 + 36*s12^3*s13 - 18*s12^2*s13^2 -
              36*s12*s13^3 + (71*s12^3 + 91*s12^2*s13 - 17*s12*s13^2 - s13^3)*
               s23 + (88*s12^2 + 56*s12*s13)*s23^2 + (35*s12 + s13)*s23^3) +
            p1q^2*(-36*s12^4 + 18*s12^3*s13 + 54*s12^2*s13^2 +
              (60*s12^3 + 292*s12^2*s13 + 142*s12*s13^2)*s23 +
              (199*s12^2 + 243*s12*s13 - 2*s13^2)*s23^2 + (98*s12 - 7*s13)*
               s23^3 - 5*s23^4) + p1q*p2q*(18*s12^4 + 126*s12^3*s13 +
              72*s12^2*s13^2 - 36*s12*s13^3 + (145*s12^3 + 342*s12^2*s13 +
                73*s12*s13^2 + 2*s13^3)*s23 + (209*s12^2 + 193*s12*s13 +
                6*s13^2)*s23^2 + (79*s12 + s13)*s23^3 - 3*s23^4)) +
          p3q^2*(p2q^3*(18*s12^4 + 36*s12^3*s13 - 18*s12^2*s13^2 -
              36*s12*s13^3 + (71*s12^3 + 91*s12^2*s13 - 17*s12*s13^2 - s13^3)*
               s23 + (88*s12^2 + 56*s12*s13)*s23^2 + (35*s12 + s13)*s23^3) +
            p1q^2*p2q*(108*s12^3*s13 + 54*s12^2*s13^2 - 54*s12*s13^3 +
              (132*s12^3 + 372*s12^2*s13 + 78*s12*s13^2)*s23 +
              (201*s12^2 + 205*s12*s13 + 4*s13^2)*s23^2 + (62*s12 - 3*s13)*
               s23^3 - 7*s23^4) + p1q^3*(-27*s12^4 + 9*s12^3*s13 +
              36*s12^2*s13^2 + (56*s12^3 + 245*s12^2*s13 + 126*s12*s13^2)*
               s23 + (165*s12^2 + 208*s12*s13)*s23^2 + (78*s12 - 4*s13)*s23^
                3 - 4*s23^4) + p1q*p2q^2*(18*s12^4 + 72*s12^3*s13 -
              18*s12^2*s13^2 - 72*s12*s13^3 + (79*s12^3 + 152*s12^2*s13 -
                35*s12*s13^2)*s23 + (77*s12^2 + 59*s12*s13 + 6*s13^2)*s23^2 +
              (13*s12 + 3*s13)*s23^3 - 3*s23^4)) +
          p3q*(p2q^4*(-9*s12^3*s13 - 45*s12^2*s13^2 - 36*s12*s13^3 +
              (-25*s12^2*s13 - 53*s12*s13^2 - s13^3)*s23 - 15*s12*s13*s23^2 +
              s13*s23^3) + p1q^3*p2q*(54*s12^3*s13 + 18*s12^2*s13^2 -
              36*s12*s13^3 + (74*s12^3 + 221*s12^2*s13 + 57*s12*s13^2)*s23 +
              (102*s12^2 + 125*s12*s13 + 4*s13^2)*s23^2 + (22*s12 - 2*s13)*
               s23^3 - 6*s23^4) + p1q^2*p2q^2*(18*s12^3*s13 -
              54*s12^2*s13^2 - 72*s12*s13^3 + (16*s12^3 + 76*s12^2*s13 -
                32*s12*s13^2 - 2*s13^3)*s23 + (-13*s12^2 + 21*s12*s13 +
                6*s13^2)*s23^2 + (-34*s12 + 3*s13)*s23^3 - 5*s23^4) +
            p1q*p2q^3*(18*s12^4 + 54*s12^3*s13 - 36*s12*s13^3 +
              (61*s12^3 + 144*s12^2*s13 + 27*s12*s13^2 - 2*s13^3)*s23 +
              (57*s12^2 + 83*s12*s13 + 2*s13^2)*s23^2 + (11*s12 + s13)*s23^
                3 - 3*s23^4) + p1q^4*(-9*s12^4 + 9*s12^2*s13^2 +
              (25*s12^3 + 97*s12^2*s13 + 54*s12*s13^2)*s23 +
              (67*s12^2 + 87*s12*s13)*s23^2 + (31*s12 - 2*s13)*s23^3 -
              2*s23^4)))*Log((p1q + p3q)/(p1q + p2q + p3q)))/
        (-8*p1q*p2q^4*s12*s13^2*s23 + p1q^4*p2q*(8*s12^2*s13*s23 +
           8*s12*s13*s23^2) + p1q*p3q^4*(8*s12^2*s13*s23 + 8*s12*s13*s23^2) +
         p1q^2*p2q^3*((8*s12^2*s13 - 16*s12*s13^2)*s23 + 8*s12*s13*s23^2) +
         p1q^3*p2q^2*((16*s12^2*s13 - 8*s12*s13^2)*s23 + 16*s12*s13*s23^2) +
         p3q^3*(p1q^2*(24*s12^2*s13*s23 + 24*s12*s13*s23^2) +
           p1q*p2q*((24*s12^2*s13 - 8*s12*s13^2)*s23 + 24*s12*s13*s23^2)) +
         p3q*(p1q^4*(8*s12^2*s13*s23 + 8*s12*s13*s23^2) +
           p1q*p2q^3*((8*s12^2*s13 - 24*s12*s13^2)*s23 + 8*s12*s13*s23^2) +
           p1q^2*p2q^2*((40*s12^2*s13 - 32*s12*s13^2)*s23 +
             40*s12*s13*s23^2) + p1q^3*p2q*((40*s12^2*s13 - 8*s12*s13^2)*
              s23 + 40*s12*s13*s23^2)) +
         p3q^2*(p1q^3*(24*s12^2*s13*s23 + 24*s12*s13*s23^2) +
           p1q*p2q^2*((24*s12^2*s13 - 24*s12*s13^2)*s23 + 24*s12*s13*s23^2) +
           p1q^2*p2q*((56*s12^2*s13 - 16*s12*s13^2)*s23 +
             56*s12*s13*s23^2))) +
       ((p2q^6*((18*s12^2*s13 + 36*s12*s13^2 + 18*s13^3)*s23 +
            (27*s12*s13 + 27*s13^2)*s23^2 + 9*s13*s23^3) +
          p3q^6*((18*s12^2*s13 + 36*s12*s13^2 + 18*s13^3)*s23 +
            (9*s12^2 + 45*s12*s13 + 36*s13^2)*s23^2 + (9*s12 + 18*s13)*
             s23^3) + p1q^5*p2q*((-36*s12*s13 - 36*s13^2)*s23^2 +
            (-18*s12 - 54*s13)*s23^3 - 18*s23^4) + p1q^4*p2q^2*
           ((36*s12^2*s13 + 108*s12*s13^2 + 72*s13^3)*s23 +
            (9*s12^2 + 18*s12*s13 + 45*s13^2)*s23^2 + (-9*s12 - 45*s13)*
             s23^3 - 18*s23^4) + p1q^2*p2q^4*(-72*s12*s13^3 - 72*s13^4 +
            (108*s12^2*s13 + 180*s12*s13^2)*s23 + (90*s12*s13 + 54*s13^2)*
             s23^2 + (-18*s12 - 36*s13)*s23^3 - 18*s23^4) +
          p1q^3*p2q^3*(-36*s12*s13^3 - 36*s13^4 +
            (81*s12^2*s13 + 198*s12*s13^2 + 81*s13^3)*s23 +
            (63*s12*s13 + 99*s13^2)*s23^2 + (-18*s12 - 36*s13)*s23^3 -
            18*s23^4) + p1q*p2q^5*(-36*s12*s13^3 - 36*s13^4 +
            (72*s12^2*s13 + 108*s12*s13^2)*s23 + (72*s12*s13 + 36*s13^2)*
             s23^2 + (-9*s12 - 9*s13)*s23^3 - 9*s23^4) +
          p3q^2*(p2q^4*((126*s12^2*s13 + 252*s12*s13^2 + 126*s13^3)*s23 +
              (27*s12^2 + 243*s12*s13 + 216*s13^2)*s23^2 + (27*s12 + 90*s13)*
               s23^3) + p1q^3*p2q*(-36*s12^3*s13 + 36*s12^2*s13^2 +
              72*s12*s13^3 + (-18*s12^3 + 189*s12^2*s13 + 468*s12*s13^2 +
                153*s13^3)*s23 + (90*s12^2 + 261*s12*s13 + 63*s13^2)*s23^2 +
              (-18*s12 - 216*s13)*s23^3 - 126*s23^4) + p1q^2*p2q^2*
             (-72*s12^3*s13 + 216*s12^2*s13^2 + 216*s12*s13^3 - 72*s13^4 +
              (-18*s12^3 + 396*s12^2*s13 + 1062*s12*s13^2 + 216*s13^3)*s23 +
              (72*s12^2 + 648*s12*s13 + 360*s13^2)*s23^2 - 18*s13*s23^3 -
              90*s23^4) + p1q^4*((72*s12^2*s13 + 108*s12*s13^2 + 36*s13^3)*
               s23 + (27*s12^2 + 54*s12*s13 - 9*s13^2)*s23^2 +
              (-27*s12 - 99*s13)*s23^3 - 54*s23^4) + p1q*p2q^3*
             (-36*s12^3*s13 + 180*s12^2*s13^2 + 108*s12*s13^3 - 108*s13^4 +
              (378*s12^2*s13 + 828*s12*s13^2 + 90*s13^3)*s23 +
              (54*s12^2 + 594*s12*s13 + 324*s13^2)*s23^2 + (18*s12 + 90*s13)*
               s23^3 - 36*s23^4)) + p3q^3*
           (p2q^3*((144*s12^2*s13 + 288*s12*s13^2 + 144*s13^3)*s23 +
              (36*s12^2 + 288*s12*s13 + 252*s13^2)*s23^2 + (36*s12 + 108*s13)*
               s23^3) + p1q^2*p2q*(-144*s12^3*s13 + 144*s12*s13^3 +
              (-36*s12^3 + 198*s12^2*s13 + 792*s12*s13^2 + 270*s13^3)*s23 +
              (126*s12^2 + 648*s12*s13 + 378*s13^2)*s23^2 + (72*s12 + 18*s13)*
               s23^3 - 90*s23^4) + p1q^3*(-36*s12^3*s13 - 36*s12^2*s13^2 +
              (-9*s12^3 + 90*s12^2*s13 + 207*s12*s13^2 + 72*s13^3)*s23 +
              (63*s12^2 + 189*s12*s13 + 54*s13^2)*s23^2 - 90*s13*s23^3 -
              72*s23^4) + p1q*p2q^2*(-108*s12^3*s13 + 108*s12^2*s13^2 +
              180*s12*s13^3 - 36*s13^4 + (-18*s12^3 + 288*s12^2*s13 +
                918*s12*s13^2 + 252*s13^3)*s23 + (72*s12^2 + 702*s12*s13 +
                486*s13^2)*s23^2 + (54*s12 + 162*s13)*s23^3 - 36*s23^4)) +
          p3q^4*(p2q^2*((126*s12^2*s13 + 252*s12*s13^2 + 126*s13^3)*s23 +
              (36*s12^2 + 261*s12*s13 + 225*s13^2)*s23^2 + (36*s12 + 99*s13)*
               s23^3) + p1q^2*(-72*s12^3*s13 - 72*s12^2*s13^2 +
              (-18*s12^3 + 36*s12^2*s13 + 234*s12*s13^2 + 108*s13^3)*s23 +
              (72*s12^2 + 270*s12*s13 + 162*s13^2)*s23^2 + (54*s12 + 18*s13)*
               s23^3 - 36*s23^4) + p1q*p2q*(-108*s12^3*s13 - 36*s12^2*s13^2 +
              72*s12*s13^3 + (-36*s12^3 + 90*s12^2*s13 + 540*s12*s13^2 +
                234*s13^3)*s23 + (54*s12^2 + 486*s12*s13 + 396*s13^2)*s23^2 +
              (63*s12 + 135*s13)*s23^3 - 27*s23^4)) +
          p3q*(p2q^5*((72*s12^2*s13 + 144*s12*s13^2 + 72*s13^3)*s23 +
              (9*s12^2 + 126*s12*s13 + 117*s13^2)*s23^2 + (9*s12 + 45*s13)*
               s23^3) + p1q^4*p2q*((36*s12^2*s13 + 72*s12*s13^2 + 36*s13^3)*
               s23 + (36*s12^2 - 72*s12*s13 - 108*s13^2)*s23^2 +
              (-36*s12 - 216*s13)*s23^3 - 72*s23^4) + p1q^3*p2q^2*
             (72*s12^2*s13^2 + 36*s12*s13^3 - 36*s13^4 + (-9*s12^3 +
                180*s12^2*s13 + 459*s12*s13^2 + 162*s13^3)*s23 +
              (27*s12^2 + 135*s12*s13 + 108*s13^2)*s23^2 + (-36*s12 -
                162*s13)*s23^3 - 72*s23^4) + p1q^2*p2q^3*(144*s12^2*s13^2 -
              144*s13^4 + (342*s12^2*s13 + 684*s12*s13^2 + 54*s13^3)*s23 +
              (18*s12^2 + 360*s12*s13 + 198*s13^2)*s23^2 + (-36*s12 - 54*s13)*
               s23^3 - 54*s23^4) + p1q*p2q^4*(72*s12^2*s13^2 - 36*s12*s13^3 -
              108*s13^4 + (252*s12^2*s13 + 432*s12*s13^2)*s23 +
              (18*s12^2 + 306*s12*s13 + 144*s13^2)*s23^2 + (-9*s12 + 9*s13)*
               s23^3 - 27*s23^4) + p1q^5*((-36*s12*s13 - 36*s13^2)*s23^2 +
              (-18*s12 - 54*s13)*s23^3 - 18*s23^4)) +
          p3q^5*(p2q*((72*s12^2*s13 + 144*s12*s13^2 + 72*s13^3)*s23 +
              (27*s12^2 + 162*s12*s13 + 135*s13^2)*s23^2 + (27*s12 + 63*s13)*
               s23^3) + p1q*(-36*s12^3*s13 - 36*s12^2*s13^2 +
              (-18*s12^3 + 126*s12*s13^2 + 72*s13^3)*s23 + (18*s12^2 +
                144*s12*s13 + 126*s13^2)*s23^2 + (27*s12 + 45*s13)*s23^3 -
              9*s23^4)))*Log((p2q + p3q)/(p1q + p2q + p3q)))/
        (p1q*p2q^5*(8*s12*s13 + 8*s13^2)*s23^2 + p1q*p3q^5*
          (8*s12*s13 + 8*s13^2)*s23^2 - 8*p1q^4*p2q^2*s13*s23^3 +
         p1q^3*p2q^3*((8*s12*s13 + 8*s13^2)*s23^2 - 16*s13*s23^3) +
         p1q^2*p2q^4*((16*s12*s13 + 16*s13^2)*s23^2 - 8*s13*s23^3) +
         p3q^2*(p1q*p2q^3*(80*s12*s13 + 80*s13^2)*s23^2 - 8*p1q^4*s13*s23^3 +
           p1q^3*p2q*((24*s12*s13 + 24*s13^2)*s23^2 - 48*s13*s23^3) +
           p1q^2*p2q^2*((96*s12*s13 + 96*s13^2)*s23^2 - 48*s13*s23^3)) +
         p3q*(p1q*p2q^4*(40*s12*s13 + 40*s13^2)*s23^2 - 16*p1q^4*p2q*s13*
            s23^3 + p1q^3*p2q^2*((24*s12*s13 + 24*s13^2)*s23^2 -
             48*s13*s23^3) + p1q^2*p2q^3*((64*s12*s13 + 64*s13^2)*s23^2 -
             32*s13*s23^3)) + p3q^3*(p1q*p2q^2*(80*s12*s13 + 80*s13^2)*
            s23^2 + p1q^2*p2q*((64*s12*s13 + 64*s13^2)*s23^2 -
             32*s13*s23^3) + p1q^3*((8*s12*s13 + 8*s13^2)*s23^2 -
             16*s13*s23^3)) + p3q^4*(p1q*p2q*(40*s12*s13 + 40*s13^2)*s23^2 +
           p1q^2*((16*s12*s13 + 16*s13^2)*s23^2 - 8*s13*s23^3))) +
       ((p2q^5*((-9*s12^2*s13 - 9*s12*s13^2)*s23 - 9*s12*s13*s23^2) +
          p3q^5*((-9*s12^3 - 27*s12^2*s13 - 18*s12*s13^2)*s23 +
            (-27*s12^2 - 36*s12*s13)*s23^2 - 18*s12*s23^3) +
          p1q^4*p2q*((-18*s12^2*s13 - 18*s12*s13^2)*s23 +
            (-9*s12^2 - 27*s12*s13)*s23^2 - 9*s12*s23^3) +
          p1q^3*p2q^2*(18*s12*s13^3 + (-45*s12^2*s13 - 9*s12*s13^2)*s23 +
            (-8*s12^2 - 27*s12*s13 + s13^2)*s23^2 + (2*s12 + 2*s13)*s23^3 +
            2*s23^4) + p1q^2*p2q^3*(36*s12*s13^3 +
            (-54*s12^2*s13 + 18*s12*s13^2)*s23 + (-2*s12*s13 + 2*s13^2)*
             s23^2 + (18*s12 + 2*s13)*s23^3 + 2*s23^4) +
          p1q*p2q^4*(18*s12*s13^3 - 36*s12^2*s13*s23 +
            (s12^2 - 7*s12*s13 + 3*s13^2)*s23^2 + (11*s12 + 4*s13)*s23^3 +
            2*s23^4) + p3q^4*(p2q*((-18*s12^3 - 63*s12^2*s13 - 45*s12*s13^2)*
               s23 + (-54*s12^2 - 81*s12*s13)*s23^2 - 36*s12*s23^3) +
            p1q*(18*s12^3*s13 + (18*s12^3 - 18*s12^2*s13 - 36*s12*s13^2)*
               s23 + (-15*s12^2 - 61*s12*s13 + s13^2)*s23^2 +
              (-23*s12 + 2*s13)*s23^3 + 2*s23^4)) +
          p3q^3*(p2q^2*((-18*s12^3 - 72*s12^2*s13 - 54*s12*s13^2)*s23 +
              (-54*s12^2 - 90*s12*s13)*s23^2 - 36*s12*s23^3) +
            p1q^2*(36*s12^3*s13 + (18*s12^3 - 36*s12^2*s13 - 54*s12*s13^2)*
               s23 + (-34*s12^2 - 92*s12*s13)*s23^2 - 34*s12*s23^3 +
              2*s23^4) + p1q*p2q*(36*s12^3*s13 - 36*s12^2*s13^2 +
              (18*s12^3 - 108*s12^2*s13 - 90*s12*s13^2)*s23 +
              (-66*s12^2 - 144*s12*s13 + 2*s13^2)*s23^2 + (-48*s12 + 2*s13)*
               s23^3 + 4*s23^4)) + p3q^2*(p2q^3*((-18*s12^3 - 72*s12^2*s13 -
                54*s12*s13^2)*s23 + (-54*s12^2 - 90*s12*s13)*s23^2 -
              36*s12*s23^3) + p1q^3*(18*s12^3*s13 + (9*s12^3 - 27*s12^2*s13 -
                36*s12*s13^2)*s23 + (-17*s12^2 - 54*s12*s13 + s13^2)*s23^2 +
              (-16*s12 + 2*s13)*s23^3 + 2*s23^4) + p1q*p2q^2*
             (18*s12^3*s13 - 72*s12^2*s13^2 + 18*s12*s13^3 +
              (-162*s12^2*s13 - 54*s12*s13^2)*s23 + (-68*s12^2 - 94*s12*s13 +
                4*s13^2)*s23^2 + (-16*s12 + 2*s13)*s23^3 + 4*s23^4) +
            p1q^2*p2q*(36*s12^3*s13 - 72*s12^2*s13^2 + (18*s12^3 -
                162*s12^2*s13 - 108*s12*s13^2)*s23 + (-68*s12^2 -
                150*s12*s13 + 2*s13^2)*s23^2 + (-32*s12 + 2*s13)*s23^3 +
              6*s23^4)) + p3q*(p2q^4*((-9*s12^3 - 45*s12^2*s13 -
                36*s12*s13^2)*s23 + (-27*s12^2 - 54*s12*s13)*s23^2 -
              18*s12*s23^3) + p1q^4*((-18*s12^2*s13 - 18*s12*s13^2)*s23 +
              (-9*s12^2 - 27*s12*s13)*s23^2 - 9*s12*s23^3) +
            p1q^3*p2q*(-36*s12^2*s13^2 + (9*s12^3 - 108*s12^2*s13 -
                81*s12*s13^2)*s23 + (-25*s12^2 - 99*s12*s13 + 2*s13^2)*s23^
                2 + (-14*s12 + 4*s13)*s23^3 + 4*s23^4) +
            p1q*p2q^3*(-36*s12^2*s13^2 + 36*s12*s13^3 - 108*s12^2*s13*s23 +
              (-16*s12^2 - 18*s12*s13 + 6*s13^2)*s23^2 + (20*s12 + 6*s13)*s23^
                3 + 4*s23^4) + p1q^2*p2q^2*(-72*s12^2*s13^2 + 36*s12*s13^3 +
              (-180*s12^2*s13 - 36*s12*s13^2)*s23 + (-34*s12^2 - 60*s12*s13 +
                4*s13^2)*s23^2 + (20*s12 + 4*s13)*s23^3 + 6*s23^4)))*
         Log(-s12 - s13 - s23))/(4*p1q^3*p2q^2*s12*s13*s23^2 +
         8*p1q^2*p2q^3*s12*s13*s23^2 + 4*p1q*p2q^4*s12*s13*s23^2 +
         4*p1q*p3q^4*s12*s13*s23^2 + p3q^3*(8*p1q^2*s12*s13*s23^2 +
           16*p1q*p2q*s12*s13*s23^2) + p3q^2*(4*p1q^3*s12*s13*s23^2 +
           24*p1q^2*p2q*s12*s13*s23^2 + 24*p1q*p2q^2*s12*s13*s23^2) +
         p3q*(8*p1q^3*p2q*s12*s13*s23^2 + 24*p1q^2*p2q^2*s12*s13*s23^2 +
           16*p1q*p2q^3*s12*s13*s23^2)) +
       ((p3q^4*(-s12^3 - s12^2*s13 - s12^2*s23) +
          p2q^4*(-(s12*s13^2) - s13^3 + (-(s12*s13) - 2*s13^2)*s23 -
            s13*s23^2) + p1q^2*p2q^2*(-2*s12^2*s13 - 14*s12*s13^2 -
            12*s13^3 + (-2*s12^2 - 18*s12*s13 - 26*s13^2)*s23 +
            (-7*s12 - 19*s13)*s23^2 - 5*s23^3) + p1q^3*p2q*
           (-7*s12*s13^2 - 7*s13^3 + (-8*s12*s13 - 15*s13^2)*s23 +
            (-4*s12 - 12*s13)*s23^2 - 4*s23^3) + p1q*p2q^3*
           (-2*s12^2*s13 - 10*s12*s13^2 - 8*s13^3 + (-2*s12^2 - 14*s12*s13 -
              18*s13^2)*s23 + (-5*s12 - 13*s13)*s23^2 - 3*s23^3) +
          p1q^4*(-2*s12*s13^2 - 2*s13^3 + (-3*s12*s13 - 5*s13^2)*s23 +
            (-2*s12 - 5*s13)*s23^2 - 2*s23^3) +
          p3q^3*(p2q*(2*s12^2*s13 + 2*s12*s13^2 + (s12^2 + 3*s12*s13)*s23 +
              s12*s23^2) + p1q*(2*s12^2*s13 + 2*s12*s13^2 + (4*s12^2 +
                6*s12*s13)*s23 + 4*s12*s23^2)) +
          p3q^2*(p2q^2*(-s12^3 - s12^2*s13 - s12*s13^2 - s13^3 +
              (-s12^2 - s12*s13 - 2*s13^2)*s23 - s13*s23^2) +
            p1q*p2q*(-2*s12^3 - 2*s12^2*s13 - 2*s12*s13^2 - 2*s13^3 +
              (-2*s12^2 - 4*s12*s13 - 6*s13^2)*s23 + (-3*s12 - 7*s13)*s23^2 -
              3*s23^3) + p1q^2*(-2*s12^3 - 4*s12^2*s13 - 4*s12*s13^2 -
              2*s13^3 + (-4*s12*s13 - 6*s13^2)*s23 + (-s12 - 7*s13)*s23^2 -
              3*s23^3)) + p3q*(p2q^3*(2*s12^2*s13 + 2*s12*s13^2 +
              (s12^2 + 3*s12*s13)*s23 + s12*s23^2) + p1q*p2q^2*
             (2*s12^3 + 12*s12^2*s13 + 10*s12*s13^2 + (8*s12^2 + 18*s12*s13 +
                2*s13^2)*s23 + (6*s12 + 2*s13)*s23^2) +
            p1q^2*p2q*(8*s12^2*s13 + 8*s12*s13^2 + (6*s12^2 + 16*s12*s13 +
                2*s13^2)*s23 + 4*s12*s23^2 - 2*s23^3) +
            p1q^3*(3*s12^2*s13 + 3*s12*s13^2 + (4*s12^2 + 7*s12*s13)*s23 +
              (2*s12 - 2*s13)*s23^2 - 2*s23^3)))*Log(s12/(s12 + s13 + s23)))/
        (8*p1q*p3q^3*s12^2*s13 + p1q^3*p2q*(-24*s12*s13^2 - 24*s12*s13*s23) +
         p1q^2*p2q^2*(-24*s12*s13^2 - 24*s12*s13*s23) +
         p1q^4*(-8*s12*s13^2 - 8*s12*s13*s23) + p1q*p2q^3*
          (-8*s12*s13^2 - 8*s12*s13*s23) +
         p3q*(p1q^2*p2q*(16*s12^2*s13 - 32*s12*s13^2 - 32*s12*s13*s23) +
           p1q^3*(8*s12^2*s13 - 16*s12*s13^2 - 16*s12*s13*s23) +
           p1q*p2q^2*(8*s12^2*s13 - 16*s12*s13^2 - 16*s12*s13*s23)) +
         p3q^2*(p1q^2*(16*s12^2*s13 - 8*s12*s13^2 - 8*s12*s13*s23) +
           p1q*p2q*(16*s12^2*s13 - 8*s12*s13^2 - 8*s12*s13*s23))) +
       ((p2q^6*((-9*s12^2*s13^2 - 9*s12*s13^3)*s23 + (-8*s12*s13^2 + s13^3)*
             s23^2 + s13^2*s23^3) + p1q*p2q^5*(36*s12*s13^4 +
            (18*s12^3*s13 - 36*s12^2*s13^2 + 18*s12*s13^3)*s23 +
            (18*s12^2*s13 + 2*s12*s13^2 + 6*s13^3)*s23^2 +
            (16*s12*s13 + 4*s13^2)*s23^3) +
          p3q^6*((9*s12^3*s13 + 9*s12^2*s13^2)*s23 + (s12^3 + 10*s12^2*s13)*
             s23^2 + (2*s12^2 + s12*s13)*s23^3 + s12*s23^4) +
          p1q^5*p2q*((36*s12^3*s13 + 36*s12^2*s13^2)*s23 +
            (9*s12^3 + 72*s12^2*s13 + 27*s12*s13^2)*s23^2 +
            (18*s12^2 + 36*s12*s13)*s23^3 + 9*s12*s23^4) +
          p1q^3*p2q^3*(-72*s12^2*s13^3 + 36*s12*s13^4 +
            (108*s12^3*s13 - 99*s12^2*s13^2 - 63*s12*s13^3)*s23 +
            (84*s12^2*s13 - 79*s12*s13^2 + 2*s13^3)*s23^2 +
            (-18*s12^2 + 6*s12*s13 - 4*s13^2)*s23^3 + (-20*s12 - 2*s13)*
             s23^4 - 2*s23^5) + p1q^4*p2q^2*(-36*s12^2*s13^3 +
            (81*s12^3*s13 - 18*s12^2*s13^2 - 63*s12*s13^3)*s23 +
            (83*s12^2*s13 - 47*s12*s13^2)*s23^2 + (-10*s12^2 + 8*s12*s13 -
              2*s13^2)*s23^3 + (-12*s12 - 2*s13)*s23^4 - 2*s23^5) +
          p1q^2*p2q^4*(-36*s12^2*s13^3 + 72*s12*s13^4 +
            (72*s12^3*s13 - 90*s12^2*s13^2 + 18*s12*s13^3)*s23 +
            (54*s12^2*s13 - 24*s12*s13^2 + 6*s13^3)*s23^2 +
            (-9*s12^2 + 19*s12*s13 - 2*s13^2)*s23^3 + (-10*s12 - 3*s13)*
             s23^4 - s23^5) + p3q^3*(p2q^3*((36*s12^3*s13 - 36*s12*s13^3)*
               s23 + (2*s12^3 + 34*s12^2*s13 - 38*s12*s13^2 + 2*s13^3)*s23^
                2 + (4*s12^2 - 4*s12*s13)*s23^3 + (2*s12 - 2*s13)*s23^4) +
            p1q^2*p2q*(-144*s12^4*s13 + 288*s12^3*s13^2 + (-36*s12^4 +
                306*s12^3*s13 + 432*s12^2*s13^2 - 54*s12*s13^3)*s23 +
              (4*s12^3 + 396*s12^2*s13 - 16*s12*s13^2)*s23^2 +
              (28*s12^2 + 64*s12*s13 - 10*s13^2)*s23^3 + (-20*s12 + 6*s13)*
               s23^4 - 8*s23^5) + p1q^3*(-108*s12^4*s13 + (-27*s12^4 +
                9*s12^3*s13 + 144*s12^2*s13^2)*s23 + (-8*s12^3 +
                173*s12^2*s13 + 52*s12*s13^2)*s23^2 + (37*s12^2 +
                80*s12*s13 - 2*s13^2)*s23^3 + 14*s12*s23^4 - 4*s23^5) +
            p1q*p2q^2*(-36*s12^4*s13 + 216*s12^3*s13^2 - 108*s12^2*s13^3 +
              (270*s12^3*s13 + 90*s12^2*s13^2 - 108*s12*s13^3)*s23 +
              (56*s12^3 + 210*s12^2*s13 - 118*s12*s13^2 + 2*s13^3)*s23^2 +
              (62*s12^2 + 16*s12*s13 - 16*s13^2)*s23^3 + 4*s12*s23^4 -
              2*s23^5)) + p3q^2*(p2q^4*((27*s12^3*s13 - 9*s12^2*s13^2 -
                36*s12*s13^3)*s23 + (s12^3 + 24*s12^2*s13 - 38*s12*s13^2 +
                2*s13^3)*s23^2 + (2*s12^2 - 5*s12*s13)*s23^3 +
              (s12 - 2*s13)*s23^4) + p1q^3*p2q*(-72*s12^4*s13 +
              252*s12^3*s13^2 + (-27*s12^4 + 423*s12^3*s13 + 486*s12^2*
                 s13^2 - 36*s12*s13^3)*s23 + (2*s12^3 + 538*s12^2*s13 +
                79*s12*s13^2 + 2*s13^3)*s23^2 + (11*s12^2 + 121*s12*s13 -
                8*s13^2)*s23^3 + (-28*s12 - 2*s13)*s23^4 - 10*s23^5) +
            p1q^2*p2q^2*(-36*s12^4*s13 + 360*s12^3*s13^2 - 252*s12^2*s13^3 +
              (558*s12^3*s13 + 144*s12^2*s13^2 - 198*s12*s13^3)*s23 +
              (56*s12^3 + 408*s12^2*s13 - 182*s12*s13^2 + 6*s13^3)*s23^2 +
              (8*s12^2 + 6*s12*s13 - 22*s13^2)*s23^3 - 56*s12*s23^4 -
              8*s23^5) + p1q^4*(-36*s12^4*s13 + (-9*s12^4 + 54*s12^3*s13 +
                99*s12^2*s13^2)*s23 + (9*s12^3 + 155*s12^2*s13 +
                52*s12*s13^2)*s23^2 + (35*s12^2 + 71*s12*s13 - 2*s13^2)*s23^
                3 + (15*s12 - 2*s13)*s23^4 - 2*s23^5) +
            p1q*p2q^3*(108*s12^3*s13^2 - 216*s12^2*s13^3 + 36*s12*s13^4 +
              (234*s12^3*s13 - 126*s12^2*s13^2 - 72*s12*s13^3)*s23 +
              (36*s12^3 + 144*s12^2*s13 - 84*s12*s13^2 + 10*s13^3)*s23^2 +
              (38*s12^2 + 30*s12*s13 - 16*s13^2)*s23^3 - 8*s13*s23^4 -
              2*s23^5)) + p3q^4*(p2q^2*((36*s12^3*s13 + 9*s12^2*s13^2 -
                27*s12*s13^3)*s23 + (2*s12^3 + 34*s12^2*s13 - 30*s12*s13^2 +
                s13^3)*s23^2 + (4*s12^2 - 4*s12*s13 - s13^2)*s23^3 +
              (2*s12 - 2*s13)*s23^4) + p1q^2*(-108*s12^4*s13 +
              (-36*s12^4 - 18*s12^3*s13 + 126*s12^2*s13^2)*s23 +
              (-34*s12^3 + 122*s12^2*s13 + 36*s12*s13^2)*s23^2 +
              (13*s12^2 + 59*s12*s13)*s23^3 + (8*s12 + 3*s13)*s23^4 -
              3*s23^5) + p1q*p2q*(-72*s12^4*s13 + 108*s12^3*s13^2 +
              (-18*s12^4 + 126*s12^3*s13 + 180*s12^2*s13^2 - 36*s12*s13^3)*
               s23 + (4*s12^3 + 178*s12^2*s13 - 26*s12*s13^2)*s23^2 +
              (28*s12^2 + 32*s12*s13 - 4*s13^2)*s23^3 + (4*s12 + 4*s13)*s23^
                4 - 2*s23^5)) + p3q*(p1q^5*((36*s12^3*s13 + 36*s12^2*s13^2)*
               s23 + (9*s12^3 + 72*s12^2*s13 + 27*s12*s13^2)*s23^2 +
              (18*s12^2 + 36*s12*s13)*s23^3 + 9*s12*s23^4) +
            p2q^5*((9*s12^3*s13 - 18*s12^2*s13^2 - 27*s12*s13^3)*s23 +
              (7*s12^2*s13 - 27*s12*s13^2 + 2*s13^3)*s23^2 + (-3*s12*s13 +
                s13^2)*s23^3 - s13*s23^4) + p1q^3*p2q^2*(144*s12^3*s13^2 -
              180*s12^2*s13^3 + (414*s12^3*s13 + 27*s12^2*s13^2 -
                207*s12*s13^3)*s23 + (10*s12^3 + 341*s12^2*s13 -
                160*s12*s13^2 + 4*s13^3)*s23^2 + (-44*s12^2 + 11*s12*s13 -
                10*s13^2)*s23^3 + (-62*s12 - 4*s13)*s23^4 - 8*s23^5) +
            p1q^2*p2q^3*(72*s12^3*s13^2 - 288*s12^2*s13^3 + 72*s12*s13^4 +
              (306*s12^3*s13 - 252*s12^2*s13^2 - 126*s12*s13^3)*s23 +
              (18*s12^3 + 188*s12^2*s13 - 154*s12*s13^2 + 12*s13^3)*s23^2 +
              (-16*s12^2 + 20*s12*s13 - 14*s13^2)*s23^3 + (-38*s12 - 6*s13)*
               s23^4 - 4*s23^5) + p1q^4*p2q*(72*s12^3*s13^2 +
              (-9*s12^4 + 243*s12^3*s13 + 225*s12^2*s13^2 - 27*s12*s13^3)*
               s23 + (9*s12^3 + 346*s12^2*s13 + 77*s12*s13^2)*s23^2 +
              (25*s12^2 + 115*s12*s13 - 4*s13^2)*s23^3 + (3*s12 - 4*s13)*s23^
                4 - 4*s23^5) + p1q*p2q^4*(-108*s12^2*s13^3 + 72*s12*s13^4 +
              (108*s12^3*s13 - 126*s12^2*s13^2 + 18*s12*s13^3)*s23 +
              (9*s12^3 + 88*s12^2*s13 + s12*s13^2 + 14*s13^3)*s23^2 +
              (9*s12^2 + 47*s12*s13)*s23^3 + (-s12 - 5*s13)*s23^4 - s23^5)) +
          p3q^5*(p2q*((27*s12^3*s13 + 18*s12^2*s13^2 - 9*s12*s13^3)*s23 +
              (2*s12^3 + 27*s12^2*s13 - 11*s12*s13^2)*s23^2 +
              (4*s12^2 - s12*s13 - s13^2)*s23^3 + (2*s12 - s13)*s23^4) +
            p1q*(-36*s12^4*s13 + (-18*s12^4 + 54*s12^2*s13^2)*s23 +
              (-25*s12^3 + 42*s12^2*s13 + 9*s12*s13^2)*s23^2 +
              (-5*s12^2 + 15*s12*s13)*s23^3 + (s12 + s13)*s23^4 - s23^5)))*
         Log(s13/(s12 + s13 + s23)))/(-8*p1q*p2q^5*s12*s13^2*s23^2 +
         p1q^4*p2q^2*(8*s12^2*s13*s23^2 + 8*s12*s13*s23^3) +
         p1q*p3q^5*(8*s12^2*s13*s23^2 + 8*s12*s13*s23^3) +
         p1q^2*p2q^4*((8*s12^2*s13 - 16*s12*s13^2)*s23^2 + 8*s12*s13*s23^3) +
         p1q^3*p2q^3*((16*s12^2*s13 - 8*s12*s13^2)*s23^2 +
           16*s12*s13*s23^3) + p3q^4*(p1q^2*(24*s12^2*s13*s23^2 +
             24*s12*s13*s23^3) + p1q*p2q*((32*s12^2*s13 - 8*s12*s13^2)*
              s23^2 + 32*s12*s13*s23^3)) +
         p3q*(p1q*p2q^4*((8*s12^2*s13 - 32*s12*s13^2)*s23^2 +
             8*s12*s13*s23^3) + p1q^4*p2q*(16*s12^2*s13*s23^2 +
             16*s12*s13*s23^3) + p1q^2*p2q^3*((48*s12^2*s13 - 48*s12*s13^2)*
              s23^2 + 48*s12*s13*s23^3) + p1q^3*p2q^2*
            ((56*s12^2*s13 - 16*s12*s13^2)*s23^2 + 56*s12*s13*s23^3)) +
         p3q^3*(p1q^3*(24*s12^2*s13*s23^2 + 24*s12*s13*s23^3) +
           p1q*p2q^2*((48*s12^2*s13 - 32*s12*s13^2)*s23^2 +
             48*s12*s13*s23^3) + p1q^2*p2q*((80*s12^2*s13 - 16*s12*s13^2)*
              s23^2 + 80*s12*s13*s23^3)) +
         p3q^2*(p1q^4*(8*s12^2*s13*s23^2 + 8*s12*s13*s23^3) +
           p1q*p2q^3*((32*s12^2*s13 - 48*s12*s13^2)*s23^2 +
             32*s12*s13*s23^3) + p1q^3*p2q*((64*s12^2*s13 - 8*s12*s13^2)*
              s23^2 + 64*s12*s13*s23^3) + p1q^2*p2q^2*
            ((96*s12^2*s13 - 48*s12*s13^2)*s23^2 + 96*s12*s13*s23^3))) +
       ((p3q^6*((-18*s12^3 - 72*s12^2*s13 - 90*s12*s13^2 - 36*s13^3)*s23 +
            (-45*s12^2 - 117*s12*s13 - 72*s13^2)*s23^2 + (-27*s12 - 36*s13)*
             s23^3) + p2q^6*((-18*s12^2*s13 - 36*s12*s13^2 - 18*s13^3)*s23 +
            (-27*s12*s13 - 27*s13^2)*s23^2 - 9*s13*s23^3) +
          p1q*p2q^5*(36*s12*s13^3 + 36*s13^4 + (-72*s12^2*s13 -
              108*s12*s13^2)*s23 + (-72*s12*s13 - 36*s13^2)*s23^2 +
            (9*s12 + 9*s13)*s23^3 + 9*s23^4) + p1q^3*p2q^3*
           (36*s12*s13^3 + 36*s13^4 + (-81*s12^2*s13 - 198*s12*s13^2 -
              81*s13^3)*s23 + (-63*s12*s13 - 99*s13^2)*s23^2 +
            (18*s12 + 36*s13)*s23^3 + 18*s23^4) + p1q^2*p2q^4*
           (72*s12*s13^3 + 72*s13^4 + (-108*s12^2*s13 - 180*s12*s13^2)*s23 +
            (-90*s12*s13 - 54*s13^2)*s23^2 + (18*s12 + 36*s13)*s23^3 +
            18*s23^4) + p1q^4*p2q^2*((-36*s12^2*s13 - 108*s12*s13^2 -
              72*s13^3)*s23 + (-9*s12^2 - 18*s12*s13 - 45*s13^2)*s23^2 +
            (9*s12 + 45*s13)*s23^3 + 18*s23^4) + p1q^5*p2q*
           ((36*s12*s13 + 36*s13^2)*s23^2 + (18*s12 + 54*s13)*s23^3 +
            18*s23^4) + p3q^5*(p2q*((-54*s12^3 - 234*s12^2*s13 -
                306*s12*s13^2 - 126*s13^3)*s23 + (-135*s12^2 - 378*s12*s13 -
                243*s13^2)*s23^2 + (-81*s12 - 117*s13)*s23^3) +
            p1q*(36*s12^3*s13 + 36*s12^2*s13^2 + (18*s12^3 - 126*s12*s13^2 -
                72*s13^3)*s23 + (-108*s12*s13 - 108*s13^2)*s23^2 +
              (9*s12 - 9*s13)*s23^3 + 27*s23^4)) +
          p3q^4*(p2q^2*((-72*s12^3 - 342*s12^2*s13 - 468*s12*s13^2 -
                198*s13^3)*s23 + (-180*s12^2 - 549*s12*s13 - 369*s13^2)*s23^
                2 + (-108*s12 - 171*s13)*s23^3) + p1q^2*(72*s12^3*s13 +
              72*s12^2*s13^2 + (18*s12^3 - 36*s12^2*s13 - 234*s12*s13^2 -
                108*s13^3)*s23 + (-72*s12^2 - 270*s12*s13 - 162*s13^2)*s23^
                2 + (-54*s12 - 18*s13)*s23^3 + 36*s23^4) +
            p1q*p2q*(108*s12^3*s13 + 36*s12^2*s13^2 - 72*s12*s13^3 +
              (36*s12^3 - 90*s12^2*s13 - 540*s12*s13^2 - 234*s13^3)*s23 +
              (-18*s12^2 - 414*s12*s13 - 360*s13^2)*s23^2 + (9*s12 - 63*s13)*
               s23^3 + 63*s23^4)) + p3q*(p2q^5*((-18*s12^3 - 126*s12^2*s13 -
                198*s12*s13^2 - 90*s13^3)*s23 + (-45*s12^2 - 198*s12*s13 -
                153*s13^2)*s23^2 + (-27*s12 - 63*s13)*s23^3) +
            p1q^5*((36*s12*s13 + 36*s13^2)*s23^2 + (18*s12 + 54*s13)*s23^3 +
              18*s23^4) + p1q*p2q^4*(-72*s12^2*s13^2 + 36*s12*s13^3 +
              108*s13^4 + (-252*s12^2*s13 - 432*s12*s13^2)*s23 +
              (-270*s12*s13 - 126*s13^2)*s23^2 + (45*s12 + 27*s13)*s23^3 +
              45*s23^4) + p1q^2*p2q^3*(-144*s12^2*s13^2 + 144*s13^4 +
              (-342*s12^2*s13 - 684*s12*s13^2 - 54*s13^3)*s23 +
              (-18*s12^2 - 360*s12*s13 - 198*s13^2)*s23^2 + (36*s12 + 54*s13)*
               s23^3 + 54*s23^4) + p1q^3*p2q^2*(-72*s12^2*s13^2 -
              36*s12*s13^3 + 36*s13^4 + (9*s12^3 - 180*s12^2*s13 -
                459*s12*s13^2 - 162*s13^3)*s23 + (-27*s12^2 - 135*s12*s13 -
                108*s13^2)*s23^2 + (36*s12 + 162*s13)*s23^3 + 72*s23^4) +
            p1q^4*p2q*((-36*s12^2*s13 - 72*s12*s13^2 - 36*s13^3)*s23 +
              (-36*s12^2 + 72*s12*s13 + 108*s13^2)*s23^2 + (36*s12 + 216*s13)*
               s23^3 + 72*s23^4)) + p3q^3*
           (p2q^3*((-72*s12^3 - 360*s12^2*s13 - 504*s12*s13^2 - 216*s13^3)*
               s23 + (-180*s12^2 - 576*s12*s13 - 396*s13^2)*s23^2 +
              (-108*s12 - 180*s13)*s23^3) + p1q*p2q^2*(108*s12^3*s13 -
              108*s12^2*s13^2 - 180*s12*s13^3 + 36*s13^4 + (18*s12^3 -
                288*s12^2*s13 - 918*s12*s13^2 - 252*s13^3)*s23 +
              (-36*s12^2 - 630*s12*s13 - 450*s13^2)*s23^2 + (18*s12 - 90*s13)*
               s23^3 + 72*s23^4) + p1q^3*(36*s12^3*s13 + 36*s12^2*s13^2 +
              (9*s12^3 - 90*s12^2*s13 - 207*s12*s13^2 - 72*s13^3)*s23 +
              (-63*s12^2 - 189*s12*s13 - 54*s13^2)*s23^2 + 90*s13*s23^3 +
              72*s23^4) + p1q^2*p2q*(144*s12^3*s13 - 144*s12*s13^3 +
              (36*s12^3 - 198*s12^2*s13 - 792*s12*s13^2 - 270*s13^3)*s23 +
              (-126*s12^2 - 648*s12*s13 - 378*s13^2)*s23^2 +
              (-72*s12 - 18*s13)*s23^3 + 90*s23^4)) +
          p3q^2*(p2q^4*((-54*s12^3 - 288*s12^2*s13 - 414*s12*s13^2 -
                180*s13^3)*s23 + (-135*s12^2 - 459*s12*s13 - 324*s13^2)*s23^
                2 + (-81*s12 - 144*s13)*s23^3) +
            p1q^4*((-72*s12^2*s13 - 108*s12*s13^2 - 36*s13^3)*s23 +
              (-27*s12^2 - 54*s12*s13 + 9*s13^2)*s23^2 + (27*s12 + 99*s13)*
               s23^3 + 54*s23^4) + p1q*p2q^3*(36*s12^3*s13 - 180*s12^2*s13^
                2 - 108*s12*s13^3 + 108*s13^4 + (-378*s12^2*s13 -
                828*s12*s13^2 - 90*s13^3)*s23 + (-18*s12^2 - 522*s12*s13 -
                288*s13^2)*s23^2 + (54*s12 - 18*s13)*s23^3 + 72*s23^4) +
            p1q^2*p2q^2*(72*s12^3*s13 - 216*s12^2*s13^2 - 216*s12*s13^3 +
              72*s13^4 + (18*s12^3 - 396*s12^2*s13 - 1062*s12*s13^2 -
                216*s13^3)*s23 + (-72*s12^2 - 648*s12*s13 - 360*s13^2)*s23^
                2 + 18*s13*s23^3 + 90*s23^4) + p1q^3*p2q*(36*s12^3*s13 -
              36*s12^2*s13^2 - 72*s12*s13^3 + (18*s12^3 - 189*s12^2*s13 -
                468*s12*s13^2 - 153*s13^3)*s23 + (-90*s12^2 - 261*s12*s13 -
                63*s13^2)*s23^2 + (18*s12 + 216*s13)*s23^3 + 126*s23^4)))*
         Log(s23/(s12 + s13 + s23)))/(p1q*p2q^5*(8*s12*s13 + 8*s13^2)*s23^2 +
         p1q*p3q^5*(8*s12*s13 + 8*s13^2)*s23^2 - 8*p1q^4*p2q^2*s13*s23^3 +
         p1q^3*p2q^3*((8*s12*s13 + 8*s13^2)*s23^2 - 16*s13*s23^3) +
         p1q^2*p2q^4*((16*s12*s13 + 16*s13^2)*s23^2 - 8*s13*s23^3) +
         p3q^2*(p1q*p2q^3*(80*s12*s13 + 80*s13^2)*s23^2 - 8*p1q^4*s13*s23^3 +
           p1q^3*p2q*((24*s12*s13 + 24*s13^2)*s23^2 - 48*s13*s23^3) +
           p1q^2*p2q^2*((96*s12*s13 + 96*s13^2)*s23^2 - 48*s13*s23^3)) +
         p3q*(p1q*p2q^4*(40*s12*s13 + 40*s13^2)*s23^2 - 16*p1q^4*p2q*s13*
            s23^3 + p1q^3*p2q^2*((24*s12*s13 + 24*s13^2)*s23^2 -
             48*s13*s23^3) + p1q^2*p2q^3*((64*s12*s13 + 64*s13^2)*s23^2 -
             32*s13*s23^3)) + p3q^3*(p1q*p2q^2*(80*s12*s13 + 80*s13^2)*
            s23^2 + p1q^2*p2q*((64*s12*s13 + 64*s13^2)*s23^2 -
             32*s13*s23^3) + p1q^3*((8*s12*s13 + 8*s13^2)*s23^2 -
             16*s13*s23^3)) + p3q^4*(p1q*p2q*(40*s12*s13 + 40*s13^2)*s23^2 +
           p1q^2*((16*s12*s13 + 16*s13^2)*s23^2 - 8*s13*s23^3)))) +
     Log((p2q + p3q)/(p1q + p2q + p3q))*
      (((p3q^6*((-18*s12^3 - 36*s12^2*s13 - 18*s12*s13^2)*s23 +
            (-27*s12^2 - 27*s12*s13)*s23^2 - 9*s12*s23^3) +
          p2q^6*((-18*s12^3 - 36*s12^2*s13 - 18*s12*s13^2)*s23 +
            (-36*s12^2 - 45*s12*s13 - 9*s13^2)*s23^2 + (-18*s12 - 9*s13)*
             s23^3) + p1q*p2q^5*(36*s12^2*s13^2 + 36*s12*s13^3 +
            (-72*s12^3 - 126*s12^2*s13 + 18*s13^3)*s23 +
            (-126*s12^2 - 144*s12*s13 - 18*s13^2)*s23^2 + (-45*s12 - 27*s13)*
             s23^3 + 9*s23^4) + p1q^5*p2q*((36*s12^2 + 36*s12*s13)*s23^2 +
            (54*s12 + 18*s13)*s23^3 + 18*s23^4) + p1q^2*p2q^4*
           (72*s12^2*s13^2 + 72*s12*s13^3 + (-108*s12^3 - 234*s12^2*s13 -
              36*s12*s13^2 + 18*s13^3)*s23 + (-162*s12^2 - 270*s12*s13 -
              72*s13^2)*s23^2 + (-18*s12 - 54*s13)*s23^3 + 36*s23^4) +
          p1q^4*p2q^2*((-36*s12^3 - 108*s12^2*s13 - 72*s12*s13^2)*s23 +
            (9*s12^2 - 54*s12*s13 - 27*s13^2)*s23^2 + (99*s12 + 27*s13)*
             s23^3 + 54*s23^4) + p1q^3*p2q^3*(36*s12^2*s13^2 + 36*s12*s13^3 +
            (-72*s12^3 - 207*s12^2*s13 - 90*s12*s13^2 + 9*s13^3)*s23 +
            (-54*s12^2 - 189*s12*s13 - 63*s13^2)*s23^2 + 90*s12*s23^3 +
            72*s23^4) + p3q^5*(p2q*((-72*s12^3 - 144*s12^2*s13 -
                72*s12*s13^2)*s23 + (-117*s12^2 - 126*s12*s13 - 9*s13^2)*s23^
                2 + (-45*s12 - 9*s13)*s23^3) + p1q*(36*s12^4 + 36*s12^3*s13 +
              (-108*s12^2*s13 - 72*s12*s13^2)*s23 + (-36*s12^2 - 72*s12*s13)*
               s23^2 + (9*s12 + 9*s13)*s23^3 + 9*s23^4)) +
          p3q^4*(p2q^2*((-126*s12^3 - 252*s12^2*s13 - 126*s12*s13^2)*s23 +
              (-216*s12^2 - 243*s12*s13 - 27*s13^2)*s23^2 + (-90*s12 -
                27*s13)*s23^3) + p1q^2*(72*s12^4 + 72*s12^3*s13 +
              (-180*s12^2*s13 - 108*s12*s13^2)*s23 + (-54*s12^2 - 90*s12*s13)*
               s23^2 + (36*s12 + 18*s13)*s23^3 + 18*s23^4) +
            p1q*p2q*(108*s12^4 + 36*s12^3*s13 - 72*s12^2*s13^2 +
              (-432*s12^2*s13 - 252*s12*s13^2)*s23 + (-144*s12^2 -
                306*s12*s13 - 18*s13^2)*s23^2 + (-9*s12 + 9*s13)*s23^3 +
              27*s23^4)) + p3q^3*(p2q^3*((-144*s12^3 - 288*s12^2*s13 -
                144*s12*s13^2)*s23 + (-252*s12^2 - 288*s12*s13 - 36*s13^2)*
               s23^2 + (-108*s12 - 36*s13)*s23^3) +
            p1q^3*(36*s12^4 + 36*s12^3*s13 + (-81*s12^3 - 198*s12^2*s13 -
                81*s12*s13^2)*s23 + (-99*s12^2 - 63*s12*s13)*s23^2 +
              (36*s12 + 18*s13)*s23^3 + 18*s23^4) + p1q*p2q^2*
             (108*s12^4 - 108*s12^3*s13 - 180*s12^2*s13^2 + 36*s12*s13^3 +
              (-90*s12^3 - 828*s12^2*s13 - 378*s12*s13^2)*s23 +
              (-324*s12^2 - 594*s12*s13 - 54*s13^2)*s23^2 + (-90*s12 -
                18*s13)*s23^3 + 36*s23^4) + p1q^2*p2q*(144*s12^4 -
              144*s12^2*s13^2 + (-54*s12^3 - 684*s12^2*s13 - 342*s12*s13^2)*
               s23 + (-198*s12^2 - 360*s12*s13 - 18*s13^2)*s23^2 +
              (54*s12 + 36*s13)*s23^3 + 54*s23^4)) +
          p3q^2*(p2q^4*((-126*s12^3 - 252*s12^2*s13 - 126*s12*s13^2)*s23 +
              (-225*s12^2 - 261*s12*s13 - 36*s13^2)*s23^2 + (-99*s12 -
                36*s13)*s23^3) + p1q^4*((-72*s12^3 - 108*s12^2*s13 -
                36*s12*s13^2)*s23 + (-45*s12^2 - 18*s12*s13 - 9*s13^2)*s23^
                2 + (45*s12 + 9*s13)*s23^3 + 18*s23^4) +
            p1q*p2q^3*(36*s12^4 - 180*s12^3*s13 - 108*s12^2*s13^2 +
              108*s12*s13^3 + (-252*s12^3 - 918*s12^2*s13 - 288*s12*s13^2 +
                18*s13^3)*s23 + (-486*s12^2 - 702*s12*s13 - 72*s13^2)*s23^2 +
              (-162*s12 - 54*s13)*s23^3 + 36*s23^4) + p1q^3*p2q*
             (36*s12^4 - 36*s12^3*s13 - 72*s12^2*s13^2 + (-162*s12^3 -
                459*s12^2*s13 - 180*s12*s13^2 + 9*s13^3)*s23 +
              (-108*s12^2 - 135*s12*s13 - 27*s13^2)*s23^2 + (162*s12 +
                36*s13)*s23^3 + 72*s23^4) + p1q^2*p2q^2*(72*s12^4 -
              216*s12^3*s13 - 216*s12^2*s13^2 + 72*s12*s13^3 +
              (-216*s12^3 - 1062*s12^2*s13 - 396*s12*s13^2 + 18*s13^3)*s23 +
              (-360*s12^2 - 648*s12*s13 - 72*s13^2)*s23^2 + 18*s12*s23^3 +
              90*s23^4)) + p3q*(p2q^5*((-72*s12^3 - 144*s12^2*s13 -
                72*s12*s13^2)*s23 + (-135*s12^2 - 162*s12*s13 - 27*s13^2)*s23^
                2 + (-63*s12 - 27*s13)*s23^3) +
            p1q^5*((36*s12^2 + 36*s12*s13)*s23^2 + (54*s12 + 18*s13)*s23^3 +
              18*s23^4) + p1q*p2q^4*(-72*s12^3*s13 + 36*s12^2*s13^2 +
              108*s12*s13^3 + (-234*s12^3 - 540*s12^2*s13 - 90*s12*s13^2 +
                36*s13^3)*s23 + (-396*s12^2 - 486*s12*s13 - 54*s13^2)*s23^2 +
              (-135*s12 - 63*s13)*s23^3 + 27*s23^4) + p1q^4*p2q*
             ((-36*s12^3 - 72*s12^2*s13 - 36*s12*s13^2)*s23 +
              (108*s12^2 + 72*s12*s13 - 36*s13^2)*s23^2 + (216*s12 + 36*s13)*
               s23^3 + 72*s23^4) + p1q^2*p2q^3*(-144*s12^3*s13 +
              144*s12*s13^3 + (-270*s12^3 - 792*s12^2*s13 - 198*s12*s13^2 +
                36*s13^3)*s23 + (-378*s12^2 - 648*s12*s13 - 126*s13^2)*s23^
                2 + (-18*s12 - 72*s13)*s23^3 + 90*s23^4) +
            p1q^3*p2q^2*(-72*s12^3*s13 - 36*s12^2*s13^2 + 36*s12*s13^3 +
              (-153*s12^3 - 468*s12^2*s13 - 189*s12*s13^2 + 18*s13^3)*s23 +
              (-63*s12^2 - 261*s12*s13 - 90*s13^2)*s23^2 + (216*s12 + 18*s13)*
               s23^3 + 126*s23^4)))*Log(s12/(s12 + s13 + s23)))/
        (p1q*p2q^5*(8*s12^2 + 8*s12*s13)*s23^2 + p1q*p3q^5*
          (8*s12^2 + 8*s12*s13)*s23^2 - 8*p1q^4*p2q^2*s12*s23^3 +
         p1q^3*p2q^3*((8*s12^2 + 8*s12*s13)*s23^2 - 16*s12*s23^3) +
         p1q^2*p2q^4*((16*s12^2 + 16*s12*s13)*s23^2 - 8*s12*s23^3) +
         p3q^2*(p1q*p2q^3*(80*s12^2 + 80*s12*s13)*s23^2 - 8*p1q^4*s12*s23^3 +
           p1q^3*p2q*((24*s12^2 + 24*s12*s13)*s23^2 - 48*s12*s23^3) +
           p1q^2*p2q^2*((96*s12^2 + 96*s12*s13)*s23^2 - 48*s12*s23^3)) +
         p3q*(p1q*p2q^4*(40*s12^2 + 40*s12*s13)*s23^2 - 16*p1q^4*p2q*s12*
            s23^3 + p1q^3*p2q^2*((24*s12^2 + 24*s12*s13)*s23^2 -
             48*s12*s23^3) + p1q^2*p2q^3*((64*s12^2 + 64*s12*s13)*s23^2 -
             32*s12*s23^3)) + p3q^3*(p1q*p2q^2*(80*s12^2 + 80*s12*s13)*
            s23^2 + p1q^2*p2q*((64*s12^2 + 64*s12*s13)*s23^2 -
             32*s12*s23^3) + p1q^3*((8*s12^2 + 8*s12*s13)*s23^2 -
             16*s12*s23^3)) + p3q^4*(p1q*p2q*(40*s12^2 + 40*s12*s13)*s23^2 +
           p1q^2*((16*s12^2 + 16*s12*s13)*s23^2 - 8*s12*s23^3))) +
       ((p3q^6*((-18*s12^2*s13 - 36*s12*s13^2 - 18*s13^3)*s23 +
            (-9*s12^2 - 45*s12*s13 - 36*s13^2)*s23^2 + (-9*s12 - 18*s13)*
             s23^3) + p2q^6*((-18*s12^2*s13 - 36*s12*s13^2 - 18*s13^3)*s23 +
            (-27*s12*s13 - 27*s13^2)*s23^2 - 9*s13*s23^3) +
          p1q*p2q^5*(36*s12*s13^3 + 36*s13^4 + (-72*s12^2*s13 -
              108*s12*s13^2)*s23 + (-72*s12*s13 - 36*s13^2)*s23^2 +
            (9*s12 + 9*s13)*s23^3 + 9*s23^4) + p1q^3*p2q^3*
           (36*s12*s13^3 + 36*s13^4 + (-81*s12^2*s13 - 198*s12*s13^2 -
              81*s13^3)*s23 + (-63*s12*s13 - 99*s13^2)*s23^2 +
            (18*s12 + 36*s13)*s23^3 + 18*s23^4) + p1q^2*p2q^4*
           (72*s12*s13^3 + 72*s13^4 + (-108*s12^2*s13 - 180*s12*s13^2)*s23 +
            (-90*s12*s13 - 54*s13^2)*s23^2 + (18*s12 + 36*s13)*s23^3 +
            18*s23^4) + p1q^4*p2q^2*((-36*s12^2*s13 - 108*s12*s13^2 -
              72*s13^3)*s23 + (-9*s12^2 - 18*s12*s13 - 45*s13^2)*s23^2 +
            (9*s12 + 45*s13)*s23^3 + 18*s23^4) + p1q^5*p2q*
           ((36*s12*s13 + 36*s13^2)*s23^2 + (18*s12 + 54*s13)*s23^3 +
            18*s23^4) + p3q^5*(p2q*((-72*s12^2*s13 - 144*s12*s13^2 -
                72*s13^3)*s23 + (-27*s12^2 - 162*s12*s13 - 135*s13^2)*s23^2 +
              (-27*s12 - 63*s13)*s23^3) + p1q*(36*s12^3*s13 +
              36*s12^2*s13^2 + (18*s12^3 - 126*s12*s13^2 - 72*s13^3)*s23 +
              (-18*s12^2 - 144*s12*s13 - 126*s13^2)*s23^2 + (-27*s12 -
                45*s13)*s23^3 + 9*s23^4)) +
          p3q^4*(p2q^2*((-126*s12^2*s13 - 252*s12*s13^2 - 126*s13^3)*s23 +
              (-36*s12^2 - 261*s12*s13 - 225*s13^2)*s23^2 + (-36*s12 -
                99*s13)*s23^3) + p1q*p2q*(108*s12^3*s13 + 36*s12^2*s13^2 -
              72*s12*s13^3 + (36*s12^3 - 90*s12^2*s13 - 540*s12*s13^2 -
                234*s13^3)*s23 + (-54*s12^2 - 486*s12*s13 - 396*s13^2)*s23^
                2 + (-63*s12 - 135*s13)*s23^3 + 27*s23^4) +
            p1q^2*(72*s12^3*s13 + 72*s12^2*s13^2 + (18*s12^3 - 36*s12^2*s13 -
                234*s12*s13^2 - 108*s13^3)*s23 + (-72*s12^2 - 270*s12*s13 -
                162*s13^2)*s23^2 + (-54*s12 - 18*s13)*s23^3 + 36*s23^4)) +
          p3q*(p2q^5*((-72*s12^2*s13 - 144*s12*s13^2 - 72*s13^3)*s23 +
              (-9*s12^2 - 126*s12*s13 - 117*s13^2)*s23^2 + (-9*s12 - 45*s13)*
               s23^3) + p1q^5*((36*s12*s13 + 36*s13^2)*s23^2 +
              (18*s12 + 54*s13)*s23^3 + 18*s23^4) + p1q*p2q^4*
             (-72*s12^2*s13^2 + 36*s12*s13^3 + 108*s13^4 + (-252*s12^2*s13 -
                432*s12*s13^2)*s23 + (-18*s12^2 - 306*s12*s13 - 144*s13^2)*
               s23^2 + (9*s12 - 9*s13)*s23^3 + 27*s23^4) +
            p1q^2*p2q^3*(-144*s12^2*s13^2 + 144*s13^4 + (-342*s12^2*s13 -
                684*s12*s13^2 - 54*s13^3)*s23 + (-18*s12^2 - 360*s12*s13 -
                198*s13^2)*s23^2 + (36*s12 + 54*s13)*s23^3 + 54*s23^4) +
            p1q^3*p2q^2*(-72*s12^2*s13^2 - 36*s12*s13^3 + 36*s13^4 +
              (9*s12^3 - 180*s12^2*s13 - 459*s12*s13^2 - 162*s13^3)*s23 +
              (-27*s12^2 - 135*s12*s13 - 108*s13^2)*s23^2 +
              (36*s12 + 162*s13)*s23^3 + 72*s23^4) + p1q^4*p2q*
             ((-36*s12^2*s13 - 72*s12*s13^2 - 36*s13^3)*s23 +
              (-36*s12^2 + 72*s12*s13 + 108*s13^2)*s23^2 + (36*s12 + 216*s13)*
               s23^3 + 72*s23^4)) + p3q^3*
           (p2q^3*((-144*s12^2*s13 - 288*s12*s13^2 - 144*s13^3)*s23 +
              (-36*s12^2 - 288*s12*s13 - 252*s13^2)*s23^2 + (-36*s12 -
                108*s13)*s23^3) + p1q*p2q^2*(108*s12^3*s13 - 108*s12^2*s13^
                2 - 180*s12*s13^3 + 36*s13^4 + (18*s12^3 - 288*s12^2*s13 -
                918*s12*s13^2 - 252*s13^3)*s23 + (-72*s12^2 - 702*s12*s13 -
                486*s13^2)*s23^2 + (-54*s12 - 162*s13)*s23^3 + 36*s23^4) +
            p1q^3*(36*s12^3*s13 + 36*s12^2*s13^2 + (9*s12^3 - 90*s12^2*s13 -
                207*s12*s13^2 - 72*s13^3)*s23 + (-63*s12^2 - 189*s12*s13 -
                54*s13^2)*s23^2 + 90*s13*s23^3 + 72*s23^4) +
            p1q^2*p2q*(144*s12^3*s13 - 144*s12*s13^3 + (36*s12^3 -
                198*s12^2*s13 - 792*s12*s13^2 - 270*s13^3)*s23 +
              (-126*s12^2 - 648*s12*s13 - 378*s13^2)*s23^2 +
              (-72*s12 - 18*s13)*s23^3 + 90*s23^4)) +
          p3q^2*(p2q^4*((-126*s12^2*s13 - 252*s12*s13^2 - 126*s13^3)*s23 +
              (-27*s12^2 - 243*s12*s13 - 216*s13^2)*s23^2 + (-27*s12 -
                90*s13)*s23^3) + p1q*p2q^3*(36*s12^3*s13 - 180*s12^2*s13^2 -
              108*s12*s13^3 + 108*s13^4 + (-378*s12^2*s13 - 828*s12*s13^2 -
                90*s13^3)*s23 + (-54*s12^2 - 594*s12*s13 - 324*s13^2)*s23^2 +
              (-18*s12 - 90*s13)*s23^3 + 36*s23^4) +
            p1q^4*((-72*s12^2*s13 - 108*s12*s13^2 - 36*s13^3)*s23 +
              (-27*s12^2 - 54*s12*s13 + 9*s13^2)*s23^2 + (27*s12 + 99*s13)*
               s23^3 + 54*s23^4) + p1q^2*p2q^2*(72*s12^3*s13 -
              216*s12^2*s13^2 - 216*s12*s13^3 + 72*s13^4 + (18*s12^3 -
                396*s12^2*s13 - 1062*s12*s13^2 - 216*s13^3)*s23 +
              (-72*s12^2 - 648*s12*s13 - 360*s13^2)*s23^2 + 18*s13*s23^3 +
              90*s23^4) + p1q^3*p2q*(36*s12^3*s13 - 36*s12^2*s13^2 -
              72*s12*s13^3 + (18*s12^3 - 189*s12^2*s13 - 468*s12*s13^2 -
                153*s13^3)*s23 + (-90*s12^2 - 261*s12*s13 - 63*s13^2)*s23^2 +
              (18*s12 + 216*s13)*s23^3 + 126*s23^4)))*
         Log(s13/(s12 + s13 + s23)))/(p1q*p2q^5*(8*s12*s13 + 8*s13^2)*s23^2 +
         p1q*p3q^5*(8*s12*s13 + 8*s13^2)*s23^2 - 8*p1q^4*p2q^2*s13*s23^3 +
         p1q^3*p2q^3*((8*s12*s13 + 8*s13^2)*s23^2 - 16*s13*s23^3) +
         p1q^2*p2q^4*((16*s12*s13 + 16*s13^2)*s23^2 - 8*s13*s23^3) +
         p3q^2*(p1q*p2q^3*(80*s12*s13 + 80*s13^2)*s23^2 - 8*p1q^4*s13*s23^3 +
           p1q^3*p2q*((24*s12*s13 + 24*s13^2)*s23^2 - 48*s13*s23^3) +
           p1q^2*p2q^2*((96*s12*s13 + 96*s13^2)*s23^2 - 48*s13*s23^3)) +
         p3q*(p1q*p2q^4*(40*s12*s13 + 40*s13^2)*s23^2 - 16*p1q^4*p2q*s13*
            s23^3 + p1q^3*p2q^2*((24*s12*s13 + 24*s13^2)*s23^2 -
             48*s13*s23^3) + p1q^2*p2q^3*((64*s12*s13 + 64*s13^2)*s23^2 -
             32*s13*s23^3)) + p3q^3*(p1q*p2q^2*(80*s12*s13 + 80*s13^2)*
            s23^2 + p1q^2*p2q*((64*s12*s13 + 64*s13^2)*s23^2 -
             32*s13*s23^3) + p1q^3*((8*s12*s13 + 8*s13^2)*s23^2 -
             16*s13*s23^3)) + p3q^4*(p1q*p2q*(40*s12*s13 + 40*s13^2)*s23^2 +
           p1q^2*((16*s12*s13 + 16*s13^2)*s23^2 - 8*s13*s23^3))) +
       ((p2q^2*p3q*(-9*s12^3 - 18*s12^2*s13 - 9*s12*s13^2 +
            (-18*s12^2 - 18*s12*s13)*s23 - 9*s12*s23^2) +
          p3q^3*(-9*s12^3 - 18*s12^2*s13 - 9*s12*s13^2 +
            (-18*s12^2 - 18*s12*s13)*s23 - 9*s12*s23^2) +
          p2q^3*(-9*s12^2*s13 - 18*s12*s13^2 - 9*s13^3 +
            (-18*s12*s13 - 18*s13^2)*s23 - 9*s13*s23^2) +
          p2q*p3q^2*(-9*s12^2*s13 - 18*s12*s13^2 - 9*s13^3 +
            (-18*s12*s13 - 18*s13^2)*s23 - 9*s13*s23^2))*
         Log((s12 + s13)/(s12 + s13 + s23)))/(4*p1q^3*s12*s13*s23 +
         8*p1q^2*p2q*s12*s13*s23 + 4*p1q*p2q^2*s12*s13*s23 +
         4*p1q*p3q^2*s12*s13*s23 + p3q*(8*p1q^2*s12*s13*s23 +
           8*p1q*p2q*s12*s13*s23)) +
       ((p3q^6*((18*s12^4 + 90*s12^3*s13 + 126*s12^2*s13^2 + 54*s12*s13^3)*
             s23 + (45*s12^3 + 144*s12^2*s13 + 99*s12*s13^2)*s23^2 +
            (27*s12^2 + 45*s12*s13)*s23^3) +
          p2q^6*((54*s12^3*s13 + 126*s12^2*s13^2 + 90*s12*s13^3 + 18*s13^4)*
             s23 + (99*s12^2*s13 + 144*s12*s13^2 + 45*s13^3)*s23^2 +
            (45*s12*s13 + 27*s13^2)*s23^3) + p1q^3*p2q^3*(-72*s12^2*s13^3 -
            72*s12*s13^4 + (153*s12^3*s13 + 405*s12^2*s13^2 + 171*s12*s13^3 -
              9*s13^4)*s23 + (117*s12^2*s13 + 288*s12*s13^2 + 63*s13^3)*
             s23^2 + (-18*s12^2 - 126*s12*s13)*s23^3 + (-18*s12 - 72*s13)*
             s23^4) + p1q^4*p2q^2*((72*s12^3*s13 + 216*s12^2*s13^2 +
              144*s12*s13^3)*s23 + (9*s12^3 + 9*s12^2*s13 + 99*s12*s13^2 +
              27*s13^3)*s23^2 + (-9*s12^2 - 144*s12*s13 - 27*s13^2)*s23^3 +
            (-18*s12 - 54*s13)*s23^4) + p1q^2*p2q^4*(-144*s12^2*s13^3 -
            144*s12*s13^4 + (216*s12^3*s13 + 414*s12^2*s13^2 + 36*s12*s13^3 -
              18*s13^4)*s23 + (252*s12^2*s13 + 324*s12*s13^2 + 72*s13^3)*
             s23^2 + (-18*s12^2 - 18*s12*s13 + 54*s13^2)*s23^3 +
            (-18*s12 - 36*s13)*s23^4) + p1q*p2q^5*(-72*s12^2*s13^3 -
            72*s12*s13^4 + (144*s12^3*s13 + 234*s12^2*s13^2 - 18*s13^4)*s23 +
            (180*s12^2*s13 + 144*s12*s13^2)*s23^2 + (-9*s12^2 - 9*s13^2)*
             s23^3 + (-9*s12 - 27*s13)*s23^4) + p1q^5*p2q*
           ((-72*s12^2*s13 - 72*s12*s13^2)*s23^2 + (-18*s12^2 - 108*s12*s13 -
              18*s13^2)*s23^3 + (-18*s12 - 18*s13)*s23^4) +
          p3q^3*(p2q^3*((72*s12^4 + 576*s12^3*s13 + 1008*s12^2*s13^2 +
                576*s12*s13^3 + 72*s13^4)*s23 + (180*s12^3 + 972*s12^2*s13 +
                972*s12*s13^2 + 180*s13^3)*s23^2 + (108*s12^2 + 360*s12*s13 +
                108*s13^2)*s23^3) + p1q*p2q^2*(-216*s12^4*s13 +
              216*s12^3*s13^2 + 360*s12^2*s13^3 - 72*s12*s13^4 +
              (-18*s12^4 + 378*s12^3*s13 + 1746*s12^2*s13^2 + 630*s12*s13^3)*
               s23 + (36*s12^3 + 918*s12^2*s13 + 972*s12*s13^2 + 18*s13^3)*
               s23^2 + (-18*s12^2 + 108*s12*s13 - 54*s13^2)*s23^3 +
              (-72*s12 - 72*s13)*s23^4) + p1q^2*p2q*(-288*s12^4*s13 +
              288*s12^2*s13^3 + (-36*s12^4 + 252*s12^3*s13 + 1476*s12^2*
                 s13^2 + 612*s12*s13^3)*s23 + (126*s12^3 + 846*s12^2*s13 +
                738*s12*s13^2 + 18*s13^3)*s23^2 + (72*s12^2 - 36*s12*s13 -
                36*s13^2)*s23^3 + (-90*s12 - 54*s13)*s23^4) +
            p1q^3*(-72*s12^4*s13 - 72*s12^3*s13^2 + (-9*s12^4 + 171*s12^3*
                 s13 + 405*s12^2*s13^2 + 153*s12*s13^3)*s23 +
              (63*s12^3 + 288*s12^2*s13 + 117*s12*s13^2)*s23^2 +
              (-126*s12*s13 - 18*s13^2)*s23^3 + (-72*s12 - 18*s13)*s23^4)) +
          p3q^2*(p2q^4*((54*s12^4 + 486*s12^3*s13 + 882*s12^2*s13^2 +
                522*s12*s13^3 + 72*s13^4)*s23 + (135*s12^3 + 828*s12^2*s13 +
                873*s12*s13^2 + 180*s13^3)*s23^2 + (81*s12^2 + 315*s12*s13 +
                108*s13^2)*s23^3) + p1q^2*p2q^2*(-144*s12^4*s13 +
              432*s12^3*s13^2 + 432*s12^2*s13^3 - 144*s12*s13^4 +
              (-18*s12^4 + 612*s12^3*s13 + 2124*s12^2*s13^2 + 612*s12*s13^3 -
                18*s13^4)*s23 + (72*s12^3 + 1008*s12^2*s13 + 1008*s12*s13^2 +
                72*s13^3)*s23^2 - 36*s12*s13*s23^3 + (-90*s12 - 90*s13)*s23^
                4) + p1q^3*p2q*(-72*s12^4*s13 + 72*s12^3*s13^2 +
              144*s12^2*s13^3 + (-18*s12^4 + 351*s12^3*s13 + 927*s12^2*
                 s13^2 + 333*s12*s13^3 - 9*s13^4)*s23 + (90*s12^3 +
                369*s12^2*s13 + 198*s12*s13^2 + 27*s13^3)*s23^2 +
              (-18*s12^2 - 378*s12*s13 - 36*s13^2)*s23^3 + (-126*s12 -
                72*s13)*s23^4) + p1q*p2q^3*(-72*s12^4*s13 + 360*s12^3*s13^2 +
              216*s12^2*s13^3 - 216*s12*s13^4 + (630*s12^3*s13 +
                1746*s12^2*s13^2 + 378*s12*s13^3 - 18*s13^4)*s23 +
              (18*s12^3 + 972*s12^2*s13 + 918*s12*s13^2 + 36*s13^3)*s23^2 +
              (-54*s12^2 + 108*s12*s13 - 18*s13^2)*s23^3 + (-72*s12 - 72*s13)*
               s23^4) + p1q^4*((144*s12^3*s13 + 216*s12^2*s13^2 +
                72*s12*s13^3)*s23 + (27*s12^3 + 99*s12^2*s13 + 9*s12*s13^2 +
                9*s13^3)*s23^2 + (-27*s12^2 - 144*s12*s13 - 9*s13^2)*s23^3 +
              (-54*s12 - 18*s13)*s23^4)) +
          p3q^4*(p2q^2*((72*s12^4 + 522*s12^3*s13 + 882*s12^2*s13^2 +
                486*s12*s13^3 + 54*s13^4)*s23 + (180*s12^3 + 873*s12^2*s13 +
                828*s12*s13^2 + 135*s13^3)*s23^2 + (108*s12^2 + 315*s12*s13 +
                81*s13^2)*s23^3) + p1q*p2q*(-216*s12^4*s13 - 72*s12^3*s13^2 +
              144*s12^2*s13^3 + (-36*s12^4 + 90*s12^3*s13 + 972*s12^2*s13^2 +
                486*s12*s13^3)*s23 + (18*s12^3 + 540*s12^2*s13 +
                630*s12*s13^2)*s23^2 + (-9*s12^2 + 36*s12*s13 - 45*s13^2)*s23^
                3 + (-63*s12 - 45*s13)*s23^4) + p1q^2*(-144*s12^4*s13 -
              144*s12^3*s13^2 + (-18*s12^4 + 36*s12^3*s13 + 414*s12^2*s13^2 +
                216*s12*s13^3)*s23 + (72*s12^3 + 324*s12^2*s13 +
                252*s12*s13^2)*s23^2 + (54*s12^2 - 18*s12*s13 - 18*s13^2)*s23^
                3 + (-36*s12 - 18*s13)*s23^4)) +
          p3q*(p2q^5*((18*s12^4 + 252*s12^3*s13 + 504*s12^2*s13^2 +
                324*s12*s13^3 + 54*s13^4)*s23 + (45*s12^3 + 441*s12^2*s13 +
                531*s12*s13^2 + 135*s13^3)*s23^2 + (27*s12^2 + 180*s12*s13 +
                81*s13^2)*s23^3) + p1q^3*p2q^2*(144*s12^3*s13^2 +
              72*s12^2*s13^3 - 72*s12*s13^4 + (-9*s12^4 + 333*s12^3*s13 +
                927*s12^2*s13^2 + 351*s12*s13^3 - 18*s13^4)*s23 +
              (27*s12^3 + 198*s12^2*s13 + 369*s12*s13^2 + 90*s13^3)*s23^2 +
              (-36*s12^2 - 378*s12*s13 - 18*s13^2)*s23^3 + (-72*s12 -
                126*s13)*s23^4) + p1q^2*p2q^3*(288*s12^3*s13^2 -
              288*s12*s13^4 + (612*s12^3*s13 + 1476*s12^2*s13^2 +
                252*s12*s13^3 - 36*s13^4)*s23 + (18*s12^3 + 738*s12^2*s13 +
                846*s12*s13^2 + 126*s13^3)*s23^2 + (-36*s12^2 - 36*s12*s13 +
                72*s13^2)*s23^3 + (-54*s12 - 90*s13)*s23^4) +
            p1q^4*p2q*((72*s12^3*s13 + 144*s12^2*s13^2 + 72*s12*s13^3)*s23 +
              (36*s12^3 - 180*s12^2*s13 - 180*s12*s13^2 + 36*s13^3)*s23^2 +
              (-36*s12^2 - 432*s12*s13 - 36*s13^2)*s23^3 + (-72*s12 - 72*s13)*
               s23^4) + p1q*p2q^4*(144*s12^3*s13^2 - 72*s12^2*s13^3 -
              216*s12*s13^4 + (486*s12^3*s13 + 972*s12^2*s13^2 +
                90*s12*s13^3 - 36*s13^4)*s23 + (630*s12^2*s13 +
                540*s12*s13^2 + 18*s13^3)*s23^2 + (-45*s12^2 + 36*s12*s13 -
                9*s13^2)*s23^3 + (-45*s12 - 63*s13)*s23^4) +
            p1q^5*((-72*s12^2*s13 - 72*s12*s13^2)*s23^2 + (-18*s12^2 -
                108*s12*s13 - 18*s13^2)*s23^3 + (-18*s12 - 18*s13)*s23^4)) +
          p3q^5*(p2q*((54*s12^4 + 324*s12^3*s13 + 504*s12^2*s13^2 +
                252*s12*s13^3 + 18*s13^4)*s23 + (135*s12^3 + 531*s12^2*s13 +
                441*s12*s13^2 + 45*s13^3)*s23^2 + (81*s12^2 + 180*s12*s13 +
                27*s13^2)*s23^3) + p1q*(-72*s12^4*s13 - 72*s12^3*s13^2 +
              (-18*s12^4 + 234*s12^2*s13^2 + 144*s12*s13^3)*s23 +
              (144*s12^2*s13 + 180*s12*s13^2)*s23^2 + (-9*s12^2 - 9*s13^2)*
               s23^3 + (-27*s12 - 9*s13)*s23^4)))*Log(s23/(s12 + s13 + s23)))/
        (p1q*p2q^5*(8*s12^2*s13 + 8*s12*s13^2)*s23^2 +
         p1q*p3q^5*(8*s12^2*s13 + 8*s12*s13^2)*s23^2 - 8*p1q^4*p2q^2*s12*s13*
          s23^3 + p1q^3*p2q^3*((8*s12^2*s13 + 8*s12*s13^2)*s23^2 -
           16*s12*s13*s23^3) + p1q^2*p2q^4*((16*s12^2*s13 + 16*s12*s13^2)*
            s23^2 - 8*s12*s13*s23^3) +
         p3q^2*(p1q*p2q^3*(80*s12^2*s13 + 80*s12*s13^2)*s23^2 -
           8*p1q^4*s12*s13*s23^3 + p1q^3*p2q*((24*s12^2*s13 + 24*s12*s13^2)*
              s23^2 - 48*s12*s13*s23^3) + p1q^2*p2q^2*
            ((96*s12^2*s13 + 96*s12*s13^2)*s23^2 - 48*s12*s13*s23^3)) +
         p3q*(p1q*p2q^4*(40*s12^2*s13 + 40*s12*s13^2)*s23^2 -
           16*p1q^4*p2q*s12*s13*s23^3 + p1q^3*p2q^2*
            ((24*s12^2*s13 + 24*s12*s13^2)*s23^2 - 48*s12*s13*s23^3) +
           p1q^2*p2q^3*((64*s12^2*s13 + 64*s12*s13^2)*s23^2 -
             32*s12*s13*s23^3)) + p3q^3*(p1q*p2q^2*(80*s12^2*s13 +
             80*s12*s13^2)*s23^2 + p1q^2*p2q*((64*s12^2*s13 + 64*s12*s13^2)*
              s23^2 - 32*s12*s13*s23^3) + p1q^3*((8*s12^2*s13 + 8*s12*s13^2)*
              s23^2 - 16*s12*s13*s23^3)) +
         p3q^4*(p1q*p2q*(40*s12^2*s13 + 40*s12*s13^2)*s23^2 +
           p1q^2*((16*s12^2*s13 + 16*s12*s13^2)*s23^2 - 8*s12*s13*s23^3)))) +
     nl*((p3q^5*(108*s12^5*s13 + 216*s12^4*s13^2 + 108*s12^3*s13^3 +
           (-180*s12^5 - 810*s12^4*s13 - 1944*s12^3*s13^2 -
             1854*s12^2*s13^3 - 540*s12*s13^4)*s23 +
           (-540*s12^4 - 1818*s12^3*s13 - 2394*s12^2*s13^2 - 900*s12*s13^3)*
            s23^2 + (-360*s12^3 - 720*s12^2*s13 - 360*s12*s13^2)*s23^3) +
         p2q^5*(108*s12^3*s13^3 + 216*s12^2*s13^4 + 108*s12*s13^5 +
           (-540*s12^4*s13 - 1854*s12^3*s13^2 - 1944*s12^2*s13^3 -
             810*s12*s13^4 - 180*s13^5)*s23 + (-900*s12^3*s13 -
             2394*s12^2*s13^2 - 1818*s12*s13^3 - 540*s13^4)*s23^2 +
           (-360*s12^2*s13 - 720*s12*s13^2 - 360*s13^3)*s23^3) +
         p1q^4*p2q*((-720*s12^4*s13 - 2160*s12^3*s13^2 - 2160*s12^2*s13^3 -
             720*s12*s13^4)*s23 + (-180*s12^4 - 1224*s12^3*s13 -
             2088*s12^2*s13^2 - 1224*s12*s13^3 - 180*s13^4)*s23^2 +
           (-180*s12^3 - 108*s12^2*s13 - 108*s12*s13^2 - 180*s13^3)*s23^3 +
           216*s12*s13*s23^4) + p1q*p2q^4*(720*s12^3*s13^3 +
           1440*s12^2*s13^4 + 720*s12*s13^5 + (-1548*s12^4*s13 -
             3348*s12^3*s13^2 - 1692*s12^2*s13^3 + 684*s12*s13^4 + 576*s13^5)*
            s23 + (116*s12^4 - 1357*s12^3*s13 - 3323*s12^2*s13^2 -
             2111*s12*s13^3 - 45*s13^4)*s23^2 + (220*s12^3 - 77*s12^2*s13 -
             1030*s12*s13^2 - 517*s13^3)*s23^3 + (40*s12^2 + 80*s12*s13 +
             40*s13^2)*s23^4) + p1q^2*p2q^3*(1548*s12^3*s13^3 +
           3096*s12^2*s13^4 + 1548*s12*s13^5 + (-2376*s12^4*s13 -
             4626*s12^3*s13^2 - 1872*s12^2*s13^3 + 954*s12*s13^4 + 576*s13^5)*
            s23 + (192*s12^4 - 1723*s12^3*s13 - 3757*s12^2*s13^2 -
             2711*s12*s13^3 - 437*s13^4)*s23^2 + (363*s12^3 + 424*s12^2*s13 -
             403*s12*s13^2 - 680*s13^3)*s23^3 + (43*s12^2 + 464*s12*s13 +
             205*s13^2)*s23^4) + p1q^3*p2q^2*(720*s12^3*s13^3 +
           1440*s12^2*s13^4 + 720*s12*s13^5 + (-1728*s12^4*s13 -
             4068*s12^3*s13^2 - 3204*s12^2*s13^3 - 684*s12*s13^4 + 180*s13^5)*
            s23 + (-64*s12^4 - 1880*s12^3*s13 - 4028*s12^2*s13^2 -
             3104*s12*s13^3 - 460*s13^4)*s23^2 + (-11*s12^3 - 393*s12^2*s13 -
             1185*s12*s13^2 - 587*s13^3)*s23^3 + (-119*s12^2 - 238*s12*s13 -
             119*s13^2)*s23^4 + (-108*s12 - 108*s13)*s23^5) +
         p3q^4*(p2q*(324*s12^5*s13 + 432*s12^4*s13^2 - 108*s12^3*s13^3 -
             216*s12^2*s13^4 + (-144*s12^5 - 540*s12^4*s13 - 3366*s12^3*
                s13^2 - 4248*s12^2*s13^3 - 1458*s12*s13^4 - 180*s13^5)*s23 +
             (-432*s12^4 - 1944*s12^3*s13 - 4698*s12^2*s13^2 - 2646*s12*
                s13^3 - 540*s13^4)*s23^2 + (-288*s12^3 - 936*s12^2*s13 - 1008*
                s12*s13^2 - 360*s13^3)*s23^3) + p1q*(720*s12^5*s13 +
             1440*s12^4*s13^2 + 720*s12^3*s13^3 + (576*s12^5 + 684*s12^4*
                s13 - 1692*s12^3*s13^2 - 3348*s12^2*s13^3 - 1548*s12*s13^4)*
              s23 + (-45*s12^4 - 2111*s12^3*s13 - 3323*s12^2*s13^2 - 1357*s12*
                s13^3 + 116*s13^4)*s23^2 + (-517*s12^3 - 1030*s12^2*s13 - 77*
                s12*s13^2 + 220*s13^3)*s23^3 + (40*s12^2 + 80*s12*s13 + 40*
                s13^2)*s23^4)) + p3q^3*(p2q^2*(324*s12^5*s13 -
             864*s12^3*s13^3 - 432*s12^2*s13^4 + 108*s12*s13^5 +
             (72*s12^5 + 972*s12^4*s13 - 1440*s12^3*s13^2 - 2412*s12^2*
                s13^3 - 216*s12*s13^4 - 144*s13^5)*s23 +
             (216*s12^4 + 720*s12^3*s13 - 2124*s12^2*s13^2 - 900*s12*s13^3 -
               432*s13^4)*s23^2 + (144*s12^3 - 432*s12*s13^2 - 288*s13^3)*
              s23^3) + p1q*p2q*(1440*s12^5*s13 + 1440*s12^4*s13^2 -
             1440*s12^3*s13^3 - 1440*s12^2*s13^4 + (576*s12^5 - 144*s12^4*
                s13 - 4032*s12^3*s13^2 - 6192*s12^2*s13^3 - 2880*s12*s13^4)*
              s23 + (-669*s12^4 - 4458*s12^3*s13 - 4952*s12^2*s13^2 - 1798*
                s12*s13^3 + 229*s13^4)*s23^2 + (-957*s12^3 - 2045*s12^2*s13 -
               139*s12*s13^2 + 517*s13^3)*s23^3 + (32*s12^2 + 64*s12*s13 + 32*
                s13^2)*s23^4) + p1q^2*(1548*s12^5*s13 + 3096*s12^4*s13^2 +
             1548*s12^3*s13^3 + (576*s12^5 + 954*s12^4*s13 - 1872*s12^3*
                s13^2 - 4626*s12^2*s13^3 - 2376*s12*s13^4)*s23 +
             (-437*s12^4 - 2711*s12^3*s13 - 3757*s12^2*s13^2 - 1723*s12*
                s13^3 + 192*s13^4)*s23^2 + (-680*s12^3 - 403*s12^2*s13 + 424*
                s12*s13^2 + 363*s13^3)*s23^3 + (205*s12^2 + 464*s12*s13 + 43*
                s13^2)*s23^4)) + p3q*(p2q^4*(-216*s12^4*s13^2 -
             108*s12^3*s13^3 + 432*s12^2*s13^4 + 324*s12*s13^5 +
             (-180*s12^5 - 1458*s12^4*s13 - 4248*s12^3*s13^2 - 3366*s12^2*
                s13^3 - 540*s12*s13^4 - 144*s13^5)*s23 +
             (-540*s12^4 - 2646*s12^3*s13 - 4698*s12^2*s13^2 - 1944*s12*
                s13^3 - 432*s13^4)*s23^2 + (-360*s12^3 - 1008*s12^2*s13 - 936*
                s12*s13^2 - 288*s13^3)*s23^3) +
           p1q^4*((-720*s12^4*s13 - 2160*s12^3*s13^2 - 2160*s12^2*s13^3 - 720*
                s12*s13^4)*s23 + (-180*s12^4 - 1224*s12^3*s13 - 2088*s12^2*
                s13^2 - 1224*s12*s13^3 - 180*s13^4)*s23^2 +
             (-180*s12^3 - 108*s12^2*s13 - 108*s12*s13^2 - 180*s13^3)*s23^3 +
             216*s12*s13*s23^4) + p1q*p2q^3*(-1440*s12^4*s13^2 -
             1440*s12^3*s13^3 + 1440*s12^2*s13^4 + 1440*s12*s13^5 +
             (-2880*s12^4*s13 - 6192*s12^3*s13^2 - 4032*s12^2*s13^3 - 144*s12*
                s13^4 + 576*s13^5)*s23 + (229*s12^4 - 1798*s12^3*s13 - 4952*
                s12^2*s13^2 - 4458*s12*s13^3 - 669*s13^4)*s23^2 +
             (517*s12^3 - 139*s12^2*s13 - 2045*s12*s13^2 - 957*s13^3)*s23^3 +
             (32*s12^2 + 64*s12*s13 + 32*s13^2)*s23^4) +
           p1q^2*p2q^2*(-3096*s12^4*s13^2 - 4644*s12^3*s13^3 +
             1548*s12*s13^5 + (-5166*s12^4*s13 - 12348*s12^3*s13^2 - 9594*
                s12^2*s13^3 - 1836*s12*s13^4 + 576*s13^5)*s23 +
             (-53*s12^4 - 3097*s12^3*s13 - 5151*s12^2*s13^2 - 4085*s12*
                s13^3 - 682*s13^4)*s23^2 + (622*s12^3 + 2173*s12^2*s13 + 1346*
                s12*s13^2 - 421*s13^3)*s23^3 + (291*s12^2 + 1392*s12*s13 +
               453*s13^2)*s23^4) + p1q^3*p2q*(-1440*s12^4*s13^2 -
             2880*s12^3*s13^3 - 1440*s12^2*s13^4 + (180*s12^5 - 3852*s12^4*
                s13 - 11592*s12^3*s13^2 - 11592*s12^2*s13^3 - 3852*s12*
                s13^4 + 180*s13^5)*s23 + (-524*s12^4 - 5704*s12^3*s13 - 9496*
                s12^2*s13^2 - 5704*s12*s13^3 - 524*s13^4)*s23^2 +
             (-598*s12^3 - 1578*s12^2*s13 - 1578*s12*s13^2 - 598*s13^3)*
              s23^3 + (-238*s12^2 - 476*s12*s13 - 238*s13^2)*s23^4 +
             (-216*s12 - 216*s13)*s23^5)) +
         p3q^2*(p2q^3*(108*s12^5*s13 - 432*s12^4*s13^2 - 864*s12^3*s13^3 +
             324*s12*s13^5 + (-144*s12^5 - 216*s12^4*s13 - 2412*s12^3*s13^2 -
               1440*s12^2*s13^3 + 972*s12*s13^4 + 72*s13^5)*s23 +
             (-432*s12^4 - 900*s12^3*s13 - 2124*s12^2*s13^2 + 720*s12*s13^3 +
               216*s13^4)*s23^2 + (-288*s12^3 - 432*s12^2*s13 + 144*s13^3)*
              s23^3) + p1q*p2q^2*(720*s12^5*s13 - 1440*s12^4*s13^2 -
             4320*s12^3*s13^3 - 1440*s12^2*s13^4 + 720*s12*s13^5 +
             (-2160*s12^4*s13 - 5184*s12^3*s13^2 - 5184*s12^2*s13^3 - 2160*
                s12*s13^4)*s23 + (-511*s12^4 - 2788*s12^3*s13 - 3258*s12^2*
                s13^2 - 2788*s12*s13^3 - 511*s13^4)*s23^2 +
             (-143*s12^3 - 1077*s12^2*s13 - 1077*s12*s13^2 - 143*s13^3)*
              s23^3 + (-16*s12^2 - 32*s12*s13 - 16*s13^2)*s23^4) +
           p1q^2*p2q*(1548*s12^5*s13 - 4644*s12^3*s13^3 - 3096*s12^2*s13^4 +
             (576*s12^5 - 1836*s12^4*s13 - 9594*s12^3*s13^2 - 12348*s12^2*
                s13^3 - 5166*s12*s13^4)*s23 + (-682*s12^4 - 4085*s12^3*s13 -
               5151*s12^2*s13^2 - 3097*s12*s13^3 - 53*s13^4)*s23^2 +
             (-421*s12^3 + 1346*s12^2*s13 + 2173*s12*s13^2 + 622*s13^3)*
              s23^3 + (453*s12^2 + 1392*s12*s13 + 291*s13^2)*s23^4) +
           p1q^3*(720*s12^5*s13 + 1440*s12^4*s13^2 + 720*s12^3*s13^3 +
             (180*s12^5 - 684*s12^4*s13 - 3204*s12^3*s13^2 - 4068*s12^2*
                s13^3 - 1728*s12*s13^4)*s23 + (-460*s12^4 - 3104*s12^3*s13 -
               4028*s12^2*s13^2 - 1880*s12*s13^3 - 64*s13^4)*s23^2 +
             (-587*s12^3 - 1185*s12^2*s13 - 393*s12*s13^2 - 11*s13^3)*s23^3 +
             (-119*s12^2 - 238*s12*s13 - 119*s13^2)*s23^4 +
             (-108*s12 - 108*s13)*s23^5)))/
        (p1q^3*p2q^2*(216*s12^3*s13 + 432*s12^2*s13^2 + 216*s12*s13^3)*
          s23^2 + p1q*p2q^4*(216*s12^3*s13 + 432*s12^2*s13^2 + 216*s12*s13^3)*
          s23^2 + p1q*p3q^4*(216*s12^3*s13 + 432*s12^2*s13^2 + 216*s12*s13^3)*
          s23^2 + p1q^2*p2q^3*(432*s12^3*s13 + 864*s12^2*s13^2 +
           432*s12*s13^3)*s23^2 + p3q^3*(p1q^2*(432*s12^3*s13 +
             864*s12^2*s13^2 + 432*s12*s13^3)*s23^2 +
           p1q*p2q*(864*s12^3*s13 + 1728*s12^2*s13^2 + 864*s12*s13^3)*
            s23^2) + p3q^2*(p1q^3*(216*s12^3*s13 + 432*s12^2*s13^2 +
             216*s12*s13^3)*s23^2 + p1q^2*p2q*(1296*s12^3*s13 +
             2592*s12^2*s13^2 + 1296*s12*s13^3)*s23^2 +
           p1q*p2q^2*(1296*s12^3*s13 + 2592*s12^2*s13^2 + 1296*s12*s13^3)*
            s23^2) + p3q*(p1q^3*p2q*(432*s12^3*s13 + 864*s12^2*s13^2 +
             432*s12*s13^3)*s23^2 + p1q*p2q^3*(864*s12^3*s13 +
             1728*s12^2*s13^2 + 864*s12*s13^3)*s23^2 + p1q^2*p2q^2*
            (1296*s12^3*s13 + 2592*s12^2*s13^2 + 1296*s12*s13^3)*s23^2)) +
       ((p3q^5*((9*s12^3 + 36*s12^2*s13 + 27*s12*s13^2)*s23 +
            (27*s12^2 + 45*s12*s13)*s23^2 + 18*s12*s23^3) +
          p2q^5*((27*s12^2*s13 + 36*s12*s13^2 + 9*s13^3)*s23 +
            (45*s12*s13 + 27*s13^2)*s23^2 + 18*s13*s23^3) +
          p1q^4*p2q*((36*s12^2*s13 + 36*s12*s13^2)*s23 +
            (9*s12^2 + 54*s12*s13 + 9*s13^2)*s23^2 + (9*s12 + 9*s13)*s23^3) +
          p1q^3*p2q^2*(-36*s12*s13^3 + (81*s12^2*s13 + 36*s12*s13^2 -
              9*s13^3)*s23 + (8*s12^2 + 81*s12*s13 + 17*s13^2)*s23^2 +
            (-2*s12 + 16*s13)*s23^3 - 2*s23^4) + p1q*p2q^4*
           (-36*s12*s13^3 + (72*s12^2*s13 + 18*s12*s13^2 - 18*s13^3)*s23 +
            (-s12^2 + 70*s12*s13 + 15*s13^2)*s23^2 + (-11*s12 + 23*s13)*
             s23^3 - 2*s23^4) + p1q^2*p2q^3*(-72*s12*s13^3 +
            (108*s12^2*s13 + 18*s12*s13^2 - 18*s13^3)*s23 +
            (92*s12*s13 + 34*s13^2)*s23^2 + (-18*s12 + 34*s13)*s23^3 -
            2*s23^4) + p3q*(p1q^4*((36*s12^2*s13 + 36*s12*s13^2)*s23 +
              (9*s12^2 + 54*s12*s13 + 9*s13^2)*s23^2 + (9*s12 + 9*s13)*s23^
                3) + p2q^4*((9*s12^3 + 90*s12^2*s13 + 99*s12*s13^2 +
                18*s13^3)*s23 + (27*s12^2 + 135*s12*s13 + 54*s13^2)*s23^2 +
              (18*s12 + 36*s13)*s23^3) + p1q^2*p2q^2*(144*s12^2*s13^2 -
              72*s12*s13^3 + (288*s12^2*s13 + 198*s12*s13^2 - 18*s13^3)*s23 +
              (34*s12^2 + 204*s12*s13 + 68*s13^2)*s23^2 + (-20*s12 + 32*s13)*
               s23^3 - 6*s23^4) + p1q^3*p2q*(72*s12^2*s13^2 +
              (-9*s12^3 + 189*s12^2*s13 + 189*s12*s13^2 - 9*s13^3)*s23 +
              (25*s12^2 + 198*s12*s13 + 25*s13^2)*s23^2 + (14*s12 + 14*s13)*
               s23^3 - 4*s23^4) + p1q*p2q^3*(72*s12^2*s13^2 - 72*s12*s13^3 +
              (198*s12^2*s13 + 108*s12*s13^2 - 18*s13^3)*s23 +
              (16*s12^2 + 162*s12*s13 + 66*s13^2)*s23^2 + (-20*s12 + 48*s13)*
               s23^3 - 4*s23^4)) + p3q^3*(p2q^2*((18*s12^3 + 126*s12^2*s13 +
                126*s12*s13^2 + 18*s13^3)*s23 + (54*s12^2 + 180*s12*s13 +
                54*s13^2)*s23^2 + (36*s12 + 36*s13)*s23^3) +
            p1q*p2q*(-72*s12^3*s13 + 72*s12^2*s13^2 + (-18*s12^3 +
                108*s12^2*s13 + 198*s12*s13^2)*s23 + (66*s12^2 +
                162*s12*s13 + 16*s13^2)*s23^2 + (48*s12 - 20*s13)*s23^3 -
              4*s23^4) + p1q^2*(-72*s12^3*s13 + (-18*s12^3 + 18*s12^2*s13 +
                108*s12*s13^2)*s23 + (34*s12^2 + 92*s12*s13)*s23^2 +
              (34*s12 - 18*s13)*s23^3 - 2*s23^4)) +
          p3q^4*(p2q*((18*s12^3 + 99*s12^2*s13 + 90*s12*s13^2 + 9*s13^3)*
               s23 + (54*s12^2 + 135*s12*s13 + 27*s13^2)*s23^2 +
              (36*s12 + 18*s13)*s23^3) + p1q*(-36*s12^3*s13 +
              (-18*s12^3 + 18*s12^2*s13 + 72*s12*s13^2)*s23 +
              (15*s12^2 + 70*s12*s13 - s13^2)*s23^2 + (23*s12 - 11*s13)*s23^
                3 - 2*s23^4)) + p3q^2*(p2q^3*((18*s12^3 + 126*s12^2*s13 +
                126*s12*s13^2 + 18*s13^3)*s23 + (54*s12^2 + 180*s12*s13 +
                54*s13^2)*s23^2 + (36*s12 + 36*s13)*s23^3) +
            p1q^2*p2q*(-72*s12^3*s13 + 144*s12^2*s13^2 + (-18*s12^3 +
                198*s12^2*s13 + 288*s12*s13^2)*s23 + (68*s12^2 +
                204*s12*s13 + 34*s13^2)*s23^2 + (32*s12 - 20*s13)*s23^3 -
              6*s23^4) + p1q*p2q^2*(-36*s12^3*s13 + 144*s12^2*s13^2 -
              36*s12*s13^3 + (216*s12^2*s13 + 216*s12*s13^2)*s23 +
              (68*s12^2 + 184*s12*s13 + 68*s13^2)*s23^2 + (16*s12 + 16*s13)*
               s23^3 - 4*s23^4) + p1q^3*(-36*s12^3*s13 + (-9*s12^3 +
                36*s12^2*s13 + 81*s12*s13^2)*s23 + (17*s12^2 + 81*s12*s13 +
                8*s13^2)*s23^2 + (16*s12 - 2*s13)*s23^3 - 2*s23^4)))*
         Log(-s12 - s13 - s23))/(18*p1q^3*p2q^2*s12*s13*s23^2 +
         36*p1q^2*p2q^3*s12*s13*s23^2 + 18*p1q*p2q^4*s12*s13*s23^2 +
         18*p1q*p3q^4*s12*s13*s23^2 + p3q^3*(36*p1q^2*s12*s13*s23^2 +
           72*p1q*p2q*s12*s13*s23^2) + p3q^2*(18*p1q^3*s12*s13*s23^2 +
           108*p1q^2*p2q*s12*s13*s23^2 + 108*p1q*p2q^2*s12*s13*s23^2) +
         p3q*(36*p1q^3*p2q*s12*s13*s23^2 + 108*p1q^2*p2q^2*s12*s13*s23^2 +
           72*p1q*p2q^3*s12*s13*s23^2)) +
       ((p3q^5*((2*s12^6 + 28*s12^5*s13 + 78*s12^4*s13^2 + 94*s12^3*s13^3 +
              56*s12^2*s13^4 + 14*s12*s13^5)*s23 + (6*s12^5 + 56*s12^4*s13 +
              104*s12^3*s13^2 + 80*s12^2*s13^3 + 26*s12*s13^4)*s23^2 +
            (4*s12^4 + 26*s12^3*s13 + 26*s12^2*s13^2 + 12*s12*s13^3)*s23^3) +
          p2q^5*((14*s12^5*s13 + 56*s12^4*s13^2 + 94*s12^3*s13^3 +
              78*s12^2*s13^4 + 28*s12*s13^5 + 2*s13^6)*s23 +
            (26*s12^4*s13 + 80*s12^3*s13^2 + 104*s12^2*s13^3 + 56*s12*s13^4 +
              6*s13^5)*s23^2 + (12*s12^3*s13 + 26*s12^2*s13^2 +
              26*s12*s13^3 + 4*s13^4)*s23^3) + p1q*p2q^4*(-16*s12^4*s13^3 -
            48*s12^3*s13^4 - 48*s12^2*s13^5 - 16*s12*s13^6 +
            (32*s12^5*s13 + 110*s12^4*s13^2 + 114*s12^3*s13^3 +
              22*s12^2*s13^4 - 18*s12*s13^5 - 4*s13^6)*s23 +
            (-2*s12^5 + 30*s12^4*s13 + 80*s12^3*s13^2 + 46*s12^2*s13^3 -
              6*s12*s13^4 - 4*s13^5)*s23^2 + (-6*s12^4 - 19*s12^3*s13 -
              39*s12^2*s13^2 - 41*s12*s13^3 - 7*s13^4)*s23^3 +
            (-4*s12^3 - 15*s12^2*s13 - 26*s12*s13^2 - 7*s13^3)*s23^4) +
          p1q^4*p2q*((16*s12^5*s13 + 64*s12^4*s13^2 + 96*s12^3*s13^3 +
              64*s12^2*s13^4 + 16*s12*s13^5)*s23 + (2*s12^5 + 38*s12^4*s13 +
              104*s12^3*s13^2 + 104*s12^2*s13^3 + 38*s12*s13^4 + 2*s13^5)*
             s23^2 + (2*s12^4 + 32*s12^3*s13 + 60*s12^2*s13^2 +
              32*s12*s13^3 + 2*s13^4)*s23^3 + (20*s12^2*s13 + 20*s12*s13^2)*
             s23^4 + 8*s12*s13*s23^5) + p1q^2*p2q^3*(-32*s12^4*s13^3 -
            96*s12^3*s13^4 - 96*s12^2*s13^5 - 32*s12*s13^6 +
            (48*s12^5*s13 + 168*s12^4*s13^2 + 176*s12^3*s13^3 +
              36*s12^2*s13^4 - 24*s12*s13^5 - 4*s13^6)*s23 +
            (58*s12^4*s13 + 180*s12^3*s13^2 + 170*s12^2*s13^3 +
              52*s12*s13^4 + 4*s13^5)*s23^2 + (-4*s12^4 + 9*s12^3*s13 +
              69*s12^2*s13^2 + 49*s12*s13^3 + 9*s13^4)*s23^3 +
            (-3*s12^3 + 20*s12^2*s13 + 39*s12*s13^2 + 8*s13^3)*s23^4 +
            (s12^2 + 16*s12*s13 + 7*s13^2)*s23^5) + p1q^3*p2q^2*
           (-16*s12^4*s13^3 - 48*s12^3*s13^4 - 48*s12^2*s13^5 -
            16*s12*s13^6 + (34*s12^5*s13 + 130*s12^4*s13^2 + 160*s12^3*s13^
                3 + 64*s12^2*s13^4 - 2*s12*s13^5 - 2*s13^6)*s23 +
            (48*s12^4*s13 + 146*s12^3*s13^2 + 126*s12^2*s13^3 +
              30*s12*s13^4 + 2*s13^5)*s23^2 + (-4*s12^4 + 6*s12^3*s13 +
              20*s12^2*s13^2 - 6*s12*s13^3)*s23^3 +
            (-7*s12^3 - 13*s12^2*s13 - 21*s12*s13^2 - 7*s13^3)*s23^4 +
            (-7*s12^2 - 14*s12*s13 - 7*s13^2)*s23^5 + (-4*s12 - 4*s13)*
             s23^6) + p3q^4*(p2q*((4*s12^6 + 78*s12^5*s13 + 216*s12^4*s13^2 +
                262*s12^3*s13^3 + 170*s12^2*s13^4 + 52*s12*s13^5 + 2*s13^6)*
               s23 + (12*s12^5 + 154*s12^4*s13 + 280*s12^3*s13^2 +
                232*s12^2*s13^3 + 100*s12*s13^4 + 6*s13^5)*s23^2 +
              (8*s12^4 + 72*s12^3*s13 + 66*s12^2*s13^2 + 46*s12*s13^3 +
                4*s13^4)*s23^3) + p1q*(-16*s12^6*s13 - 48*s12^5*s13^2 -
              48*s12^4*s13^3 - 16*s12^3*s13^4 + (-4*s12^6 - 18*s12^5*s13 +
                22*s12^4*s13^2 + 114*s12^3*s13^3 + 110*s12^2*s13^4 +
                32*s12*s13^5)*s23 + (-4*s12^5 - 6*s12^4*s13 + 46*s12^3*
                 s13^2 + 80*s12^2*s13^3 + 30*s12*s13^4 - 2*s13^5)*s23^2 +
              (-7*s12^4 - 41*s12^3*s13 - 39*s12^2*s13^2 - 19*s12*s13^3 -
                6*s13^4)*s23^3 + (-7*s12^3 - 26*s12^2*s13 - 15*s12*s13^2 -
                4*s13^3)*s23^4)) + p3q^3*(p2q^2*((4*s12^6 + 96*s12^5*s13 +
                256*s12^4*s13^2 + 316*s12^3*s13^3 + 232*s12^2*s13^4 +
                84*s12*s13^5 + 4*s13^6)*s23 + (12*s12^5 + 188*s12^4*s13 +
                320*s12^3*s13^2 + 296*s12^2*s13^3 + 164*s12*s13^4 + 12*s13^5)*
               s23^2 + (8*s12^4 + 88*s12^3*s13 + 68*s12^2*s13^2 +
                76*s12*s13^3 + 8*s13^4)*s23^3) + p1q*p2q*(-32*s12^6*s13 -
              64*s12^5*s13^2 + 64*s12^3*s13^4 + 32*s12^2*s13^5 +
              (-4*s12^6 - 2*s12^5*s13 + 180*s12^4*s13^2 + 432*s12^3*s13^3 +
                336*s12^2*s13^4 + 82*s12*s13^5)*s23 + (22*s12^4*s13 +
                174*s12^3*s13^2 + 234*s12^2*s13^3 + 82*s12*s13^4)*s23^2 +
              (-11*s12^4 - 94*s12^3*s13 - 92*s12^2*s13^2 - 50*s12*s13^3 -
                9*s13^4)*s23^3 + (-15*s12^3 - 63*s12^2*s13 - 41*s12*s13^2 -
                9*s13^3)*s23^4) + p1q^2*(-32*s12^6*s13 - 96*s12^5*s13^2 -
              96*s12^4*s13^3 - 32*s12^3*s13^4 + (-4*s12^6 - 24*s12^5*s13 +
                36*s12^4*s13^2 + 176*s12^3*s13^3 + 168*s12^2*s13^4 +
                48*s12*s13^5)*s23 + (4*s12^5 + 52*s12^4*s13 + 170*s12^3*
                 s13^2 + 180*s12^2*s13^3 + 58*s12*s13^4)*s23^2 +
              (9*s12^4 + 49*s12^3*s13 + 69*s12^2*s13^2 + 9*s12*s13^3 -
                4*s13^4)*s23^3 + (8*s12^3 + 39*s12^2*s13 + 20*s12*s13^2 -
                3*s13^3)*s23^4 + (7*s12^2 + 16*s12*s13 + s13^2)*s23^5)) +
          p3q*(p2q^4*((2*s12^6 + 52*s12^5*s13 + 170*s12^4*s13^2 +
                262*s12^3*s13^3 + 216*s12^2*s13^4 + 78*s12*s13^5 + 4*s13^6)*
               s23 + (6*s12^5 + 100*s12^4*s13 + 232*s12^3*s13^2 +
                280*s12^2*s13^3 + 154*s12*s13^4 + 12*s13^5)*s23^2 +
              (4*s12^4 + 46*s12^3*s13 + 66*s12^2*s13^2 + 72*s12*s13^3 +
                8*s13^4)*s23^3) + p1q*p2q^3*(32*s12^5*s13^2 +
              64*s12^4*s13^3 - 64*s12^2*s13^5 - 32*s12*s13^6 +
              (82*s12^5*s13 + 336*s12^4*s13^2 + 432*s12^3*s13^3 +
                180*s12^2*s13^4 - 2*s12*s13^5 - 4*s13^6)*s23 +
              (82*s12^4*s13 + 234*s12^3*s13^2 + 174*s12^2*s13^3 +
                22*s12*s13^4)*s23^2 + (-9*s12^4 - 50*s12^3*s13 -
                92*s12^2*s13^2 - 94*s12*s13^3 - 11*s13^4)*s23^3 +
              (-9*s12^3 - 41*s12^2*s13 - 63*s12*s13^2 - 15*s13^3)*s23^4) +
            p1q^4*((16*s12^5*s13 + 64*s12^4*s13^2 + 96*s12^3*s13^3 +
                64*s12^2*s13^4 + 16*s12*s13^5)*s23 + (2*s12^5 +
                38*s12^4*s13 + 104*s12^3*s13^2 + 104*s12^2*s13^3 +
                38*s12*s13^4 + 2*s13^5)*s23^2 + (2*s12^4 + 32*s12^3*s13 +
                60*s12^2*s13^2 + 32*s12*s13^3 + 2*s13^4)*s23^3 +
              (20*s12^2*s13 + 20*s12*s13^2)*s23^4 + 8*s12*s13*s23^5) +
            p1q^2*p2q^2*(64*s12^5*s13^2 + 160*s12^4*s13^3 + 96*s12^3*s13^4 -
              32*s12^2*s13^5 - 32*s12*s13^6 + (108*s12^5*s13 + 480*s12^4*
                 s13^2 + 680*s12^3*s13^3 + 348*s12^2*s13^4 + 36*s12*s13^5 -
                4*s13^6)*s23 + (4*s12^5 + 128*s12^4*s13 + 410*s12^3*s13^2 +
                400*s12^2*s13^3 + 122*s12*s13^4 + 8*s13^5)*s23^2 +
              (-3*s12^4 + 31*s12^3*s13 + 143*s12^2*s13^2 + 71*s12*s13^3 +
                10*s13^4)*s23^3 + (2*s12^3 + 79*s12^2*s13 + 98*s12*s13^2 +
                13*s13^3)*s23^4 + (9*s12^2 + 48*s12*s13 + 15*s13^2)*s23^5) +
            p1q^3*p2q*(32*s12^5*s13^2 + 96*s12^4*s13^3 + 96*s12^3*s13^4 +
              32*s12^2*s13^5 + (-2*s12^6 + 64*s12^5*s13 + 322*s12^4*s13^2 +
                512*s12^3*s13^3 + 322*s12^2*s13^4 + 64*s12*s13^5 - 2*s13^6)*
               s23 + (2*s12^5 + 94*s12^4*s13 + 320*s12^3*s13^2 +
                320*s12^2*s13^3 + 94*s12*s13^4 + 2*s13^5)*s23^2 +
              (-4*s12^4 + 40*s12^2*s13^2 - 4*s13^4)*s23^3 + (-14*s12^3 -
                34*s12^2*s13 - 34*s12*s13^2 - 14*s13^3)*s23^4 +
              (-14*s12^2 - 28*s12*s13 - 14*s13^2)*s23^5 + (-8*s12 - 8*s13)*
               s23^6)) + p3q^2*(p2q^3*((4*s12^6 + 84*s12^5*s13 +
                232*s12^4*s13^2 + 316*s12^3*s13^3 + 256*s12^2*s13^4 +
                96*s12*s13^5 + 4*s13^6)*s23 + (12*s12^5 + 164*s12^4*s13 +
                296*s12^3*s13^2 + 320*s12^2*s13^3 + 188*s12*s13^4 + 12*s13^5)*
               s23^2 + (8*s12^4 + 76*s12^3*s13 + 68*s12^2*s13^2 +
                88*s12*s13^3 + 8*s13^4)*s23^3) + p1q*p2q^2*(-16*s12^6*s13 +
              16*s12^5*s13^2 + 128*s12^4*s13^3 + 128*s12^3*s13^4 +
              16*s12^2*s13^5 - 16*s12*s13^6 + (66*s12^5*s13 + 384*s12^4*
                 s13^2 + 636*s12^3*s13^3 + 384*s12^2*s13^4 + 66*s12*s13^5)*
               s23 + (6*s12^5 + 80*s12^4*s13 + 282*s12^3*s13^2 +
                282*s12^2*s13^3 + 80*s12*s13^4 + 6*s13^5)*s23^2 +
              (-7*s12^4 - 84*s12^3*s13 - 106*s12^2*s13^2 - 84*s12*s13^3 -
                7*s13^4)*s23^3 + (-13*s12^3 - 63*s12^2*s13 - 63*s12*s13^2 -
                13*s13^3)*s23^4) + p1q^2*p2q*(-32*s12^6*s13 -
              32*s12^5*s13^2 + 96*s12^4*s13^3 + 160*s12^3*s13^4 +
              64*s12^2*s13^5 + (-4*s12^6 + 36*s12^5*s13 + 348*s12^4*s13^2 +
                680*s12^3*s13^3 + 480*s12^2*s13^4 + 108*s12*s13^5)*s23 +
              (8*s12^5 + 122*s12^4*s13 + 400*s12^3*s13^2 + 410*s12^2*s13^3 +
                128*s12*s13^4 + 4*s13^5)*s23^2 + (10*s12^4 + 71*s12^3*s13 +
                143*s12^2*s13^2 + 31*s12*s13^3 - 3*s13^4)*s23^3 +
              (13*s12^3 + 98*s12^2*s13 + 79*s12*s13^2 + 2*s13^3)*s23^4 +
              (15*s12^2 + 48*s12*s13 + 9*s13^2)*s23^5) +
            p1q^3*(-16*s12^6*s13 - 48*s12^5*s13^2 - 48*s12^4*s13^3 -
              16*s12^3*s13^4 + (-2*s12^6 - 2*s12^5*s13 + 64*s12^4*s13^2 +
                160*s12^3*s13^3 + 130*s12^2*s13^4 + 34*s12*s13^5)*s23 +
              (2*s12^5 + 30*s12^4*s13 + 126*s12^3*s13^2 + 146*s12^2*s13^3 +
                48*s12*s13^4)*s23^2 + (-6*s12^3*s13 + 20*s12^2*s13^2 +
                6*s12*s13^3 - 4*s13^4)*s23^3 + (-7*s12^3 - 21*s12^2*s13 -
                13*s12*s13^2 - 7*s13^3)*s23^4 + (-7*s12^2 - 14*s12*s13 -
                7*s13^2)*s23^5 + (-4*s12 - 4*s13)*s23^6)))*
         Log(s23/(s12 + s13 + s23)))/(p1q^3*p2q^2*(8*s12^4*s13 +
           24*s12^3*s13^2 + 24*s12^2*s13^3 + 8*s12*s13^4)*s23^2 +
         p1q*p2q^4*(8*s12^4*s13 + 24*s12^3*s13^2 + 24*s12^2*s13^3 +
           8*s12*s13^4)*s23^2 + p1q*p3q^4*(8*s12^4*s13 + 24*s12^3*s13^2 +
           24*s12^2*s13^3 + 8*s12*s13^4)*s23^2 + p1q^2*p2q^3*
          (16*s12^4*s13 + 48*s12^3*s13^2 + 48*s12^2*s13^3 + 16*s12*s13^4)*
          s23^2 + p3q^3*(p1q^2*(16*s12^4*s13 + 48*s12^3*s13^2 +
             48*s12^2*s13^3 + 16*s12*s13^4)*s23^2 +
           p1q*p2q*(32*s12^4*s13 + 96*s12^3*s13^2 + 96*s12^2*s13^3 +
             32*s12*s13^4)*s23^2) +
         p3q^2*(p1q^3*(8*s12^4*s13 + 24*s12^3*s13^2 + 24*s12^2*s13^3 +
             8*s12*s13^4)*s23^2 + p1q^2*p2q*(48*s12^4*s13 + 144*s12^3*s13^2 +
             144*s12^2*s13^3 + 48*s12*s13^4)*s23^2 + p1q*p2q^2*
            (48*s12^4*s13 + 144*s12^3*s13^2 + 144*s12^2*s13^3 + 48*s12*s13^4)*
            s23^2) + p3q*(p1q^3*p2q*(16*s12^4*s13 + 48*s12^3*s13^2 +
             48*s12^2*s13^3 + 16*s12*s13^4)*s23^2 + p1q*p2q^3*
            (32*s12^4*s13 + 96*s12^3*s13^2 + 96*s12^2*s13^3 + 32*s12*s13^4)*
            s23^2 + p1q^2*p2q^2*(48*s12^4*s13 + 144*s12^3*s13^2 +
             144*s12^2*s13^3 + 48*s12*s13^4)*s23^2))) +
     Log((p1q + p3q)/(p1q + p2q + p3q))*
      (((p2q^4*(s12*s13^2 + s13^3 + s13^2*s23) + p3q^4*(s12^3 + s12^2*s13 +
            (2*s12^2 + s12*s13)*s23 + s12*s23^2) + p1q*p2q^3*
           (2*s12*s13^2 + 2*s13^3 - 2*s12*s13*s23 - 2*s13*s23^2) +
          p1q^2*p2q^2*(2*s12*s13^2 + 2*s13^3 + (-4*s12*s13 - 2*s13^2)*s23 +
            (s12 - 3*s13)*s23^2 + s23^3) + p1q^3*p2q*(-3*s12^2*s13 -
            3*s12*s13^2 + (-7*s12*s13 - 4*s13^2)*s23 + (2*s12 - 2*s13)*
             s23^2 + 2*s23^3) + p1q^4*(2*s12^3 + 2*s12^2*s13 +
            (5*s12^2 + 3*s12*s13)*s23 + (5*s12 + 2*s13)*s23^2 + 2*s23^3) +
          p3q^3*(p2q*(-2*s12^2*s13 - 2*s12*s13^2 + (-3*s12*s13 - s13^2)*s23 -
              s13*s23^2) + p1q*(6*s12^3 + 6*s12^2*s13 + (12*s12^2 +
                6*s12*s13)*s23 + (7*s12 + s13)*s23^2 + s23^3)) +
          p3q^2*(p2q^2*(s12^3 + s12^2*s13 + s12*s13^2 + s13^3 +
              (2*s12^2 + s12*s13 + s13^2)*s23 + s12*s23^2) +
            p1q*p2q*(-8*s12^2*s13 - 8*s12*s13^2 + (-2*s12^2 - 14*s12*s13 -
                4*s13^2)*s23 + (-2*s12 - 4*s13)*s23^2) +
            p1q^2*(10*s12^3 + 10*s12^2*s13 + (20*s12^2 + 10*s12*s13)*s23 +
              (13*s12 + 3*s13)*s23^2 + 3*s23^3)) +
          p3q*(p2q^3*(-2*s12^2*s13 - 2*s12*s13^2 + (-3*s12*s13 - s13^2)*s23 -
              s13*s23^2) + p1q*p2q^2*(-2*s12^2*s13 + 2*s13^3 -
              4*s12*s13*s23 + (s12 - s13)*s23^2 + s23^3) +
            p1q^2*p2q*(-8*s12^2*s13 - 8*s12*s13^2 + (-2*s12^2 - 16*s12*s13 -
                6*s13^2)*s23 - 4*s13*s23^2 + 2*s23^3) +
            p1q^3*(7*s12^3 + 7*s12^2*s13 + (15*s12^2 + 8*s12*s13)*s23 +
              (12*s12 + 4*s13)*s23^2 + 4*s23^3)))*Log(s12/(s12 + s13 + s23)))/
        (-8*p1q*p2q^3*s12*s13^2 + p1q^4*(8*s12^2*s13 + 8*s12*s13*s23) +
         p1q*p3q^3*(8*s12^2*s13 + 8*s12*s13*s23) + p1q^2*p2q^2*
          (8*s12^2*s13 - 16*s12*s13^2 + 8*s12*s13*s23) +
         p1q^3*p2q*(16*s12^2*s13 - 8*s12*s13^2 + 16*s12*s13*s23) +
         p3q^2*(p1q*p2q*(16*s12^2*s13 - 8*s12*s13^2 + 16*s12*s13*s23) +
           p1q^2*(24*s12^2*s13 + 24*s12*s13*s23)) +
         p3q*(p1q*p2q^2*(8*s12^2*s13 - 16*s12*s13^2 + 8*s12*s13*s23) +
           p1q^3*(24*s12^2*s13 + 24*s12*s13*s23) + p1q^2*p2q*
            (32*s12^2*s13 - 16*s12*s13^2 + 32*s12*s13*s23))) +
       ((p2q^5*(-9*s12^2*s13^2 - 9*s12*s13^3 + (-10*s12*s13^2 - s13^3)*s23 -
            s13^2*s23^2) + p1q^5*((9*s12^3 + 18*s12^2*s13 + 9*s12*s13^2)*
             s23 + (18*s12^2 + 18*s12*s13)*s23^2 + 9*s12*s23^3) +
          p3q^5*(18*s12^4 + 45*s12^3*s13 + 27*s12^2*s13^2 +
            (71*s12^3 + 116*s12^2*s13 + 36*s12*s13^2)*s23 +
            (88*s12^2 + 71*s12*s13)*s23^2 + 35*s12*s23^3) +
          p1q*p2q^4*(-18*s12^2*s13^2 - 18*s12*s13^3 +
            (20*s12^2*s13 + 2*s12*s13^2)*s23 + (24*s12*s13 + 4*s13^2)*s23^2 +
            4*s13*s23^3) + p1q^2*p2q^3*(-18*s12^2*s13^2 - 18*s12*s13^3 +
            (-2*s12^3 + 32*s12^2*s13 + 14*s12*s13^2 - 2*s13^3)*s23 +
            (-15*s12^2 + 23*s12*s13)*s23^2 + (-16*s12 - s13)*s23^3 -
            3*s23^4) + p1q^4*p2q*(9*s12^3*s13 - 9*s12*s13^3 +
            (16*s12^3 + 43*s12^2*s13 + 9*s12*s13^2)*s23 +
            (22*s12^2 + 24*s12*s13)*s23^2 + (4*s12 - 2*s13)*s23^3 -
            2*s23^4) + p1q^3*p2q^2*(-27*s12^2*s13^2 - 27*s12*s13^3 +
            (12*s12^2*s13 - 15*s12*s13^2)*s23 + (-18*s12^2 - 2*s12*s13 +
              4*s13^2)*s23^2 + (-20*s12 + 2*s13)*s23^3 - 2*s23^4) +
          p3q^4*(p2q*(18*s12^4 + 36*s12^3*s13 - 9*s12^2*s13^2 -
              27*s12*s13^3 + (71*s12^3 + 91*s12^2*s13 - 7*s12*s13^2)*s23 +
              (88*s12^2 + 56*s12*s13 + s13^2)*s23^2 + (35*s12 + s13)*s23^3) +
            p1q*(54*s12^3*s13 + 54*s12^2*s13^2 + (91*s12^3 + 242*s12^2*s13 +
                97*s12*s13^2)*s23 + (171*s12^2 + 175*s12*s13 - 2*s13^2)*s23^
                2 + (77*s12 - 5*s13)*s23^3 - 3*s23^4)) +
          p3q^3*(p2q^2*(18*s12^4 + 36*s12^3*s13 - 18*s12^2*s13^2 -
              36*s12*s13^3 + (71*s12^3 + 91*s12^2*s13 - 17*s12*s13^2 - s13^3)*
               s23 + (88*s12^2 + 56*s12*s13)*s23^2 + (35*s12 + s13)*s23^3) +
            p1q^2*(-36*s12^4 + 18*s12^3*s13 + 54*s12^2*s13^2 +
              (60*s12^3 + 292*s12^2*s13 + 142*s12*s13^2)*s23 +
              (199*s12^2 + 243*s12*s13 - 2*s13^2)*s23^2 + (98*s12 - 7*s13)*
               s23^3 - 5*s23^4) + p1q*p2q*(18*s12^4 + 126*s12^3*s13 +
              72*s12^2*s13^2 - 36*s12*s13^3 + (145*s12^3 + 342*s12^2*s13 +
                73*s12*s13^2 + 2*s13^3)*s23 + (209*s12^2 + 193*s12*s13 +
                6*s13^2)*s23^2 + (79*s12 + s13)*s23^3 - 3*s23^4)) +
          p3q^2*(p2q^3*(18*s12^4 + 36*s12^3*s13 - 18*s12^2*s13^2 -
              36*s12*s13^3 + (71*s12^3 + 91*s12^2*s13 - 17*s12*s13^2 - s13^3)*
               s23 + (88*s12^2 + 56*s12*s13)*s23^2 + (35*s12 + s13)*s23^3) +
            p1q^2*p2q*(108*s12^3*s13 + 54*s12^2*s13^2 - 54*s12*s13^3 +
              (132*s12^3 + 372*s12^2*s13 + 78*s12*s13^2)*s23 +
              (201*s12^2 + 205*s12*s13 + 4*s13^2)*s23^2 + (62*s12 - 3*s13)*
               s23^3 - 7*s23^4) + p1q^3*(-27*s12^4 + 9*s12^3*s13 +
              36*s12^2*s13^2 + (56*s12^3 + 245*s12^2*s13 + 126*s12*s13^2)*
               s23 + (165*s12^2 + 208*s12*s13)*s23^2 + (78*s12 - 4*s13)*s23^
                3 - 4*s23^4) + p1q*p2q^2*(18*s12^4 + 72*s12^3*s13 -
              18*s12^2*s13^2 - 72*s12*s13^3 + (79*s12^3 + 152*s12^2*s13 -
                35*s12*s13^2)*s23 + (77*s12^2 + 59*s12*s13 + 6*s13^2)*s23^2 +
              (13*s12 + 3*s13)*s23^3 - 3*s23^4)) +
          p3q*(p2q^4*(-9*s12^3*s13 - 45*s12^2*s13^2 - 36*s12*s13^3 +
              (-25*s12^2*s13 - 53*s12*s13^2 - s13^3)*s23 - 15*s12*s13*s23^2 +
              s13*s23^3) + p1q^3*p2q*(54*s12^3*s13 + 18*s12^2*s13^2 -
              36*s12*s13^3 + (74*s12^3 + 221*s12^2*s13 + 57*s12*s13^2)*s23 +
              (102*s12^2 + 125*s12*s13 + 4*s13^2)*s23^2 + (22*s12 - 2*s13)*
               s23^3 - 6*s23^4) + p1q^2*p2q^2*(18*s12^3*s13 -
              54*s12^2*s13^2 - 72*s12*s13^3 + (16*s12^3 + 76*s12^2*s13 -
                32*s12*s13^2 - 2*s13^3)*s23 + (-13*s12^2 + 21*s12*s13 +
                6*s13^2)*s23^2 + (-34*s12 + 3*s13)*s23^3 - 5*s23^4) +
            p1q*p2q^3*(18*s12^4 + 54*s12^3*s13 - 36*s12*s13^3 +
              (61*s12^3 + 144*s12^2*s13 + 27*s12*s13^2 - 2*s13^3)*s23 +
              (57*s12^2 + 83*s12*s13 + 2*s13^2)*s23^2 + (11*s12 + s13)*s23^
                3 - 3*s23^4) + p1q^4*(-9*s12^4 + 9*s12^2*s13^2 +
              (25*s12^3 + 97*s12^2*s13 + 54*s12*s13^2)*s23 +
              (67*s12^2 + 87*s12*s13)*s23^2 + (31*s12 - 2*s13)*s23^3 -
              2*s23^4)))*Log(s13/(s12 + s13 + s23)))/
        (-8*p1q*p2q^4*s12*s13^2*s23 + p1q^4*p2q*(8*s12^2*s13*s23 +
           8*s12*s13*s23^2) + p1q*p3q^4*(8*s12^2*s13*s23 + 8*s12*s13*s23^2) +
         p1q^2*p2q^3*((8*s12^2*s13 - 16*s12*s13^2)*s23 + 8*s12*s13*s23^2) +
         p1q^3*p2q^2*((16*s12^2*s13 - 8*s12*s13^2)*s23 + 16*s12*s13*s23^2) +
         p3q^3*(p1q^2*(24*s12^2*s13*s23 + 24*s12*s13*s23^2) +
           p1q*p2q*((24*s12^2*s13 - 8*s12*s13^2)*s23 + 24*s12*s13*s23^2)) +
         p3q*(p1q^4*(8*s12^2*s13*s23 + 8*s12*s13*s23^2) +
           p1q*p2q^3*((8*s12^2*s13 - 24*s12*s13^2)*s23 + 8*s12*s13*s23^2) +
           p1q^2*p2q^2*((40*s12^2*s13 - 32*s12*s13^2)*s23 +
             40*s12*s13*s23^2) + p1q^3*p2q*((40*s12^2*s13 - 8*s12*s13^2)*
              s23 + 40*s12*s13*s23^2)) +
         p3q^2*(p1q^3*(24*s12^2*s13*s23 + 24*s12*s13*s23^2) +
           p1q*p2q^2*((24*s12^2*s13 - 24*s12*s13^2)*s23 + 24*s12*s13*s23^2) +
           p1q^2*p2q*((56*s12^2*s13 - 16*s12*s13^2)*s23 +
             56*s12*s13*s23^2))) +
       ((p2q^5*(9*s12*s13^2 + 9*s13^3 + 9*s13^2*s23) +
          p1q*p2q^4*(18*s12*s13^2 + 18*s13^3 - 18*s12*s13*s23 -
            18*s13*s23^2) + p3q^5*(-9*s12^2*s13 - 9*s12*s13^2 +
            (-18*s12^2 - 45*s12*s13 - 18*s13^2)*s23 + (-36*s12 - 36*s13)*
             s23^2 - 18*s23^3) + p1q^4*p2q*(-9*s12^2*s13 + 9*s13^3 +
            (-18*s12^2 - 45*s12*s13 - 9*s13^2)*s23 + (-27*s12 - 27*s13)*
             s23^2 - 9*s23^3) + p1q^5*((-9*s12^2 - 18*s12*s13 - 9*s13^2)*
             s23 + (-18*s12 - 18*s13)*s23^2 - 9*s23^3) +
          p1q^2*p2q^3*(18*s12*s13^2 + 18*s13^3 + (-36*s12*s13 - 18*s13^2)*
             s23 + (9*s12 - 27*s13)*s23^2 + 9*s23^3) +
          p1q^3*p2q^2*(27*s12*s13^2 + 27*s13^3 + (-9*s12*s13 + 18*s13^2)*
             s23 + (18*s12 + 9*s13)*s23^2 + 18*s23^3) +
          p3q^3*(p1q^2*(36*s12^3 - 18*s12^2*s13 - 54*s12*s13^2 +
              (-72*s12^2 - 306*s12*s13 - 144*s13^2)*s23 + (-225*s12 -
                261*s13)*s23^2 - 117*s23^3) + p1q*p2q*(-90*s12^2*s13 -
              54*s12*s13^2 + 36*s13^3 + (-99*s12^2 - 270*s12*s13 - 45*s13^2)*
               s23 + (-171*s12 - 153*s13)*s23^2 - 72*s23^3) +
            p2q^2*(-18*s12^2*s13 + 18*s13^3 + (-18*s12^2 - 54*s12*s13)*s23 +
              (-36*s12 - 36*s13)*s23^2 - 18*s23^3)) +
          p3q^2*(p1q*p2q^2*(-36*s12^2*s13 + 36*s12*s13^2 + 72*s13^3 +
              (-27*s12^2 - 72*s12*s13 + 63*s13^2)*s23 + (-27*s12 - 9*s13)*s23^
                2) + p1q^3*(27*s12^3 - 9*s12^2*s13 - 36*s12*s13^2 +
              (-63*s12^2 - 252*s12*s13 - 126*s13^2)*s23 + (-180*s12 -
                216*s13)*s23^2 - 90*s23^3) + p1q^2*p2q*(-108*s12^2*s13 -
              54*s12*s13^2 + 54*s13^3 + (-144*s12^2 - 378*s12*s13 - 72*s13^2)*
               s23 + (-225*s12 - 207*s13)*s23^2 - 81*s23^3) +
            p2q^3*(-18*s12^2*s13 + 18*s13^3 + (-18*s12^2 - 54*s12*s13)*s23 +
              (-36*s12 - 36*s13)*s23^2 - 18*s23^3)) +
          p3q^4*(p1q*(18*s12^3 - 18*s12^2*s13 - 36*s12*s13^2 +
              (-45*s12^2 - 180*s12*s13 - 81*s13^2)*s23 + (-135*s12 - 153*s13)*
               s23^2 - 72*s23^3) + p2q*(-18*s12^2*s13 - 9*s12*s13^2 +
              9*s13^3 + (-18*s12^2 - 54*s12*s13 - 9*s13^2)*s23 +
              (-36*s12 - 36*s13)*s23^2 - 18*s23^3)) +
          p3q*(p2q^4*(-9*s12^2*s13 + 9*s12*s13^2 + 18*s13^3 +
              (-9*s12*s13 + 18*s13^2)*s23) + p1q*p2q^3*(-18*s12^2*s13 +
              18*s12*s13^2 + 36*s13^3 + (-9*s12^2 - 72*s12*s13 - 9*s13^2)*
               s23 + (-9*s12 - 45*s13)*s23^2) + p1q^3*p2q*(-54*s12^2*s13 -
              18*s12*s13^2 + 36*s13^3 + (-81*s12^2 - 225*s12*s13 - 54*s13^2)*
               s23 + (-117*s12 - 126*s13)*s23^2 - 36*s23^3) +
            p1q^4*(9*s12^3 - 9*s12*s13^2 + (-27*s12^2 - 99*s12*s13 -
                54*s13^2)*s23 + (-72*s12 - 90*s13)*s23^2 - 36*s23^3) +
            p1q^2*p2q^2*(-18*s12^2*s13 + 54*s12*s13^2 + 72*s13^3 +
              (-18*s12^2 - 72*s12*s13 + 36*s13^2)*s23 + (9*s12 - 9*s13)*s23^
                2 + 27*s23^3)))*Log(s23/(s12 + s13 + s23)))/
        (-8*p1q*p2q^4*s13^2*s23 + p1q^4*p2q*(8*s12*s13*s23 + 8*s13*s23^2) +
         p1q*p3q^4*(8*s12*s13*s23 + 8*s13*s23^2) + p1q^2*p2q^3*
          ((8*s12*s13 - 16*s13^2)*s23 + 8*s13*s23^2) +
         p1q^3*p2q^2*((16*s12*s13 - 8*s13^2)*s23 + 16*s13*s23^2) +
         p3q^3*(p1q^2*(24*s12*s13*s23 + 24*s13*s23^2) +
           p1q*p2q*((24*s12*s13 - 8*s13^2)*s23 + 24*s13*s23^2)) +
         p3q*(p1q^4*(8*s12*s13*s23 + 8*s13*s23^2) + p1q*p2q^3*
            ((8*s12*s13 - 24*s13^2)*s23 + 8*s13*s23^2) +
           p1q^2*p2q^2*((40*s12*s13 - 32*s13^2)*s23 + 40*s13*s23^2) +
           p1q^3*p2q*((40*s12*s13 - 8*s13^2)*s23 + 40*s13*s23^2)) +
         p3q^2*(p1q^3*(24*s12*s13*s23 + 24*s13*s23^2) +
           p1q*p2q^2*((24*s12*s13 - 24*s13^2)*s23 + 24*s13*s23^2) +
           p1q^2*p2q*((56*s12*s13 - 16*s13^2)*s23 + 56*s13*s23^2))) +
       ((p2q^2*p3q*(-9*s12^3 - 18*s12^2*s13 - 9*s12*s13^2 +
            (-18*s12^2 - 18*s12*s13)*s23 - 9*s12*s23^2) +
          p3q^3*(-9*s12^3 - 18*s12^2*s13 - 9*s12*s13^2 +
            (-18*s12^2 - 18*s12*s13)*s23 - 9*s12*s23^2) +
          p1q*p2q^2*((s12^2 + 2*s12*s13 + s13^2)*s23 + (2*s12 + 2*s13)*
             s23^2 + s23^3) + p1q*p3q^2*((s12^2 + 2*s12*s13 + s13^2)*s23 +
            (2*s12 + 2*s13)*s23^2 + s23^3))*
         Log((s12 + s23)/(s12 + s13 + s23)))/(4*p1q^3*s12*s13*s23 +
         8*p1q^2*p2q*s12*s13*s23 + 4*p1q*p2q^2*s12*s13*s23 +
         4*p1q*p3q^2*s12*s13*s23 + p3q*(8*p1q^2*s12*s13*s23 +
           8*p1q*p2q*s12*s13*s23))) + Log(s13/(s12 + s13 + s23))*
      ((p2q^4*(-135*s12^3*s13^3 - 270*s12^2*s13^4 - 135*s12*s13^5 +
           (63*s12^3*s13^2 - 432*s12^2*s13^3 - 585*s12*s13^4 - 90*s13^5)*
            s23 + (126*s12^2*s13^2 - 477*s12*s13^3 - 270*s13^4)*s23^2 +
           (63*s12*s13^2 - 180*s13^3)*s23^3) + p1q*p2q^3*(-198*s12^4*s13^2 -
           63*s12^2*s13^4 + 135*s12*s13^5 + (-144*s12^5 - 126*s12^4*s13 +
             593*s12^3*s13^2 + 787*s12^2*s13^3 + 447*s12*s13^4 + 90*s13^5)*
            s23 + (-288*s12^4 - 295*s12^3*s13 + 1784*s12^2*s13^2 +
             1682*s12*s13^3 + 340*s13^4)*s23^2 +
           (-144*s12^3 - 324*s12^2*s13 + 1593*s12*s13^2 + 770*s13^3)*s23^3 +
           (-155*s12*s13 + 520*s13^2)*s23^4) + p1q^2*p2q^2*
          (-396*s12^4*s13^2 + 63*s12^3*s13^3 - 333*s12^2*s13^4 +
           (-288*s12^5 - 414*s12^4*s13 + 237*s12^3*s13^2 - 242*s12^2*s13^3 -
             648*s12*s13^4)*s23 + (-540*s12^4 - 1330*s12^3*s13 -
             265*s12^2*s13^2 - 930*s12*s13^3 - 270*s13^4)*s23^2 +
           (-124*s12^3 - 2166*s12^2*s13 - 1548*s12*s13^2 - 500*s13^3)*s23^3 +
           (220*s12^2 - 1750*s12*s13 - 730*s13^2)*s23^4 + (92*s12 - 500*s13)*
            s23^5) + p1q^4*((-198*s12^4*s13 - 198*s12^3*s13^2)*s23 +
           (-684*s12^3*s13 - 486*s12^2*s13^2)*s23^2 +
           (-864*s12^2*s13 - 378*s12*s13^2)*s23^3 + (-468*s12*s13 - 90*s13^2)*
            s23^4 - 90*s13*s23^5) + p1q^3*p2q*(-198*s12^4*s13^2 +
           198*s12^3*s13^3 + (-144*s12^5 - 486*s12^4*s13 + 289*s12^3*s13^2 +
             819*s12^2*s13^3)*s23 + (-252*s12^4 - 969*s12^3*s13 +
             1171*s12^2*s13^2 + 891*s12*s13^3)*s23^2 +
           (260*s12^3 - 226*s12^2*s13 + 1104*s12*s13^2 + 270*s13^3)*s23^3 +
           (860*s12^2 + 487*s12*s13 + 340*s13^2)*s23^4 + (652*s12 + 230*s13)*
            s23^5 + 160*s23^6) + p3q^3*(p2q*(-324*s12^6 - 909*s12^5*s13 -
             522*s12^4*s13^2 + 63*s12^3*s13^3 + (-1620*s12^5 - 3051*s12^4*
                s13 - 1044*s12^3*s13^2 + 63*s12^2*s13^3)*s23 +
             (-2916*s12^4 - 3375*s12^3*s13 - 522*s12^2*s13^2)*s23^2 +
             (-2268*s12^3 - 1233*s12^2*s13)*s23^3 - 648*s12^2*s23^4) +
           p1q*(-324*s12^6 - 63*s12^5*s13 - 135*s12^4*s13^2 +
             (-800*s12^5 + 260*s12^4*s13 + 89*s12^3*s13^2)*s23 +
             (-448*s12^4 + 685*s12^3*s13 + 162*s12^2*s13^2)*s23^2 +
             (208*s12^3 + 362*s12^2*s13 + 18*s12*s13^2)*s23^3 +
             180*s12^2*s23^4)) + p3q^2*(p2q^2*(-324*s12^6 - 1233*s12^5*s13 -
             774*s12^4*s13^2 + 207*s12^3*s13^3 + 72*s12^2*s13^4 +
             (-1620*s12^5 - 4086*s12^4*s13 - 1449*s12^3*s13^2 + 396*s12^2*
                s13^3 + 27*s12*s13^4)*s23 + (-2916*s12^4 - 4473*s12^3*s13 -
               558*s12^2*s13^2 + 144*s12*s13^3)*s23^2 +
             (-2268*s12^3 - 1620*s12^2*s13 + 117*s12*s13^2)*s23^3 -
             648*s12^2*s23^4) + p1q^2*(-324*s12^6 + 135*s12^5*s13 -
             333*s12^4*s13^2 + (-972*s12^5 + 339*s12^4*s13 - 244*s12^3*s13^2)*
              s23 + (-1296*s12^4 - 331*s12^3*s13 - 251*s12^2*s13^2)*s23^2 +
             (-1312*s12^3 - 1091*s12^2*s13 - 180*s12*s13^2)*s23^3 +
             (-1004*s12^2 - 556*s12*s13)*s23^4 - 340*s12*s23^5) +
           p1q*p2q*(-576*s12^5*s13 - 1359*s12^4*s13^2 + 405*s12^3*s13^3 +
             (-404*s12^5 - 1917*s12^4*s13 - 1136*s12^3*s13^2 + 554*s12^2*
                s13^3)*s23 + (-900*s12^4 - 1475*s12^3*s13 + 681*s12^2*s13^2 +
               229*s12*s13^3)*s23^2 + (-516*s12^3 + 273*s12^2*s13 + 618*s12*
                s13^2)*s23^3 + (52*s12^2 + 407*s12*s13)*s23^4 +
             72*s12*s23^5)) + p3q*(p2q^3*(-324*s12^5*s13 - 252*s12^4*s13^2 +
             9*s12^3*s13^3 - 198*s12^2*s13^4 - 135*s12*s13^5 +
             (-1035*s12^4*s13 - 342*s12^3*s13^2 - 99*s12^2*s13^3 - 558*s12*
                s13^4 - 90*s13^5)*s23 + (-1098*s12^3*s13 + 90*s12^2*s13^2 -
               333*s12*s13^3 - 270*s13^4)*s23^2 + (-387*s12^2*s13 + 180*s12*
                s13^2 - 180*s13^3)*s23^3) + p1q*p2q^2*(-1098*s12^5*s13 -
             1692*s12^4*s13^2 + 189*s12^3*s13^3 - 405*s12^2*s13^4 +
             (-720*s12^5 - 3797*s12^4*s13 - 1190*s12^3*s13^2 + 1053*s12^2*
                s13^3 + 105*s12*s13^4)*s23 + (-1712*s12^4 - 3688*s12^3*s13 +
               2015*s12^2*s13^2 + 1794*s12*s13^3 + 250*s13^4)*s23^2 +
             (-1192*s12^3 - 737*s12^2*s13 + 2193*s12*s13^2 + 770*s13^3)*
              s23^3 + (-128*s12^2 + 252*s12*s13 + 520*s13^2)*s23^4 +
             72*s12*s23^5) + p1q^2*p2q*(-576*s12^5*s13 - 1494*s12^4*s13^2 +
             666*s12^3*s13^3 + (-612*s12^5 - 2793*s12^4*s13 - 1555*s12^3*
                s13^2 + 928*s12^2*s13^3)*s23 + (-1836*s12^4 - 4964*s12^3*
                s13 - 1335*s12^2*s13^2 - 48*s12*s13^3)*s23^2 +
             (-2084*s12^3 - 4553*s12^2*s13 - 1764*s12*s13^2 - 230*s13^3)*
              s23^3 + (-1108*s12^2 - 2306*s12*s13 - 730*s13^2)*s23^4 +
             (-248*s12 - 500*s13)*s23^5) + p1q^3*(198*s12^5*s13 -
             198*s12^4*s13^2 + (180*s12^5 + 585*s12^4*s13 - 179*s12^3*s13^2)*
              s23 + (720*s12^4 + 732*s12^3*s13 - 35*s12^2*s13^2)*s23^2 +
             (1232*s12^3 + 755*s12^2*s13 + 96*s12*s13^2)*s23^3 +
             (1184*s12^2 + 640*s12*s13 + 70*s13^2)*s23^4 +
             (652*s12 + 230*s13)*s23^5 + 160*s23^6)))/
        (p1q^3*p2q*(72*s12^4*s13*s23 + 144*s12^3*s13*s23^2 +
           72*s12^2*s13*s23^3) + p1q*p2q^3*(72*s12^4*s13*s23 +
           144*s12^3*s13*s23^2 + 72*s12^2*s13*s23^3) +
         p1q*p3q^3*(72*s12^4*s13*s23 + 144*s12^3*s13*s23^2 +
           72*s12^2*s13*s23^3) + p1q^2*p2q^2*(144*s12^4*s13*s23 +
           288*s12^3*s13*s23^2 + 144*s12^2*s13*s23^3) +
         p3q^2*(p1q^2*(144*s12^4*s13*s23 + 288*s12^3*s13*s23^2 +
             144*s12^2*s13*s23^3) + p1q*p2q*(216*s12^4*s13*s23 +
             432*s12^3*s13*s23^2 + 216*s12^2*s13*s23^3)) +
         p3q*(p1q^3*(72*s12^4*s13*s23 + 144*s12^3*s13*s23^2 +
             72*s12^2*s13*s23^3) + p1q*p2q^2*(216*s12^4*s13*s23 +
             432*s12^3*s13*s23^2 + 216*s12^2*s13*s23^3) +
           p1q^2*p2q*(288*s12^4*s13*s23 + 576*s12^3*s13*s23^2 +
             288*s12^2*s13*s23^3))) +
       ((p2q^6*((171*s12^5*s13^2 + 432*s12^4*s13^3 + 441*s12^3*s13^4 +
              360*s12^2*s13^5 + 270*s12*s13^6 + 90*s13^7)*s23 +
            (270*s12^4*s13^2 + 477*s12^3*s13^3 + 414*s12^2*s13^4 +
              477*s12*s13^5 + 270*s13^6)*s23^2 + (99*s12^3*s13^2 +
              117*s12^2*s13^3 + 117*s12*s13^4 + 180*s13^5)*s23^3) +
          p3q^6*((-72*s12^7 - 297*s12^6*s13 - 378*s12^5*s13^2 -
              153*s12^4*s13^3)*s23 + (-207*s12^6 - 486*s12^5*s13 -
              351*s12^4*s13^2 - 72*s12^3*s13^3)*s23^2 +
            (-198*s12^5 - 171*s12^4*s13 - 54*s12^3*s13^2)*s23^3 +
            (-63*s12^4 + 18*s12^3*s13)*s23^4) + p1q*p2q^5*(-324*s12^4*s13^4 -
            324*s12^3*s13^5 + (-252*s12^6*s13 - 108*s12^5*s13^2 -
              189*s12^4*s13^3 - 369*s12^3*s13^4 - 387*s12^2*s13^5 -
              117*s12*s13^6 - 90*s13^7)*s23 + (-511*s12^5*s13 -
              1191*s12^4*s13^2 - 1439*s12^3*s13^3 - 2123*s12^2*s13^4 -
              1560*s12*s13^5 - 520*s13^6)*s23^2 + (-581*s12^4*s13 -
              1223*s12^3*s13^2 - 1419*s12^2*s13^3 - 2411*s12*s13^4 -
              1310*s13^5)*s23^3 + (-158*s12^3*s13 - 291*s12^2*s13^2 -
              428*s12*s13^3 - 880*s13^4)*s23^4) + p1q^2*p2q^4*
           (324*s12^5*s13^3 - 324*s12^4*s13^4 - 648*s12^3*s13^5 +
            (-648*s12^6*s13 + 153*s12^5*s13^2 + 369*s12^4*s13^3 +
              882*s12^3*s13^4 + 27*s12^2*s13^5 + 333*s12*s13^6)*s23 +
            (70*s12^6 - 42*s12^5*s13 - 86*s12^4*s13^2 + 1804*s12^3*s13^3 +
              1245*s12^2*s13^4 + 871*s12*s13^5 + 450*s13^6)*s23^2 +
            (282*s12^5 + 837*s12^4*s13 + 1570*s12^3*s13^2 + 4975*s12^2*s13^
                3 + 3540*s12*s13^4 + 1270*s13^5)*s23^3 +
            (271*s12^4 + 1035*s12^3*s13 + 1853*s12^2*s13^2 + 4934*s12*s13^3 +
              2540*s13^4)*s23^4 + (59*s12^3 + 231*s12^2*s13 + 582*s12*s13^2 +
              1720*s13^3)*s23^5) + p1q^3*p2q^3*(648*s12^5*s13^3 +
            324*s12^4*s13^4 - 324*s12^3*s13^5 + (-972*s12^6*s13 +
              36*s12^5*s13^2 - 36*s12^4*s13^3 + 1386*s12^3*s13^4 -
              486*s12^2*s13^5)*s23 + (-66*s12^5*s13 - 1461*s12^4*s13^2 -
              369*s12^3*s13^3 - 900*s12^2*s13^4 - 1332*s12*s13^5)*s23^2 +
            (74*s12^5 + 261*s12^4*s13 - 3327*s12^3*s13^2 - 1453*s12^2*s13^3 -
              2334*s12*s13^4 - 900*s13^5)*s23^3 +
            (-158*s12^4 - 667*s12^3*s13 - 5807*s12^2*s13^2 - 3960*s12*s13^3 -
              1680*s13^4)*s23^4 + (-289*s12^3 - 1105*s12^2*s13 -
              5106*s12*s13^2 - 2460*s13^3)*s23^5 + (-57*s12^2 - 348*s12*s13 -
              1680*s13^2)*s23^6) + p1q^6*((324*s12^5*s13 + 324*s12^4*s13^2)*
             s23^2 + (-9*s12^5 + 801*s12^4*s13 + 486*s12^3*s13^2)*s23^3 +
            (-18*s12^4 + 963*s12^3*s13 + 486*s12^2*s13^2)*s23^4 +
            (-9*s12^3 + 819*s12^2*s13 + 333*s12*s13^2)*s23^5 +
            (423*s12*s13 + 90*s13^2)*s23^6 + 90*s13*s23^7) +
          p1q^4*p2q^2*(324*s12^5*s13^3 + 324*s12^4*s13^4 +
            (-720*s12^6*s13 - 414*s12^4*s13^3 + 1134*s12^3*s13^4)*s23 +
            (-2*s12^6 + 592*s12^5*s13 - 351*s12^4*s13^2 + 135*s12^3*s13^3 +
              1458*s12^2*s13^4)*s23^2 + (57*s12^5 + 2031*s12^4*s13 -
              621*s12^3*s13^2 + 2538*s12^2*s13^3 + 1998*s12*s13^4)*s23^3 +
            (-26*s12^4 + 2658*s12^3*s13 + 719*s12^2*s13^2 + 2946*s12*s13^3 +
              900*s13^4)*s23^4 + (95*s12^3 + 3381*s12^2*s13 +
              2190*s12*s13^2 + 1270*s13^3)*s23^5 +
            (257*s12^2 + 2669*s12*s13 + 1190*s13^2)*s23^6 +
            (77*s12 + 820*s13)*s23^7) + p1q^5*p2q*
           ((-324*s12^6*s13 - 324*s12^5*s13^2 - 648*s12^4*s13^3)*s23 +
            (-72*s12^6 + 171*s12^5*s13 - 711*s12^4*s13^2 - 1296*s12^3*s13^3)*
             s23^2 + (-304*s12^5 + 729*s12^4*s13 - 1836*s12^3*s13^2 -
              1458*s12^2*s13^3)*s23^3 + (-615*s12^4 + 441*s12^3*s13 -
              2484*s12^2*s13^2 - 1332*s12*s13^3)*s23^4 +
            (-766*s12^3 - 124*s12^2*s13 - 1789*s12*s13^2 - 450*s13^3)*s23^5 +
            (-786*s12^2 - 480*s12*s13 - 520*s13^2)*s23^6 +
            (-563*s12 - 230*s13)*s23^7 - 160*s23^8) +
          p3q^5*(p2q*((-144*s12^7 - 630*s12^6*s13 - 702*s12^5*s13^2 -
                90*s12^4*s13^3 + 126*s12^3*s13^4)*s23 + (-414*s12^6 -
                1008*s12^5*s13 - 801*s12^4*s13^2 - 234*s12^3*s13^3 -
                27*s12^2*s13^4)*s23^2 + (-396*s12^5 - 378*s12^4*s13 -
                450*s12^3*s13^2 - 144*s12^2*s13^3)*s23^3 + (-126*s12^4 -
                117*s12^2*s13^2)*s23^4) + p1q*(324*s12^7*s13 +
              324*s12^6*s13^2 + (72*s12^7 + 162*s12^6*s13 - 234*s12^5*s13^2 -
                648*s12^4*s13^3)*s23 + (644*s12^6 + 1900*s12^5*s13 +
                1560*s12^4*s13^2 - 20*s12^3*s13^3)*s23^2 + (1601*s12^5 +
                4061*s12^4*s13 + 2197*s12^3*s13^2 + 223*s12^2*s13^3)*s23^3 +
              (1475*s12^4 + 2463*s12^3*s13 + 646*s12^2*s13^2)*s23^4 +
              (446*s12^3 + 383*s12^2*s13)*s23^5)) +
          p3q^4*(p2q^2*((-144*s12^7 - 666*s12^6*s13 - 513*s12^5*s13^2 +
                450*s12^4*s13^3 + 495*s12^3*s13^4 + 54*s12^2*s13^5)*s23 +
              (-414*s12^6 - 1107*s12^5*s13 - 711*s12^4*s13^2 + 270*s12^3*
                 s13^3 + 315*s12^2*s13^4 + 27*s12*s13^5)*s23^2 +
              (-396*s12^5 - 540*s12^4*s13 - 684*s12^3*s13^2 + 171*s12^2*
                 s13^3 + 144*s12*s13^4)*s23^3 + (-126*s12^4 - 99*s12^3*s13 -
                180*s12^2*s13^2 + 117*s12*s13^3)*s23^4) +
            p1q*p2q*(648*s12^7*s13 - 324*s12^6*s13^2 - 972*s12^5*s13^3 +
              (-801*s12^6*s13 - 2331*s12^5*s13^2 - 2493*s12^4*s13^3 +
                657*s12^3*s13^4)*s23 + (460*s12^6 + 1679*s12^5*s13 +
                768*s12^4*s13^2 - 1147*s12^3*s13^3 + 276*s12^2*s13^4)*s23^2 +
              (1917*s12^5 + 6422*s12^4*s13 + 3428*s12^3*s13^2 + 1123*s12^2*
                 s13^3 + 256*s12*s13^4)*s23^3 + (2122*s12^4 + 4908*s12^3*
                 s13 + 2243*s12^2*s13^2 + 582*s12*s13^3)*s23^4 +
              (665*s12^3 + 1126*s12^2*s13 + 326*s12*s13^2)*s23^5) +
            p1q^2*(972*s12^7*s13 + 972*s12^6*s13^2 + (288*s12^7 +
                783*s12^6*s13 + 648*s12^5*s13^2 - 1467*s12^4*s13^3)*s23 +
              (1108*s12^6 + 3489*s12^5*s13 + 3909*s12^4*s13^2 - 434*s12^3*
                 s13^3)*s23^2 + (1127*s12^5 + 4174*s12^4*s13 + 2363*s12^3*
                 s13^2 - 20*s12^2*s13^3)*s23^3 + (-1036*s12^4 - 921*s12^3*
                 s13 - 1058*s12^2*s13^2 - 243*s12*s13^3)*s23^4 +
              (-2129*s12^3 - 2144*s12^2*s13 - 646*s12*s13^2)*s23^5 +
              (-786*s12^2 - 403*s12*s13)*s23^6)) +
          p3q^3*(p2q^3*((-144*s12^7 - 729*s12^6*s13 - 567*s12^5*s13^2 +
                468*s12^4*s13^3 + 324*s12^3*s13^4 - 243*s12^2*s13^5 -
                117*s12*s13^6)*s23 + (-414*s12^6 - 1359*s12^5*s13 -
                837*s12^4*s13^2 + 297*s12^3*s13^3 - 351*s12^2*s13^4 -
                630*s12*s13^5 - 90*s13^6)*s23^2 + (-396*s12^5 - 855*s12^4*
                 s13 - 702*s12^3*s13^2 + 189*s12^2*s13^3 - 486*s12*s13^4 -
                270*s13^5)*s23^3 + (-126*s12^4 - 225*s12^3*s13 -
                126*s12^2*s13^2 + 117*s12*s13^3 - 180*s13^4)*s23^4) +
            p1q*p2q^2*(324*s12^7*s13 - 1620*s12^6*s13^2 - 972*s12^5*s13^3 +
              972*s12^4*s13^4 + (-144*s12^7 - 2493*s12^6*s13 - 3960*s12^5*
                 s13^2 - 2646*s12^4*s13^3 + 1692*s12^3*s13^4 - 513*s12^2*
                 s13^5)*s23 + (-474*s12^6 - 1187*s12^5*s13 - 2523*s12^4*
                 s13^2 - 2062*s12^3*s13^3 + 147*s12^2*s13^4 - 249*s12*s13^5)*
               s23^2 + (321*s12^5 + 2866*s12^4*s13 + 1066*s12^3*s13^2 +
                2961*s12^2*s13^3 + 1450*s12*s13^4 + 250*s13^5)*s23^3 +
              (990*s12^4 + 3421*s12^3*s13 + 2955*s12^2*s13^2 + 2878*s12*
                 s13^3 + 770*s13^4)*s23^4 + (339*s12^3 + 1043*s12^2*s13 +
                909*s12*s13^2 + 520*s13^3)*s23^5) + p1q^2*p2q*
             (1296*s12^7*s13 - 1296*s12^6*s13^2 - 2592*s12^5*s13^3 +
              (288*s12^7 - 1827*s12^6*s13 - 3573*s12^5*s13^2 - 6453*s12^4*
                 s13^3 + 1485*s12^3*s13^4)*s23 + (1046*s12^6 + 3430*s12^5*
                 s13 + 4152*s12^4*s13^2 - 1882*s12^3*s13^3 + 1282*s12^2*
                 s13^4)*s23^2 + (1658*s12^5 + 7758*s12^4*s13 + 4595*s12^3*
                 s13^2 + 1906*s12^2*s13^3 + 539*s12*s13^4)*s23^3 +
              (-772*s12^4 - 89*s12^3*s13 - 2390*s12^2*s13^2 - 990*s12*s13^3 -
                230*s13^4)*s23^4 + (-2695*s12^3 - 4388*s12^2*s13 -
                3348*s12*s13^2 - 730*s13^3)*s23^5 + (-1023*s12^2 -
                1549*s12*s13 - 500*s13^2)*s23^6) + p1q^3*(972*s12^7*s13 +
              972*s12^6*s13^2 + (216*s12^7 - 324*s12^6*s13 + 594*s12^5*
                 s13^2 - 1782*s12^4*s13^3)*s23 + (435*s12^6 + 1065*s12^5*
                 s13 + 3600*s12^4*s13^2 - 972*s12^3*s13^3)*s23^2 +
              (-422*s12^5 + 1025*s12^4*s13 + 1237*s12^3*s13^2 - 243*s12^2*
                 s13^3)*s23^3 + (-1897*s12^4 - 1686*s12^3*s13 - 898*s12^2*
                 s13^2 - 173*s12*s13^3)*s23^4 + (-807*s12^3 + 40*s12^2*s13 +
                210*s12*s13^2 + 70*s13^3)*s23^5 + (1012*s12^2 +
                1036*s12*s13 + 230*s13^2)*s23^6 + (563*s12 + 160*s13)*s23^
                7)) + p3q^2*(p2q^4*((-72*s12^7 - 495*s12^6*s13 -
                342*s12^5*s13^2 + 423*s12^4*s13^3 + 108*s12^3*s13^4 -
                288*s12^2*s13^5 + 36*s12*s13^6 + 90*s13^7)*s23 +
              (-207*s12^6 - 999*s12^5*s13 - 720*s12^4*s13^2 - 315*s12^3*
                 s13^3 - 1341*s12^2*s13^4 - 864*s12*s13^5 + 90*s13^6)*s23^2 +
              (-198*s12^5 - 747*s12^4*s13 - 783*s12^3*s13^2 - 594*s12^2*
                 s13^3 - 1287*s12*s13^4 - 360*s13^5)*s23^3 + (-63*s12^4 -
                243*s12^3*s13 - 180*s12^2*s13^2 - 117*s12*s13^3 - 360*s13^4)*
               s23^4) + p1q*p2q^3*(-972*s12^6*s13^2 + 972*s12^5*s13^3 +
              1620*s12^4*s13^4 - 324*s12^3*s13^5 + (-144*s12^7 -
                2646*s12^6*s13 - 2340*s12^5*s13^2 - 270*s12^4*s13^3 +
                1890*s12^3*s13^4 - 648*s12^2*s13^5 + 270*s12*s13^6)*s23 +
              (-508*s12^6 - 2239*s12^5*s13 - 3435*s12^4*s13^2 - 1392*s12^3*
                 s13^3 - 1253*s12^2*s13^4 - 1167*s12*s13^5 - 250*s13^6)*s23^
                2 + (-73*s12^5 - 22*s12^4*s13 - 650*s12^3*s13^2 +
                3331*s12^2*s13^3 + 756*s12*s13^4 - 360*s13^5)*s23^3 +
              (470*s12^4 + 1353*s12^3*s13 + 2194*s12^2*s13^2 + 4167*s12*
                 s13^3 + 1110*s13^4)*s23^4 + (179*s12^3 + 474*s12^2*s13 +
                894*s12*s13^2 + 1220*s13^3)*s23^5) + p1q^2*p2q^2*
             (324*s12^7*s13 - 2916*s12^6*s13^2 - 972*s12^5*s13^3 +
              2268*s12^4*s13^4 + (-4707*s12^6*s13 - 4860*s12^5*s13^2 -
                5022*s12^4*s13^3 + 3852*s12^3*s13^4 - 999*s12^2*s13^5)*s23 +
              (-46*s12^6 + 131*s12^5*s13 + 325*s12^4*s13^2 - 640*s12^3*
                 s13^3 + 1433*s12^2*s13^4 - 803*s12*s13^5)*s23^2 +
              (1087*s12^5 + 5968*s12^4*s13 + 4162*s12^3*s13^2 + 6972*s12^2*
                 s13^3 + 2459*s12*s13^4 + 210*s13^5)*s23^3 + (773*s12^4 +
                2282*s12^3*s13 - 812*s12^2*s13^2 + 1826*s12*s13^3 +
                520*s13^4)*s23^4 + (-654*s12^3 - 2632*s12^2*s13 -
                4473*s12*s13^2 - 1210*s13^3)*s23^5 + (-294*s12^2 -
                1417*s12*s13 - 1520*s13^2)*s23^6) + p1q^3*p2q*
             (648*s12^7*s13 - 1620*s12^6*s13^2 - 2268*s12^5*s13^3 +
              (216*s12^7 - 4140*s12^6*s13 - 4230*s12^5*s13^2 - 7326*s12^4*
                 s13^3 + 1296*s12^3*s13^4)*s23 + (330*s12^6 - 1590*s12^5*
                 s13 - 228*s12^4*s13^2 - 4113*s12^3*s13^3 + 1485*s12^2*s13^4)*
               s23^2 + (-366*s12^5 - 566*s12^4*s13 - 3528*s12^3*s13^2 -
                399*s12^2*s13^3 + 796*s12*s13^4)*s23^3 + (-2351*s12^4 -
                4980*s12^3*s13 - 7002*s12^2*s13^2 - 1601*s12*s13^3 -
                30*s13^4)*s23^4 + (-1479*s12^3 - 2150*s12^2*s13 -
                2524*s12*s13^2 - 320*s13^3)*s23^5 + (1032*s12^2 +
                1593*s12*s13 + 530*s13^2)*s23^6 + (640*s12 + 820*s13)*s23^
                7) + p1q^4*(324*s12^7*s13 + 324*s12^6*s13^2 +
              (72*s12^7 - 1296*s12^6*s13 - 234*s12^5*s13^2 - 1134*s12^4*
                 s13^3)*s23 + (115*s12^6 - 677*s12^5*s13 + 1530*s12^4*s13^2 -
                972*s12^3*s13^3)*s23^2 + (-54*s12^5 + 480*s12^4*s13 +
                243*s12^3*s13^2 - 486*s12^2*s13^3)*s23^3 + (35*s12^4 +
                636*s12^3*s13 - 346*s12^2*s13^2 - 263*s12*s13^3)*s23^4 +
              (984*s12^3 + 1651*s12^2*s13 + 273*s12*s13^2 - 20*s13^3)*s23^5 +
              (1012*s12^2 + 806*s12*s13 + 70*s13^2)*s23^6 - 70*s13*s23^7 -
              160*s23^8)) + p3q*(p2q^5*((-99*s12^6*s13 + 207*s12^5*s13^2 +
                774*s12^4*s13^3 + 594*s12^3*s13^4 + 369*s12^2*s13^5 +
                423*s12*s13^6 + 180*s13^7)*s23 + (-225*s12^5*s13 +
                126*s12^4*s13^2 + 297*s12^3*s13^3 - 234*s12^2*s13^4 +
                270*s12*s13^5 + 450*s13^6)*s23^2 + (-225*s12^4*s13 -
                270*s12^3*s13^2 - 351*s12^2*s13^3 - 540*s12*s13^4 + 90*s13^5)*
               s23^3 + (-99*s12^3*s13 - 117*s12^2*s13^2 - 117*s12*s13^3 -
                180*s13^4)*s23^4) + p1q*p2q^4*(972*s12^5*s13^3 +
              324*s12^4*s13^4 - 648*s12^3*s13^5 + (-72*s12^7 - 1368*s12^6*
                 s13 - 585*s12^5*s13^2 + 342*s12^4*s13^3 + 486*s12^3*s13^4 -
                522*s12^2*s13^5 + 153*s12*s13^6 - 90*s13^7)*s23 +
              (-218*s12^6 - 1784*s12^5*s13 - 2895*s12^4*s13^2 - 1896*s12^3*
                 s13^3 - 3247*s12^2*s13^4 - 2478*s12*s13^5 - 770*s13^6)*s23^
                2 + (-78*s12^5 - 1108*s12^4*s13 - 1708*s12^3*s13^2 -
                149*s12^2*s13^3 - 2849*s12*s13^4 - 1920*s13^5)*s23^3 +
              (127*s12^4 + 219*s12^3*s13 + 545*s12^2*s13^2 + 1443*s12*s13^3 -
                540*s13^4)*s23^4 + (59*s12^3 + 174*s12^2*s13 + 311*s12*
                 s13^2 + 700*s13^3)*s23^5) + p1q^2*p2q^3*(-648*s12^6*s13^2 +
              1944*s12^5*s13^3 + 1944*s12^4*s13^4 - 648*s12^3*s13^5 +
              (-2745*s12^6*s13 - 486*s12^5*s13^2 + 333*s12^4*s13^3 +
                3249*s12^3*s13^4 - 972*s12^2*s13^5 + 333*s12*s13^6)*s23 +
              (68*s12^6 - 23*s12^5*s13 - 436*s12^4*s13^2 + 2072*s12^3*s13^3 +
                928*s12^2*s13^4 - 229*s12*s13^5 + 360*s13^6)*s23^2 +
              (802*s12^5 + 2915*s12^4*s13 + 2942*s12^3*s13^2 + 9499*s12^2*
                 s13^3 + 5046*s12*s13^4 + 1300*s13^5)*s23^3 +
              (762*s12^4 + 2350*s12^3*s13 + 2229*s12^2*s13^2 + 7390*s12*
                 s13^3 + 3200*s13^4)*s23^4 + (-29*s12^3 - 157*s12^2*s13 -
                1189*s12*s13^2 + 1240*s13^3)*s23^5 + (-57*s12^2 -
                271*s12*s13 - 1020*s13^2)*s23^6) + p1q^3*p2q^2*
             (-1296*s12^6*s13^2 + 324*s12^5*s13^3 + 1620*s12^4*s13^4 +
              (-3816*s12^6*s13 - 1872*s12^5*s13^2 - 2664*s12^4*s13^3 +
                3654*s12^3*s13^4 - 486*s12^2*s13^5)*s23 + (-69*s12^6 -
                651*s12^5*s13 - 1230*s12^4*s13^2 - 1125*s12^3*s13^3 +
                1278*s12^2*s13^4 - 999*s12*s13^5)*s23^2 + (184*s12^5 +
                1118*s12^4*s13 - 5383*s12^3*s13^2 - 367*s12^2*s13^3 -
                251*s12*s13^4 - 540*s13^5)*s23^3 + (-612*s12^4 -
                2755*s12^3*s13 - 11479*s12^2*s13^2 - 4560*s12*s13^3 -
                1080*s13^4)*s23^4 + (-979*s12^3 - 3115*s12^2*s13 -
                7876*s12*s13^2 - 2580*s13^3)*s23^5 + (-37*s12^2 +
                209*s12*s13 - 1380*s13^2)*s23^6 + (77*s12 + 660*s13)*s23^7) +
            p1q^5*((-648*s12^6*s13 - 324*s12^5*s13^2 - 324*s12^4*s13^3)*s23 +
              (-63*s12^6 - 315*s12^5*s13 + 252*s12^4*s13^2 - 486*s12^3*s13^3)*
               s23^2 + (-313*s12^5 + 198*s12^4*s13 - 396*s12^3*s13^2 -
                486*s12^2*s13^3)*s23^3 + (-660*s12^4 - 81*s12^3*s13 -
                666*s12^2*s13^2 - 333*s12*s13^3)*s23^4 + (-793*s12^3 -
                97*s12^2*s13 - 250*s12*s13^2 - 90*s13^3)*s23^5 +
              (-786*s12^2 - 210*s12*s13 - 70*s13^2)*s23^6 + (-563*s12 -
                140*s13)*s23^7 - 160*s23^8) + p1q^4*p2q*(-648*s12^6*s13^2 -
              648*s12^5*s13^3 + (72*s12^7 - 2664*s12^6*s13 - 2178*s12^5*
                 s13^2 - 3492*s12^4*s13^3 + 486*s12^3*s13^4)*s23 +
              (86*s12^6 - 1264*s12^5*s13 - 1260*s12^4*s13^2 - 2610*s12^3*
                 s13^3 + 972*s12^2*s13^4)*s23^2 + (-15*s12^5 + 1521*s12^4*
                 s13 - 1395*s12^3*s13^2 + 360*s12^2*s13^3 + 999*s12*s13^4)*
               s23^3 + (54*s12^4 + 3618*s12^3*s13 + 58*s12^2*s13^2 +
                577*s12*s13^3 + 360*s13^4)*s23^4 + (1115*s12^3 +
                5644*s12^2*s13 + 1779*s12*s13^2 + 440*s13^3)*s23^5 +
              (1269*s12^2 + 3628*s12*s13 + 990*s13^2)*s23^6 +
              (77*s12 + 750*s13)*s23^7 - 160*s23^8)))*
         Log(s23/(s12 + s13 + s23)))/(p1q*p2q^5*(-72*s12^4*s13^2 -
           72*s12^3*s13^3)*s23^2 + p1q*p3q^5*((72*s12^5*s13 + 72*s12^4*s13^2)*
            s23^2 + (72*s12^4*s13 + 72*s12^3*s13^2)*s23^3) +
         p1q^2*p2q^4*((72*s12^5*s13 - 72*s12^4*s13^2 - 144*s12^3*s13^3)*
            s23^2 + (72*s12^4*s13 + 144*s12^3*s13^2)*s23^3) +
         p1q^4*p2q^2*((72*s12^5*s13 + 72*s12^4*s13^2)*s23^2 +
           (-72*s12^4*s13 + 144*s12^3*s13^2)*s23^3 - 144*s12^3*s13*s23^4) +
         p1q^5*p2q*(-72*s12^4*s13*s23^3 - 72*s12^3*s13*s23^4) +
         p1q^3*p2q^3*((144*s12^5*s13 + 72*s12^4*s13^2 - 72*s12^3*s13^3)*
            s23^2 + (72*s12^4*s13 + 288*s12^3*s13^2)*s23^3 -
           72*s12^3*s13*s23^4) + p3q^3*
          (p1q*p2q^2*((432*s12^5*s13 + 144*s12^4*s13^2 - 288*s12^3*s13^3)*
              s23^2 + (432*s12^4*s13 + 432*s12^3*s13^2)*s23^3) +
           p1q^3*((216*s12^5*s13 + 216*s12^4*s13^2)*s23^2 +
             216*s12^3*s13^2*s23^3 - 216*s12^3*s13*s23^4) +
           p1q^2*p2q*((720*s12^5*s13 + 576*s12^4*s13^2 - 144*s12^3*s13^3)*
              s23^2 + (504*s12^4*s13 + 792*s12^3*s13^2)*s23^3 -
             216*s12^3*s13*s23^4)) +
         p3q^2*(p1q*p2q^3*((288*s12^5*s13 - 144*s12^4*s13^2 - 432*s12^3*
                s13^3)*s23^2 + (288*s12^4*s13 + 288*s12^3*s13^2)*s23^3) +
           p1q^3*p2q*((576*s12^5*s13 + 504*s12^4*s13^2 - 72*s12^3*s13^3)*
              s23^2 + (72*s12^4*s13 + 720*s12^3*s13^2)*s23^3 -
             504*s12^3*s13*s23^4) + p1q^4*((72*s12^5*s13 + 72*s12^4*s13^2)*
              s23^2 + (-144*s12^4*s13 + 72*s12^3*s13^2)*s23^3 -
             216*s12^3*s13*s23^4) + p1q^2*p2q^2*
            ((864*s12^5*s13 + 432*s12^4*s13^2 - 432*s12^3*s13^3)*s23^2 +
             (648*s12^4*s13 + 1080*s12^3*s13^2)*s23^3 - 216*s12^3*s13*
              s23^4)) + p3q^4*(p1q*p2q*((288*s12^5*s13 + 216*s12^4*s13^2 - 72*
                s12^3*s13^3)*s23^2 + (288*s12^4*s13 + 288*s12^3*s13^2)*
              s23^3) + p1q^2*((216*s12^5*s13 + 216*s12^4*s13^2)*s23^2 +
             (144*s12^4*s13 + 216*s12^3*s13^2)*s23^3 - 72*s12^3*s13*s23^4)) +
         p3q*(p1q*p2q^4*((72*s12^5*s13 - 216*s12^4*s13^2 - 288*s12^3*s13^3)*
              s23^2 + (72*s12^4*s13 + 72*s12^3*s13^2)*s23^3) +
           p1q^4*p2q*((144*s12^5*s13 + 144*s12^4*s13^2)*s23^2 +
             (-216*s12^4*s13 + 216*s12^3*s13^2)*s23^3 - 360*s12^3*s13*
              s23^4) + p1q^3*p2q^2*((504*s12^5*s13 + 360*s12^4*s13^2 - 144*
                s12^3*s13^3)*s23^2 + (144*s12^4*s13 + 792*s12^3*s13^2)*
              s23^3 - 360*s12^3*s13*s23^4) + p1q^5*(-72*s12^4*s13*s23^3 -
             72*s12^3*s13*s23^4) + p1q^2*p2q^3*((432*s12^5*s13 - 432*s12^3*
                s13^3)*s23^2 + (360*s12^4*s13 + 648*s12^3*s13^2)*s23^3 -
             72*s12^3*s13*s23^4))) +
       ((p3q^4*(72*s12^5 + 144*s12^4*s13 + 72*s12^3*s13^2 +
            (54*s12^4 + 54*s12^3*s13)*s23 - 18*s12^3*s23^2) +
          p2q^4*(90*s12^4*s13 + 180*s12^3*s13^2 + 180*s12^2*s13^3 +
            180*s12*s13^4 + 90*s13^5 + (270*s12^3*s13 + 207*s12^2*s13^2 +
              207*s12*s13^3 + 270*s13^4)*s23 + (180*s12^2*s13 -
              63*s12*s13^2 + 180*s13^3)*s23^2) + p1q*p2q^3*
           (333*s12^3*s13^2 - 180*s12^2*s13^3 + 63*s12*s13^4 - 90*s13^5 +
            (-88*s12^4 + 490*s12^3*s13 - 624*s12^2*s13^2 - 500*s12*s13^3 -
              340*s13^4)*s23 + (-86*s12^3 + 60*s12^2*s13 - 777*s12*s13^2 -
              770*s13^3)*s23^2 + (-158*s12^2 + 146*s12*s13 - 520*s13^2)*
             s23^3) + p1q^4*((-90*s12^4 + 153*s12^3*s13 + 243*s12^2*s13^2)*
             s23 + (-90*s12^3 + 486*s12^2*s13 + 243*s12*s13^2)*s23^2 +
            (333*s12*s13 + 90*s13^2)*s23^3 + 90*s13*s23^4) +
          p1q^2*p2q^2*(846*s12^3*s13^2 - 243*s12^2*s13^3 + 243*s12*s13^4 +
            (1445*s12^3*s13 - 279*s12^2*s13^2 + 207*s12*s13^3 + 270*s13^4)*
             s23 + (180*s12^3 + 849*s12^2*s13 + 480*s12*s13^2 + 500*s13^3)*
             s23^2 + (-223*s12^2 + 973*s12*s13 + 730*s13^2)*s23^3 +
            (-83*s12 + 500*s13)*s23^4) + p1q^3*p2q*(-90*s12^4*s13 +
            333*s12^3*s13^2 - 243*s12^2*s13^3 + (-160*s12^4 + 702*s12^3*s13 -
              243*s12^2*s13^2 - 486*s12*s13^3)*s23 +
            (-140*s12^3 + 459*s12^2*s13 - 603*s12*s13^2 - 270*s13^3)*s23^2 +
            (-383*s12^2 - 160*s12*s13 - 340*s13^2)*s23^3 +
            (-403*s12 - 230*s13)*s23^4 - 160*s23^5) +
          p3q^3*(p2q*(72*s12^5 + 171*s12^4*s13 + 126*s12^3*s13^2 +
              27*s12^2*s13^3 + (54*s12^4 + 198*s12^3*s13 + 144*s12^2*s13^2)*
               s23 + (-18*s12^3 + 117*s12^2*s13)*s23^2) +
            p1q*(180*s12^5 - 396*s12^4*s13 + 90*s12^3*s13^2 +
              (-734*s12^4 - 1265*s12^3*s13 - 241*s12^2*s13^2)*s23 +
              (-1155*s12^3 - 682*s12^2*s13)*s23^2 - 401*s12^2*s23^3)) +
          p3q^2*(p2q^2*(72*s12^5 + 171*s12^4*s13 + 99*s12^3*s13^2 -
              27*s12^2*s13^3 - 27*s12*s13^4 + (54*s12^4 + 261*s12^3*s13 +
                63*s12^2*s13^2 - 144*s12*s13^3)*s23 + (-18*s12^3 +
                180*s12^2*s13 - 117*s12*s13^2)*s23^2) +
            p1q*p2q*(-1206*s12^4*s13 + 522*s12^3*s13^2 - 270*s12^2*s13^3 +
              (-1094*s12^4 - 1219*s12^3*s13 - 843*s12^2*s13^2 -
                256*s12*s13^3)*s23 + (-932*s12^3 - 1081*s12^2*s13 -
                582*s12*s13^2)*s23^2 + (-318*s12^2 - 326*s12*s13)*s23^3) +
            p1q^2*(180*s12^5 - 909*s12^4*s13 + 243*s12^3*s13^2 +
              (-500*s12^4 - 837*s12^3*s13)*s23 + (69*s12^3 + 592*s12^2*s13 +
                243*s12*s13^2)*s23^2 + (832*s12^2 + 646*s12*s13)*s23^3 +
              403*s12*s23^4)) + p3q*(p2q^3*(72*s12^5 + 234*s12^4*s13 +
              225*s12^3*s13^2 + 126*s12^2*s13^3 + 153*s12*s13^4 + 90*s13^5 +
              (54*s12^4 + 387*s12^3*s13 + 126*s12^2*s13^2 + 63*s12*s13^3 +
                270*s13^4)*s23 + (-18*s12^3 + 243*s12^2*s13 - 180*s12*s13^2 +
                180*s13^3)*s23^2) + p1q*p2q^2*(-333*s12^4*s13 +
              1206*s12^3*s13^2 - 189*s12^2*s13^3 + 270*s12*s13^4 +
              (-268*s12^4 + 833*s12^3*s13 - 1082*s12^2*s13^2 - 639*s12*
                 s13^3 - 250*s13^4)*s23 + (137*s12^3 - 339*s12^2*s13 -
                1359*s12*s13^2 - 770*s13^3)*s23^2 + (-75*s12^2 -
                180*s12*s13 - 520*s13^2)*s23^3) + p1q^2*p2q*
             (-1026*s12^4*s13 + 1152*s12^3*s13^2 - 486*s12^2*s13^3 +
              (-500*s12^4 + 671*s12^3*s13 - 423*s12^2*s13^2 - 270*s12*s13^3)*
               s23 + (429*s12^3 + 1261*s12^2*s13 + 759*s12*s13^2 + 230*s13^3)*
               s23^2 + (609*s12^2 + 1619*s12*s13 + 730*s13^2)*s23^3 +
              (320*s12 + 500*s13)*s23^4) + p1q^3*(90*s12^5 - 333*s12^4*s13 +
              243*s12^3*s13^2 + (-250*s12^4 - 297*s12^3*s13)*s23 +
              (-320*s12^3 - 180*s12^2*s13)*s23^2 + (-383*s12^2 -
                313*s12*s13 - 70*s13^2)*s23^3 + (-403*s12 - 230*s13)*s23^4 -
              160*s23^5)))*Log((s12 + s23)/(s12 + s13 + s23)))/
        (72*p1q^3*p2q*s12^3*s13*s23 + 144*p1q^2*p2q^2*s12^3*s13*s23 +
         72*p1q*p2q^3*s12^3*s13*s23 + 72*p1q*p3q^3*s12^3*s13*s23 +
         p3q^2*(144*p1q^2*s12^3*s13*s23 + 216*p1q*p2q*s12^3*s13*s23) +
         p3q*(72*p1q^3*s12^3*s13*s23 + 288*p1q^2*p2q*s12^3*s13*s23 +
           216*p1q*p2q^2*s12^3*s13*s23))) +
     Log((p1q + p2q)/(p1q + p2q + p3q))*
      (((p3q^5*(9*s12^3*s13 + 9*s12^2*s13^2 + (s12^3 + 10*s12^2*s13)*s23 +
            s12^2*s23^2) + p2q^5*(-27*s12^2*s13^2 - 45*s12*s13^3 - 18*s13^4 +
            (-36*s12^2*s13 - 116*s12*s13^2 - 71*s13^3)*s23 +
            (-71*s12*s13 - 88*s13^2)*s23^2 - 35*s13*s23^3) +
          p1q^5*((-9*s12^2*s13 - 18*s12*s13^2 - 9*s13^3)*s23 +
            (-18*s12*s13 - 18*s13^2)*s23^2 - 9*s13*s23^3) +
          p1q^4*p2q*(-9*s12^2*s13^2 + 9*s13^4 + (-54*s12^2*s13 -
              97*s12*s13^2 - 25*s13^3)*s23 + (-87*s12*s13 - 67*s13^2)*s23^2 +
            (2*s12 - 31*s13)*s23^3 + 2*s23^4) + p1q*p2q^4*(-54*s12^2*s13^2 -
            54*s12*s13^3 + (-97*s12^2*s13 - 242*s12*s13^2 - 91*s13^3)*s23 +
            (2*s12^2 - 175*s12*s13 - 171*s13^2)*s23^2 + (5*s12 - 77*s13)*
             s23^3 + 3*s23^4) + p1q^3*p2q^2*(-36*s12^2*s13^2 - 9*s12*s13^3 +
            27*s13^4 + (-126*s12^2*s13 - 245*s12*s13^2 - 56*s13^3)*s23 +
            (-208*s12*s13 - 165*s13^2)*s23^2 + (4*s12 - 78*s13)*s23^3 +
            4*s23^4) + p1q^2*p2q^3*(-54*s12^2*s13^2 - 18*s12*s13^3 +
            36*s13^4 + (-142*s12^2*s13 - 292*s12*s13^2 - 60*s13^3)*s23 +
            (2*s12^2 - 243*s12*s13 - 199*s13^2)*s23^2 + (7*s12 - 98*s13)*
             s23^3 + 5*s23^4) + p3q^4*(p1q*(18*s12^3*s13 + 18*s12^2*s13^2 +
              (-2*s12^2*s13 - 20*s12*s13^2)*s23 + (-4*s12^2 - 24*s12*s13)*s23^
                2 - 4*s12*s23^3) + p2q*(36*s12^3*s13 + 45*s12^2*s13^2 +
              9*s12*s13^3 + (s12^3 + 53*s12^2*s13 + 25*s12*s13^2)*s23 +
              15*s12*s13*s23^2 - s12*s23^3)) +
          p3q^3*(p2q^2*(36*s12^3*s13 + 18*s12^2*s13^2 - 36*s12*s13^3 -
              18*s13^4 + (s12^3 + 17*s12^2*s13 - 91*s12*s13^2 - 71*s13^3)*
               s23 + (-56*s12*s13 - 88*s13^2)*s23^2 + (-s12 - 35*s13)*s23^
                3) + p1q*p2q*(36*s12^3*s13 - 54*s12*s13^3 - 18*s13^4 +
              (2*s12^3 - 27*s12^2*s13 - 144*s12*s13^2 - 61*s13^3)*s23 +
              (-2*s12^2 - 83*s12*s13 - 57*s13^2)*s23^2 + (-s12 - 11*s13)*s23^
                3 + 3*s23^4) + p1q^2*(18*s12^3*s13 + 18*s12^2*s13^2 +
              (2*s12^3 - 14*s12^2*s13 - 32*s12*s13^2 + 2*s13^3)*s23 +
              (-23*s12*s13 + 15*s13^2)*s23^2 + (s12 + 16*s13)*s23^3 +
              3*s23^4)) + p3q^2*(p2q^3*(36*s12^3*s13 + 18*s12^2*s13^2 -
              36*s12*s13^3 - 18*s13^4 + (s12^3 + 17*s12^2*s13 -
                91*s12*s13^2 - 71*s13^3)*s23 + (-56*s12*s13 - 88*s13^2)*s23^
                2 + (-s12 - 35*s13)*s23^3) + p1q^3*(27*s12^3*s13 +
              27*s12^2*s13^2 + (15*s12^2*s13 - 12*s12*s13^2)*s23 +
              (-4*s12^2 + 2*s12*s13 + 18*s13^2)*s23^2 + (-2*s12 + 20*s13)*s23^
                3 + 2*s23^4) + p1q*p2q^2*(72*s12^3*s13 + 18*s12^2*s13^2 -
              72*s12*s13^3 - 18*s13^4 + (35*s12^2*s13 - 152*s12*s13^2 -
                79*s13^3)*s23 + (-6*s12^2 - 59*s12*s13 - 77*s13^2)*s23^2 +
              (-3*s12 - 13*s13)*s23^3 + 3*s23^4) + p1q^2*p2q*
             (72*s12^3*s13 + 54*s12^2*s13^2 - 18*s12*s13^3 +
              (2*s12^3 + 32*s12^2*s13 - 76*s12*s13^2 - 16*s13^3)*s23 +
              (-6*s12^2 - 21*s12*s13 + 13*s13^2)*s23^2 + (-3*s12 + 34*s13)*
               s23^3 + 5*s23^4)) + p3q*(p2q^4*(27*s12^3*s13 + 9*s12^2*s13^2 -
              36*s12*s13^3 - 18*s13^4 + (7*s12^2*s13 - 91*s12*s13^2 -
                71*s13^3)*s23 + (-s12^2 - 56*s12*s13 - 88*s13^2)*s23^2 +
              (-s12 - 35*s13)*s23^3) + p1q^4*(9*s12^3*s13 - 9*s12*s13^3 +
              (-9*s12^2*s13 - 43*s12*s13^2 - 16*s13^3)*s23 + (-24*s12*s13 -
                22*s13^2)*s23^2 + (2*s12 - 4*s13)*s23^3 + 2*s23^4) +
            p1q*p2q^3*(36*s12^3*s13 - 72*s12^2*s13^2 - 126*s12*s13^3 -
              18*s13^4 + (-2*s12^3 - 73*s12^2*s13 - 342*s12*s13^2 -
                145*s13^3)*s23 + (-6*s12^2 - 193*s12*s13 - 209*s13^2)*s23^2 +
              (-s12 - 79*s13)*s23^3 + 3*s23^4) + p1q^3*p2q*(36*s12^3*s13 -
              18*s12^2*s13^2 - 54*s12*s13^3 + (-57*s12^2*s13 - 221*s12*
                 s13^2 - 74*s13^3)*s23 + (-4*s12^2 - 125*s12*s13 - 102*s13^2)*
               s23^2 + (2*s12 - 22*s13)*s23^3 + 6*s23^4) +
            p1q^2*p2q^2*(54*s12^3*s13 - 54*s12^2*s13^2 - 108*s12*s13^3 +
              (-78*s12^2*s13 - 372*s12*s13^2 - 132*s13^3)*s23 +
              (-4*s12^2 - 205*s12*s13 - 201*s13^2)*s23^2 + (3*s12 - 62*s13)*
               s23^3 + 7*s23^4)))*Log(p3q/(p1q + p2q + p3q)))/
        (8*p1q*p3q^4*s12^2*s13*s23 + p1q^3*p2q^2*(-24*s12*s13^2*s23 -
           24*s12*s13*s23^2) + p1q^2*p2q^3*(-24*s12*s13^2*s23 -
           24*s12*s13*s23^2) + p1q^4*p2q*(-8*s12*s13^2*s23 -
           8*s12*s13*s23^2) + p1q*p2q^4*(-8*s12*s13^2*s23 -
           8*s12*s13*s23^2) + p3q^2*(p1q^2*p2q*((32*s12^2*s13 - 40*s12*s13^2)*
              s23 - 40*s12*s13*s23^2) + p1q*p2q^2*
            ((24*s12^2*s13 - 24*s12*s13^2)*s23 - 24*s12*s13*s23^2) +
           p1q^3*((8*s12^2*s13 - 16*s12*s13^2)*s23 - 16*s12*s13*s23^2)) +
         p3q*(p1q^2*p2q^2*((16*s12^2*s13 - 56*s12*s13^2)*s23 -
             56*s12*s13*s23^2) + p1q^3*p2q*((8*s12^2*s13 - 40*s12*s13^2)*
              s23 - 40*s12*s13*s23^2) + p1q*p2q^3*
            ((8*s12^2*s13 - 24*s12*s13^2)*s23 - 24*s12*s13*s23^2) +
           p1q^4*(-8*s12*s13^2*s23 - 8*s12*s13*s23^2)) +
         p3q^3*(p1q^2*((16*s12^2*s13 - 8*s12*s13^2)*s23 - 8*s12*s13*s23^2) +
           p1q*p2q*((24*s12^2*s13 - 8*s12*s13^2)*s23 - 8*s12*s13*s23^2))) +
       ((p3q^5*(9*s12^3*s13 + 9*s12^2*s13^2 + (s12^3 + 10*s12^2*s13)*s23 +
            s12^2*s23^2) + p2q^5*(-27*s12^2*s13^2 - 45*s12*s13^3 - 18*s13^4 +
            (-36*s12^2*s13 - 116*s12*s13^2 - 71*s13^3)*s23 +
            (-71*s12*s13 - 88*s13^2)*s23^2 - 35*s13*s23^3) +
          p1q^5*((-9*s12^2*s13 - 18*s12*s13^2 - 9*s13^3)*s23 +
            (-18*s12*s13 - 18*s13^2)*s23^2 - 9*s13*s23^3) +
          p1q^4*p2q*(-9*s12^2*s13^2 + 9*s13^4 + (-54*s12^2*s13 -
              97*s12*s13^2 - 25*s13^3)*s23 + (-87*s12*s13 - 67*s13^2)*s23^2 +
            (2*s12 - 31*s13)*s23^3 + 2*s23^4) + p1q*p2q^4*(-54*s12^2*s13^2 -
            54*s12*s13^3 + (-97*s12^2*s13 - 242*s12*s13^2 - 91*s13^3)*s23 +
            (2*s12^2 - 175*s12*s13 - 171*s13^2)*s23^2 + (5*s12 - 77*s13)*
             s23^3 + 3*s23^4) + p1q^3*p2q^2*(-36*s12^2*s13^2 - 9*s12*s13^3 +
            27*s13^4 + (-126*s12^2*s13 - 245*s12*s13^2 - 56*s13^3)*s23 +
            (-208*s12*s13 - 165*s13^2)*s23^2 + (4*s12 - 78*s13)*s23^3 +
            4*s23^4) + p1q^2*p2q^3*(-54*s12^2*s13^2 - 18*s12*s13^3 +
            36*s13^4 + (-142*s12^2*s13 - 292*s12*s13^2 - 60*s13^3)*s23 +
            (2*s12^2 - 243*s12*s13 - 199*s13^2)*s23^2 + (7*s12 - 98*s13)*
             s23^3 + 5*s23^4) + p3q^4*(p1q*(18*s12^3*s13 + 18*s12^2*s13^2 +
              (-2*s12^2*s13 - 20*s12*s13^2)*s23 + (-4*s12^2 - 24*s12*s13)*s23^
                2 - 4*s12*s23^3) + p2q*(36*s12^3*s13 + 45*s12^2*s13^2 +
              9*s12*s13^3 + (s12^3 + 53*s12^2*s13 + 25*s12*s13^2)*s23 +
              15*s12*s13*s23^2 - s12*s23^3)) +
          p3q^3*(p2q^2*(36*s12^3*s13 + 18*s12^2*s13^2 - 36*s12*s13^3 -
              18*s13^4 + (s12^3 + 17*s12^2*s13 - 91*s12*s13^2 - 71*s13^3)*
               s23 + (-56*s12*s13 - 88*s13^2)*s23^2 + (-s12 - 35*s13)*s23^
                3) + p1q*p2q*(36*s12^3*s13 - 54*s12*s13^3 - 18*s13^4 +
              (2*s12^3 - 27*s12^2*s13 - 144*s12*s13^2 - 61*s13^3)*s23 +
              (-2*s12^2 - 83*s12*s13 - 57*s13^2)*s23^2 + (-s12 - 11*s13)*s23^
                3 + 3*s23^4) + p1q^2*(18*s12^3*s13 + 18*s12^2*s13^2 +
              (2*s12^3 - 14*s12^2*s13 - 32*s12*s13^2 + 2*s13^3)*s23 +
              (-23*s12*s13 + 15*s13^2)*s23^2 + (s12 + 16*s13)*s23^3 +
              3*s23^4)) + p3q^2*(p2q^3*(36*s12^3*s13 + 18*s12^2*s13^2 -
              36*s12*s13^3 - 18*s13^4 + (s12^3 + 17*s12^2*s13 -
                91*s12*s13^2 - 71*s13^3)*s23 + (-56*s12*s13 - 88*s13^2)*s23^
                2 + (-s12 - 35*s13)*s23^3) + p1q^3*(27*s12^3*s13 +
              27*s12^2*s13^2 + (15*s12^2*s13 - 12*s12*s13^2)*s23 +
              (-4*s12^2 + 2*s12*s13 + 18*s13^2)*s23^2 + (-2*s12 + 20*s13)*s23^
                3 + 2*s23^4) + p1q*p2q^2*(72*s12^3*s13 + 18*s12^2*s13^2 -
              72*s12*s13^3 - 18*s13^4 + (35*s12^2*s13 - 152*s12*s13^2 -
                79*s13^3)*s23 + (-6*s12^2 - 59*s12*s13 - 77*s13^2)*s23^2 +
              (-3*s12 - 13*s13)*s23^3 + 3*s23^4) + p1q^2*p2q*
             (72*s12^3*s13 + 54*s12^2*s13^2 - 18*s12*s13^3 +
              (2*s12^3 + 32*s12^2*s13 - 76*s12*s13^2 - 16*s13^3)*s23 +
              (-6*s12^2 - 21*s12*s13 + 13*s13^2)*s23^2 + (-3*s12 + 34*s13)*
               s23^3 + 5*s23^4)) + p3q*(p2q^4*(27*s12^3*s13 + 9*s12^2*s13^2 -
              36*s12*s13^3 - 18*s13^4 + (7*s12^2*s13 - 91*s12*s13^2 -
                71*s13^3)*s23 + (-s12^2 - 56*s12*s13 - 88*s13^2)*s23^2 +
              (-s12 - 35*s13)*s23^3) + p1q^4*(9*s12^3*s13 - 9*s12*s13^3 +
              (-9*s12^2*s13 - 43*s12*s13^2 - 16*s13^3)*s23 + (-24*s12*s13 -
                22*s13^2)*s23^2 + (2*s12 - 4*s13)*s23^3 + 2*s23^4) +
            p1q*p2q^3*(36*s12^3*s13 - 72*s12^2*s13^2 - 126*s12*s13^3 -
              18*s13^4 + (-2*s12^3 - 73*s12^2*s13 - 342*s12*s13^2 -
                145*s13^3)*s23 + (-6*s12^2 - 193*s12*s13 - 209*s13^2)*s23^2 +
              (-s12 - 79*s13)*s23^3 + 3*s23^4) + p1q^3*p2q*(36*s12^3*s13 -
              18*s12^2*s13^2 - 54*s12*s13^3 + (-57*s12^2*s13 - 221*s12*
                 s13^2 - 74*s13^3)*s23 + (-4*s12^2 - 125*s12*s13 - 102*s13^2)*
               s23^2 + (2*s12 - 22*s13)*s23^3 + 6*s23^4) +
            p1q^2*p2q^2*(54*s12^3*s13 - 54*s12^2*s13^2 - 108*s12*s13^3 +
              (-78*s12^2*s13 - 372*s12*s13^2 - 132*s13^3)*s23 +
              (-4*s12^2 - 205*s12*s13 - 201*s13^2)*s23^2 + (3*s12 - 62*s13)*
               s23^3 + 7*s23^4)))*Log(s12/(s12 + s13 + s23)))/
        (8*p1q*p3q^4*s12^2*s13*s23 + p1q^3*p2q^2*(-24*s12*s13^2*s23 -
           24*s12*s13*s23^2) + p1q^2*p2q^3*(-24*s12*s13^2*s23 -
           24*s12*s13*s23^2) + p1q^4*p2q*(-8*s12*s13^2*s23 -
           8*s12*s13*s23^2) + p1q*p2q^4*(-8*s12*s13^2*s23 -
           8*s12*s13*s23^2) + p3q^2*(p1q^2*p2q*((32*s12^2*s13 - 40*s12*s13^2)*
              s23 - 40*s12*s13*s23^2) + p1q*p2q^2*
            ((24*s12^2*s13 - 24*s12*s13^2)*s23 - 24*s12*s13*s23^2) +
           p1q^3*((8*s12^2*s13 - 16*s12*s13^2)*s23 - 16*s12*s13*s23^2)) +
         p3q*(p1q^2*p2q^2*((16*s12^2*s13 - 56*s12*s13^2)*s23 -
             56*s12*s13*s23^2) + p1q^3*p2q*((8*s12^2*s13 - 40*s12*s13^2)*
              s23 - 40*s12*s13*s23^2) + p1q*p2q^3*
            ((8*s12^2*s13 - 24*s12*s13^2)*s23 - 24*s12*s13*s23^2) +
           p1q^4*(-8*s12*s13^2*s23 - 8*s12*s13*s23^2)) +
         p3q^3*(p1q^2*((16*s12^2*s13 - 8*s12*s13^2)*s23 - 8*s12*s13*s23^2) +
           p1q*p2q*((24*s12^2*s13 - 8*s12*s13^2)*s23 - 8*s12*s13*s23^2))) +
       ((p3q^4*(-s12^3 - s12^2*s13 - s12^2*s23) +
          p2q^4*(-(s12*s13^2) - s13^3 + (-(s12*s13) - 2*s13^2)*s23 -
            s13*s23^2) + p1q^3*p2q*(-7*s12*s13^2 - 7*s13^3 +
            (-8*s12*s13 - 15*s13^2)*s23 + (-4*s12 - 12*s13)*s23^2 -
            4*s23^3) + p1q^2*p2q^2*(-10*s12*s13^2 - 10*s13^3 +
            (-10*s12*s13 - 20*s13^2)*s23 + (-3*s12 - 13*s13)*s23^2 -
            3*s23^3) + p1q^4*(-2*s12*s13^2 - 2*s13^3 + (-3*s12*s13 - 5*s13^2)*
             s23 + (-2*s12 - 5*s13)*s23^2 - 2*s23^3) +
          p1q*p2q^3*(-6*s12*s13^2 - 6*s13^3 + (-6*s12*s13 - 12*s13^2)*s23 +
            (-s12 - 7*s13)*s23^2 - s23^3) +
          p3q^3*(p2q*(2*s12^2*s13 + 2*s12*s13^2 + (s12^2 + 3*s12*s13)*s23 +
              s12*s23^2) + p1q*(-2*s12^3 - 2*s12^2*s13 + 2*s12*s13*s23 +
              2*s12*s23^2)) + p3q*(p2q^3*(2*s12^2*s13 + 2*s12*s13^2 +
              (s12^2 + 3*s12*s13)*s23 + s12*s23^2) + p1q*p2q^2*
             (8*s12^2*s13 + 8*s12*s13^2 + (4*s12^2 + 14*s12*s13 + 2*s13^2)*
               s23 + (4*s12 + 2*s13)*s23^2) + p1q^2*p2q*(8*s12^2*s13 +
              8*s12*s13^2 + (6*s12^2 + 16*s12*s13 + 2*s13^2)*s23 +
              4*s12*s23^2 - 2*s23^3) + p1q^3*(3*s12^2*s13 + 3*s12*s13^2 +
              (4*s12^2 + 7*s12*s13)*s23 + (2*s12 - 2*s13)*s23^2 - 2*s23^3)) +
          p3q^2*(p2q^2*(-s12^3 - s12^2*s13 - s12*s13^2 - s13^3 +
              (-s12^2 - s12*s13 - 2*s13^2)*s23 - s13*s23^2) +
            p1q*p2q*(-2*s12^3 + 2*s12*s13^2 + 4*s12*s13*s23 +
              (s12 - s13)*s23^2 - s23^3) + p1q^2*(-2*s12^3 - 2*s12^2*s13 +
              (2*s12^2 + 4*s12*s13)*s23 + (3*s12 - s13)*s23^2 - s23^3)))*
         Log(s13/(s12 + s13 + s23)))/(8*p1q*p3q^3*s12^2*s13 +
         p1q^3*p2q*(-24*s12*s13^2 - 24*s12*s13*s23) +
         p1q^2*p2q^2*(-24*s12*s13^2 - 24*s12*s13*s23) +
         p1q^4*(-8*s12*s13^2 - 8*s12*s13*s23) + p1q*p2q^3*
          (-8*s12*s13^2 - 8*s12*s13*s23) +
         p3q*(p1q^2*p2q*(16*s12^2*s13 - 32*s12*s13^2 - 32*s12*s13*s23) +
           p1q^3*(8*s12^2*s13 - 16*s12*s13^2 - 16*s12*s13*s23) +
           p1q*p2q^2*(8*s12^2*s13 - 16*s12*s13^2 - 16*s12*s13*s23)) +
         p3q^2*(p1q^2*(16*s12^2*s13 - 8*s12*s13^2 - 8*s12*s13*s23) +
           p1q*p2q*(16*s12^2*s13 - 8*s12*s13^2 - 8*s12*s13*s23))) +
       ((p3q^5*(-9*s12^3 - 9*s12^2*s13 - 9*s12^2*s23) +
          p1q^5*((9*s12^2 + 18*s12*s13 + 9*s13^2)*s23 + (18*s12 + 18*s13)*
             s23^2 + 9*s23^3) + p2q^5*(9*s12^2*s13 + 9*s12*s13^2 +
            (18*s12^2 + 45*s12*s13 + 18*s13^2)*s23 + (36*s12 + 36*s13)*
             s23^2 + 18*s23^3) + p1q^4*p2q*(9*s12^2*s13 - 9*s13^3 +
            (54*s12^2 + 99*s12*s13 + 27*s13^2)*s23 + (90*s12 + 72*s13)*
             s23^2 + 36*s23^3) + p1q*p2q^4*(36*s12^2*s13 + 18*s12*s13^2 -
            18*s13^3 + (81*s12^2 + 180*s12*s13 + 45*s13^2)*s23 +
            (153*s12 + 135*s13)*s23^2 + 72*s23^3) + p1q^3*p2q^2*
           (36*s12^2*s13 + 9*s12*s13^2 - 27*s13^3 +
            (126*s12^2 + 252*s12*s13 + 63*s13^2)*s23 + (216*s12 + 180*s13)*
             s23^2 + 90*s23^3) + p1q^2*p2q^3*(54*s12^2*s13 + 18*s12*s13^2 -
            36*s13^3 + (144*s12^2 + 306*s12*s13 + 72*s13^2)*s23 +
            (261*s12 + 225*s13)*s23^2 + 117*s23^3) +
          p3q^4*(p2q*(-18*s12^3 - 9*s12^2*s13 + 9*s12*s13^2 +
              (-18*s12^2 + 9*s12*s13)*s23) + p1q*(-18*s12^3 - 18*s12^2*s13 +
              18*s12*s13*s23 + 18*s12*s23^2)) +
          p3q^3*(p1q*p2q*(-36*s12^3 - 18*s12^2*s13 + 18*s12*s13^2 +
              (9*s12^2 + 72*s12*s13 + 9*s13^2)*s23 + (45*s12 + 9*s13)*s23^
                2) + p1q^2*(-18*s12^3 - 18*s12^2*s13 + (18*s12^2 +
                36*s12*s13)*s23 + (27*s12 - 9*s13)*s23^2 - 9*s23^3) +
            p2q^2*(-18*s12^3 + 18*s12*s13^2 + (54*s12*s13 + 18*s13^2)*s23 +
              (36*s12 + 36*s13)*s23^2 + 18*s23^3)) +
          p3q^2*(p1q*p2q^2*(-72*s12^3 - 36*s12^2*s13 + 36*s12*s13^2 +
              (-63*s12^2 + 72*s12*s13 + 27*s13^2)*s23 + (9*s12 + 27*s13)*s23^
                2) + p1q^2*p2q*(-72*s12^3 - 54*s12^2*s13 + 18*s12*s13^2 +
              (-36*s12^2 + 72*s12*s13 + 18*s13^2)*s23 + (9*s12 - 9*s13)*s23^
                2 - 27*s23^3) + p1q^3*(-27*s12^3 - 27*s12^2*s13 +
              (-18*s12^2 + 9*s12*s13)*s23 + (-9*s12 - 18*s13)*s23^2 -
              18*s23^3) + p2q^3*(-18*s12^3 + 18*s12*s13^2 + (54*s12*s13 +
                18*s13^2)*s23 + (36*s12 + 36*s13)*s23^2 + 18*s23^3)) +
          p3q*(p1q^4*(-9*s12^3 + 9*s12*s13^2 + (9*s12^2 + 45*s12*s13 +
                18*s13^2)*s23 + (27*s12 + 27*s13)*s23^2 + 9*s23^3) +
            p2q^4*(-9*s12^3 + 9*s12^2*s13 + 18*s12*s13^2 + (9*s12^2 +
                54*s12*s13 + 18*s13^2)*s23 + (36*s12 + 36*s13)*s23^2 +
              18*s23^3) + p1q^3*p2q*(-36*s12^3 + 18*s12^2*s13 +
              54*s12*s13^2 + (54*s12^2 + 225*s12*s13 + 81*s13^2)*s23 +
              (126*s12 + 117*s13)*s23^2 + 36*s23^3) + p1q*p2q^3*
             (-36*s12^3 + 54*s12^2*s13 + 90*s12*s13^2 + (45*s12^2 +
                270*s12*s13 + 99*s13^2)*s23 + (153*s12 + 171*s13)*s23^2 +
              72*s23^3) + p1q^2*p2q^2*(-54*s12^3 + 54*s12^2*s13 +
              108*s12*s13^2 + (72*s12^2 + 378*s12*s13 + 144*s13^2)*s23 +
              (207*s12 + 225*s13)*s23^2 + 81*s23^3)))*
         Log(s23/(s12 + s13 + s23)))/(8*p1q*p3q^4*s12^2*s23 +
         p1q^3*p2q^2*(-24*s12*s13*s23 - 24*s12*s23^2) +
         p1q^2*p2q^3*(-24*s12*s13*s23 - 24*s12*s23^2) +
         p1q^4*p2q*(-8*s12*s13*s23 - 8*s12*s23^2) +
         p1q*p2q^4*(-8*s12*s13*s23 - 8*s12*s23^2) +
         p3q^2*(p1q^2*p2q*((32*s12^2 - 40*s12*s13)*s23 - 40*s12*s23^2) +
           p1q*p2q^2*((24*s12^2 - 24*s12*s13)*s23 - 24*s12*s23^2) +
           p1q^3*((8*s12^2 - 16*s12*s13)*s23 - 16*s12*s23^2)) +
         p3q*(p1q^2*p2q^2*((16*s12^2 - 56*s12*s13)*s23 - 56*s12*s23^2) +
           p1q^3*p2q*((8*s12^2 - 40*s12*s13)*s23 - 40*s12*s23^2) +
           p1q*p2q^3*((8*s12^2 - 24*s12*s13)*s23 - 24*s12*s23^2) +
           p1q^4*(-8*s12*s13*s23 - 8*s12*s23^2)) +
         p3q^3*(p1q^2*((16*s12^2 - 8*s12*s13)*s23 - 8*s12*s23^2) +
           p1q*p2q*((24*s12^2 - 8*s12*s13)*s23 - 8*s12*s23^2))) +
       ((p2q^3*(-9*s12^2*s13 - 18*s12*s13^2 - 9*s13^3 +
            (-18*s12*s13 - 18*s13^2)*s23 - 9*s13*s23^2) +
          p1q*p2q^2*((s12^2 + 2*s12*s13 + s13^2)*s23 + (2*s12 + 2*s13)*
             s23^2 + s23^3) + p3q^2*(p2q*(-9*s12^2*s13 - 18*s12*s13^2 -
              9*s13^3 + (-18*s12*s13 - 18*s13^2)*s23 - 9*s13*s23^2) +
            p1q*((s12^2 + 2*s12*s13 + s13^2)*s23 + (2*s12 + 2*s13)*s23^2 +
              s23^3)))*Log((s13 + s23)/(s12 + s13 + s23)))/
        (4*p1q^3*s12*s13*s23 + 8*p1q^2*p2q*s12*s13*s23 +
         4*p1q*p2q^2*s12*s13*s23 + 4*p1q*p3q^2*s12*s13*s23 +
         p3q*(8*p1q^2*s12*s13*s23 + 8*p1q*p2q*s12*s13*s23))) +
     Log(s12/(s12 + s13 + s23))*
      ((p3q^4*(-135*s12^5*s13 - 270*s12^4*s13^2 - 135*s12^3*s13^3 +
           (-90*s12^5 - 585*s12^4*s13 - 432*s12^3*s13^2 + 63*s12^2*s13^3)*
            s23 + (-270*s12^4 - 477*s12^3*s13 + 126*s12^2*s13^2)*s23^2 +
           (-180*s12^3 + 63*s12^2*s13)*s23^3) + p1q*p2q^3*
          (-135*s12^2*s13^4 - 63*s12*s13^5 - 324*s13^6 +
           (89*s12^2*s13^3 + 260*s12*s13^4 - 800*s13^5)*s23 +
           (162*s12^2*s13^2 + 685*s12*s13^3 - 448*s13^4)*s23^2 +
           (18*s12^2*s13 + 362*s12*s13^2 + 208*s13^3)*s23^3 +
           180*s13^2*s23^4) + p1q^4*((-198*s12^2*s13^3 - 198*s12*s13^4)*s23 +
           (-486*s12^2*s13^2 - 684*s12*s13^3)*s23^2 +
           (-378*s12^2*s13 - 864*s12*s13^2)*s23^3 + (-90*s12^2 - 468*s12*s13)*
            s23^4 - 90*s12*s23^5) + p1q^2*p2q^2*(-333*s12^2*s13^4 +
           135*s12*s13^5 - 324*s13^6 + (-244*s12^2*s13^3 + 339*s12*s13^4 -
             972*s13^5)*s23 + (-251*s12^2*s13^2 - 331*s12*s13^3 - 1296*s13^4)*
            s23^2 + (-180*s12^2*s13 - 1091*s12*s13^2 - 1312*s13^3)*s23^3 +
           (-556*s12*s13 - 1004*s13^2)*s23^4 - 340*s13*s23^5) +
         p1q^3*p2q*(-198*s12^2*s13^4 + 198*s12*s13^5 +
           (-179*s12^2*s13^3 + 585*s12*s13^4 + 180*s13^5)*s23 +
           (-35*s12^2*s13^2 + 732*s12*s13^3 + 720*s13^4)*s23^2 +
           (96*s12^2*s13 + 755*s12*s13^2 + 1232*s13^3)*s23^3 +
           (70*s12^2 + 640*s12*s13 + 1184*s13^2)*s23^4 + (230*s12 + 652*s13)*
            s23^5 + 160*s23^6) + p3q^3*(p2q*(-135*s12^5*s13 -
             198*s12^4*s13^2 + 9*s12^3*s13^3 - 252*s12^2*s13^4 -
             324*s12*s13^5 + (-90*s12^5 - 558*s12^4*s13 - 99*s12^3*s13^2 -
               342*s12^2*s13^3 - 1035*s12*s13^4)*s23 +
             (-270*s12^4 - 333*s12^3*s13 + 90*s12^2*s13^2 - 1098*s12*s13^3)*
              s23^2 + (-180*s12^3 + 180*s12^2*s13 - 387*s12*s13^2)*s23^3) +
           p1q*(135*s12^5*s13 - 63*s12^4*s13^2 - 198*s12^2*s13^4 +
             (90*s12^5 + 447*s12^4*s13 + 787*s12^3*s13^2 + 593*s12^2*s13^3 -
               126*s12*s13^4 - 144*s13^5)*s23 + (340*s12^4 + 1682*s12^3*s13 +
               1784*s12^2*s13^2 - 295*s12*s13^3 - 288*s13^4)*s23^2 +
             (770*s12^3 + 1593*s12^2*s13 - 324*s12*s13^2 - 144*s13^3)*s23^3 +
             (520*s12^2 - 155*s12*s13)*s23^4)) +
         p3q^2*(p2q^2*(72*s12^4*s13^2 + 207*s12^3*s13^3 - 774*s12^2*s13^4 -
             1233*s12*s13^5 - 324*s13^6 + (27*s12^4*s13 + 396*s12^3*s13^2 -
               1449*s12^2*s13^3 - 4086*s12*s13^4 - 1620*s13^5)*s23 +
             (144*s12^3*s13 - 558*s12^2*s13^2 - 4473*s12*s13^3 - 2916*s13^4)*
              s23^2 + (117*s12^2*s13 - 1620*s12*s13^2 - 2268*s13^3)*s23^3 -
             648*s13^2*s23^4) + p1q*p2q*(-405*s12^4*s13^2 + 189*s12^3*s13^3 -
             1692*s12^2*s13^4 - 1098*s12*s13^5 + (105*s12^4*s13 + 1053*s12^3*
                s13^2 - 1190*s12^2*s13^3 - 3797*s12*s13^4 - 720*s13^5)*s23 +
             (250*s12^4 + 1794*s12^3*s13 + 2015*s12^2*s13^2 - 3688*s12*
                s13^3 - 1712*s13^4)*s23^2 + (770*s12^3 + 2193*s12^2*s13 - 737*
                s12*s13^2 - 1192*s13^3)*s23^3 + (520*s12^2 + 252*s12*s13 -
               128*s13^2)*s23^4 + 72*s13*s23^5) + p1q^2*(-333*s12^4*s13^2 +
             63*s12^3*s13^3 - 396*s12^2*s13^4 + (-648*s12^4*s13 - 242*s12^3*
                s13^2 + 237*s12^2*s13^3 - 414*s12*s13^4 - 288*s13^5)*s23 +
             (-270*s12^4 - 930*s12^3*s13 - 265*s12^2*s13^2 - 1330*s12*s13^3 -
               540*s13^4)*s23^2 + (-500*s12^3 - 1548*s12^2*s13 - 2166*s12*
                s13^2 - 124*s13^3)*s23^3 + (-730*s12^2 - 1750*s12*s13 + 220*
                s13^2)*s23^4 + (-500*s12 + 92*s13)*s23^5)) +
         p3q*(p2q^3*(63*s12^3*s13^3 - 522*s12^2*s13^4 - 909*s12*s13^5 -
             324*s13^6 + (63*s12^3*s13^2 - 1044*s12^2*s13^3 - 3051*s12*
                s13^4 - 1620*s13^5)*s23 + (-522*s12^2*s13^2 - 3375*s12*
                s13^3 - 2916*s13^4)*s23^2 + (-1233*s12*s13^2 - 2268*s13^3)*
              s23^3 - 648*s13^2*s23^4) + p1q^2*p2q*(666*s12^3*s13^3 -
             1494*s12^2*s13^4 - 576*s12*s13^5 + (928*s12^3*s13^2 - 1555*s12^2*
                s13^3 - 2793*s12*s13^4 - 612*s13^5)*s23 +
             (-48*s12^3*s13 - 1335*s12^2*s13^2 - 4964*s12*s13^3 - 1836*s13^4)*
              s23^2 + (-230*s12^3 - 1764*s12^2*s13 - 4553*s12*s13^2 - 2084*
                s13^3)*s23^3 + (-730*s12^2 - 2306*s12*s13 - 1108*s13^2)*
              s23^4 + (-500*s12 - 248*s13)*s23^5) + p1q*p2q^2*
            (405*s12^3*s13^3 - 1359*s12^2*s13^4 - 576*s12*s13^5 +
             (554*s12^3*s13^2 - 1136*s12^2*s13^3 - 1917*s12*s13^4 - 404*
                s13^5)*s23 + (229*s12^3*s13 + 681*s12^2*s13^2 - 1475*s12*
                s13^3 - 900*s13^4)*s23^2 + (618*s12^2*s13 + 273*s12*s13^2 -
               516*s13^3)*s23^3 + (407*s12*s13 + 52*s13^2)*s23^4 +
             72*s13*s23^5) + p1q^3*(198*s12^3*s13^3 - 198*s12^2*s13^4 +
             (819*s12^3*s13^2 + 289*s12^2*s13^3 - 486*s12*s13^4 - 144*s13^5)*
              s23 + (891*s12^3*s13 + 1171*s12^2*s13^2 - 969*s12*s13^3 - 252*
                s13^4)*s23^2 + (270*s12^3 + 1104*s12^2*s13 - 226*s12*s13^2 +
               260*s13^3)*s23^3 + (340*s12^2 + 487*s12*s13 + 860*s13^2)*
              s23^4 + (230*s12 + 652*s13)*s23^5 + 160*s23^6)))/
        (p1q^3*p2q*(72*s12*s13^4*s23 + 144*s12*s13^3*s23^2 +
           72*s12*s13^2*s23^3) + p1q*p2q^3*(72*s12*s13^4*s23 +
           144*s12*s13^3*s23^2 + 72*s12*s13^2*s23^3) +
         p1q*p3q^3*(72*s12*s13^4*s23 + 144*s12*s13^3*s23^2 +
           72*s12*s13^2*s23^3) + p1q^2*p2q^2*(144*s12*s13^4*s23 +
           288*s12*s13^3*s23^2 + 144*s12*s13^2*s23^3) +
         p3q^2*(p1q^2*(144*s12*s13^4*s23 + 288*s12*s13^3*s23^2 +
             144*s12*s13^2*s23^3) + p1q*p2q*(216*s12*s13^4*s23 +
             432*s12*s13^3*s23^2 + 216*s12*s13^2*s23^3)) +
         p3q*(p1q^3*(72*s12*s13^4*s23 + 144*s12*s13^3*s23^2 +
             72*s12*s13^2*s23^3) + p1q*p2q^2*(216*s12*s13^4*s23 +
             432*s12*s13^3*s23^2 + 216*s12*s13^2*s23^3) +
           p1q^2*p2q*(288*s12*s13^4*s23 + 576*s12*s13^3*s23^2 +
             288*s12*s13^2*s23^3))) +
       ((p3q^4*(7*s12^4 + 2*s12^3*s13 + 3*s12^2*s13^2 +
            (15*s12^3 + 6*s12^2*s13 + 3*s12*s13^2)*s23 +
            (12*s12^2 + 3*s12*s13)*s23^2 + 4*s12*s23^3) +
          p2q^4*(3*s12^2*s13^2 + 2*s12*s13^3 + 7*s13^4 +
            (3*s12^2*s13 + 6*s12*s13^2 + 15*s13^3)*s23 +
            (3*s12*s13 + 12*s13^2)*s23^2 + 4*s13*s23^3) +
          p1q^2*p2q^2*(-2*s12^3*s13 + 15*s12^2*s13^2 - 24*s12*s13^3 +
            7*s13^4 + (-2*s12^3 + 9*s12^2*s13 - 24*s12*s13^2 + s13^3)*s23 +
            (-3*s12^2 - 15*s12*s13 - 9*s13^2)*s23^2 + (-9*s12 - 11*s13)*
             s23^3 - 8*s23^4) + p1q^3*p2q*(-2*s12^3*s13 + 18*s12^2*s13^2 -
            10*s12*s13^3 + 2*s13^4 + (-2*s12^3 + 12*s12^2*s13 - 2*s13^3)*
             s23 + (-3*s12^2 - 3*s12*s13 - 6*s13^2)*s23^2 +
            (-9*s12 - 10*s13)*s23^3 - 8*s23^4) +
          p1q^4*(-2*s12^3*s13 + 4*s12^2*s13^2 - 2*s12*s13^3 +
            (-2*s12^3 - 2*s12^2*s13 - 2*s12*s13^2 - 2*s13^3)*s23 +
            (-5*s12^2 - 8*s12*s13 - 5*s13^2)*s23^2 + (-7*s12 - 7*s13)*s23^3 -
            4*s23^4) + p1q*p2q^3*(-2*s12^3*s13 + 4*s12^2*s13^2 -
            14*s12*s13^3 + 12*s13^4 + (-2*s12^3 - 2*s12^2*s13 -
              20*s12*s13^2 + 16*s13^3)*s23 + (-5*s12^2 - 17*s12*s13 +
              4*s13^2)*s23^2 + (-7*s12 - 4*s13)*s23^3 - 4*s23^4) +
          p3q^2*(p2q^2*(3*s12^4 - 2*s12^3*s13 + 38*s12^2*s13^2 -
              2*s12*s13^3 + 3*s13^4 + (5*s12^3 + 35*s12^2*s13 +
                35*s12*s13^2 + 5*s13^3)*s23 + (10*s12^2 + 30*s12*s13 +
                10*s13^2)*s23^2 + (8*s12 + 8*s13)*s23^3) +
            p1q^2*(7*s12^4 - 24*s12^3*s13 + 15*s12^2*s13^2 - 2*s12*s13^3 +
              (s12^3 - 24*s12^2*s13 + 9*s12*s13^2 - 2*s13^3)*s23 +
              (-9*s12^2 - 15*s12*s13 - 3*s13^2)*s23^2 + (-11*s12 - 9*s13)*s23^
                3 - 8*s23^4) + p1q*p2q*(2*s12^4 - 42*s12^3*s13 +
              44*s12^2*s13^2 - 6*s12*s13^3 + 2*s13^4 + (-18*s12^3 -
                22*s12^2*s13 + 32*s12*s13^2)*s23 + (-23*s12^2 - 3*s12*s13 +
                4*s13^2)*s23^2 + (-11*s12 - 2*s13)*s23^3 - 8*s23^4)) +
          p3q*(p1q^2*p2q*(-22*s12^3*s13 + 52*s12^2*s13^2 - 22*s12*s13^3 +
              (-11*s12^3 + 19*s12^2*s13 + 19*s12*s13^2 - 11*s13^3)*s23 +
              (-7*s12^2 + 12*s12*s13 - 7*s13^2)*s23^2 + (-8*s12 - 8*s13)*s23^
                3 - 12*s23^4) + p1q*p2q^2*(2*s12^4 - 6*s12^3*s13 +
              44*s12^2*s13^2 - 42*s12*s13^3 + 2*s13^4 + (32*s12^2*s13 -
                22*s12*s13^2 - 18*s13^3)*s23 + (4*s12^2 - 3*s12*s13 -
                23*s13^2)*s23^2 + (-2*s12 - 11*s13)*s23^3 - 8*s23^4) +
            p1q^3*(2*s12^4 - 10*s12^3*s13 + 18*s12^2*s13^2 - 2*s12*s13^3 +
              (-2*s12^3 + 12*s12*s13^2 - 2*s13^3)*s23 + (-6*s12^2 -
                3*s12*s13 - 3*s13^2)*s23^2 + (-10*s12 - 9*s13)*s23^3 -
              8*s23^4) + p2q^3*(-6*s12^3*s13 - 2*s12^2*s13^2 - 26*s12*s13^3 +
              2*s13^4 + (-3*s12^3 - 11*s12^2*s13 - 41*s12*s13^2 - 9*s13^3)*
               s23 + (-7*s12^2 - 30*s12*s13 - 19*s13^2)*s23^2 +
              (-8*s12 - 12*s13)*s23^3 - 4*s23^4)) +
          p3q^3*(p2q*(2*s12^4 - 26*s12^3*s13 - 2*s12^2*s13^2 - 6*s12*s13^3 +
              (-9*s12^3 - 41*s12^2*s13 - 11*s12*s13^2 - 3*s13^3)*s23 +
              (-19*s12^2 - 30*s12*s13 - 7*s13^2)*s23^2 + (-12*s12 - 8*s13)*
               s23^3 - 4*s23^4) + p1q*(12*s12^4 - 14*s12^3*s13 +
              4*s12^2*s13^2 - 2*s12*s13^3 + (16*s12^3 - 20*s12^2*s13 -
                2*s12*s13^2 - 2*s13^3)*s23 + (4*s12^2 - 17*s12*s13 - 5*s13^2)*
               s23^2 + (-4*s12 - 7*s13)*s23^3 - 4*s23^4)))*
         Log(s13/(s12 + s13 + s23)))/(p3q^4*(8*s12^3*s13 + 8*s12^2*s13*s23) +
         p2q^4*(8*s12*s13^3 + 8*s12*s13^2*s23) + p1q^2*p2q^2*
          (-24*s12^2*s13^2 + 24*s12*s13^3 - 24*s12^2*s13*s23 -
           24*s12*s13*s23^2) + p1q^3*p2q*(-24*s12^2*s13^2 + 8*s12*s13^3 +
           (-24*s12^2*s13 - 16*s12*s13^2)*s23 - 24*s12*s13*s23^2) +
         p1q^4*(-8*s12^2*s13^2 + (-8*s12^2*s13 - 8*s12*s13^2)*s23 -
           8*s12*s13*s23^2) + p1q*p2q^3*(-8*s12^2*s13^2 + 24*s12*s13^3 +
           (-8*s12^2*s13 + 16*s12*s13^2)*s23 - 8*s12*s13*s23^2) +
         p3q^2*(p1q*p2q*(32*s12^3*s13 - 56*s12^2*s13^2 + 8*s12*s13^3 +
             (-8*s12^2*s13 - 32*s12*s13^2)*s23 - 40*s12*s13*s23^2) +
           p1q^2*(24*s12^3*s13 - 24*s12^2*s13^2 - 24*s12*s13^2*s23 -
             24*s12*s13*s23^2) + p2q^2*(8*s12^3*s13 - 32*s12^2*s13^2 +
             8*s12*s13^3 + (-8*s12^2*s13 - 8*s12*s13^2)*s23 -
             16*s12*s13*s23^2)) + p3q^3*(p2q*(16*s12^3*s13 - 16*s12^2*s13^2 +
             (8*s12^2*s13 - 8*s12*s13^2)*s23 - 8*s12*s13*s23^2) +
           p1q*(24*s12^3*s13 - 8*s12^2*s13^2 + (16*s12^2*s13 - 8*s12*s13^2)*
              s23 - 8*s12*s13*s23^2)) +
         p3q*(p1q^2*p2q*(16*s12^3*s13 - 64*s12^2*s13^2 + 16*s12*s13^3 +
             (-40*s12^2*s13 - 40*s12*s13^2)*s23 - 56*s12*s13*s23^2) +
           p1q*p2q^2*(8*s12^3*s13 - 56*s12^2*s13^2 + 32*s12*s13^3 +
             (-32*s12^2*s13 - 8*s12*s13^2)*s23 - 40*s12*s13*s23^2) +
           p1q^3*(8*s12^3*s13 - 24*s12^2*s13^2 + (-16*s12^2*s13 - 24*s12*
                s13^2)*s23 - 24*s12*s13*s23^2) + p2q^3*(-16*s12^2*s13^2 +
             16*s12*s13^3 + (-8*s12^2*s13 + 8*s12*s13^2)*s23 -
             8*s12*s13*s23^2))) +
       ((p3q^6*((-90*s12^7 - 270*s12^6*s13 - 360*s12^5*s13^2 -
              441*s12^4*s13^3 - 432*s12^3*s13^4 - 171*s12^2*s13^5)*s23 +
            (-270*s12^6 - 477*s12^5*s13 - 414*s12^4*s13^2 - 477*s12^3*s13^3 -
              270*s12^2*s13^4)*s23^2 + (-180*s12^5 - 117*s12^4*s13 -
              117*s12^3*s13^2 - 99*s12^2*s13^3)*s23^3) +
          p2q^6*((153*s12^3*s13^4 + 378*s12^2*s13^5 + 297*s12*s13^6 +
              72*s13^7)*s23 + (72*s12^3*s13^3 + 351*s12^2*s13^4 +
              486*s12*s13^5 + 207*s13^6)*s23^2 + (54*s12^2*s13^3 +
              171*s12*s13^4 + 198*s13^5)*s23^3 + (-18*s12*s13^3 + 63*s13^4)*
             s23^4) + p1q*p2q^5*(-324*s12^2*s13^6 - 324*s12*s13^7 +
            (648*s12^3*s13^4 + 234*s12^2*s13^5 - 162*s12*s13^6 - 72*s13^7)*
             s23 + (20*s12^3*s13^3 - 1560*s12^2*s13^4 - 1900*s12*s13^5 -
              644*s13^6)*s23^2 + (-223*s12^3*s13^2 - 2197*s12^2*s13^3 -
              4061*s12*s13^4 - 1601*s13^5)*s23^3 + (-646*s12^2*s13^2 -
              2463*s12*s13^3 - 1475*s13^4)*s23^4 +
            (-383*s12*s13^2 - 446*s13^3)*s23^5) + p1q^2*p2q^4*
           (-972*s12^2*s13^6 - 972*s12*s13^7 + (1467*s12^3*s13^4 -
              648*s12^2*s13^5 - 783*s12*s13^6 - 288*s13^7)*s23 +
            (434*s12^3*s13^3 - 3909*s12^2*s13^4 - 3489*s12*s13^5 -
              1108*s13^6)*s23^2 + (20*s12^3*s13^2 - 2363*s12^2*s13^3 -
              4174*s12*s13^4 - 1127*s13^5)*s23^3 +
            (243*s12^3*s13 + 1058*s12^2*s13^2 + 921*s12*s13^3 + 1036*s13^4)*
             s23^4 + (646*s12^2*s13 + 2144*s12*s13^2 + 2129*s13^3)*s23^5 +
            (403*s12*s13 + 786*s13^2)*s23^6) +
          p1q^6*((-324*s12^2*s13^4 - 324*s12*s13^5)*s23^2 +
            (-486*s12^2*s13^3 - 801*s12*s13^4 + 9*s13^5)*s23^3 +
            (-486*s12^2*s13^2 - 963*s12*s13^3 + 18*s13^4)*s23^4 +
            (-333*s12^2*s13 - 819*s12*s13^2 + 9*s13^3)*s23^5 +
            (-90*s12^2 - 423*s12*s13)*s23^6 - 90*s12*s23^7) +
          p1q^3*p2q^3*(-972*s12^2*s13^6 - 972*s12*s13^7 +
            (1782*s12^3*s13^4 - 594*s12^2*s13^5 + 324*s12*s13^6 - 216*s13^7)*
             s23 + (972*s12^3*s13^3 - 3600*s12^2*s13^4 - 1065*s12*s13^5 -
              435*s13^6)*s23^2 + (243*s12^3*s13^2 - 1237*s12^2*s13^3 -
              1025*s12*s13^4 + 422*s13^5)*s23^3 +
            (173*s12^3*s13 + 898*s12^2*s13^2 + 1686*s12*s13^3 + 1897*s13^4)*
             s23^4 + (-70*s12^3 - 210*s12^2*s13 - 40*s12*s13^2 + 807*s13^3)*
             s23^5 + (-230*s12^2 - 1036*s12*s13 - 1012*s13^2)*s23^6 +
            (-160*s12 - 563*s13)*s23^7) + p1q^4*p2q^2*(-324*s12^2*s13^6 -
            324*s12*s13^7 + (1134*s12^3*s13^4 + 234*s12^2*s13^5 +
              1296*s12*s13^6 - 72*s13^7)*s23 + (972*s12^3*s13^3 -
              1530*s12^2*s13^4 + 677*s12*s13^5 - 115*s13^6)*s23^2 +
            (486*s12^3*s13^2 - 243*s12^2*s13^3 - 480*s12*s13^4 + 54*s13^5)*
             s23^3 + (263*s12^3*s13 + 346*s12^2*s13^2 - 636*s12*s13^3 -
              35*s13^4)*s23^4 + (20*s12^3 - 273*s12^2*s13 - 1651*s12*s13^2 -
              984*s13^3)*s23^5 + (-70*s12^2 - 806*s12*s13 - 1012*s13^2)*
             s23^6 + 70*s12*s23^7 + 160*s23^8) + p1q^5*p2q*
           ((324*s12^3*s13^4 + 324*s12^2*s13^5 + 648*s12*s13^6)*s23 +
            (486*s12^3*s13^3 - 252*s12^2*s13^4 + 315*s12*s13^5 + 63*s13^6)*
             s23^2 + (486*s12^3*s13^2 + 396*s12^2*s13^3 - 198*s12*s13^4 +
              313*s13^5)*s23^3 + (333*s12^3*s13 + 666*s12^2*s13^2 +
              81*s12*s13^3 + 660*s13^4)*s23^4 + (90*s12^3 + 250*s12^2*s13 +
              97*s12*s13^2 + 793*s13^3)*s23^5 + (70*s12^2 + 210*s12*s13 +
              786*s13^2)*s23^6 + (140*s12 + 563*s13)*s23^7 + 160*s23^8) +
          p3q^5*(p2q*((-180*s12^7 - 423*s12^6*s13 - 369*s12^5*s13^2 -
                594*s12^4*s13^3 - 774*s12^3*s13^4 - 207*s12^2*s13^5 +
                99*s12*s13^6)*s23 + (-450*s12^6 - 270*s12^5*s13 +
                234*s12^4*s13^2 - 297*s12^3*s13^3 - 126*s12^2*s13^4 +
                225*s12*s13^5)*s23^2 + (-90*s12^5 + 540*s12^4*s13 +
                351*s12^3*s13^2 + 270*s12^2*s13^3 + 225*s12*s13^4)*s23^3 +
              (180*s12^4 + 117*s12^3*s13 + 117*s12^2*s13^2 + 99*s12*s13^3)*
               s23^4) + p1q*(324*s12^5*s13^3 + 324*s12^4*s13^4 +
              (90*s12^7 + 117*s12^6*s13 + 387*s12^5*s13^2 + 369*s12^4*s13^3 +
                189*s12^3*s13^4 + 108*s12^2*s13^5 + 252*s12*s13^6)*s23 +
              (520*s12^6 + 1560*s12^5*s13 + 2123*s12^4*s13^2 + 1439*s12^3*
                 s13^3 + 1191*s12^2*s13^4 + 511*s12*s13^5)*s23^2 +
              (1310*s12^5 + 2411*s12^4*s13 + 1419*s12^3*s13^2 + 1223*s12^2*
                 s13^3 + 581*s12*s13^4)*s23^3 + (880*s12^4 + 428*s12^3*s13 +
                291*s12^2*s13^2 + 158*s12*s13^3)*s23^4)) +
          p3q^4*(p2q^2*((-90*s12^7 - 36*s12^6*s13 + 288*s12^5*s13^2 -
                108*s12^4*s13^3 - 423*s12^3*s13^4 + 342*s12^2*s13^5 +
                495*s12*s13^6 + 72*s13^7)*s23 + (-90*s12^6 + 864*s12^5*s13 +
                1341*s12^4*s13^2 + 315*s12^3*s13^3 + 720*s12^2*s13^4 +
                999*s12*s13^5 + 207*s13^6)*s23^2 + (360*s12^5 + 1287*s12^4*
                 s13 + 594*s12^3*s13^2 + 783*s12^2*s13^3 + 747*s12*s13^4 +
                198*s13^5)*s23^3 + (360*s12^4 + 117*s12^3*s13 + 180*s12^2*
                 s13^2 + 243*s12*s13^3 + 63*s13^4)*s23^4) +
            p1q^2*(648*s12^5*s13^3 + 324*s12^4*s13^4 - 324*s12^3*s13^5 +
              (-333*s12^6*s13 - 27*s12^5*s13^2 - 882*s12^4*s13^3 -
                369*s12^3*s13^4 - 153*s12^2*s13^5 + 648*s12*s13^6)*s23 +
              (-450*s12^6 - 871*s12^5*s13 - 1245*s12^4*s13^2 - 1804*s12^3*
                 s13^3 + 86*s12^2*s13^4 + 42*s12*s13^5 - 70*s13^6)*s23^2 +
              (-1270*s12^5 - 3540*s12^4*s13 - 4975*s12^3*s13^2 -
                1570*s12^2*s13^3 - 837*s12*s13^4 - 282*s13^5)*s23^3 +
              (-2540*s12^4 - 4934*s12^3*s13 - 1853*s12^2*s13^2 -
                1035*s12*s13^3 - 271*s13^4)*s23^4 + (-1720*s12^3 -
                582*s12^2*s13 - 231*s12*s13^2 - 59*s13^3)*s23^5) +
            p1q*p2q*(648*s12^5*s13^3 - 324*s12^4*s13^4 - 972*s12^3*s13^5 +
              (90*s12^7 - 153*s12^6*s13 + 522*s12^5*s13^2 - 486*s12^4*s13^3 -
                342*s12^3*s13^4 + 585*s12^2*s13^5 + 1368*s12*s13^6 +
                72*s13^7)*s23 + (770*s12^6 + 2478*s12^5*s13 + 3247*s12^4*
                 s13^2 + 1896*s12^3*s13^3 + 2895*s12^2*s13^4 + 1784*s12*
                 s13^5 + 218*s13^6)*s23^2 + (1920*s12^5 + 2849*s12^4*s13 +
                149*s12^3*s13^2 + 1708*s12^2*s13^3 + 1108*s12*s13^4 +
                78*s13^5)*s23^3 + (540*s12^4 - 1443*s12^3*s13 - 545*s12^2*
                 s13^2 - 219*s12*s13^3 - 127*s13^4)*s23^4 + (-700*s12^3 -
                311*s12^2*s13 - 174*s12*s13^2 - 59*s13^3)*s23^5)) +
          p3q^3*(p2q^3*((117*s12^6*s13 + 243*s12^5*s13^2 - 324*s12^4*s13^3 -
                468*s12^3*s13^4 + 567*s12^2*s13^5 + 729*s12*s13^6 +
                144*s13^7)*s23 + (90*s12^6 + 630*s12^5*s13 + 351*s12^4*
                 s13^2 - 297*s12^3*s13^3 + 837*s12^2*s13^4 + 1359*s12*s13^5 +
                414*s13^6)*s23^2 + (270*s12^5 + 486*s12^4*s13 - 189*s12^3*
                 s13^2 + 702*s12^2*s13^3 + 855*s12*s13^4 + 396*s13^5)*s23^3 +
              (180*s12^4 - 117*s12^3*s13 + 126*s12^2*s13^2 + 225*s12*s13^3 +
                126*s13^4)*s23^4) + p1q*p2q^2*(324*s12^5*s13^3 -
              1620*s12^4*s13^4 - 972*s12^3*s13^5 + 972*s12^2*s13^6 +
              (-270*s12^6*s13 + 648*s12^5*s13^2 - 1890*s12^4*s13^3 +
                270*s12^3*s13^4 + 2340*s12^2*s13^5 + 2646*s12*s13^6 +
                144*s13^7)*s23 + (250*s12^6 + 1167*s12^5*s13 + 1253*s12^4*
                 s13^2 + 1392*s12^3*s13^3 + 3435*s12^2*s13^4 + 2239*s12*
                 s13^5 + 508*s13^6)*s23^2 + (360*s12^5 - 756*s12^4*s13 -
                3331*s12^3*s13^2 + 650*s12^2*s13^3 + 22*s12*s13^4 + 73*s13^5)*
               s23^3 + (-1110*s12^4 - 4167*s12^3*s13 - 2194*s12^2*s13^2 -
                1353*s12*s13^3 - 470*s13^4)*s23^4 + (-1220*s12^3 -
                894*s12^2*s13 - 474*s12*s13^2 - 179*s13^3)*s23^5) +
            p1q^2*p2q*(648*s12^5*s13^3 - 1944*s12^4*s13^4 - 1944*s12^3*s13^
                5 + 648*s12^2*s13^6 + (-333*s12^6*s13 + 972*s12^5*s13^2 -
                3249*s12^4*s13^3 - 333*s12^3*s13^4 + 486*s12^2*s13^5 +
                2745*s12*s13^6)*s23 + (-360*s12^6 + 229*s12^5*s13 -
                928*s12^4*s13^2 - 2072*s12^3*s13^3 + 436*s12^2*s13^4 +
                23*s12*s13^5 - 68*s13^6)*s23^2 + (-1300*s12^5 - 5046*s12^4*
                 s13 - 9499*s12^3*s13^2 - 2942*s12^2*s13^3 - 2915*s12*s13^4 -
                802*s13^5)*s23^3 + (-3200*s12^4 - 7390*s12^3*s13 -
                2229*s12^2*s13^2 - 2350*s12*s13^3 - 762*s13^4)*s23^4 +
              (-1240*s12^3 + 1189*s12^2*s13 + 157*s12*s13^2 + 29*s13^3)*s23^
                5 + (1020*s12^2 + 271*s12*s13 + 57*s13^2)*s23^6) +
            p1q^3*(324*s12^5*s13^3 - 324*s12^4*s13^4 - 648*s12^3*s13^5 +
              (486*s12^5*s13^2 - 1386*s12^4*s13^3 + 36*s12^3*s13^4 -
                36*s12^2*s13^5 + 972*s12*s13^6)*s23 + (1332*s12^5*s13 +
                900*s12^4*s13^2 + 369*s12^3*s13^3 + 1461*s12^2*s13^4 +
                66*s12*s13^5)*s23^2 + (900*s12^5 + 2334*s12^4*s13 +
                1453*s12^3*s13^2 + 3327*s12^2*s13^3 - 261*s12*s13^4 -
                74*s13^5)*s23^3 + (1680*s12^4 + 3960*s12^3*s13 +
                5807*s12^2*s13^2 + 667*s12*s13^3 + 158*s13^4)*s23^4 +
              (2460*s12^3 + 5106*s12^2*s13 + 1105*s12*s13^2 + 289*s13^3)*s23^
                5 + (1680*s12^2 + 348*s12*s13 + 57*s13^2)*s23^6)) +
          p3q^2*(p2q^4*((-54*s12^5*s13^2 - 495*s12^4*s13^3 - 450*s12^3*
                 s13^4 + 513*s12^2*s13^5 + 666*s12*s13^6 + 144*s13^7)*s23 +
              (-27*s12^5*s13 - 315*s12^4*s13^2 - 270*s12^3*s13^3 +
                711*s12^2*s13^4 + 1107*s12*s13^5 + 414*s13^6)*s23^2 +
              (-144*s12^4*s13 - 171*s12^3*s13^2 + 684*s12^2*s13^3 +
                540*s12*s13^4 + 396*s13^5)*s23^3 + (-117*s12^3*s13 +
                180*s12^2*s13^2 + 99*s12*s13^3 + 126*s13^4)*s23^4) +
            p1q*p2q^3*(-972*s12^4*s13^4 + 972*s12^3*s13^5 + 1620*s12^2*s13^
                6 - 324*s12*s13^7 + (513*s12^5*s13^2 - 1692*s12^4*s13^3 +
                2646*s12^3*s13^4 + 3960*s12^2*s13^5 + 2493*s12*s13^6 +
                144*s13^7)*s23 + (249*s12^5*s13 - 147*s12^4*s13^2 +
                2062*s12^3*s13^3 + 2523*s12^2*s13^4 + 1187*s12*s13^5 +
                474*s13^6)*s23^2 + (-250*s12^5 - 1450*s12^4*s13 -
                2961*s12^3*s13^2 - 1066*s12^2*s13^3 - 2866*s12*s13^4 -
                321*s13^5)*s23^3 + (-770*s12^4 - 2878*s12^3*s13 -
                2955*s12^2*s13^2 - 3421*s12*s13^3 - 990*s13^4)*s23^4 +
              (-520*s12^3 - 909*s12^2*s13 - 1043*s12*s13^2 - 339*s13^3)*s23^
                5) + p1q^2*p2q^2*(-2268*s12^4*s13^4 + 972*s12^3*s13^5 +
              2916*s12^2*s13^6 - 324*s12*s13^7 + (999*s12^5*s13^2 -
                3852*s12^4*s13^3 + 5022*s12^3*s13^4 + 4860*s12^2*s13^5 +
                4707*s12*s13^6)*s23 + (803*s12^5*s13 - 1433*s12^4*s13^2 +
                640*s12^3*s13^3 - 325*s12^2*s13^4 - 131*s12*s13^5 + 46*s13^6)*
               s23^2 + (-210*s12^5 - 2459*s12^4*s13 - 6972*s12^3*s13^2 -
                4162*s12^2*s13^3 - 5968*s12*s13^4 - 1087*s13^5)*s23^3 +
              (-520*s12^4 - 1826*s12^3*s13 + 812*s12^2*s13^2 - 2282*s12*
                 s13^3 - 773*s13^4)*s23^4 + (1210*s12^3 + 4473*s12^2*s13 +
                2632*s12*s13^2 + 654*s13^3)*s23^5 + (1520*s12^2 +
                1417*s12*s13 + 294*s13^2)*s23^6) + p1q^4*(-324*s12^4*s13^4 -
              324*s12^3*s13^5 + (-1134*s12^4*s13^3 + 414*s12^3*s13^4 +
                720*s12*s13^6)*s23 + (-1458*s12^4*s13^2 - 135*s12^3*s13^3 +
                351*s12^2*s13^4 - 592*s12*s13^5 + 2*s13^6)*s23^2 +
              (-1998*s12^4*s13 - 2538*s12^3*s13^2 + 621*s12^2*s13^3 -
                2031*s12*s13^4 - 57*s13^5)*s23^3 + (-900*s12^4 -
                2946*s12^3*s13 - 719*s12^2*s13^2 - 2658*s12*s13^3 + 26*s13^4)*
               s23^4 + (-1270*s12^3 - 2190*s12^2*s13 - 3381*s12*s13^2 -
                95*s13^3)*s23^5 + (-1190*s12^2 - 2669*s12*s13 - 257*s13^2)*
               s23^6 + (-820*s12 - 77*s13)*s23^7) + p1q^3*p2q*
             (-1620*s12^4*s13^4 - 324*s12^3*s13^5 + 1296*s12^2*s13^6 +
              (486*s12^5*s13^2 - 3654*s12^4*s13^3 + 2664*s12^3*s13^4 +
                1872*s12^2*s13^5 + 3816*s12*s13^6)*s23 + (999*s12^5*s13 -
                1278*s12^4*s13^2 + 1125*s12^3*s13^3 + 1230*s12^2*s13^4 +
                651*s12*s13^5 + 69*s13^6)*s23^2 + (540*s12^5 + 251*s12^4*
                 s13 + 367*s12^3*s13^2 + 5383*s12^2*s13^3 - 1118*s12*s13^4 -
                184*s13^5)*s23^3 + (1080*s12^4 + 4560*s12^3*s13 +
                11479*s12^2*s13^2 + 2755*s12*s13^3 + 612*s13^4)*s23^4 +
              (2580*s12^3 + 7876*s12^2*s13 + 3115*s12*s13^2 + 979*s13^3)*s23^
                5 + (1380*s12^2 - 209*s12*s13 + 37*s13^2)*s23^6 +
              (-660*s12 - 77*s13)*s23^7)) +
          p3q*(p2q^5*((-126*s12^4*s13^3 + 90*s12^3*s13^4 + 702*s12^2*s13^5 +
                630*s12*s13^6 + 144*s13^7)*s23 + (27*s12^4*s13^2 +
                234*s12^3*s13^3 + 801*s12^2*s13^4 + 1008*s12*s13^5 +
                414*s13^6)*s23^2 + (144*s12^3*s13^2 + 450*s12^2*s13^3 +
                378*s12*s13^4 + 396*s13^5)*s23^3 + (117*s12^2*s13^2 +
                126*s13^4)*s23^4) + p1q*p2q^4*(972*s12^3*s13^5 +
              324*s12^2*s13^6 - 648*s12*s13^7 + (-657*s12^4*s13^3 +
                2493*s12^3*s13^4 + 2331*s12^2*s13^5 + 801*s12*s13^6)*s23 +
              (-276*s12^4*s13^2 + 1147*s12^3*s13^3 - 768*s12^2*s13^4 -
                1679*s12*s13^5 - 460*s13^6)*s23^2 + (-256*s12^4*s13 -
                1123*s12^3*s13^2 - 3428*s12^2*s13^3 - 6422*s12*s13^4 -
                1917*s13^5)*s23^3 + (-582*s12^3*s13 - 2243*s12^2*s13^2 -
                4908*s12*s13^3 - 2122*s13^4)*s23^4 + (-326*s12^2*s13 -
                1126*s12*s13^2 - 665*s13^3)*s23^5) + p1q^2*p2q^3*
             (2592*s12^3*s13^5 + 1296*s12^2*s13^6 - 1296*s12*s13^7 +
              (-1485*s12^4*s13^3 + 6453*s12^3*s13^4 + 3573*s12^2*s13^5 +
                1827*s12*s13^6 - 288*s13^7)*s23 + (-1282*s12^4*s13^2 +
                1882*s12^3*s13^3 - 4152*s12^2*s13^4 - 3430*s12*s13^5 -
                1046*s13^6)*s23^2 + (-539*s12^4*s13 - 1906*s12^3*s13^2 -
                4595*s12^2*s13^3 - 7758*s12*s13^4 - 1658*s13^5)*s23^3 +
              (230*s12^4 + 990*s12^3*s13 + 2390*s12^2*s13^2 + 89*s12*s13^3 +
                772*s13^4)*s23^4 + (730*s12^3 + 3348*s12^2*s13 +
                4388*s12*s13^2 + 2695*s13^3)*s23^5 + (500*s12^2 +
                1549*s12*s13 + 1023*s13^2)*s23^6) + p1q^3*p2q^2*
             (2268*s12^3*s13^5 + 1620*s12^2*s13^6 - 648*s12*s13^7 +
              (-1296*s12^4*s13^3 + 7326*s12^3*s13^4 + 4230*s12^2*s13^5 +
                4140*s12*s13^6 - 216*s13^7)*s23 + (-1485*s12^4*s13^2 +
                4113*s12^3*s13^3 + 228*s12^2*s13^4 + 1590*s12*s13^5 -
                330*s13^6)*s23^2 + (-796*s12^4*s13 + 399*s12^3*s13^2 +
                3528*s12^2*s13^3 + 566*s12*s13^4 + 366*s13^5)*s23^3 +
              (30*s12^4 + 1601*s12^3*s13 + 7002*s12^2*s13^2 + 4980*s12*
                 s13^3 + 2351*s13^4)*s23^4 + (320*s12^3 + 2524*s12^2*s13 +
                2150*s12*s13^2 + 1479*s13^3)*s23^5 + (-530*s12^2 -
                1593*s12*s13 - 1032*s13^2)*s23^6 + (-820*s12 - 640*s13)*s23^
                7) + p1q^4*p2q*(648*s12^3*s13^5 + 648*s12^2*s13^6 +
              (-486*s12^4*s13^3 + 3492*s12^3*s13^4 + 2178*s12^2*s13^5 +
                2664*s12*s13^6 - 72*s13^7)*s23 + (-972*s12^4*s13^2 +
                2610*s12^3*s13^3 + 1260*s12^2*s13^4 + 1264*s12*s13^5 -
                86*s13^6)*s23^2 + (-999*s12^4*s13 - 360*s12^3*s13^2 +
                1395*s12^2*s13^3 - 1521*s12*s13^4 + 15*s13^5)*s23^3 +
              (-360*s12^4 - 577*s12^3*s13 - 58*s12^2*s13^2 - 3618*s12*s13^3 -
                54*s13^4)*s23^4 + (-440*s12^3 - 1779*s12^2*s13 -
                5644*s12*s13^2 - 1115*s13^3)*s23^5 + (-990*s12^2 -
                3628*s12*s13 - 1269*s13^2)*s23^6 + (-750*s12 - 77*s13)*s23^
                7 + 160*s23^8) + p1q^5*((648*s12^3*s13^4 + 324*s12^2*s13^5 +
                324*s12*s13^6)*s23 + (1296*s12^3*s13^3 + 711*s12^2*s13^4 -
                171*s12*s13^5 + 72*s13^6)*s23^2 + (1458*s12^3*s13^2 +
                1836*s12^2*s13^3 - 729*s12*s13^4 + 304*s13^5)*s23^3 +
              (1332*s12^3*s13 + 2484*s12^2*s13^2 - 441*s12*s13^3 + 615*s13^4)*
               s23^4 + (450*s12^3 + 1789*s12^2*s13 + 124*s12*s13^2 +
                766*s13^3)*s23^5 + (520*s12^2 + 480*s12*s13 + 786*s13^2)*s23^
                6 + (230*s12 + 563*s13)*s23^7 + 160*s23^8)))*
         Log(s23/(s12 + s13 + s23)))/(p1q*p3q^5*(72*s12^3*s13^3 +
           72*s12^2*s13^4)*s23^2 + p1q*p2q^5*
          ((-72*s12^2*s13^4 - 72*s12*s13^5)*s23^2 +
           (-72*s12^2*s13^3 - 72*s12*s13^4)*s23^3) +
         p1q^5*p2q*(72*s12*s13^4*s23^3 + 72*s12*s13^3*s23^4) +
         p1q^2*p2q^4*((-216*s12^2*s13^4 - 216*s12*s13^5)*s23^2 +
           (-216*s12^2*s13^3 - 144*s12*s13^4)*s23^3 + 72*s12*s13^3*s23^4) +
         p1q^3*p2q^3*((-216*s12^2*s13^4 - 216*s12*s13^5)*s23^2 -
           216*s12^2*s13^3*s23^3 + 216*s12*s13^3*s23^4) +
         p1q^4*p2q^2*((-72*s12^2*s13^4 - 72*s12*s13^5)*s23^2 +
           (-72*s12^2*s13^3 + 144*s12*s13^4)*s23^3 + 216*s12*s13^3*s23^4) +
         p3q^4*(p1q^2*((144*s12^3*s13^3 + 72*s12^2*s13^4 - 72*s12*s13^5)*
              s23^2 + (-144*s12^2*s13^3 - 72*s12*s13^4)*s23^3) +
           p1q*p2q*((288*s12^3*s13^3 + 216*s12^2*s13^4 - 72*s12*s13^5)*
              s23^2 + (-72*s12^2*s13^3 - 72*s12*s13^4)*s23^3)) +
         p3q^3*(p1q*p2q^2*((432*s12^3*s13^3 + 144*s12^2*s13^4 - 288*s12*
                s13^5)*s23^2 + (-288*s12^2*s13^3 - 288*s12*s13^4)*s23^3) +
           p1q^2*p2q*((432*s12^3*s13^3 - 432*s12*s13^5)*s23^2 +
             (-648*s12^2*s13^3 - 360*s12*s13^4)*s23^3 + 72*s12*s13^3*s23^4) +
           p1q^3*((72*s12^3*s13^3 - 72*s12^2*s13^4 - 144*s12*s13^5)*s23^2 +
             (-288*s12^2*s13^3 - 72*s12*s13^4)*s23^3 + 72*s12*s13^3*s23^4)) +
         p3q^2*(p1q*p2q^3*((288*s12^3*s13^3 - 144*s12^2*s13^4 - 432*s12*
                s13^5)*s23^2 + (-432*s12^2*s13^3 - 432*s12*s13^4)*s23^3) +
           p1q^4*((-72*s12^2*s13^4 - 72*s12*s13^5)*s23^2 +
             (-144*s12^2*s13^3 + 72*s12*s13^4)*s23^3 + 144*s12*s13^3*s23^4) +
           p1q^2*p2q^2*((432*s12^3*s13^3 - 432*s12^2*s13^4 - 864*s12*s13^5)*
              s23^2 + (-1080*s12^2*s13^3 - 648*s12*s13^4)*s23^3 +
             216*s12*s13^3*s23^4) + p1q^3*p2q*((144*s12^3*s13^3 - 360*s12^2*
                s13^4 - 504*s12*s13^5)*s23^2 + (-792*s12^2*s13^3 - 144*s12*
                s13^4)*s23^3 + 360*s12*s13^3*s23^4)) +
         p3q*(p1q*p2q^4*((72*s12^3*s13^3 - 216*s12^2*s13^4 - 288*s12*s13^5)*
              s23^2 + (-288*s12^2*s13^3 - 288*s12*s13^4)*s23^3) +
           p1q^5*(72*s12*s13^4*s23^3 + 72*s12*s13^3*s23^4) +
           p1q^2*p2q^3*((144*s12^3*s13^3 - 576*s12^2*s13^4 - 720*s12*s13^5)*
              s23^2 + (-792*s12^2*s13^3 - 504*s12*s13^4)*s23^3 +
             216*s12*s13^3*s23^4) + p1q^4*p2q*((-144*s12^2*s13^4 - 144*s12*
                s13^5)*s23^2 + (-216*s12^2*s13^3 + 216*s12*s13^4)*s23^3 +
             360*s12*s13^3*s23^4) + p1q^3*p2q^2*
            ((72*s12^3*s13^3 - 504*s12^2*s13^4 - 576*s12*s13^5)*s23^2 +
             (-720*s12^2*s13^3 - 72*s12*s13^4)*s23^3 + 504*s12*s13^3*
              s23^4))) + ((p2q^4*(72*s12^2*s13^3 + 144*s12*s13^4 + 72*s13^5 +
            (54*s12*s13^3 + 54*s13^4)*s23 - 18*s13^3*s23^2) +
          p3q^4*(90*s12^5 + 180*s12^4*s13 + 180*s12^3*s13^2 +
            180*s12^2*s13^3 + 90*s12*s13^4 + (270*s12^4 + 207*s12^3*s13 +
              207*s12^2*s13^2 + 270*s12*s13^3)*s23 +
            (180*s12^3 - 63*s12^2*s13 + 180*s12*s13^2)*s23^2) +
          p1q*p2q^3*(90*s12^2*s13^3 - 396*s12*s13^4 + 180*s13^5 +
            (-241*s12^2*s13^2 - 1265*s12*s13^3 - 734*s13^4)*s23 +
            (-682*s12*s13^2 - 1155*s13^3)*s23^2 - 401*s13^2*s23^3) +
          p1q^4*((243*s12^2*s13^2 + 153*s12*s13^3 - 90*s13^4)*s23 +
            (243*s12^2*s13 + 486*s12*s13^2 - 90*s13^3)*s23^2 +
            (90*s12^2 + 333*s12*s13)*s23^3 + 90*s12*s23^4) +
          p1q^2*p2q^2*(243*s12^2*s13^3 - 909*s12*s13^4 + 180*s13^5 +
            (-837*s12*s13^3 - 500*s13^4)*s23 + (243*s12^2*s13 +
              592*s12*s13^2 + 69*s13^3)*s23^2 + (646*s12*s13 + 832*s13^2)*
             s23^3 + 403*s13*s23^4) + p1q^3*p2q*(243*s12^2*s13^3 -
            333*s12*s13^4 + 90*s13^5 + (-297*s12*s13^3 - 250*s13^4)*s23 +
            (-180*s12*s13^2 - 320*s13^3)*s23^2 + (-70*s12^2 - 313*s12*s13 -
              383*s13^2)*s23^3 + (-230*s12 - 403*s13)*s23^4 - 160*s23^5) +
          p3q^3*(p2q*(90*s12^5 + 153*s12^4*s13 + 126*s12^3*s13^2 +
              225*s12^2*s13^3 + 234*s12*s13^4 + 72*s13^5 + (270*s12^4 +
                63*s12^3*s13 + 126*s12^2*s13^2 + 387*s12*s13^3 + 54*s13^4)*
               s23 + (180*s12^3 - 180*s12^2*s13 + 243*s12*s13^2 - 18*s13^3)*
               s23^2) + p1q*(-90*s12^5 + 63*s12^4*s13 - 180*s12^3*s13^2 +
              333*s12^2*s13^3 + (-340*s12^4 - 500*s12^3*s13 - 624*s12^2*
                 s13^2 + 490*s12*s13^3 - 88*s13^4)*s23 + (-770*s12^3 -
                777*s12^2*s13 + 60*s12*s13^2 - 86*s13^3)*s23^2 +
              (-520*s12^2 + 146*s12*s13 - 158*s13^2)*s23^3)) +
          p3q^2*(p2q^2*(-27*s12^4*s13 - 27*s12^3*s13^2 + 99*s12^2*s13^3 +
              171*s12*s13^4 + 72*s13^5 + (-144*s12^3*s13 + 63*s12^2*s13^2 +
                261*s12*s13^3 + 54*s13^4)*s23 + (-117*s12^2*s13 +
                180*s12*s13^2 - 18*s13^3)*s23^2) + p1q*p2q*(270*s12^4*s13 -
              189*s12^3*s13^2 + 1206*s12^2*s13^3 - 333*s12*s13^4 +
              (-250*s12^4 - 639*s12^3*s13 - 1082*s12^2*s13^2 + 833*s12*
                 s13^3 - 268*s13^4)*s23 + (-770*s12^3 - 1359*s12^2*s13 -
                339*s12*s13^2 + 137*s13^3)*s23^2 + (-520*s12^2 -
                180*s12*s13 - 75*s13^2)*s23^3) + p1q^2*(243*s12^4*s13 -
              243*s12^3*s13^2 + 846*s12^2*s13^3 + (270*s12^4 + 207*s12^3*
                 s13 - 279*s12^2*s13^2 + 1445*s12*s13^3)*s23 +
              (500*s12^3 + 480*s12^2*s13 + 849*s12*s13^2 + 180*s13^3)*s23^2 +
              (730*s12^2 + 973*s12*s13 - 223*s13^2)*s23^3 + (500*s12 -
                83*s13)*s23^4)) + p3q*(p2q^3*(27*s12^3*s13^2 +
              126*s12^2*s13^3 + 171*s12*s13^4 + 72*s13^5 + (144*s12^2*s13^2 +
                198*s12*s13^3 + 54*s13^4)*s23 + (117*s12*s13^2 - 18*s13^3)*
               s23^2) + p1q*p2q^2*(-270*s12^3*s13^2 + 522*s12^2*s13^3 -
              1206*s12*s13^4 + (-256*s12^3*s13 - 843*s12^2*s13^2 -
                1219*s12*s13^3 - 1094*s13^4)*s23 + (-582*s12^2*s13 -
                1081*s12*s13^2 - 932*s13^3)*s23^2 + (-326*s12*s13 -
                318*s13^2)*s23^3) + p1q^2*p2q*(-486*s12^3*s13^2 +
              1152*s12^2*s13^3 - 1026*s12*s13^4 + (-270*s12^3*s13 -
                423*s12^2*s13^2 + 671*s12*s13^3 - 500*s13^4)*s23 +
              (230*s12^3 + 759*s12^2*s13 + 1261*s12*s13^2 + 429*s13^3)*s23^
                2 + (730*s12^2 + 1619*s12*s13 + 609*s13^2)*s23^3 +
              (500*s12 + 320*s13)*s23^4) + p1q^3*(-243*s12^3*s13^2 +
              333*s12^2*s13^3 - 90*s12*s13^4 + (-486*s12^3*s13 -
                243*s12^2*s13^2 + 702*s12*s13^3 - 160*s13^4)*s23 +
              (-270*s12^3 - 603*s12^2*s13 + 459*s12*s13^2 - 140*s13^3)*s23^
                2 + (-340*s12^2 - 160*s12*s13 - 383*s13^2)*s23^3 +
              (-230*s12 - 403*s13)*s23^4 - 160*s23^5)))*
         Log((s13 + s23)/(s12 + s13 + s23)))/(72*p1q^3*p2q*s12*s13^3*s23 +
         144*p1q^2*p2q^2*s12*s13^3*s23 + 72*p1q*p2q^3*s12*s13^3*s23 +
         72*p1q*p3q^3*s12*s13^3*s23 + p3q^2*(144*p1q^2*s12*s13^3*s23 +
           216*p1q*p2q*s12*s13^3*s23) + p3q*(72*p1q^3*s12*s13^3*s23 +
           288*p1q^2*p2q*s12*s13^3*s23 + 216*p1q*p2q^2*s12*s13^3*s23))) +
     ((p2q^3*(9*s12^2*s13 + 18*s12*s13^2 + 9*s13^3 + (18*s12*s13 + 18*s13^2)*
           s23 + 9*s13*s23^2) + p1q*p2q^2*((s12^2 + 2*s12*s13 + s13^2)*s23 +
          (2*s12 + 2*s13)*s23^2 + s23^3) +
        p3q^2*(p2q*(9*s12^2*s13 + 18*s12*s13^2 + 9*s13^3 +
            (18*s12*s13 + 18*s13^2)*s23 + 9*s13*s23^2) +
          p1q*((s12^2 + 2*s12*s13 + s13^2)*s23 + (2*s12 + 2*s13)*s23^2 +
            s23^3)))*PolyLog(2, p1q/(p1q + p2q)))/(4*p1q^3*s12*s13*s23 +
       8*p1q^2*p2q*s12*s13*s23 + 4*p1q*p2q^2*s12*s13*s23 +
       4*p1q*p3q^2*s12*s13*s23 + p3q*(8*p1q^2*s12*s13*s23 +
         8*p1q*p2q*s12*s13*s23)) +
     ((p2q^2*p3q*(9*s12^3 + 18*s12^2*s13 + 9*s12*s13^2 +
          (18*s12^2 + 18*s12*s13)*s23 + 9*s12*s23^2) +
        p3q^3*(9*s12^3 + 18*s12^2*s13 + 9*s12*s13^2 + (18*s12^2 + 18*s12*s13)*
           s23 + 9*s12*s23^2) + p1q*p2q^2*((s12^2 + 2*s12*s13 + s13^2)*s23 +
          (2*s12 + 2*s13)*s23^2 + s23^3) + p1q*p3q^2*
         ((s12^2 + 2*s12*s13 + s13^2)*s23 + (2*s12 + 2*s13)*s23^2 + s23^3))*
       PolyLog(2, p1q/(p1q + p3q)))/(4*p1q^3*s12*s13*s23 +
       8*p1q^2*p2q*s12*s13*s23 + 4*p1q*p2q^2*s12*s13*s23 +
       4*p1q*p3q^2*s12*s13*s23 + p3q*(8*p1q^2*s12*s13*s23 +
         8*p1q*p2q*s12*s13*s23)) +
     ((p2q^2*p3q*(9*s12^3 + 18*s12^2*s13 + 9*s12*s13^2 +
          (18*s12^2 + 18*s12*s13)*s23 + 9*s12*s23^2) +
        p3q^3*(9*s12^3 + 18*s12^2*s13 + 9*s12*s13^2 + (18*s12^2 + 18*s12*s13)*
           s23 + 9*s12*s23^2) + p2q^3*(-9*s12^2*s13 - 18*s12*s13^2 -
          9*s13^3 + (-18*s12*s13 - 18*s13^2)*s23 - 9*s13*s23^2) +
        p2q*p3q^2*(-9*s12^2*s13 - 18*s12*s13^2 - 9*s13^3 +
          (-18*s12*s13 - 18*s13^2)*s23 - 9*s13*s23^2))*
       PolyLog(2, p2q/(p2q + p3q)))/(4*p1q^3*s12*s13*s23 +
       8*p1q^2*p2q*s12*s13*s23 + 4*p1q*p2q^2*s12*s13*s23 +
       4*p1q*p3q^2*s12*s13*s23 + p3q*(8*p1q^2*s12*s13*s23 +
         8*p1q*p2q*s12*s13*s23)) +
     ((p2q^4*(72*s12^2*s13^3 + 144*s12*s13^4 + 72*s13^5 +
          (54*s12*s13^3 + 54*s13^4)*s23 - 18*s13^3*s23^2) +
        p3q^4*(90*s12^5 + 180*s12^4*s13 + 180*s12^3*s13^2 + 180*s12^2*s13^3 +
          90*s12*s13^4 + (270*s12^4 + 207*s12^3*s13 + 207*s12^2*s13^2 +
            270*s12*s13^3)*s23 + (180*s12^3 - 63*s12^2*s13 + 180*s12*s13^2)*
           s23^2) + p1q*p2q^3*(90*s12^2*s13^3 - 396*s12*s13^4 + 180*s13^5 +
          (-241*s12^2*s13^2 - 1265*s12*s13^3 - 734*s13^4)*s23 +
          (-682*s12*s13^2 - 1155*s13^3)*s23^2 - 401*s13^2*s23^3) +
        p1q^4*((243*s12^2*s13^2 + 153*s12*s13^3 - 90*s13^4)*s23 +
          (243*s12^2*s13 + 486*s12*s13^2 - 90*s13^3)*s23^2 +
          (90*s12^2 + 333*s12*s13)*s23^3 + 90*s12*s23^4) +
        p1q^2*p2q^2*(243*s12^2*s13^3 - 909*s12*s13^4 + 180*s13^5 +
          (-837*s12*s13^3 - 500*s13^4)*s23 + (243*s12^2*s13 + 592*s12*s13^2 +
            69*s13^3)*s23^2 + (646*s12*s13 + 832*s13^2)*s23^3 +
          403*s13*s23^4) + p1q^3*p2q*(243*s12^2*s13^3 - 333*s12*s13^4 +
          90*s13^5 + (-297*s12*s13^3 - 250*s13^4)*s23 +
          (-180*s12*s13^2 - 320*s13^3)*s23^2 + (-70*s12^2 - 313*s12*s13 -
            383*s13^2)*s23^3 + (-230*s12 - 403*s13)*s23^4 - 160*s23^5) +
        p3q^3*(p2q*(90*s12^5 + 153*s12^4*s13 + 126*s12^3*s13^2 +
            225*s12^2*s13^3 + 234*s12*s13^4 + 72*s13^5 +
            (270*s12^4 + 63*s12^3*s13 + 126*s12^2*s13^2 + 387*s12*s13^3 +
              54*s13^4)*s23 + (180*s12^3 - 180*s12^2*s13 + 243*s12*s13^2 -
              18*s13^3)*s23^2) + p1q*(-90*s12^5 + 63*s12^4*s13 -
            180*s12^3*s13^2 + 333*s12^2*s13^3 + (-340*s12^4 - 500*s12^3*s13 -
              624*s12^2*s13^2 + 490*s12*s13^3 - 88*s13^4)*s23 +
            (-770*s12^3 - 777*s12^2*s13 + 60*s12*s13^2 - 86*s13^3)*s23^2 +
            (-520*s12^2 + 146*s12*s13 - 158*s13^2)*s23^3)) +
        p3q^2*(p2q^2*(-27*s12^4*s13 - 27*s12^3*s13^2 + 99*s12^2*s13^3 +
            171*s12*s13^4 + 72*s13^5 + (-144*s12^3*s13 + 63*s12^2*s13^2 +
              261*s12*s13^3 + 54*s13^4)*s23 + (-117*s12^2*s13 +
              180*s12*s13^2 - 18*s13^3)*s23^2) + p1q*p2q*(270*s12^4*s13 -
            189*s12^3*s13^2 + 1206*s12^2*s13^3 - 333*s12*s13^4 +
            (-250*s12^4 - 639*s12^3*s13 - 1082*s12^2*s13^2 + 833*s12*s13^3 -
              268*s13^4)*s23 + (-770*s12^3 - 1359*s12^2*s13 - 339*s12*s13^2 +
              137*s13^3)*s23^2 + (-520*s12^2 - 180*s12*s13 - 75*s13^2)*
             s23^3) + p1q^2*(243*s12^4*s13 - 243*s12^3*s13^2 +
            846*s12^2*s13^3 + (270*s12^4 + 207*s12^3*s13 - 279*s12^2*s13^2 +
              1445*s12*s13^3)*s23 + (500*s12^3 + 480*s12^2*s13 +
              849*s12*s13^2 + 180*s13^3)*s23^2 + (730*s12^2 + 973*s12*s13 -
              223*s13^2)*s23^3 + (500*s12 - 83*s13)*s23^4)) +
        p3q*(p2q^3*(27*s12^3*s13^2 + 126*s12^2*s13^3 + 171*s12*s13^4 +
            72*s13^5 + (144*s12^2*s13^2 + 198*s12*s13^3 + 54*s13^4)*s23 +
            (117*s12*s13^2 - 18*s13^3)*s23^2) + p1q*p2q^2*(-270*s12^3*s13^2 +
            522*s12^2*s13^3 - 1206*s12*s13^4 + (-256*s12^3*s13 -
              843*s12^2*s13^2 - 1219*s12*s13^3 - 1094*s13^4)*s23 +
            (-582*s12^2*s13 - 1081*s12*s13^2 - 932*s13^3)*s23^2 +
            (-326*s12*s13 - 318*s13^2)*s23^3) + p1q^2*p2q*(-486*s12^3*s13^2 +
            1152*s12^2*s13^3 - 1026*s12*s13^4 + (-270*s12^3*s13 -
              423*s12^2*s13^2 + 671*s12*s13^3 - 500*s13^4)*s23 +
            (230*s12^3 + 759*s12^2*s13 + 1261*s12*s13^2 + 429*s13^3)*s23^2 +
            (730*s12^2 + 1619*s12*s13 + 609*s13^2)*s23^3 +
            (500*s12 + 320*s13)*s23^4) + p1q^3*(-243*s12^3*s13^2 +
            333*s12^2*s13^3 - 90*s12*s13^4 + (-486*s12^3*s13 -
              243*s12^2*s13^2 + 702*s12*s13^3 - 160*s13^4)*s23 +
            (-270*s12^3 - 603*s12^2*s13 + 459*s12*s13^2 - 140*s13^3)*s23^2 +
            (-340*s12^2 - 160*s12*s13 - 383*s13^2)*s23^3 +
            (-230*s12 - 403*s13)*s23^4 - 160*s23^5)))*
       PolyLog(2, s12/(s12 + s13 + s23)))/(72*p1q^3*p2q*s12*s13^3*s23 +
       144*p1q^2*p2q^2*s12*s13^3*s23 + 72*p1q*p2q^3*s12*s13^3*s23 +
       72*p1q*p3q^3*s12*s13^3*s23 + p3q^2*(144*p1q^2*s12*s13^3*s23 +
         216*p1q*p2q*s12*s13^3*s23) + p3q*(72*p1q^3*s12*s13^3*s23 +
         288*p1q^2*p2q*s12*s13^3*s23 + 216*p1q*p2q^2*s12*s13^3*s23)) +
     ((p3q^4*(72*s12^5 + 144*s12^4*s13 + 72*s12^3*s13^2 +
          (54*s12^4 + 54*s12^3*s13)*s23 - 18*s12^3*s23^2) +
        p2q^4*(90*s12^4*s13 + 180*s12^3*s13^2 + 180*s12^2*s13^3 +
          180*s12*s13^4 + 90*s13^5 + (270*s12^3*s13 + 207*s12^2*s13^2 +
            207*s12*s13^3 + 270*s13^4)*s23 + (180*s12^2*s13 - 63*s12*s13^2 +
            180*s13^3)*s23^2) + p1q*p2q^3*(333*s12^3*s13^2 -
          180*s12^2*s13^3 + 63*s12*s13^4 - 90*s13^5 +
          (-88*s12^4 + 490*s12^3*s13 - 624*s12^2*s13^2 - 500*s12*s13^3 -
            340*s13^4)*s23 + (-86*s12^3 + 60*s12^2*s13 - 777*s12*s13^2 -
            770*s13^3)*s23^2 + (-158*s12^2 + 146*s12*s13 - 520*s13^2)*
           s23^3) + p1q^4*((-90*s12^4 + 153*s12^3*s13 + 243*s12^2*s13^2)*
           s23 + (-90*s12^3 + 486*s12^2*s13 + 243*s12*s13^2)*s23^2 +
          (333*s12*s13 + 90*s13^2)*s23^3 + 90*s13*s23^4) +
        p1q^2*p2q^2*(846*s12^3*s13^2 - 243*s12^2*s13^3 + 243*s12*s13^4 +
          (1445*s12^3*s13 - 279*s12^2*s13^2 + 207*s12*s13^3 + 270*s13^4)*
           s23 + (180*s12^3 + 849*s12^2*s13 + 480*s12*s13^2 + 500*s13^3)*
           s23^2 + (-223*s12^2 + 973*s12*s13 + 730*s13^2)*s23^3 +
          (-83*s12 + 500*s13)*s23^4) + p1q^3*p2q*(-90*s12^4*s13 +
          333*s12^3*s13^2 - 243*s12^2*s13^3 + (-160*s12^4 + 702*s12^3*s13 -
            243*s12^2*s13^2 - 486*s12*s13^3)*s23 +
          (-140*s12^3 + 459*s12^2*s13 - 603*s12*s13^2 - 270*s13^3)*s23^2 +
          (-383*s12^2 - 160*s12*s13 - 340*s13^2)*s23^3 + (-403*s12 - 230*s13)*
           s23^4 - 160*s23^5) + p3q^3*(p2q*(72*s12^5 + 171*s12^4*s13 +
            126*s12^3*s13^2 + 27*s12^2*s13^3 + (54*s12^4 + 198*s12^3*s13 +
              144*s12^2*s13^2)*s23 + (-18*s12^3 + 117*s12^2*s13)*s23^2) +
          p1q*(180*s12^5 - 396*s12^4*s13 + 90*s12^3*s13^2 +
            (-734*s12^4 - 1265*s12^3*s13 - 241*s12^2*s13^2)*s23 +
            (-1155*s12^3 - 682*s12^2*s13)*s23^2 - 401*s12^2*s23^3)) +
        p3q^2*(p2q^2*(72*s12^5 + 171*s12^4*s13 + 99*s12^3*s13^2 -
            27*s12^2*s13^3 - 27*s12*s13^4 + (54*s12^4 + 261*s12^3*s13 +
              63*s12^2*s13^2 - 144*s12*s13^3)*s23 +
            (-18*s12^3 + 180*s12^2*s13 - 117*s12*s13^2)*s23^2) +
          p1q*p2q*(-1206*s12^4*s13 + 522*s12^3*s13^2 - 270*s12^2*s13^3 +
            (-1094*s12^4 - 1219*s12^3*s13 - 843*s12^2*s13^2 - 256*s12*s13^3)*
             s23 + (-932*s12^3 - 1081*s12^2*s13 - 582*s12*s13^2)*s23^2 +
            (-318*s12^2 - 326*s12*s13)*s23^3) +
          p1q^2*(180*s12^5 - 909*s12^4*s13 + 243*s12^3*s13^2 +
            (-500*s12^4 - 837*s12^3*s13)*s23 + (69*s12^3 + 592*s12^2*s13 +
              243*s12*s13^2)*s23^2 + (832*s12^2 + 646*s12*s13)*s23^3 +
            403*s12*s23^4)) + p3q*(p2q^3*(72*s12^5 + 234*s12^4*s13 +
            225*s12^3*s13^2 + 126*s12^2*s13^3 + 153*s12*s13^4 + 90*s13^5 +
            (54*s12^4 + 387*s12^3*s13 + 126*s12^2*s13^2 + 63*s12*s13^3 +
              270*s13^4)*s23 + (-18*s12^3 + 243*s12^2*s13 - 180*s12*s13^2 +
              180*s13^3)*s23^2) + p1q*p2q^2*(-333*s12^4*s13 +
            1206*s12^3*s13^2 - 189*s12^2*s13^3 + 270*s12*s13^4 +
            (-268*s12^4 + 833*s12^3*s13 - 1082*s12^2*s13^2 - 639*s12*s13^3 -
              250*s13^4)*s23 + (137*s12^3 - 339*s12^2*s13 - 1359*s12*s13^2 -
              770*s13^3)*s23^2 + (-75*s12^2 - 180*s12*s13 - 520*s13^2)*
             s23^3) + p1q^2*p2q*(-1026*s12^4*s13 + 1152*s12^3*s13^2 -
            486*s12^2*s13^3 + (-500*s12^4 + 671*s12^3*s13 - 423*s12^2*s13^2 -
              270*s12*s13^3)*s23 + (429*s12^3 + 1261*s12^2*s13 +
              759*s12*s13^2 + 230*s13^3)*s23^2 + (609*s12^2 + 1619*s12*s13 +
              730*s13^2)*s23^3 + (320*s12 + 500*s13)*s23^4) +
          p1q^3*(90*s12^5 - 333*s12^4*s13 + 243*s12^3*s13^2 +
            (-250*s12^4 - 297*s12^3*s13)*s23 + (-320*s12^3 - 180*s12^2*s13)*
             s23^2 + (-383*s12^2 - 313*s12*s13 - 70*s13^2)*s23^3 +
            (-403*s12 - 230*s13)*s23^4 - 160*s23^5)))*
       PolyLog(2, s13/(s12 + s13 + s23)))/(72*p1q^3*p2q*s12^3*s13*s23 +
       144*p1q^2*p2q^2*s12^3*s13*s23 + 72*p1q*p2q^3*s12^3*s13*s23 +
       72*p1q*p3q^3*s12^3*s13*s23 + p3q^2*(144*p1q^2*s12^3*s13*s23 +
         216*p1q*p2q*s12^3*s13*s23) + p3q*(72*p1q^3*s12^3*s13*s23 +
         288*p1q^2*p2q*s12^3*s13*s23 + 216*p1q*p2q^2*s12^3*s13*s23)) +
     ((p3q^4*(90*s12^7 + 180*s12^6*s13 + 252*s12^5*s13^2 + 324*s12^4*s13^3 +
          162*s12^3*s13^4 + (270*s12^6 + 207*s12^5*s13 + 261*s12^4*s13^2 +
            324*s12^3*s13^3)*s23 + (180*s12^5 - 63*s12^4*s13 +
            162*s12^3*s13^2)*s23^2) + p2q^4*(162*s12^4*s13^3 +
          324*s12^3*s13^4 + 252*s12^2*s13^5 + 180*s12*s13^6 + 90*s13^7 +
          (324*s12^3*s13^3 + 261*s12^2*s13^4 + 207*s12*s13^5 + 270*s13^6)*
           s23 + (162*s12^2*s13^3 - 63*s12*s13^4 + 180*s13^5)*s23^2) +
        p1q*p2q^3*(90*s12^4*s13^3 - 63*s12^3*s13^4 + 63*s12*s13^6 -
          90*s13^7 + (-293*s12^4*s13^2 - 703*s12^3*s13^3 - 1322*s12^2*s13^4 -
            500*s12*s13^5 - 340*s13^6)*s23 + (-696*s12^3*s13^2 -
            1023*s12^2*s13^3 - 777*s12*s13^4 - 770*s13^5)*s23^2 +
          (-523*s12^2*s13^2 + 146*s12*s13^3 - 520*s13^4)*s23^3) +
        p1q^4*((153*s12^4*s13^2 + 306*s12^3*s13^3 + 153*s12^2*s13^4)*s23 +
          (243*s12^4*s13 + 396*s12^3*s13^2 + 396*s12^2*s13^3 + 243*s12*s13^4)*
           s23^2 + (90*s12^4 + 333*s12^3*s13 + 333*s12*s13^3 + 90*s13^4)*
           s23^3 + (90*s12^3 + 90*s13^3)*s23^4) + p1q^2*p2q^2*
         (243*s12^4*s13^3 - 63*s12^3*s13^4 - 63*s12^2*s13^5 + 243*s12*s13^6 +
          (608*s12^3*s13^3 - 779*s12^2*s13^4 + 207*s12*s13^5 + 270*s13^6)*
           s23 + (243*s12^4*s13 + 772*s12^3*s13^2 + 918*s12^2*s13^3 +
            480*s12*s13^4 + 500*s13^5)*s23^2 +
          (646*s12^3*s13 + 609*s12^2*s13^2 + 973*s12*s13^3 + 730*s13^4)*
           s23^3 + (403*s12^2*s13 - 83*s12*s13^2 + 500*s13^3)*s23^4) +
        p1q^3*p2q*(153*s12^4*s13^3 - 153*s12^2*s13^5 +
          (-160*s12^4*s13^2 + 405*s12^3*s13^3 - 493*s12^2*s13^4 -
            486*s12*s13^5)*s23 + (-320*s12^3*s13^2 + 139*s12^2*s13^3 -
            603*s12*s13^4 - 270*s13^5)*s23^2 + (-70*s12^4 - 313*s12^3*s13 -
            766*s12^2*s13^2 - 160*s12*s13^3 - 340*s13^4)*s23^3 +
          (-230*s12^3 - 403*s12^2*s13 - 403*s12*s13^2 - 230*s13^3)*s23^4 +
          (-160*s12^2 - 160*s13^2)*s23^5) +
        p3q^3*(p2q*(90*s12^7 + 153*s12^6*s13 + 198*s12^5*s13^2 +
            396*s12^4*s13^3 + 360*s12^3*s13^4 + 99*s12^2*s13^5 +
            (270*s12^6 + 63*s12^5*s13 + 180*s12^4*s13^2 + 585*s12^3*s13^3 +
              198*s12^2*s13^4)*s23 + (180*s12^5 - 180*s12^4*s13 +
              225*s12^3*s13^2 + 99*s12^2*s13^3)*s23^2) +
          p1q*(-90*s12^7 + 63*s12^6*s13 - 63*s12^4*s13^3 + 90*s12^3*s13^4 +
            (-340*s12^6 - 500*s12^5*s13 - 1322*s12^4*s13^2 - 703*s12^3*s13^
                3 - 293*s12^2*s13^4)*s23 + (-770*s12^5 - 777*s12^4*s13 -
              1023*s12^3*s13^2 - 696*s12^2*s13^3)*s23^2 +
            (-520*s12^4 + 146*s12^3*s13 - 523*s12^2*s13^2)*s23^3)) +
        p3q^2*(p2q^2*(-27*s12^6*s13 + 45*s12^5*s13^2 + 270*s12^4*s13^3 +
            270*s12^3*s13^4 + 45*s12^2*s13^5 - 27*s12*s13^6 +
            (-144*s12^5*s13 + 117*s12^4*s13^2 + 522*s12^3*s13^3 +
              117*s12^2*s13^4 - 144*s12*s13^5)*s23 +
            (-117*s12^4*s13 + 162*s12^3*s13^2 + 162*s12^2*s13^3 -
              117*s12*s13^4)*s23^2) + p1q*p2q*(270*s12^6*s13 -
            189*s12^5*s13^2 + 189*s12^3*s13^4 - 270*s12^2*s13^5 +
            (-250*s12^6 - 639*s12^5*s13 - 2140*s12^4*s13^2 - 314*s12^3*s13^
                3 - 1075*s12^2*s13^4 - 256*s12*s13^5)*s23 +
            (-770*s12^5 - 1359*s12^4*s13 - 1199*s12^3*s13^2 -
              872*s12^2*s13^3 - 582*s12*s13^4)*s23^2 +
            (-520*s12^4 - 180*s12^3*s13 - 357*s12^2*s13^2 - 326*s12*s13^3)*
             s23^3) + p1q^2*(243*s12^6*s13 - 63*s12^5*s13^2 -
            63*s12^4*s13^3 + 243*s12^3*s13^4 + (270*s12^6 + 207*s12^5*s13 -
              779*s12^4*s13^2 + 608*s12^3*s13^3)*s23 +
            (500*s12^5 + 480*s12^4*s13 + 918*s12^3*s13^2 + 772*s12^2*s13^3 +
              243*s12*s13^4)*s23^2 + (730*s12^4 + 973*s12^3*s13 +
              609*s12^2*s13^2 + 646*s12*s13^3)*s23^3 +
            (500*s12^3 - 83*s12^2*s13 + 403*s12*s13^2)*s23^4)) +
        p3q*(p2q^3*(99*s12^5*s13^2 + 360*s12^4*s13^3 + 396*s12^3*s13^4 +
            198*s12^2*s13^5 + 153*s12*s13^6 + 90*s13^7 +
            (198*s12^4*s13^2 + 585*s12^3*s13^3 + 180*s12^2*s13^4 +
              63*s12*s13^5 + 270*s13^6)*s23 + (99*s12^3*s13^2 +
              225*s12^2*s13^3 - 180*s12*s13^4 + 180*s13^5)*s23^2) +
          p1q*p2q^2*(-270*s12^5*s13^2 + 189*s12^4*s13^3 - 189*s12^2*s13^5 +
            270*s12*s13^6 + (-256*s12^5*s13 - 1075*s12^4*s13^2 -
              314*s12^3*s13^3 - 2140*s12^2*s13^4 - 639*s12*s13^5 - 250*s13^6)*
             s23 + (-582*s12^4*s13 - 872*s12^3*s13^2 - 1199*s12^2*s13^3 -
              1359*s12*s13^4 - 770*s13^5)*s23^2 + (-326*s12^3*s13 -
              357*s12^2*s13^2 - 180*s12*s13^3 - 520*s13^4)*s23^3) +
          p1q^2*p2q*(-486*s12^5*s13^2 + 126*s12^4*s13^3 + 126*s12^3*s13^4 -
            486*s12^2*s13^5 + (-270*s12^5*s13 - 923*s12^4*s13^2 +
              1342*s12^3*s13^3 - 923*s12^2*s13^4 - 270*s12*s13^5)*s23 +
            (230*s12^5 + 759*s12^4*s13 + 1690*s12^3*s13^2 + 1690*s12^2*s13^
                3 + 759*s12*s13^4 + 230*s13^5)*s23^2 +
            (730*s12^4 + 1619*s12^3*s13 + 1218*s12^2*s13^2 + 1619*s12*s13^3 +
              730*s13^4)*s23^3 + (500*s12^3 + 320*s12^2*s13 + 320*s12*s13^2 +
              500*s13^3)*s23^4) + p1q^3*(-153*s12^5*s13^2 + 153*s12^3*s13^4 +
            (-486*s12^5*s13 - 493*s12^4*s13^2 + 405*s12^3*s13^3 -
              160*s12^2*s13^4)*s23 + (-270*s12^5 - 603*s12^4*s13 +
              139*s12^3*s13^2 - 320*s12^2*s13^3)*s23^2 +
            (-340*s12^4 - 160*s12^3*s13 - 766*s12^2*s13^2 - 313*s12*s13^3 -
              70*s13^4)*s23^3 + (-230*s12^3 - 403*s12^2*s13 - 403*s12*s13^2 -
              230*s13^3)*s23^4 + (-160*s12^2 - 160*s13^2)*s23^5)))*
       PolyLog(2, s23/(s12 + s13 + s23)))/(72*p1q^3*p2q*s12^3*s13^3*s23 +
       144*p1q^2*p2q^2*s12^3*s13^3*s23 + 72*p1q*p2q^3*s12^3*s13^3*s23 +
       72*p1q*p3q^3*s12^3*s13^3*s23 + p3q^2*(144*p1q^2*s12^3*s13^3*s23 +
         216*p1q*p2q*s12^3*s13^3*s23) + p3q*(72*p1q^3*s12^3*s13^3*s23 +
         288*p1q^2*p2q*s12^3*s13^3*s23 + 216*p1q*p2q^2*s12^3*s13^3*s23)) +
     ((p2q^2*p3q*(-9*s12^3 - 18*s12^2*s13 - 9*s12*s13^2 +
          (-18*s12^2 - 18*s12*s13)*s23 - 9*s12*s23^2) +
        p3q^3*(-9*s12^3 - 18*s12^2*s13 - 9*s12*s13^2 +
          (-18*s12^2 - 18*s12*s13)*s23 - 9*s12*s23^2) +
        p2q^3*(-9*s12^2*s13 - 18*s12*s13^2 - 9*s13^3 +
          (-18*s12*s13 - 18*s13^2)*s23 - 9*s13*s23^2) +
        p2q*p3q^2*(-9*s12^2*s13 - 18*s12*s13^2 - 9*s13^3 +
          (-18*s12*s13 - 18*s13^2)*s23 - 9*s13*s23^2))*
       PolyLog(2, -((-(p2q*s12) - p3q*s12 - p2q*s13 - p3q*s13 + p1q*s23)/
          ((p2q + p3q)*(s12 + s13)))))/(4*p1q^3*s12*s13*s23 +
       8*p1q^2*p2q*s12*s13*s23 + 4*p1q*p2q^2*s12*s13*s23 +
       4*p1q*p3q^2*s12*s13*s23 + p3q*(8*p1q^2*s12*s13*s23 +
         8*p1q*p2q*s12*s13*s23)) +
     ((p2q^2*p3q*(9*s12^3 + 18*s12^2*s13 + 9*s12*s13^2 +
          (18*s12^2 + 18*s12*s13)*s23 + 9*s12*s23^2) +
        p3q^3*(9*s12^3 + 18*s12^2*s13 + 9*s12*s13^2 + (18*s12^2 + 18*s12*s13)*
           s23 + 9*s12*s23^2) + p2q^3*(9*s12^2*s13 + 18*s12*s13^2 + 9*s13^3 +
          (18*s12*s13 + 18*s13^2)*s23 + 9*s13*s23^2) +
        p2q*p3q^2*(9*s12^2*s13 + 18*s12*s13^2 + 9*s13^3 +
          (18*s12*s13 + 18*s13^2)*s23 + 9*s13*s23^2))*
       PolyLog(2, -((-(p2q*s12) - p3q*s12 - p2q*s13 - p3q*s13 + p1q*s23)/
          ((p1q + p2q + p3q)*(s12 + s13)))))/(4*p1q^3*s12*s13*s23 +
       8*p1q^2*p2q*s12*s13*s23 + 4*p1q*p2q^2*s12*s13*s23 +
       4*p1q*p3q^2*s12*s13*s23 + p3q*(8*p1q^2*s12*s13*s23 +
         8*p1q*p2q*s12*s13*s23)) +
     ((p2q^3*(-9*s12^2*s13 - 18*s12*s13^2 - 9*s13^3 +
          (-18*s12*s13 - 18*s13^2)*s23 - 9*s13*s23^2) +
        p1q*p2q^2*((s12^2 + 2*s12*s13 + s13^2)*s23 + (2*s12 + 2*s13)*s23^2 +
          s23^3) + p3q^2*(p2q*(-9*s12^2*s13 - 18*s12*s13^2 - 9*s13^3 +
            (-18*s12*s13 - 18*s13^2)*s23 - 9*s13*s23^2) +
          p1q*((s12^2 + 2*s12*s13 + s13^2)*s23 + (2*s12 + 2*s13)*s23^2 +
            s23^3)))*PolyLog(2, -((p3q*s12 - p1q*s13 - p2q*s13 - p1q*s23 -
           p2q*s23)/((p1q + p2q)*(s13 + s23)))))/(4*p1q^3*s12*s13*s23 +
       8*p1q^2*p2q*s12*s13*s23 + 4*p1q*p2q^2*s12*s13*s23 +
       4*p1q*p3q^2*s12*s13*s23 + p3q*(8*p1q^2*s12*s13*s23 +
         8*p1q*p2q*s12*s13*s23)) +
     ((p2q^3*(9*s12^2*s13 + 18*s12*s13^2 + 9*s13^3 + (18*s12*s13 + 18*s13^2)*
           s23 + 9*s13*s23^2) + p1q*p2q^2*((-s12^2 - 2*s12*s13 - s13^2)*s23 +
          (-2*s12 - 2*s13)*s23^2 - s23^3) +
        p3q^2*(p2q*(9*s12^2*s13 + 18*s12*s13^2 + 9*s13^3 +
            (18*s12*s13 + 18*s13^2)*s23 + 9*s13*s23^2) +
          p1q*((-s12^2 - 2*s12*s13 - s13^2)*s23 + (-2*s12 - 2*s13)*s23^2 -
            s23^3)))*PolyLog(2, -((p3q*s12 - p1q*s13 - p2q*s13 - p1q*s23 -
           p2q*s23)/((p1q + p2q + p3q)*(s13 + s23)))))/
      (4*p1q^3*s12*s13*s23 + 8*p1q^2*p2q*s12*s13*s23 +
       4*p1q*p2q^2*s12*s13*s23 + 4*p1q*p3q^2*s12*s13*s23 +
       p3q*(8*p1q^2*s12*s13*s23 + 8*p1q*p2q*s12*s13*s23)) +
     ((p2q^2*p3q*(-9*s12^3 - 18*s12^2*s13 - 9*s12*s13^2 +
          (-18*s12^2 - 18*s12*s13)*s23 - 9*s12*s23^2) +
        p3q^3*(-9*s12^3 - 18*s12^2*s13 - 9*s12*s13^2 +
          (-18*s12^2 - 18*s12*s13)*s23 - 9*s12*s23^2) +
        p1q*p2q^2*((s12^2 + 2*s12*s13 + s13^2)*s23 + (2*s12 + 2*s13)*s23^2 +
          s23^3) + p1q*p3q^2*((s12^2 + 2*s12*s13 + s13^2)*s23 +
          (2*s12 + 2*s13)*s23^2 + s23^3))*PolyLog(2,
        -((-(p1q*s12) - p3q*s12 + p2q*s13 - p1q*s23 - p3q*s23)/
          ((p1q + p3q)*(s12 + s23)))))/(4*p1q^3*s12*s13*s23 +
       8*p1q^2*p2q*s12*s13*s23 + 4*p1q*p2q^2*s12*s13*s23 +
       4*p1q*p3q^2*s12*s13*s23 + p3q*(8*p1q^2*s12*s13*s23 +
         8*p1q*p2q*s12*s13*s23)) +
     ((p2q^2*p3q*(9*s12^3 + 18*s12^2*s13 + 9*s12*s13^2 +
          (18*s12^2 + 18*s12*s13)*s23 + 9*s12*s23^2) +
        p3q^3*(9*s12^3 + 18*s12^2*s13 + 9*s12*s13^2 + (18*s12^2 + 18*s12*s13)*
           s23 + 9*s12*s23^2) + p1q*p2q^2*((-s12^2 - 2*s12*s13 - s13^2)*s23 +
          (-2*s12 - 2*s13)*s23^2 - s23^3) + p1q*p3q^2*
         ((-s12^2 - 2*s12*s13 - s13^2)*s23 + (-2*s12 - 2*s13)*s23^2 - s23^3))*
       PolyLog(2, -((-(p1q*s12) - p3q*s12 + p2q*s13 - p1q*s23 - p3q*s23)/
          ((p1q + p2q + p3q)*(s12 + s23)))))/(4*p1q^3*s12*s13*s23 +
       8*p1q^2*p2q*s12*s13*s23 + 4*p1q*p2q^2*s12*s13*s23 +
       4*p1q*p3q^2*s12*s13*s23 + p3q*(8*p1q^2*s12*s13*s23 +
         8*p1q*p2q*s12*s13*s23)));
