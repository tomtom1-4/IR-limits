#ifndef COLOR_HEADER
#define COLOR_HEADER

#include <vector>
#include <complex>
#include "amplitude.hpp"
#include "recola.hpp"
#include "array_manpulation.hpp"

static std::complex<double> lam1[9] = {0, 1, 0,
                                1, 0, 0,
                                0, 0, 0};
static std::complex<double> lam2[9] = {0, -I, 0,
                                I,  0, 0,
                                0,  0, 0};
static std::complex<double> lam3[9] = {1,  0, 0,
                                0, -1, 0,
                                0,  0, 0};
static std::complex<double> lam4[9] = {0, 0, 1,
                                0, 0, 0,
                                1, 0, 0};
static std::complex<double> lam5[9] = {0, 0, -I,
                                0, 0, 0,
                                I, 0, 0};
static std::complex<double> lam6[9] = {0, 0, 0,
                                0, 0, 1,
                                0, 1, 0};
static std::complex<double> lam7[9] = {0, 0, 0,
                                0, 0, -I,
                                0, I, 0};
static std::complex<double> lam8[9] = {1/sqrt(3), 0, 0,
                                0, 1/sqrt(3), 0,
                                0, 0, -2/sqrt(3)};
static std::complex<double> lam0[9] = {2, 0, 0,
                                0, 2, 0,
                                0, 0, 2};

static std::complex<double>* lam[8] = {lam1, lam2, lam3, lam4, lam5, lam6, lam7, lam8};
std::complex<double> cOlT(int, int, int);
static std::complex<double> fabc[8][64] = {{0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,-1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.5,0.,0.,0.,0.,0.,0.,-0.5,0.,0.,0.,0.,0.,0.,0.5,0.,0.,0.,0.,0.,0.,-0.5,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.},
{0.,0.,-1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.5,0.,0.,0.,0.,0.,0.,0.,0.,0.5,0.,0.,0.,0.,-0.5,0.,0.,0.,0.,0.,0.,0.,0.,-0.5,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.},
{0.,1.,0.,0.,0.,0.,0.,0.,-1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.5,0.,0.,0.,0.,0.,0.,-0.5,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,-0.5,0.,0.,0.,0.,0.,0.,0.5,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.},
{0.,0.,0.,0.,0.,0.,-0.5,0.,0.,0.,0.,0.,0.,-0.5,0.,0.,0.,0.,0.,0.,-0.5,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.5,0.,0.,0.,0.,std::sqrt(3.)/2.,0.,0.5,0.,0.,0.,0.,0.,0.,0.5,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,-std::sqrt(3.)/2.,0.,0.,0.},
{0.,0.,0.,0.,0.,0.5,0.,0.,0.,0.,0.,0.,0.,0.,-0.5,0.,0.,0.,0.,0.5,0.,0.,0.,0.,0.,0.,-0.5,0.,0.,0.,0.,-std::sqrt(3.)/2.,0.,0.,0.,0.,0.,0.,0.,0.,-0.5,0.,0.,0.,0.,0.,0.,0.,0.,0.5,0.,0.,0.,0.,0.,0.,0.,0.,0.,std::sqrt(3.)/2.,0.,0.,0.,0.},
{0.,0.,0.,0.,-0.5,0.,0.,0.,0.,0.,0.,0.5,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.5,0.,0.,-0.5,0.,0.,0.,0.,0.,0.,0.5,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,-0.5,0.,0.,0.,0.,std::sqrt(3.)/2.,0.,0.,0.,0.,0.,0.,-std::sqrt(3.)/2.,0.},
{0.,0.,0.,0.5,0.,0.,0.,0.,0.,0.,0.,0.,0.5,0.,0.,0.,0.,0.,0.,0.,0.,-0.5,0.,0.,-0.5,0.,0.,0.,0.,0.,0.,0.,0.,-0.5,0.,0.,0.,0.,0.,0.,0.,0.,0.5,0.,0.,0.,0.,-std::sqrt(3.)/2.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,std::sqrt(3.)/2.,0.,0.},
{0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,std::sqrt(3.)/2.,0.,0.,0.,0.,0.,0.,-std::sqrt(3.)/2.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,std::sqrt(3.)/2.,0.,0.,0.,0.,0.,0.,-std::sqrt(3.)/2.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.}};


std::complex<double> kronecker(int c1, int c2);
std::vector<std::vector<int> > non0hel(int, int, std::string, amplitude&);
std::complex<double> colorflow2color(int*, int*, amplitude&, int, std::string, int);
std::vector<std::vector<int> > non0col(int, int, std::string, amplitude&, std::vector<std::vector<int> >);

#endif